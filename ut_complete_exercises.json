[
	{
		"title": "How Edabit Works",
		"description": "<p><span>This is an introduction to how challenges on Edabit work. In the </span><strong><span>Code tab above</span></strong><span> you'll see a starter function that looks like this:</span></p><pre><code>function hello() {\n\n}</code></pre><p><span>All you have to do is type </span><code>return \"hello edabit.com\"</code><span> between the curly braces </span><code>{ }</code><span> and then click the </span><strong><span>Check</span></strong><span> button. If you did this correctly, the button will turn red and say </span><strong><span>SUBMIT FINAL</span></strong><span>. Click it and see what happens.</span></p><h3><span>Notes</span></h3><ul><li><span>The returned string must be in </span><strong><span>all lowercase</span></strong><span> letters.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(hello(), \"hello edabit.com\", \"Did you *return* the result?\")"
		],
		"starterFn": [
			"1\nfunction hello() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ARr5tA458o2tC9FTN"
	},
	{
		"title": "Return the Sum of Two Numbers",
		"description": "<p><span>Create a function that takes two numbers as arguments and </span><code>return</code><span> their sum.</span></p><h3><span>Examples</span></h3><pre><code>addition(3, 2) ➞ 5\n\naddition(-3, -6) ➞ -9\n\naddition(7, 3) ➞ 10</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "formateur",
		"publishedByUrl": "https://edabit.com/user/T7CJWkZyYudtwFN64",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(addition(2, 3), 5)",
			"Test.assertEquals(addition(-3, -6), -9)",
			"Test.assertEquals(addition(7, 3), 10)",
			"Test.assertEquals(addition(88, 2), 90)"
		],
		"starterFn": [
			"1\nfunction addition(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3LpBLgNRyaHMvNb4j"
	},
	{
		"title": "Convert Minutes into Seconds",
		"description": "<p><span>Write a function that takes an integer </span><code>minutes</code><span> and converts it to seconds.</span></p><h3><span>Examples</span></h3><pre><code>convert(5) ➞ 300\n\nconvert(3) ➞ 180\n\nconvert(2) ➞ 120</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(convert(6), 360)",
			"Test.assertEquals(convert(4), 240)",
			"Test.assertEquals(convert(8), 480)",
			"Test.assertEquals(convert(60), 3600)"
		],
		"starterFn": [
			"1\nfunction convert(minutes) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8q54MKnRrm89pSLmW"
	},
	{
		"title": "Return the Next Number from the Integer Passed",
		"description": "<p><span>Create a function that takes a number as an argument, increments the number by +1 and returns the result.</span></p><h3><span>Examples</span></h3><pre><code>addition(0) ➞ 1\n\naddition(9) ➞ 10\n\naddition(-3) ➞ -2</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(addition(2), 3, \"2 plus 1 equals 3.\")",
			"Test.assertEquals(addition(-9), -8, \"-8 plus 1 equals -9.\")",
			"Test.assertEquals(addition(0), 1, \"0 plus 1 equals 1.\")",
			"Test.assertEquals(addition(999), 1000, \"999 plus 1 equals 1000.\")",
			"Test.assertEquals(addition(73), 74, \"73 plus 1 equals 74.\")"
		],
		"starterFn": [
			"1\nfunction addition(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NAQhEoxbofPidLxm9"
	},
	{
		"title": "Area of a Triangle",
		"description": "<p><span>Write a function that takes the base and height of a triangle and </span><code>return</code><span> its area.</span></p><h3><span>Examples</span></h3><pre><code>triArea(3, 2) ➞ 3\n\ntriArea(7, 4) ➞ 14\n\ntriArea(10, 10) ➞ 50</code></pre><h3><span>Notes</span></h3><ul><li><span>The area of a triangle is: </span><code>(base * height) / 2</code></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "EstoniaAndEnglish",
		"publishedByUrl": "https://edabit.com/user/xv7Xah96onFoKf5Nm",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(triArea(3, 2), 3)",
			"Test.assertEquals(triArea(5, 4), 10)",
			"Test.assertEquals(triArea(10, 10), 50)",
			"Test.assertEquals(triArea(0, 60), 0)",
			"Test.assertEquals(triArea(12, 11), 66)"
		],
		"starterFn": [
			"1\nfunction triArea(base, height) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3CaszbdZYGN4otQD8"
	},
	{
		"title": "Minimal I: If Boolean Then Boolean",
		"description": "<p><span>In this series we're going to see common </span><strong><span>redundancies</span></strong><span> and </span><strong><span>superfluities</span></strong><span> that make our code unnecessarily complicated and less readable, and we're going to learn how to avoid them.</span></p><p><span>In line with the spirit of the series, we can summarize the general rules of minimalist code in two </span><strong><span>simple principles</span></strong><span>:</span></p><ul><li><span>Keep your code </span><strong><span>clean</span></strong><span> and </span><strong><span>readable</span></strong><span>.</span></li><li><span>While not violating the first principle: </span><strong><span>get rid of everything superfluous</span></strong><span>.</span></li></ul><p><span>In order to achieve this you should:</span></p><ul><li><span>Deepen your knowledge of </span><strong><span>logics</span></strong><span>.</span></li><li><span>Deepen your </span><strong><span>understanding</span></strong><span> of the particular </span><strong><span>language</span></strong><span> you're coding with.</span></li></ul><p><span>I would also add: </span><em><span>observe and learn from the pros</span></em><span>. Make a habit of checking the </span><strong><span>Solutions tab</span></strong><span> after solving a challenge on Edabit. There is </span><strong><span>absolutely nothing wrong</span></strong><span> in assimilating features of someone else's coding style, especially if yours is not yet fully developed.</span></p><h3><span>Goal</span></h3><p><span>In the </span><strong><span>Code</span></strong><span> tab you will find a code that is missing a single character in order to pass the tests. However, </span><strong><span>YOUR GOAL</span></strong><span> is to submit a function as </span><strong><span>minimalist</span></strong><span> as possible. Use the tips in the </span><strong><span>Tips</span></strong><span> section down below.</span></p><p><span>Write a function that returns </span><code>true</code><span> if the given integer is </span><strong><span>even</span></strong><span>, and </span><code>false</code><span> if it's </span><strong><span>odd</span></strong><span>.</span></p><h3><span>Tips</span></h3><p><em><strong><span>Using an if statement</span></strong><span> in order to </span><strong><span>return boolean</span></strong><span> or to </span><strong><span>set a variable to a boolean</span></strong><span> is redundant.</span></em></p><p><span>A function that returns </span><code>true</code><span> if a person's age is 18 or greater and </span><code>false</code><span> otherwise, could be written as:</span></p><pre><code>function legalAge(age) {\n  if (age &gt;= 18) {\n    return true\n  }\n  else {\n    return false\n  }\n}</code></pre><p><span>Notice that </span><code>age &gt;= 18</code><span> will already give us a boolean (</span><code>true</code><span> or </span><code>false</code><span>). This means that the function can be written in a much simpler and cleaner way:</span></p><pre><code>function legalAge(age) {\n  return age &gt;= 18\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>This is an open series: there isn't a definite list of features for the challenges. Please, do not hesitate to leave your </span><strong><span>suggestions</span></strong><span> in the </span><strong><span>Comment tab</span></strong><span>.</span></li><li><em><strong><span>Readability</span></strong></em><span> is indeed a subjective concept. </span><strong><span>Let's discuss it!</span></strong><span> Feel free to leave your opinion in the </span><strong><span>Comments tab</span></strong><span>.</span></li></ul>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isEven(2), true)",
			"Test.assertEquals(isEven(3), false)",
			"Test.assertEquals(isEven(10), true)",
			"Test.assertEquals(isEven(31), false)",
			"Test.assertEquals(isEven(666), true)",
			"Test.assertEquals(isEven(777), false)",
			"Test.assertEquals(isEven(3482034), true)",
			"Test.assertEquals(isEven(3482035), false)"
		],
		"starterFn": [
			"1\nfunction isEven(n) {",
			"2\n  if (n % 2 == 0)",
			"3\n    return true;",
			"4\n  else if (n % 2 == 1)",
			"5\n    return false;",
			"6\n}"
		],
		"url": "https://edabit.com/challenge/bRBSvWtCXws329qmF"
	},
	{
		"title": "Return the First Element in an Array",
		"description": "<p><span>Create a function that takes an array and returns the first element.</span></p><h3><span>Examples</span></h3><pre><code>getFirstValue([1, 2, 3]) ➞ 1\n\ngetFirstValue([80, 5, 100]) ➞ 80\n\ngetFirstValue([-500, 0, 50]) ➞ -500</code></pre><h3><span>Notes</span></h3><p><span>The first element in an array always has an index of 0.</span></p>",
		"publishedBy": "Harsh Gupta",
		"publishedByUrl": "https://edabit.com/user/Wpn95NqWxncQrwNgz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(getFirstValue([1, 2, 3]), 1)",
			"Test.assertEquals(getFirstValue([80, 5, 100]), 80)",
			"Test.assertEquals(getFirstValue([-500, 0, 50]), -500)",
			"Test.assertEquals(getFirstValue([5, 2, 3]), 5)",
			"Test.assertEquals(getFirstValue([75675, 5, 100]), 75675)",
			"Test.assertEquals(getFirstValue([-52320, 0, 50]), -52320)"
		],
		"starterFn": [
			"1\nfunction getFirstValue(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QaApgtePE6QrCZ64o"
	},
	{
		"title": "Convert Hours into Seconds",
		"description": "<p><span>Write a function that converts </span><code>hours</code><span> into seconds.</span></p><h3><span>Examples</span></h3><pre><code>howManySeconds(2) ➞ 7200\n\nhowManySeconds(10) ➞ 36000\n\nhowManySeconds(24) ➞ 86400</code></pre><h3><span>Notes</span></h3><ul><li><span>60 seconds in a minute, 60 minutes in an hour</span></li><li><span>Don't forget to </span><code>return</code><span> your answer.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(howManySeconds(2), 7200)",
			"Test.assertEquals(howManySeconds(10), 36000)",
			"Test.assertEquals(howManySeconds(24), 86400)",
			"Test.assertEquals(howManySeconds(36), 129600)"
		],
		"starterFn": [
			"1\nfunction howManySeconds(hours) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6AnQqiEjkJdZrWhPS"
	},
	{
		"title": "Maximum Edge of a Triangle",
		"description": "<p><span>Create a function that finds the maximum range of a triangle's third edge, where the side lengths are all integers.</span></p><h3><span>Examples</span></h3><pre><code>nextEdge(8, 10) ➞ 17\n\nnextEdge(5, 7) ➞ 11\n\nnextEdge(9, 2) ➞ 10</code></pre><h3><span>Notes</span></h3><ul><li><code>(side1 + side2) - 1</code><span> = maximum range of third edge.</span></li><li><span>The side lengths of the triangle are positive integers.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(nextEdge(5, 4), 8)",
			"Test.assertEquals(nextEdge(8, 3), 10)",
			"Test.assertEquals(nextEdge(7, 9), 15)",
			"Test.assertEquals(nextEdge(10, 4), 13)",
			"Test.assertEquals(nextEdge(7, 2), 8)"
		],
		"starterFn": [
			"1\nfunction nextEdge(side1, side2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nhXofMMyrowMyr9Nv"
	},
	{
		"title": "Find the Perimeter of a Rectangle",
		"description": "<p><span>Create a function that takes </span><code>length</code><span> and </span><code>width</code><span> and finds the perimeter of a rectangle.</span></p><h3><span>Examples</span></h3><pre><code>findPerimeter(6, 7) ➞ 26\n\nfindPerimeter(20, 10) ➞ 60\n\nfindPerimeter(2, 9) ➞ 22</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you're stuck, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, find solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "SeasideCoder9",
		"publishedByUrl": "https://edabit.com/user/6Bf52CC4zkSmZrpbB",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(findPerimeter(6, 7), 26)",
			"Test.assertEquals(findPerimeter(20, 10), 60)",
			"Test.assertEquals(findPerimeter(2, 9), 22)"
		],
		"starterFn": [
			"1\nfunction findPerimeter(length, width) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XnJ24rWW7iJkNrtsh"
	},
	{
		"title": "Return the Remainder from Two Numbers",
		"description": "<p><span>There is a single operator in JavaScript, capable of providing the remainder of a division operation. Two numbers are passed as parameters. The first parameter divided by the second parameter will have a remainder, possibly zero. Return that value.</span></p><h3><span>Examples</span></h3><pre><code>remainder(1, 3) ➞ 1\n\nremainder(3, 4) ➞ 3\n\nremainder(-9, 45) ➞ -9\n\nremainder(5, 5) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>The tests only use positive and negative integers.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "shahednasser",
		"publishedByUrl": "https://edabit.com/user/qfZTGo3mgRsbyKka7",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(remainder(7, 2), 1)",
			"Test.assertEquals(remainder(3, 4), 3)",
			"Test.assertEquals(remainder(-9, 45), -9)",
			"Test.assertEquals(remainder(5, 5), 0)"
		],
		"starterFn": [
			"1\nfunction remainder(x, y) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Q2j5FTFtsk7PdzrQk"
	},
	{
		"title": "On/Off Switches",
		"description": "<p><span>Create a function that returns how many possible outcomes can come from a certain number of switches (on / off).</span></p><h3><span>Examples</span></h3><pre><code>posCom(1) ➞ 2\n\nposCom(3) ➞ 8\n\nposCom(10) ➞ 1024</code></pre><h3><span>Notes</span></h3><p><span>All numbers will be whole and positive.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(posCom(5), 32)",
			"Test.assertEquals(posCom(4), 16)",
			"Test.assertEquals(posCom(3), 8)",
			"Test.assertEquals(posCom(2), 4)",
			"Test.assertEquals(posCom(1), 2)",
			"Test.assertEquals(posCom(6), 64)",
			"Test.assertEquals(posCom(7), 128)",
			"Test.assertEquals(posCom(8), 256)",
			"Test.assertEquals(posCom(9), 512)",
			"Test.assertEquals(posCom(10), 1024)",
			"Test.assertEquals(posCom(25), 33554432)"
		],
		"starterFn": [
			"1\nfunction posCom(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EZ4H6A8pBeTYfZzQe"
	},
	{
		"title": "Using the \"&&\" Operator",
		"description": "<p><span>JavaScript has a logical operator </span><code>&amp;&amp;</code><span>. The </span><code>&amp;&amp;</code><span> operator takes two boolean values, and returns </span><code>true</code><span> if both values are </span><code>true</code><span>.</span></p><p><span>Consider </span><code>a &amp;&amp; b</code><span>:</span></p><ul><li><code>a</code><span> is checked if it is </span><code>true</code><span> or </span><code>false</code><span>.</span></li><li><span>If </span><code>a</code><span> is </span><code>false</code><span>,  </span><code>false</code><span> is returned.</span></li><li><code>b</code><span> is checked if it is </span><code>true</code><span> or </span><code>false</code><span>.</span></li><li><span>If </span><code>b</code><span> is </span><code>false</code><span>, </span><code>false</code><span> is returned.</span></li><li><span>Otherwise, </span><code>true</code><span> is returned (as both </span><code>a</code><span> and </span><code>b</code><span> are therefore </span><code>true</code><span> ).</span></li></ul><p><span>The </span><code>&amp;&amp;</code><span> operator will only return </span><code>true</code><span> for </span><code>true &amp;&amp; true</code><span>.</span></p><p><span>Make a function using the </span><code>&amp;&amp;</code><span> operator.</span></p><h3><span>Examples</span></h3><pre><code>and(true, false) ➞ false\n\nand(true, true) ➞ true\n\nand(false, true) ➞ false\n\nand(false, false) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(and(true, true), true)",
			"Test.assertEquals(and(true, false), false)",
			"Test.assertEquals(and(false, true), false)",
			"Test.assertEquals(and(false, false), false)"
		],
		"starterFn": [
			"1\nfunction and(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vJCZmgvvDjehyDcDK"
	},
	{
		"title": "Correct the Mistakes",
		"description": "<p><span>Fix the code in the code tab to pass this challenge (only syntax errors). Look at the examples below to get an idea of what the function should do.</span></p><h3><span>Examples</span></h3><pre><code>squared(5) ➞ 25\n\nsquared(9) ➞ 81\n\nsquared(100) ➞ 10000</code></pre><h3><span>Notes</span></h3><ul><li><strong><span>READ EVERY WORD CAREFULLY, CHARACTER BY CHARACTER!</span></strong></li><li><span>Don't overthink this challenge; it's not supposed to be hard.</span></li></ul>",
		"publishedBy": "Soraph",
		"publishedByUrl": "https://edabit.com/user/Jjjna4WPtoz9Cg4Hw",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(squared(10), 100, \"Expected 100\")",
			"Test.assertEquals(squared(69), 4761, \"Expected 4761\")",
			"Test.assertEquals(squared(666), 443556, \"Expected 443556\")",
			"Test.assertEquals(squared(-21), 441, \"Expected 441\")",
			"Test.assertEquals(squared(21), 441, \"Expected 441\")"
		],
		"starterFn": [
			"1\nfunction squaed(b) {",
			"2\n  return $a*$a;",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ks3vMrqdnW3CQ3F4i"
	},
	{
		"title": "Is the Number Less than or Equal to Zero?",
		"description": "<p><span>Create a function that takes a number as its only argument and returns </span><code>true</code><span> if it's less than or equal to zero, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>lessThanOrEqualToZero(5) ➞ false\n\nlessThanOrEqualToZero(0) ➞ true\n\nlessThanOrEqualToZero(-2) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(lessThanOrEqualToZero(5), false)",
			"Test.assertEquals(lessThanOrEqualToZero(0), true)",
			"Test.assertEquals(lessThanOrEqualToZero(-5), true)"
		],
		"starterFn": [
			"1\nfunction lessThanOrEqualToZero(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PTiLYyb4A69KZtBCg"
	},
	{
		"title": "Less Than 100?",
		"description": "<p><span>Given two numbers, return </span><code>true</code><span> if the sum of both numbers is less than 100. Otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>lessThan100(22, 15) ➞ true\n// 22 + 15 = 37\n\nlessThan100(83, 34) ➞ false\n// 83 + 34 = 117</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(lessThan100(5, 57), true)",
			"Test.assertEquals(lessThan100(77, 30), false)",
			"Test.assertEquals(lessThan100(0, 59), true)",
			"Test.assertEquals(lessThan100(78, 35), false)",
			"Test.assertEquals(lessThan100(63, 11), true)",
			"Test.assertEquals(lessThan100(37, 99), false)",
			"Test.assertEquals(lessThan100(52, 11), true)",
			"Test.assertEquals(lessThan100(82, 95), false)",
			"Test.assertEquals(lessThan100(17, 44), true)",
			"Test.assertEquals(lessThan100(74, 53), false)",
			"Test.assertEquals(lessThan100(3, 77), true)",
			"Test.assertEquals(lessThan100(25, 80), false)",
			"Test.assertEquals(lessThan100(59, 28), true)",
			"Test.assertEquals(lessThan100(69, 87), false)",
			"Test.assertEquals(lessThan100(10, 45), true)",
			"Test.assertEquals(lessThan100(43, 58), false)",
			"Test.assertEquals(lessThan100(50, 44), true)",
			"Test.assertEquals(lessThan100(74, 89), false)",
			"Test.assertEquals(lessThan100(3, 27), true)",
			"Test.assertEquals(lessThan100(21, 79), false)"
		],
		"starterFn": [
			"1\nfunction lessThan100(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9MjEpkL7yAjAqiH58"
	},
	{
		"title": "Football Points",
		"description": "<p><span>Create a function that takes the number of </span><code>wins</code><span>, </span><code>draws</code><span> and </span><code>losses</code><span> and calculates the number of points a football team has obtained so far. A win receives </span><strong><span>3 points</span></strong><span>, a draw </span><strong><span>1 point</span></strong><span> and a loss </span><strong><span>0 points</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>footballPoints(3, 4, 2) ➞ 13\n\nfootballPoints(5, 0, 2) ➞ 15\n\nfootballPoints(0, 0, 1) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Inputs will be numbers greater than or equal to 0.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(footballPoints(1, 2, 3), 5)",
			"Test.assertEquals(footballPoints(5, 5, 5), 20)",
			"Test.assertEquals(footballPoints(1, 0, 0), 3)",
			"Test.assertEquals(footballPoints(0, 7, 0), 7)",
			"Test.assertEquals(footballPoints(0, 0, 15), 0)"
		],
		"starterFn": [
			"1\nfunction footballPoints(wins, draws, losses) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GwvwXHWCThHZrR7xu"
	},
	{
		"title": "Are the Numbers Equal?",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> when </span><code>num1</code><span> is equal to </span><code>num2</code><span>; otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>isSameNum(4, 8) ➞ false\n\nisSameNum(2, 2) ➞  true\n\nisSameNum(2, \"2\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Don't forget to </span><code>return</code><span> the result.</span></p>",
		"publishedBy": "Vladislav Kobylnyk",
		"publishedByUrl": "https://edabit.com/user/Yqafc6nLMBJnG3SqR",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSameNum(4, 8), false)",
			"Test.assertEquals(isSameNum(2, 2), true)",
			"Test.assertEquals(isSameNum(0, 6), false)",
			"Test.assertEquals(isSameNum(2, \"2\"), false)"
		],
		"starterFn": [
			"1\nfunction isSameNum(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QSnaSH5S3oxZkwcNc"
	},
	{
		"title": "Drinks Allowed?",
		"description": "<p><span>A bartender is writing a simple program to determine whether he should serve drinks to someone. He only serves drinks to people </span><strong><span>18 and older</span></strong><span> and when </span><strong><span>he's not on break</span></strong><span>.</span></p><p><span>Given the person's age, and whether break time is in session, create a function which returns whether he should serve drinks.</span></p><h3><span>Examples</span></h3><pre><code>shouldServeDrinks(17, true) ➞ false\n\nshouldServeDrinks(19, false) ➞ true\n\nshouldServeDrinks(30, true) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>true</code><span> or </span><code>false</code><span>.</span></li><li><span>Some countries have a slightly higher drinking age, but for the purposes of this challenge, it will be </span><strong><span>18</span></strong><span>.</span></li></ul>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(shouldServeDrinks(17, true), false)",
			"Test.assertEquals(shouldServeDrinks(30, true), false)",
			"Test.assertEquals(shouldServeDrinks(24, false), true)",
			"Test.assertEquals(shouldServeDrinks(18, false), true)",
			"Test.assertEquals(shouldServeDrinks(3, false), false)"
		],
		"starterFn": [
			"1\nfunction shouldServeDrinks(age, onBreak) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PwpJNJiysvq3AuYJ8"
	},
	{
		"title": "The Farm Problem",
		"description": "<p><span>In this challenge, a farmer is asking you to tell him how many legs can be counted among all his animals. The farmer breeds three species:</span></p><ul><li><code>chickens</code><span> = 2 legs</span></li><li><code>cows</code><span> = 4 legs</span></li><li><code>pigs</code><span> = 4 legs</span></li></ul><p><span>The farmer has counted his animals and he gives you a subtotal for each species. You have to implement a function that returns the </span><strong><span>total number of legs</span></strong><span> of all the animals.</span></p><h3><span>Examples</span></h3><pre><code>animals(2, 3, 5) ➞ 36\n\nanimals(1, 2, 3) ➞ 22\n\nanimals(5, 2, 8) ➞ 50</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>The order of animals passed is </span><code>animals(chickens, cows, pigs)</code><span>.</span></li><li><span>Remember that the farmer wants to know the </span><strong><span>total number of legs</span></strong><span> and not the total number of animals.</span></li></ul>",
		"publishedBy": "Jon",
		"publishedByUrl": "https://edabit.com/user/kWRBCPSL64DfrZHMz",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math"
		],
		"tests": [
			"Test.assertEquals(animals(5, 2, 8), 50)",
			"Test.assertEquals(animals(3, 4, 7), 50)",
			"Test.assertEquals(animals(1, 2, 3), 22)",
			"Test.assertEquals(animals(3, 5, 2), 34)"
		],
		"starterFn": [
			"1\nfunction animals(chickens, cows, pigs) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8Qg78sf5SNDEANKti"
	},
	{
		"title": "Convert Hours and Minutes into Seconds",
		"description": "<p><span>Write a function that takes two integers (</span><code>hours</code><span>, </span><code>minutes</code><span>), converts them to seconds, and adds them.</span></p><h3><span>Examples</span></h3><pre><code>convert(1, 3) ➞ 3780\n\nconvert(2, 0) ➞ 7200\n\nconvert(0, 0) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Érick",
		"publishedByUrl": "https://edabit.com/user/5XAPwP7FreZ9R382b",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(convert(1, 0), 3600)",
			"Test.assertEquals(convert(1, 3), 3780)",
			"Test.assertEquals(convert(0, 30), 1800)"
		],
		"starterFn": [
			"1\nfunction convert(hours, minutes) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JesaFi5ntBEbGT8bu"
	},
	{
		"title": "Profitable Gamble",
		"description": "<p><span>Create a function that takes in three arguments (prob, prize, pay) and returns </span><code>true</code><span> if </span><em><span>prob * prize &gt; pay</span></em><span>; otherwise return </span><code>false</code><span>.</span></p><p><span>To illustrate, </span><code>profitableGamble(0.2, 50, 9)</code><span> should yield </span><code>true</code><span>, since the net profit is 1 (0.2 * 50 - 9), and 1 &gt; 0.</span></p><h3><span>Examples</span></h3><pre><code>profitableGamble(0.2, 50, 9) ➞ true\n\nprofitableGamble(0.9, 1, 2) ➞ false\n\nprofitableGamble(0.9, 3, 2) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>A profitable gamble is a game that yields a positive net profit, where net profit is calculated in the following manner: net_outcome = probability_of_winning * prize - cost_of_playing.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(profitableGamble(0.2, 50, 9), true)",
			"Test.assertEquals(profitableGamble(0.9, 1, 2), false)",
			"Test.assertEquals(profitableGamble(0.9, 3, 2), true)",
			"Test.assertEquals(profitableGamble(0.33, 10, 3.30), true)",
			"Test.assertEquals(profitableGamble(0, 1000, 0.01), false)",
			"Test.assertEquals(profitableGamble(0.1, 1000, 7), true)",
			"Test.assertEquals(profitableGamble(0, 0, 0), false)"
		],
		"starterFn": [
			"1\nfunction profitableGamble(prob, prize, pay) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ghbHrRnRiDz9fvQNF"
	},
	{
		"title": "Equality Check",
		"description": "<p><span>In this challenge, you must verify the equality of two different given parameters: </span><code>a</code><span> and </span><code>b</code><span>.</span></p><p><span>Both the value and the type of parameters need to be tested in order to have a matching equality. The possible types of the given parameters are:</span></p><ul><li><span>Numbers</span></li><li><span>Strings</span></li><li><span>Booleans (</span><code>false</code><span> or </span><code>true</code><span>)</span></li><li><span>Special values: </span><code>undefined</code><span>, </span><code>null</code><span> and </span><code>NaN</code></li></ul><p><span>What have you learned so far that will permit you to do two different checks (value </span><strong><span>and</span></strong><span> type) with a single statement?</span></p><p><span>Implement a function that returns </span><code>true</code><span> if the parameters are equal, and </span><code>false</code><span> if they are different.</span></p><h3><span>Examples</span></h3><pre><code>checkEquality(1, true) ➞ false\n// A number and a boolean: their type is different\n\ncheckEquality(0, \"0\") ➞ false\n// A number and a string: their type is different\n\ncheckEquality(1,  1) ➞ true\n// A number and a number: their type and value are equal</code></pre><h3><span>Notes</span></h3><ul><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkEquality(1, true), false, \"Example #1\")",
			"Test.assertEquals(checkEquality(0, \"0\"), false, \"Example #2\")",
			"Test.assertEquals(checkEquality(1, 1), true, \"Example #3\")",
			"Test.assertEquals(checkEquality(0, \"\"), false)",
			"Test.assertEquals(checkEquality(1, \"1\"), false)",
			"Test.assertEquals(checkEquality(0, false), false)",
			"Test.assertEquals(checkEquality(NaN, NaN), false)",
			"Test.assertEquals(checkEquality(null, undefined), false)",
			"Test.assertEquals(checkEquality(undefined, undefined), true)",
			"Test.assertEquals(checkEquality(false, null), false)"
		],
		"starterFn": [
			"1\nfunction checkEquality(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BGvTMfwxYDRbtaTJ3"
	},
	{
		"title": "Frames Per Second",
		"description": "<p><span>Create a function that returns the number of frames shown in a given number of minutes for a certain FPS.</span></p><h3><span>Examples</span></h3><pre><code>frames(1, 1) ➞ 60\n\nframes(10, 1) ➞ 600\n\nframes(10, 25) ➞ 15000</code></pre><h3><span>Notes</span></h3><ul><li><span>FPS stands for \"frames per second\" and it's the number of frames a computer screen shows every second.</span></li><li><span>Assume the screen produces 60 frames every second.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(frames(1, 1), 60)",
			"Test.assertEquals(frames(10, 1), 600)",
			"Test.assertEquals(frames(10, 25), 15000)",
			"Test.assertEquals(frames(500, 60), 1800000)",
			"Test.assertEquals(frames(0, 60), 0)",
			"Test.assertEquals(frames(99, 1), 5940)",
			"Test.assertEquals(frames(419, 70), 1759800)",
			"Test.assertEquals(frames(52, 33), 102960)"
		],
		"starterFn": [
			"1\nfunction frames(minutes, fps) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/d9suvbchE2bnHNQuK"
	},
	{
		"title": "Compare Strings by Count of Characters",
		"description": "<p><span>Create a function that takes two strings as arguments and return either </span><code>true</code><span> or </span><code>false</code><span> depending on whether the total number of characters in the first string is equal to the total number of characters in the second string.</span></p><h3><span>Examples</span></h3><pre><code>comp(\"AB\", \"CD\") ➞ true\n\ncomp(\"ABC\", \"DE\") ➞ false\n\ncomp(\"hello\", \"edabit\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(comp(\"AB\", \"CD\"), true)",
			"Test.assertEquals(comp(\"ABC\", \"DE\"), false)",
			"Test.assertEquals(comp(\"hello\", \"edabit\"), false)",
			"Test.assertEquals(comp(\"meow\", \"woof\"), true)",
			"Test.assertEquals(comp(\"jrnvjrnnt\", \"cvjknfjvmfvnfjn\"), false)",
			"Test.assertEquals(comp(\"jkvnjrt\", \"krnf\"), false)",
			"Test.assertEquals(comp(\"Facebook\", \"Snapchat\"), true)"
		],
		"starterFn": [
			"1\nfunction comp(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yHGowWucg3k2kJdZ4"
	},
	{
		"title": "Is the String Empty?",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if a string is empty and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isEmpty(\"\") ➞ true\n\nisEmpty(\" \") ➞ false\n\nisEmpty(\"a\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>A string containing only whitespaces </span><code>\" \"</code><span> does </span><strong><span>not</span></strong><span> count as empty.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isEmpty(\"\"), true)",
			"Test.assertEquals(isEmpty(\" \"), false)",
			"Test.assertEquals(isEmpty(\"            \"), false)",
			"Test.assertEquals(isEmpty(\"38215\"), false)",
			"Test.assertEquals(isEmpty(\"afjabsdf\"), false)",
			"Test.assertEquals(isEmpty(\"!?@&\"), false)"
		],
		"starterFn": [
			"1\nfunction isEmpty(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EzbfiquDoAc2Zc9FL"
	},
	{
		"title": "Check if an Integer is Divisible By Five",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if an integer is evenly divisible by 5, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>divisibleByFive(5) ➞ true\n\ndivisibleByFive(-55) ➞ true\n\ndivisibleByFive(37) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(divisibleByFive(7), false)",
			"Test.assertEquals(divisibleByFive(5), true)",
			"Test.assertEquals(divisibleByFive(15), true)",
			"Test.assertEquals(divisibleByFive(33), false)",
			"Test.assertEquals(divisibleByFive(-18), false)",
			"Test.assertEquals(divisibleByFive(999), false)",
			"Test.assertEquals(divisibleByFive(2), false)"
		],
		"starterFn": [
			"1\nfunction divisibleByFive(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iBQYbSHZGhpktLRdn"
	},
	{
		"title": "Multiple of 100",
		"description": "<p><span>Create a function that takes an integer and return </span><code>true</code><span> if it's divisible by 100, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>divisible(1) ➞ false\n\ndivisible(1000) ➞ true\n\ndivisible(100) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"conditions",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(divisible(1), false)",
			"Test.assertEquals(divisible(100), true)",
			"Test.assertEquals(divisible(1000), true)",
			"Test.assertEquals(divisible(111000), true)",
			"Test.assertEquals(divisible(-1), false, \"Don't forget negatives.\")",
			"Test.assertEquals(divisible(0), true, \"Cover the 0 cases.\")",
			"Test.assertEquals(divisible(-100), true, \"-100 is divisible by 100.\")"
		],
		"starterFn": [
			"1\nfunction divisible(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qMr6wYGr6NaXAPQGF"
	},
	{
		"title": "Recursion: Length of a String",
		"description": "<p><span>Write a function that returns the length of a string. </span><strong><span>Make your function recursive.</span></strong></p><h3><span>Examples</span></h3><pre><code>length(\"apple\") ➞ 5\n\nlength(\"make\") ➞ 4\n\nlength(\"a\") ➞ 1\n\nlength(\"\") ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for info on recursion.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(length('shipment'), 8)",
			"Test.assertEquals(length('apple'), 5)",
			"Test.assertEquals(length('make'), 4)",
			"Test.assertEquals(length('a'), 1)",
			"Test.assertEquals(length(''), 0)"
		],
		"starterFn": [
			"1\nfunction length(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4MSbtYFBiRtxHEkY8"
	},
	{
		"title": "Four Passengers and a Driver",
		"description": "<p><span>A typical car can hold </span><em><span>4 passengers</span></em><span> and </span><em><span>1 driver</span></em><span>, overall allowing </span><strong><span>5 people</span></strong><span> to travel around. Given </span><code>n</code><span> number of people, return </span><em><span>how many cars</span></em><span> are needed to seat everyone comfortably.</span></p><h3><span>Examples</span></h3><pre><code>carsNeeded(5) ➞ 1\n\ncarsNeeded(11) ➞ 3\n\ncarsNeeded(0) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>It's likely there will be a few people left over and some cars won't be filled to max capacity.</span></p>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(carsNeeded(0), 0);",
			"Test.assertEquals(carsNeeded(1), 1);",
			"Test.assertEquals(carsNeeded(4), 1);",
			"Test.assertEquals(carsNeeded(5), 1);",
			"Test.assertEquals(carsNeeded(6), 2);",
			"Test.assertEquals(carsNeeded(18), 4);"
		],
		"starterFn": [
			"1\nfunction carsNeeded(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Eu3Q3dGe47c2YssKq"
	},
	{
		"title": "Return a String as an Integer",
		"description": "<p><span>Create a function that takes a string and returns it as an integer.</span></p><h3><span>Examples</span></h3><pre><code>stringInt(\"6\") ➞ 6\n\nstringInt(\"1000\") ➞ 1000\n\nstringInt(\"12\") ➞ 12</code></pre><h3><span>Notes</span></h3><p><span>All numbers will be whole numbers.</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(stringInt(\"6\"), 6)",
			"Test.assertEquals(stringInt(\"2\"), 2)",
			"Test.assertEquals(stringInt(\"10\"), 10)",
			"Test.assertEquals(stringInt(\"666\"), 666)"
		],
		"starterFn": [
			"1\nfunction stringInt(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rGsgEswWuW339yNxY"
	},
	{
		"title": "Divides Evenly",
		"description": "<p><span>Given two integers, </span><code>a</code><span> and </span><code>b</code><span>, return </span><code>true</code><span> if </span><code>a</code><span> can be divided evenly by </span><code>b</code><span>. Return </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>dividesEvenly(98, 7) ➞ true\n# 98/7 = 14\n\ndividesEvenly(85, 4) ➞ false\n# 85/4 = 21.25</code></pre><h3><span>Notes</span></h3><p><code>a</code><span> will always be greater than or equal to </span><code>b</code><span>.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(dividesEvenly(98, 7), true)",
			"Test.assertEquals(dividesEvenly(87, 49), false)",
			"Test.assertEquals(dividesEvenly(34, 14), false)",
			"Test.assertEquals(dividesEvenly(78, 6), true)",
			"Test.assertEquals(dividesEvenly(30, 4), false)",
			"Test.assertEquals(dividesEvenly(87, 73), false)",
			"Test.assertEquals(dividesEvenly(74, 7), false)",
			"Test.assertEquals(dividesEvenly(87, 29), true)",
			"Test.assertEquals(dividesEvenly(48, 24), true)",
			"Test.assertEquals(dividesEvenly(99, 20), false)",
			"Test.assertEquals(dividesEvenly(98, 49), true)",
			"Test.assertEquals(dividesEvenly(100, 6), false)",
			"Test.assertEquals(dividesEvenly(64, 4), true)",
			"Test.assertEquals(dividesEvenly(70, 35), true)",
			"Test.assertEquals(dividesEvenly(38, 38), true)",
			"Test.assertEquals(dividesEvenly(29, 3), false)",
			"Test.assertEquals(dividesEvenly(20, 8), false)",
			"Test.assertEquals(dividesEvenly(66, 50), false)",
			"Test.assertEquals(dividesEvenly(95, 1), true)",
			"Test.assertEquals(dividesEvenly(58, 2), true)"
		],
		"starterFn": [
			"1\nfunction dividesEvenly(a, b) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JfB9mWmbwYHbupxCB"
	},
	{
		"title": "Evaluate an Equation",
		"description": "<p><span>Create a function that evaluates an equation.</span></p><h3><span>Examples</span></h3><pre><code>eq(\"1+2\") ➞ 3\n\neq(\"6/(9-7)\") ➞ 3\n\neq(\"3+2-4\") ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't print, </span><code>return</code><span> a value.</span></li><li><span>Return the value, not the equation.</span></li><li><span>The method used to solve this challenge should not be used in practice. However, it's important to be aware of how this functionality works and why it should not be used. Check the </span><strong><span>Resources</span></strong><span> for more information.</span></li></ul>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(eq(\"1+2\"), 3)",
			"Test.assertEquals(eq(\"6/(9-7)\"), 3)",
			"Test.assertEquals(eq(\"3+2-4\"), 1)",
			"Test.assertEquals(eq(\"3*4+1\"), 13)",
			"Test.assertEquals(eq(\"5*8-4*9\"), 4)",
			"Test.assertEquals(eq(\"3**7\"), 2187)",
			"Test.assertEquals(eq(\"(6**3)+3\"), 219)"
		],
		"starterFn": [
			"1\nfunction eq(evaluate) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/n2bFd2enCnHJkTwsK"
	},
	{
		"title": "Solve the Equation",
		"description": "<p><span>Create a function that takes an equation (e.g. </span><code>\"1+1\"</code><span>), and returns the answer.</span></p><h3><span>Examples</span></h3><pre><code>equation(\"1+1\") ➞ 2\n\nequation(\"7*4-2\") ➞ 26\n\nequation(\"1+1+1+1+1\") ➞ 5</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(equation(\"1+1\"), 2)",
			"Test.assertEquals(equation(\"7*4-2\"), 26)",
			"Test.assertEquals(equation(\"1+1+1+1+1\"), 5)"
		],
		"starterFn": [
			"1\nfunction equation(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/X6PDfNfJwcB4TkQuQ"
	},
	{
		"title": "Concatenate First and Last Name into One String",
		"description": "<p><span>Given two strings, </span><code>firstName</code><span> and </span><code>lastName</code><span>, return a single string in the format \"last, first\".</span></p><h3><span>Examples</span></h3><pre><code>concatName(\"First\", \"Last\") ➞ \"Last, First\"\n\nconcatName(\"John\", \"Doe\") ➞ \"Doe, John\"\n\nconcatName(\"Mary\", \"Jane\") ➞ \"Jane, Mary\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Peter Flynn",
		"publishedByUrl": "https://edabit.com/user/wkxYjg28PC4xdWH69",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(concatName(\"John\", \"Doe\"), \"Doe, John\")",
			"Test.assertEquals(concatName(\"First\", \"Last\"), \"Last, First\")",
			"Test.assertEquals(concatName(\"A\", \"B\"), \"B, A\")",
			"​",
			"// In case someone is making odd assumptions about comma characters.",
			"Test.assertEquals(concatName(\",\", \",\"), \",, ,\")"
		],
		"starterFn": [
			"1\nfunction concatName(firstName, lastName) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RQwdZmtrW8mCnuCMN"
	},
	{
		"title": "Number of Stickers",
		"description": "<p><span>Given an </span><code>n * n * n</code><span> Rubik's cube, return the number of individual stickers that are needed to cover the whole cube.</span></p><h3><span>Examples</span></h3><pre><code>howManyStickers(1) ➞ 6\n\nhowManyStickers(2) ➞ 24\n\nhowManyStickers(3) ➞ 54</code></pre><h3><span>Notes</span></h3><ul><li><span>Keep in mind there are 6 faces to keep track of.</span></li><li><span>Expect only positive whole numbers.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(howManyStickers(1), 6)",
			"Test.assertEquals(howManyStickers(2), 24)",
			"Test.assertEquals(howManyStickers(3), 54)",
			"Test.assertEquals(howManyStickers(4), 96)",
			"Test.assertEquals(howManyStickers(5), 150)",
			"Test.assertEquals(howManyStickers(6), 216)",
			"Test.assertEquals(howManyStickers(7), 294)",
			"Test.assertEquals(howManyStickers(8), 384)",
			"Test.assertEquals(howManyStickers(9), 486)",
			"Test.assertEquals(howManyStickers(10), 600)",
			"Test.assertEquals(howManyStickers(11), 726)",
			"Test.assertEquals(howManyStickers(12), 864)",
			"Test.assertEquals(howManyStickers(13), 1014)",
			"Test.assertEquals(howManyStickers(14), 1176)",
			"Test.assertEquals(howManyStickers(15), 1350)"
		],
		"starterFn": [
			"1\nfunction howManyStickers(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4afZPJkfREMhcjNsb"
	},
	{
		"title": "Flip the Boolean",
		"description": "<p><span>Booleans can also be written as integers, where </span><code>1</code><span> = </span><code>True</code><span> and </span><code>0</code><span> = </span><code>False</code><span>. Make a function that returns the opposite of the boolean given.</span></p><h3><span>Examples</span></h3><pre><code>flipBool(true) ➞ 0\n\nflipBool(false) ➞ 1\n\nflipBool(1) ➞ 0\n\nflipBool(0) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic"
		],
		"tests": [
			"Test.assertEquals(flipBool(1), 0)",
			"Test.assertEquals(flipBool(true), 0)",
			"Test.assertEquals(flipBool(0), 1)",
			"Test.assertEquals(flipBool(false), 1)"
		],
		"starterFn": [
			"1\nfunction flipBool(b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/m5j4mTviyorMfMDvn"
	},
	{
		"title": "ES6: Destructuring Arrays I",
		"description": "<p><span>You can assign variables from arrays like this:</span></p><pre><code>const arr = [1, 2, 3, 4, 5, 6]\nlet a = arr[0]\nlet b = arr[1]\n\nconsole.log(a) // outputs 1\nconsole.log(b) // outputs 2</code></pre><p><span>With ES6, you can assign variables from arrays in a much more succinct way. Create variables </span><code>a</code><span> and </span><code>b</code><span> from the given array using the ES6 destructuring assignment syntax (check the </span><strong><span>Resources</span></strong><span> tab for more examples), where </span><code>a === 1</code><span> and </span><code>b === 2</code><span>.</span></p><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"const arr = [1, 2, 3, 4, 5, 6]",
			"​",
			"function test(x) {",
			" return x === arr[0] || x === arr[1] ? true : false ",
			"}",
			"​",
			"Test.assertEquals(test(a), true, \"Variable a does not equal 1\")",
			"Test.assertEquals(test(b), true, \"Variable b does not equal 2\")"
		],
		"starterFn": [
			"1\nconst arr = [1, 2, 3, 4, 5, 6]"
		],
		"url": "https://edabit.com/challenge/sWAEoTbXA4bexBPb6"
	},
	{
		"title": "Reverse an Array",
		"description": "<p><span>Write a function to reverse an array.</span></p><h3><span>Examples</span></h3><pre><code>reverse([1, 2, 3, 4]) ➞ [4, 3, 2, 1]\n\nreverse([9, 9, 2, 3, 4]) ➞ [4, 3, 2, 9, 9]\n\nreverse([]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(reverse([1, 2, 3, 4]), [4, 3, 2, 1])",
			"Test.assertSimilar(reverse([5, 6, 7]), [7, 6, 5])",
			"Test.assertSimilar(reverse([9, 9, 2, 3, 4]), [4, 3, 2, 9, 9])",
			"Test.assertSimilar(reverse([3, 3]), [3, 3])",
			"Test.assertSimilar(reverse([-1, -1, -1]), [-1, -1, -1])",
			"Test.assertSimilar(reverse([]), [])"
		],
		"starterFn": [
			"1\nfunction reverse(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kJQYTCCWSnzhXG9dn"
	},
	{
		"title": "Convert an Array to a String",
		"description": "<p><span>Create a function that takes an array of numbers or letters and returns a string.</span></p><h3><span>Examples</span></h3><pre><code>arrayToString([1, 2, 3, 4, 5, 6]) ➞ \"123456\"\n\narrayToString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ➞ \"abcdef\"\n\narrayToString([1, 2, 3, \"a\", \"s\", \"dAAAA\"]) ➞ \"123asdAAAA\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Khondokor",
		"publishedByUrl": "https://edabit.com/user/aCGpc5JeDHPzeFicE",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(arrayToString([1,2,3,4,5,6]), \"123456\")",
			"Test.assertEquals(arrayToString(['a','b','c','d','e','f']), \"abcdef\")",
			"Test.assertEquals(arrayToString([1,2,3,'a','s','d']), \"123asd\")",
			"Test.assertEquals(arrayToString(['a','s','d','f','e','r',1,2,3,4,5,0]), \"asdfer123450\")",
			"Test.assertEquals(arrayToString(['A','D','F','G','H','Y','TR','NNHJK']), \"ADFGHYTRNNHJK\")"
		],
		"starterFn": [
			"1\nfunction arrayToString(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BLJ5SyhMoZD892G7w"
	},
	{
		"title": "Using Ternary Operators",
		"description": "<p><span>The ternary operator (sometimes called Conditional Expressions) in JavaScript is an alternative to the if... else... statement.</span></p><p><span>It is written in the format:</span></p><pre><code>condition ? condition_if_true : condition_if_false</code></pre><p><span>Ternary operators are more readable than multi-line if statements, and allow us to quickly test a condition without having to use addtional lines and operations.</span></p><p><span>For example:</span></p><pre><code class=\"language-js\">is_nice = true\n\n// Using ternary operator.\nstate = is_nice ? \"nice\" : \"not nice\"\n\n// Equivalent code using multi-line if statements.\nif (is_nice)\n\tstate = \"nice\"\nelse \n\tstate = \"not nice\"</code></pre><p><span>Write a function that uses the ternary operator to return </span><code>\"yeah\"</code><span> if the condition is </span><code>true</code><span>, and </span><code>\"nope\"</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>yeah_nope(true) ➞ \"yeah\"\n\nyeah_nope(false) ➞ \"nope\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(yeah_nope(true), \"yeah\")",
			"Test.assertEquals(yeah_nope(false), \"nope\")"
		],
		"starterFn": [
			"1\nfunction yeah_nope(bool) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/32rk4qSmtrB6oJGyn"
	},
	{
		"title": "Word Without First Character",
		"description": "<p><span>Create a function that takes a word and returns the new word without including the first character.</span></p><h3><span>Examples</span></h3><pre><code>newWord(\"apple\") ➞ \"pple\"\n\nnewWord(\"cherry\") ➞ \"herry\"\n\nnewWord(\"plum\") ➞ \"lum\"</code></pre><h3><span>Notes</span></h3><p><span>Input is valid word.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(newWord(\"pokhara\"), \"okhara\")",
			"Test.assertEquals(newWord(\"biratnagar\"), \"iratnagar\")",
			"Test.assertEquals(newWord(\"nepal\"), \"epal\")",
			"Test.assertEquals(newWord(\"damak\"), \"amak\")",
			"Test.assertEquals(newWord(\"itahari\"), \"tahari\")",
			"Test.assertEquals(newWord(\"rasuwa\"), \"asuwa\")",
			"Test.assertEquals(newWord(\"rolpa\"), \"olpa\")"
		],
		"starterFn": [
			"1\nfunction newWord(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Me4pMDq7yX2XzHiYc"
	},
	{
		"title": "Return the Last Element in an Array",
		"description": "<p><span>Create a function that accepts an array and returns the last item in the array.</span></p><h3><span>Examples</span></h3><pre><code>getLastItem([1, 2, 3]) ➞ 3\n\ngetLastItem([\"cat\", \"dog\", \"duck\"]) ➞ \"duck\"\n\ngetLastItem([true, false, true]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(getLastItem(['Cat', 'Dog', 'Duck']), 'Duck')",
			"Test.assertEquals(getLastItem([1, 2, 3]), 3)",
			"Test.assertEquals(getLastItem([undefined]))",
			"Test.assertEquals(getLastItem([true, false, false, true]), true)",
			"Test.assertEquals(getLastItem([7, 'String', false, undefined, null]), null)",
			"Test.assertEquals(getLastItem([false]), false)",
			"Test.assertEquals(getLastItem([undefined, undefined, undefined]), undefined)",
			"Test.assertEquals(getLastItem([1, 2, 3, 56, 87, 23, 65, 45]), 45)",
			"Test.assertEquals(getLastItem(['Apple', 'Orange', undefined]), undefined)",
			"Test.assertEquals(getLastItem([true, false, 'Apple']), 'Apple')",
			"Test.assertEquals(getLastItem([null, null, null]), null)",
			"Test.assertEquals(getLastItem([1]), 1)"
		],
		"starterFn": [
			"1\nfunction getLastItem(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7JBTN4TbaxJQMdX9W"
	},
	{
		"title": "Fix the Error: Check Whether a Given Number Is Odd",
		"description": "<p><span>Éowyn has written the function </span><code>isOdd()</code><span> to check if a given number is odd or not. Unfortunately, the function does not return the correct result for all the inputs. Help her fix the error.</span></p><pre><code>function isOdd(num){\n  ret n % 19 += 123;\n}</code></pre><h3><span>Examples</span></h3><pre><code>isOdd(-5) ➞ true\n\nisOdd(25) ➞ true\n\nisOdd(0) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>All the inputs will only be integers.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isOdd(-5), true)",
			"Test.assertEquals(isOdd(-50), false)",
			"Test.assertEquals(isOdd(0), false)",
			"Test.assertEquals(isOdd(25), true)",
			"Test.assertEquals(isOdd(-19), true)",
			"Test.assertEquals(isOdd(12), false)",
			"Test.assertEquals(isOdd(23), true)",
			"Test.assertEquals(isOdd(-71), true)"
		],
		"starterFn": [
			"1\nfunction isOdd(num) {",
			"2\n  ret n % 19 += 123;",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7rw9NgXoGZuyoJjZy"
	},
	{
		"title": "Name Greeting!",
		"description": "<p><span>Create a function that takes a name and returns a greeting in the form of a string. Don't use a normal function but use an \"arrow function\".</span></p><h3><span>Examples</span></h3><pre><code>helloName(\"Gerald\") ➞ \"Hello Gerald!\"\n\nhelloName(\"Tiffany\") ➞ \"Hello Tiffany!\"\n\nhelloName(\"Ed\") ➞ \"Hello Ed!\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The input is always a name (as string).</span></li><li><span>Don't forget the exclamation mark!</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(helloName(\"Gerald\"), \"Hello Gerald!\")",
			"Test.assertEquals(helloName(\"Fatima\"), \"Hello Fatima!\")",
			"Test.assertEquals(helloName(\"Ed\"), \"Hello Ed!\")",
			"Test.assertEquals(helloName(\"Tiffany\"), \"Hello Tiffany!\")"
		],
		"starterFn": [
			"1\nconst helloName = name => "
		],
		"url": "https://edabit.com/challenge/6kdGMdd78jpZ45ujo"
	},
	{
		"title": "To the Power of _____",
		"description": "<p><span>Create a function that takes a base number and an exponent number and returns the calculation.</span></p><h3><span>Examples</span></h3><pre><code>calculateExponent(5, 5) ➞ 3125\n\ncalculateExponent(10, 10) ➞ 10000000000\n\ncalculateExponent(3, 3) ➞ 27</code></pre><h3><span>Notes</span></h3><ul><li><span>All test inputs will be positive integers.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Taylor Burke",
		"publishedByUrl": "https://edabit.com/user/inmjjfsii2M4CMf34",
		"language": "JavaScript",
		"tags": [
			"logic",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(calculateExponent(5,5), 3125)",
			"Test.assertEquals(calculateExponent(3,3), 27)",
			"Test.assertEquals(calculateExponent(10,10), 10000000000)"
		],
		"starterFn": [
			"1\nfunction calculateExponent(num, exp) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/H25aG5aAdmFcMpBsg"
	},
	{
		"title": "Is the Number Even or Odd?",
		"description": "<p><span>Create a function that takes a number as an argument and returns </span><code>\"even\"</code><span> for even numbers and </span><code>\"odd\"</code><span> for odd numbers.</span></p><h3><span>Examples</span></h3><pre><code>isEvenOrOdd(3) ➞ \"odd\"\n\nisEvenOrOdd(146) ➞ \"even\"\n\nisEvenOrOdd(19) ➞ \"odd\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Dont forget to </span><code>return</code><span> the result.</span></li><li><span>Input will always be a valid integer.</span></li><li><span>Expect negative integers (whole numbers).</span></li><li><span>Tests are case sensitive (return </span><code>\"even\"</code><span> or </span><code>\"odd\"</code><span> in lowercase).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isEvenOrOdd(3), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(0), \"even\")",
			"Test.assertEquals(isEvenOrOdd(7), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(12), \"even\")",
			"Test.assertEquals(isEvenOrOdd(6474), \"even\")",
			"Test.assertEquals(isEvenOrOdd(0563), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(3), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(0000001111100000), \"even\")",
			"Test.assertEquals(isEvenOrOdd(301), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(-3), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(-0), \"even\")",
			"Test.assertEquals(isEvenOrOdd(-7), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(-12), \"even\")",
			"Test.assertEquals(isEvenOrOdd(-6474), \"even\")",
			"Test.assertEquals(isEvenOrOdd(-0563), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(-3), \"odd\")",
			"Test.assertEquals(isEvenOrOdd(-0000001111100000), \"even\")",
			"Test.assertEquals(isEvenOrOdd(-301), \"odd\")"
		],
		"starterFn": [
			"1\nfunction isEvenOrOdd(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kuzB5CMXiKDEYKXAP"
	},
	{
		"title": "Find the Index (Part 1)",
		"description": "<p><span>Create a function that finds the index of a given item.</span></p><h3><span>Examples</span></h3><pre><code>search([1, 5, 3], 5) ➞ 1\n\nsearch([9, 8, 3], 3) ➞ 2\n\nsearch([1, 2, 3], 4) ➞ -1</code></pre><h3><span>Notes</span></h3><p><span>If the item is not present, return </span><code>-1</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertEquals(search([1, 5, 3], 5), 1)",
			"Test.assertEquals(search([9, 8, 3], 3), 2)",
			"Test.assertEquals(search([1, 2, 3], 4), -1)",
			"Test.assertEquals(search([1, 5, 3, 10, 17, 20, -6], 20), 5)"
		],
		"starterFn": [
			"1\nfunction search(arr, item) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pEzxi4MqHGrAi7ZdA"
	},
	{
		"title": "Find the Index",
		"description": "<p><span>Create a function that takes an array and a string as arguments and return the index of the string.</span></p><h3><span>Examples</span></h3><pre><code>findIndex([\"hi\", \"edabit\", \"fgh\", \"abc\"], \"fgh\") ➞ 2\n\nfindIndex([\"Red\", \"blue\", \"Blue\", \"Green\"], \"blue\") ➞ 1\n\nfindIndex([\"a\", \"g\", \"y\", \"d\"], \"d\") ➞ 3\n\nfindIndex([\"Pineapple\", \"Orange\", \"Grape\", \"Apple\"], \"Pineapple\") ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you are stuck, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "StampDanFan",
		"publishedByUrl": "https://edabit.com/user/x7y9CXN5ReSkDSdEY",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(findIndex(['abc', 'ghj', 'banana', 'grape'], 'grape'), 3)",
			"Test.assertEquals(findIndex(['a', 'b', 'c', 'd', 'e', 'f'], 'f'), 5)",
			"Test.assertEquals(findIndex(['hi', 'edabit.com', 'testcase', 'validstring'], 'edabit.com'), 1)"
		],
		"starterFn": [
			"1\nfunction findIndex(arr, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9ApjPggCLGiPt573m"
	},
	{
		"title": "Concatenating Two Integer Arrays",
		"description": "<p><span>Create a function to concatenate two integer arrays.</span></p><h3><span>Examples</span></h3><pre><code>concat([1, 3, 5], [2, 6, 8]) ➞ [1, 3, 5, 2, 6, 8]\n\nconcat([7, 8], [10, 9, 1, 1, 2]) ➞ [7, 8, 10, 9, 1, 1, 2]\n\nconcat([4, 5, 1], [3, 3, 3, 3, 3]) ➞ [4, 5, 1, 3, 3, 3, 3, 3]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>See </span><strong><span>Resources</span></strong><span> tab for more info.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(concat([1, 3, 5], [2, 6, 8]), [1, 3, 5, 2, 6, 8])",
			"Test.assertSimilar(concat([7, 8], [10, 9, 1, 1, 2]), [7, 8, 10, 9, 1, 1, 2])",
			"Test.assertSimilar(concat([4, 5, 1], [3, 3, 3, 3, 3]), [4, 5, 1, 3, 3, 3, 3, 3])"
		],
		"starterFn": [
			"1\nfunction concat(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CzPEsTuXfE8J8vknX"
	},
	{
		"title": "Check if an Array Contains a Given Number",
		"description": "<p><span>Write a function to check if an array contains a particular number.</span></p><h3><span>Examples</span></h3><pre><code>check([1, 2, 3, 4, 5], 3) ➞ true\n\ncheck([1, 1, 2, 1, 1], 3) ➞ false\n\ncheck([5, 5, 5, 6], 5) ➞ true\n\ncheck([], 5) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(check([1, 2, 3, 4, 5], 3), true)",
			"Test.assertEquals(check([1, 1, 2, 1, 1], 3), false)",
			"Test.assertEquals(check([1, 1, 2, 1, 5, 4, 7], 7), true)",
			"Test.assertEquals(check([1, 1, 2, 1, 5, 4, 7], 8), false)",
			"Test.assertEquals(check([5, 5, 5, 6], 5), true)",
			"Test.assertEquals(check([], 5), false)"
		],
		"starterFn": [
			"1\nfunction check(arr, el) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SwyjHvkqwwQ2iJsoS"
	},
	{
		"title": "Find the Index (Part 2)",
		"description": "<p><span>Create a function that searches for the index of a given item in an array. If the item is present, it should return the index, otherwise, it should return </span><code>-1</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>search([1, 2, 3, 4], 3) ➞ 2\n\nsearch([2, 4, 6, 8, 10], 8) ➞ 3\n\nsearch([1, 3, 5, 7, 9], 11) ➞ -1</code></pre><h3><span>Notes</span></h3><ul><li><span>If the item is not present, return </span><code>-1</code><span>.</span></li><li><span>The given array is ordered.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(search([1, 2, 3, 4], 3), 2)",
			"Test.assertEquals(search([2, 4, 6, 8, 10], 8), 3)",
			"Test.assertEquals(search([1, 3, 5, 7, 9], 11), -1)",
			"Test.assertEquals(search([1, 5, 7, 11, 25, 100, 200, 350], 5), 1)"
		],
		"starterFn": [
			"1\nfunction search(arr, item) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/z6Pxiw289JtaE2ndL"
	},
	{
		"title": "Stack the Boxes",
		"description": "<p><span>Here's an image of four models. Some of the cubes are hidden behind other cubes. Model one consists of one cube. Model two consists of four cubes, and so on...</span></p><p><img alt=\"Stack the Boxes\" title=\"Stack the Boxes\" src=\"https://edabit-challenges.s3.amazonaws.com/stack_the_boxes.png\"></p><p><span>Write a function that takes a number </span><code>n</code><span> and returns the number of stacked boxes in a model </span><code>n</code><span> levels high, visible and invisible.</span></p><h3><span>Examples</span></h3><pre><code>stackBoxes(1) ➞ 1\n\nstackBoxes(2) ➞ 4\n\nstackBoxes(0) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Step </span><code>n</code><span> is a positive integer.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(stackBoxes(1), 1)",
			"Test.assertEquals(stackBoxes(2), 4)",
			"Test.assertEquals(stackBoxes(0), 0)",
			"Test.assertEquals(stackBoxes(5), 25)",
			"Test.assertEquals(stackBoxes(27), 729)",
			"Test.assertEquals(stackBoxes(196), 38416)",
			"Test.assertEquals(stackBoxes(512), 262144)"
		],
		"starterFn": [
			"1\nfunction stackBoxes(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QifJBFwg32GNdiWQa"
	},
	{
		"title": "Check String for Spaces",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if a string contains any spaces.</span></p><h3><span>Examples</span></h3><pre><code>hasSpaces(\"hello\") ➞ false\n\nhasSpaces(\"hello, world\") ➞ true\n\nhasSpaces(\" \") ➞ true\n\nhasSpaces(\"\") ➞ false\n\nhasSpaces(\",./!@#\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>An empty string does not contain any spaces.</span></li><li><span>Try doing this without RegEx.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Peter Flynn",
		"publishedByUrl": "https://edabit.com/user/wkxYjg28PC4xdWH69",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(hasSpaces(\"Foo\"), false)",
			"Test.assertEquals(hasSpaces(\"Foo bar\"), true)",
			"Test.assertEquals(hasSpaces(\"Foo \"), true)",
			"Test.assertEquals(hasSpaces(\" Foo\"), true)",
			"Test.assertEquals(hasSpaces(\" \"), true)",
			"Test.assertEquals(hasSpaces(\"\"), false)",
			"Test.assertEquals(hasSpaces(\",./;'[]-=\"), false)"
		],
		"starterFn": [
			"1\nfunction hasSpaces(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RAoedjZwcGFhvRTru"
	},
	{
		"title": "Is the Last Character an N?",
		"description": "<p><span>Create a function that takes a string (a random name). If the last character of the name is an \"n\", return </span><code>true</code><span>, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>isLastCharacterN(\"Aiden\") ➞ true\n\nisLastCharacterN(\"Piet\") ➞ false\n\nisLastCharacterN(\"Bert\") ➞ false\n\nisLastCharacterN(\"Dean\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>The function must return a boolean value ( i.e. </span><code>true</code><span> or </span><code>false</code><span>).</span></p>",
		"publishedBy": "meesie1",
		"publishedByUrl": "https://edabit.com/user/FNBB7APikaxR3DtvN",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isLastCharacterN(\"Aiden\"), true)",
			"Test.assertEquals(isLastCharacterN(\"Roxy\"), false)",
			"Test.assertEquals(isLastCharacterN(\"Bert\"), false)",
			"Test.assertEquals(isLastCharacterN(\"Dean\"), true)",
			"Test.assertEquals(isLastCharacterN(\"Ian\"), true)",
			"Test.assertEquals(isLastCharacterN(\"Brian\"), true)",
			"Test.assertEquals(isLastCharacterN(\"Daniel\"), false)"
		],
		"starterFn": [
			"1\nfunction isLastCharacterN(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iiSAic33n4wGufQmG"
	},
	{
		"title": "Volume of a Box",
		"description": "<p><span>Create a function that takes an object argument </span><code>sizes</code><span> (contains </span><em><span>width</span></em><span>, </span><em><span>length</span></em><span>, </span><em><span>height</span></em><span> keys) and returns the volume of the box.</span></p><h3><span>Examples</span></h3><pre><code>volumeOfBox({ width: 2, length: 5, height: 1 }) ➞ 10\n\nvolumeOfBox({ width: 4, length: 2, height: 2 }) ➞ 16\n\nvolumeOfBox({ width: 2, length: 3, height: 5 }) ➞ 30</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>Remember that the values are in an object.</span></li><li><span>Volume is length </span><span>*</span><span> width </span><span>*</span><span> height.</span></li></ul>",
		"publishedBy": "Alon",
		"publishedByUrl": "https://edabit.com/user/Q69qbJ2JtmQFkMXqz",
		"language": "JavaScript",
		"tags": [
			"math",
			"objects"
		],
		"tests": [
			"Test.assertEquals(volumeOfBox({width: 11,length: 1, height: 2}), 22)",
			"Test.assertEquals(volumeOfBox({width: 1, length: 5,  height: 3}), 15)",
			"Test.assertEquals(volumeOfBox({width: 2, length: 1,  height: 1}), 2)",
			"Test.assertEquals(volumeOfBox({width: 2, length: 6,  height: 5}), 60)",
			"Test.assertEquals(volumeOfBox({width: 2, length: 5,  height: 3}), 30)",
			"Test.assertEquals(volumeOfBox({width: 2, length: 5,  height: 1}), 10)"
		],
		"starterFn": [
			"1\nfunction volumeOfBox(sizes) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ms3q5GYSpFpwxeFWX"
	},
	{
		"title": "Find the Amount of Potatoes",
		"description": "<p><span>Create a function to return the amount of potatoes there are in a string.</span></p><h3><span>Examples</span></h3><pre><code>potatoes(\"potato\") ➞ 1\n\npotatoes(\"potatopotato\") ➞ 2\n\npotatoes(\"potatoapple\") ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(potatoes(\"potato\"), 1)",
			"Test.assertEquals(potatoes(\"potatopotatocherry\"),2 )",
			"Test.assertEquals(potatoes(\"potatopotatopotatoorange\"), 3)",
			"Test.assertEquals(potatoes(\"potatopotatobananapotatopotato\"), 4)",
			"Test.assertEquals(potatoes(\"potatopotatomangopotatopotatopotato\"), 5)",
			"Test.assertEquals(potatoes(\"potatocucumberpotatopotatopotatopotatopotato\"), 6)"
		],
		"starterFn": [
			"1\nfunction potatoes(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/u6iaymtE4eYXQ2ZWR"
	},
	{
		"title": "Count the Arguments",
		"description": "<p><span>Create a function that returns the number of arguments it was called with.</span></p><h3><span>Examples</span></h3><pre><code>numArgs() ➞ 0\n\nnumArgs(\"foo\") ➞ 1\n\nnumArgs(\"foo\", \"bar\") ➞ 2\n\nnumArgs(true, false) ➞ 2\n\nnumArgs({}) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(numArgs(), 0)",
			"Test.assertEquals(numArgs('foo'), 1)",
			"Test.assertEquals(numArgs('foo', 'bar'), 2)",
			"Test.assertEquals(numArgs(null, null), 2)",
			"Test.assertEquals(numArgs('foo', 'bar', 5, null), 4)",
			"Test.assertEquals(numArgs(false), 1)",
			"Test.assertEquals(numArgs('foo', {}), 2)",
			"Test.assertEquals(numArgs('foo', 'bar', {}), 3)",
			"Test.assertEquals(numArgs([], [], {}), 3)",
			"Test.assertEquals(numArgs('foo', 'bar', true, null, 0), 5)"
		],
		"starterFn": [
			"1\nfunction numArgs() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Mtke2HhuFwBkFi6Ty"
	},
	{
		"title": "Return the Total Number of Parameters",
		"description": "<p><span>Create a function that returns the total number of parameters passed in.</span></p><h3><span>Examples</span></h3><pre><code>numberArgs(\"a\", \"b\", \"c\") ➞ 3\n\nnumberArgs(10, 20, 30, 40, 50) ➞ 5\n\nnumberArgs(x, y) ➞ 2\n\nnumberArgs() ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>How can you express the input parameter so it takes a variable number of arguments?</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for additional info.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(numberArgs('a', 'b', 'c'), 3)",
			"Test.assertEquals(numberArgs(10, 20, 30, 40, 50), 5)",
			"Test.assertEquals(numberArgs('x', 'y'), 2)",
			"Test.assertEquals(numberArgs(), 0)"
		],
		"starterFn": [
			"1\nfunction numberArgs(/* fill-in */) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hztqDz4mjCPpLMMF4"
	},
	{
		"title": "Find the Bug: Returning the Container",
		"description": "<p><span>The packaging system is running wild! The candy is lying loose all over in the warehouse, the cereal is missing,  and bread is stuffed in a bottle. What is going on here? The candy should be in plastic and the bread should be in a bag.</span></p><p><span>The packaging machine is running the </span><code>getContainer()</code><span> function to retrieve the container of a product. But something is not right...</span></p><h3><span>Examples</span></h3><pre><code>getContainer(\"Bread\") ➞ \"bag\"\n\ngetContainer(\"Beer\") ➞ \"bottle\"\n\ngetContainer(\"Candy\") ➞ \"plastic\"\n\ngetContainer(\"Cheese\") ➞ null</code></pre><h3><span>Notes</span></h3><p><span>Think about what the object's packaging should be.</span></p>",
		"publishedBy": "Allard",
		"publishedByUrl": "https://edabit.com/user/d2oMpeLcNGNtnab8n",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"conditions",
			"control_flow",
			"logic"
		],
		"tests": [
			"Test.assertEquals(getContainer(\"Bread\"), \"bag\")",
			"Test.assertEquals(getContainer(\"Milk\"), \"bottle\")",
			"Test.assertEquals(getContainer(\"Beer\"), \"bottle\")",
			"Test.assertEquals(getContainer(\"Eggs\"), \"carton\")",
			"Test.assertEquals(getContainer(\"Candy\"), \"plastic\")",
			"Test.assertEquals(getContainer(\"Cheese\"), null)"
		],
		"starterFn": [
			"1\nfunction getContainer(product) {",
			"2\n  let container",
			"3\n  switch (product) {",
			"4\n    case \"Bread\":",
			"5\n      container = \"bag\"",
			"6\n    case \"Beer\":",
			"7\n    case \"Milk\":",
			"8\n      container = \"bottle\"",
			"9\n      break",
			"10\n    case \"Cerials\":",
			"11\n      container = \"box\"",
			"12\n      break",
			"13\n    case \"Eggs\":",
			"14\n      container = \"carton\"",
			"15\n      break",
			"16\n    case \"Candy\":",
			"17\n      container = \"plastic\"",
			"18\n    default:",
			"19\n      container = null",
			"20\n  }",
			"21\n​",
			"22\n  return container",
			"23\n}"
		],
		"url": "https://edabit.com/challenge/kAfeaiu7QrXp4RfSX"
	},
	{
		"title": "Concatenating First and Last Character of a String",
		"description": "<p><span>Creates a function that takes a string and returns the concatenated first and last character.</span></p><h3><span>Examples</span></h3><pre><code>firstLast(\"ganesh\") ➞ \"gh\"\n\nfirstLast(\"kali\") ➞ \"ki\"\n\nfirstLast(\"shiva\") ➞ \"sa\"\n\nfirstLast(\"vishnu\") ➞ \"vu\"\n\nfirstLast(\"durga\") ➞ \"da\"</code></pre><h3><span>Notes</span></h3><p><span>There is no empty string.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(firstLast(\"ganesh\"), \"gh\")",
			"Test.assertEquals(firstLast(\"kali\"), \"ki\")",
			"Test.assertEquals(firstLast(\"shiva\"), \"sa\")",
			"Test.assertEquals(firstLast(\"vishnu\"), \"vu\")",
			"Test.assertEquals(firstLast(\"durga\"), \"da\")",
			"Test.assertEquals(firstLast(\"brahma\"), \"ba\")"
		],
		"starterFn": [
			"1\nfunction firstLast(name) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ms7pZS4c5TT8KZvt7"
	},
	{
		"title": "Extract City Facts",
		"description": "<p><span>Create a function that takes an object as an argument and returns a string with facts about the city. The city facts will need to be extracted from the object's three properties:</span></p><ol><li><code>name</code></li><li><code>population</code></li><li><code>continent</code></li></ol><p><span>The string should have the following format: X has a population of Y and is situated in Z (where X is the city name, Y is the population and Z is the continent the city is situated in).</span></p><h3><span>Examples</span></h3><pre><code>cityFacts({\n  name: \"Paris\",\n  population: \"2,140,526\",\n  continent: \"Europe\"\n}) ➞ \"Paris has a population of 2,140,526 and is situated in Europe\"\n\ncityFacts({\n  name: \"Tokyo\",\n  population: \"13,929,286\",\n  continent: \"Asia\"\n}) ➞ \"Tokyo has a population of 13,929,286 and is situated in Asia\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "jjberg",
		"publishedByUrl": "https://edabit.com/user/5sTcsxcHwsJtMA6aD",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertEquals(cityFacts({name: 'Manila', population: '1,780,148', continent: 'Asia'}), 'Manila has a population of 1,780,148 and is situated in Asia')",
			"Test.assertEquals(cityFacts({name: 'Melbourne', population: '4,936,349', continent: 'Australia'}), 'Melbourne has a population of 4,936,349 and is situated in Australia')",
			"Test.assertEquals(cityFacts({name: 'Kampala', population: '1,507,080', continent: 'Africa'}), 'Kampala has a population of 1,507,080 and is situated in Africa')",
			"Test.assertEquals(cityFacts({name: 'Buenos Aires', population: '2,891,082', continent: 'South America'}), 'Buenos Aires has a population of 2,891,082 and is situated in South America')",
			"Test.assertEquals(cityFacts({name: 'Vancouver', population: '631,486', continent: 'North America'}), 'Vancouver has a population of 631,486 and is situated in North America')",
			"Test.assertEquals(cityFacts({name: 'Berlin', population: '3,748,148', continent: 'Europe'}), 'Berlin has a population of 3,748,148 and is situated in Europe')"
		],
		"starterFn": [
			"1\nfunction cityFacts(city) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FzDAgSR84zeyRa278"
	},
	{
		"title": "Squares and Cubes",
		"description": "<p><span>Create a function that takes an array of two numbers and checks if the </span><strong><span>square root</span></strong><span> of the first number is equal to the </span><strong><span>cube root</span></strong><span> of the second number.</span></p><h3><span>Examples</span></h3><pre><code>checkSquareAndCube([4, 8]) ➞ true\n\ncheckSquareAndCube([16, 48]) ➞ false\n\ncheckSquareAndCube([9, 27]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to return either </span><code>true</code><span> or </span><code>false</code><span>.</span></li><li><span>All arrays contain </span><em><span>two positive numbers</span></em><span>.</span></li><li><span>If you're stuck, check the </span><strong><span>Resources</span></strong><span> for a hint.</span></li></ul>",
		"publishedBy": "Danielos C",
		"publishedByUrl": "https://edabit.com/user/vn6nR36mdfY8z2zKx",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkSquareAndCube([4, 8]), true)",
			"Test.assertEquals(checkSquareAndCube([5, 12]), false)",
			"Test.assertEquals(checkSquareAndCube([9, 27]), true)",
			"Test.assertEquals(checkSquareAndCube([25, 120]), false)",
			"Test.assertEquals(checkSquareAndCube([25, 125]), true)",
			"Test.assertEquals(checkSquareAndCube([36, 215]), false)",
			"Test.assertEquals(checkSquareAndCube([36, 217]), false)",
			"Test.assertEquals(checkSquareAndCube([144, 1728]), true)",
			"Test.assertEquals(checkSquareAndCube([1, 1]), true)",
			"Test.assertEquals(checkSquareAndCube([676, 17576]), true)"
		],
		"starterFn": [
			"1\nfunction checkSquareAndCube(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9YPqr4rNaYy8Ynrry"
	},
	{
		"title": "Is the Word Singular or Plural?",
		"description": "<p><span>Create a function that takes in a word and determines whether or not it is plural. A plural word is one that ends in \"s\".</span></p><h3><span>Examples</span></h3><pre><code>isPlural(\"changes\") ➞ true\n\nisPlural(\"change\") ➞ false\n\nisPlural(\"dudes\") ➞ true\n\nisPlural(\"magic\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>Remember that return </span><code>true</code><span> (</span><em><span>boolean</span></em><span>) is not the same as return </span><code>\"true\"</code><span> (</span><em><span>string</span></em><span>).</span></li><li><span>This is an oversimplification of the English language. We are ignoring edge cases like \"goose\" and \"geese\", \"fungus\" and \"fungi\", etc.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPlural(\"dudes\"), true)",
			"Test.assertEquals(isPlural(\"flowers\"), true)",
			"Test.assertEquals(isPlural(\"checks\"), true)",
			"Test.assertEquals(isPlural(\"varies\"), true)",
			"Test.assertEquals(isPlural(\"efforts\"), true)",
			"Test.assertEquals(isPlural(\"mood\"), false)",
			"Test.assertEquals(isPlural(\"whiteboard\"), false)",
			"Test.assertEquals(isPlural(\"cow\"), false)",
			"Test.assertEquals(isPlural(\"word\"), false)",
			"Test.assertEquals(isPlural(\"love\"), false)",
			"Test.assertEquals(isPlural(\"silly\"), false)"
		],
		"starterFn": [
			"1\nfunction isPlural(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5vAX6Lw2Yrgdkx7Qi"
	},
	{
		"title": "Default Mood",
		"description": "<p><span>Create a function that takes in a </span><em><span>current mood</span></em><span> and return a sentence in the following format: </span><code>\"Today, I am feeling {mood}\"</code><span>. However, if </span><em><span>no argument</span></em><span> is passed, return </span><code>\"Today, I am feeling neutral\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>moodToday(\"happy\") ➞ \"Today, I am feeling happy\"\n\nmoodToday(\"sad\") ➞ \"Today, I am feeling sad\"\n\nmoodToday() ➞ \"Today, I am feeling neutral\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for some helpful information.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(moodToday(\"happy\"), \"Today, I am feeling happy\")",
			"Test.assertEquals(moodToday(\"sad\"), \"Today, I am feeling sad\")",
			"Test.assertEquals(moodToday(\"very happy\"), \"Today, I am feeling very happy\")",
			"Test.assertEquals(moodToday(\"rather empty inside\"), \"Today, I am feeling rather empty inside\")",
			"Test.assertEquals(moodToday(\"confused\"), \"Today, I am feeling confused\")",
			"Test.assertEquals(moodToday(), \"Today, I am feeling neutral\")"
		],
		"starterFn": [
			"1\nfunction moodToday(mood) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DdAkLaw4eyuWgCMmF"
	},
	{
		"title": "Slice of Pie",
		"description": "<p><span>Create a function that determines whether or not it's possible to split a pie fairly given these three parameters:</span></p><ol><li><span>Total number of slices.</span></li><li><span>Number of recipients.</span></li><li><span>How many slices each person gets.</span></li></ol><p><span>The function will be in this form:</span></p><pre><code>equalSlices(total slices, no. recipients, slices each)</code></pre><h3><span>Examples</span></h3><pre><code>equalSlices(11, 5, 2) ➞ true\n// 5 people x 2 slices each = 10 slices &lt; 11 slices\n\nequalSlices(11, 5, 3) ➞ false\n// 5 people x 3 slices each = 15 slices &gt; 11 slices\n\nequalSlices(8, 3, 2) ➞ true\n\nequalSlices(8, 3, 3) ➞ false\n\nequalSlices(24, 12, 2) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Return (trivially) </span><code>true</code><span> if there are zero people.</span></li><li><span>It's fine not to use the entire pie.</span></li><li><span>All test parameters are integers.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(equalSlices(8, 3, 2), true)",
			"Test.assertEquals(equalSlices(8, 3, 3), false)",
			"Test.assertEquals(equalSlices(24, 12, 2), true)",
			"Test.assertEquals(equalSlices(5, 6, 1), false)",
			"Test.assertEquals(equalSlices(5, 0, 100), true)",
			"Test.assertEquals(equalSlices(15, 2, 7), true)",
			"Test.assertEquals(equalSlices(15, 2, 8), false)"
		],
		"starterFn": [
			"1\nfunction equalSlices(total, people, each) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qkNvH9BZLTNtKQvae"
	},
	{
		"title": "ES6: Destructuring Arrays IV",
		"description": "<p><span>There is an easy way to assign to array values to the nth index by using the Rest element.</span></p><pre><code>var [head, tail] = [1, 2, 3, 4]\n\nconsole.log(head) // outputs  1\nconsole.log(tail) // outputs 2</code></pre><p><span>But how could I make </span><code>tail =  [2, 3, 4]</code><span> instead of </span><code>tail = 2</code><span>?</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"eval(str)",
			"​",
			"const validString = (str) => {",
			"  return /\\.\\.\\./.test(str) ? \"rest\" : false",
			"}",
			"​",
			"const validArray = (str) => {",
			"  return /\\[\\s*1\\s*\\,\\s*2\\s*\\,\\s*3\\s*\\,\\s*4\\s*\\]$/.test(str) ? \"array\" : false",
			"}",
			"​",
			"Test.assertEquals(validString(str), \"rest\", \"You need to use the Rest element.\")",
			"Test.assertEquals(validArray(str), \"array\", \"[1, 2, 3, 4] should remain untouched.\")",
			"Test.assertEquals(head, 1, \"head should equal to 1\")",
			"Test.assertSimilar(tail, [2,3,4], \"tail should equal to [2, 3, 4]\" )"
		],
		"starterFn": [
			"1\n// Change the string so that it will evaluate to head = 1 and tail = [2, 3, 4] ",
			"2\n// Use the Rest element",
			"3\nconst str = '[head, tail] = [1, 2, 3, 4]'"
		],
		"url": "https://edabit.com/challenge/wJuXYhgetMtD4Gezj"
	},
	{
		"title": "ES6: Destructuring Arrays III",
		"description": "<p><span>You can assign variables from arrays with destructuring like this:</span></p><pre><code>const arr = [\"eyes\", \"nose\", \"lips\", \"ears\"]\nlet [eyes, nose, lips, ears] = arr</code></pre><p><span>But you can also skip over items in the array being destructured.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(lips, arr[2])"
		],
		"starterFn": [
			"1\n// DO NOT change arr",
			"2\n// DO NOT USE var [lips] = arr[2]",
			"3\n// \"eyes\", \"nose\", and \"ears\" should not be assigned to anything",
			"4\n​",
			"5\nconst arr = [\"eyes\", \"nose\", \"lips\", \"ears\"]",
			"6\nvar [/* Create variable lips here and assign it to arr[2] */] = arr"
		],
		"url": "https://edabit.com/challenge/STfAEAE5fjNmFCsvf"
	},
	{
		"title": "Shapes With N Sides",
		"description": "<p><span>Create a function that takes a </span><strong><span>whole number</span></strong><span> as input and returns the shape with that number's amount of sides. Here are the expected outputs to get from these inputs.</span></p><table><thead><tr><th><span>Inputs</span></th><th><span>Outputs</span></th></tr></thead><tbody><tr><td><span>1</span></td><td><span>\"circle\"</span></td></tr><tr><td><span>2</span></td><td><span>\"semi-circle\"</span></td></tr><tr><td><span>3</span></td><td><span>\"triangle\"</span></td></tr><tr><td><span>4</span></td><td><span>\"square\"</span></td></tr><tr><td><span>5</span></td><td><span>\"pentagon\"</span></td></tr><tr><td><span>6</span></td><td><span>\"hexagon\"</span></td></tr><tr><td><span>7</span></td><td><span>\"heptagon\"</span></td></tr><tr><td><span>8</span></td><td><span>\"octagon\"</span></td></tr><tr><td><span>9</span></td><td><span>\"nonagon\"</span></td></tr><tr><td><span>10</span></td><td><span>\"decagon\"</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>nSidedShape(3) ➞ \"triangle\"\n\nnSidedShape(1) ➞ \"circle\"\n\nnSidedShape(9) ➞ \"nonagon\"</code></pre><h3><span>Notes</span></h3><ul><li><span>There won't be any tests with a number below 1 or greater than 10.</span></li><li><span>Return the output in </span><em><span>lowercase</span></em><span>.</span></li><li><span>The challenge is intended to be completed </span><strong><span>without conditionals</span></strong><span> (it would take too long)!</span></li></ul>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(nSidedShape(1), \"circle\")",
			"Test.assertEquals(nSidedShape(2), \"semi-circle\")",
			"Test.assertEquals(nSidedShape(3), \"triangle\")",
			"Test.assertEquals(nSidedShape(4), \"square\")",
			"Test.assertEquals(nSidedShape(5), \"pentagon\")",
			"Test.assertEquals(nSidedShape(6), \"hexagon\")",
			"Test.assertEquals(nSidedShape(7), \"heptagon\")",
			"Test.assertEquals(nSidedShape(8), \"octagon\")",
			"Test.assertEquals(nSidedShape(9), \"nonagon\")",
			"Test.assertEquals(nSidedShape(10), \"decagon\")"
		],
		"starterFn": [
			"1\nfunction nSidedShape(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wpHyrxbSaYxLeXT6L"
	},
	{
		"title": "Char-to-ASCII",
		"description": "<p><span>Create a function that returns the ASCII value of the passed in character.</span></p><h3><span>Examples</span></h3><pre><code>ctoa(\"A\") ➞ 65\n\nctoa(\"m\") ➞ 109\n\nctoa(\"[\") ➞ 91\n\nctoa(\"\\\") ➞ 92</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(ctoa(' '), 32)",
			"Test.assertEquals(ctoa('A'), 65)",
			"Test.assertEquals(ctoa(']'), 93)",
			"Test.assertEquals(ctoa('^'), 94)",
			"Test.assertEquals(ctoa('c'), 99)"
		],
		"starterFn": [
			"1\nfunction ctoa(c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xPAPYC24EEpwzwQDy"
	},
	{
		"title": "Burrrrrrrp",
		"description": "<p><span>Create a function that returns the string \"Burp\" with the amount of \"r's\" determined by the input parameters of the function.</span></p><h3><span>Examples</span></h3><pre><code>longBurp(3) ➞ \"Burrrp\"\n\nlongBurp(5) ➞ \"Burrrrrp\"\n\nlongBurp(9) ➞ \"Burrrrrrrrrp\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Expect </span><code>num</code><span> to always be &gt;= 1.</span></li><li><span>Remember to use a capital \"B\".</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li></ul>",
		"publishedBy": "ente",
		"publishedByUrl": "https://edabit.com/user/2eAwdyT6n7og5EzdW",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(longBurp(3), \"Burrrp\")",
			"Test.assertEquals(longBurp(5), \"Burrrrrp\")",
			"Test.assertEquals(longBurp(9), \"Burrrrrrrrrp\")",
			"Test.assertEquals(longBurp(10), \"Burrrrrrrrrrp\")",
			"Test.assertEquals(longBurp(13), \"Burrrrrrrrrrrrrp\")",
			"Test.assertEquals(longBurp(18), \"Burrrrrrrrrrrrrrrrrrp\")",
			"Test.assertEquals(longBurp(1), \"Burp\")"
		],
		"starterFn": [
			"1\nfunction longBurp(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cePrimGCGmaRrFHWv"
	},
	{
		"title": "Does a Number Exist?",
		"description": "<p><span>Create a function which validates whether a given number exists, and could represent a real life quantity. Inputs will be given as a string.</span></p><h3><span>Examples</span></h3><pre><code>validStrNumber(\"3.2\") ➞ true\n\nvalidStrNumber(\"324\") ➞ true\n\nvalidStrNumber(\"54..4\") ➞ false\n\nvalidStrNumber(\"number\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Accept numbers such as </span><code>.5</code><span> and </span><code>0003</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validStrNumber(\"3.2\"), true)",
			"Test.assertEquals(validStrNumber(\"324\"), true)",
			"Test.assertEquals(validStrNumber(\"54..4\"), false)",
			"Test.assertEquals(validStrNumber(\"number\"), false)",
			"Test.assertEquals(validStrNumber(\".5\"), true)",
			"Test.assertEquals(validStrNumber(\"03\"), true)",
			"Test.assertEquals(validStrNumber(\"3.e\"), false)",
			"Test.assertEquals(validStrNumber(\"1234321\"), true)",
			"Test.assertEquals(validStrNumber(\".42.3\"), false)",
			"Test.assertEquals(validStrNumber(\"0000000\"), true)",
			"Test.assertEquals(validStrNumber(\"000.000\"), true)"
		],
		"starterFn": [
			"1\nfunction validStrNumber(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/r7YJgZgGXJjSyuFxX"
	},
	{
		"title": "Case Insensitive Comparison",
		"description": "<p><span>Write a function that validates whether two strings are identical. Make it case insensitive.</span></p><h3><span>Examples</span></h3><pre><code>match(\"hello\", \"hELLo\") ➞ true\n\nmatch(\"motive\", \"emotive\") ➞ false\n\nmatch(\"venom\", \"VENOM\") ➞ true\n\nmatch(\"mask\", \"mAskinG\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(match(\"hello\", \"hELLo\"), true)",
			"Test.assertEquals(match(\"hey\", \"hey\"), true)",
			"Test.assertEquals(match(\"venom\", \"VENOM\"), true)",
			"Test.assertEquals(match(\"maGIciAN\", \"magician\"), true)",
			"Test.assertEquals(match(\"stupIFy\", \"stupifY\"), true)",
			"​",
			"Test.assertEquals(match(\"bald\", \"blad\"), false)",
			"Test.assertEquals(match(\"motive\", \"emotive\"), false)",
			"Test.assertEquals(match(\"mask\", \"mAskinG\"), false)",
			"Test.assertEquals(match(\"skim\", \"skimp\"), false)",
			"Test.assertEquals(match(\"EXCEl\", \"exceLs\"), false)"
		],
		"starterFn": [
			"1\nfunction match(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9MBwBaa3wDKX8Mxbv"
	},
	{
		"title": "Fraction Greater Than One",
		"description": "<p><span>Given a fraction as a string, return whether or not it is greater than 1 when evaluated.</span></p><h3><span>Examples</span></h3><pre><code>greaterThanOne(\"1/2\") ➞ false\n\ngreaterThanOne(\"7/4\") ➞ true\n\ngreaterThanOne(\"10/10\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Fractions must be strictly </span><strong><span>greater</span></strong><span> than 1 (see example #3).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(greaterThanOne(\"1/2\"), false)",
			"Test.assertEquals(greaterThanOne(\"7/4\"), true)",
			"Test.assertEquals(greaterThanOne(\"10/10\"), false)",
			"Test.assertEquals(greaterThanOne(\"12/30\"), false)",
			"Test.assertEquals(greaterThanOne(\"28/3\"), true)",
			"Test.assertEquals(greaterThanOne(\"35/31\"), true)",
			"Test.assertEquals(greaterThanOne(\"11/27\"), false)",
			"Test.assertEquals(greaterThanOne(\"42/32\"), true)",
			"Test.assertEquals(greaterThanOne(\"34/15\"), true)",
			"Test.assertEquals(greaterThanOne(\"16/16\"), false)",
			"Test.assertEquals(greaterThanOne(\"38/41\"), false)",
			"Test.assertEquals(greaterThanOne(\"45/43\"), true)",
			"Test.assertEquals(greaterThanOne(\"13/38\"), false)",
			"Test.assertEquals(greaterThanOne(\"43/2\"), true)",
			"Test.assertEquals(greaterThanOne(\"16/31\"), false)",
			"Test.assertEquals(greaterThanOne(\"41/15\"), true)",
			"Test.assertEquals(greaterThanOne(\"2/38\"), false)",
			"Test.assertEquals(greaterThanOne(\"37/21\"), true)"
		],
		"starterFn": [
			"1\nfunction greaterThanOne(frac) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/L65zKSJKaDAj6JGyt"
	},
	{
		"title": "ES6: Destructuring Objects VIII",
		"description": "<p><span>Using basic object destructuring you can assign variables </span><code>name</code><span> and </span><code>email</code><span>:</span></p><pre><code>let { name, email } = { name: \"John\", email: \"john@example.com\" }\n\nconsole.log(name)  // \"John\"\nconsole.log(email)  // \"john@example.com\"</code></pre><p><span>What if there were more properties but you didn't want to write variables for all of them and just wanted to stick them into another object and do something like this:</span></p><pre><code>let { name, email, rest} = { name: \"John\", email: \"john@example.com\", city: \"Phoenix\", state: \"AZ\", country: \"USA\"}\n\nrest ===  { city: \"Phoenix\", state: \"AZ\", country: \"USA\"} // true</code></pre><p><span>There is something you have to do with the variable name </span><code>rest</code><span> in order to assign it an object containing the rest of the object properties.  You can find out how in the </span><strong><span>MDN</span></strong><span> docs in the </span><strong><span>Resources</span></strong><span> tab.</span></p><p><span>Use the </span><code>rest</code><span> syntax to change the code so that </span><code>rest = {city: \"Phoenix\", state: \"AZ\", address: \"USA\"}</code><span>. Only edit the left side of the assignmet </span><code>{ name, email, rest }</code><span>. Ignore the </span><code>.toString()</code><span> function (used for validation).</span></p><h3><span>Notes</span></h3><p><span>If you know how to use object destructuring, go ahead and complete this challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab for some examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"function validUser() {",
			"  return JSON.stringify(user) === JSON.stringify({ name: \"John\", email: \"john@example.com\",city: \"Phoenix\", state: \"AZ\", country: \"USA\"}) ? \"valid\" : \"not valid\"",
			"}  ",
			"​",
			"function rightSideValidation() {",
			"  return /\\suser\\s/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"Test.assertEquals(validUser(), \"valid\", \"The user object must not be changed\")",
			"Test.assertEquals(rightSideValidation(), \"valid\", 'The right side of the assignment should remain as \"user\"')",
			"Test.assertEquals(name, \"John\")",
			"Test.assertEquals(email, \"john@example.com\")",
			"Test.assertSimilar(rest, {city: \"Phoenix\", state: \"AZ\", country: \"USA\"}, \"The variable rest has not been defined yet.\")"
		],
		"starterFn": [
			"1\nconst user = { name: \"John\", email: \"john@example.com\",city: \"Phoenix\", state: \"AZ\", country: \"USA\"}",
			"2\nconst str = `({ name, email, rest} = user ).toString()`"
		],
		"url": "https://edabit.com/challenge/7GWG3z27pKqJRdPaM"
	},
	{
		"title": "Hello; Hello World; World",
		"description": "<p><span>Write a function that takes an integer and:</span></p><ul><li><span>If the number is a multiple of 3, return </span><code>\"Hello\"</code><span>.</span></li><li><span>If the number is a multiple of 5, return </span><code>\"World\"</code><span>.</span></li><li><span>If the number is a multiple of both 3 and 5, return </span><code>\"Hello World\"</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>helloWorld(3) ➞ \"Hello\"\n\nhelloWorld(5) ➞ \"World\"\n\nhelloWorld(15) ➞ \"Hello World\"</code></pre><h3><span>Notes</span></h3><p><span>Don't forget to </span><code>return</code><span> the result.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(helloWorld(3), \"Hello\")",
			"Test.assertEquals(helloWorld(5), \"World\")",
			"Test.assertEquals(helloWorld(15), \"Hello World\")"
		],
		"starterFn": [
			"1\nfunction helloWorld(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uJqrcYkz4NvYi9eCY"
	},
	{
		"title": "ES6: Destructuring Objects III",
		"description": "<pre><code>const obj =  { two : 2 }\n\nvar { one, two } = obj\n\nconsole.log(one) // outputs undefined</code></pre><p><span>Sometimes an object will be missing properties we are expecting. We can avoid </span><code>undefined</code><span> errors by using default values. Use ES6 object destructuring to add a default value of </span><code>1</code><span> to the </span><code>one</code><span> variable. Ignore the </span><code>.toString()</code><span> function (used for validation).</span></p><h3><span>Notes</span></h3><p><span>If you know how to use object destructuring, go ahead and complete this challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab for some examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"const validString = (str) => {",
			"  return /\\{.*(one).*\\=.*1.*(two).*\\}.*\\=/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			" ",
			"Test.assertEquals(validString(str), \"valid\", \"You must give the variable one a default value\")",
			"Test.assertEquals(one, 1, \"The variable one must equal 1\")",
			"Test.assertEquals(two, 2, \"The variable two must equal 2\")"
		],
		"starterFn": [
			"1\nconst str = `({ one, two } = { two : 2 }).toString()`"
		],
		"url": "https://edabit.com/challenge/pXWouZHLLhW7ggGBo"
	},
	{
		"title": "Testing K^K == N?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if </span><code>k^k == n</code><span> for input </span><code>(n, k)</code><span> and return </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>kToK(4, 2) ➞ true\n\nkToK(387420489, 9) ➞ true\n// 9^9 == 387420489\n\nkToK(3124, 5) ➞ false\n\nkToK(17, 3) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>The </span><code>^</code><span> operator refers to exponentiation operation, not the bitwise XOR operation.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(kToK(4, 2), true)",
			"Test.assertEquals(kToK(387420489, 9), true)",
			"Test.assertEquals(kToK(302875106592253, 13), true)",
			"​",
			"Test.assertEquals(kToK(3124, 5), false)",
			"Test.assertEquals(kToK(17, 3), false)",
			"Test.assertEquals(kToK(823544, 7), false)"
		],
		"starterFn": [
			"1\nfunction kToK(n, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/giAxQu4vjMRc7dJ2u"
	},
	{
		"title": "Filter Strings from Array",
		"description": "<p><span>Create a function that takes an array of strings and numbers, and filters out the array so that it returns an array of integers only.</span></p><h3><span>Examples</span></h3><pre><code>filterArray([1, 2, 3, \"a\", \"b\", 4]) ➞ [1, 2, 3, 4]\n\nfilterArray([\"A\", 0, \"Edabit\", 1729, \"Python\", \"1729\"]) ➞ [0, 1729]\n\nfilterArray([\"Nothing\", \"here\"]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(filterArray([1, 2, 3, \"a\", \"b\", 4]), [1, 2, 3, 4])",
			"Test.assertSimilar(filterArray([\"A\", 1, \"&amp\", 0, -9, \"Edabit\"]), [1, 0, -9])",
			"Test.assertSimilar(filterArray([\"Nothing\", \"here\"]),[])",
			"Test.assertSimilar(filterArray([1, 2, 3, 3.5 , \"a\", \"b\", 4 , 5.8 , 6]), [1, 2, 3, 4 , 6])"
		],
		"starterFn": [
			"1\nfunction filterArray(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XKX5NHT92okxXCKW7"
	},
	{
		"title": "Multiply Every Array Item by Two",
		"description": "<p><span>Create a function that takes an array with numbers and return an array with the elements multiplied by two.</span></p><h3><span>Examples</span></h3><pre><code>getMultipliedArr([2, 5, 3]) ➞ [4, 10, 6]\n\ngetMultipliedArr([1, 86, -5]) ➞ [2, 172, -10]\n\ngetMultipliedArr([5, 382, 0]) ➞ [10, 764, 0]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "felixjoykind",
		"publishedByUrl": "https://edabit.com/user/Yqafc6nLMBJnG3SqR",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(getMultipliedArr([2, 5, 3]), [4, 10, 6])",
			"Test.assertSimilar(getMultipliedArr([1, 86, -5]), [2, 172, -10])",
			"Test.assertSimilar(getMultipliedArr([5, 382, 0]), [10, 764, 0])",
			"​",
			"// Made by @felixjoykind"
		],
		"starterFn": [
			"1\nfunction getMultipliedArr(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pzmTaGsP6FWRNBF9y"
	},
	{
		"title": "String or Integer?",
		"description": "<p><span>Create a function that checks if the argument is an integer or a string. Return </span><code>int</code><span> if it's an integer and </span><code>str</code><span> if it's a string.</span></p><h3><span>Examples</span></h3><pre><code>intOrString(8) ➞ \"int\"\n\nintOrString(\"Hello\") ➞ \"str\"\n\nintOrString(9843532) ➞ \"int\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(intOrString(1), \"int\")",
			"Test.assertEquals(intOrString(\"HELLO\"), \"str\")",
			"Test.assertEquals(intOrString(\"edabit\"), \"str\")",
			"Test.assertEquals(intOrString(873432874), \"int\")",
			"Test.assertEquals(intOrString(5), \"int\")"
		],
		"starterFn": [
			"1\nfunction intOrString(param) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NL3ygNoPHcktc4mM6"
	},
	{
		"title": "Count the Syllables",
		"description": "<p><span>Create a function that returns the </span><strong><span>number of syllables</span></strong><span> in a simple string. The string is made up of </span><em><span>short repeated words</span></em><span> like </span><code>\"Lalalalalalala\"</code><span> (which would have </span><em><span>7 syllables</span></em><span>).</span></p><h3><span>Examples</span></h3><pre><code>countSyllables(\"Hehehehehehe\") ➞ 6\n\ncountSyllables(\"bobobobobobobobo\") ➞ 8\n\ncountSyllables(\"NANANA\") ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>For simplicity, please note that each syllable will consist of two letters only.</span></li><li><span>Your code should accept strings of any case (upper, lower and mixed case).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countSyllables(\"Hehehehehehe\"), 6)",
			"Test.assertEquals(countSyllables(\"bobobobobobobobo\"), 8)",
			"Test.assertEquals(countSyllables(\"NANANANA\"), 4)",
			"Test.assertEquals(countSyllables(\"lelelele\"), 4)",
			"Test.assertEquals(countSyllables(\"momomomomomomomomo\"), 9)",
			"Test.assertEquals(countSyllables(\"WiWiWiWiWiWiWiWiWiWi\"), 10)",
			"Test.assertEquals(countSyllables(\"RURURURURURUrurururuRURU\"), 12)",
			"Test.assertEquals(countSyllables(\"go\"), 1)",
			"Test.assertEquals(countSyllables(\"dede\"), 2)"
		],
		"starterFn": [
			"1\nfunction countSyllables(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rkoYERWYDt32qZLvH"
	},
	{
		"title": "Array of Word Lengths",
		"description": "<p><span>Create a function that takes an array of words and transforms it into an array of each word's length.</span></p><h3><span>Examples</span></h3><pre><code>wordLengths([\"hello\", \"world\"]) ➞ [5, 5]\n\nwordLengths([\"Halloween\", \"Thanksgiving\", \"Christmas\"]) ➞ [9, 12, 9]\n\nwordLengths([\"She\", \"sells\", \"seashells\", \"down\", \"by\", \"the\", \"seashore\"]) ➞ [3, 5, 9, 4, 2, 3, 8]</code></pre><h3><span>Notes</span></h3><ul><li><span>No test case will contain punctuation.</span></li><li><span>Arrays can be of various lengths.</span></li></ul>",
		"publishedBy": "jmichael12",
		"publishedByUrl": "https://edabit.com/user/CJnuSjyCBMTbTiibD",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(wordLengths([\"hello\", \"world\"]), [5, 5], \"Example #1\")",
			"Test.assertSimilar(wordLengths([\"Halloween\", \"Thanksgiving\", \"Christmas\"]), [9, 12, 9], \"Example #2\")",
			"Test.assertSimilar(wordLengths([\"She\", \"sells\", \"seashells\", \"down\", \"by\", \"the\", \"seashore\"]), [3, 5, 9, 4, 2, 3, 8], \"Example #3\")",
			"Test.assertSimilar(wordLengths([\"Indiana\", \"Jones\", \"and\", \"the\", \"Temple\", \"of\", \"Doom\"]), [7, 5, 3, 3, 6, 2, 4])",
			"Test.assertSimilar(wordLengths([\"Programming\", \"is\", \"fun\"]), [11, 2, 3])"
		],
		"starterFn": [
			"1\nfunction wordLengths(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/B9yPEStmax7Jxb9Dj"
	},
	{
		"title": "RegEx: Character Classes VIII ⁠- \\D",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>There is a hidden message in this string:</span></p><pre><code>const str = \"242Edabit23 45can344 3be3 254324addictive!\"</code></pre><p><span>Write the regular expression that reveals the hidden message. You have to remove all of the numbers to reveal the message. Use the character class </span><code>\\D</code><span> in your expression.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on character classes if you're stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"const str = \"242Edabit23 45can344 3be3 254324addictive!\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\D/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP).join(\"\")",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"console.log(testExp(str))",
			"​",
			"Test.assertNotEquals(testExp(str), \"required\", \"You are required to use a \\D character class in your expression.\")",
			"Test.assertSimilar(testExp(str), \"Edabit can be addictive!\")"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you expression here */g"
		],
		"url": "https://edabit.com/challenge/T2sDPQQhpaEd9YAiq"
	},
	{
		"title": "Make My Way Home",
		"description": "<p><span>You will be given a list, showing how far James travels away from his home for each day. He may choose to travel towards or away from his house, so negative values are to be expected.</span></p><p><span>Create a function which calculates how far James must walk to get back home.</span></p><h3><span>Examples</span></h3><pre><code>distanceHome([2, 4, 2, 5]) ➞ 13\n\ndistanceHome([-1, -4, -3, -2]) ➞ 10\n\ndistanceHome([3, 4, -5, -2]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume that James only travels in a straight line.</span></li><li><span>Distance is always a positive number.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(distanceHome([2, 4, 2, 5]), 13)",
			"Test.assertEquals(distanceHome([-1, -4, -3, -2]), 10)",
			"Test.assertEquals(distanceHome([3, 4, -5, -2]), 0)",
			"Test.assertEquals(distanceHome([12, 12]), 24)",
			"Test.assertEquals(distanceHome([10, 8, -4, -10, -15, 14, -13]), 10)",
			"Test.assertEquals(distanceHome([-3, -6, -15, -14, -11, 3, 0, -15, 0]), 61)",
			"Test.assertEquals(distanceHome([-11, -4, -14, 4, -2, 7, 0, -1, 10, -1]), 12)",
			"Test.assertEquals(distanceHome([-7, 1, 0, -9, 0, 0]), 15)",
			"Test.assertEquals(distanceHome([-15, -7, 4, -3, -8]), 29)",
			"Test.assertEquals(distanceHome([-11, 10, -6, 8, 0, 12, -11]), 2)",
			"Test.assertEquals(distanceHome([-4, -5, -14, -13]), 36)",
			"Test.assertEquals(distanceHome([5, 8]), 13)",
			"Test.assertEquals(distanceHome([10, -15, -3, 2, 4, -15, 11, 1]), 5)",
			"Test.assertEquals(distanceHome([9, 13, -11, -11, -10, -12, 15, -3]), 10)",
			"Test.assertEquals(distanceHome([13, -1, -12, -4, 0, 10, 8, 10]), 24)",
			"Test.assertEquals(distanceHome([-9, 1, -10, 10, -9, -10, 0, 11, -2, -3]), 21)",
			"Test.assertEquals(distanceHome([13, 2, 12, 12, -15, 11, 9, 0, 13]), 57)",
			"Test.assertEquals(distanceHome([0, 5, 8, -3]), 10)",
			"Test.assertEquals(distanceHome([-10, 2, -1, -12]), 21)",
			"Test.assertEquals(distanceHome([-9, -11, 11, -15, -8]), 32)"
		],
		"starterFn": [
			"1\nfunction distanceHome (arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ywBPgGhgeLHibEG7H"
	},
	{
		"title": "String to Integer and Vice Versa",
		"description": "<p><span>Write two functions:</span></p><ol><li><code>toInt()</code><span> : A function to convert a string to an integer.</span></li><li><code>toStr()</code><span> : A function to convert an integer to a string.</span></li></ol><h3><span>Examples</span></h3><pre><code>toInt(\"77\") ➞ 77\n\ntoInt(\"532\") ➞ 532\n\ntoStr(77) ➞ \"77\"\n\ntoStr(532) ➞ \"532\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(toInt(\"37\"), 37)",
			"Test.assertEquals(toInt(\"113\"), 113)",
			"Test.assertEquals(toInt(\"5\"), 5)",
			"Test.assertEquals(toInt(\"5231\"), 5231)",
			"Test.assertEquals(toStr(37), \"37\")",
			"Test.assertEquals(toStr(113), \"113\")",
			"Test.assertEquals(toStr(5), \"5\")",
			"Test.assertEquals(toStr(5231), \"5231\")"
		],
		"starterFn": [
			"1\nfunction toInt(str) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction toStr(int) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/EpCYjhzPKtCkkspL9"
	},
	{
		"title": "ES6: Destructuring Arrays II",
		"description": "<p><span>You can assign variables from nested arrays like this:</span></p><pre><code>const arr = [\"cars\", \"planes\", [\"trains\", [\"motorcycles\"]]]\n\nlet trans1 = arr[0]\nlet trans2 = arr[1]\nlet trans3 = arr[2][0]\nlet trans4 = arr[2][1][0]\n\nconsole.log(trans1) // outputs \"cars\"\nconsole.log(trans2) // outputs \"planes\"\nconsole.log(trans3) // outputs \"trains\"\nconsole.log(trans4) // outputs \"motorcycles\"</code></pre><p><span>With ES6, you can assign variables from arrays in a much more succint way.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(trans1, \"cars\", 'trans1 does not equal \"cars\"')",
			"Test.assertEquals(trans2, \"planes\", 'trans2 does not equal \"planes\"')",
			"Test.assertEquals(trans3, \"trains\", 'trans3 does not equal \"trains\"')",
			"Test.assertEquals(trans4, \"motorcycles\", 'trans4 does not equal \"motorcycles\"')"
		],
		"starterFn": [
			"1\nconst arr = [\"cars\", \"planes\", [\"trains\", [\"motorcycles\"]]]",
			"2\n​",
			"3\n// Fix the following using es6 destructuring",
			"4\n// Only edit what's inside of [ trans1, trans2, trans3, trans4 ]",
			"5\nlet [ trans1, trans2, trans3, trans4 ] = arr",
			"6\n​",
			"7\n/*",
			"8\nconsole.log(trans1) // should output \"cars\"",
			"9\nconsole.log(trans2) // should output \"planes\"",
			"10\nconsole.log(trans3) // should output \"trains\"",
			"11\nconsole.log(trans4) // should output \"motorcycles\"",
			"12\n*/"
		],
		"url": "https://edabit.com/challenge/HBNwoHQJn5uTWJCgM"
	},
	{
		"title": "Volume of a Pizza",
		"description": "<p><span>Tom is a very methodic guy that loves geometry and pizza: he loves them so much that, before eating a pizza, he calculates its radius and its height. Now, he wants to know from you the total volume of pizza that he swallowed!</span></p><p><span>You are given the two parameters that Tom measured:</span></p><ul><li><code>radius</code></li><li><code>height</code></li></ul><p><span>He tells you that if you multiply the height for the </span><strong><span>square</span></strong><span> of the radius and multiply the result for the mathematical constant </span><strong><span>π</span></strong><span> (Pi), you will obtain the total volume of the pizza. Implement a function that returns the volume of the pizza as a whole number, rounding it to the nearest integer (and rounding up for numbers with </span><code>.5</code><span> as decimal part).</span></p><h3><span>Examples</span></h3><pre><code>volPizza(1, 1) ➞ 3\n// (radius² x height x π) = 3.14159... rounded to the nearest integer.\n\nvolPizza(7, 2) ➞ 308\n\nvolPizza(10, 2.5) ➞ 785</code></pre><h3><span>Notes</span></h3><ul><li><span>This challenge requires knowledge of some language fundamentals related to math: the </span><code>Math</code><span> object methods. Find help in the </span><strong><span>Resources</span></strong><span> tab if you don't know them or if you still aren't confident with these concepts.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li><li><span>For experienced users: </span><em><span>try to be creative!</span></em></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(volPizza(1, 1), 3, \"Example #1\")",
			"Test.assertEquals(volPizza(7, 2), 308, \"Example #2\")",
			"Test.assertEquals(volPizza(10, 2.5), 785, \"Example #3\")",
			"Test.assertEquals(volPizza(15, 1.3), 919)",
			"Test.assertEquals(volPizza(20, 1), 1257)",
			"Test.assertEquals(volPizza(13, 2), 1062)"
		],
		"starterFn": [
			"1\nfunction volPizza(radius, height) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zuXtbkRZnDnnkf3i4"
	},
	{
		"title": "The pH Scale",
		"description": "<p><span>Given a </span><em><span>pH value</span></em><span>, return whether that value is </span><code>\"alkaline\"</code><span>, </span><code>\"acidic\"</code><span>, or </span><code>\"neutral\"</code><span>. Return </span><code>\"invalid\"</code><span> if the value given is </span><strong><span>less than 0</span></strong><span> or </span><strong><span>greater than 14</span></strong><span>.</span></p><p><img alt=\"Image of a pH chart\" src=\"https://edabit-challenges.s3.amazonaws.com/color_spec.png\"></p><h3><span>Examples</span></h3><pre><code>pHName(5) ➞ \"acidic\"\n\npHName(8.7) ➞ \"alkaline\"\n\npHName(7) ➞ \"neutral\"</code></pre><h3><span>Notes</span></h3><p><span>Values such as 6.9999 and 8.00001 should return </span><code>\"acidic\"</code><span> and </span><code>\"alkaline\"</code><span> respectively.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(pHName(7.0), \"neutral\")",
			"Test.assertEquals(pHName(7), \"neutral\")",
			"Test.assertEquals(pHName(13.52), \"alkaline\")",
			"Test.assertEquals(pHName(-4.33), \"invalid\")",
			"Test.assertEquals(pHName(8.27), \"alkaline\")",
			"Test.assertEquals(pHName(9.72), \"alkaline\")",
			"Test.assertEquals(pHName(-4.58), \"invalid\")",
			"Test.assertEquals(pHName(14.85), \"invalid\")",
			"Test.assertEquals(pHName(17.76), \"invalid\")",
			"Test.assertEquals(pHName(3.9), \"acidic\")",
			"Test.assertEquals(pHName(14.21), \"invalid\")",
			"Test.assertEquals(pHName(-2.35), \"invalid\")",
			"Test.assertEquals(pHName(2.66), \"acidic\")",
			"Test.assertEquals(pHName(16.45), \"invalid\")",
			"Test.assertEquals(pHName(3.46), \"acidic\")",
			"Test.assertEquals(pHName(7.26), \"alkaline\")",
			"Test.assertEquals(pHName(12.46), \"alkaline\")",
			"Test.assertEquals(pHName(17.51), \"invalid\")",
			"Test.assertEquals(pHName(19.7), \"invalid\")",
			"Test.assertEquals(pHName(10.46), \"alkaline\")",
			"Test.assertEquals(pHName(-4.83), \"invalid\")",
			"Test.assertEquals(pHName(3.13), \"acidic\")",
			"Test.assertEquals(pHName(11.38), \"alkaline\")",
			"Test.assertEquals(pHName(5.23), \"acidic\")",
			"Test.assertEquals(pHName(18.85), \"invalid\")",
			"Test.assertEquals(pHName(15.82), \"invalid\")"
		],
		"starterFn": [
			"1\nfunction pHName(pH) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GmAuzN42QXxPNpSmF"
	},
	{
		"title": "Free Coffee Cups",
		"description": "<p><span>For each of the 6 coffee cups I buy, I get a 7th cup free. In total, I get 7 cups. Create a function that takes </span><code>n</code><span> cups bought and return as an integer the total number of cups I would get.</span></p><h3><span>Examples</span></h3><pre><code>totalCups(6) ➞ 7\n\ntotalCups(12) ➞ 14\n\ntotalCups(213) ➞ 248</code></pre><h3><span>Notes</span></h3><ul><li><span>Number of cups I bought + number of cups I got for free.</span></li><li><span>Only valid inputs will be given.</span></li></ul>",
		"publishedBy": "Kavin Umasankar",
		"publishedByUrl": "https://edabit.com/user/td7qPZ7Lv4pEWT2Ya",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(totalCups(6), 7)",
			"Test.assertEquals(totalCups(3), 3)",
			"Test.assertEquals(totalCups(7), 8)",
			"Test.assertEquals(totalCups(12), 14)",
			"Test.assertEquals(totalCups(213), 248)",
			"Test.assertEquals(totalCups(16), 18)"
		],
		"starterFn": [
			"1\nfunction totalCups(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Y24efzo7NaACt3GvX"
	},
	{
		"title": "Spaces Between Each Character",
		"description": "<p><span>Create a function that takes a string and returns a string with spaces in between all of the characters.</span></p><h3><span>Examples</span></h3><pre><code>spaceMeOut(\"space\") ➞ \"s p a c e\"\n\nspaceMeOut(\"far out\") ➞ \"f a r  o u t\"\n\nspaceMeOut(\"elongated musk\") ➞ \"e l o n g a t e d   m u s k\"</code></pre><h3><span>Notes</span></h3><p><span>Treat a space as its own character (i.e. leave three spaces between words).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(spaceMeOut(\"space\"), \"s p a c e\", \"Example #1\")",
			"Test.assertEquals(spaceMeOut(\"far out\"), \"f a r   o u t\", \"Example #2\")",
			"Test.assertEquals(spaceMeOut(\"elongated musk\"), \"e l o n g a t e d   m u s k\", \"Example #3\")",
			"Test.assertEquals(spaceMeOut(\"long\"), \"l o n g\")",
			"Test.assertEquals(spaceMeOut(\"123\"), \"1 2 3\")",
			"Test.assertEquals(spaceMeOut(\"a1b2c3\"), \"a 1 b 2 c 3\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction spaceMeOut(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8zbTPvexR9Aei3Csp"
	},
	{
		"title": "Half, Quarter and Eighth",
		"description": "<p><span>Create a function that takes a number and return an array of three numbers: half of the number, quarter of the number and an eighth of the number.</span></p><h3><span>Examples</span></h3><pre><code>halfQuarterEighth(6) ➞ [3, 1.5, 0.75]\n\nhalfQuarterEighth(22) ➞ [11, 5.5, 2.75]\n\nhalfQuarterEighth(25) ➞ [12.5, 6.25, 3.125]</code></pre><h3><span>Notes</span></h3><p><span>The order of the array is: half, quarter, eighth.</span></p>",
		"publishedBy": "Alon",
		"publishedByUrl": "https://edabit.com/user/Q69qbJ2JtmQFkMXqz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(halfQuarterEighth(6), [3, 1.5, 0.75])",
			"Test.assertSimilar(halfQuarterEighth(22), [11, 5.5, 2.75])",
			"Test.assertSimilar(halfQuarterEighth(25), [12.5, 6.25, 3.125])",
			"Test.assertSimilar(halfQuarterEighth(18), [9, 4.5, 2.25])",
			"Test.assertSimilar(halfQuarterEighth(98), [49, 24.5, 12.25])",
			"Test.assertSimilar(halfQuarterEighth(14), [7, 3.5, 1.75])"
		],
		"starterFn": [
			"1\nfunction halfQuarterEighth(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/M9EfvGwTqvSZ5XbRM"
	},
	{
		"title": "True Ones, False Zeros",
		"description": "<p><span>Create a function that returns an array of booleans from a given number by iterating through the number one digit at a time and appending </span><code>true</code><span> into the array if the digit is 1 and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>integerBoolean(\"100101\") ➞ [true, false, false, true, false, true]\n\nintegerBoolean(\"10\") ➞ [true, false]\n\nintegerBoolean(\"001\") ➞ [false, false, true]</code></pre><h3><span>Notes</span></h3><p><span>Expect numbers with 0 and 1 only.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(integerBoolean(\"100101\"), [true, false, false, true, false, true])",
			"Test.assertSimilar(integerBoolean(\"10\"), [true, false])",
			"Test.assertSimilar(integerBoolean(\"001\"), [false, false, true])",
			"Test.assertSimilar(integerBoolean(\"\"), [])",
			"Test.assertSimilar(integerBoolean(\"111\"), [true, true, true])",
			"Test.assertSimilar(integerBoolean(\"000\"), [false, false, false])",
			"Test.assertSimilar(integerBoolean(\"10010110\"), [true, false, false, true, false, true, true, false])"
		],
		"starterFn": [
			"1\nfunction integerBoolean(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3BqLw3Rp85Y94nAho"
	},
	{
		"title": "Get the Sum of All Array Elements",
		"description": "<p><span>Create a function that takes an array and returns the sum of all numbers in the array.</span></p><h3><span>Examples</span></h3><pre><code>getSumOfItems([2, 7, 4]) ➞ 13\n\ngetSumOfItems([45, 3, 0]) ➞ 48\n\ngetSumOfItems([-2, 84, 23]) ➞ 105</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "felixjoykind",
		"publishedByUrl": "https://edabit.com/user/Yqafc6nLMBJnG3SqR",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(getSumOfItems([2, 7, 4]), 13)",
			"Test.assertEquals(getSumOfItems([45, 3, 0]), 48)",
			"Test.assertEquals(getSumOfItems([-2, 84, 23]), 105)",
			"​",
			"// Made by @felixjoykind"
		],
		"starterFn": [
			"1\nfunction getSumOfItems(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/y6dMjvNaPXXNKeBRQ"
	},
	{
		"title": "Is It a Triangle?",
		"description": "<p><span>Create a function that takes three numbers as arguments and returns </span><code>true</code><span> if it's a triangle and </span><code>false</code><span> if not.</span></p><h3><span>Examples</span></h3><pre><code>isTriangle(2, 3, 4) ➞ true\n\nisTriangle(3, 4, 5) ➞ true\n\nisTriangle(4, 3, 8) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><code>a</code><span>, </span><code>b</code><span> and, </span><code>c</code><span> are the side lengths of the triangles.</span></li><li><span>Test input will always be three positive numbers.</span></li></ul>",
		"publishedBy": "pela",
		"publishedByUrl": "https://edabit.com/user/9XnGoq9Tv6ut3zTtH",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isTriangle(4, 5, 6), true)",
			"Test.assertEquals(isTriangle(3, 4, 6), true)",
			"Test.assertEquals(isTriangle(2, 5, 7), false)",
			"Test.assertEquals(isTriangle(2, 5, 9), false)",
			"Test.assertEquals(isTriangle(2, 9, 5), false)",
			"Test.assertEquals(isTriangle(9, 2, 5), false)",
			"Test.assertEquals(isTriangle(11, 12, 20), true)",
			"Test.assertEquals(isTriangle(14, 3, 12), true)",
			"Test.assertEquals(isTriangle(23, 4, 28), false)",
			"Test.assertEquals(isTriangle(21, 4, 25), false)"
		],
		"starterFn": [
			"1\nfunction isTriangle(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/k5uod5qGNgHwPaWzA"
	},
	{
		"title": "The 3 Programmers Problem",
		"description": "<p><span>You hired three programmers and you (hopefully) pay them. Create a function that takes three numbers (the hourly wages of each programmer) and returns the difference between the highest-paid programmer and the lowest-paid.</span></p><h2><span>Examples</span></h2><pre><code>programmers(147, 33, 526) ➞ 493\n\nprogrammers(33, 72, 74) ➞ 41\n\nprogrammers(1, 5, 9) ➞ 8</code></pre><h2><span>Notes</span></h2><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(programmers(1,   5,   9),   8)",
			"Test.assertEquals(programmers(43,  33,  43),  10)",
			"Test.assertEquals(programmers(88,  14,  23),  74)",
			"Test.assertEquals(programmers(33,  72,  74),  41)",
			"Test.assertEquals(programmers(147, 33,  526), 493)",
			"Test.assertEquals(programmers(234, 345, 457), 223)"
		],
		"starterFn": [
			"1\nfunction programmers(one, two, three) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BYZW3yNmG99eLpSdR"
	},
	{
		"title": "Add a Consecutive List of Numbers",
		"description": "<p><span>Write a function that takes the last number of a consecutive list of numbers and returns the total of all numbers up to and including it.</span></p><h3><span>Examples</span></h3><pre><code>addUpTo(3) ➞ 6\n// 1 + 2 + 3 = 6\n\naddUpTo(10) ➞ 55\n// 1 + 2 + 3 + ... + 10 = 55\n\naddUpTo(7) ➞ 28\n// 1 + 2 + 3 + ... + 7 = 28</code></pre><h3><span>Notes</span></h3><ul><li><span>You will only be given valid inputs.</span></li><li><span>There are various ways of doing this; try finding them!</span></li><li><span>Remember to </span><code>return</code><span> the result.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(addUpTo(3), 6, \"Example #1\")",
			"Test.assertEquals(addUpTo(10), 55, \"Example #2\")",
			"Test.assertEquals(addUpTo(0), 0)",
			"Test.assertEquals(addUpTo(2), 3)",
			"Test.assertEquals(addUpTo(20), 210)",
			"Test.assertEquals(addUpTo(1), 1)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction addUpTo(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ygF4FR7ah2Bn9CNoz"
	},
	{
		"title": "Add, Subtract, Multiply or Divide?",
		"description": "<p><span>Write a function that takes two numbers and returns if they should be added, subtracted, multiplied or divided to get 24. If none of the operations can give 24, return </span><code>null</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>operation(15, 9) ➞ \"added\"\n\noperation(26, 2) ➞ \"subtracted\"\n\noperation(11, 11) ➞ null</code></pre><h3><span>Notes</span></h3><ul><li><span>Only integers are used as test input.</span></li><li><span>Numbers should be added, subtracted, divided or multiplied in the order they appear in the parameters.</span></li><li><span>The function should return either </span><code>\"added\"</code><span>, </span><code>\"subtracted\"</code><span>, </span><code>\"divided\"</code><span>, </span><code>\"multiplied\"</code><span> or </span><code>null</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(operation(12, 12), \"added\")",
			"Test.assertEquals(operation(100, 76), \"subtracted\")",
			"Test.assertEquals(operation(6, 4), \"multiplied\")",
			"Test.assertEquals(operation(528, 22), \"divided\")",
			"Test.assertEquals(operation(10, 12), null)"
		],
		"starterFn": [
			"1\nfunction operation(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XyPee4TdK64BTgvbD"
	},
	{
		"title": "Lowercase, Uppercase or Mixed?",
		"description": "<p><span>Create a function which returns </span><code>\"upper\"</code><span> if all the letters in a word are </span><strong><span>uppercase</span></strong><span>, </span><code>\"lower\"</code><span> if </span><strong><span>lowercase</span></strong><span> and </span><code>\"mixed\"</code><span> for any mix of the two.</span></p><h3><span>Examples</span></h3><pre><code>getCase(\"whisper...\") ➞ \"lower\"\n\ngetCase(\"SHOUT!\") ➞ \"upper\"\n\ngetCase(\"Indoor Voice\") ➞ \"mixed\"</code></pre><h3><span>Notes</span></h3><p><span>Ignore punctuation, spaces and numbers.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getCase(\"whisper...\"), \"lower\")",
			"Test.assertEquals(getCase(\"SHOUT!\"), \"upper\")",
			"Test.assertEquals(getCase(\"Indoor Voice\"), \"mixed\")",
			"Test.assertEquals(getCase(\"324324Indoor66453546Voice434\"), \"mixed\")",
			"Test.assertEquals(getCase(\"!!!!SHOUT!!!!\"), \"upper\")",
			"Test.assertEquals(getCase(\"......313whisper2131232...\"), \"lower\")"
		],
		"starterFn": [
			"1\nfunction getCase(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FBedBBPjcgGDBm5yr"
	},
	{
		"title": "Add the Index",
		"description": "<p><span>Given an array of numbers, create a function which returns the same array but with </span><strong><span>each element's index in the array added to itself</span></strong><span>. This means you add </span><em><span>0 to the number at index 0, add 1 to the number at index 1, etc...</span></em></p><h3><span>Examples</span></h3><pre><code>addIndexes([0, 0, 0, 0, 0]) ➞ [0, 1, 2, 3, 4]\n\naddIndexes([1, 2, 3, 4, 5]) ➞ [1, 3, 5, 7, 9]\n\naddIndexes([5, 4, 3, 2, 1]) ➞ [5, 5, 5, 5, 5]</code></pre><h3><span>Notes</span></h3><p><span>You'll only get numbers in the array.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(addIndexes([0, 0, 0, 0, 0]), [0, 1, 2, 3, 4])",
			"Test.assertSimilar(addIndexes([1, 2, 3, 4, 5]), [1, 3, 5, 7, 9])",
			"Test.assertSimilar(addIndexes([5, 4, 3, 2, 1]), [5, 5, 5, 5, 5])",
			"Test.assertSimilar(addIndexes([-25, -15, 3]), [-25, -14, 5])",
			"Test.assertSimilar(addIndexes([27]), [27])",
			"Test.assertSimilar(addIndexes([-48, -20, 41, 29, -25, -17, -13, 5, 4, -5, 3, -17, 23]), [-48, -19, 43, 32, -21, -12, -7, 12, 12, 4, 13, -6, 35])",
			"Test.assertSimilar(addIndexes([-32, -24, -50, 48, 5, -27, -33, -3, 16, -16, -31, -11, 43]), [-32, -23, -48, 51, 9, -22, -27, 4, 24, -7, -21, 0, 55])",
			"Test.assertSimilar(addIndexes([38, -8, 40, -50, -26, -3, -29, -33, 13, 28]), [38, -7, 42, -47, -22, 2, -23, -26, 21, 37])",
			"Test.assertSimilar(addIndexes([-1, -3, -20, 13, 19, -12, 15, 8, -49, 27, -21, 17, 41, 17, 5, -45, -33]), [-1, -2, -18, 16, 23, -7, 21, 15, -41, 36, -11, 28, 53, 30, 19, -30, -17])",
			"Test.assertSimilar(addIndexes([35, -48, -17, 25, 25, -45, -49, -32, -40, 48, 20, -27, -22, -1, -20, -5, 29, 18, -28, -36]), [35, -47, -15, 28, 29, -40, -43, -25, -32, 57, 30, -16, -10, 12, -6, 10, 45, 35, -10, -17])",
			"Test.assertSimilar(addIndexes([-48]), [-48])",
			"Test.assertSimilar(addIndexes([-15, -20, -28, -41, -2, -36, -18, -23, 44, -17, -12, -33, 7, 34, 5, -16]), [-15, -19, -26, -38, 2, -31, -12, -16, 52, -8, -2, -22, 19, 47, 19, -1])",
			"Test.assertSimilar(addIndexes([-20, 25, 49, -4, -20, -26, 23, 23, -50, 44, -48, -27]), [-20, 26, 51, -1, -16, -21, 29, 30, -42, 53, -38, -16])",
			"Test.assertSimilar(addIndexes([-9, 46, -17, 26, 0, -26, 12, -15, -30, -44, 29, 45, -38, -43]), [-9, 47, -15, 29, 4, -21, 18, -8, -22, -35, 39, 56, -26, -30])",
			"Test.assertSimilar(addIndexes([-44, -42, 26, -50, -29, -32, -22, 27, -31, 21, -12, -18, -13, -24, 24, 35]), [-44, -41, 28, -47, -25, -27, -16, 34, -23, 30, -2, -7, -1, -11, 38, 50])",
			"Test.assertSimilar(addIndexes([49, -28, -30, 35]), [49, -27, -28, 38])",
			"Test.assertSimilar(addIndexes([20, -5, 25, -36, -12, 13, -30, 26, 34]), [20, -4, 27, -33, -8, 18, -24, 33, 42])",
			"Test.assertSimilar(addIndexes([-41, -22, -41, -12]), [-41, -21, -39, -9])",
			"Test.assertSimilar(addIndexes([-23, 26, 22]), [-23, 27, 24])",
			"Test.assertSimilar(addIndexes([-5, 25, 19, 31, -39, 26, 4, 10, -43, -4, 26, -34, -1, -13, -26, -45]), [-5, 26, 21, 34, -35, 31, 10, 17, -35, 5, 36, -23, 11, 0, -12, -30])",
			"Test.assertSimilar(addIndexes([48, -6, 13, 39]), [48, -5, 15, 42])",
			"Test.assertSimilar(addIndexes([18, 27, -27, -35, -19, -5, -37, 20]), [18, 28, -25, -32, -15, 0, -31, 27])",
			"Test.assertSimilar(addIndexes([-26, 37, -29, -35, 18, 20, -25]), [-26, 38, -27, -32, 22, 25, -19])",
			"Test.assertSimilar(addIndexes([-49, 33, -7, -25]), [-49, 34, -5, -22])",
			"Test.assertSimilar(addIndexes([8, -21, -1, -46, 2, 48, -14, 45, 7, 12, 9, 45, -12, -8]), [8, -20, 1, -43, 6, 53, -8, 52, 15, 21, 19, 56, 0, 5])",
			"Test.assertSimilar(addIndexes([1, -12, 17, 12]), [1, -11, 19, 15])"
		],
		"starterFn": [
			"1\nfunction addIndexes(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/izss6QT59oH72uky3"
	},
	{
		"title": "Halloween Day",
		"description": "<p><span>Create a function that takes date  in the format  </span><strong><span>yyyy/mm/dd</span></strong><span> as an input and returns </span><code>\"Bonfire toffee\"</code><span> if the date is October 31, else return </span><code>\"toffee\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>halloween(new Date(\"2013/10/31\")) ➞ \"Bonfire toffee\"\n\nhalloween(new Date(\"2012/07/31\")) ➞ \"toffee\"\n\nhalloween(new Date(\"2011/10/12\")) ➞ \"toffee\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"dates",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(halloween(new Date(\"2013/10/31\")), \"Bonfire toffee\")",
			"Test.assertEquals(halloween(new Date(\"2012/07/31\")), \"toffee\")",
			"Test.assertEquals(halloween(new Date(\"2015/10/31\")), \"Bonfire toffee\")",
			"Test.assertEquals(halloween(new Date(\"2011/10/12\")), \"toffee\")",
			"Test.assertEquals(halloween(new Date(\"2008/10/11\")), \"toffee\")"
		],
		"starterFn": [
			"1\nfunction halloween(dt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PrRTY8txSSGAteko2"
	},
	{
		"title": "Sum of the Odd Numbers",
		"description": "<p><span>Create a function which returns the </span><em><span>total</span></em><span> of all odd numbers up to and including </span><code>n</code><span>. </span><code>n</code><span> will be given as an </span><em><span>odd number</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>addOddToN(5) ➞ 9\n// 1 + 3 + 5 = 9\n\naddOddToN(13) ➞ 49\n\naddOddToN(47) ➞ 576</code></pre><h3><span>Notes</span></h3><p><span>Curiously, the answers are all </span><em><span>square numbers</span></em><span>!</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(addOddToN(1), 1)",
			"Test.assertEquals(addOddToN(3), 4)",
			"Test.assertEquals(addOddToN(5), 9)",
			"Test.assertEquals(addOddToN(7), 16)",
			"Test.assertEquals(addOddToN(9), 25)",
			"Test.assertEquals(addOddToN(11), 36)",
			"Test.assertEquals(addOddToN(13), 49)",
			"Test.assertEquals(addOddToN(15), 64)",
			"Test.assertEquals(addOddToN(17), 81)",
			"Test.assertEquals(addOddToN(19), 100)",
			"Test.assertEquals(addOddToN(21), 121)",
			"Test.assertEquals(addOddToN(23), 144)",
			"Test.assertEquals(addOddToN(25), 169)",
			"Test.assertEquals(addOddToN(27), 196)",
			"Test.assertEquals(addOddToN(29), 225)",
			"Test.assertEquals(addOddToN(31), 256)",
			"Test.assertEquals(addOddToN(33), 289)",
			"Test.assertEquals(addOddToN(35), 324)",
			"Test.assertEquals(addOddToN(37), 361)",
			"Test.assertEquals(addOddToN(39), 400)",
			"Test.assertEquals(addOddToN(41), 441)",
			"Test.assertEquals(addOddToN(43), 484)",
			"Test.assertEquals(addOddToN(45), 529)",
			"Test.assertEquals(addOddToN(47), 576)",
			"Test.assertEquals(addOddToN(49), 625)",
			"Test.assertEquals(addOddToN(51), 676)"
		],
		"starterFn": [
			"1\nfunction addOddToN(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wu7DA5ud68NjPbXjb"
	},
	{
		"title": "Two Regular Expression Methods",
		"description": "<p><span>There are three methods (exclude compile) that you can use with regular expression literals. Use these two methods to fix the code. One method returns a boolean if there is a match. The other method returns an iterator from a search.</span></p><h3><span>Notes</span></h3><ul><li><span>Do not use the same method twice.</span></li><li><span>Do not use String methods that accept regular expresssions as arguments.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"Test.assertEquals(twoMethods(), true, \"done\" )"
		],
		"starterFn": [
			"1\nfunction twoMethods() {",
			"2\n  // find and equals are not regular expression methods.  Replace them. ",
			"3\n  let methodOne = /hello/.find(\"hello\")[0] === \"hello\" ",
			"4\n  let methodTwo = /hello/.equals(\"hello\") // returns a boolean",
			"5\n  return methodOne && methodTwo",
			"6\n}"
		],
		"url": "https://edabit.com/challenge/grqSjHHQYHBeKK6E3"
	},
	{
		"title": "Coding Website Score Calculator",
		"description": "<p><span>Imagine you run a website that presents users with different coding challenges in levels Easy, Medium, and Hard, where users get points for completing challenges. An </span><em><span>Easy</span></em><span> challenge is worth </span><code>5</code><span> points, a </span><em><span>Medium</span></em><span> challenge is worth </span><code>10</code><span> points, and a </span><em><span>Hard</span></em><span> challenge is worth </span><code>20</code><span> points.</span></p><p><span>Create a function that takes in the number of each challenge level a user has played and calculates the user's total number of points. Keep in mind that a user cannot complete negative challenges, so the function should return the string </span><code>\"invalid\"</code><span> if any of the passed parameters are negative.</span></p><h3><span>Examples</span></h3><pre><code>scoreCalculator(1, 2, 3) ➞ 85\n\nscoreCalculator(1, 0, 10) ➞ 205\n\nscoreCalculator(5, 2, -6) ➞ \"invalid\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "borogove",
		"publishedByUrl": "https://edabit.com/user/8EJ4j2fcfjTJ7Zrzu",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(scoreCalculator(4, 2, 7), 180, \"Test 1\")",
			"Test.assertEquals(scoreCalculator(3, 12, 0), 135, \"Test 2\")",
			"Test.assertEquals(scoreCalculator(5, -5, 2), \"invalid\", \"Test 3\")",
			"Test.assertEquals(scoreCalculator(20, 7, 3), 230)",
			"Test.assertEquals(scoreCalculator(0, 0, 0), 0)",
			"Test.assertEquals(scoreCalculator(1, 2, 3), 85)"
		],
		"starterFn": [
			"1\nfunction scoreCalculator(easy, med, hard) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/49xuWj6G4yB6MfvWG"
	},
	{
		"title": "Summing the Squares",
		"description": "<p><span>Create a function where given the </span><em><span>number</span></em><span> </span><code>n</code><span>, return the </span><em><span>sum</span></em><span> of all square numbers up to and including </span><code>n</code><span>.</span></p><pre><code>squaresSum(3) ➞ 14\n// 1² + 2² + 3² =\n// 1 + 4 + 9 =\n// 14 </code></pre><h3><span>Examples</span></h3><pre><code>squaresSum(3) ➞ 14\n\nsquaresSum(12) ➞ 650\n\nsquaresSum(13) ➞ 819</code></pre><h3><span>Notes</span></h3><p><span>Remember that </span><code>n</code><span> is included in the total.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(squaresSum(1), 1)",
			"Test.assertEquals(squaresSum(2), 5)",
			"Test.assertEquals(squaresSum(3), 14)",
			"Test.assertEquals(squaresSum(4), 30)",
			"Test.assertEquals(squaresSum(5), 55)",
			"Test.assertEquals(squaresSum(6), 91)",
			"Test.assertEquals(squaresSum(7), 140)",
			"Test.assertEquals(squaresSum(8), 204)",
			"Test.assertEquals(squaresSum(9), 285)",
			"Test.assertEquals(squaresSum(10), 385)",
			"Test.assertEquals(squaresSum(11), 506)",
			"Test.assertEquals(squaresSum(12), 650)",
			"Test.assertEquals(squaresSum(13), 819)",
			"Test.assertEquals(squaresSum(14), 1015)",
			"Test.assertEquals(squaresSum(15), 1240)",
			"Test.assertEquals(squaresSum(16), 1496)",
			"Test.assertEquals(squaresSum(17), 1785)",
			"Test.assertEquals(squaresSum(18), 2109)",
			"Test.assertEquals(squaresSum(19), 2470)",
			"Test.assertEquals(squaresSum(20), 2870)",
			"Test.assertEquals(squaresSum(21), 3311)",
			"Test.assertEquals(squaresSum(22), 3795)",
			"Test.assertEquals(squaresSum(23), 4324)",
			"Test.assertEquals(squaresSum(24), 4900)",
			"Test.assertEquals(squaresSum(25), 5525)",
			"Test.assertEquals(squaresSum(26), 6201)"
		],
		"starterFn": [
			"1\nfunction squaresSum(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ip7xupP78R5z5mTmT"
	},
	{
		"title": "Check if Number is within a Given Range",
		"description": "<p><span>Given a number and an object with </span><code>min</code><span> and </span><code>max</code><span> properties, return </span><code>true</code><span> if the number lies within the given range (inclusive).</span></p><h3><span>Examples</span></h3><pre><code>isInRange(4, { min: 0, max: 5 }) ➞ true\n\nisInRange(4, { min: 4, max: 5 }) ➞ true\n\nisInRange(4, { min: 6, max: 10 }) ➞ false\n\nisInRange(5, { min: 5, max: 5 }) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Numbers can be positive or negative, and they may not be integers.</span></li><li><span>You can assume </span><code>min &lt;= max</code><span> is always true.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Peter Flynn",
		"publishedByUrl": "https://edabit.com/user/wkxYjg28PC4xdWH69",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"objects",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isInRange(4, { min: 0, max: 5 }), true)",
			"Test.assertEquals(isInRange(4, { min: 4, max: 5 }), true)",
			"Test.assertEquals(isInRange(4, { min: 0, max: 4 }), true)",
			"Test.assertEquals(isInRange(4, { min: 6, max: 10 }), false)",
			"Test.assertEquals(isInRange(11, { min: 6, max: 10 }), false)",
			"Test.assertEquals(isInRange(5, { min: 5, max: 5 }), true)",
			"Test.assertEquals(isInRange(1.5, { min: 1.25, max: 1.75 }), true)",
			"Test.assertEquals(isInRange(1.1, { min: 1.25, max: 1.75 }), false)",
			"Test.assertEquals(isInRange(1.8, { min: 1.25, max: 1.75 }), false)",
			"Test.assertEquals(isInRange(-1, { min: -1, max: 1 }), true)"
		],
		"starterFn": [
			"1\nfunction isInRange(num, range) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Wp8uSyh2tfpdzR4CP"
	},
	{
		"title": "Raucous Applause",
		"description": "<p><em><span>After an amazing performance, the crowd goes wild! People clap enthusiastically and most claps overlap with each other to create one homogeneous sound.</span></em></p><p><span>An overlapped clap is a clap </span><strong><span>which starts but doesn't finish</span></strong><span>, as in </span><code>\"ClaClap\"</code><span> (The first clap is cut short and there are </span><em><span>overall 2 claps</span></em><span>)</span></p><p><span>Given a string of what the </span><strong><span>overlapping claps sounded like</span></strong><span>, return how many claps were made in total.</span></p><h3><span>Examples</span></h3><pre><code>countClaps(\"ClaClaClaClap!\") ➞ 4\n\ncountClaps(\"ClClClaClaClaClap!\") ➞ 6\n\ncountClaps(\"CCClaClClap!Clap!ClClClap!\") ➞ 9</code></pre><h3><span>Notes</span></h3><p><span>Each clap starts with a capital \"C\".</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countClaps(\"ClaClaClaClap!\"), 4)",
			"Test.assertEquals(countClaps(\"ClClClaClaClaClap!\"), 6)",
			"Test.assertEquals(countClaps(\"CCClaClClap!Clap!ClClClap!\"), 9)",
			"Test.assertEquals(countClaps(\"ClCCClaClaClaClCClap!CClaClap!Clap!ClClClClaClaClap!Clap!ClClCClap!Clap!ClClap!ClaCClClap!ClClap!Clap!CClClaClaClaCClaCClaClClaCCCClaClap!Clap!ClaClaClap!ClaClap!CClap!Clap!ClClap!\"), 61)",
			"Test.assertEquals(countClaps(\"Clap!ClClaClap!ClaClap!CClap!ClClClap!CClaClap!CClap!ClClap!ClaClaClClap!ClaClap!ClClCClaClaCClaCCCCClClCClap!ClaCClaClCClap!Clap!ClaClaClaCClaClap!\"), 52)",
			"Test.assertEquals(countClaps(\"Clap!CClaClClap!ClCClCCClaCClap!ClCCClCClClap!ClClClap!CClap!CClCClap!ClCClap!Clap!Clap!Clap!ClClap!Clap!CClaClClap!ClaClaClaClCClClaClClap!ClaClClaClap!ClaClap!CClClClap!ClClaClClap!Clap!ClaClaClaClaClClap!CClaClClaCClap!ClClClClClap!Clap!CClClap!ClClap!ClaClap!CClClaClaClap!Clap!\"), 97)",
			"Test.assertEquals(countClaps(\"CClCClaCClap!Clap!ClaClap!ClCCClap!ClClClClap!ClaClCClClaClap!\"), 23)",
			"Test.assertEquals(countClaps(\"Clap!Clap!ClClCClCClClaClaClaCClaClClaClClClClap!CClap!ClClap!ClClClaClaClClaClaClaClaCClClaClap!\"), 36)",
			"Test.assertEquals(countClaps(\"ClaCCClClCClClaCClCClap!ClaClClaClap!Clap!ClClClClap!Clap!CClap!CClaClClaClCClaClap!ClaClaClaClap!Clap!ClClap!CCClap!ClClaClap!CClClClap!CClaClaClClaClap!ClClap!ClaCClaClap!Clap!Clap!Clap!CClaCCCClap!ClaClap!ClClap!Clap!CClaClaClaClap!CClaCClap!Clap!CClaCClaClaCClaCClap!\"), 94)",
			"Test.assertEquals(countClaps(\"CClClap!Clap!CClCClClaCClaClaClap!ClaClaClaCCCClap!CCClClap!Clap!ClaClaClap!ClClClap!ClCCClap!ClaClaClap!CClap!ClaClap!CClClClap!CClap!CClClaCClClap!ClaClap!ClaClClClCClap!ClaClClap!ClaClaCClap!CClClaClClap!ClaClaClClaClClaClaClap!\"), 82)",
			"Test.assertEquals(countClaps(\"ClaCCClCClaClClaClCClaClaClap!Clap!CClaClap!ClaClap!Clap!ClaClap!Clap!\"), 23)",
			"Test.assertEquals(countClaps(\"CClClaClClaClClap!Clap!Clap!ClClaClap!ClClClClaClap!CClap!ClaClaCCClap!ClClap!CClap!Clap!Clap!ClaClaClap!ClaClClClaClaClap!ClaClaClap!ClClCClaClaCClClaClap!Clap!Clap!CClClaClaClaClaClCClClaClaCClaClap!ClCClClClap!Clap!Clap!Clap!Clap!CClaClap!Clap!CCClaClCClClaClClClaClaClaClaCClap!Clap!\"), 96)",
			"Test.assertEquals(countClaps(\"Clap!ClaClCClaClap!ClCClap!ClClClaClap!ClaClaCClap!ClaClaClap!ClaCClap!Clap!CClClClap!ClClCClaCClCClaCClClClClaClap!ClClaCClap!CCCClap!Clap!ClClap!ClaCClaCClClap!ClClaClap!ClClaClaClaClaCCClClap!CClaClaClap!Clap!ClClap!\"), 78)",
			"Test.assertEquals(countClaps(\"Clap!ClaClCClaClaClap!CClaClap!CCClCClap!Clap!Clap!Clap!ClClap!Clap!ClaClaClClap!Clap!ClaClaClap!CClaClap!CCClClap!ClaClaClap!ClClaClaClaClaClap!CClap!ClaClCClaClap!CClClCClaClap!Clap!CClaCClap!\"), 63)",
			"Test.assertEquals(countClaps(\"Clap!CClaClap!ClClap!ClClClap!ClaCClap!ClaCClClap!CClap!CClClaClap!ClaClaClCCClap!Clap!CClClaClCClaClaClClap!Clap!CClaCClaCClap!ClaCClClCClap!CClap!CClap!ClaClaClaClaClap!ClClap!CClaClaClaClClaClClCClClCClClaClaCClClap!\"), 80)",
			"Test.assertEquals(countClaps(\"CClaCClClap!Clap!Clap!Clap!Clap!Clap!Clap!ClClClap!CClap!CClap!CCClaClClClClClaCClaClap!ClClap!CClaClap!Clap!CCClaClap!Clap!CClClClaClaClaClap!ClaCClap!ClClaClaCClClap!CClap!ClaClap!\"), 60)",
			"Test.assertEquals(countClaps(\"ClaCCClap!\"), 4)",
			"Test.assertEquals(countClaps(\"ClaClap!ClaClaClap!Clap!\"), 6)",
			"Test.assertEquals(countClaps(\"CClap!ClaClaClClap!Clap!ClaCCClap!ClClaClap!CClap!CClap!ClaClClaCClaClap!ClaClap!ClaClClaClaCCClClaClaClap!Clap!\"), 37)",
			"Test.assertEquals(countClaps(\"ClClaCClap!ClaCClaClap!Clap!Clap!ClaClClap!ClClaClaClClaClaClaCCClClClClClap!\"), 27)",
			"Test.assertEquals(countClaps(\"ClClClCClClap!Clap!CCCClap!ClCCClClap!CCClap!Clap!Clap!CClap!ClaClaCClaCClaClaClaClClap!ClaClCCClClaClap!ClClaClaCClCCClClClap!Clap!ClaClap!ClaClaCClap!ClCCClaClap!ClaClap!CClap!CClaClClaClCClaClap!CClClap!ClClap!Clap!CClap!CClaClaClClaClap!\"), 88)",
			"Test.assertEquals(countClaps(\"ClClCClClClaClClCClap!ClCClap!ClaClaClClap!ClaCClClap!ClClaClap!ClaClaClaClap!Clap!Clap!CCCClaClaClaClaClaCClCClaClaClap!Clap!CCCClap!ClaClap!CCClaClaClaClap!ClClClap!CClCCCClap!Clap!CClClClaClap!ClClaCClClap!ClaClClap!ClaClap!ClCClaClaCClap!\"), 88)",
			"Test.assertEquals(countClaps(\"ClClap!Clap!CCClClClaClClClClap!Clap!CClap!ClClap!ClClaCCClap!\"), 22)",
			"Test.assertEquals(countClaps(\"ClaClaClClClaCClap!ClaClaCCClaClaClClap!CClCClCClClClClap!ClaClap!Clap!ClaCCClap!ClCCClaClClClaCCClaClCClClaClap!ClClaClClaClap!ClClap!Clap!ClaClaClClap!\"), 58)",
			"Test.assertEquals(countClaps(\"ClaCClClClClaClClap!ClClap!CCClaCCClClCCClaClap!Clap!CClClClap!ClaCClClaCClaCClClap!ClClClClaCClaClap!Clap!\"), 43)",
			"Test.assertEquals(countClaps(\"ClaClCClClCClCClaCCClap!ClaClaCClap!ClaClap!CClaClaClClaCClClaClaClCCClaClap!ClClap!Clap!Clap!ClaCCClap!ClClaClaClap!ClaClap!CCClap!CClap!CClClap!\"), 54)"
		],
		"starterFn": [
			"1\nfunction countClaps(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3kgpXM2wcSvDR6z4K"
	},
	{
		"title": "Limit a Number's Value",
		"description": "<p><span>Create a function that takes three number arguments — one number as an input and two additional numbers representing the endpoints of a closed range — and return the number limited to this range.</span></p><ul><li><span>If the number falls within the range, the number should be returned.</span></li><li><span>If the number is less than the lower limit of the range, the lower limit should be returned.</span></li><li><span>If the number is greater than the upper limit of the range, the upper limit should be returned.</span></li></ul><h3><span>Examples</span></h3><pre><code>limitNumber(5, 1, 10) ➞ 5\n\nlimitNumber(-3, 1, 10) ➞ 1\n\nlimitNumber(14, 1, 10) ➞ 10\n\nlimitNumber(4.6, 1, 10) ➞ 4.6</code></pre><h3><span>Notes</span></h3><ul><li><span>All test inputs will be valid numbers.</span></li><li><span>All test inputs' range parameters will be in the correct order (i.e. the lower range will be less than or equal to the upper range).</span></li></ul>",
		"publishedBy": "mbbentley",
		"publishedByUrl": "https://edabit.com/user/n5wubRfh6zh8QRymN",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(limitNumber(5, 1, 10), 5)",
			"Test.assertEquals(limitNumber(-3, 1, 10), 1)",
			"Test.assertEquals(limitNumber(14, 1, 10), 10)",
			"Test.assertEquals(limitNumber(4.6, 1, 10), 4.6)",
			"Test.assertEquals(limitNumber(-100, -73, -70), -73)",
			"Test.assertEquals(limitNumber(2, -73, -70), -70)",
			"Test.assertEquals(limitNumber(-71.5, -73, -70), -71.5)",
			"Test.assertEquals(limitNumber(7, 8, 8.1), 8)",
			"Test.assertEquals(limitNumber(9, 8, 8.1), 8.1)",
			"Test.assertEquals(limitNumber(8.05, 8, 8.1), 8.05)",
			"Test.assertEquals(limitNumber(16, 16, 16), 16)",
			"Test.assertEquals(limitNumber(-1, 16, 16), 16)",
			"Test.assertEquals(limitNumber(800, 16, 16), 16)"
		],
		"starterFn": [
			"1\nfunction limitNumber(num, rangeLow, rangeHigh) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZwQJM6FsRsWd3Bm6g"
	},
	{
		"title": "Simple OOP Calculator",
		"description": "<p><span>Create functions for the Calculator class that can do the following:</span></p><ul><li><span>Add two numbers.</span></li><li><span>Subtract two numbers.</span></li><li><span>Multiply two numbers.</span></li><li><span>Divide two numbers.</span></li></ul><h3><span>Examples</span></h3><pre><code>var calculator = new Calculator()\n\ncalculator.add(10, 5) ➞ 15\n\ncalculator.subtract(10, 5) ➞ 5\n\ncalculator.multiply(10, 5) ➞ 50\n\ncalculator.divide(10, 5) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>The functions should return the result of the calculation.</span></p>",
		"publishedBy": "meesie1",
		"publishedByUrl": "https://edabit.com/user/FNBB7APikaxR3DtvN",
		"language": "JavaScript",
		"tags": [
			"classes",
			"math"
		],
		"tests": [
			"var calculator = new Calculator()",
			"Test.assertEquals(calculator.add(5,5), 10, \"5 + 5 = 10\")",
			"Test.assertEquals(calculator.add(20,5), 25, \"20 + 5 = 25\")",
			"Test.assertEquals(calculator.subtract(30,5), 25, \"30 - 5 = 25\")",
			"Test.assertEquals(calculator.subtract(100,5), 95, \"100 - 5 = 95\")",
			"Test.assertEquals(calculator.multiply(5,5), 25, \"5 * 5 = 25\")",
			"Test.assertEquals(calculator.multiply(100,5), 500, \"100 * 5 = 500\")",
			"Test.assertEquals(calculator.divide(10,5), 2, \"10 / 5 = 2\")",
			"Test.assertEquals(calculator.divide(100,5), 20, \"100 / 5 = 20\")"
		],
		"starterFn": [
			"1\nclass Calculator {",
			"2\n  // Write functions to add(), subtract(), multiply() and divide()",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yxKoCKemzacK6PECM"
	},
	{
		"title": "The Study of Wumbology",
		"description": "<p><span>Create a function that flips M's to W's (all uppercase).</span></p><h3><span>Examples</span></h3><pre><code>wumbo(\"I LOVE MAKING CHALLENGES\") ➞ \"I LOVE WAKING CHALLENGES\"\n\nwumbo(\"MEET ME IN WARSAW\") ➞ \"WEET WE IN WARSAW\"\n\nwumbo(\"WUMBOLOGY\") ➞ \"WUWBOLOGY\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wumbo(\"WHAT DO YOU MEAN WE'RE OUT OF MONEY\"), \"WHAT DO YOU WEAN WE'RE OUT OF WONEY\", \"You do not Wumbo.\")",
			"Test.assertEquals(wumbo(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), \"ABCDEFGHIJKLWNOPQRSTUVWXYZ\", \"You do not Wumbo.\")",
			"Test.assertEquals(wumbo(\"1 WUMBO 2 WUMBO 3 WUMBO 4\"), \"1 WUWBO 2 WUWBO 3 WUWBO 4\", \"You do not Wumbo.\")"
		],
		"starterFn": [
			"1\nfunction wumbo(words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9fQ4KKTjAdKeTbYxm"
	},
	{
		"title": "Skip the Drinks with Too Much Sugar",
		"description": "<p><span>The function </span><code>skipTooMuchSugarDrinks()</code><span> takes in an array of drinks. Make sure the function only returns an array of drinks with no sugar in it or a little bit of sugar.</span></p><p><span>Drinks that contain too much sugar (in this challenge) are:</span></p><ul><li><span>Cola</span></li><li><span>Fanta</span></li></ul><h3><span>Examples</span></h3><pre><code>skipTooMuchSugarDrinks([\"fanta\", \"cola\", \"water\"]) ➞ [water]\n\nskipTooMuchSugarDrinks([\"fanta\", \"cola\"]) ➞ []\n\nskipTooMuchSugarDrinks([\"lemonade\", \"beer\", \"water\"]) ➞ [\"lemonade\", \"beer\", \"water\"]</code></pre><h3><span>Notes</span></h3><p><span>The </span><code>skipTooMuchSugarDrinks()</code><span> function returns an array of strings. All drink names are in lowercase.</span></p>",
		"publishedBy": "meesie1",
		"publishedByUrl": "https://edabit.com/user/FNBB7APikaxR3DtvN",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(skipTooMuchSugarDrinks([\"cola\", \"fanta\"]), [])",
			"Test.assertSimilar(skipTooMuchSugarDrinks([\"cola\", \"fanta\", \"water\"]), [\"water\"], \"\")",
			"Test.assertSimilar(skipTooMuchSugarDrinks([\"cola\"]), [], \"\")",
			"Test.assertSimilar(skipTooMuchSugarDrinks([]), [], \"\")",
			"Test.assertSimilar(skipTooMuchSugarDrinks([\"lemonade\", \"beer\", \"fanta\"]), [\"lemonade\", \"beer\"], \"\")",
			"Test.assertSimilar(skipTooMuchSugarDrinks([\"water\", \"cola\"]), [\"water\"], \"\")",
			"Test.assertSimilar(skipTooMuchSugarDrinks([\"water\", \"tea\"]), [\"water\", \"tea\"], \"\")"
		],
		"starterFn": [
			"1\nfunction skipTooMuchSugarDrinks(drinks) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dgf76hmQ5Yw4FATFi"
	},
	{
		"title": "Find the Total Number of Digits the Given Number Has",
		"description": "<p><span>Create a function that takes a number as an argument and returns the amount of digits it has.</span></p><h3><span>Examples</span></h3><pre><code>findDigitAmount(123) ➞ 3\n\nfindDigitAmount(56) ➞ 2\n\nfindDigitAmount(7154) ➞ 4\n\nfindDigitAmount(61217311514) ➞ 11\n\nfindDigitAmount(0) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(findDigitAmount(1), 1, 'Should work with one digit')",
			"Test.assertEquals(findDigitAmount(67), 2, 'Should work with a two-digit number')",
			"Test.assertEquals(findDigitAmount(123), 3, 'Should work with a three-digit number')",
			"Test.assertEquals(findDigitAmount(55551), 5, 'Should work with a bit bigger number')",
			"Test.assertEquals(findDigitAmount(96456431), 8, 'Should work with bigger numbers')",
			"Test.assertEquals(findDigitAmount(0), 1, '0 should return 1, as it is a digit')"
		],
		"starterFn": [
			"1\nfunction findDigitAmount(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MxXj9ZhTGfA96uPm7"
	},
	{
		"title": "Convert Kilometers to Miles",
		"description": "<p><span>In this challenge, you have to implement a function that returns the given distance </span><code>kilometers</code><span> converted into miles. You have to round the result up to the fifth decimal digit.</span></p><h3><span>Examples</span></h3><pre><code>kmtomiles(2) ➞ 1.24274\n\nkmtomiles(6) ➞ 3.72823\n\nkmtomiles(8) ➞ 4.97097</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "SeasideCoder9",
		"publishedByUrl": "https://edabit.com/user/6Bf52CC4zkSmZrpbB",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(kmtomiles(2), 1.24274)",
			"Test.assertEquals(kmtomiles(6), 3.72823)",
			"Test.assertEquals(kmtomiles(8), 4.97097)"
		],
		"starterFn": [
			"1\nfunction kmtomiles(kilometers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/G6iPEYEesayG5eko8"
	},
	{
		"title": "Factorial of a Number",
		"description": "<p><span>Create a function that receives a </span><strong><span>non-negative</span></strong><span> integer and returns the factorial of that number.</span></p><h3><span>Examples</span></h3><pre><code>fact(0) ➞ 1\n\nfact(1) ➞ 1\n\nfact(3) ➞ 6\n\nfact(6) ➞ 720</code></pre><h3><span>Notes</span></h3><p><span>Avoid using built-in functions to solve this challenge.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(fact(0), 1)",
			"Test.assertEquals(fact(1), 1)",
			"Test.assertEquals(fact(2), 2)",
			"Test.assertEquals(fact(3), 6)",
			"Test.assertEquals(fact(7), 5040)",
			"Test.assertEquals(fact(9), 362880)",
			"Test.assertEquals(fact(15), 1307674368000)"
		],
		"starterFn": [
			"1\nfunction fact(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PucsnjWorPP55KfEH"
	},
	{
		"title": "Convert Number to Corresponding Month Name",
		"description": "<p><span>Create a function that takes a number (from 1 to 12) and returns its corresponding month name as a string. For example, if you're given </span><code>3</code><span> as input, your function should return </span><code>\"March\"</code><span>, because March is the 3rd month.</span></p><table><thead><tr><th><span>Number</span></th><th><span>Month Name</span></th></tr></thead><tbody><tr><td><span>1</span></td><td><span>January</span></td></tr><tr><td><span>2</span></td><td><span>February</span></td></tr><tr><td><span>3</span></td><td><span>March</span></td></tr><tr><td><span>4</span></td><td><span>April</span></td></tr><tr><td><span>5</span></td><td><span>May</span></td></tr><tr><td><span>6</span></td><td><span>June</span></td></tr><tr><td><span>7</span></td><td><span>July</span></td></tr><tr><td><span>8</span></td><td><span>August</span></td></tr><tr><td><span>9</span></td><td><span>September</span></td></tr><tr><td><span>10</span></td><td><span>October</span></td></tr><tr><td><span>11</span></td><td><span>November</span></td></tr><tr><td><span>12</span></td><td><span>December</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>monthName(3) ➞ \"March\"\n\nmonthName(12) ➞ \"December\"\n\nmonthName(6) ➞ \"June\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You can expect only integers ranging from 1 to 12 as test input.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Nabeel Mumtaz",
		"publishedByUrl": "https://edabit.com/user/8wFyDvkPiDdKRDExt",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"dates",
			"formatting"
		],
		"tests": [
			"Test.assertEquals(monthName(1), \"January\")",
			"Test.assertEquals(monthName(2), \"February\")",
			"Test.assertEquals(monthName(3), \"March\")",
			"Test.assertEquals(monthName(4), \"April\")",
			"Test.assertEquals(monthName(5), \"May\")",
			"Test.assertEquals(monthName(6), \"June\")",
			"Test.assertEquals(monthName(7), \"July\")",
			"Test.assertEquals(monthName(8), \"August\")",
			"Test.assertEquals(monthName(9), \"September\")",
			"Test.assertEquals(monthName(10), \"October\")",
			"Test.assertEquals(monthName(11), \"November\")",
			"Test.assertEquals(monthName(12), \"December\")"
		],
		"starterFn": [
			"1\nfunction monthName(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NKknKNfeaJxLDfJuZ"
	},
	{
		"title": "You FAILEDPASSED the Exam",
		"description": "<p><span>Here is a trainwreck of a photo:</span></p><p><img alt=\"You FAILEDPASSED the Exam Required mark is 85% Your score 85%\" src=\"https://edabit-challenges.s3.amazonaws.com/FAILEDPASSED.png\"></p><p><span>The challenge is to fix all of the bugs in this incredibly messy code, which the code in the image might've actually looked like (probably not)! The code given will output the same middle two lines as in the image shown above.</span></p><ul><li><span>First parameter is the </span><em><span>user's</span></em><span> score.</span></li><li><span>Second parameter is the </span><em><span>required</span></em><span> score.</span></li></ul><h3><span>Examples</span></h3><pre><code>gradePercentage(\"85%\", \"85%\") ➞ \"You PASSED the Exam\"\n\ngradePercentage(\"99%\", \"85%\") ➞ \"You PASSED the Exam\"\n\ngradePercentage(\"65%\", \"90%\") ➞ \"You FAILED the Exam\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Note that inputs will be given as a string percentage number.</span></li><li><span>Maintain all capitalization.</span></li><li><span>Feel free to </span><em><span>declutter</span></em><span> and </span><em><span>refactor</span></em><span> code if it helps!</span></li></ul>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"conditions",
			"logic"
		],
		"tests": [
			"Test.assertEquals(gradePercentage(\"85%\", \"85%\"), \"You PASSED the Exam\")",
			"Test.assertEquals(gradePercentage(\"99%\", \"85%\"), \"You PASSED the Exam\")",
			"Test.assertEquals(gradePercentage(\"65%\", \"90%\"), \"You FAILED the Exam\")",
			"Test.assertEquals(gradePercentage(\"65%\", \"66%\"), \"You FAILED the Exam\")",
			"Test.assertEquals(gradePercentage(\"5%\", \"8%\"), \"You FAILED the Exam\")",
			"Test.assertEquals(gradePercentage(\"8%\", \"5%\"), \"You PASSED the Exam\")"
		],
		"starterFn": [
			"1\nfunction gradePercentage(userScore, passScore) {",
			"2\n  let s = 'You ';",
			"3\n  userScore = parseInt(userScore.substring(0, userScore.length - 1));",
			"4\n  passScore = parseInt(passScore.substring(0, passScore.length - 1));",
			"5\n  if (youScore <= passScore)",
			"6\n    s = s + 'FAILED';",
			"7\n  if (userScore >= passScore)",
			"8\n    s = s + 'PASSED';",
			"9\n  return 'You' + ' ' + s + ' ' + 'the Exam';",
			"10\n}"
		],
		"url": "https://edabit.com/challenge/eYqGBvdszDAnNmf4J"
	},
	{
		"title": "Get Word Count",
		"description": "<p><span>Create a function that takes a string and returns the word count. The string will be a sentence.</span></p><h3><span>Examples</span></h3><pre><code>countWords(\"Just an example here move along\") ➞ 6\n\ncountWords(\"This is a test\") ➞ 4\n\ncountWords(\"What an easy task, right\") ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "maxming",
		"publishedByUrl": "https://edabit.com/user/bYyDorsuAA38kPqH9",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countWords(\"It's high noon\"), 3)",
			"Test.assertEquals(countWords(\"Is this easy mode\"), 4)",
			"Test.assertEquals(countWords(\"What an easy task, right\"), 5)",
			"Test.assertEquals(countWords(\"This is a test\"), 4)",
			"Test.assertEquals(countWords(\"Just an example here move along\"), 6)",
			"Test.assertEquals(countWords(\"How are you today?\"), 4)"
		],
		"starterFn": [
			"1\nfunction countWords(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FydPqxRiosP7EBiQh"
	},
	{
		"title": "Count Syllables",
		"description": "<p><span>Create a function that counts the number of syllables a word has. Each syllable is separated with a dash </span><code>-</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>numberSyllables(\"buf-fet\") ➞ 2\n\nnumberSyllables(\"beau-ti-ful\") ➞ 3\n\nnumberSyllables(\"mon-u-men-tal\") ➞ 4\n\nnumberSyllables(\"on-o-mat-o-poe-ia\") ➞ 6</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(numberSyllables(\"buf-fet\"), 2)",
			"Test.assertEquals(numberSyllables(\"beau-ti-ful\"), 3)",
			"Test.assertEquals(numberSyllables(\"mon-u-men-tal\"), 4)",
			"Test.assertEquals(numberSyllables(\"on-o-mat-o-poe-ia\"), 6)",
			"Test.assertEquals(numberSyllables(\"o-ver-ly\"), 3)",
			"Test.assertEquals(numberSyllables(\"pas-try\"), 2)",
			"Test.assertEquals(numberSyllables(\"flu-id\"), 2)",
			"Test.assertEquals(numberSyllables(\"syl-la-ble\"), 3)"
		],
		"starterFn": [
			"1\nfunction numberSyllables(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RPBqWjEa7iyo9p54F"
	},
	{
		"title": "RegEx Exercise 1: Find the Time",
		"description": "<p><span>The time has a format: </span><strong><span>hours:minutes</span></strong><span>. Both hours and minutes has two digits, like 09:00.</span></p><p><span>Make a regexp to find time in the string: </span><strong><span>Breakfast at 09:00 in the room 123:456.</span></strong><span> In this task there’s no need to check time correctness yet, so 25:99 can also be a valid result. The regexp </span><strong><span>should not</span></strong><span> match 123:456.</span></p><h3><span>Notes</span></h3><p><span>The solution is in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = \"Breakfast at 09:00 in the room 123:456.\";",
			"​",
			"const validate = (REGEXP) => {",
			"   // if(!//.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"// Test.assertNotEquals(testExp(str), \"invalid\", \"Nothing new here\")",
			"Test.assertSimilar(testExp(str), [\"09:00\"]) ",
			"​",
			"// credits to https://javascript.info/regexp-boundary"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */"
		],
		"url": "https://edabit.com/challenge/QkuiL7XApt2RMQqTJ"
	},
	{
		"title": "Video Streaming Plans",
		"description": "<p><span>Given a class for a </span><code>BasicPlan</code><span>, write the classes for </span><code>StandardPlan</code><span> and </span><code>PremiumPlan</code><span> which have class properties of the following:</span></p><table><thead><tr><th><span>BasicPlan</span></th><th><span>StandardPlan</span></th><th><span>PremiumPlan</span></th></tr></thead><tbody><tr><td><span>✓</span></td><td><span>✓</span></td><td><span>✓</span></td><td><span>canStream</span></td></tr><tr><td><span>✓</span></td><td><span>✓</span></td><td><span>✓</span></td><td><span>canDownload</span></td></tr><tr><td><span>✓</span></td><td><span>✓</span></td><td><span>✓</span></td><td><span>hasSD</span></td></tr><tr><td></td><td><span>✓</span></td><td><span>✓</span></td><td><span>hasHD</span></td></tr><tr><td></td><td></td><td><span>✓</span></td><td><span>hasUHD</span></td></tr><tr><td><span>1</span></td><td><span>2</span></td><td><span>4</span></td><td><span>numOfDevices</span></td></tr><tr><td><span>$8.99</span></td><td><span>$12.99</span></td><td><span>$15.99</span></td><td><span>price</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>BasicPlan.hasSD ➞ true \n\nPremiumPlan.hasSD ➞ true\n\nBasicPlan.hasUHD ➞ false\n\nBasicPlan.price ➞ '$8.99'\n\nPremiumPlan.numOfDevices ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>Try to </span><em><span>extend</span></em><span> the classes to complete the challenge! If you're unsure what that means, try checking out the JavaScript class tutorials in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertEquals(BasicPlan.canStream, true)",
			"Test.assertEquals(BasicPlan.canDownload, true)",
			"Test.assertEquals(BasicPlan.numOfDevices, 1)",
			"Test.assertEquals(BasicPlan.hasSD, true)",
			"Test.assertEquals(BasicPlan.hasHD, false)",
			"Test.assertEquals(BasicPlan.hasUHD, false)",
			"Test.assertEquals(BasicPlan.price, '$8.99')",
			"Test.assertEquals(StandardPlan.canStream, true, 'Remember to add the StandardPlan class!')",
			"Test.assertEquals(StandardPlan.canDownload, true)",
			"Test.assertEquals(StandardPlan.numOfDevices, 2)",
			"Test.assertEquals(StandardPlan.hasSD, true)",
			"Test.assertEquals(StandardPlan.hasHD, true)",
			"Test.assertEquals(StandardPlan.hasUHD, false)",
			"Test.assertEquals(StandardPlan.price, '$12.99')",
			"Test.assertEquals(PremiumPlan.canStream, true, 'Remember to add the PremiumPlan class!')",
			"Test.assertEquals(PremiumPlan.canDownload, true)",
			"Test.assertEquals(PremiumPlan.numOfDevices, 4)",
			"Test.assertEquals(PremiumPlan.hasSD, true)",
			"Test.assertEquals(PremiumPlan.hasHD, true)",
			"Test.assertEquals(PremiumPlan.hasUHD, true)",
			"Test.assertEquals(PremiumPlan.price, '$15.99')",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nclass BasicPlan {",
			"2\n  static canStream = true;",
			"3\n  static canDownload = true;",
			"4\n  static numOfDevices = 1;",
			"5\n  static hasSD = true;",
			"6\n  static hasHD = false;",
			"7\n  static hasUHD = false;",
			"8\n  static price = '$8.99';",
			"9\n}",
			"10\n​",
			"11\n// Write the classes for StandardPlan and PremiumPlan here!"
		],
		"url": "https://edabit.com/challenge/SrCTGbhwPRyHZSAGu"
	},
	{
		"title": "ES6: Destructuring Objects II",
		"description": "<pre><code>const obj =  { one : 1, two : 2 }\n\nvar { one, two } = obj</code></pre><p><span>We can assign variables by the same name properties of objects, but what if I wanted to assign </span><code>obj.one</code><span> to a different name like </span><code>anotherOne</code><span>?</span></p><p><span>Use ES6 object destructuring to assign </span><code>obj.one</code><span> to the variable </span><code>anotherOne</code><span>. Variable </span><code>two</code><span> needs to remain assigned to </span><code>obj.two</code><span>. Ignore the </span><code>.toString()</code><span> function (used for validation).</span></p><h3><span>Notes</span></h3><p><span>If you know how to use object destructuring, go ahead and complete this challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab, look at some examples and come back to try the challenge.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"const validString = (str) => {",
			"  return /\\{.*(one).*:.*anotherOne.*(two).*\\}.*\\=/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			" ",
			"Test.assertEquals(validString(str), \"valid\", \"You must assign the variable anotherOne with object destructuring\")",
			"Test.assertEquals(anotherOne, 1, \"The variable anotherOne must equal 1\")",
			"Test.assertEquals(two, 2, \"The variable two must equal 2\")"
		],
		"starterFn": [
			"1\nlet str = `({ one, two } = { one : 1, two : 2}).toString()`"
		],
		"url": "https://edabit.com/challenge/qdXDFPcM7RDdN4M9h"
	},
	{
		"title": "Leap Years",
		"description": "<p><span>A leap year has one day added to February for being synchronized with the seasonal year. A leap year appears with a regular frequency, which is determined by the rule below:</span></p><ul><li><span>A year must </span><strong><span>either</span></strong><span> be divisible by 400 </span><strong><span>or</span></strong><span> divisible by 4 </span><strong><span>and not</span></strong><span> 100.</span></li></ul><p><span>Given a </span><code>year</code><span> you must implement a function that returns </span><code>true</code><span> if it's a leap year, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isLeap(2020) ➞ true\n// Exactly divided by 4 and not by 100.\n\nisLeap(1800) ➞ false\n// Exactly divided by 4, but is also exactly divided by 100.\n\nisLeap(2000) ➞ true\n// Exactly divided by 400.\n\nisLeap(2019) ➞ false\n// It can't be exactly divided by 400 or by 4.</code></pre><h3><span>Notes</span></h3><ul><li><em><span>Exactly divided</span></em><span> can be interpreted as </span><em><span>the remainder of the division is equal to 0</span></em><span>.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li><li><span>Bonus: Try to implement this function writing a single line of code.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"logic",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isLeap(2020), true, \"Example #1\")",
			"Test.assertEquals(isLeap(1800), false, \"Example #2\")",
			"Test.assertEquals(isLeap(2000), true, \"Example #3\")",
			"Test.assertEquals(isLeap(2019), false, \"Example #4\")",
			"Test.assertEquals(isLeap(1452), true)",
			"Test.assertEquals(isLeap(1998), false)",
			"Test.assertEquals(isLeap(1904), true)",
			"Test.assertEquals(isLeap(1985), false)",
			"Test.assertEquals(isLeap(2048), true)",
			"Test.assertEquals(isLeap(1600), true)"
		],
		"starterFn": [
			"1\nfunction isLeap(year) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ALmkPHd7eoe5btx9y"
	},
	{
		"title": "Sandwich Fillings",
		"description": "<p><span>Given a sandwich (as an </span><em><span>array</span></em><span>), return an array of fillings inside the sandwich. This involves </span><strong><span>ignoring</span></strong><span> the first and last elements.</span></p><h3><span>Examples</span></h3><pre><code>getFillings([\"bread\", \"ham\", \"cheese\", \"ham\", \"bread\"]) ➞ [\"ham\", \"cheese\", \"ham\"]\n\ngetFillings([\"bread\", \"sausage\", \"tomato\", \"bread\"]) ➞ [\"sausage\", \"tomato\"]\n\ngetFillings([\"bread\", \"lettuce\", \"bacon\", \"tomato\", \"bread\"]) ➞ [\"lettuce\", \"bacon\", \"tomato\"]</code></pre><h3><span>Notes</span></h3><p><span>The first and last elements will always be </span><code>\"bread\"</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(getFillings([\"bread\", \"ham\", \"cheese\", \"ham\", \"bread\"]), [\"ham\", \"cheese\", \"ham\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"sausage\", \"tomato\", \"bread\"]), [\"sausage\", \"tomato\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"bacon\", \"tomato\", \"bread\"]), [\"lettuce\", \"bacon\", \"tomato\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"bacon\", \"lettuce\", \"tomato\", \"bread\"]), [\"bacon\", \"lettuce\", \"tomato\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"tomato\", \"tomato\", \"ham\", \"sausage\", \"bread\"]), [\"tomato\", \"tomato\", \"ham\", \"sausage\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"bread\"]), [\"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"cheese\", \"bread\"]), [\"cheese\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"tomato\", \"ham\", \"bread\"]), [\"lettuce\", \"tomato\", \"ham\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"ham\", \"cheese\", \"lettuce\", \"ham\", \"bread\"]), [\"ham\", \"cheese\", \"lettuce\", \"ham\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"lettuce\", \"bread\"]), [\"lettuce\", \"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"sausage\", \"ham\", \"bread\"]), [\"sausage\", \"ham\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"bacon\", \"bread\"]), [\"bacon\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"ham\", \"bread\"]), [\"ham\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"ham\", \"bread\"]), [\"ham\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"sausage\", \"ham\", \"lettuce\", \"bread\"]), [\"sausage\", \"ham\", \"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"sausage\", \"bread\"]), [\"sausage\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"bread\"]), [\"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"tomato\", \"lettuce\", \"cheese\", \"cheese\", \"bread\"]), [\"tomato\", \"lettuce\", \"cheese\", \"cheese\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"tomato\", \"sausage\", \"bacon\", \"tomato\", \"bread\"]), [\"tomato\", \"sausage\", \"bacon\", \"tomato\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"bacon\", \"ham\", \"lettuce\", \"tomato\", \"lettuce\", \"bread\"]), [\"bacon\", \"ham\", \"lettuce\", \"tomato\", \"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"tomato\", \"lettuce\", \"cheese\", \"lettuce\", \"bread\"]), [\"tomato\", \"lettuce\", \"cheese\", \"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"ham\", \"ham\", \"bacon\", \"ham\", \"cheese\", \"bread\"]), [\"ham\", \"ham\", \"bacon\", \"ham\", \"cheese\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"tomato\", \"bacon\", \"ham\", \"tomato\", \"bread\"]), [\"tomato\", \"bacon\", \"ham\", \"tomato\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"ham\", \"cheese\", \"lettuce\", \"bread\"]), [\"ham\", \"cheese\", \"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"bread\"]), [\"lettuce\"])",
			"Test.assertSimilar(getFillings([\"bread\", \"lettuce\", \"bacon\", \"bacon\", \"bread\"]), [\"lettuce\", \"bacon\", \"bacon\"])"
		],
		"starterFn": [
			"1\nfunction getFillings(sandwich) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/W8z2EghwmjQYhwM2D"
	},
	{
		"title": "Truthy or Falsy?",
		"description": "<p><span>A value is said to be \"truthy\" if it evaluates to </span><code>true</code><span> in a Boolean context. All values are truthy in JavaScript unless they're one of the following:</span></p><ul><li><code>false</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>0</code></li><li><code>NaN</code></li><li><code>\"\"</code></li></ul><p><span>In JavaScript, an empty object and an empty array are both considered \"truthy,\" but an empty string is considered </span><code>false</code><span> when evaluated as a Boolean (this behavior is what we call \"falsey\").</span></p><p><span>Create a function that takes an argument of any data type and returns </span><code>1</code><span> if it's truthy and </span><code>0</code><span> if it's falsy.</span></p><h3><span>Examples</span></h3><pre><code>isTruthy(0) ➞ 0\n\nisTruthy(false) ➞ 0\n\nisTruthy(\"\") ➞ 0\n\nisTruthy(\"false\") ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>You may have to take into account NaN's unique behavior in JavaScript. While other falsey values are equal to themselves, NaN != NaN</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Taylor Burke",
		"publishedByUrl": "https://edabit.com/user/inmjjfsii2M4CMf34",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"control_flow",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isTruthy(1), 1)",
			"Test.assertEquals(isTruthy(-1), 1)",
			"Test.assertEquals(isTruthy(\"false\"), 1)",
			"Test.assertEquals(isTruthy([]), 1)",
			"Test.assertEquals(isTruthy(true), 1)",
			"Test.assertEquals(isTruthy({}), 1)",
			"Test.assertEquals(isTruthy(function(){}), 1)",
			"Test.assertEquals(isTruthy(0), 0)",
			"Test.assertEquals(isTruthy(\"\"), 0)",
			"Test.assertEquals(isTruthy(null), 0)",
			"Test.assertEquals(isTruthy(undefined), 0)",
			"Test.assertEquals(isTruthy(false), 0)",
			"Test.assertEquals(isTruthy(NaN), 0)",
			"Test.assertEquals(isTruthy(''), 0)"
		],
		"starterFn": [
			"1\nfunction isTruthy(input) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/czEAQio8zr9HjZsQn"
	},
	{
		"title": "Odd Up, Even Down",
		"description": "<p><span>Create a function that goes through the array, </span><strong><span>incrementing (+1)</span></strong><span> for each odd number and </span><strong><span>decrementing (-1)</span></strong><span> for each even number.</span></p><h3><span>Examples</span></h3><pre><code>transform([1, 2, 3, 4, 5]) ➞ [2, 1, 4, 3, 6]\n\ntransform([3, 3, 4, 3]) ➞ [4, 4, 3, 4]\n\ntransform([2, 2, 0, 8, 10]) ➞ [1, 1, -1, 7, 9]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(transform([1, 2, 3, 4, 5]), [2, 1, 4, 3, 6])",
			"Test.assertSimilar(transform([3, 3, 4, 3]), [4, 4, 3, 4])",
			"Test.assertSimilar(transform([2, 2, 0, 8, 10]), [1, 1, -1, 7, 9])",
			"Test.assertSimilar(transform([9, 13, 15, 5, 2, 11]), [10, 14, 16, 6, 1, 12])"
		],
		"starterFn": [
			"1\nfunction transform(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dWNPtNeQgyn6mS8FA"
	},
	{
		"title": "Next Element in Arithmetic Sequence",
		"description": "<p><span>Create a function that returns the next element in an </span><strong><span>arithmetic sequence</span></strong><span>. In an arithmetic sequence, each element is formed by adding the same constant to the previous element.</span></p><h3><span>Examples</span></h3><pre><code>nextElement([3, 5, 7, 9]) ➞ 11\n\nnextElement([-5, -6, -7]) ➞ -8\n\nnextElement([2, 2, 2, 2, 2]) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>All input arrays will contain </span><strong><span>integers only</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(nextElement([3, 5, 7, 9]), 11) ",
			"Test.assertEquals(nextElement([-5, -6, -7]), -8) ",
			"Test.assertEquals(nextElement([2, 2, 2, 2, 2]), 2)"
		],
		"starterFn": [
			"1\nfunction nextElement(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dzdoYrTL5vws4dFud"
	},
	{
		"title": "Missing Third Angle",
		"description": "<p><span>You are given 2 out of 3 angles in a triangle, in degrees.</span></p><p><span>Write a function that classifies the missing angle as either </span><code>\"acute\"</code><span>, </span><code>\"right\"</code><span>, or </span><code>\"obtuse\"</code><span> based on its degrees.</span></p><ul><li><span>An </span><strong><span>acute</span></strong><span> angle is less than 90 degrees.</span></li><li><span>A </span><strong><span>right</span></strong><span> angle is exactly 90 degrees.</span></li><li><span>An </span><strong><span>obtuse</span></strong><span> angle is greater than 90 degrees (but less than 180 degrees).</span></li></ul><p><span>For example: </span><code>missingAngle(11, 20)</code><span> should return </span><code>\"obtuse\"</code><span>, since the missing angle would be 149 degrees, which makes it obtuse.</span></p><h3><span>Examples</span></h3><pre><code>missingAngle(27, 59) ➞ \"obtuse\"\n\nmissingAngle(135, 11) ➞ \"acute\"\n\nmissingAngle(45, 45) ➞ \"right\"</code></pre><h3><span>Notes</span></h3><p><span>The sum of angles of any triangle is always 180 degrees.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(missingAngle(27, 59), \"obtuse\")",
			"Test.assertEquals(missingAngle(135, 11), \"acute\")",
			"Test.assertEquals(missingAngle(45, 45), \"right\")",
			"Test.assertEquals(missingAngle(45, 15), \"obtuse\")",
			"Test.assertEquals(missingAngle(31, 100), \"acute\")",
			"Test.assertEquals(missingAngle(35, 55), \"right\")"
		],
		"starterFn": [
			"1\nfunction missingAngle(angle1, angle2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/djyXcJZAuezrSXJ4j"
	},
	{
		"title": "Find the Largest Number in an Array",
		"description": "<p><span>Create a function that takes an array of numbers. Return the largest number in the array.</span></p><h3><span>Examples</span></h3><pre><code>findLargestNum([4, 5, 1, 3]) ➞ 5\n\nfindLargestNum([300, 200, 600, 150]) ➞ 600\n\nfindLargestNum([1000, 1001, 857, 1]) ➞ 1001</code></pre><h3><span>Notes</span></h3><ul><li><span>Expect either a positive number or zero (there are no negative numbers).</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(findLargestNum([4, 5, 1, 3]), 5)",
			"Test.assertEquals(findLargestNum([13, 27, 18, 26]), 27)",
			"Test.assertEquals(findLargestNum([32, 35, 37, 39]), 39)",
			"Test.assertEquals(findLargestNum([1000, 1001, 857, 1]), 1001)",
			"Test.assertEquals(findLargestNum([27364, 837363, 736736, 73635]), 837363)",
			"Test.assertEquals(findLargestNum([30, 2, 40, 3]), 40)",
			"Test.assertEquals(findLargestNum([0, 1, 0, 0, 1]), 1)"
		],
		"starterFn": [
			"1\nfunction findLargestNum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HTbRYCmPwfZGnBcxW"
	},
	{
		"title": "Is the String in Order?",
		"description": "<p><span>Create a function that takes a string and returns </span><code>true</code><span> or </span><code>false</code><span>, depending on whether the characters are in order or not.</span></p><h3><span>Examples</span></h3><pre><code>isInOrder(\"abc\") ➞ true\n\nisInOrder(\"edabit\") ➞ false\n\nisInOrder(\"123\") ➞ true\n\nisInOrder(\"xyzz\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>You don't have to handle empty strings.</span></p>",
		"publishedBy": "jhadenfeldt",
		"publishedByUrl": "https://edabit.com/user/xiBaDcpoNBsjmfDrF",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isInOrder(\"abc\"), true)",
			"Test.assertEquals(isInOrder(\"edabit\"), false)",
			"Test.assertEquals(isInOrder(\"xyz\"), true)",
			"Test.assertEquals(isInOrder(\"xyzz\"), true)",
			"Test.assertEquals(isInOrder(\"123\"), true)",
			"Test.assertEquals(isInOrder(\"321\"), false)"
		],
		"starterFn": [
			"1\nfunction isInOrder(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9GcCezhbB3DxoJ6fL"
	},
	{
		"title": "RegEx: Character Classes IX ⁠- \\w",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here is a list of the character classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>There is a hidden word in this string:</span></p><pre><code>const str = \"**^&amp;$Regular#$%Expressions$%$$%^**\"</code></pre><p><span>Write the regular expression that reveals the hidden word. You have to remove all of the special characters to reveal the word. Use the character class </span><code>\\w</code><span> in your expression.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on character classes if you're stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = \"**^&$Regular#$%Expressions$%$$%^**\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\w/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP).join(\"\")",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"console.log(testExp(str))",
			"​",
			"Test.assertNotEquals(testExp(str), \"required\", \"You are required to use a \\w character class in your expression.\")",
			"Test.assertSimilar(testExp(str), \"RegularExpressions\")"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you expression here */g"
		],
		"url": "https://edabit.com/challenge/AS2NGeGLnwWbMr5SP"
	},
	{
		"title": "Calculate the Profit",
		"description": "<p><span>You work for a manufacturer, and have been asked to calculate the total profit made on the sales of a product. You are given an object containing the </span><em><span>cost price per unit</span></em><span> (in dollars), </span><em><span>sell price per unit</span></em><span> (in dollars), and the </span><em><span>starting inventory</span></em><span>. Return the total </span><strong><span>profit</span></strong><span> made, rounded to the nearest dollar. Assume all of the inventory has been sold.</span></p><h3><span>Examples</span></h3><pre><code>profit({\n  costPrice: 32.67,\n  sellPrice: 45.00,\n  inventory: 1200\n}) ➞ 14796\n\nprofit({\n  costPrice: 225.89,\n  sellPrice: 550.00,\n  inventory: 100\n}) ➞ 32411\n\nprofit({\n  costPrice: 2.77,\n  sellPrice: 7.95,\n  inventory: 8500\n}) ➞ 44030</code></pre><h3><span>Notes</span></h3><p><span>Profit = Total Sales - Total Cost</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertEquals(profit({costPrice: 32.67, sellPrice: 45.00, inventory: 1200}), 14796)",
			"Test.assertEquals(profit({costPrice: 0.1, sellPrice: 0.18, inventory: 259800}), 20784)",
			"Test.assertEquals(profit({costPrice: 185.00, sellPrice: 299.99, inventory: 300}), 34497)",
			"Test.assertEquals(profit({costPrice: 378.11, sellPrice: 990.00, inventory: 99}), 60577)",
			"Test.assertEquals(profit({costPrice: 4.67, sellPrice: 5.00, inventory: 78000}), 25740)",
			"Test.assertEquals(profit({costPrice: 19.87, sellPrice: 110.00, inventory: 350}), 31546)",
			"Test.assertEquals(profit({costPrice: 2.91, sellPrice: 4.50, inventory: 6000}), 9540)",
			"Test.assertEquals(profit({costPrice: 68.01, sellPrice: 149.99, inventory: 500}), 40990)",
			"Test.assertEquals(profit({costPrice: 1.45, sellPrice: 8.50, inventory: 10000}), 70500)",
			"Test.assertEquals(profit({costPrice: 10780, sellPrice: 34999, inventory: 10}), 242190)"
		],
		"starterFn": [
			"1\nfunction profit(info) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GJn7xcBiCLdCNXFgy"
	},
	{
		"title": "Maximum Difference",
		"description": "<p><span>Given an array of integers, return the </span><em><span>difference</span></em><span> between the largest and smallest integers in the array.</span></p><h3><span>Examples</span></h3><pre><code>difference([10, 15, 20, 2, 10, 6]) ➞ 18\n// 20 - 2 = 18\n\ndifference([-3, 4, -9, -1, -2, 15]) ➞ 24\n// 15 - (-9) = 24\n\ndifference([4, 17, 12, 2, 10, 2]) ➞ 15</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(difference([-9, -8, 6, -9, 15, 6]), 24)",
			"Test.assertEquals(difference([-5, 6, 18, 4, 16, -2]), 23)",
			"Test.assertEquals(difference([-2, 20, -9, -9, -2, -7]), 29)",
			"Test.assertEquals(difference([4, -2, 11, -9, 15, 2]), 24)",
			"Test.assertEquals(difference([15, 10, 3, -6, 6, 19]), 25)",
			"Test.assertEquals(difference([1, 7, 18, -1, -2, 9]), 20)",
			"Test.assertEquals(difference([5, 1, -9, 7, -8, -10]), 17)",
			"Test.assertEquals(difference([-4, 17, -4, 20, -7, 0]), 27)",
			"Test.assertEquals(difference([-2, 11, 11, -3, -3, -3]), 14)",
			"Test.assertEquals(difference([1, 15, 14, 20, 10, 6]), 19)",
			"Test.assertEquals(difference([4, 17, 12, 2, 10, 2]), 15)",
			"Test.assertEquals(difference([-3, 3, 20, 10, 0, 17]), 23)",
			"Test.assertEquals(difference([-3, 6, 20, 9, 6, 7]), 23)",
			"Test.assertEquals(difference([16, 15, 1, 18, -7, -3]), 25)",
			"Test.assertEquals(difference([-7, 4, -4, -3, -8, -9]), 13)",
			"Test.assertEquals(difference([15, 8, 17, 18, 10, 10]), 10)",
			"Test.assertEquals(difference([-3, 20, 16, 8, 18, -10]), 30)",
			"Test.assertEquals(difference([6, 18, 9, 1, 3, 1]), 17)",
			"Test.assertEquals(difference([20, 18, -2, -10, -10, 17]), 30)",
			"Test.assertEquals(difference([18, 20, -7, -4, -2, -8]), 28)"
		],
		"starterFn": [
			"1\nfunction difference(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4vvFr9ZTK2AdyswXH"
	},
	{
		"title": "Difference of Max and Min Numbers in Array",
		"description": "<p><span>Create a function that takes an array and returns the </span><strong><span>difference</span></strong><span> between the biggest and smallest numbers.</span></p><h3><span>Examples</span></h3><pre><code>diffMaxMin([10, 4, 1, 4, -10, -50, 32, 21]) ➞ 82\n// Smallest number is -50, biggest is 32.\n\ndiffMaxMin([44, 32, 86, 19]) ➞ 67\n// Smallest number is 19, biggest is 86.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(diffMaxMin([10, 4, 1, 2, 8, 91]), 90)",
			"Test.assertEquals(diffMaxMin([-70, 43, 34, 54, 22]), 124)"
		],
		"starterFn": [
			"1\nfunction diffMaxMin(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/v9DwaeR6NQoapEvHh"
	},
	{
		"title": "Return the Four Letter Strings",
		"description": "<p><span>Create a function that takes an array of strings and returns the words that are exactly four letters.</span></p><h3><span>Examples</span></h3><pre><code>isFourLetters([\"Tomato\", \"Potato\", \"Pair\"]) ➞ [\"Pair\"]\n\nisFourLetters([\"Kangaroo\", \"Bear\", \"Fox\"]) ➞ [\"Bear\"]\n\nisFourLetters([\"Ryan\", \"Kieran\", \"Jason\", \"Matt\"]) ➞ [\"Ryan\", \"Matt\"]</code></pre><h3><span>Notes</span></h3><p><span>You can expect valid strings for all test cases.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(isFourLetters([\"Ryan\", \"Kieran\", \"Jason\", \"Matt\"]), [\"Ryan\", \"Matt\"])",
			"Test.assertSimilar(isFourLetters([\"Tomato\", \"Potato\", \"Pair\"]), [\"Pair\"])",
			"Test.assertSimilar(isFourLetters([\"Kangaroo\", \"Bear\", \"Fox\"]), [\"Bear\"])",
			"Test.assertSimilar(isFourLetters([\"Red\", \"Blue\", \"Green\", \"Pink\"]), [\"Blue\", \"Pink\"])",
			"Test.assertSimilar(isFourLetters([\"is\", \"up\", \"two\", \"elephant\"]), [])",
			"Test.assertSimilar(isFourLetters([]), [])",
			"Test.assertSimilar(isFourLetters([\"jazz\", \"quiz\", \"jump\"]), [\"jazz\", \"quiz\", \"jump\"])",
			"Test.assertSimilar(isFourLetters([\"\"]), [])",
			"Test.assertSimilar(isFourLetters([\"Broccoli\", \"Carrot\", \"Spinach\"]), [])"
		],
		"starterFn": [
			"1\nfunction isFourLetters(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/havnWL4BimvoaXNMn"
	},
	{
		"title": "Check Factors",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if all integers in an array are factors of a number, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>checkFactors([2, 3, 4], 12) ➞ true\n// Since 2, 3, and 4 are all factors of 12.\n\ncheckFactors([1, 2, 3, 8], 12) ➞ false\n// 8 is not a factor of 12.\n\ncheckFactors([1, 2, 50], 100) ➞ true\n\ncheckFactors([3, 6], 9) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkFactors([2, 3, 4], 12), true)",
			"Test.assertEquals(checkFactors([1, 2, 3, 8], 12), false, '8 is not a factor of 12')",
			"Test.assertEquals(checkFactors([1, 2, 50], 100), true)",
			"Test.assertEquals(checkFactors([1, 9, 81], 81), true)",
			"Test.assertEquals(checkFactors([5, 10, 50], 500), true)",
			"Test.assertEquals(checkFactors([5, 10, 499], 500), false, '499 is not a factor of 500')",
			"Test.assertEquals(checkFactors([3, 6], 9), false, '6 is not a factor of 9')"
		],
		"starterFn": [
			"1\nfunction checkFactors(factors, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/k5k3aXWp7aibft74n"
	},
	{
		"title": "Does the Object Contain a Given Key?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if a hash contains the specified key, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>hasKey({ a: 44, b: 45, c: 46 }, \"d\") ➞ false\n\nhasKey({ craves: true, midnight: true, snack: true }, \"morning\") ➞ false\n\nhasKey({ pot: 1, tot: 2, not: 3 }, \"not\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects",
			"validation"
		],
		"tests": [
			"Test.assertEquals(hasKey({ pot: 1, tot: 2, not: 3 }, \"not\"), true)",
			"Test.assertEquals(hasKey({ craves: true, midnight: true, snack: true }, \"morning\"), false)",
			"Test.assertEquals(hasKey({ a: 44, b: 45, c: 46 }, \"d\"), false)",
			"Test.assertEquals(hasKey({ a: \"z\", b: \"y\", c: \"x\" }, \"c\"), true)"
		],
		"starterFn": [
			"1\nfunction hasKey(obj, key) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jJS3yokQmu4etN5qs"
	},
	{
		"title": "Additive Inverse",
		"description": "<p><span>A number added with its </span><strong><span>additive inverse</span></strong><span> equals zero. Create a function that returns an array of additive inverses.</span></p><h3><span>Examples</span></h3><pre><code>additiveInverse([5, -7, 8, 3]) ➞ [-5, 7, -8, -3]\n\nadditiveInverse([1, 1, 1, 1, 1]) ➞ [-1, -1, -1, -1, -1]\n\nadditiveInverse([-5, -25, 35]) ➞ [5, 25, -35]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(additiveInverse([5, -7, 8, 3]), [-5, 7, -8, -3])",
			"Test.assertSimilar(additiveInverse([1, 1, 1, 1, 1]), [-1, -1, -1, -1, -1])",
			"Test.assertSimilar(additiveInverse([-5, -25, 35]), [5, 25, -35])"
		],
		"starterFn": [
			"1\nfunction additiveInverse(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Qbi3GuXjwW5fsoKRn"
	},
	{
		"title": "Are the Numbers Equal?",
		"description": "<p><span>Create a function that takes two integers and checks if they are equal.</span></p><h3><span>Examples</span></h3><pre><code>isEqual(5, 6) ➞ false\n\nisEqual(1, 1) ➞ true\n\nisEqual(\"1\", 1) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>If there is a string then it should return </span><code>false</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"logic"
		],
		"tests": [
			"Test.assertEquals(isEqual(2, 2), true)",
			"Test.assertEquals(isEqual(\"1\", 5), false)",
			"Test.assertEquals(isEqual(88, 88), true)",
			"Test.assertEquals(isEqual(36, 35), false)",
			"Test.assertEquals(isEqual(\"1\", 1), false)",
			"Test.assertEquals(isEqual(1, 1), true)",
			"Test.assertEquals(isEqual(5, 6), false)",
			"Test.assertEquals(isEqual(\"1\", \"1\"), false)"
		],
		"starterFn": [
			"1\nfunction isEqual(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Tbvjwh5GKRbxd3vyD"
	},
	{
		"title": "Is the Object Empty?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if an object is empty, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isEmpty({}) ➞ true\n\nisEmpty({ a: 1 }) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isEmpty({}), true)",
			"Test.assertEquals(isEmpty({a: 1}), false)",
			"Test.assertEquals(isEmpty({z: 2, w: 4, y: 5}), false)"
		],
		"starterFn": [
			"1\nfunction isEmpty(obj) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nGybgqB9agSqvBszF"
	},
	{
		"title": "Word Endings",
		"description": "<p><span>Create a function that adds a string ending to each member in an array.</span></p><h3><span>Examples</span></h3><pre><code>addEnding([\"clever\", \"meek\", \"hurried\", \"nice\"], \"ly\")\n➞ [\"cleverly\", \"meekly\", \"hurriedly\", \"nicely\"]\n\naddEnding([\"new\", \"pander\", \"scoop\"], \"er\")\n➞ [\"newer\", \"panderer\", \"scooper\"]\n\naddEnding([\"bend\", \"sharpen\", \"mean\"], \"ing\")\n➞ [\"bending\", \"sharpening\", \"meaning\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(addEnding(['clever', 'meek', 'hurried', 'nice'], 'ly'), ['cleverly', 'meekly', 'hurriedly', 'nicely'])",
			"Test.assertSimilar(addEnding(['new', 'pander', 'scoop'], 'er'), ['newer', 'panderer', 'scooper'])",
			"Test.assertSimilar(addEnding(['bend', 'sharpen', 'mean'], 'ing'), ['bending', 'sharpening', 'meaning'])",
			"Test.assertSimilar(addEnding(['bend', 'tooth', 'mint'], 'y'), ['bendy', 'toothy', 'minty'])",
			"Test.assertSimilar(addEnding(['bend', 'tooth', 'mint'], 'ier'), ['bendier', 'toothier', 'mintier'])"
		],
		"starterFn": [
			"1\nfunction addEnding(arr, ending) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hwWLHcDoPZmXcGHyd"
	},
	{
		"title": "Return Only the Integer",
		"description": "<p><span>Write a function that takes an array of elements and returns only the integers.</span></p><h3><span>Examples</span></h3><pre><code>returnOnlyInteger([9, 2, \"space\", \"car\", \"lion\", 16]) ➞ [9, 2, 16]\n\nreturnOnlyInteger([\"hello\", 81, \"basketball\", 123, \"fox\"]) ➞ [81, 123]\n\nreturnOnlyInteger([10, \"121\", 56, 20, \"car\", 3, \"lion\"]) ➞ [10, 56, 20, 3]\n\nreturnOnlyInteger([\"String\",  true,  3.3,  1]) ➞ [1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Miloš McMandić",
		"publishedByUrl": "https://edabit.com/user/qXKKasPiJZGo2aC2m",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(returnOnlyInteger([9, 2, \"space\", \"car\", \"lion\", 16]), [9, 2, 16])",
			"Test.assertSimilar(returnOnlyInteger([\"hello\", 81, \"basketball\", 123, \"fox\"]), [81, 123])",
			"Test.assertSimilar(returnOnlyInteger([10, \"121\", 56, 20, \"car\", 3, \"lion\"]), [10, 56, 20, 3])",
			"Test.assertSimilar(returnOnlyInteger([\"String\", true, 3.3, 1]), [1])"
		],
		"starterFn": [
			"1\nfunction returnOnlyInteger(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3xqP79TrHiwnwGizj"
	},
	{
		"title": "Regex Series: String Contains at Least One Digit",
		"description": "<p><span>Write a regular expression that matches a string if it contains at least one digit.</span></p><h3><span>Examples</span></h3><pre><code>\"c8\" ➞ true\n\n\"23cc4\" ➞ true\n\n\"abwekz\" ➞ false\n\n\"sdfkxi\" ➞ false</code></pre><h3><span>Notes</span></h3><p><span>This challenge is designed to use RegEx only.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"describe(\"Deterministic Tests\", function() {",
			"  Test.expect(validate(\"c8\")); ",
			"  Test.expect(validate(\"23cc4\")); ",
			"  Test.expect(!validate(\"abwekz\")); ",
			"  Test.expect(!validate(\"sdfkxi\")); ",
			"})",
			"​",
			"function validate(str) {",
			"  return x.test(str);",
			"}",
			"​",
			"const letters = \"abcdefghijklmnopqrstuvwxyz\"",
			"const digits = \"0123456789\"",
			"​",
			"String.prototype.shuffle = function () {",
			"  let a = this.split(\"\");",
			"  let n = a.length; ",
			"  ",
			"  for (let i = n-1; i > 0; i--) {",
			"    let j = Math.floor(Math.random()*(i+1)); ",
			"    let tmp = a[i]; ",
			"    a[i] = a[j]; ",
			"    a[j] = tmp; ",
			"  }",
			"  return a.join(\"\"); ",
			"}"
		],
		"starterFn": [
			"1\nlet x = /* Fill in the regular expression */"
		],
		"url": "https://edabit.com/challenge/wBAuop24JYt9MZhXF"
	},
	{
		"title": "Typing Game",
		"description": "<p><span>You're in the midst of creating a typing game.</span></p><p><span>Create a function that takes in two arrays: the array of </span><strong><span>user-typed words</span></strong><span>, and the array of </span><strong><span>correctly-typed words</span></strong><span> and outputs an array containing </span><code>1</code><span>s (correctly-typed words) and </span><code>-1</code><span>s (incorrectly-typed words).</span></p><pre><code>Inputs:\nUser-typed Array: [\"cat\", \"blue\", \"skt\", \"umbrells\", \"paddy\"]\nCorrect Array: [\"cat\", \"blue\", \"sky\", \"umbrella\", \"paddy\"]\n\nOutput: [1, 1, -1, -1, 1]</code></pre><h3><span>Examples</span></h3><pre><code>correctStream(\n  [\"it\", \"is\", \"find\"],\n  [\"it\", \"is\", \"fine\"]\n) ➞ [1, 1, -1]\n\ncorrectStream(\n  [\"april\", \"showrs\", \"bring\", \"may\", \"flowers\"],\n  [\"april\", \"showers\", \"bring\", \"may\", \"flowers\"]\n) ➞ [1, -1, 1, 1, 1]</code></pre><h3><span>Notes</span></h3><p><span>The input array lengths will always be the same.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(correctStream([\"it\", \"is\", \"find\"], [\"it\", \"is\", \"fine\"]), [1, 1, -1])",
			"Test.assertSimilar(correctStream([\"april\", \"showrs\", \"bring\", \"may\", \"flowers\"], [\"april\", \"showers\", \"bring\", \"may\", \"flowers\"]), [1, -1, 1, 1, 1])",
			"Test.assertSimilar(correctStream([\"weird\", \"indicr\", \"moment\"], [\"weird\", \"indict\", \"moment\"]), [1, -1, 1])",
			"Test.assertSimilar(correctStream([\"starry\", \"wind\", \"skies\"], [\"starry\", \"wind\", \"skies\"]), [1, 1, 1])"
		],
		"starterFn": [
			"1\nfunction correctStream(user, correct) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KESyfS3A5vB2jkxFR"
	},
	{
		"title": "Remove the First and Last Characters",
		"description": "<p><span>Create a function that removes the first and last characters from a string.</span></p><h3><span>Examples</span></h3><pre><code>removeFirstLast(\"hello\") ➞ \"ell\"\n\nremoveFirstLast(\"maybe\") ➞ \"ayb\"\n\nremoveFirstLast(\"benefit\") ➞ \"enefi\"\n\nremoveFirstLast(\"a\") ➞ \"a\"</code></pre><h3><span>Notes</span></h3><p><span>If the string is 2 or fewer characters long, return the string itself (See Example #4).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeFirstLast(\"hello\"), \"ell\")",
			"Test.assertEquals(removeFirstLast(\"benefit\"), \"enefi\")",
			"Test.assertEquals(removeFirstLast(\"wordy\"), \"ord\")",
			"Test.assertEquals(removeFirstLast(\"maybe\"), \"ayb\")",
			"Test.assertEquals(removeFirstLast(\"to\"), \"to\")",
			"Test.assertEquals(removeFirstLast(\"a\"), \"a\")",
			"Test.assertEquals(removeFirstLast(\"\"), \"\")"
		],
		"starterFn": [
			"1\nfunction removeFirstLast(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Wq3Q5ewau9Fu2GN9i"
	},
	{
		"title": "Exists a Number Higher?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if there exists </span><strong><span>at least one number</span></strong><span> that is </span><strong><span>larger than or equal to</span></strong><span> </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>existsHigher([5, 3, 15, 22, 4], 10) ➞ true\n\nexistsHigher([1, 2, 3, 4, 5], 8) ➞ false\n\nexistsHigher([4, 3, 3, 3, 2, 2, 2], 4) ➞ true\n\nexistsHigher([], 5) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>false</code><span> for an empty array </span><code>[]</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(existsHigher([5, 3, 15, 22, 4], 10), true)",
			"Test.assertEquals(existsHigher([1, 2, 3, 4, 5], 8), false)",
			"Test.assertEquals(existsHigher([4, 3, 3, 3, 2, 2, 2], 4), true)",
			"Test.assertEquals(existsHigher([2, 2, 2, 2], 5), false)",
			"Test.assertEquals(existsHigher([], 0), false)"
		],
		"starterFn": [
			"1\nfunction existsHigher(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/77zq4RhMgWup22H6d"
	},
	{
		"title": "Remove Null from an Array",
		"description": "<p><span>Create a function to remove all </span><code>null</code><span> values from an array.</span></p><h3><span>Examples</span></h3><pre><code>removeNull([\"a\", null, \"b\", null]) ➞ [\"a\", \"b\"]\n\nremoveNull([null, null, null, null, null]) ➞ []\n\nremoveNull([7, 8, null, 9]) ➞ [7, 8, 9]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(removeNull(['a', null, 'b', null]), ['a', 'b'])",
			"Test.assertSimilar(removeNull([null, null, null, null, null]), [])",
			"Test.assertSimilar(removeNull([7, 8, null, 9]), [7, 8, 9])",
			"Test.assertSimilar(removeNull([7, null, 8, null, 9]), [7, 8, 9])"
		],
		"starterFn": [
			"1\nfunction removeNull(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2SJX9ha6W2bYkzSNX"
	},
	{
		"title": "Calculate Determinant of a 2x2 Matrix",
		"description": "<p><span>Create a function to calculate the determinant of a </span><code>2 * 2</code><span> matrix. The determinant of the following matrix is: </span><code>ad - bc</code><span>:</span></p><pre><code>[[a, b], [c, d]]</code></pre><h3><span>Examples</span></h3><pre><code>calcDeterminant([\n  [1, 2],\n  [3, 4]\n]) ➞ -2\n\ncalcDeterminant([\n  [5, 3],\n  [3, 1]\n]) ➞ -4\n\ncalcDeterminant([\n  [1, 1],\n  [1, 1]\n]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Matrix will be in </span><code>2 * 2</code><span> form only.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(calcDeterminant([",
			"  [1, 2],",
			"  [3, 4]",
			"]), -2)",
			"​",
			"Test.assertEquals(calcDeterminant([",
			"  [5, 3],",
			"  [3, 1]",
			"]), -4)",
			"​",
			"Test.assertEquals(calcDeterminant([",
			"  [1, 1],",
			"  [1, 1]",
			"]), 0)",
			"​",
			"Test.assertEquals(calcDeterminant([",
			"  [1, 1],",
			"  [1, 0]",
			"]), -1)"
		],
		"starterFn": [
			"1\nfunction calcDeterminant(matrix) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MwLp6s75F6S5wRrEJ"
	},
	{
		"title": "Multiply by Length",
		"description": "<p><span>Create a function to multiply all of the values in an array by the amount of values in the given array.</span></p><h3><span>Examples</span></h3><pre><code>multiplyByLength([2, 3, 1, 0]) ➞ [8, 12, 4, 0]\n\nmultiplyByLength([4, 1, 1]) ➞ ([12, 3, 3])\n\nmultiplyByLength([1, 0, 3, 3, 7, 2, 1]) ➞  [7, 0, 21, 21, 49, 14, 7]\n\nmultiplyByLength([0]) ➞ ([0])</code></pre><h3><span>Notes</span></h3><ul><li><span>All of the values given are numbers.</span></li><li><span>All arrays will have at least one element.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li></ul>",
		"publishedBy": "Cuby",
		"publishedByUrl": "https://edabit.com/user/CaDoRXMFxjD47Ed5Y",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(multiplyByLength([2, 6, 4, 9]), [8, 24, 16, 36])",
			"Test.assertSimilar(multiplyByLength([4, 1, 1]), [12, 3, 3])",
			"Test.assertSimilar(multiplyByLength([1, 0, 3, 3, 7, 2, 1]), [7, 0, 21, 21, 49, 14, 7])",
			"Test.assertSimilar(multiplyByLength([0]), [0])"
		],
		"starterFn": [
			"1\nfunction multiplyByLength(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LMhRTq3hccz2D9Lax"
	},
	{
		"title": "Date Format",
		"description": "<p><span>Create a function that converts a date formatted as </span><strong><span>MM/DD/YYYY</span></strong><span> to  </span><strong><span>YYYYDDMM</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>formatDate(\"11/12/2019\") ➞ \"20191211\"\n\nformatDate(\"12/31/2019\") ➞ \"20193112\"\n\nformatDate(\"01/15/2019\") ➞ \"20191501\"</code></pre><h3><span>Notes</span></h3><p><span>Return value should be a string.</span></p>",
		"publishedBy": "ganesh32",
		"publishedByUrl": "https://edabit.com/user/jNLh2DiZj9jFuo8hy",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates",
			"formatting"
		],
		"tests": [
			"Test.assertEquals(formatDate(\"11/12/2019\"),\"20191211\")",
			"Test.assertEquals(formatDate(\"12/31/2019\"), \"20193112\")",
			"Test.assertEquals(formatDate(\"01/15/2019\"), \"20191501\")"
		],
		"starterFn": [
			"1\nfunction formatDate(date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NEPFa3NZSd8iiF3ps"
	},
	{
		"title": "Capture the Rook",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if two rooks can attack each other, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>canCapture([\"A8\", \"E8\"]) ➞ true\n\ncanCapture([\"A1\", \"B2\"]) ➞ false\n\ncanCapture([\"H4\", \"H3\"]) ➞ true\n\ncanCapture([\"F5\", \"C8\"]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume no blocking pieces.</span></li><li><span>Two rooks can attack each other if they share the same row (letter) or column (number).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canCapture(['A8', 'E8']), true)",
			"Test.assertEquals(canCapture(['A1', 'B2']), false)",
			"Test.assertEquals(canCapture(['H4', 'H3']), true)",
			"Test.assertEquals(canCapture(['F5', 'C8']), false)",
			"Test.assertEquals(canCapture(['G3', 'G7']), true)",
			"Test.assertEquals(canCapture(['B3', 'B2']), true)",
			"Test.assertEquals(canCapture(['F5', 'B2']), false)",
			"Test.assertEquals(canCapture(['H5', 'C8']), false)"
		],
		"starterFn": [
			"1\nfunction canCapture([yourRook, opponentsRook]) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/H7cs3TS87sFX72mjF"
	},
	{
		"title": "Find the Bug: Checking Even Numbers",
		"description": "<p><span>Create a function that takes in an array and returns </span><code>true</code><span> if all its values are even, and </span><code>false</code><span> otherwise.</span></p><p><span>Not a big deal, your friend says. He writes the following code:</span></p><pre><code>function checkAllEven(arr) {\n  return arr.every(x % 2 === 0)\n}</code></pre><p><span>The code above leads to a </span><code>Reference Error</code><span>, with </span><code>x</code><span> being undefined. Fix the code above so that all tests pass:</span></p><h3><span>Examples</span></h3><pre><code>checkAllEven([1, 2, 3, 4]) ➞ false\n\ncheckAllEven([2, 4, 6]) ➞ true\n\ncheckAllEven([5, 6, 8, 10]) ➞ false\n\ncheckAllEven([-2, 2, -2, 2]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>For help, check </span><strong><span>Resources</span></strong><span> or ask a question in the </span><strong><span>Comments</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkAllEven([1, 2, 3, 4]), false)",
			"Test.assertEquals(checkAllEven([2, 4, 6]), true)",
			"Test.assertEquals(checkAllEven([5, 6, 8, 10]), false)",
			"Test.assertEquals(checkAllEven([-2, 2, -2, 2]), true)"
		],
		"starterFn": [
			"1\n// Fix this incorrect code!",
			"2\nfunction checkAllEven(arr) {",
			"3\n  return arr.every(x % 2 === 0)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/bcM99TYJmRv5JnZaA"
	},
	{
		"title": "Convert Number to String of Dashes",
		"description": "<p><span>Create a function that takes a number (from 1 - 60) and returns a corresponding </span><code>string</code><span> of hyphens.</span></p><h3><span>Examples</span></h3><pre><code>Go(1) ➞ \"-\"\n\nGo(5) ➞ \"-----\"\n\nGo(3) ➞ \"---\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You will be provided integers ranging from 1 to 60.</span></li><li><span>Don't forget to return your result as a </span><code>string</code><span>.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Nabeel Mumtaz",
		"publishedByUrl": "https://edabit.com/user/8wFyDvkPiDdKRDExt",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(Go(1),\"-\")",
			"Test.assertEquals(Go(2),\"--\")",
			"Test.assertEquals(Go(3),\"---\")",
			"Test.assertEquals(Go(4),\"----\")",
			"Test.assertEquals(Go(5),\"-----\")",
			"Test.assertEquals(Go(6),\"------\")",
			"Test.assertEquals(Go(7),\"-------\")",
			"Test.assertEquals(Go(8),\"--------\")",
			"Test.assertEquals(Go(9),\"---------\")",
			"Test.assertEquals(Go(10),\"----------\")",
			"Test.assertEquals(Go(11),\"-----------\")",
			"Test.assertEquals(Go(12),\"------------\")",
			"Test.assertEquals(Go(13),\"-------------\")",
			"Test.assertEquals(Go(14),\"--------------\")",
			"Test.assertEquals(Go(15),\"---------------\")",
			"Test.assertEquals(Go(16),\"----------------\")",
			"Test.assertEquals(Go(17),\"-----------------\")",
			"Test.assertEquals(Go(18),\"------------------\")",
			"Test.assertEquals(Go(19),\"-------------------\")",
			"Test.assertEquals(Go(20),\"--------------------\")",
			"Test.assertEquals(Go(21),\"---------------------\")",
			"Test.assertEquals(Go(22),\"----------------------\")",
			"Test.assertEquals(Go(23),\"-----------------------\")",
			"Test.assertEquals(Go(24),\"------------------------\")",
			"Test.assertEquals(Go(25),\"-------------------------\")",
			"Test.assertEquals(Go(26),\"--------------------------\")"
		],
		"starterFn": [
			"1\nfunction Go(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3cBe8af7yG2rzLEA2"
	},
	{
		"title": "Return the First and Last Elements in an Array",
		"description": "<p><span>Create a function that takes an array of numbers and return the </span><strong><span>first</span></strong><span> and </span><strong><span>last</span></strong><span> elements as a new array.</span></p><h3><span>Examples</span></h3><pre><code>firstLast([5, 10, 15, 20, 25]) ➞ [5, 25]\n\nfirstLast([\"edabit\", 13, null, false, true]) ➞ [\"edabit\", true]\n\nfirstLast([undefined, 4, \"6\", \"hello\", null]) ➞ [undefined, null]</code></pre><h3><span>Notes</span></h3><ul><li><span>Test input will always contain a minimum of two elements within the array.</span></li><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(firstLast([5, 10, 15, 20, 25]), [5, 25])",
			"Test.assertSimilar(firstLast([\"edabit\", 13, null, false, true]), [\"edabit\", true])",
			"Test.assertSimilar(firstLast([undefined, 4, \"6\", \"hello\", null]), [undefined, null])",
			"Test.assertSimilar(firstLast([\"hello\", \"edabit\", \"dot\", \"com\"]), [\"hello\", \"com\"])",
			"Test.assertSimilar(firstLast([3, 2, 1]), [3, 1])",
			"Test.assertSimilar(firstLast([\"one\", \"two\"]), [\"one\", \"two\"])",
			"Test.assertSimilar(firstLast([false, false, true, false, false, true, false]), [false, false])"
		],
		"starterFn": [
			"1\nfunction firstLast(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/R3AYf3eTdATXTQTdZ"
	},
	{
		"title": "Eliminate Odd Numbers within an Array",
		"description": "<p><span>Create a function that takes an array of numbers and returns only the even values.</span></p><h3><span>Examples</span></h3><pre><code>noOdds([1, 2, 3, 4, 5, 6, 7, 8]) ➞ [2, 4, 6, 8]\n\nnoOdds([43, 65, 23, 89, 53, 9, 6]) ➞ [6]\n\nnoOdds([718, 991, 449, 644, 380, 440]) ➞ [718, 644, 380, 440]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return all even numbers in the order they were given.</span></li><li><span>All test cases contain valid numbers ranging from 1 to 3000.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(noOdds([1, 2, 3, 4, 5, 6, 7, 8]), [2, 4, 6, 8])",
			"Test.assertSimilar(noOdds([43, 65, 23, 89, 53, 9, 6]), [6])",
			"Test.assertSimilar(noOdds([718, 991, 449, 644, 380, 440]), [718, 644, 380, 440])",
			"Test.assertSimilar(noOdds([148, 6, 16, 85]), [148, 6, 16])",
			"Test.assertSimilar(noOdds([9, 49, 23]), [])",
			"Test.assertSimilar(noOdds([34, 43, 32, 49, 40]), [34, 32, 40])",
			"Test.assertSimilar(noOdds([1232, 1990, 1284, 1391, 1958]), [1232, 1990, 1284, 1958])",
			"Test.assertSimilar(noOdds([2766, 2651, 2373, 2916, 2397, 2539]), [2766, 2916])",
			"Test.assertSimilar(noOdds([53, 65, 52, 62, 59]), [52, 62])",
			"Test.assertSimilar(noOdds([393, 156, 14, 166, 129, 246]), [156, 14, 166, 246])"
		],
		"starterFn": [
			"1\nfunction noOdds(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uJ9K3HtbjHoDGXKhg"
	},
	{
		"title": "Palindrome?",
		"description": "<p><span>A palindrome is a word that is identical forward and backwards.</span></p><ul><li><span>mom</span></li><li><span>racecar</span></li><li><span>kayak</span></li></ul><p><span>Given a word, create a function that checks whether it is a palindrome.</span></p><h3><span>Examples</span></h3><pre><code>checkPalindrome(\"mom\") ➞ true\n\ncheckPalindrome(\"scary\") ➞ false\n\ncheckPalindrome(\"reviver\") ➞ true\n\ncheckPalindrome(\"stressed\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>All test input is lower cased.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkPalindrome('mom'), true)",
			"Test.assertEquals(checkPalindrome('scary'), false)",
			"Test.assertEquals(checkPalindrome('reviver'), true)",
			"Test.assertEquals(checkPalindrome('stressed'), false )",
			"Test.assertEquals(checkPalindrome('good'), false)",
			"Test.assertEquals(checkPalindrome('refer'), true)",
			"Test.assertEquals(checkPalindrome('something'), false)",
			"Test.assertEquals(checkPalindrome('redder'), true)",
			"Test.assertEquals(checkPalindrome('civic'), true)"
		],
		"starterFn": [
			"1\nfunction checkPalindrome(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zvFri3sia4iNPTeqC"
	},
	{
		"title": "Smaller String Number",
		"description": "<p><span>Create a function that returns the smaller number.</span></p><h3><span>Examples</span></h3><pre><code>smallerNum(\"21\", \"44\") ➞ \"21\"\n\nsmallerNum(\"1500\", \"1\") ➞ \"1\"\n\nsmallerNum(\"5\", \"5\") ➞ \"5\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Numbers will be represented as strings, and your output should also be a string.</span></li><li><span>If both numbers tie, return either number.</span></li><li><span>Numbers will be positive.</span></li><li><strong><span>Bonus</span></strong><span>: See if you can do this </span><strong><span>without</span></strong><span> converting to integers.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(smallerNum(\"21\", \"44\"), \"21\")",
			"Test.assertEquals(smallerNum(\"153\", \"367\"), \"153\")",
			"Test.assertEquals(smallerNum(\"1500\", \"16\"), \"16\")",
			"Test.assertEquals(smallerNum(\"100\", \"23\"), \"23\")",
			"Test.assertEquals(smallerNum(\"1500\", \"1\"), \"1\")",
			"Test.assertEquals(smallerNum(\"5\", \"5\"), \"5\")"
		],
		"starterFn": [
			"1\nfunction smallerNum(n1, n2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uRtubbXsDHLwAz5RS"
	},
	{
		"title": "Check if String Ending Matches Second String",
		"description": "<p><span>Create a function that takes two strings and returns </span><code>true</code><span> if the first string ends with the second string; otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>checkEnding(\"abc\", \"bc\") ➞ true\n\ncheckEnding(\"abc\", \"d\") ➞ false\n\ncheckEnding(\"samurai\", \"zi\") ➞ false\n\ncheckEnding(\"feminine\", \"nine\") ➞ true\n\ncheckEnding(\"convention\", \"tio\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>All test cases are valid one word strings.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkEnding(\"abc\", \"bc\"), true)",
			"Test.assertEquals(checkEnding(\"abc\", \"d\"), false)",
			"Test.assertEquals(checkEnding(\"samurai\", \"zi\"), false)",
			"Test.assertEquals(checkEnding(\"feminine\", \"nine\"), true)",
			"Test.assertEquals(checkEnding(\"convention\", \"tio\"), false)",
			"Test.assertEquals(checkEnding(\"cooperative\", \"ooper\"), false)",
			"Test.assertEquals(checkEnding(\"extraterrestrial\", \"xtraterrestrial\"), true)",
			"Test.assertEquals(checkEnding(\"access\", \"ss\"), true)",
			"Test.assertEquals(checkEnding(\"motorist\", \"is\"), false)",
			"Test.assertEquals(checkEnding(\"landowner\", \"landowner\"), true)"
		],
		"starterFn": [
			"1\nfunction checkEnding(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/H9ohpGMyqJ9bAkqE5"
	},
	{
		"title": "Fix the Error: Vowel Edition",
		"description": "<p><span>Your friend is trying to write a function that removes all vowels from a string. They write:</span></p><pre><code>function removeVowels(str) {\n  return str.replace(/[aeiou]/, \"\")\n}</code></pre><p><span>However, it seems that it doesn't work? Fix your friend's code so that it actually </span><strong><span>does</span></strong><span> remove all vowels.</span></p><h3><span>Examples</span></h3><pre><code>removeVowels(\"candy\") ➞ \"cndy\"\n\nremoveVowels(\"hello\") ➞ \"hllo\"\n// The \"e\" is removed, but the \"o\" is still there!\n\nremoveVowels(\"apple\") ➞ \"pple\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeVowels(\"ben\"), \"bn\")",
			"Test.assertEquals(removeVowels(\"many\"), \"mny\")",
			"Test.assertEquals(removeVowels(\"candy\"), \"cndy\")",
			"Test.assertEquals(removeVowels(\"hello\"), \"hll\")",
			"Test.assertEquals(removeVowels(\"apple\"), \"ppl\")",
			"Test.assertEquals(removeVowels(\"fever\"), \"fvr\")"
		],
		"starterFn": [
			"1\n// Fix this incorrect code, so that all tests pass!",
			"2\nfunction removeVowels(str) {",
			"3\n  return str.replace(/[aeiou]/, '')",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/KgNMGbXXst7ZdWchR"
	},
	{
		"title": "Filter by Digit Length",
		"description": "<p><span>Create a function that filters out an array to include numbers who only have a certain number of digits.</span></p><h3><span>Examples</span></h3><pre><code>filterDigitLength([88, 232, 4, 9721, 555], 3) ➞ [232, 555]\n// Include only numbers with 3 digits.\n\nfilterDigitLength([2, 7, 8, 9, 1012], 1) ➞ [2, 7, 8, 9]\n// Include only numbers with 1 digit.\n\nfilterDigitLength([32, 88, 74, 91, 300, 4050], 1) ➞ []\n// No numbers with only 1 digit exist =&gt; return empty array.\n\nfilterDigitLength([5, 6, 8, 9], 1) ➞ [5, 6, 8, 9]\n// All numbers in the array have 1 digit only =&gt; return original array.</code></pre><h3><span>Notes</span></h3><ul><li><span>If no numbers of the specified digit length exist, return an empty array.</span></li><li><span>If all numbers in the array have the specified digit length, return original array.</span></li><li><span>The sub-array returned should have the same relative order as the original array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(filterDigitLength([88, 232, 4, 9721, 555], 3), [232, 555])",
			"Test.assertSimilar(filterDigitLength([2, 7, 8, 9, 1012], 1), [2, 7, 8, 9])",
			"Test.assertSimilar(filterDigitLength([32, 88, 74, 91, 300, 4050], 1), [], 'Should return empty array if no numbers of specified length exist.')",
			"Test.assertSimilar(filterDigitLength([5, 6, 8, 9], 1), [5, 6, 8, 9], 'Should return original array if every digit is that length.')",
			"Test.assertSimilar(filterDigitLength([99, 838, 435, 7666, 989, 431], 3), [838, 435, 989, 431])",
			"Test.assertSimilar(filterDigitLength([99, 838, 435, 7666, 989, 431], 2), [99])"
		],
		"starterFn": [
			"1\nfunction filterDigitLength(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RXNybvGHLuvFiWKvq"
	},
	{
		"title": "Reverse Coding Challenge #3",
		"description": "<p><span>This is a </span><strong><span>reverse coding challenge</span></strong><span>. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.</span></p><p><span>Your task is to create a function that, when fed the inputs below, produce the sample outputs shown.</span></p><h3><span>Examples</span></h3><pre><code>[5, 7, 8, 2, 1], 2 ➞ [1, 1, 0, 0, 1]\n\n[9, 8, 16, 47], 4 ➞ [1, 0, 0, 3]\n\n[17, 11, 99, 55, 23, 1], 5 ➞ [2, 1, 4, 0, 3, 1]\n\n[6, 1], 7 ➞ [6, 1]\n\n[3, 2, 9], 3 ➞ [0, 2, 0]\n\n[48, 22, 0, 19, 33, 100], 10 ➞ [8, 2, 0, 9, 3, 0]</code></pre><h3><span>Notes</span></h3><p><span>If you get stuck, see </span><strong><span>Comments</span></strong><span> for a hint.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(mysteryFunc([5, 7, 8, 2, 1], 2), [1, 1, 0, 0, 1])",
			"Test.assertSimilar(mysteryFunc([9, 8, 16, 47], 4), [1, 0, 0, 3])",
			"Test.assertSimilar(mysteryFunc([17, 11, 99, 55, 23, 1], 5), [2, 1, 4, 0, 3, 1])",
			"Test.assertSimilar(mysteryFunc([6, 1], 7), [6, 1])",
			"Test.assertSimilar(mysteryFunc([3, 2, 9], 3), [0, 2, 0])",
			"Test.assertSimilar(mysteryFunc([48, 22, 0, 19, 33, 100], 10), [8, 2, 0, 9, 3, 0])"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bADsAhtb5g6pu5WYM"
	},
	{
		"title": "Recursion: Sum",
		"description": "<p><span>Write a function that finds the sum of the first </span><code>n</code><span> natural numbers. </span><strong><span>Make your function recursive.</span></strong></p><h3><span>Examples</span></h3><pre><code>sum(5) ➞ 15\n// 1 + 2 + 3 + 4 + 5 = 15\n\nsum(1) ➞ 1\n\nsum(12) ➞ 78</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for info on recursion.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(sum(1), 1)",
			"Test.assertEquals(sum(5), 15)",
			"Test.assertEquals(sum(7), 28)",
			"Test.assertEquals(sum(10), 55)",
			"Test.assertEquals(sum(12), 78)",
			"Test.assertEquals(sum(15), 120)",
			"Test.assertEquals(sum(20), 210)",
			"Test.assertEquals(sum(100), 5050)"
		],
		"starterFn": [
			"1\nfunction sum(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uYQs3cBqPEsk9mdZB"
	},
	{
		"title": "The Full Length of a Google",
		"description": "<p><span>Google's logo can be stretched depending on how many pages it lets you skip forward to.</span></p><p><img alt=\"Image of Goooooooooogle\" src=\"https://edabit-challenges.s3.amazonaws.com/Google.png\"></p><p><span>Let's say we wanted to </span><em><span>change</span></em><span> the amount of pages that Google could skip to. Create a function where given a </span><em><span>number of pages</span></em><span> </span><code>n</code><span>, return the word \"Google\" but with the correct number of \"o\"s.</span></p><h3><span>Examples</span></h3><pre><code>googlify(10) ➞ \"Goooooooooogle\"\n\ngooglify(23) ➞ \"Gooooooooooooooooooooooooogle\"\n\ngooglify(2) ➞ \"Google\"\n\ngooglify(-2) ➞ \"invalid\"</code></pre><h3><span>Notes</span></h3><p><span>If </span><code>n</code><span> is </span><em><span>equal to</span></em><span> or </span><em><span>less than</span></em><span> </span><strong><span>1</span></strong><span>, return </span><code>invalid</code><span>.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(googlify(-5), \"invalid\")",
			"Test.assertEquals(googlify(-4), \"invalid\")",
			"Test.assertEquals(googlify(-3), \"invalid\")",
			"Test.assertEquals(googlify(-2), \"invalid\")",
			"Test.assertEquals(googlify(-1), \"invalid\")",
			"Test.assertEquals(googlify(0), \"invalid\")",
			"Test.assertEquals(googlify(1), \"invalid\")",
			"Test.assertEquals(googlify(2), \"Google\")",
			"Test.assertEquals(googlify(3), \"Gooogle\")",
			"Test.assertEquals(googlify(4), \"Goooogle\")",
			"Test.assertEquals(googlify(5), \"Gooooogle\")",
			"Test.assertEquals(googlify(6), \"Goooooogle\")",
			"Test.assertEquals(googlify(7), \"Gooooooogle\")",
			"Test.assertEquals(googlify(8), \"Goooooooogle\")",
			"Test.assertEquals(googlify(9), \"Gooooooooogle\")",
			"Test.assertEquals(googlify(10), \"Goooooooooogle\")",
			"Test.assertEquals(googlify(11), \"Gooooooooooogle\")",
			"Test.assertEquals(googlify(12), \"Goooooooooooogle\")",
			"Test.assertEquals(googlify(13), \"Gooooooooooooogle\")",
			"Test.assertEquals(googlify(14), \"Goooooooooooooogle\")",
			"Test.assertEquals(googlify(15), \"Gooooooooooooooogle\")",
			"Test.assertEquals(googlify(16), \"Goooooooooooooooogle\")",
			"Test.assertEquals(googlify(17), \"Gooooooooooooooooogle\")",
			"Test.assertEquals(googlify(18), \"Goooooooooooooooooogle\")",
			"Test.assertEquals(googlify(19), \"Gooooooooooooooooooogle\")",
			"Test.assertEquals(googlify(20), \"Goooooooooooooooooooogle\")"
		],
		"starterFn": [
			"1\nfunction googlify(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cWHToCQaAbnzNJzQw"
	},
	{
		"title": "Find the Smallest Number in an Array",
		"description": "<p><span>Create a function that takes an array of numbers and returns the smallest number in the set.</span></p><h3><span>Examples</span></h3><pre><code>findSmallestNum([34, 15, 88, 2]) ➞ 2\n\nfindSmallestNum([34, -345, -1, 100]) ➞ -345\n\nfindSmallestNum([-76, 1.345, 1, 0]) ➞ -76\n\nfindSmallestNum([0.4356, 0.8795, 0.5435, -0.9999]) ➞ -0.9999\n\nfindSmallestNum([7, 7, 7]) ➞ 7</code></pre><h3><span>Notes</span></h3><ul><li><span>Test cases contain decimals.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(findSmallestNum([34, 15, 88, 2]), 2)",
			"Test.assertEquals(findSmallestNum([34, -345, -1, 100]), -345)",
			"Test.assertEquals(findSmallestNum([-76, 1.345, 1, 0]), -76)",
			"Test.assertEquals(findSmallestNum([0.4356, 0.8795, 0.5435, -0.9999]), -0.9999)",
			"Test.assertEquals(findSmallestNum([7, 7, 7]), 7)",
			"Test.assertEquals(findSmallestNum([4, 6, 1, 3, 4, 5, 5, 1]), 1)",
			"Test.assertEquals(findSmallestNum([-4, -6, -8, -1]), -8)",
			"Test.assertEquals(findSmallestNum([54, 76, 23, 54]), 23)",
			"Test.assertEquals(findSmallestNum([100]), 100)",
			"Test.assertEquals(findSmallestNum([0, 1, 2, 3, 4, 5]), 0)"
		],
		"starterFn": [
			"1\nfunction findSmallestNum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/g66EJsbdnSDayyEcK"
	},
	{
		"title": "Array of Consecutive Numbers",
		"description": "<p><span>Implement a function that returns an array containing all the consecutive numbers in ascendant order from the given value </span><code>low</code><span> up to the given value </span><code>high</code><span> (bounds included).</span></p><h3><span>Examples</span></h3><pre><code>getSequence(1, 5) ➞ [1, 2, 3, 4, 5]\n\ngetSequence(98, 100) ➞ [98, 99, 100]\n\ngetSequence(1000, 1000) ➞ [1000]</code></pre><h3><span>Notes</span></h3><ul><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li><li><span>ES6 deepening (</span><em><span>for medium or higher level users</span></em><span>): try to implement a </span><em><span>one-liner</span></em><span> function that calls a </span><strong><span>single</span></strong><span> method.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(getSequence(1, 5), [1, 2, 3, 4, 5], \"Example #1\")",
			"Test.assertSimilar(getSequence(98, 100), [98, 99, 100], \"Example #2\")",
			"Test.assertSimilar(getSequence(1000, 1000), [1000], \"Example #3\")",
			"Test.assertSimilar(getSequence(1450, 1460), [1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460])",
			"Test.assertSimilar(getSequence(0, 3), [0, 1, 2, 3])",
			"Test.assertSimilar(getSequence(-10, 1), [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0,  1])",
			"Test.assertSimilar(getSequence(-100, -100), [-100])"
		],
		"starterFn": [
			"1\nfunction getSequence(low, high) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/v5TorwH9tiNtddSY3"
	},
	{
		"title": "Applying Discounts",
		"description": "<p><span>Create a function that applies a </span><em><span>discount</span></em><span> </span><code>d</code><span> to every number in the array.</span></p><h3><span>Examples</span></h3><pre><code>getDiscounts([2, 4, 6, 11], \"50%\") ➞ [1, 2, 3, 5.5]\n\ngetDiscounts([10, 20, 40, 80], \"75%\") ➞ [7.5, 15, 30, 60]\n\ngetDiscounts([100], \"45%\") ➞ [45]</code></pre><h3><span>Notes</span></h3><ul><li><span>The discount is the percentage of the original price (i.e the discount of \"75%\" to 12 would be 9 as opposed to taking off 75% (making 3)).</span></li><li><span>There won't be any awkward decimal numbers, only 0.5 to deal with.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(getDiscounts([2, 4, 6, 11], \"50%\"), [1, 2, 3, 5.5])",
			"Test.assertSimilar(getDiscounts([10, 20, 40, 80], \"75%\"), [7.5, 15, 30, 60])",
			"Test.assertSimilar(getDiscounts([100], \"45%\"), [45])"
		],
		"starterFn": [
			"1\nfunction getDiscounts(nums, d) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qgS7XZjvL8wEChNvq"
	},
	{
		"title": "Unlucky 13",
		"description": "<p><span>Given a sorted array of numbers, </span><em><span>remove</span></em><span> any numbers that are divisible by 13. Return the amended array.</span></p><h3><span>Examples</span></h3><pre><code>unlucky13([53, 182, 435, 591, 637]) ➞ [53, 435, 591]\n// 182 and 637 are divisible by 13.\n\nunlucky13([24, 316, 393, 458, 1279]) ➞ [24, 316, 393, 458, 1279]\n// No numbers in the array are divisible by 13.\n\nunlucky13([104, 351, 455, 806, 871]) ➞ []\n// All numbers in the array are divisible by 13.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(unlucky13([91, 286, 416, 884, 1229]), [1229])",
			"Test.assertSimilar(unlucky13([245, 518, 741, 824, 1092]), [245, 518, 824])",
			"Test.assertSimilar(unlucky13([394, 447, 572, 832, 1105]), [394, 447])",
			"Test.assertSimilar(unlucky13([289, 406, 650, 791, 1079]), [289, 406, 791])",
			"Test.assertSimilar(unlucky13([390, 438, 1014, 1067, 1091]), [438, 1067, 1091])",
			"Test.assertSimilar(unlucky13([494, 1041, 1158, 1188, 1298]), [1041, 1158, 1188, 1298])",
			"Test.assertSimilar(unlucky13([43, 117, 169, 702, 1048]), [43, 1048])",
			"Test.assertSimilar(unlucky13([195, 430, 845, 857, 874]), [430, 857, 874])",
			"Test.assertSimilar(unlucky13([247, 510, 1144, 1164, 1206]), [510, 1164, 1206])",
			"Test.assertSimilar(unlucky13([182, 520, 533, 923, 1196]), [])",
			"Test.assertSimilar(unlucky13([52, 144, 148, 1105, 1114]), [144, 148, 1114])",
			"Test.assertSimilar(unlucky13([130, 204, 364, 585, 679]), [204, 679])",
			"Test.assertSimilar(unlucky13([23, 309, 949, 975, 1235]), [23, 309])",
			"Test.assertSimilar(unlucky13([804, 910, 1069, 1190, 1249]), [804, 1069, 1190, 1249])",
			"Test.assertSimilar(unlucky13([21, 78, 611, 652, 1036]), [21, 652, 1036])",
			"Test.assertSimilar(unlucky13([32, 107, 481, 891, 1131]), [32, 107, 891])",
			"Test.assertSimilar(unlucky13([260, 389, 420, 1035, 1086]), [389, 420, 1035, 1086])",
			"Test.assertSimilar(unlucky13([251, 416, 508, 630, 1235]), [251, 508, 630])",
			"Test.assertSimilar(unlucky13([213, 592, 1130, 1172, 1281]), [213, 592, 1130, 1172, 1281])",
			"Test.assertSimilar(unlucky13([25, 136, 312, 632, 1193]), [25, 136, 632, 1193])"
		],
		"starterFn": [
			"1\nfunction unlucky13(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5232asan2yFuMGnHq"
	},
	{
		"title": "Shuffle the Name",
		"description": "<p><span>Create a function that accepts a string (of a person's first and last name) and returns a string with the first and last name swapped.</span></p><h3><span>Examples</span></h3><pre><code>nameShuffle(\"Donald Trump\") ➞ \"Trump Donald\"\n\nnameShuffle(\"Rosie O'Donnell\") ➞ \"O'Donnell Rosie\"\n\nnameShuffle(\"Seymour Butts\") ➞ \"Butts Seymour\"</code></pre><h3><span>Notes</span></h3><ul><li><span>There will be exactly one space between the first and last name.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(nameShuffle(\"Donald Trump\"),\"Trump Donald\");",
			"Test.assertEquals(nameShuffle(\"Rosie O'Donnel\"),\"O'Donnel Rosie\");",
			"Test.assertEquals(nameShuffle(\"Seymour Butts\"),\"Butts Seymour\");",
			"Test.assertEquals(nameShuffle(\"Ebony Greene\"),\"Greene Ebony\");",
			"Test.assertEquals(nameShuffle(\"Ken Kennedy\"),\"Kennedy Ken\");",
			"Test.assertEquals(nameShuffle(\"Allison Gonzalez\"),\"Gonzalez Allison\");",
			"Test.assertEquals(nameShuffle(\"Albert Frazier\"),\"Frazier Albert\");",
			"Test.assertEquals(nameShuffle(\"Eloise Hopkins\"),\"Hopkins Eloise\");",
			"Test.assertEquals(nameShuffle(\"Donnie Welch\"),\"Welch Donnie\");",
			"Test.assertEquals(nameShuffle(\"Vernon Thomas\"),\"Thomas Vernon\");"
		],
		"starterFn": [
			"1\nfunction nameShuffle(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eitMRpuJR3Ls4zQsn"
	},
	{
		"title": "Reverse the Order of a String",
		"description": "<p><span>Create a function that takes a string as its argument and returns the string in reversed order.</span></p><h3><span>Examples</span></h3><pre><code>reverse(\"Hello World\") ➞ \"dlroW olleH\"\n\nreverse(\"The quick brown fox.\") ➞ \".xof nworb kciuq ehT\"\n\nreverse(\"Edabit is really helpful!\") ➞ \"!lufpleh yllaer si tibadE\"</code></pre><h3><span>Notes</span></h3><p><span>You can expect a valid string for all test cases.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverse(\"Think different.\"), \".tnereffid knihT\");",
			"Test.assertEquals(reverse(\"It doesn’t make sense to hire smart people and tell them what to do; we hire smart people so they can tell us what to do.\"), \".od ot tahw su llet nac yeht os elpoep trams erih ew ;od ot tahw meht llet dna elpoep trams erih ot esnes ekam t’nseod tI\");",
			"Test.assertEquals(reverse(\"Innovation is the ability to see change as an opportunity - not a threat\"), \"taerht a ton - ytinutroppo na sa egnahc ees ot ytiliba eht si noitavonnI\");",
			"Test.assertEquals(reverse(\"Everything is based on a simple rule: Quality is the best business plan.\"), \".nalp ssenisub tseb eht si ytilauQ :elur elpmis a no desab si gnihtyrevE\");",
			"Test.assertEquals(reverse(\"The people who are crazy enough to think they can change the world are the ones who do.\"), \".od ohw seno eht era dlrow eht egnahc nac yeht kniht ot hguone yzarc era ohw elpoep ehT\");",
			"Test.assertEquals(reverse(\"Don’t let the noise of others’ opinions drown out your own inner voice.\"), \".eciov renni nwo ruoy tuo nword snoinipo ’srehto fo esion eht tel t’noD\");",
			"Test.assertEquals(reverse(\"Learn continually; There's always one more thing to learn.\"), \".nrael ot gniht erom eno syawla s'erehT ;yllaunitnoc nraeL\");",
			"Test.assertEquals(reverse(\"Quality is more important than quantity. One home run is much better than two doubles.\"), \".selbuod owt naht retteb hcum si nur emoh enO .ytitnauq naht tnatropmi erom si ytilauQ\");",
			"Test.assertEquals(reverse(\"Your time is limited so don't waste it living someone else's life.\"), \".efil s'esle enoemos gnivil ti etsaw t'nod os detimil si emit ruoY\");",
			"Test.assertEquals(reverse(\"The only way to be truly satisfied is to do what you believe is great work.\"), \".krow taerg si eveileb uoy tahw od ot si deifsitas ylurt eb ot yaw ylno ehT\");"
		],
		"starterFn": [
			"1\nfunction reverse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oS3wCwLWsDqvs7XKd"
	},
	{
		"title": "Profit Margin",
		"description": "<p><span>Create a function that calculates the profit margin given </span><code>costPrice</code><span> and </span><code>salesPrice</code><span>. Return the result as a percentage formated string, and rounded to one decimals. To calculate profit margin you subtract the cost from the sales price, then divide by salesprice.</span></p><h3><span>Examples</span></h3><pre><code>profitMargin(50, 50) ➞ \"0.0%\"\n\nprofitMargin(28, 39) ➞ \"28.2%\"\n\nprofitMargin(33, 84) ➞ \"60.7%\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to return the result as a percentage formated string.</span></li><li><span>Only one decimal should be included.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(profitMargin(10, 15), \"33.3%\")",
			"Test.assertEquals(profitMargin(75, 40), \"-87.5%\")",
			"Test.assertEquals(profitMargin(55, 55), \"0.0%\")",
			"Test.assertEquals(profitMargin(30, 50), \"40.0%\")",
			"Test.assertEquals(profitMargin(9999, 10001), \"0.0%\")",
			"Test.assertEquals(profitMargin(33, 84), \"60.7%\")",
			"Test.assertEquals(profitMargin(28, 39), \"28.2%\")"
		],
		"starterFn": [
			"1\nfunction profitMargin(costPrice, salesPrice) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uqTGMSityHMYL7W5s"
	},
	{
		"title": "Edaaaaabit",
		"description": "<p><span>Write a function that takes an integer and returns a string with the given number of </span><code>\"a\"</code><span>s in Edabit.</span></p><h3><span>Examples</span></h3><pre><code>howManyTimes(5) ➞ \"Edaaaaabit\"\n\nhowManyTimes(0) ➞ \"Edbit\"\n\nhowManyTimes(12) ➞ \"Edaaaaaaaaaaaabit\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The string must start with \"Ed\" and end with \"bit\".</span></li><li><span>You'll only be given integers as test input.</span></li></ul>",
		"publishedBy": "Qudusayo",
		"publishedByUrl": "https://edabit.com/user/86Cs3P5qT5Pyrwhj7",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(howManyTimes(5), \"Edaaaaabit\")",
			"Test.assertEquals(howManyTimes(15), \"Edaaaaaaaaaaaaaaabit\")",
			"Test.assertEquals(howManyTimes(10), \"Edaaaaaaaaaabit\")",
			"Test.assertEquals(howManyTimes(23), \"Edaaaaaaaaaaaaaaaaaaaaaaabit\")",
			"Test.assertEquals(howManyTimes(1), \"Edabit\")"
		],
		"starterFn": [
			"1\nfunction howManyTimes(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tHZBvD3w69hpDCtMg"
	},
	{
		"title": "Vowel Replacer",
		"description": "<p><span>Create a function that replaces all the vowels in a string with a specified character.</span></p><h3><span>Examples</span></h3><pre><code>replaceVowels(\"the aardvark\", \"#\") ➞ \"th# ##rdv#rk\"\n\nreplaceVowels(\"minnie mouse\", \"?\") ➞ \"m?nn?? m??s?\"\n\nreplaceVowels(\"shakespeare\", \"*\") ➞ \"sh*k*sp**r*\"</code></pre><h3><span>Notes</span></h3><p><span>All characters will be in lower case.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(replaceVowels(\"the aardvark\", \"#\"), \"th# ##rdv#rk\")",
			"Test.assertEquals(replaceVowels(\"minnie mouse\", \"?\"), \"m?nn?? m??s?\")",
			"Test.assertEquals(replaceVowels(\"shakespeare\", \"*\"), \"sh*k*sp**r*\")",
			"Test.assertEquals(replaceVowels(\"all is fair in love and war\", \"<\"), \"<ll <s f<<r <n l<v< <nd w<r\")"
		],
		"starterFn": [
			"1\nfunction replaceVowels(str, ch) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5FhabpvT3FF75kgCi"
	},
	{
		"title": "Negate the Array of Numbers",
		"description": "<p><span>Given an array of numbers, negate all elements contained within.</span></p><ul><li><span>Negating a positive value </span><code>-+n</code><span> will return </span><code>-n</code><span>, because all </span><code>+</code><span>'s are removed.</span></li><li><span>Negating a negative value </span><code>--n</code><span> will return </span><code>n</code><span>, because the first </span><code>-</code><span> turns the second minus into a </span><code>+</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>negate([1, 2, 3, 4]) ➞ [-1, -2, -3, -4]\n\nnegate([-1, 2, -3, 4]) ➞ [1, -2, 3, -4]\n\nnegate([]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>If you get an empty array, return an empty array: </span><code>[]</code></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(negate([1, 2, 3, 4]), [-1, -2, -3, -4])",
			"Test.assertSimilar(negate([-1, -2, -3, -4]), [1, 2, 3, 4])",
			"Test.assertSimilar(negate([]), [])"
		],
		"starterFn": [
			"1\nfunction negate(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BA8Pom669icAdkdgj"
	},
	{
		"title": "Semantic Versioning",
		"description": "<p><span>In </span><strong><span>semantic versioning</span></strong><span> a piece of software can be represented in a format like this example: </span><code>6.1.9</code><span>.</span></p><ol><li><span>The first number is the major version.</span></li><li><span>The second number is the minor version.</span></li><li><span>The third number is the patch (bug fixes).</span></li></ol><p><span>Write three separate functions, one to retrieve each element in the semantic versioning specification.</span></p><h3><span>Examples</span></h3><pre><code>// 6.1.9\nretrieveMajor(\"6.1.9\") ➞ \"6\"\n\nretrieveMinor(\"6.1.9\") ➞ \"1\"\n\nretrievePatch(\"6.1.9\") ➞ \"9\"\n\n// 2.1.0\nretrieveMajor(\"2.1.0\") ➞ \"2\"\n\nretrieveMinor(\"2.1.0\") ➞ \"1\"\n\nretrievePatch(\"2.1.0\") ➞ \"0\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"// Test group 1",
			"Test.assertEquals(retrieveMajor(\"6.1.9\"), \"6\")",
			"Test.assertEquals(retrieveMinor(\"6.1.9\"), \"1\")",
			"Test.assertEquals(retrievePatch(\"6.1.9\"), \"9\")",
			"// Test group 2",
			"Test.assertEquals(retrieveMajor(\"2.1.0\"), \"2\")",
			"Test.assertEquals(retrieveMinor(\"2.1.0\"), \"1\")",
			"Test.assertEquals(retrievePatch(\"2.1.0\"), \"0\")",
			"// Test group 3",
			"Test.assertEquals(retrieveMajor(\"5.12.13\"), \"5\")",
			"Test.assertEquals(retrieveMinor(\"5.12.13\"), \"12\", 'should work with 2-digit version numbers')",
			"Test.assertEquals(retrievePatch(\"5.12.13\"), \"13\", 'should work with 2-digit version numbers')"
		],
		"starterFn": [
			"1\nfunction retrieveMajor(semver) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction retrieveMinor(semver) {",
			"6\n  ",
			"7\n}",
			"8\n​",
			"9\nfunction retrievePatch(semver) {",
			"10\n  ",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/JcRKAzSnnPdSPBKMK"
	},
	{
		"title": "Broken Bridge",
		"description": "<p><span>Create a function which validates whether a bridge is safe to walk on (i.e. has no gaps in it to fall through).</span></p><h3><span>Examples</span></h3><pre><code>isSafeBridge(\"####\") ➞ true\n\nisSafeBridge(\"## ####\") ➞ false\n\nisSafeBridge(\"#\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>You can expect the bridge's ends connecting it to its surrounding.</span></p>",
		"publishedBy": "ente",
		"publishedByUrl": "https://edabit.com/user/2eAwdyT6n7og5EzdW",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSafeBridge(\"####\"), true)",
			"Test.assertEquals(isSafeBridge(\"## ####\"), false)",
			"Test.assertEquals(isSafeBridge(\"#\"), true)",
			"Test.assertEquals(isSafeBridge(\"# #\"), false)"
		],
		"starterFn": [
			"1\nfunction isSafeBridge(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YjkNx49pk7Eois9pi"
	},
	{
		"title": "FizzBuzz Interview Question",
		"description": "<p><span>Create a function that takes a number as an argument and returns </span><code>\"Fizz\"</code><span>, </span><code>\"Buzz\"</code><span> or </span><code>\"FizzBuzz\"</code><span>.</span></p><ul><li><span>If the number is a multiple of 3 the output should be </span><code>\"Fizz\"</code><span>.</span></li><li><span>If the number given is a multiple of 5, the output should be </span><code>\"Buzz\"</code><span>.</span></li><li><span>If the number given is a multiple of both 3 and 5, the output should be </span><code>\"FizzBuzz\"</code><span>.</span></li><li><span>If the number is not a multiple of either 3 or 5, the number should be output on its own as shown in the examples below.</span></li><li><span>The output should always be a string even if it is not a multiple of 3 or 5.</span></li></ul><h3><span>Examples</span></h3><pre><code>FizzBuzz(3) ➞ \"Fizz\"\n\nFizzBuzz(5) ➞ \"Buzz\"\n\nFizzBuzz(15) ➞ \"FizzBuzz\"\n\nFizzBuzz(4) ➞ \"4\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Try to be precise with how you spell things and where you put the capital letters.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"math",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(FizzBuzz(3), \"Fizz\", \"You gave \" + FizzBuzz(3) + \" and Fizz was needed\")",
			"Test.assertEquals(FizzBuzz(5), \"Buzz\", \"You gave \" + FizzBuzz(5) + \" and Buzz was needed\")",
			"Test.assertEquals(FizzBuzz(15), \"FizzBuzz\", \"You gave \" + FizzBuzz(15) + \" and FizzBuzz was needed\")",
			"Test.assertEquals(FizzBuzz(10), \"Buzz\", \"You gave \" + FizzBuzz(10) + \" and Buzz was needed\")",
			"Test.assertEquals(FizzBuzz(98), \"98\", \"You gave \" + FizzBuzz(98) + \" and 98 was needed\")"
		],
		"starterFn": [
			"1\nfunction FizzBuzz(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hoDbsz38GzWwBQ47w"
	},
	{
		"title": "Reverse and Capitalize",
		"description": "<p><span>Create a function that takes a string of lowercase characters and returns that string reversed and in upper case.</span></p><h3><span>Examples</span></h3><pre><code>reverseCapitalize(\"abc\") ➞ \"CBA\"\n\nreverseCapitalize(\"hellothere\") ➞ \"EREHTOLLEH\"\n\nreverseCapitalize(\"input\") ➞ \"TUPNI\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Kenny Fraser",
		"publishedByUrl": "https://edabit.com/user/jWW9YLuYPdAR6uR4c",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverseCapitalize(\"edabit\"), \"TIBADE\")",
			"Test.assertEquals(reverseCapitalize(\"abc\"), \"CBA\")",
			"Test.assertEquals(reverseCapitalize(\"hellothere\") ,\"EREHTOLLEH\")",
			"Test.assertEquals(reverseCapitalize(\"input\") , \"TUPNI\")",
			"Test.assertEquals(reverseCapitalize(\"indubitably\") , \"YLBATIBUDNI\")"
		],
		"starterFn": [
			"1\nfunction reverseCapitalize(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nBW6ubsQCurPvhpWc"
	},
	{
		"title": "Alphabet Soup",
		"description": "<p><span>Create a function that takes a string  and returns a string with its letters in alphabetical order.</span></p><h3><span>Examples</span></h3><pre><code>AlphabetSoup(\"hello\") ➞ \"ehllo\"\n\nAlphabetSoup(\"edabit\") ➞ \"abdeit\"\n\nAlphabetSoup(\"hacker\") ➞ \"acehkr\"\n\nAlphabetSoup(\"geek\") ➞ \"eegk\"\n\nAlphabetSoup(\"javascript\") ➞ \"aacijprstv\"</code></pre><h3><span>Notes</span></h3><p><span>You can assume numbers and punctuation symbols won't be included in test cases. You'll only have to deal with single word, alphabetic characters.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(AlphabetSoup(\"hello\"), \"ehllo\");",
			"Test.assertEquals(AlphabetSoup(\"edabit\"), \"abdeit\");",
			"Test.assertEquals(AlphabetSoup(\"hacker\"), \"acehkr\");",
			"Test.assertEquals(AlphabetSoup(\"geek\"), \"eegk\");",
			"Test.assertEquals(AlphabetSoup(\"javascript\"), \"aacijprstv\");",
			"Test.assertEquals(AlphabetSoup(\"credibility\"), \"bcdeiiilrty\");",
			"Test.assertEquals(AlphabetSoup(\"apostrophe\"), \"aehoopprst\");",
			"Test.assertEquals(AlphabetSoup(\"determination\"), \"adeeiimnnortt\");",
			"Test.assertEquals(AlphabetSoup(\"win\"), \"inw\");",
			"Test.assertEquals(AlphabetSoup(\"synthesis\"), \"ehinsssty\");"
		],
		"starterFn": [
			"1\nfunction AlphabetSoup(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bHDbMWpdeNaw23jqT"
	},
	{
		"title": "Both Zero, Negative or Positive",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if both numbers are:</span></p><ul><li><span>Smaller than </span><code>0</code><span>, OR ...</span></li><li><span>Greater than </span><code>0</code><span>, OR ...</span></li><li><span>Exactly </span><code>0</code></li></ul><p><span>Otherwise, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>both(6, 2) ➞ true\n\nboth(0, 0) ➞ true\n\nboth(-1, 2) ➞ false\n\nboth(0, 2) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Inputs will always be two numbers.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"[",
			"  [6, 2, true],",
			"  [-6, -9, true],",
			"  [6, -2, false],",
			"  [0, 0, true],",
			"  [100, 1, true],",
			"  [-0, 0, true],",
			"  [-80, -5000, true],",
			"  [6.28, -999, false],",
			"  [-1, 2, false],",
			"  [0, 2, false]",
			"].forEach(x => Test.assertEquals(both(x[0], x[1]), x[2]))"
		],
		"starterFn": [
			"1\nfunction both(n1, n2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/447bDYjW8ZBTtFG5M"
	},
	{
		"title": "Flip the Boolean",
		"description": "<p><span>Create a function that reverses a </span><code>boolean</code><span> value and returns the string </span><code>\"boolean expected\"</code><span> if another variable type is given.</span></p><h3><span>Examples</span></h3><pre><code>reverse(true) ➞ false\n\nreverse(false) ➞ true\n\nreverse(0) ➞ \"boolean expected\"\n\nreverse(null) ➞ \"boolean expected\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're </span><em><span>really</span></em><span> stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Oli",
		"publishedByUrl": "https://edabit.com/user/RvuuQDghaq4GGGGip",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"logic"
		],
		"tests": [
			"Test.assertEquals(reverse(false), true)",
			"Test.assertEquals(reverse(true), false)",
			"Test.assertEquals(reverse(0), \"boolean expected\")",
			"Test.assertEquals(reverse(null), \"boolean expected\")",
			"Test.assertEquals(reverse(undefined), \"boolean expected\")",
			"Test.assertEquals(reverse({}), \"boolean expected\")"
		],
		"starterFn": [
			"1\nfunction reverse(bool) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/noqGmqk6StwApSGwa"
	},
	{
		"title": "Strange Pair",
		"description": "<p><span>A pair of strings form a </span><strong><span>strange pair</span></strong><span> if both of the following are true:</span></p><ul><li><span>The 1st string's </span><strong><span>first</span></strong><span> letter = 2nd string's </span><strong><span>last</span></strong><span> letter.</span></li><li><span>The 1st string's </span><strong><span>last</span></strong><span> letter = 2nd string's </span><strong><span>first</span></strong><span> letter.</span></li></ul><p><span>Create a function that returns </span><code>true</code><span> if a pair of strings constitutes a </span><strong><span>strange pair</span></strong><span>, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isStrangePair(\"ratio\", \"orator\") ➞ true\n// \"ratio\" ends with \"o\" and \"orator\" starts with \"o\".\n// \"ratio\" starts with \"r\" and \"orator\" ends with \"r\".\n\nisStrangePair(\"sparkling\", \"groups\") ➞ true\n\nisStrangePair(\"bush\", \"hubris\") ➞ false\n\nisStrangePair(\"\", \"\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>It should work on a pair of empty strings (they trivially share nothing).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isStrangePair(\"ratio\", \"orator\"), true)",
			"Test.assertEquals(isStrangePair(\"sparkling\", \"groups\"), true)",
			"Test.assertEquals(isStrangePair(\"mentee\", \"eminem\"), true)",
			"Test.assertEquals(isStrangePair(\"yahtzee\", \"easy\"), true)",
			"Test.assertEquals(isStrangePair(\"bush\", \"hubris\"), false)",
			"Test.assertEquals(isStrangePair(\"edit\", \"cheese\"), false)",
			"Test.assertEquals(isStrangePair(\"false\", \"true\"), false)",
			"Test.assertEquals(isStrangePair(\"cupid\", \"dionysus\"), false)",
			"Test.assertEquals(isStrangePair(\"futile\", \"elephant\"), false)",
			"Test.assertEquals(isStrangePair(\"\", \"\"), true)",
			"Test.assertEquals(isStrangePair(\"\", \"abc\"), false)",
			"Test.assertEquals(isStrangePair(\"a\", \"a\"), true)",
			"Test.assertEquals(isStrangePair(\"a\", \"b\"), false)",
			"Test.assertEquals(isStrangePair(\"&\", \"&\"), true)",
			"Test.assertEquals(isStrangePair(\"&!\", \"!&\"), true)",
			"Test.assertEquals(isStrangePair(\"5556\", \"65\"), true)"
		],
		"starterFn": [
			"1\nfunction isStrangePair(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WBdjg7zgiqi6L5zsL"
	},
	{
		"title": "Formatting Text on Edabit",
		"description": "<p><span>The important thing when a comment is posted on Edabit is its content. But when a comment is formatted in the right way, it will be properly shown and it will be easily readable by everyone.</span></p><p><span>In this challenge, you have to format a word using four specific methods of the Markdown language that is used by Edabit to format the text in the </span><strong><span>Comments</span></strong><span> tab and the </span><strong><span>Instructions</span></strong><span> tab (during the creation, or the translation, of a challenge). Each of these four methods (or styles) is identified by the lowercased initial letter of its name:</span></p><ul><li><code>\"b\"</code><span> is for </span><strong><span>bold</span></strong></li><li><code>\"i\"</code><span> is for </span><em><span>italics</span></em></li><li><code>\"c\"</code><span> is for </span><code>inline code</code></li><li><code>\"s\"</code><span> is for </span><del><span>strikethrough</span></del></li></ul><p><span>You are given two parameters: a string </span><code>word</code><span> being the word to format, and another string </span><code>style</code><span> being the lowercased initial of the style to apply. You have to implement a function that returns a string being the </span><code>word</code><span> surrounded by the special characters used to apply the given </span><code>style</code><span>.</span></p><h3><span>Examples</span></h3><p><span>To correctly apply a format, the word has to both start and end with one or two specific special characters. There are no spaces between the characters and the word. You can find the characters to use for this challenge and how to return the result in the </span><strong><span>Comments</span></strong><span> tab! Just click on the </span><strong><span>Formatting Help</span></strong><span> link that you can find in the </span><strong><span>Comments</span></strong><span> tab of this challenge:</span></p><p><img alt=\"Screenshot showing the link Formatting Help and its position\" src=\"https://edabit-challenges.s3.amazonaws.com/challenge.png\"></p><p><span>Besides the four specific methods used in this challenge, you will find also a useful quick list of the various styles used on Edabit (with the most useful style being the </span><strong><span>Code Block</span></strong><span> </span><em><span>probably</span></em><span>). If you're really stuck, just look at the </span><strong><span>Tests</span></strong><span> tab.</span></p><h3><span>Notes</span></h3><p><span>Remember to format your comments!</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(mdFormat(\"Bold\", \"b\"), \"**Bold**\")",
			"Test.assertEquals(mdFormat(\"Italics\", \"i\"), \"_Italics_\")",
			"Test.assertEquals(mdFormat(\"Code\", \"c\"), \"`Code`\")",
			"Test.assertEquals(mdFormat(\"Ruby\", \"s\"), \"~~Ruby~~\")",
			"Test.assertEquals(mdFormat(\"JavaScript\", \"b\"), \"**JavaScript**\")",
			"Test.assertEquals(mdFormat(\"Python\", \"i\"), \"_Python_\")",
			"Test.assertEquals(mdFormat(\"C++\", \"c\"), \"`C++`\")",
			"Test.assertEquals(mdFormat(\"Strikethrough\", \"s\"), \"~~Strikethrough~~\")"
		],
		"starterFn": [
			"1\nfunction mdFormat(word, style) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yxqTdf5a2PCbGKo9M"
	},
	{
		"title": "Return First and Last Parameter",
		"description": "<p><span>Write two functions:</span></p><ol><li><code>firstArg()</code><span> should return the first parameter passed in.</span></li><li><code>lastArg()</code><span> should return the last parameter passed in.</span></li></ol><h3><span>Examples</span></h3><pre><code>firstArg(1, 2, 3) ➞ 1\n\nlastArg(1, 2, 3) ➞ 3\n\nfirstArg(8) ➞ 8\n\nlastArg(8) ➞ 8</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>undefined</code><span> if the function takes no parameters.</span></li><li><span>If the function only takes in one parameter, the </span><code>firstArg</code><span> and </span><code>lastArg</code><span> functions should return the same value.</span></li><li><span>JavaScript has an </span><code>arguments</code><span> object which keeps track of the parameters being passed in. Check the </span><strong><span>Resources</span></strong><span> tab to learn more.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(firstArg(1, 2, 3), 1)",
			"Test.assertEquals(firstArg('a', 'b', 'c'), 'a')",
			"Test.assertEquals(firstArg(8), 8)",
			"Test.assertEquals(firstArg(), undefined)",
			"Test.assertEquals(lastArg(1, 2, 3), 3)",
			"Test.assertEquals(lastArg('a', 'b', 'c'), 'c')",
			"Test.assertEquals(lastArg(8), 8)",
			"Test.assertEquals(lastArg(), undefined)"
		],
		"starterFn": [
			"1\nfunction firstArg() {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction lastArg() {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/ypgJXTXaaSwrFyoTk"
	},
	{
		"title": "Even Number Generator",
		"description": "<p><span>Create a function that finds all even numbers from </span><code>1</code><span> to the given number.</span></p><h3><span>Examples</span></h3><pre><code>findEvenNums(8) ➞ [2, 4, 6, 8]\n\nfindEvenNums(4) ➞ [2, 4]\n\nfindEvenNums(2) ➞ [2]</code></pre><h3><span>Notes</span></h3><p><span>If there are no even numbers, return an empty array.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(findEvenNums(4), [2, 4])",
			"Test.assertSimilar(findEvenNums(8), [2, 4 ,6, 8])",
			"Test.assertSimilar(findEvenNums(2), [2])",
			"Test.assertSimilar(findEvenNums(1), [])",
			"Test.assertSimilar(findEvenNums(9), [2, 4 ,6, 8])",
			"Test.assertSimilar(findEvenNums(11), [2, 4 ,6, 8, 10])"
		],
		"starterFn": [
			"1\nfunction findEvenNums(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dNZmjoi3Lip2j4emx"
	},
	{
		"title": "Little Dictionary",
		"description": "<p><span>Create a function that takes in an initial word and filters out an array which contains words that start with the same letters as the initial word.</span></p><h3><span>Examples</span></h3><pre><code>dictionary(\"bu\", [\"button\", \"breakfast\", \"border\"]) ➞ [\"button\"]\n\ndictionary(\"tri\", [\"triplet\", \"tries\", \"trip\", \"piano\", \"tree\"]) ➞ [\"triplet\", \"tries\", trip\"]\n\ndictionary(\"beau\", [\"pastry\", \"delicious\", \"name\", \"boring\"]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If none of the words match, return an empty array.</span></li><li><span>Keep the filtered array in the same relative order as the original array of words.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(dictionary('bu', ['button', 'breakfast', 'border']), ['button'])",
			"Test.assertSimilar(dictionary('beau', ['pastry', 'delicious', 'name', 'boring']), [])",
			"Test.assertSimilar(dictionary('there', ['there', 'here', 'everywhere']), ['there'])",
			"Test.assertSimilar(dictionary('sno', ['snow', 'paper', 'ghost']), ['snow'])",
			"Test.assertSimilar(dictionary('ma', ['marriage', 'married', 'many', 'delight']), ['marriage', 'married', 'many'])",
			"Test.assertSimilar(dictionary('no', ['inferno', 'notion', 'nominate', 'note', 'fairy']), ['notion', 'nominate', 'note'])",
			"Test.assertSimilar(dictionary('cre', ['creating', 'creature', 'creed', 'increasing']), ['creating', 'creature', 'creed'])"
		],
		"starterFn": [
			"1\nfunction dictionary(initial, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/p5xNwq2v9ZX7vo3mb"
	},
	{
		"title": "Re-Form the Word",
		"description": "<p><span>A word has been split into a </span><code>left</code><span> part and a </span><code>right</code><span> part. Re-form the word by adding both halves together, changing the </span><em><span>first</span></em><span> character to an uppercase letter.</span></p><h3><span>Examples</span></h3><pre><code>getWord(\"seas\", \"onal\") ➞ \"Seasonal\"\n\ngetWord(\"comp\", \"lete\") ➞ \"Complete\"\n\ngetWord(\"lang\", \"uage\") ➞ \"Language\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getWord(\"maga\", \"zine\"), \"Magazine\")",
			"Test.assertEquals(getWord(\"reli\", \"able\"), \"Reliable\")",
			"Test.assertEquals(getWord(\"impl\", \"icit\"), \"Implicit\")",
			"Test.assertEquals(getWord(\"docu\", \"ment\"), \"Document\")",
			"Test.assertEquals(getWord(\"oppo\", \"site\"), \"Opposite\")",
			"Test.assertEquals(getWord(\"offi\", \"cial\"), \"Official\")",
			"Test.assertEquals(getWord(\"disa\", \"gree\"), \"Disagree\")",
			"Test.assertEquals(getWord(\"acci\", \"dent\"), \"Accident\")",
			"Test.assertEquals(getWord(\"omis\", \"sion\"), \"Omission\")",
			"Test.assertEquals(getWord(\"vigo\", \"rous\"), \"Vigorous\")",
			"Test.assertEquals(getWord(\"pred\", \"ator\"), \"Predator\")",
			"Test.assertEquals(getWord(\"prog\", \"ress\"), \"Progress\")",
			"Test.assertEquals(getWord(\"inva\", \"sion\"), \"Invasion\")",
			"Test.assertEquals(getWord(\"fare\", \"well\"), \"Farewell\")",
			"Test.assertEquals(getWord(\"majo\", \"rity\"), \"Majority\")",
			"Test.assertEquals(getWord(\"pers\", \"onal\"), \"Personal\")",
			"Test.assertEquals(getWord(\"sequ\", \"ence\"), \"Sequence\")",
			"Test.assertEquals(getWord(\"gove\", \"rnor\"), \"Governor\")",
			"Test.assertEquals(getWord(\"igno\", \"rant\"), \"Ignorant\")",
			"Test.assertEquals(getWord(\"fini\", \"shed\"), \"Finished\")"
		],
		"starterFn": [
			"1\nfunction getWord(left, right) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KQQ7RMXjSK257GQgy"
	},
	{
		"title": "Check if the Same Case",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if an input string contains only uppercase or only lowercase letters.</span></p><h3><span>Examples</span></h3><pre><code>sameCase(\"hello\") ➞ true\n\nsameCase(\"HELLO\") ➞ true\n\nsameCase(\"Hello\") ➞ false\n\nsameCase(\"ketcHUp\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sameCase(\"HELLO\"), true)",
			"Test.assertEquals(sameCase(\"HEllo\"), false)",
			"Test.assertEquals(sameCase(\"mArmALadE\"), false)",
			"Test.assertEquals(sameCase(\"marmalade\"), true)",
			"Test.assertEquals(sameCase(\"MARMALADE\"), true)",
			"Test.assertEquals(sameCase(\"ketchUP\"), false)",
			"Test.assertEquals(sameCase(\"pickle\"), true)",
			"Test.assertEquals(sameCase(\"MUSTARD\"), true)"
		],
		"starterFn": [
			"1\nfunction sameCase(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TDpT9tvwJK5uLn98h"
	},
	{
		"title": "Repeat the Same Item Multiple Times",
		"description": "<p><span>Create a function that takes two arguments </span><code>(item, times)</code><span>. The first argument (</span><code>item</code><span>) is the item that needs repeating while the second argument (</span><code>times</code><span>) is the number of times the item is to be repeated. Return the result in an array.</span></p><h3><span>Examples</span></h3><pre><code>repeat(\"edabit\", 3) ➞ [\"edabit\", \"edabit\", \"edabit\"]\n\nrepeat(13, 5) ➞ [13, 13, 13, 13, 13]\n\nrepeat(\"7\", 2) ➞ [\"7\", \"7\"]\n\nrepeat(0, 0) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><code>item</code><span> can be either a string or a number.</span></li><li><code>times</code><span> will always be a number.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(repeat(\"edabit\", 3), [\"edabit\", \"edabit\", \"edabit\"]);",
			"Test.assertSimilar(repeat(13, 5), [13, 13, 13, 13, 13]);",
			"Test.assertSimilar(repeat(\"7\", 2),  [\"7\", \"7\"]);",
			"Test.assertSimilar(repeat(\"2 0 1 8\", 1), [\"2 0 1 8\"]);",
			"Test.assertSimilar(repeat(\"tom dick and harry\", 6), [\"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\", \"tom dick and harry\"]);",
			"Test.assertSimilar(repeat(0, 1), [0]);",
			"Test.assertSimilar(repeat(0, 0), []);",
			"Test.assertSimilar(repeat(\"z\", 0), []);"
		],
		"starterFn": [
			"1\nfunction repeat(item, times) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BEHiM4RTmhcLX7Cq6"
	},
	{
		"title": "Generate a Countdown of Numbers in an Array",
		"description": "<p><span>Create a function that takes a number as an argument and returns an array of numbers counting down from this number to zero.</span></p><h3><span>Examples</span></h3><pre><code>countdown(5) ➞ [5, 4, 3, 2, 1, 0]\n\ncountdown(1) ➞ [1, 0]\n\ncountdown(0) ➞ [0]</code></pre><h3><span>Notes</span></h3><p><span>The argument will always be greater than or equal to zero.</span></p>",
		"publishedBy": "Peter Flynn",
		"publishedByUrl": "https://edabit.com/user/wkxYjg28PC4xdWH69",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(countdown(3), [3, 2, 1, 0])",
			"Test.assertSimilar(countdown(20), [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])",
			"Test.assertSimilar(countdown(1), [1, 0])",
			"Test.assertSimilar(countdown(0), [0])"
		],
		"starterFn": [
			"1\nfunction countdown(start) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xr4Xf28xeSrc7XmCF"
	},
	{
		"title": "After N Months...",
		"description": "<p><span>Create a function that takes in </span><code>year</code><span> and </span><code>months</code><span> as input, then return what year it would be after n-months has elapsed.</span></p><h3><span>Examples</span></h3><pre><code>afterNMonths(2020, 24) ➞ 2022\n\nafterNMonths(1832, 2) ➞ 1832\n\nafterNMonths(1444, 60) ➞ 1449</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume that adding 12 months will always increment the year by 1.</span></li><li><span>If no value is given for </span><code>year</code><span> or </span><code>months</code><span>, return </span><code>\"year missing\"</code><span> or </span><code>\"month missing\"</code><span>.</span></li><li><span>At least one value will be present.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(afterNMonths(2020, 24), 2022)",
			"Test.assertEquals(afterNMonths(1832, 2), 1832)",
			"Test.assertEquals(afterNMonths(1444, 60), 1449)",
			"Test.assertEquals(afterNMonths(2020, undefined), \"month missing\")",
			"Test.assertEquals(afterNMonths(undefined, 2), \"year missing\")",
			"Test.assertEquals(afterNMonths(1444, 65), 1449)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction afterNMonths(year, months) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wF7PQGqevdvv6Fu24"
	},
	{
		"title": "Fix the Error: Mutating Arrays",
		"description": "<p><span>Suppose I want to define a function that removes the last element of an array each time I call it, but </span><strong><span>does not mutate the original array</span></strong><span>. Fix the code so that the results are no longer mutating the array.</span></p><pre><code>function minusOne(arr) {\n  arr.pop()\n  return arr\n}</code></pre><h3><span>Examples</span></h3><pre><code>x = [1, 2, 3, 4, 5]\nminusOne(x) ➞ [1, 2, 3, 4]  // 1st time function is called.\nminusOne(x) ➞ [1, 2, 3]  // 2nd time function is called.\nminusOne(x) ➞ [1, 2]  // 3rd time function is called.\nminusOne(x) ➞ [1]  // 4th time function is called.\n\n// What I want instead:\nminusOne(x) ➞ [1, 2, 3, 4]  // 1st time function is called.\nminusOne(x) ➞ [1, 2, 3, 4]  // 2nd time function is called.\nminusOne(x) ➞ [1, 2, 3, 4]  // 3rd time function is called.\nminusOne(x) ➞ [1, 2, 3, 4]  // 4th time function is called.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs"
		],
		"tests": [
			"x = [1, 2, 3, 4, 5]",
			"Test.assertSimilar(minusOne(x), [1, 2, 3, 4])",
			"Test.assertSimilar(minusOne(x), [1, 2, 3, 4])",
			"Test.assertSimilar(minusOne(x), [1, 2, 3, 4])",
			"Test.assertSimilar(minusOne(x), [1, 2, 3, 4])",
			"Test.assertSimilar(minusOne(x), [1, 2, 3, 4])"
		],
		"starterFn": [
			"1\n// Fix this incorrect code, so that all tests pass!",
			"2\nfunction minusOne(arr) {",
			"3\n  arr.pop()",
			"4\n  return arr",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/j3EoCMaD3LrEYtx78"
	},
	{
		"title": "Hurdle Jump",
		"description": "<p><span>Create a function that takes an array of hurdle heights and a jumper's jump height, and determine whether or not the hurdler can clear all the hurdles.</span></p><p><span>A hurdler can clear a hurdle if their jump height is </span><strong><span>greater than or equal to</span></strong><span> the hurdle height.</span></p><h3><span>Examples</span></h3><pre><code>hurdleJump([1, 2, 3, 4, 5], 5) ➞ true\n\nhurdleJump([5, 5, 3, 4, 5], 3) ➞ false\n\nhurdleJump([5, 4, 5, 6], 10) ➞ true\n\nhurdleJump([1, 2, 1], 1) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>true</code><span> for the edge case of an empty array of hurdles. (Zero hurdles means that any jump height can clear them).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"control_flow",
			"validation"
		],
		"tests": [
			"Test.assertEquals(hurdleJump([1, 2, 3, 4, 5], 5), true)",
			"Test.assertEquals(hurdleJump([5, 5, 3, 4, 5], 3), false)",
			"Test.assertEquals(hurdleJump([5, 4, 5, 6], 10), true)",
			"Test.assertEquals(hurdleJump([1,2,1], 1), false)",
			"Test.assertEquals(hurdleJump([3,3,3], 4), true)",
			"Test.assertEquals(hurdleJump([4,4], 3), false)",
			"Test.assertEquals(hurdleJump([], 4), true)"
		],
		"starterFn": [
			"1\nfunction hurdleJump(hurdles, jumpHeight) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Hp9FitGXpKqdCW6Fd"
	},
	{
		"title": "Toy Car Workshop",
		"description": "<p><span>You work in a toy car workshop, and your job is to build toy cars from a collection of parts. Each toy car needs 4 wheels, 1 car body, and 2 figures of people to be placed inside. Given the total number of wheels, car bodies and figures available, how many </span><em><span>complete</span></em><span> toy cars can you make?</span></p><h3><span>Examples</span></h3><pre><code>cars(2, 48, 76) ➞ 0\n# 2 wheels, 48 car bodies, 76 figures\n\ncars(43, 15, 87) ➞ 10\n\ncars(88, 37, 17) ➞ 8</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"math"
		],
		"tests": [
			"Test.assertEquals(cars(37, 15, 20), 9)",
			"Test.assertEquals(cars(72, 7, 21), 7)",
			"Test.assertEquals(cars(9, 44, 34), 2)",
			"Test.assertEquals(cars(50, 38, 7), 3)",
			"Test.assertEquals(cars(68, 9, 44), 9)",
			"Test.assertEquals(cars(3, 29, 54), 0)",
			"Test.assertEquals(cars(28, 34, 80), 7)",
			"Test.assertEquals(cars(88, 50, 83), 22)",
			"Test.assertEquals(cars(66, 18, 21), 10)",
			"Test.assertEquals(cars(97, 6, 10), 5)",
			"Test.assertEquals(cars(921, 310, 350), 175)",
			"Test.assertEquals(cars(736, 430, 851), 184)",
			"Test.assertEquals(cars(405, 379, 740), 101)",
			"Test.assertEquals(cars(593, 78, 389), 78)",
			"Test.assertEquals(cars(875, 370, 675), 218)",
			"Test.assertEquals(cars(863, 274, 203), 101)",
			"Test.assertEquals(cars(959, 331, 537), 239)",
			"Test.assertEquals(cars(416, 340, 551), 104)",
			"Test.assertEquals(cars(692, 348, 543), 173)",
			"Test.assertEquals(cars(527, 412, 951), 131)"
		],
		"starterFn": [
			"1\nfunction cars(wheels, bodies, figures) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/shnvMjHpw49dinaJt"
	},
	{
		"title": "ES6: Destructuring Objects I",
		"description": "<p><span>In JavaScript, you can do basic object assignment like this:</span></p><pre><code>const obj =  { one : 1, two : 2 }\n\nlet one = obj.one\nlet two = obj.two</code></pre><p><span>However, with ES6 you can assign the variables in a much more succinct way. Use ES6 object destructuring to assign variables one and two to </span><code>obj.one</code><span> and </span><code>obj.two</code><span> respectively.</span></p><p><span>Although you can use </span><code>let</code><span>, </span><code>var</code><span>, or </span><code>const</code><span> for assignment, </span><strong><span>DO NOT</span></strong><span> use these in this challenge.</span></p><h3><span>Notes</span></h3><ul><li><span>Ignore the backticks </span><strong><span>`</span><span>`</span></strong><span> (used for validation).</span></li><li><span>Ignore the </span><code>.toString()</code><span> function (used for validation).</span></li><li><span>If you know how to use object destructuring, go ahead and complete the challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab for examples and then come back to try the challenge.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"const validString = (str) => {",
			"  return /\\{.*(one).*(two).*\\}.*\\=/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			" ",
			"Test.assertEquals(validString(str), \"valid\", \"You must use the object destructuring to assign variables one and two\")",
			"Test.assertEquals(one, 1, \"The variable one must equal 1\")",
			"Test.assertEquals(two, 2, \"The variable two must equal 2\")"
		],
		"starterFn": [
			"1\nlet str = `( /* create assignments here */ = { one : 1, two : 2}).toString()`"
		],
		"url": "https://edabit.com/challenge/JyJZbgLZCdYE4uYgC"
	},
	{
		"title": "Minimum Removals to Make Sum Even",
		"description": "<p><span>Create a function that returns the minimum number of removals to make the sum of all elements in an array even.</span></p><h3><span>Examples</span></h3><pre><code>minimumRemovals([1, 2, 3, 4, 5]) ➞ 1\n\nminimumRemovals([5, 7, 9, 11]) ➞ 0\n\nminimumRemovals([5, 7, 9, 12]) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>If the sum is already even, return </span><code>0</code><span> (see example #2).</span></li><li><span>The output will be either </span><code>0</code><span> or </span><code>1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"loops"
		],
		"tests": [
			"Test.assertEquals(minimumRemovals([1, 2, 3, 4, 5]), 1)",
			"Test.assertEquals(minimumRemovals([5, 7, 9, 11]), 0)",
			"Test.assertEquals(minimumRemovals([5, 7, 9, 12]), 1)",
			"Test.assertEquals(minimumRemovals([5, 8, 8, 8]), 1)",
			"Test.assertEquals(minimumRemovals([5, 8, 8, 8, 9, 9]), 1)",
			"Test.assertEquals(minimumRemovals([9, 8, 8, 8, 9, 9]), 1)",
			"Test.assertEquals(minimumRemovals([5, 5, 4, 4, 3, 3]), 0)",
			"Test.assertEquals(minimumRemovals([5, 3, 4, 4, 3]), 1)",
			"Test.assertEquals(minimumRemovals([5, 3, 4, 4, 0]), 0)"
		],
		"starterFn": [
			"1\nfunction minimumRemovals(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/exMRkWdmmc6hccYiS"
	},
	{
		"title": "Product of All Odd Integers",
		"description": "<p><span>Create a function that returns the product of all odd integers in an array.</span></p><h3><span>Examples</span></h3><pre><code>oddProduct([3, 4, 1, 1, 5]) ➞ 15\n\noddProduct([5, 5, 8, 2, 4, 32]) ➞ 25\n\noddProduct([1, 2, 1, 2, 1, 2, 1, 2]) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(oddProduct([3, 4, 1, 1, 5]), 15)",
			"Test.assertEquals(oddProduct([5, 5, 8, 2, 4, 32]), 25)",
			"Test.assertEquals(oddProduct([1, 2, 1, 2, 1, 2, 1, 2]), 1)",
			"Test.assertEquals(oddProduct([0, 0, 0, 1]), 1)",
			"Test.assertEquals(oddProduct([1, 2, 2, 5, 2, 0]), 5)"
		],
		"starterFn": [
			"1\nfunction oddProduct(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4LnwAC3kgTctc7r3k"
	},
	{
		"title": "Is Sam with Frodo?",
		"description": "<p><span>Sam and Frodo need to be close. If they are side by side in the array, your function should return </span><code>true</code><span>. If there is a name between them, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>middleEarth([\"Frodo\", \"Sam\", \"Gandalf\"]) ➞ true\n\nmiddleEarth([\"Frodo\", \"Saruman\", \"Sam\"]) ➞ false\n\nmiddleEarth([\"Orc\", \"Sam\", \"Frodo\", \"Legolas\"]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>No matter who comes first, the result must be </span><code>true</code><span> if Frodo and Sam are side by side.</span></li><li><span>There is only one Sam and one Frodo in the array.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(middleEarth(['Frodo', 'Sam', 'Gandalf']), true)",
			"Test.assertEquals(middleEarth(['Orc', 'Sam', 'Gandalf', 'Frodo']), false)",
			"Test.assertEquals(middleEarth(['Sam', 'Frodo', 'Saruman']), true)",
			"Test.assertEquals(middleEarth(['Orc', 'Frodo', 'Legolas', 'Sam', 'Bilbo']), false)",
			"Test.assertEquals(middleEarth(['Aragorn', 'Gandalf', 'Sam', 'Frodo', 'Gollum']), true)",
			"Test.assertEquals(middleEarth(['Arwen', 'Sam', 'Gandalf', 'Frodo', 'Boromir']), false)",
			"Test.assertEquals(middleEarth(['Faramir', 'Frodo', 'Sam', 'Galadriel']), true)",
			"Test.assertEquals(middleEarth(['Eowin', 'Gimli', 'Bilbo', 'Frodo', 'Sam', 'Sauron']), true)",
			"Test.assertEquals(middleEarth(['Gandalf', 'Sam', 'Bilbo', 'Legolas', 'Frodo']), false)",
			"Test.assertEquals(middleEarth(['Legolas', 'Eowyn', 'Gandalf', 'Sam', 'Frodo', 'Gimli']), true)"
		],
		"starterFn": [
			"1\nfunction middleEarth(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZqxDxzZK6Fm9uW6MF"
	},
	{
		"title": "Hamming Distance",
		"description": "<p><strong><span>Hamming distance</span></strong><span> is the number of characters that differ between two strings.</span></p><p><span>To illustrate:</span></p><pre><code>String1: \"abcbba\"\nString2: \"abcbda\"\n\nHamming Distance: 1 - \"b\" vs. \"d\" is the only difference.</code></pre><p><span>Create a function that computes the </span><strong><span>hamming distance</span></strong><span> between two strings.</span></p><h3><span>Examples</span></h3><pre><code>hammingDistance(\"abcde\", \"bcdef\") ➞ 5\n\nhammingDistance(\"abcde\", \"abcde\") ➞ 0\n\nhammingDistance(\"strong\", \"strung\") ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>Both strings will have the same length.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings"
		],
		"tests": [
			"Test.assertEquals(hammingDistance(\"abcde\", \"bcdef\"), 5)",
			"Test.assertEquals(hammingDistance(\"abcde\", \"abcde\"), 0)",
			"Test.assertEquals(hammingDistance(\"strong\", \"strung\"), 1)"
		],
		"starterFn": [
			"1\nfunction hammingDistance(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vCtepsfrE7Nts2a9j"
	},
	{
		"title": "Between Words",
		"description": "<p><span>Write a function that takes three string arguments (</span><code>first</code><span>, </span><code>last</code><span>, and </span><code>word</code><span>) and returns </span><code>true</code><span> if </span><code>word</code><span> is found between </span><code>first</code><span> and </span><code>last</code><span> in the dictionary, otherwise </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>isBetween(\"apple\", \"banana\", \"azure\") ➞ true\n\nisBetween(\"monk\", \"monument\", \"monkey\") ➞ true\n\nisBetween(\"bookend\", \"boolean\", \"boost\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>All letters will be in lowercase.</span></li><li><span>All three words will be different.</span></li><li><span>Remember that the string </span><code>word</code><span> is in the middle.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isBetween(\"apple\", \"banana\", \"azure\"), true)",
			"Test.assertEquals(isBetween(\"bookcase\", \"zebra\", \"squid\"), true)",
			"Test.assertEquals(isBetween(\"shrapnel\", \"tapenade\", \"tally\"), true)",
			"Test.assertEquals(isBetween(\"monk\", \"monument\", \"monkey\"), true)",
			"Test.assertEquals(isBetween(\"oath\", \"ostrich\", \"osteoporosis\"), true)",
			"Test.assertEquals(isBetween(\"ostracize\", \"ostrich\", \"open\"), false)",
			"Test.assertEquals(isBetween(\"bookend\", \"boolean\", \"boost\"), false)",
			"Test.assertEquals(isBetween(\"tamer\", \"tanner\", \"timid\"), false)",
			"Test.assertEquals(isBetween(\"rhino\", \"sorcerer\", \"quote\"), false)",
			"Test.assertEquals(isBetween(\"body\", \"lung\", \"ace\"), false)"
		],
		"starterFn": [
			"1\nfunction isBetween(first, last, word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/j63YSGGK9xoLiXCKF"
	},
	{
		"title": "Fix the Error / Comparing Arrays (Part #2)",
		"description": "<p><span>Create a function that returns true if two arrays sharing the same length have identical numerical values at every index, and false otherwise.</span></p><p><span>To solve this question, your friend initially wrote the following code (see </span><a target=\"_blank\" href=\"https://edabit.com/challenge/3jZyJTfsXTXXwAQkA\"><span>this</span></a><span> challenge):</span></p><pre><code class=\"language-js\">function checkEquals(arr1, arr2) {\n  if (arr1 === arr2) {\n    return true\n   } else {\n    return false\n   }\n}</code></pre><p><span>If you're unsure why the above code doesn't work, I recommend doing that challenge first.</span></p><p><span>Your friend did some more research and he fixed the code into the following:</span></p><pre><code class=\"language-js\">function checkEquals(arr1, arr2) {\n  if (arr1.join(\"\") === arr2.join(\"\")) {\n    return true\n   } else {\n    return false\n   }\n}</code></pre><p><span>It works in most cases, but on some cases it fails. \nThis confuses him, can you spot the error and fix it?</span></p><h3><span>Examples</span></h3><pre><code>checkEquals([1, 2], [1, 3]) ➞ false\n\ncheckEquals([1, 2], [1, 2]) ➞ true\n\ncheckEquals([4, 5, 6], [4, 5, 6]) ➞ true\n\ncheckEquals([4, 7, 6], [4, 5, 6]) ➞ false\n\ncheckEquals([1, 12], [11, 2]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Zimmah",
		"publishedByUrl": "https://edabit.com/user/oFckF5bB5dGBQKneS",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs",
			"validation"
		],
		"tests": [
			"// JavaScript",
			"// test cases",
			"let actual = [checkEquals([1, 2], [1, 2]), checkEquals([1, 2], [1, 3]), ",
			"             checkEquals([11, 2], [1, 12]), checkEquals([34, 56, 98], [34, 56, 98]),",
			"             checkEquals([1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7], [11, 12, 13, 14, 15, 16, 17]),",
			"             checkEquals([11, 12, 15, 16, 19], [11, 13, 15, 1, 6, 19, 20]), ",
			"              checkEquals([11, 12, 13, 14, 15, 16], [11, 12, 13, 14, 15, 16]), checkEquals([123, 45, 6, 78, 90], [1234, 5678, 90]),",
			"             checkEquals([23, 26, 78, 934], [94, 26, 78, 934]), checkEquals([], []),",
			"             checkEquals([9, 87, 1, 23], [98, 7, 12, 3])]",
			"​",
			"// results",
			"let expected = [true, false, false, true, false, false, true, false, false, true, false]",
			"​",
			"// messages",
			"let message = [\"\", \"\", \"Are you sure this is true?\", \"\", \"Should return false\", \"\", \"\", \"\", \"\", \"\", \"\"]",
			"​",
			"// run tests",
			"for (i in actual){",
			"  Test.assertEquals(actual[i], expected[i], message[i])",
			"}"
		],
		"starterFn": [
			"1\n// Fix this code",
			"2\nfunction checkEquals(arr1, arr2) {",
			"3\n  if (arr1.join(\"\") === arr2.join(\"\")) {",
			"4\n    return true",
			"5\n  } else {",
			"6\n    return false",
			"7\n  }",
			"8\n}"
		],
		"url": "https://edabit.com/challenge/MWRiXba7bvi792SmQ"
	},
	{
		"title": "Repeating Letters N Times",
		"description": "<p><span>Create a function that repeats each character in a string </span><strong><span>n</span></strong><span> times.</span></p><h3><span>Examples</span></h3><pre><code>repeat(\"mice\", 5) ➞ \"mmmmmiiiiiccccceeeee\"\n\nrepeat(\"hello\", 3) ➞ \"hhheeellllllooo\"\n\nrepeat(\"stop\", 1) ➞ \"stop\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(repeat(\"mice\", 5), \"mmmmmiiiiiccccceeeee\")",
			"Test.assertEquals(repeat(\"hello\", 3), \"hhheeellllllooo\")",
			"Test.assertEquals(repeat(\"stop\", 1), \"stop\")",
			"Test.assertEquals(repeat(\"tomato\", 2), \"ttoommaattoo\")"
		],
		"starterFn": [
			"1\nfunction repeat(str, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pggD9dH8Nwuac7fPE"
	},
	{
		"title": "Radian to Degree",
		"description": "<p><span>Create a function that takes an angle in radians and converts it into degrees.</span></p><h3><span>Examples</span></h3><pre><code>toDegree(Math.PI) ➞ 180\n\ntoDegree(Math.PI/2) ➞ 90\n\ntoDegree(Math.PI/4) ➞ 45</code></pre><h3><span>Notes</span></h3><ul><li><span>The input angles are  in radians.</span></li><li><span>Check out the resource tab.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(toDegree(2 * Math.PI), 360)",
			"Test.assertEquals(toDegree(Math.PI), 180)",
			"Test.assertEquals(toDegree(Math.PI / 2), 90)",
			"Test.assertEquals(toDegree(Math.PI / 4), 45)",
			"Test.assertEquals(toDegree(Math.PI / 3), 60)"
		],
		"starterFn": [
			"1\nfunction toDegree(radian) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7qWn4T684guHKqQvm"
	},
	{
		"title": "State Names and Abbreviations",
		"description": "<p><span>Create a function that filters out an array of state names into two categories based on the second parameter.</span></p><ol><li><span>Abbreviations </span><code>abb</code></li><li><span>Full names </span><code>full</code></li></ol><h3><span>Examples</span></h3><pre><code>filterStateNames([\"Arizona\", \"CA\", \"NY\", \"Nevada\"], \"abb\")\n➞ [\"CA\", \"NY\"]\n\nfilterStateNames([\"Arizona\", \"CA\", \"NY\", \"Nevada\"], \"full\")\n➞ [\"Arizona\", \"Nevada\"]\n\nfilterStateNames([\"MT\", \"NJ\", \"TX\", \"ID\", \"IL\"], \"abb\")\n➞ [\"MT\", \"NJ\", \"TX\", \"ID\", \"IL\"]\n\nfilterStateNames([\"MT\", \"NJ\", \"TX\", \"ID\", \"IL\"], \"full\")\n➞ []</code></pre><h3><span>Notes</span></h3><p><span>State abbreviations will always be in uppercase.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(filterStateNames(['Arizona', 'CA', 'NY', 'Nevada'], 'abb'), ['CA', 'NY'])",
			"Test.assertSimilar(filterStateNames(['Arizona', 'CA', 'NY', 'Nevada'], 'full'), ['Arizona', 'Nevada'])",
			"Test.assertSimilar(filterStateNames(['MT', 'NJ', 'TX', 'ID', 'IL'], 'abb'), ['MT', 'NJ', 'TX', 'ID', 'IL'])",
			"Test.assertSimilar(filterStateNames(['MT', 'NJ', 'TX', 'ID', 'IL'], 'full'), [])",
			"Test.assertSimilar(filterStateNames(['Montana', 'FL'], 'abb'), ['FL'])",
			"Test.assertSimilar(filterStateNames(['Montana', 'FL'], 'full'), ['Montana'])"
		],
		"starterFn": [
			"1\nfunction filterStateNames(arr, type) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8fnEAEj5vKNqAXNYA"
	},
	{
		"title": "Array from Comma-Delimited String",
		"description": "<p><span>Write a function that turns a comma-delimited list into an array of strings.</span></p><h3><span>Examples</span></h3><pre><code>toArray(\"watermelon, raspberry, orange\")\n➞ [\"watermelon\", \"raspberry\", \"orange\"]\n\ntoArray(\"x1, x2, x3, x4, x5\")\n➞ [\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"]\n\ntoArray(\"a, b, c, d\")\n➞ [\"a\", \"b\", \"c\", \"d\"]\n\ntoArray(\"\")\n➞ []</code></pre><h3><span>Notes</span></h3><p><span>Return an empty array for an empty string.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings"
		],
		"tests": [
			"Test.assertSimilar(toArray(\"watermelon, raspberry, orange\"), [\"watermelon\", \"raspberry\", \"orange\"])",
			"Test.assertSimilar(toArray(\"x1, x2, x3, x4, x5\"), [\"x1\", \"x2\", \"x3\", \"x4\", \"x5\"])",
			"Test.assertSimilar(toArray(\"a, b, c, d\"), [\"a\", \"b\", \"c\", \"d\"])",
			"Test.assertSimilar(toArray(\"\"), [])"
		],
		"starterFn": [
			"1\nfunction toArray(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LHTF9ij2FtvwhnzQF"
	},
	{
		"title": "Even Odd Partition",
		"description": "<p><span>Write a function that partitions the array into two subarrays: one with all even integers, and the other with all odd integers. Return your result in the following format:</span></p><pre><code>[[evens], [odds]]</code></pre><h3><span>Examples</span></h3><pre><code>evenOddPartition([5, 8, 9, 2, 0]) ➞ [[8, 2, 0], [5, 9]]\n\nevenOddPartition([1, 0, 1, 0, 1, 0]) ➞ [[0, 0, 0], [1, 1, 1]]\n\nevenOddPartition([1, 3, 5, 7, 9]) ➞ [[], [1, 3, 5, 7, 9]]\n\nevenOddPartition([]) ➞ [[], []]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return two empty subarrays if the input is an empty array.</span></li><li><span>Keep the same relative ordering as the original array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(evenOddPartition([5, 8, 9, 2, 0]), [[8, 2, 0], [5, 9]])",
			"Test.assertSimilar(evenOddPartition([1, 0, 1, 0, 1, 0]), [[0, 0, 0], [1, 1, 1]])",
			"Test.assertSimilar(evenOddPartition([8, 8, 4, 2]), [[8, 8, 4, 2], []])",
			"Test.assertSimilar(evenOddPartition([1, 3, 5, 7, 9]), [[], [1, 3, 5, 7, 9]])",
			"Test.assertSimilar(evenOddPartition([]), [[], []])"
		],
		"starterFn": [
			"1\nfunction evenOddPartition(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BsCHQ6fyzmrTYLNsR"
	},
	{
		"title": "Mirror Array",
		"description": "<p><span>Given an array, transform that array into a mirror.</span></p><h3><span>Examples</span></h3><pre><code>mirror([0, 2, 4, 6]) ➞ [0, 2, 4, 6, 4, 2, 0]\n\nmirror([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\nmirror([3, 5, 6, 7, 8]) ➞ [3, 5, 6, 7, 8, 7, 6, 5, 3]</code></pre><h3><span>Notes</span></h3><p><span>Do not repeat the last item of the given array.</span></p>",
		"publishedBy": "jesusrq92",
		"publishedByUrl": "https://edabit.com/user/K7k4qCJZ2G4q5hu8M",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(mirror([1,2,3,4,5]), [1,2,3,4,5,4,3,2,1])",
			"Test.assertSimilar(mirror([0,2,4,6]), [0,2,4,6,4,2,0])",
			"Test.assertSimilar(mirror([1,2,2,3,3,4]), [1,2,2,3,3,4,3,3,2,2,1])"
		],
		"starterFn": [
			"1\nfunction mirror(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GMh85YdL7kAutJ5YN"
	},
	{
		"title": "Recursion: Array Sum",
		"description": "<p><span>Write a function that finds the sum of an array. </span><strong><span>Make your function recursive.</span></strong></p><h3><span>Examples</span></h3><pre><code>sum([1, 2, 3, 4]) ➞ 10\n\nsum([1, 2]) ➞ 3\n\nsum([1]) ➞ 1\n\nsum([]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>0</code><span> for an empty array.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for info on recursion.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(sum([1, 2, 3, 4]), 10)",
			"Test.assertEquals(sum([-1, -1, -1]), -3)",
			"Test.assertEquals(sum([1]), 1)",
			"Test.assertEquals(sum([]), 0)"
		],
		"starterFn": [
			"1\nfunction sum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/reR3jdfJnREauJj8d"
	},
	{
		"title": "Check if a String Contains only Identical Characters",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if all characters in a string are identical and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isIdentical(\"aaaaaa\") ➞ true\n\nisIdentical(\"aabaaa\") ➞ false\n\nisIdentical(\"ccccca\") ➞ false\n\nisIdentical(\"kk\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isIdentical(\"kkkkk\"), true)",
			"Test.assertEquals(isIdentical(\"ckkkk\"), false)",
			"Test.assertEquals(isIdentical(\"kkkkck\"), false)",
			"Test.assertEquals(isIdentical(\"aabc\"), false)",
			"Test.assertEquals(isIdentical(\"ccc\"), true)",
			"Test.assertEquals(isIdentical(\"aabbbb\"), false)",
			"Test.assertEquals(isIdentical(\"bbbbbb\"), true)"
		],
		"starterFn": [
			"1\nfunction isIdentical(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bnZzPk2QuWr4w5HuZ"
	},
	{
		"title": "Letters Only",
		"description": "<p><span>Write a function that removes any non-letters from a string, returning a well-known film title.</span></p><h3><span>Examples</span></h3><pre><code>lettersOnly(\"R!=:~0o0./c&amp;}9k`60=y\") ➞ \"Rocky\"\n\nlettersOnly(\"^,]%4B|@56a![0{2m&gt;b1&amp;4i4\") ➞ \"Bambi\"\n\nlettersOnly(\"^U)6$22&gt;8p).\") ➞ \"Up\"</code></pre><h3><span>Notes</span></h3><p><span>See the </span><strong><span>Resources</span></strong><span> section for more information on JavaScript string methods.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(lettersOnly(',1|2)\")A^1<[_)?^\"]l[a`3+%!d@8-0_0d.*}i@&n?='), 'Aladdin')",
			"Test.assertEquals(lettersOnly('^U)6$22>8p).'), 'Up')",
			"Test.assertEquals(lettersOnly('I5n!449+c@e*}@@1]p{2@`,~t:i0o%n<3%8'), 'Inception')",
			"Test.assertEquals(lettersOnly('!)\"P[s9)\"69}yc3+?1]+33>3ho'), 'Psycho')",
			"Test.assertEquals(lettersOnly(':~;G{o}o{+524<df~:>}e24{l8:_l]a:?@]%s7'), 'Goodfellas')",
			"Test.assertEquals(lettersOnly('&&S~]@8>1-0!h#r),80<_>!}|e>_k:'), 'Shrek')",
			"Test.assertEquals(lettersOnly(')^/|,!!09]=/1<G2?`=[l{a}d9]^i7a0|t6_o2*r'), 'Gladiator')",
			"Test.assertEquals(lettersOnly(']8;]V9e{=0r!.5t>i<^_g\"4o\"5~'), 'Vertigo')",
			"Test.assertEquals(lettersOnly('%%)?\"?B#>/_4a#,;t8|m8675a(n'), 'Batman')",
			"Test.assertEquals(lettersOnly('97H^)~a8567ll*o?\"6%)w63e37e<n?@='), 'Halloween')"
		],
		"starterFn": [
			"1\nfunction lettersOnly(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GPKkNbytRpsAnHcrX"
	},
	{
		"title": "Say Hello to Guests",
		"description": "<p><span>In this exercise you will have to:</span></p><ul><li><span>Take a list of names.</span></li><li><span>Add \"Hello\" to every name.</span></li><li><span>Make one big string with all greetings.</span></li></ul><p><span>The solution should be one string with a comma in between every \"Hello (Name)\".</span></p><h3><span>Examples</span></h3><pre><code>greetPeople([\"Joe\"]) ➞ \"Hello Joe\"\n\ngreetPeople([\"Angela\", \"Joe\"]) ➞ \"Hello Angela, Hello Joe\"\n\ngreetPeople([\"Frank\", \"Angela\", \"Joe\"]) ➞ \"Hello Frank, Hello Angela, Hello Joe\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Each greeting has to be separated with a comma and a space.</span></li><li><span>If you're given an empty array </span><code>[]</code><span>, return an empty string </span><code>\"\"</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(greetPeople([\"Kyrill\"]),  \"Hello Kyrill\")",
			"Test.assertEquals(greetPeople([\"Kyrill\", \"Mom\", \"Dad\", \"Zuzu\"]), \"Hello Kyrill, Hello Mom, Hello Dad, Hello Zuzu\")",
			"Test.assertEquals(greetPeople([]), \"\")"
		],
		"starterFn": [
			"1\nfunction greetPeople(names) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/r9uigYABnbPLY7zsz"
	},
	{
		"title": "Older Than Me",
		"description": "<p><span>Create a </span><em><span>method</span></em><span> in the </span><code>Person</code><span> class which returns how </span><em><span>another person</span></em><span>'s age compares. Given the instances </span><code>p1</code><span>, </span><code>p2</code><span> and </span><code>p3</code><span>, which will be initialised with the attributes </span><code>name</code><span> and </span><code>age</code><span>, return a sentence in the following format:</span></p><p><strong><span> {other person name} is {older than / younger than / the same age as} me. </span></strong></p><h3><span>Examples</span></h3><pre><code>p1 = Person(\"Samuel\", 24)\np2 = Person(\"Joel\", 36)\np3 = Person(\"Lily\", 24)</code></pre><pre><code>p1.compareAge(p2) ➞ \"Joel is older than me.\"\n\np2.compareAge(p1) ➞ \"Samuel is younger than me.\"\n\np1.compareAge(p3) ➞ \"Lily is the same age as me.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Check out the </span><strong><span>Resources</span></strong><span> tab for some helpful tutorials on JavaScript classes!</span></li><li><span>If you're really stuck, check out the </span><strong><span>Solutions</span></strong><span> tab for answers.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"conditions",
			"language_fundamentals"
		],
		"tests": [
			"p1 = new Person(\"Samuel\", 24)",
			"p2 = new Person(\"Joel\", 36)",
			"p3 = new Person(\"Lily\", 24)",
			"​",
			"Test.assertEquals(p1.compareAge(p2), \"Joel is older than me.\")",
			"Test.assertEquals(p1.compareAge(p3), \"Lily is the same age as me.\")",
			"​",
			"Test.assertEquals(p2.compareAge(p1), \"Samuel is younger than me.\")",
			"Test.assertEquals(p2.compareAge(p3), \"Lily is younger than me.\")",
			"​",
			"Test.assertEquals(p3.compareAge(p1), \"Samuel is the same age as me.\")",
			"Test.assertEquals(p3.compareAge(p2), \"Joel is older than me.\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nclass Person {",
			"2\n  constructor(name, age) {",
			"3\n    this.name = name;",
			"4\n    this.age = age;",
			"5\n  }",
			"6\n​",
			"7\n  compareAge(other) {",
			"8\n    // Write code here!",
			"9\n    ",
			"10\n  }",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/iwdZiFucR5wkQsFHu"
	},
	{
		"title": "Extremely Over-Nested",
		"description": "<p><span>Create a function that returns the original value from a matrix with too many sub-arrays.</span></p><h3><span>Examples</span></h3><pre><code>deNest([[[[[[[[[[[[3]]]]]]]]]]]]) ➞ 3\n\ndeNest([[[[[[[true]]]]]]]) ➞ true\n\ndeNest([[[[[[[[[[[[[[[[[\"edabit\"]]]]]]]]]]]]]]]]]) ➞ \"edabit\"</code></pre><h3><span>Notes</span></h3><p><span>You only need to retrieve one element.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertEquals(deNest([[[[[[[[[[[[3]]]]]]]]]]]]), 3)",
			"Test.assertEquals(deNest([[[[[[[true]]]]]]]), true)",
			"Test.assertEquals(deNest([[[[[[[[[[[[[[[[['edabit']]]]]]]]]]]]]]]]]), 'edabit')",
			"Test.assertEquals(deNest([1]), 1)",
			"Test.assertEquals(deNest([[[[[[[4.3]]]]]]]), 4.3)",
			"Test.assertEquals(deNest([[[[[false]]]]]), false)",
			"Test.assertEquals(deNest([['sixty']]), 'sixty')",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction deNest(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mptt94wPwNxqJJzgr"
	},
	{
		"title": "Retrieve the Subreddit",
		"description": "<p><span>Create a function to extract the name of the subreddit from its URL.</span></p><h3><span>Examples</span></h3><pre><code>subReddit(\"https://www.reddit.com/r/funny/\") ➞ \"funny\"\n\nsubReddit(\"https://www.reddit.com/r/relationships/\") ➞ \"relationships\"\n\nsubReddit(\"https://www.reddit.com/r/mildlyinteresting/\") ➞ \"mildlyinteresting\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/relationships/\"), \"relationships\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/mildlyinteresting/\"), \"mildlyinteresting\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/funny/\"), \"funny\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/CrappyDesign/\"), \"CrappyDesign\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/confession/\"), \"confession\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/AskMen/\"), \"AskMen\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/comics/\"), \"comics\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/lifehacks/\"), \"lifehacks\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/wholesomememes/\"), \"wholesomememes\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/iamverysmart/\"), \"iamverysmart\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/starterpacks/\"), \"starterpacks\")",
			"Test.assertEquals(subReddit(\"https://www.reddit.com/r/awww/\"), \"awww\")"
		],
		"starterFn": [
			"1\nfunction subReddit(link) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WT5MGmgaP3jvx8qpt"
	},
	{
		"title": "Nth Smallest Element",
		"description": "<p><span>Given an unsorted array, create a function that returns the </span><strong><span>nth</span></strong><span> smallest element (the smallest element is the </span><strong><span>first smallest</span></strong><span>, the second smallest element is the </span><strong><span>second smallest</span></strong><span>, etc).</span></p><h3><span>Examples</span></h3><pre><code>nthSmallest([1, 3, 5, 7], 1) ➞ 1\n\nnthSmallest([1, 3, 5, 7], 3) ➞ 5\n\nnthSmallest([1, 3, 5, 7], 5) ➞ null\n\nnthSmallest([7, 3, 5, 1], 2) ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><code>n</code><span> will always be </span><strong><span>&gt;= 1</span></strong><span>.</span></li><li><span>Each number in the array will be distinct (there will be a clear ordering).</span></li><li><span>Given an out of bounds parameter (e.g. an array is of size </span><strong><span>k</span></strong><span>), and you are asked to find the </span><strong><span>m &gt; k</span></strong><span> smallest element, return </span><code>null</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"logic",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(nthSmallest([1, 3, 5, 7], 1), 1)",
			"Test.assertEquals(nthSmallest([1, 3, 5, 7], 3), 5)",
			"Test.assertEquals(nthSmallest([1, 3, 5, 7], 5), null)",
			"Test.assertEquals(nthSmallest([7, 3, 5, 1], 2), 3)",
			"Test.assertEquals(nthSmallest([5, 4, 3, 2, 1, -3], 1), -3)",
			"Test.assertEquals(nthSmallest([5, 4, 3, 2, 1, -3], 5), 4)",
			"Test.assertEquals(nthSmallest([4, 5], 3), null)",
			"Test.assertEquals(nthSmallest([4, 5], 2), 5)",
			"Test.assertEquals(nthSmallest([4, 5], 1), 4)"
		],
		"starterFn": [
			"1\nfunction nthSmallest(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/T9nCQgLQJ9Pi9a9kH"
	},
	{
		"title": "Cowboy Shootout",
		"description": "<p><span>Wild Roger is tasked with shooting down 6 bottles with 6 shots as fast as possible.\nHere are the different types of shots he could make:</span></p><ul><li><span>He could use one pistol to shoot a bottle with a </span><code>\"Bang!\"</code><span> in 0.5 seconds.</span></li><li><span>Or he could use both pistols at once with a </span><code>\"BangBang!\"</code><span> to shoot two bottles in 0.5 seconds.</span></li></ul><p><span>Given an array of strings, return the time (in seconds) it took to shoot down all 6 bottles. Make sure to </span><strong><span>only count</span></strong><span> Bangs and BangBangs. Anything else doesn't count.</span></p><h3><span>Examples</span></h3><pre><code>rogerShots([\"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\"]) ➞ 3\n\nrogerShots([\"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"BangBang!\"]) ➞ 2.5\n\nrogerShots([\"Bang!\", \"BangBangBang!\", \"Boom!\", \"Bang!\", \"BangBang!\", \"BangBang!\"]) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>All the bottles will be shot down in all the tests.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(rogerShots([\"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\"]), 3)",
			"Test.assertEquals(rogerShots([\"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"BangBang!\"]), 2.5)",
			"Test.assertEquals(rogerShots([\"Bang!\", \"BangBangBang!\", \"Boom!\", \"Bang!\", \"BangBang!\", \"BangBang!\"]), 2)",
			"Test.assertEquals(rogerShots([\"BangBang!\", \"BangBang!\", \"BangBang!\"]), 1.5)",
			"Test.assertEquals(rogerShots([\"Bang!\", \"BadaBing!\", \"Badaboom!\", \"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\", \"Bang!\"]), 3)",
			"Test.assertEquals(rogerShots([\"BangBang!\", \"BangBang!\", \"Bag!\", \"Ban!\", \"Tang!\", \"Bang!\", \"Bang!\"]), 2)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction rogerShots(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9TWhGHCeytQEBCbc9"
	},
	{
		"title": "Product Divisible by Sum?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if the </span><strong><span>product</span></strong><span> of an array is divisible by the </span><strong><span>sum</span></strong><span> of that same array. Otherwise, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>divisible([3, 2, 4, 2]) ➞ false\n\ndivisible([4, 2, 6]) ➞ true\n// 4 * 2 * 6 / 4 + 2 + 6\n\ndivisible([3, 5, 1]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(divisible([3, 2, 4, 1]), false)",
			"Test.assertEquals(divisible([4, 4, 4, 4]), true)",
			"Test.assertEquals(divisible([4, 2, 6]), true)",
			"Test.assertEquals(divisible([1, 1, 1, 1, 10]), false)",
			"Test.assertEquals(divisible([10, 5, 10]), true)",
			"Test.assertEquals(divisible([3, 5, 1]), false)"
		],
		"starterFn": [
			"1\nfunction divisible(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aJzvBZgp8nzwSk94A"
	},
	{
		"title": "Characters in Shapes",
		"description": "<p><span>Create a function that counts how many characters make up a rectangular shape. You will be given a </span><em><span>array of strings</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>countCharacters([\n  \"###\",\n  \"###\",\n  \"###\"\n]) ➞ 9\n\ncountCharacters([\n  \"22222222\",\n  \"22222222\",\n]) ➞ 16\n\ncountCharacters([\n  \"------------------\"\n]) ➞ 18\n\ncountCharacters([]) ➞ 0\n\ncountCharacters([ \"\", \"\"]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>0</code><span> if given an empty array.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countCharacters([",
			"'###',",
			"'###',",
			"'###'",
			"]), 9)",
			"​",
			"Test.assertEquals(countCharacters([",
			"'22222222',",
			"'22222222',",
			"]), 16)",
			"​",
			"Test.assertEquals(countCharacters([",
			"'------------------'",
			"]), 18)",
			"​",
			"Test.assertEquals(countCharacters([]), 0)",
			"Test.assertEquals(countCharacters([",
			"'',",
			"'']), 0)"
		],
		"starterFn": [
			"1\nfunction countCharacters(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nkp5xkZwbBH5Ape8b"
	},
	{
		"title": "Owofied a Sentence",
		"description": "<p><span>Create a function that takes a sentence and turns every \"i\" into \"wi\" and \"e\" into \"we\", and add \"owo\" at the end.</span></p><h3><span>Examples</span></h3><pre><code>owofied(\"I'm gonna ride 'til I can't no more\")\n➞ \"I'm gonna rwidwe 'twil I can't no morwe owo\"\n\nowofied(\"Do you ever feel like a plastic bag\")\n➞ \"Do you wevwer fwewel lwikwe a plastwic bag owo\"\n\nowofied(\"Cause baby you're a firework\")\n➞ \"Causwe baby you'rwe a fwirwework owo\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to return the value!</span></li><li><span>There's a </span><strong><span>space</span></strong><span> in front of </span><strong><span>owo</span></strong><span>!</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(owofied(\"I'm gonna ride 'til I can't no more\"), \"I'm gonna rwidwe 'twil I can't no morwe owo\")",
			"Test.assertEquals(owofied(\"Do you ever feel like a plastic bag\"), \"Do you wevwer fwewel lwikwe a plastwic bag owo\")",
			"Test.assertEquals(owofied(\"Cause baby you're a firework\"), \"Causwe baby you'rwe a fwirwework owo\")",
			"Test.assertEquals(owofied(\"Never gonna give you up\"), \"Nwevwer gonna gwivwe you up owo\")",
			"Test.assertEquals(owofied(\"We've known each other for so long\"), \"Wwe'vwe known weach othwer for so long owo\")",
			"Test.assertEquals(owofied(\"Never gonna let you down\"), \"Nwevwer gonna lwet you down owo\")",
			"Test.assertEquals(owofied(\"Shine bright like a diamond\"), \"Shwinwe brwight lwikwe a dwiamond owo\")"
		],
		"starterFn": [
			"1\nfunction owofied(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9kCTutboYJmRXotBj"
	},
	{
		"title": "Lexicographically First and Last",
		"description": "<p><span>Write a function that returns the </span><strong><span>lexicographically first</span></strong><span> and </span><strong><span>lexicographically last</span></strong><span> rearrangements of a string. Output the results in the following manner:</span></p><pre><code>firstAndLast(string) ➞ [first, last]</code></pre><h3><span>Examples</span></h3><pre><code>firstAndLast(\"marmite\") ➞ [\"aeimmrt\", \"trmmiea\"]\n\nfirstAndLast(\"bench\") ➞ [\"bcehn\", \"nhecb\"]\n\nfirstAndLast(\"scoop\") ➞ [\"coops\", \"spooc\"]</code></pre><h3><span>Notes</span></h3><ul><li><strong><span>Lexicographically first</span></strong><span>: the permutation of the string that would appear </span><strong><span>first</span></strong><span> in the English dictionary (if the word existed).</span></li><li><strong><span>Lexicographically last</span></strong><span>: the permutation of the string that would appear </span><strong><span>last</span></strong><span> in the English dictionary (if the word existed).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(firstAndLast(\"marmite\"), [\"aeimmrt\", \"trmmiea\"])",
			"Test.assertSimilar(firstAndLast(\"bench\"), [\"bcehn\", \"nhecb\"])",
			"Test.assertSimilar(firstAndLast(\"scoop\"), [\"coops\", \"spooc\"])",
			"Test.assertSimilar(firstAndLast(\"fanatic\"), [\"aacfint\", \"tnifcaa\"])"
		],
		"starterFn": [
			"1\nfunction firstAndLast(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/m6GYKsereS6JdARGW"
	},
	{
		"title": "Same Number of Unique Elements",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if two arrays have the same number of </span><strong><span>unique</span></strong><span> elements, and </span><code>false</code><span> otherwise.</span></p><p><span>To illustrate:</span></p><pre><code>arr1 = [1, 3, 4, 4, 4]\narr2 = [2, 5, 7]</code></pre><p><span>In </span><code>arr1</code><span>, the number </span><code>4</code><span> appears three times, which means it contains three unique elements: </span><code>[1, 3, 4]</code><span>. Since </span><code>arr1</code><span> and </span><code>arr2</code><span> both contain the same number of </span><strong><span>unique</span></strong><span> elements, this example would return </span><code>true</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>same([1, 3, 4, 4, 4], [2, 5, 7]) ➞ true\n\nsame([9, 8, 7, 6], [4, 4, 3, 1]) ➞ false\n\nsame([2], [3, 3, 3, 3, 3]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(same([1, 3, 4, 4, 4], [2, 5, 7]), true)",
			"Test.assertEquals(same([9, 8, 7, 6], [4, 4, 3, 1]), false)",
			"Test.assertEquals(same([2], [3, 3, 3, 3, 3]), true)",
			"Test.assertEquals(same([5, 6, 7, 9], [4, 1]), false)",
			"Test.assertEquals(same([5, 9, 9], [9, 5]), true)",
			"Test.assertEquals(same([1, 1, 1, 4], [1, 4, 4, 4, 4, 4]), true)",
			"Test.assertEquals(same([], []), true)"
		],
		"starterFn": [
			"1\nfunction same(a1, a2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/R6DX8wKMufT5hLRuK"
	},
	{
		"title": "RegEx: Boundary Assertions II",
		"description": "<p><span>You are given an array with random words but your program doesn't accept words that begin with the capital letter \"C\". Remove the unaccepted words and return the new array.</span></p><h3><span>Examples</span></h3><pre><code>accepted([\"Ducks\", \"Bears\",  \"Cats\"]) ➞ [\"Ducks\", \"Bears\"]\n\naccepted([\"cars\", \"trucks\", \"planes\"] ➞ [\"cars\", trucks\", \"planes\"]\n\naccepted([\"Cans\", \"Worms\", \"Bugs\", \"Cold\", \"Beans\"]) ➞ [\"Worms\", \"Bugs\", \"Beans\"]</code></pre><h3><span>Notes</span></h3><p><span>Use a RegEx boundary assertion in your function.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"regex",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(acceptedWords([\"Cans\", \"Worms\", \"Bugs\", \"Cold\", \"Beans\"]), [\"Worms\", \"Bugs\", \"Beans\"])",
			"Test.assertSimilar(acceptedWords([\"Ducks\", \"Bears\",  \"Cats\"]), [\"Ducks\", \"Bears\"])",
			"Test.assertSimilar(acceptedWords([\"cars\", \"trucks\", \"planes\"]), [\"cars\", \"trucks\", \"planes\"])"
		],
		"starterFn": [
			"1\nfunction acceptedWords(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sq7ZNMhAZ5ao8BMum"
	},
	{
		"title": "Hot Pics of Danny DeVito!",
		"description": "<p><span>I'm trying to watch some lectures to study for my next exam but I keep getting distracted by meme compilations, vine compilations, anime, and more on my favorite video platform.</span></p><p><span>Your job is to help me create a function that takes a string and checks to see if it contains the following words or phrases:</span></p><ul><li><span>\"anime\"</span></li><li><span>\"meme\"</span></li><li><span>\"vines\"</span></li><li><span>\"roasts\"</span></li><li><span>\"Danny DeVito\"</span></li></ul><p><span>If it does, return </span><code>\"NO!\"</code><span>. Otherwise, return </span><code>\"Safe watching!\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>preventDistractions(\"vines that butter my eggroll\") ➞ \"NO!\"\n\npreventDistractions(\"Hot pictures of Danny DeVito\") ➞ \"NO!\"\n\npreventDistractions(\"How to ace BC Calculus in 5 Easy Steps\") ➞ \"Safe watching!\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(preventDistractions(\"vines that butter my eggroll\"), \"NO!\")",
			"Test.assertEquals(preventDistractions(\"Hot pictures of Danny DeVito\"), \"NO!\")",
			"Test.assertEquals(preventDistractions(\"top 10 insert random yt celebrity roasts\"), \"NO!\")",
			"Test.assertEquals(preventDistractions(\"best anime food ever!\"), \"NO!\")",
			"Test.assertEquals(preventDistractions(\"How to Be a Productive Member of Society\"), \"Safe watching!\")"
		],
		"starterFn": [
			"1\nfunction preventDistractions(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QKw2Hq7JGggCQsGwQ"
	},
	{
		"title": "Smash Factor",
		"description": "<p><span>Smash factor is a term in golf that relates to the amount of energy transferred from the club head to the golf ball. The formula for calculating smash factor is </span><em><span>ball speed divided by club speed</span></em><span>.</span></p><p><span>Create a function that takes ball speed </span><code>bs</code><span> and club speed </span><code>cs</code><span> as arguments and returns the smash factor to the nearest hundredth.</span></p><h3><span>Examples</span></h3><pre><code>smashFactor(139.4, 93.8) ➞ 1.49\n\nsmashFactor(181.2, 124.5) ➞ 1.46\n\nsmashFactor(154.7, 104.3) ➞ 1.48</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to round to the nearest hundredth.</span></li><li><span>All values will be valid (so no dividing by zero).</span></li></ul>",
		"publishedBy": "Anna An",
		"publishedByUrl": "https://edabit.com/user/zMCXYFZSsviDCvjnY",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(smashFactor(139.4, 93.8), 1.49)",
			"Test.assertEquals(smashFactor(181.2, 124.5), 1.46)",
			"Test.assertEquals(smashFactor(154.7, 104.3), 1.48)"
		],
		"starterFn": [
			"1\nfunction smashFactor(bs, cs) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hJzbsCExJqCgAECX4"
	},
	{
		"title": "Fix the Error: Filtering out Empty Arrays",
		"description": "<p><span>I am trying to filter out empty arrays from an array. In other words, I want to transform something that looks like this: </span><code>[\"a\", \"b\", [], [], [1, 2, 3]]</code><span> to look like </span><code>[\"a\", \"b\", [1, 2, 3]]</code><span>. My code looks like this:</span></p><pre><code>function removeEmptyArrays(arr) {\n  return arr.filter(x =&gt; x !== [])\n}</code></pre><p><span>However, somehow, the empty arrays still exist. Fix this incorrect code to remove the empty arrays.</span></p><h3><span>Examples</span></h3><pre><code>// What I want:\nremoveEmptyArrays([\"a\", \"b\", []]) ➞ [\"a\", \"b\"]\nremoveEmptyArrays([1, 2, [], 4]) ➞ [1, 2, 4]\n\n// What I am getting:\nremoveEmptyArrays([\"a\", \"b\", []]) ➞ [\"a\", \"b\", []]\nremoveEmptyArrays([1, 2, [], 4]) ➞ [1, 2, [], 4]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs"
		],
		"tests": [
			"Test.assertSimilar(removeEmptyArrays(['a', 'b', []]), ['a', 'b'])",
			"Test.assertSimilar(removeEmptyArrays([1, 2, [], 4]), [1, 2, 4])",
			"Test.assertSimilar(removeEmptyArrays([[], [], [], []]), [])",
			"Test.assertSimilar(removeEmptyArrays([1, 2, 3, 4]), [1, 2, 3, 4])",
			"Test.assertSimilar(removeEmptyArrays([1, [], [], 4]), [1, 4])"
		],
		"starterFn": [
			"1\n// Fix this incorrect code so that all tests pass!",
			"2\nfunction removeEmptyArrays(arr) {",
			"3\n  return arr.filter(x => x !== [])",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/4weFPnpgS2S5aw4aN"
	},
	{
		"title": "Not Not Not True",
		"description": "<p><span>Something which is not true is false, but something which is not not true is true! Create a function where given </span><code>n</code><span> number of \"not\", evaluate whether it's </span><code>true</code><span> or </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>notNotNot(1, true) ➞ false\n// Not true\n\nnotNotNot(2, false) ➞ false\n// Not not false\n\nnotNotNot(6, true) ➞ true\n// Not not not not not not true</code></pre><h3><span>Notes</span></h3><p><span>Even though this challenge can be easily solved through the use of an </span><code>if | else</code><span> block, you might want to solve it through the use of a </span><strong><span>Boolean Logic Operator</span></strong><span> or a </span><strong><span>Bitwise Operator</span></strong><span>, taking the opportunity to become acquainted with these methods (check the </span><strong><span>Resources</span></strong><span> tab to find specific links).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(notNotNot(1, true), false)",
			"Test.assertEquals(notNotNot(2, false), false)",
			"Test.assertEquals(notNotNot(7, true), false)",
			"Test.assertEquals(notNotNot(7, false), true)",
			"Test.assertEquals(notNotNot(3, true), false)",
			"Test.assertEquals(notNotNot(13, true), false)",
			"Test.assertEquals(notNotNot(24, false), false)",
			"Test.assertEquals(notNotNot(6, false), false)",
			"​",
			"// Made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction notNotNot(n, bool) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ootmkgXwJPvnub862"
	},
	{
		"title": "Western Showdown",
		"description": "<p><span>Wild Roger is participating in a </span><em><span>Western Showdown</span></em><span>, meaning he has to draw (pull out and shoot) his gun faster than his opponent in a gun standoff.</span></p><p><span>Given two strings,</span><code>p1</code><span> and </span><code>p2</code><span>, return which person drew their gun the </span><strong><span>fastest</span></strong><span>. If both are drawn at </span><em><span>the same time</span></em><span>, return </span><code>\"tie\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>showdown(\n  \"   Bang!        \",\n  \"        Bang!   \"\n) ➞ \"p1\"\n\n// p1 draws his gun sooner than p2\n\nshowdown(\n  \"               Bang! \",\n  \"             Bang!   \"\n) ➞ \"p2\"\n\nshowdown(\n  \"     Bang!   \",\n  \"     Bang!   \"\n) ➞ \"tie\"</code></pre><h3><span>Notes</span></h3><p><span>Both strings are the same length.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(showdown(",
			"\"   Bang!        \",",
			"\"        Bang!   \"",
			"), \"p1\")",
			"​",
			"Test.assertEquals(showdown(",
			"\"               Bang! \",",
			"\"             Bang!   \"",
			"), \"p2\")",
			"​",
			"Test.assertEquals(showdown(",
			"\"  Bang!   \",",
			"\"Bang!     \"",
			"), \"p2\")",
			"​",
			"Test.assertEquals(showdown(",
			"\"     Bang!   \",",
			"\"     Bang!   \"",
			"), \"tie\")",
			"​",
			"Test.assertEquals(showdown(\"  Bang!     \", \"     Bang!  \"), \"p1\")",
			"Test.assertEquals(showdown(\" Bang!  \", \"  Bang! \"), \"p1\")",
			"Test.assertEquals(showdown(\"          Bang!       \", \"       Bang!          \"), \"p2\")",
			"Test.assertEquals(showdown(\"    Bang!    \", \"    Bang!    \"), \"tie\")",
			"Test.assertEquals(showdown(\"       Bang!       \", \"       Bang!       \"), \"tie\")",
			"Test.assertEquals(showdown(\" Bang!      \", \"      Bang! \"), \"p1\")"
		],
		"starterFn": [
			"1\nfunction showdown(p1, p2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9N7zA5oiu6v5nhuBm"
	},
	{
		"title": "RegEx: Special Characters",
		"description": "<p><span>Using the </span><code>.test()</code><span> method in your function, return whether a string contains the characters \"a\" and \"c\" (in that order) with any number of characters (including zero) between them.</span></p><h3><span>Examples</span></h3><pre><code>asterisk(\"account\") ➞ true\n\nasterisk(\"abccount\") ➞ true\n\nasterisk(\"abbbccount\") ➞ true\n\nasterisk(\"bbbccount\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"validation"
		],
		"tests": [
			"Test.assertEquals(asterisk(\"abccount\"), true)",
			"Test.assertEquals(asterisk(\"abbbcount\"), true)",
			"Test.assertEquals(asterisk(\"account\"), true)",
			"Test.assertEquals(asterisk(\"bbbccount\"), false)",
			"Test.assertEquals(asterisk(\"ccount\"), false)",
			"Test.assertEquals(asterisk(\"abbount\"), false)"
		],
		"starterFn": [
			"1\nfunction asterisk(string) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cqTmqdMQW83PkZH97"
	},
	{
		"title": "Count the Capital Letters",
		"description": "<p><span>Given a string of letters, how many </span><strong><span>capital letters</span></strong><span> are there?</span></p><h3><span>Examples</span></h3><pre><code>capitalLetters(\"fvLzpxmgXSDrobbgMVrc\") ➞ 6\n\ncapitalLetters(\"JMZWCneOTFLWYwBWxyFw\") ➞ 14\n\ncapitalLetters(\"mqeytbbjwqemcdrdsyvq\") ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(capitalLetters(\"hvbHKuFxMORMuBYRsgNF\"), 12)",
			"Test.assertEquals(capitalLetters(\"nrrvrXlmfwjwlbcjwrzt\"), 1)",
			"Test.assertEquals(capitalLetters(\"VdefGMkIeTUipnLhnIfe\"), 8)",
			"Test.assertEquals(capitalLetters(\"ShwvYyeQdGsJYRBhoihI\"), 9)",
			"Test.assertEquals(capitalLetters(\"ykEblUluPthiCMhxQFlz\"), 7)",
			"Test.assertEquals(capitalLetters(\"NCdLUzNdihwUumkqfJqN\"), 8)",
			"Test.assertEquals(capitalLetters(\"sdbMinvzxxulkzyzhfWe\"), 2)",
			"Test.assertEquals(capitalLetters(\"NEcLjmRMJEXwnBkiPpCO\"), 12)",
			"Test.assertEquals(capitalLetters(\"KVFifdDbnuWdkDdmDAkO\"), 9)",
			"Test.assertEquals(capitalLetters(\"pkgUmnquvzIueBlLbtYu\"), 5)",
			"Test.assertEquals(capitalLetters(\"xbbpykGhycjVEvCdaMew\"), 5)",
			"Test.assertEquals(capitalLetters(\"YVgbDlgZDDaGkOymseSP\"), 10)",
			"Test.assertEquals(capitalLetters(\"miuyhtTofqSuoCrgyhtc\"), 3)",
			"Test.assertEquals(capitalLetters(\"YYoNuXdYJhHIPFZZndya\"), 12)",
			"Test.assertEquals(capitalLetters(\"LRuGZepMZYIwQWXJpoTB\"), 14)",
			"Test.assertEquals(capitalLetters(\"gmEosHVTLNEsYOFLCrRR\"), 14)",
			"Test.assertEquals(capitalLetters(\"dPiadMjurjCjrgYbceuK\"), 5)",
			"Test.assertEquals(capitalLetters(\"PQgSxLADOswVPWoDBgCD\"), 14)",
			"Test.assertEquals(capitalLetters(\"odoaxlnmuyixnpthidus\"), 0)",
			"Test.assertEquals(capitalLetters(\"XcqykqdmvtuMynFhnayf\"), 3)"
		],
		"starterFn": [
			"1\nfunction capitalLetters(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tkFfKQJzcuaDysDyY"
	},
	{
		"title": "Get the File Extension",
		"description": "<p><span>Write a function that maps files to their extension names.</span></p><h3><span>Examples</span></h3><pre><code>getExtension([\"code.html\", \"code.css\"])\n➞ [\"html\", \"css\"]\n\ngetExtension([\"project1.jpg\", \"project1.pdf\", \"project1.mp3\"])\n➞ [\"jpg\", \"pdf\", \"mp3\"]\n\ngetExtension([\"ruby.rb\", \"cplusplus.cpp\", \"python.py\", \"javascript.js\"])\n➞ [\"rb\", \"cpp\", \"py\", \"js\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(getExtension([\"project1.jpg\", \"project1.pdf\", \"project1.mp3\"]), [\"jpg\", \"pdf\", \"mp3\"])",
			"Test.assertSimilar(getExtension([\"ruby.rb\", \"cplusplus.cpp\", \"python.py\", \"javascript.js\"]), [\"rb\", \"cpp\", \"py\", \"js\"])",
			"Test.assertSimilar(getExtension([\"code.html\", \"code.css\"]), [\"html\", \"css\"])",
			"Test.assertSimilar(getExtension([\"minesweeper.java\", \"game.java\", \"my_project.java\"]), [\"java\", \"java\", \"java\"])"
		],
		"starterFn": [
			"1\nfunction getExtension(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8A9E8LdE6zXcmPX3W"
	},
	{
		"title": "Return Odd > Even",
		"description": "<p><span>Given an array, return </span><code>true</code><span> if there are more odd numbers than even numbers, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>oddeven([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ true\n\noddeven([1]) ➞ true\n\noddeven([13452394823795273847528572346]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>All arrays will have at least 1 item.</span></p>",
		"publishedBy": "jordan sumitomo",
		"publishedByUrl": "https://edabit.com/user/eoepTq5ES5tfgY9XT",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(oddeven([1, 2, 3, 4, 5, 6, 7, 8, 9]), true)",
			"Test.assertEquals(oddeven([1]), true)",
			"Test.assertEquals(oddeven([1, 2, 3, 4, 5, 6, 7, 9]), true)",
			"Test.assertEquals(oddeven([42, 1, 66]), false)",
			"Test.assertEquals(oddeven([2, 3, 4, 5, 6, 7, 8]), false)",
			"Test.assertEquals(oddeven([43264573658142353463158]), false)"
		],
		"starterFn": [
			"1\nfunction oddeven(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PqriC6CkLE5JW57aW"
	},
	{
		"title": "Fullname and Email",
		"description": "<p><span>Create the </span><em><span>instance properties</span></em><span> </span><code>fullname</code><span> and </span><code>email</code><span> in the </span><code>Employee</code><span> class. Given a person's first and last names:</span></p><ul><li><span>Form the </span><code>fullname</code><span> by simply joining the first and last name together, separated by a space.</span></li><li><span>Form the </span><code>email</code><span> by joining the first and last name together with a </span><code>.</code><span> in between, and follow it with </span><code>@company.com</code><span> at the end. Make sure </span><em><span>everything</span></em><span> is in </span><strong><span>lowercase</span></strong><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>emp1 = Employee(\"John\", \"Smith\")\nemp1.fullname ➞ \"John Smith\"\n\nemp2 = Employee(\"Mary\",  \"Sue\")\nemp2.email ➞ \"mary.sue@company.com\"\n\nemp3 = Employee(\"Antony\", \"Walker\")\nemp3.firstname ➞ \"Antony\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The properties </span><code>firstname</code><span> and </span><code>lastname</code><span> are already made for you.</span></li><li><span>See the </span><strong><span>Resources</span></strong><span> tab for some helpful tutorials on JavaScript classes!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"emp1 = new Employee(\"John\", \"Smith\")",
			"emp2 = new Employee(\"Mary\",  \"Sue\")",
			"emp3 = new Employee(\"Antony\", \"Walker\")",
			"emp4 = new Employee(\"Joshua\", \"Senoron\")",
			"​",
			"Test.assertEquals(emp1.firstname, \"John\")",
			"Test.assertEquals(emp1.lastname, \"Smith\")",
			"Test.assertEquals(emp1.fullname, \"John Smith\")",
			"Test.assertEquals(emp1.email, \"john.smith@company.com\")",
			"Test.assertEquals(emp2.firstname, \"Mary\")",
			"Test.assertEquals(emp2.lastname, \"Sue\")",
			"Test.assertEquals(emp2.fullname, \"Mary Sue\")",
			"Test.assertEquals(emp2.email, \"mary.sue@company.com\")",
			"Test.assertEquals(emp3.firstname, \"Antony\")",
			"Test.assertEquals(emp3.lastname, \"Walker\")",
			"Test.assertEquals(emp3.fullname, \"Antony Walker\")",
			"Test.assertEquals(emp3.email, \"antony.walker@company.com\")",
			"Test.assertEquals(emp4.firstname, \"Joshua\")",
			"Test.assertEquals(emp4.lastname, \"Senoron\")",
			"Test.assertEquals(emp4.fullname, \"Joshua Senoron\")",
			"Test.assertEquals(emp4.email, \"joshua.senoron@company.com\")",
			"​",
			"// Made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nclass Employee {",
			"2\n  constructor (firstname, lastname) {",
			"3\n    this.firstname = firstname",
			"4\n    this.lastname = lastname",
			"5\n    // Complete the code!",
			"6\n  }",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/kGLhgwGaLJsCMS7wS"
	},
	{
		"title": "Stupid Addition",
		"description": "<p><span>Create a function that takes two parameters and, if both parameters are strings, </span><strong><span>add them</span></strong><span> as if they were integers or if the two parameters are integers, </span><strong><span>concatenate them</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>stupidAddition(1, 2) ➞ \"12\"\n\nstupidAddition(\"1\", \"2\") ➞ 3\n\nstupidAddition(\"1\", 2) ➞ null</code></pre><h3><span>Notes</span></h3><ul><li><span>If the two parameters are different data types, return </span><code>null</code><span>.</span></li><li><span>All parameters will either be strings or integers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"numbers",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(stupidAddition(1, 2), \"12\", \"Both parameters are integers, therefore they should be concatenated\")",
			"Test.assertEquals(stupidAddition(\"1\", \"2\"), 3, \"Both parameters are strings, therefore they should be added\")",
			"Test.assertEquals(stupidAddition(1, \"2\"), null, \"The parameters are different data types, therefore None should be returned\")",
			"Test.assertEquals(stupidAddition(\"1\", 2), null, \"The parameters are different data types, therefore None should be returned\")"
		],
		"starterFn": [
			"1\nfunction stupidAddition(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GABaDpxGZGFBdQPjs"
	},
	{
		"title": "A Circle and Two Square",
		"description": "<p><span>Imagine a circle and two squares: a smaller and a bigger one. For the smaller one, the circle is a circumcircle and for the bigger one, an incircle.</span></p><p><img alt=\"Scale\" src=\"https://edabit-challenges.s3.amazonaws.com/scale.png\"></p><p><span>Create a function, that takes an integer (radius of the circle) and returns the difference of the areas of the two squares.</span></p><h3><span>Examples</span></h3><pre><code>squareAreasDifference(5) ➞ 50\n\nsquareAreasDifference(6) ➞ 72\n\nsquareAreasDifference(7) ➞ 98</code></pre><h3><span>Notes</span></h3><p><span>Use only positive integer parameters.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(squareAreasDifference(5), 50)",
			"Test.assertEquals(squareAreasDifference(6), 72)",
			"Test.assertEquals(squareAreasDifference(7), 98)",
			"Test.assertEquals(squareAreasDifference(17), 578)"
		],
		"starterFn": [
			"1\nfunction squareAreasDifference(r) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ApTfL3DXJtyAmiajv"
	},
	{
		"title": "Retrieve the Last N Elements",
		"description": "<p><span>Write a function that retrieves the last </span><code>n</code><span> elements from an array.</span></p><h3><span>Examples</span></h3><pre><code>last([1, 2, 3, 4, 5], 1) ➞ [5]\n\nlast([4, 3, 9, 9, 7, 6], 3) ➞ [9, 7, 6]\n\nlast([1, 2, 3, 4, 5], 7) ➞ \"invalid\"\n\nlast([1, 2, 3, 4, 5], 0) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>\"invalid\"</code><span> if </span><code>n</code><span> exceeds the length of the array.</span></li><li><span>Return an empty array if </span><code>n == 0</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(last([1, 2, 3, 4, 5], 0), [])",
			"Test.assertSimilar(last([1, 2, 3, 4, 5], 1), [5])",
			"Test.assertSimilar(last([4, 3, 9, 9, 7, 6], 3), [9, 7, 6])",
			"Test.assertSimilar(last([5, 1, 2], 3), [5, 1, 2])",
			"Test.assertSimilar(last([], 1), \"invalid\")",
			"Test.assertSimilar(last([1, 2, 3, 4, 5], 7), \"invalid\")"
		],
		"starterFn": [
			"1\nfunction last(a, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/S6zpG8RwDrxaFEQLE"
	},
	{
		"title": "Basic Statistics: Mean",
		"description": "<p><span>The </span><em><span>mean</span></em><span> of a group of numbers is calculated by summing all numbers, and dividing this sum by the total count of numbers in the group. Given a sorted array of numbers, return the mean (rounded to one decimal place).</span></p><h3><span>Examples</span></h3><pre><code>mean([1, 6, 6, 7, 8, 8, 9, 10, 10]) ➞ 7.2\n\nmean([1, 3, 8, 9, 9, 10]) ➞ 6.7\n\nmean([2, 3, 3, 6, 6, 8, 9, 10]) ➞ 5.9</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(mean([1, 1, 2, 2, 3, 5, 5, 5, 7]), 3.4)",
			"Test.assertEquals(mean([1, 2, 2, 3, 7, 9, 10]), 4.9)",
			"Test.assertEquals(mean([1, 2, 3, 4, 5, 6, 6, 10, 10]), 5.2)",
			"Test.assertEquals(mean([5, 5, 6, 7, 10, 10]), 7.2)",
			"Test.assertEquals(mean([1, 3, 3, 4, 5, 6, 7, 8]), 4.6)",
			"Test.assertEquals(mean([2, 4, 6, 6, 6, 8, 9]), 5.9)",
			"Test.assertEquals(mean([2, 4, 6, 6, 6, 7, 7, 8, 9]), 6.1)",
			"Test.assertEquals(mean([2, 3, 4, 7, 8, 8]), 5.3)",
			"Test.assertEquals(mean([1, 2, 2, 2, 3, 4, 4, 4, 6]), 3.1)",
			"Test.assertEquals(mean([2, 2, 8, 9, 9, 10, 10]), 7.1)",
			"Test.assertEquals(mean([1, 3, 3, 4, 5, 5, 7, 9]), 4.6)",
			"Test.assertEquals(mean([1, 1, 3, 4, 4, 4, 7, 9, 10]), 4.8)",
			"Test.assertEquals(mean([1, 2, 3, 6, 6, 9]), 4.5)",
			"Test.assertEquals(mean([3, 5, 7, 7, 9, 10, 10]), 7.3)",
			"Test.assertEquals(mean([1, 2, 4, 4, 6, 6]), 3.8)",
			"Test.assertEquals(mean([2, 4, 7, 7, 8, 8, 9, 9, 10]), 7.1)",
			"Test.assertEquals(mean([2, 4, 4, 4, 5, 5, 8, 9, 10]), 5.7)",
			"Test.assertEquals(mean([1, 6, 6, 8, 10, 10]), 6.8)",
			"Test.assertEquals(mean([2, 6, 6, 9, 10, 10]), 7.2)",
			"Test.assertEquals(mean([1, 4, 4, 4, 7, 8, 9]), 5.3)"
		],
		"starterFn": [
			"1\nfunction mean(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WacpbmmhwWJ2Wgmy9"
	},
	{
		"title": "X and Y Coordinates",
		"description": "<p><span>Create a function that converts two arrays of </span><strong><span>x-</span></strong><span> and </span><strong><span>y-</span></strong><span> coordinates into an array of </span><code>(x,y)</code><span> coordinates.</span></p><h3><span>Examples</span></h3><pre><code>convertCartesian([1, 5, 3, 3, 4], [5, 8, 9, 1, 0])\n➞ [[1, 5], [5, 8], [3, 9], [3, 1], [4, 0]]\n\nconvertCartesian([9, 8, 3], [1, 1, 1])\n➞ [[9, 1], [8, 1], [3, 1]]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(convertCartesian([1, 5, 3, 3, 4], [5, 8, 9, 1, 0]), [[1, 5], [5, 8], [3, 9], [3, 1], [4, 0]])",
			"Test.assertSimilar(convertCartesian([9, 8, 3], [1, 1, 1]), [[9, 1], [8, 1], [3, 1]])",
			"Test.assertSimilar(convertCartesian([2, 5, 1], [7, 8, 9]), [[2, 7], [5, 8], [1, 9]])",
			"Test.assertSimilar(convertCartesian([3, 2, 2], [6, 1, 7]), [[3, 6], [2, 1], [2, 7]])"
		],
		"starterFn": [
			"1\nfunction convertCartesian(x, y) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qYAhaD8fTbHWNe9oT"
	},
	{
		"title": "Multi-division",
		"description": "<p><span>Create a function, that will for a given </span><code>a, b, c</code><span>, do the following:</span></p><ul><li><span>Add </span><code>a</code><span> to itself </span><code>b</code><span> times.</span></li><li><span>Check if the result is divisible by </span><code>c</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>abcmath(42, 5, 10) ➞ false\n// 42+42 = 84,84+84 = 168,168+168 = 336,336+336 = 672, 672+672 = 1344\n// 1344 is not divisible by 10\n\nabcmath(5, 2, 1) ➞ true\n\nabcmath(1, 2, 3) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>In the first step of the function, </span><code>a</code><span> doesn't always refer to the original </span><code>a</code><span>.</span></li><li><span>\"if the result is divisible by </span><code>c</code><span>\", means that if you divide the result and </span><code>c</code><span>, you will get an integer (5, and not 4.5314).</span></li><li><strong><span>The second test is correct.</span></strong></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"loops",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(abcmath(1, 2, 3), false)",
			"Test.assertEquals(abcmath(69, 15, 9), false)",
			"Test.assertEquals(abcmath(9, 2, 52), false)",
			"Test.assertEquals(abcmath(5, 2, 3), false)",
			"Test.assertEquals(abcmath(5, 2, 1), true)",
			"Test.assertEquals(abcmath(261, 2, 1), true)",
			"Test.assertEquals(abcmath(22, 2, 22), true)",
			"Test.assertEquals(abcmath(69, 12, 3), true)"
		],
		"starterFn": [
			"1\nfunction abcmath(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Tu2PuZf8yXQAE6kFD"
	},
	{
		"title": "Drink Sorting",
		"description": "<p><span>You will be given an array of drinks, with each drink being an object with two properties: name and price. Create a function that has the drinks array as an argument and return the drinks object sorted by price in ascending order.</span></p><p><span>Assume that the following array of drink objects needs to be sorted:</span></p><pre><code>drinks = [\n  {name: \"lemonade\", price: 50},\n  {name: \"lime\", price: 10}\n]</code></pre><p><span>The output of the sorted drinks object will be:</span></p><h3><span>Examples</span></h3><pre><code>sortDrinkByPrice(drinks) ➞ [{name: \"lime\", price: 10}, {name: \"lemonade\", price: 50}]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "meesie1",
		"publishedByUrl": "https://edabit.com/user/FNBB7APikaxR3DtvN",
		"language": "JavaScript",
		"tags": [
			"objects",
			"sorting"
		],
		"tests": [
			"const drinks1 = [",
			"  {name: 'lemonade', price: 90}, ",
			"  {name: 'lime', price: 432}, ",
			"  {name: 'peach', price: 23}",
			"];",
			"​",
			"const sorted1 = [",
			"  {name: 'peach', price: 23},",
			"  {name: 'lemonade', price: 90}, ",
			"  {name: 'lime', price: 432}",
			"];",
			"​",
			"const drinks2 = [",
			"  {name: 'water', price: 120}, ",
			"  {name: 'lime', price: 80}, ",
			"  {name: 'peach', price: 90}",
			"];",
			"​",
			"const sorted2 = [",
			"  {name: 'lime', price: 80},",
			"  {name: 'peach', price: 90}, ",
			"  {name: 'water', price: 120}",
			"];",
			"​",
			"Test.assertSimilar(sortDrinkByPrice(drinks1), sorted1, \"Object is not sorted.\");",
			"Test.assertSimilar(sortDrinkByPrice(drinks2), sorted2, \"Object is not sorted.\");"
		],
		"starterFn": [
			"1\nfunction sortDrinkByPrice(drinks) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nuXdWHAoHv9y38sn7"
	},
	{
		"title": "Recursion: Reverse a String",
		"description": "<p><span>Write a function that reverses a string. </span><strong><span>Make your function recursive.</span></strong></p><h3><span>Examples</span></h3><pre><code>reverse(\"hello\") ➞ \"olleh\"\n\nreverse(\"world\") ➞ \"dlrow\"\n\nreverse(\"a\") ➞ \"a\"\n\nreverse(\"\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>For non-base cases, your function must call itself at least once.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for info on recursion.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverse(\"hello\"), \"olleh\")",
			"Test.assertEquals(reverse(\"world\"), \"dlrow\")",
			"Test.assertEquals(reverse(\"a\"), \"a\")",
			"Test.assertEquals(reverse(\"\"), \"\", \"An empty string should return an empty string.\")"
		],
		"starterFn": [
			"1\nfunction reverse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TiAz6mfHTtkoqMszA"
	},
	{
		"title": "Give Me the Even Numbers",
		"description": "<p><span>Create a function that takes two parameters (</span><code>start</code><span>, </span><code>stop</code><span>), and returns the sum of all even numbers in the range.</span></p><h3><span>Examples</span></h3><pre><code>sumEvenNumsInRange(10, 20) ➞ 90\n// 10, 12, 14, 16, 18, 20\n\nsumEvenNumsInRange(51, 150) ➞ 5050\n\nsumEvenNumsInRange(63, 97) ➞ 1360</code></pre><h3><span>Notes</span></h3><p><span>Remember that the </span><code>start</code><span> and </span><code>stop</code><span> values are inclusive.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sumEvenNumsInRange(51, 150), 5050)",
			"Test.assertEquals(sumEvenNumsInRange(70, 100), 1360)",
			"Test.assertEquals(sumEvenNumsInRange(99, 110), 630)",
			"Test.assertEquals(sumEvenNumsInRange(63, 97), 1360)",
			"Test.assertEquals(sumEvenNumsInRange(10, 20), 90)"
		],
		"starterFn": [
			"1\nfunction sumEvenNumsInRange(start, stop) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BK7ydsgqXKggohdc6"
	},
	{
		"title": "Check if a Number is a Palindrome",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if a number is a palindrome.</span></p><h3><span>Examples</span></h3><pre><code>isPalindrome(838) ➞ true\n\nisPalindrome(4433) ➞ false\n\nisPalindrome(443344) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>A palindrome is a number that remains the same when reversed.</span></li><li><span>Bonus: Try solving this without turning the number into a string.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPalindrome(838), true)",
			"Test.assertEquals(isPalindrome(77), true)",
			"Test.assertEquals(isPalindrome(95159), true)",
			"Test.assertEquals(isPalindrome(839), false)",
			"Test.assertEquals(isPalindrome(4234), false)",
			"Test.assertEquals(isPalindrome(13), false)"
		],
		"starterFn": [
			"1\nfunction isPalindrome(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6dbpFcrW4schC6zDP"
	},
	{
		"title": "Total Number of Unique Characters",
		"description": "<p><span>Given two strings, create a function that returns the total number of unique characters from the combined string.</span></p><h3><span>Examples</span></h3><pre><code>countUnique(\"apple\", \"play\") ➞ 5\n// \"appleplay\" has 5 unique characters:\n// \"a\", \"e\", \"l\", \"p\", \"y\"\n\ncountUnique(\"sore\", \"zebra\") ➞ 7\n// \"sorezebra\" has 7 unique characters:\n// \"a\", \"b\", \"e\", \"o\", \"r\", \"s\", \"z\"\n\ncountUnique(\"a\", \"soup\") ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>Each word will contain at least one letter.</span></li><li><span>All words will be lower cased.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countUnique(\"apple\", \"play\"), 5)",
			"Test.assertEquals(countUnique(\"sore\", \"zebra\"), 7)",
			"Test.assertEquals(countUnique(\"pip\", \"geeks\"), 6)",
			"Test.assertEquals(countUnique(\"a\", \"soup\"), 5)",
			"Test.assertEquals(countUnique(\"maniac\", \"maniac\"), 5)"
		],
		"starterFn": [
			"1\nfunction countUnique(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ceHuvcrXpKF6Ev4Nc"
	},
	{
		"title": "Find the Bug: Returning Valid Units of Measure",
		"description": "<p><span>There has been a masterdata issue which affected the unit of measure of the products. All values need to be checked if they are valid. The unit of measure is valid when it is either \"L\" (liters), \"PCE\" (pieces) OR when the product has a comment.</span></p><p><span>The return value should be a Boolean.</span></p><h3><span>Expected results</span></h3><pre><code>hasValidUnitOfMeasure({ \"product\": \"Milk\", unitOfMeasure: \"L\" }) ➞ true\n\nhasValidUnitOfMeasure({ \"product\": \"Cereals\", unitOfMeasure: \"\" }) ➞ false\n\nhasValidUnitOfMeasure({ \"product\": \"Beer\", unitOfMeasure: false }) ➞ false\n\nhasValidUnitOfMeasure({ \"product\": \"Beef\", unitOfMeasure: \"Cow\" }) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Run the tests first to see the results before making changes and understand why eggs is not returning a boolean.</span></li><li><strong><span>Why is eggs not returning a boolean?</span></strong><ul><li><span>When merging conditions through </span><code>||</code><span>, the returned value is the result of the last truthy condition.</span></li></ul></li></ul>",
		"publishedBy": "Allard",
		"publishedByUrl": "https://edabit.com/user/d2oMpeLcNGNtnab8n",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"conditions",
			"control_flow",
			"logic"
		],
		"tests": [
			"Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Milk\", unitOfMeasure: \"L\" }), true)",
			"Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Cheese\", unitOfMeasure: \"PCE\" }), true)",
			"Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Eggs\", comment: \"Eggs are too different in size\" }), true)",
			"// Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Cerials\", unitOfMeasure: \"\" }), false)",
			"Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Flour\" }), false)",
			"Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Beer\", unitOfMeasure: false }), false)",
			"Test.assertEquals(hasValidUnitOfMeasure({ \"product\": \"Beef\", unitOfMeasure: \"Cow\" }), false)",
			"Test.assertEquals(hasValidUnitOfMeasure(), false)"
		],
		"starterFn": [
			"1\nfunction hasValidUnitOfMeasure(product = {}) {",
			"2\n  const { unitOfMeasure, comment } = product",
			"3\n  return (comment || unitOfMeasure === 'L' || unitOfMeasure === 'PCE')",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/oGYGaavTNoYDjykJY"
	},
	{
		"title": "CMS Selector Based on a Given String",
		"description": "<p><span>Create a function that takes an array and a string as arguments and returns the list of CMSs that include the given string. Return the names in an array in </span><strong><span>alphabetical order</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>cmsSelector([\"WordPress\", \"Joomla\", \"Drupal\" ], \"w\") ➞ [\"WordPress\"]\n\ncmsSelector([\"WordPress\", \"Joomla\", \"Drupal\", \"Magento\" ], \"ru\") ➞ [\"Drupal\"]\n\ncmsSelector([\"WordPress\", \"Joomla\", \"Drupal\", \"Magento\" ], \"\") ➞ [\"Drupal\", \"Joomla\", \"Magento\", \"WordPress\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>The given letter(s) are case sensitive and can be more than one.</span></li><li><span>In case the of an empty string, return the entire array.</span></li><li><span>A CMS is a Content Management System.</span></li></ul>",
		"publishedBy": "aditya1r",
		"publishedByUrl": "https://edabit.com/user/mLKy6YSNJ2MyXuaq2",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(cmsSelector([\"WordPress\", \"Joomla\", \"Drupal\", \"Magento\", \"Shopify\", \"Blogger\"], \"er\"), [\"Blogger\"])",
			"Test.assertSimilar(cmsSelector([\"WordPress\", \"Joomla\", \"Drupal\", \"Magento\", \"Shopify\", \"Blogger\"], \"\"), [\"Blogger\", \"Drupal\", \"Joomla\", \"Magento\", \"Shopify\", \"WordPress\"])",
			"Test.assertSimilar(cmsSelector([\"WordPress\", \"Joomla\", \"Drupal\", \"Magento\", \"Shopify\", \"Blogger\"], \"oJ\"), [])"
		],
		"starterFn": [
			"1\nfunction cmsSelector(arr, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9wL6dXj2tKNCe5pFz"
	},
	{
		"title": "Binary to Decimal Converter",
		"description": "<p><span>You are given one input: An array containing eight 1's and/or 0's. Write a function that takes an </span><code>8 bit</code><span> binary number and convert it to decimal.</span></p><h3><span>Examples</span></h3><pre><code>binaryToDecimal([1, 1, 1, 1, 1, 1, 1, 1]) ➞ 255\n\nbinaryToDecimal([0, 0, 0, 0, 0, 0, 0, 0]) ➞ 0\n\nbinaryToDecimal([1, 0, 1, 1, 1, 1, 0, 0]) ➞ 188</code></pre><h3><span>Notes</span></h3><p><span>Return an integer.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(binaryToDecimal([1, 1, 1, 1, 1, 1, 1, 1]), 255)",
			"Test.assertEquals(binaryToDecimal([0, 0, 0, 0, 0, 0, 0, 0]), 0)",
			"Test.assertEquals(binaryToDecimal([1, 0, 1, 1, 1, 1, 0, 0]), 188)",
			"Test.assertEquals(binaryToDecimal([1, 0, 1, 1, 0, 1, 0, 1]), 181)"
		],
		"starterFn": [
			"1\nfunction binaryToDecimal(binary) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8bNad58igHWorsf6S"
	},
	{
		"title": "Promises IV: The Reject Callback",
		"description": "<p><span>Async operations don't always go as planned. When errors creep up we need to know how to handle them. We can pass the </span><strong><span>reject</span></strong><span> callback to our </span><strong><span>executor</span></strong><span> function  to pass errors to our promise.</span></p><pre><code>let promise = new Promise( (resolve, reject) =&gt; {\n  setTimeout(( ) =&gt; {\n    /* something went wrong */\n     reject('oops!')\n  }, 1000)\n})</code></pre><p><span>You can pass </span><strong><span>Error</span></strong><span> objects as well. Here we pass a simple string </span><code>\"oops!\"</code><span>. </span></p><h3><span>Challenge</span></h3><p><span>Reject the promise with the simple string </span><code>\"It's not a dog!\"</code><span>.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on promises.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"Test.assertEquals(promise, promise)",
			"​",
			"promise.then(res => Test.assertEquals(res, \"Ignore this test\",\"Do not change the animal variable.\" ))",
			"      .catch(e => Test.assertEquals(e, \"It's not a dog!\"))"
		],
		"starterFn": [
			"1\nlet promise = new Promise( (resolve) => {",
			"2\n  let animal = \"cat\"",
			"3\n  setTimeout(() => {",
			"4\n    if(animal === \"dog\") {",
			"5\n      resolve(\"It's a dog!\")",
			"6\n    } ",
			"7\n    if(animal !== \"dog\") {",
			"8\n      /* need something here, you might also need to pass",
			"9\n      something else besides the resolve callback */",
			"10\n    }",
			"11\n  }, 1000)",
			"12\n})"
		],
		"url": "https://edabit.com/challenge/HT2dHkbzmLDZgsS7G"
	},
	{
		"title": "Bitwise Operations",
		"description": "<p><span>A decimal number can be represented as a sequence of bits. To illustrate:</span></p><pre><code>6 = 00000110\n23 = 00010111</code></pre><p><span>From the bitwise representation of numbers, we can calculate the </span><strong><span>bitwise AND</span></strong><span>, </span><strong><span>bitwise OR</span></strong><span> and </span><strong><span>bitwise XOR</span></strong><span>. Using the example above:</span></p><pre><code>bitwiseAND(6, 23) ➞ 00000110\n\nbitwiseOR(6, 23) ➞ 00010111\n\nbitwiseXOR(6, 23) ➞ 00010001</code></pre><p><span>Write three functions to calculate the </span><strong><span>bitwise AND</span></strong><span>, </span><strong><span>bitwise OR</span></strong><span> and </span><strong><span>bitwise XOR</span></strong><span> of two numbers.</span></p><h3><span>Examples</span></h3><pre><code>bitwiseAND(7, 12) ➞ 4\n\nbitwiseOR(7, 12) ➞ 15\n\nbitwiseXOR(7, 12) ➞ 11</code></pre><h3><span>Notes</span></h3><p><span>JavaScript has a useful function: </span><code>toString(2)</code><span>, where you can see the binary representation of a decimal number.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"language_fundamentals",
			"logic"
		],
		"tests": [
			"Test.assertEquals(bitwiseAND(7, 12), 4)",
			"Test.assertEquals(bitwiseOR(7, 12), 15)",
			"Test.assertEquals(bitwiseXOR(7, 12), 11)",
			"​",
			"Test.assertEquals(bitwiseAND(32, 17), 0)",
			"Test.assertEquals(bitwiseOR(32, 17), 49)",
			"Test.assertEquals(bitwiseXOR(32, 17), 49)",
			"​",
			"Test.assertEquals(bitwiseAND(13, 19), 1)",
			"Test.assertEquals(bitwiseOR(13, 19), 31)",
			"Test.assertEquals(bitwiseXOR(13, 19), 30)"
		],
		"starterFn": [
			"1\nfunction bitwiseAND(n1, n2) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction bitwiseOR(n1, n2) {",
			"6\n  ",
			"7\n}",
			"8\n​",
			"9\nfunction bitwiseXOR(n1, n2) {",
			"10\n  ",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/vvuAkYEAArrZvmp6X"
	},
	{
		"title": "Matchstick Houses",
		"description": "<p><span>This challenge will help you interpret mathematical relationships both algebraically and geometrically.</span></p><p><img alt=\"Matchstick Houses, Steps 1, 2 and 3\" title=\"Matchstick Houses, Steps 1, 2 and 3\" src=\"https://edabit-challenges.s3.amazonaws.com/matchstick_houses.png\"></p><p><span>Create a function that takes a number (step) as an argument and returns the amount of matchsticks in that step. See step 1, 2 and 3 in the image above.</span></p><h3><span>Examples</span></h3><pre><code>matchHouses(1) ➞ 6\n\nmatchHouses(4) ➞ 21\n\nmatchHouses(87) ➞ 436</code></pre><h3><span>Notes</span></h3><ul><li><span>Step 0 returns </span><code>0</code><span> matchsticks.</span></li><li><span>The input (step) will always be a non-negative integer.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(matchHouses(1), 6)",
			"Test.assertEquals(matchHouses(0), 0)",
			"Test.assertEquals(matchHouses(17), 86)",
			"Test.assertEquals(matchHouses(36), 181)",
			"Test.assertEquals(matchHouses(15), 76)",
			"Test.assertEquals(matchHouses(99), 496)",
			"Test.assertEquals(matchHouses(3), 16)",
			"Test.assertEquals(matchHouses(87), 436)"
		],
		"starterFn": [
			"1\nfunction matchHouses(step) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tYHkTdFrEmWfxpPKF"
	},
	{
		"title": "Add up the Numbers from a Single Number",
		"description": "<p><span>Create a function that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function.&nbsp;For example, if the input is 4 then your function should return 10 because 1 + 2 + 3 + 4 = 10.</span></p><h3><strong><span>Examples</span></strong></h3><pre><code>addUp(4) ➞ 10\n\naddUp(13) ➞ 91\n\naddUp(600) ➞ 180300</code></pre><h3><span>Notes</span></h3><p><span>Expect any positive number between 1 and 1000.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(addUp(4), 10)",
			"Test.assertEquals(addUp(13), 91)",
			"Test.assertEquals(addUp(600), 180300)",
			"Test.assertEquals(addUp(392), 77028)",
			"Test.assertEquals(addUp(53), 1431)",
			"Test.assertEquals(addUp(897), 402753)",
			"Test.assertEquals(addUp(23), 276)",
			"Test.assertEquals(addUp(1000), 500500)",
			"Test.assertEquals(addUp(738), 272691)",
			"Test.assertEquals(addUp(100), 5050)",
			"Test.assertEquals(addUp(925), 428275)",
			"Test.assertEquals(addUp(1), 1)",
			"Test.assertEquals(addUp(999), 499500)",
			"Test.assertEquals(addUp(175), 15400)",
			"Test.assertEquals(addUp(111), 6216)"
		],
		"starterFn": [
			"1\nfunction addUp(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4gzDuDkompAqujpRi"
	},
	{
		"title": "Number of Squares in a n * n Grid",
		"description": "<p><span>Create a function that calculates the number of different squares in an n * n  square grid.\nCheck the </span><strong><span>Resources</span></strong><span> tab.</span></p><h3><span>Examples</span></h3><pre><code>numberSquares(2) ➞ 5\n\nnumberSquares(4) ➞ 30\n\nnumberSquares(5) ➞ 55</code></pre><h3><span>Notes</span></h3><ul><li><span>Input is a positive integer.</span></li><li><span>Square pyramidal number.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"math"
		],
		"tests": [
			"Test.assertEquals(numberSquares(3), 14)",
			"Test.assertEquals(numberSquares(10), 385)",
			"Test.assertEquals(numberSquares(12), 650)",
			"Test.assertEquals(numberSquares(5), 55)",
			"Test.assertEquals(numberSquares(9), 285)",
			"Test.assertEquals(numberSquares(11), 506)",
			"Test.assertEquals(numberSquares(15), 1240)"
		],
		"starterFn": [
			"1\nfunction numberSquares(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RGQXN4TG2CQoBAReQ"
	},
	{
		"title": "Find the Smallest and Biggest Numbers",
		"description": "<p><span>Create a function that takes an array of numbers and return both the minimum and maximum numbers, in that order.</span></p><h3><span>Examples</span></h3><pre><code>minMax([1, 2, 3, 4, 5]) ➞ [1, 5]\n\nminMax([2334454, 5]) ➞ [5, 2334454]\n\nminMax([1]) ➞ [1, 1]</code></pre><h3><span>Notes</span></h3><p><span>All test arrays will have at least one element and are valid.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(minMax([14, 35, 6, 1, 34, 54]), [1, 54])",
			"Test.assertSimilar(minMax([1.346, 1.6532, 1.8734, 1.8723]), [1.346, 1.8734])",
			"Test.assertSimilar(minMax([0.432, 0.874, 0.523, 0.984, 0.327, 0.2345]), [0.2345, 0.984])",
			"Test.assertSimilar(minMax([13, 72, 98, 43, 24, 65, 31]), [13, 98])",
			"Test.assertSimilar(minMax([-54, -23, -54, -21]), [-54, -21])",
			"Test.assertSimilar(minMax([-0.473, -0.6834, -0.1287, 0.5632]), [-0.6834, 0.5632])",
			"Test.assertSimilar(minMax([0, 0, 0, 0]), [0, 0])"
		],
		"starterFn": [
			"1\nfunction minMax(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Q3n42rEWanZSTmsJm"
	},
	{
		"title": "Check if One Array can be Nested in Another",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if the first array can be nested inside the second.</span></p><p><code>arr1</code><span> can be nested inside </span><code>arr2</code><span> if:</span></p><ol><li><code>arr1</code><span>'s min is greater than </span><code>arr2</code><span>'s min.</span></li><li><code>arr1</code><span>'s max is less than </span><code>arr2</code><span>'s max.</span></li></ol><h3><span>Examples</span></h3><pre><code>canNest([1, 2, 3, 4], [0, 6]) ➞ true\n\ncanNest([3, 1], [4, 0]) ➞ true\n\ncanNest([9, 9, 8], [8, 9]) ➞ false\n\ncanNest([1, 2, 3, 4], [2, 3]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Note the strict inequality (see example #3).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canNest([1, 2, 3, 4], [0, 6]), true)",
			"Test.assertEquals(canNest([3, 1], [4, 0]), true)",
			"Test.assertEquals(canNest([9, 9, 8], [8, 9, 10]), false)",
			"Test.assertEquals(canNest([9, 9, 8], [8, 9]), false)",
			"Test.assertEquals(canNest([1, 2, 3, 4], [2, 3]), false)"
		],
		"starterFn": [
			"1\nfunction canNest(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Gpy2qSFnfhGJnWMMj"
	},
	{
		"title": "Which Function Returns the Larger Number?",
		"description": "<p><span>Your function will be passed two functions, </span><code>f</code><span> and </span><code>g</code><span>, that don't take any parameters. Your function has  to call them, and return a string which indicates which function returned the larger number.</span></p><ul><li><span>If </span><code>f</code><span> returns the larger number, return the string </span><code>f</code><span>.</span></li><li><span>If </span><code>g</code><span> returns the larger number, return the string </span><code>g</code><span>.</span></li><li><span>If the functions return the same number, return the string </span><code>neither</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>whichIsLarger(() =&gt; 5, () =&gt; 10) ➞ \"g\"\n\nwhichIsLarger(() =&gt; 25,  () =&gt; 25) ➞ \"neither\"\n\nwhichIsLarger(() =&gt; 505050, () =&gt; 5050) ➞ \"f\"</code></pre><h3><span>Notes</span></h3><p><span>This exercise is designed as an introduction to </span><em><span>higher order functions</span></em><span> (functions which use other functions to do their work).</span></p>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(whichIsLarger(()=>5, ()=>10),'g')",
			"Test.assertEquals(whichIsLarger(()=>10, ()=>5),'f')",
			"Test.assertEquals(whichIsLarger(()=>25, ()=>25),'neither')",
			"Test.assertEquals(whichIsLarger(()=>-100, ()=>-100),'neither')",
			"Test.assertEquals(whichIsLarger(()=>-100, ()=>0),'g')",
			"Test.assertEquals(whichIsLarger(()=>505050, ()=>5050),'f')",
			"Test.assertEquals(whichIsLarger(()=>100, ()=>1000),'g')"
		],
		"starterFn": [
			"1\nfunction whichIsLarger(f, g) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/o7TwicAHWuMkjbDqQ"
	},
	{
		"title": "Convert a Number to Base 2",
		"description": "<p><span>Create a function that returns a base 2 (binary) representation of a base 10 (decimal) string number. To convert is simple: ((2) means base 2 and (10) means base 10) 010101001(2) = 1 + 8 + 32 + 128.</span></p><p><span>Going from right to left, the value of the most right bit is 1, now from that every bit to the left will be x2 the value, value of an 8 bit binary numbers are (256, 128, 64, 32, 16, 8, 4, 2, 1).</span></p><h3><span>Examples</span></h3><pre><code>binary(1) ➞ \"1\"\n// 1*1 = 1\n\nbinary(5) ➞ \"101\"\n// 1*1 + 1*4 = 5\n\nbinary(10) ➞ \"1010\"\n// 1*2 + 1*8 = 10</code></pre><h3><span>Notes</span></h3><ul><li><span>Numbers will always be below 1024 (not including 1024).</span></li><li><span>The </span><code>&amp;&amp;</code><span> operator could be useful.</span></li><li><span>The strings will always go to the length at which the most left bit's value gets bigger than the number in </span><code>decimal</code><span>.</span></li><li><span>If a binary conversion for </span><code>0</code><span> is attempted, return </span><code>\"0\"</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"logic",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(binary(100), \"1100100\")",
			"Test.assertEquals(binary(1), \"1\")",
			"Test.assertEquals(binary(0), \"0\")",
			"Test.assertEquals(binary(69), \"1000101\")",
			"Test.assertEquals(binary(1023), \"1111111111\")",
			"Test.assertEquals(binary(511), \"111111111\")",
			"Test.assertEquals(binary(666), \"1010011010\")",
			"Test.assertEquals(binary(123), \"1111011\")"
		],
		"starterFn": [
			"1\nfunction binary(decimal) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3kcrnpHk7krNZdnKK"
	},
	{
		"title": "Is it Time for Milk and Cookies?",
		"description": "<p><span>Christmas Eve is almost upon us, so naturally we need to prepare some milk and cookies for Santa! Create a function that accepts a </span><code>Date</code><span> object and returns </span><code>true</code><span> if it's Christmas Eve (December 24th) and </span><code>false</code><span> otherwise. Keep in mind JavaScript's </span><code>Date</code><span> month is 0 based, meaning December is the 11th month while January is 0.</span></p><h3><span>Examples</span></h3><pre><code>timeForMilkAndCookies(new Date(2013, 11, 24)) ➞ true\n\ntimeForMilkAndCookies(new Date(2013, 0, 23)) ➞ false\n\ntimeForMilkAndCookies(new Date(3000, 11, 24)) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Dates are zero zero based (see resources).</span></li><li><span>All test cases contain valid dates.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"validation"
		],
		"tests": [
			"Test.assertEquals(timeForMilkAndCookies(new Date(2013, 11, 24)), true)",
			"Test.assertEquals(timeForMilkAndCookies(new Date(3000, 11, 24)), true)",
			"Test.assertEquals(timeForMilkAndCookies(new Date(2154, 11, 11)), false)",
			"Test.assertEquals(timeForMilkAndCookies(new Date(2010, 11, 2)), false)",
			"Test.assertEquals(timeForMilkAndCookies(new Date(1980, 9, 24)), false)"
		],
		"starterFn": [
			"1\nfunction timeForMilkAndCookies(date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hPWnaSckJke5FXNEH"
	},
	{
		"title": "Largest Swap",
		"description": "<p><span>Write a function that takes a </span><strong><span>two-digit</span></strong><span> number and determines if it's the largest of two possible digit swaps.</span></p><p><span>To illustrate:</span></p><pre><code>largestSwap(27) ➞ false\n\nlargestSwap(43) ➞ true</code></pre><p><span>If </span><strong><span>27</span></strong><span> is our input, we should return </span><code>false</code><span> because swapping the digits gives us </span><strong><span>72</span></strong><span>, and </span><strong><span>72 &gt; 27</span></strong><span>. On the other hand, swapping </span><strong><span>43</span></strong><span> gives us </span><strong><span>34</span></strong><span>, and </span><strong><span>43 &gt; 34</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>largestSwap(14) ➞ false\n\nlargestSwap(53) ➞ true\n\nlargestSwap(99) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Numbers with two identical digits (third example) should yield </span><code>true</code><span> (you can't do better).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(largestSwap(27), false, '27 < 72, so not largest swap.')",
			"Test.assertEquals(largestSwap(43), true, '43 > 34, so largest swap.')",
			"Test.assertEquals(largestSwap(14), false, '14 < 41, so not largest swap.')",
			"Test.assertEquals(largestSwap(53), true, '53 > 35, so largest swap.')",
			"Test.assertEquals(largestSwap(99), true, 'Cannot do better, so largest swap.')"
		],
		"starterFn": [
			"1\nfunction largestSwap(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hD3euqPHM82Cbr7R8"
	},
	{
		"title": "RegEx XIV: Group Ranges x|y",
		"description": "<p><strong><span>Groups and ranges</span></strong><span> indicate groups and ranges of expression characters.  The regular expression </span><code>x|y</code><span> matches either \"x\" or \"y\".</span></p><pre><code>const REGEXP = /blue|red/\n\n\"red flag\".match(REGEXP)  // red\n\"blue flag\".match(REGEXP)  // blue\n\n// Matches \"blue\" in \"blue flag\" and \"red\" in \"red flag\".</code></pre><p><span>Create a </span><strong><span>regular expression</span></strong><span> to match all </span><code>red flag</code><span> and </span><code>blue flag</code><span> in a string. You must use </span><code>|</code><span> in your expression. Flags can come in any order.</span></p><h3><span>Examples</span></h3><pre><code>\"red flag blue flag\".match(REGEXP) ➞ [\"red flag\", \"blue flag\"]\n\n\"yellow flag red flag blue flag green flag\".match(REGEXP) ➞ [\"red flag\", \"blue flag\"]\n\n\"pink flag red flag black flag blue flag green flag red flag \".match(REGEXP) ➞ [\"red flag\", \"blue flag\", \"red flag\"]</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const str1 = \"red flag blue flag\"",
			"const str2 = \"yellow flag red flag blue flag green flag\"",
			"const str3 = \"pink flag red flag black flag blue flag green flag red flag\"",
			"const str4 = \"blue flag red flag red flag blue flag green flag red flag\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\|/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     console.log(str.match(REGEXP))",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"invalid\", \"You are require to use the | in your expression.\")",
			"Test.assertSimilar(testExp(str1), [\"red flag\", \"blue flag\"])",
			"Test.assertSimilar(testExp(str2), [\"red flag\", \"blue flag\"])",
			"Test.assertSimilar(testExp(str3), [\"red flag\", \"blue flag\", \"red flag\"])",
			"Test.assertSimilar(testExp(str4), [\"blue flag\", \"red flag\", \"red flag\", \"blue flag\", \"red flag\"])"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/7KbZc8QvzqrJPaE6Q"
	},
	{
		"title": "Count Instances of a Character in a String",
		"description": "<p><span>Create a function that takes two strings as arguments and returns the number of times the first string (the single character) is found in the second string.</span></p><h3><span>Examples</span></h3><pre><code>charCount(\"a\", \"edabit\") ➞ 1\n\ncharCount(\"c\", \"Chamber of secrets\") ➞ 1\n\ncharCount(\"b\", \"big fat bubble\") ➞ 4</code></pre><h3><span>Notes</span></h3><p><span>Your output must be case-sensitive (see second example).</span></p>",
		"publishedBy": "Chris 0973",
		"publishedByUrl": "https://edabit.com/user/dKfW4G6srmPweYgPn",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(charCount('a', 'edabit'), 1)",
			"Test.assertEquals(charCount('b', 'big fat bubble'), 4)",
			"Test.assertEquals(charCount('c', 'Chamber of secrets'), 1)",
			"Test.assertEquals(charCount('f', 'frank and his friends have offered five foxes for sale'), 7)",
			"Test.assertEquals(charCount('x', 'edabit'), 0)",
			"Test.assertEquals(charCount('a', 'Adam and Eve bit the apple and found a snake'), 6)",
			"Test.assertEquals(charCount('s', 'sssssssssssssssssssssssss'), 25)",
			"Test.assertEquals(charCount('7', '10795426697'), 2)"
		],
		"starterFn": [
			"1\nfunction charCount(myChar, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kbFhwaDyrd79JrgeB"
	},
	{
		"title": "Promises III: Native Promise, Introducing the Executor",
		"description": "<p><span>Promises are just </span><strong><span>objects</span></strong><span> that contain the outcome of asynchronous operations. So when do you use one? When you want to control the outcome of an asynchronous operation. All you have to do is wrap the asynchronous function with a promise constructor. </span></p><p><span>The promise constructor requires you to pass a function called the </span><strong><span>executor</span></strong><span> which takes two parameters, </span><strong><span>resolve</span></strong><span> and </span><strong><span>reject</span></strong><span>. Both are functions that you use to pass or reject a value that is usually the result of the async operation. Here's an example of a simple promise:</span></p><pre><code>let promise = new Promise( (resolve, reject) =&gt; {\n  setTimeout(( ) =&gt; {\n     resolve(\"edabit\")\n  }, 1000)\n})</code></pre><p><code>setTimeout</code><span> is a built-in JavaScript function that is very commonly used in tutorials to represent </span><strong><span>async</span></strong><span> operations. After 1000ms has passed, we call the callback function in </span><code>setTimeout()</code><span> and pass a string \"edabit\" to the resolve function.</span></p><p><span>Create a simple promise and pass the resolve function a string value of your choice. Use the </span><code>setTimeout</code><span> function as your asynchronous operation. Your </span><code>setTimeout()</code><span> function should not exceed 1000ms. Store the promise inside a variable named </span><code>promise</code><span>.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on promises.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"let prom = promise.then((err, res) => {",
			"  if(err) { return err } ",
			"  return res",
			"})",
			"​",
			"prom.then((res) => {",
			"  Test.assertEquals(typeof res, \"string\", \"The promise needs resolve a string.\" ) ",
			"}) ",
			"​",
			"Test.assertEquals(promise, promise)"
		],
		"starterFn": [
			"1\nlet promise = "
		],
		"url": "https://edabit.com/challenge/8kTQqoWYQXRsKuYEf"
	},
	{
		"title": "Find Number of Digits in Number",
		"description": "<p><span>Create a function that will return an integer number containing the amount of digits in the given integer </span><code>num</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>num_of_digits(1000) ➞ 4\n\nnum_of_digits(12) ➞ 2\n\nnum_of_digits(1305981031) ➞ 10\n\nnum_of_digits(0) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>Try to solve this challenge without using strings!</span></p>",
		"publishedBy": "jordan sumitomo",
		"publishedByUrl": "https://edabit.com/user/eoepTq5ES5tfgY9XT",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"regex"
		],
		"tests": [
			"Test.assertEquals(num_of_digits(13124), 5)",
			"Test.assertEquals(num_of_digits(0), 1)",
			"Test.assertEquals(num_of_digits(-12381428), 8)",
			"Test.assertEquals(num_of_digits(12), 2)",
			"Test.assertEquals(num_of_digits(42), 2)",
			"Test.assertEquals(num_of_digits(1000), 4)",
			"Test.assertEquals(num_of_digits(136), 3)",
			"Test.assertEquals(num_of_digits(1000000000), 10)",
			"Test.assertEquals(num_of_digits(2147483647), 10)",
			"Test.assertEquals(num_of_digits(-2147483647), 10)"
		],
		"starterFn": [
			"1\nfunction num_of_digits(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yFJzLfYghz7ZtsyAN"
	},
	{
		"title": "Filter out Strings from an Array",
		"description": "<p><span>Create a function that takes an array of non-negative </span><strong><span>integers</span></strong><span> and </span><strong><span>strings</span></strong><span> and return a new array without the strings.</span></p><h3><span>Examples</span></h3><pre><code>filterArray([1, 2, \"a\", \"b\"]) ➞ [1, 2]\n\nfilterArray([1, \"a\", \"b\", 0, 15]) ➞ [1, 0, 15]\n\nfilterArray([1, 2, \"aasf\", \"1\", \"123\", 123]) ➞ [1, 2, 123]</code></pre><h3><span>Notes</span></h3><p><span>Zero is a non-negative integer.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(filterArray([1, 2, \"a\", \"b\"]), [1, 2])",
			"Test.assertSimilar(filterArray([1, \"a\", \"b\", 0, 15]), [1, 0, 15])",
			"Test.assertSimilar(filterArray([1, 2, \"aasf\", \"1\", \"123\", 123]), [1, 2, 123])",
			"Test.assertSimilar(filterArray([\"jsyt\", 4, \"yt\", 6]), [4,6])",
			"Test.assertSimilar(filterArray([\"r\", 5, \"y\", \"e\", 8, 9]), [5, 8, 9])",
			"Test.assertSimilar(filterArray([\"a\", \"e\", \"i\", \"o\", \"u\"]), [])",
			"Test.assertSimilar(filterArray([4, \"z\", \"f\", 5]), [4, 5])",
			"Test.assertSimilar(filterArray([\"abc\", 123]), [123])",
			"Test.assertSimilar(filterArray([\"$%^\", 567, \"&&&\"]), [567])",
			"Test.assertSimilar(filterArray([\"w\", \"r\", \"u\", 43, \"s\", \"a\", 76, \"d\", 88]), [43, 76, 88])"
		],
		"starterFn": [
			"1\nfunction filterArray(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/b2NdDSdkjqFnCTfS8"
	},
	{
		"title": "No Conditionals?",
		"description": "<p><span>Write a function that returns </span><code>0</code><span> if the input is </span><code>1</code><span>, and returns </span><code>1</code><span> if the input is </span><code>0</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>flip(1) ➞ 0\n\nflip(0) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>Try completing this challenge without using any:</span></p><ul><li><span>Conditionals</span></li><li><span>Ternary operators</span></li><li><span>Negations</span></li><li><span>Bit operators</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"logic"
		],
		"tests": [
			"Test.assertEquals(flip(0), 1)",
			"Test.assertEquals(flip(1), 0)"
		],
		"starterFn": [
			"1\nfunction flip(y) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WjXHgXLAvMxNvD6h2"
	},
	{
		"title": "Highest Digit",
		"description": "<p><span>Create a function that takes a number as an argument and returns the highest digit in that number.</span></p><h3><span>Examples</span></h3><pre><code>highestDigit(379) ➞ 9\n\nhighestDigit(2) ➞ 2\n\nhighestDigit(377401) ➞ 7</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(highestDigit(51), 5)",
			"Test.assertEquals(highestDigit(0), 0)",
			"Test.assertEquals(highestDigit(7495037), 9)",
			"Test.assertEquals(highestDigit(222222), 2)"
		],
		"starterFn": [
			"1\nfunction highestDigit(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YJuhHKSmNCaKNHcD3"
	},
	{
		"title": "Recursion to Repeat a String n Number of Times",
		"description": "<p><span>Create a recursive function that takes two parameters and repeats the string </span><code>n</code><span> number of times. The first parameter </span><code>txt</code><span> is the string to be repeated and the second parameter is the number of times the string is to be repeated.</span></p><p><strong><span>String.prototype.repeat() is not allowed</span></strong></p><h3><span>Examples</span></h3><pre><code>repetition(\"ab\", 3) ➞ \"ababab\"\n\nrepetition(\"kiwi\", 1) ➞ \"kiwi\"\n\nrepetition(\"cherry\", 2) ➞ \"cherrycherry\"</code></pre><h3><span>Notes</span></h3><p><span>The second parameter of the function is positive integer.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(repetition(\"soccer\", 2), \"soccersoccer\")",
			"Test.assertEquals(repetition(\"ab\", 3), \"ababab\")",
			"Test.assertEquals(repetition(\"bonita\", 1), \"bonita\")",
			"Test.assertEquals(repetition(\"ciao\", 4), \"ciaociaociaociao\")",
			"Test.assertEquals(repetition(\"amigo\", 5), \"amigoamigoamigoamigoamigo\")",
			"Test.assertEquals(repetition(\"torque\", 2), \"torquetorque\")"
		],
		"starterFn": [
			"1\nfunction repetition(txt, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MjqneMZ7aZa8AxXZG"
	},
	{
		"title": "Repeating Letters",
		"description": "<p><span>Create a function that takes a string and returns a string in which each character is repeated once.</span></p><h3><span>Examples</span></h3><pre><code>doubleChar(\"String\") ➞ \"SSttrriinngg\"\n\ndoubleChar(\"Hello World!\") ➞ \"HHeelllloo  WWoorrlldd!!\"\n\ndoubleChar(\"1234!_ \") ➞ \"11223344!!__  \"</code></pre><h3><span>Notes</span></h3><p><span>All test cases contain valid strings. Don't worry about spaces, special characters or numbers. They're all considered valid characters.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(doubleChar(\"String\"), \"SSttrriinngg\")",
			"Test.assertEquals(doubleChar(\"Hello World!\"), \"HHeelllloo  WWoorrlldd!!\")",
			"Test.assertEquals(doubleChar(\"1234!_ \"), \"11223344!!__  \")",
			"Test.assertEquals(doubleChar(\"##^&%%*&%%$#@@!\"), \"####^^&&%%%%**&&%%%%$$##@@@@!!\")",
			"Test.assertEquals(doubleChar(\"scandal\"), \"ssccaannddaall\")",
			"Test.assertEquals(doubleChar(\"economics\"), \"eeccoonnoommiiccss\")",
			"Test.assertEquals(doubleChar(\" \"), \"  \")",
			"Test.assertEquals(doubleChar(\"_______\"), \"______________\")",
			"Test.assertEquals(doubleChar(\"equip gallon read\"), \"eeqquuiipp  ggaalllloonn  rreeaadd\")",
			"Test.assertEquals(doubleChar(\"baby increase\"), \"bbaabbyy  iinnccrreeaassee\")"
		],
		"starterFn": [
			"1\nfunction doubleChar(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Mc6Xi4PRw7fDzeMDB"
	},
	{
		"title": "Summing a Slice",
		"description": "<p><span>Given an array and an integer </span><code>n</code><span>, return the sum of the first </span><code>n</code><span> numbers in the array.</span></p><h3><span>Examples</span></h3><pre><code>sliceSum([1, 3, 2], 2) ➞ 4\n\nsliceSum([4, 2, 5, 7], 4) ➞ 18\n\nsliceSum([3, 6, 2], 0) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>If </span><code>n</code><span> is larger than the length of the array, return the sum of the whole array.</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sliceSum([1, 3, 2], 2), 4)",
			"Test.assertEquals(sliceSum([4, 2, 5, 7], 4), 18)",
			"Test.assertEquals(sliceSum([3, 6, 2], 0), 0)",
			"Test.assertEquals(sliceSum([2, 4], 9), 6)",
			"Test.assertEquals(sliceSum([-5, 2], 2), -3)",
			"Test.assertEquals(sliceSum([0, 0, 0, 3, 4], 3), 0)"
		],
		"starterFn": [
			"1\nfunction sliceSum(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/B3FR3P7g8NyTg7t8b"
	},
	{
		"title": "Factorial of a Positive Integer",
		"description": "<p><span>Write a function that takes a positive integer and </span><code>return</code><span> its factorial.</span></p><h3><span>Examples</span></h3><pre><code>factorial(4) ➞ 24\n\nfactorial(0) ➞ 1\n\nfactorial(9) ➞ 362880</code></pre><h3><span>Notes</span></h3><ul><li><span>The factorial of </span><code>0</code><span> is </span><code>1</code><span>.</span></li><li><span>The factorial of any positive integer Z is </span><code>Z * (Z - 1) * (Z - 2) * . . . . . . * 1</code><span> (e.g. factorial of 3 is </span><code>3 * 2 * 1 = 6</code><span>).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"loops",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(factorial(4), 24)",
			"Test.assertEquals(factorial(0), 1)",
			"Test.assertEquals(factorial(9), 362880)",
			"Test.assertEquals(factorial(1), 1)",
			"Test.assertEquals(factorial(2), 2)"
		],
		"starterFn": [
			"1\nfunction factorial(z) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ju7AK9rAGjz86hjxo"
	},
	{
		"title": "Array Operation",
		"description": "<p><span>Create a function that takes three parameters and returns an array with the first parameter </span><code>x</code><span>, the second parameter </span><code>y</code><span>, and every number in between the first and second parameter in </span><strong><span>ascending order</span></strong><span>. Then filter through the array and return the array with numbers that are only divisible by the third parameter </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>arrayOperation(1, 10, 3) ➞ [3, 6, 9]\n\narrayOperation(7, 9, 2) ➞ [8]\n\narrayOperation(15, 20, 7) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>The final array should consist of all numbers between </span><code>x</code><span> and </span><code>y</code><span> inclusive that are divisible by </span><code>n</code><span>.</span></li><li><span>Return an empty array if there are no numbers that are divisible by </span><code>n</code><span>.</span></li></ul>",
		"publishedBy": "Anna An",
		"publishedByUrl": "https://edabit.com/user/zMCXYFZSsviDCvjnY",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(arrayOperation(1, 10, 3), [3, 6, 9])",
			"Test.assertSimilar(arrayOperation(7, 9, 2), [8])",
			"Test.assertSimilar(arrayOperation(15, 20, 7), [])",
			"Test.assertSimilar(arrayOperation(10, 50, 10), [10, 20, 30, 40, 50])",
			"Test.assertSimilar(arrayOperation(1, 10, 2), [2, 4, 6, 8, 10])",
			"Test.assertSimilar(arrayOperation(1, 100, 17), [17, 34, 51, 68, 85])",
			"Test.assertSimilar(arrayOperation(15, 20, 5), [15, 20])"
		],
		"starterFn": [
			"1\nfunction arrayOperation(x, y, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NFfYCBEQepsD5mfEk"
	},
	{
		"title": "RegEx XV : Group Ranges - Negated Character Sets",
		"description": "<p><strong><span>Groups and ranges</span></strong><span> indicate groups and ranges of expression characters. </span><strong><span>Negated character sets</span></strong><span> match any characters that are </span><strong><span>NOT</span></strong><span> inside of brackets </span><code>[  ]</code><span>. You differentiate a negated character set from a regular character set by inserting a </span><code>^</code><span> inside of the </span><code>[ ]</code><span>.</span></p><pre><code>\"1234cba5678\".match(/[^abc]/g)\n// \"12345678\", matches any character that are not a, b, or c.</code></pre><p><span>You can also negate ranges, but like with regular character sets, if the hyphen is at the beginning or ending of a range then it will be considered a literal hyphen.</span></p><pre><code>\"excludenumbers123\".match(/[^1-3]/g)\n// \"excludenumbers\", matches any character that are not the numbers 1, 2 or 3.</code></pre><p><span>Create a </span><strong><span>REGEXP</span></strong><span> that matches any characters except letters, digits and spaces. You must use a </span><strong><span>negated</span></strong><span> character set in your expression.</span></p><pre><code> \"alice15@gmail.com\".match(/REGEXP/gi) ➞ [\"@\", \".\"]</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = \"alice15@gmail.com\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\[\\^/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"    return str.match(REGEXP);",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str), \"invalid\", \"You are require to use a negated character set your expression.\")",
			"Test.assertSimilar(testExp(str), [\"@\", \".\"])",
			"​",
			"// credits to https://javascript.info/regexp-character-sets-and-ranges"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */gi"
		],
		"url": "https://edabit.com/challenge/rHtS59yApEQbANPcx"
	},
	{
		"title": "RegEx XVII : Quantifiers - x{n}, x{n,}, x{n,}",
		"description": "<p><strong><span>Quantifiers</span></strong><span> indicate numbers of characters or expressions to match.</span></p><pre><code>x{n}</code></pre><p><span>Where </span><code>n</code><span> is a positive integer, matches </span><strong><span>exactly</span></strong><span> </span><code>n</code><span> occurrences of the preceding item </span><code>x</code><span>.</span></p><pre><code>\"candy\".match(/a{2}/) ➞ null\n\"caandy\".match(/a{2}/) ➞ \"aa\"</code></pre><pre><code>x{n,}</code></pre><p><span>Where </span><code>n</code><span> is a positive integer, matches </span><strong><span>at least</span></strong><span> </span><code>n</code><span> occurrences of the preceding item </span><code>x</code><span>.</span></p><pre><code>\"candy\".match(/a{2,}/) ➞ null\n\"caandy\".match(/a{2,}/) ➞ \"aa\"\n\"caaaaaandy\".match(/a{2,}/) ➞ \"aaaaaa\"</code></pre><pre><code>x{n,m}</code></pre><p><span>Where </span><code>n</code><span> is 0 or a positive integer, </span><code>m</code><span> is a positive integer, and </span><code>m &gt; n</code><span>, matches </span><strong><span>at least</span></strong><span> </span><code>n</code><span> </span><strong><span>and at most</span></strong><span> </span><code>m</code><span> occurrences of the preceding item </span><code>x</code><span>.</span></p><pre><code>\"cndy\".match(/a{1,3}/) ➞ null\n\"candy\".match(/a{1,3}/) ➞ \"a\"\n\"caandy\".match(/a{1,3}/) ➞ \"aa\"\n\"caaaaaaaaaaandy\".match(/a{1,3}/) ➞ \"aaa\"</code></pre><p><span>Create a RegExp to find ellipsis: 3 (or more?) dots in a row. Use one of the 3 quantifiers above in your solution.</span></p><pre><code>\"Hello!... Wait. How goes?..... GoodBye!..\".match(/REGEXP/g) ➞ \"..., .....\"</code></pre><h3><span>Notes</span></h3><p><span>Check out the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = \"Hello!... Wait. How goes?..... GoodBye!..\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\{.*\\}/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"    return str.match(REGEXP);",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str), \"invalid\", \"You are require to use a quantifier in set your expression.\")",
			"Test.assertSimilar(testExp(str), [\"...\", \".....\"])",
			"​",
			"// credits to https://javascript.info/regexp-quantifiers"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/5vsYNXXQ7aXzQMMpQ"
	},
	{
		"title": "Recursion: Factorials",
		"description": "<p><span>Write a function that calculates the </span><strong><span>factorial</span></strong><span> of a number </span><strong><span>recursively</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>factorial(5) ➞ 120\n\nfactorial(3) ➞ 6\n\nfactorial(1) ➞ 1\n\nfactorial(0) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(factorial(5), 120)",
			"Test.assertEquals(factorial(3), 6)",
			"Test.assertEquals(factorial(1), 1)",
			"Test.assertEquals(factorial(0), 1)"
		],
		"starterFn": [
			"1\nfunction factorial(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rgXMMHEmbh2MCKSrM"
	},
	{
		"title": "Adding Numbers in a String",
		"description": "<p><span>Given a string of numbers separated by a </span><em><span>comma and space</span></em><span>, return the </span><strong><span>total</span></strong><span> of all the numbers.</span></p><h3><span>Examples</span></h3><pre><code>addNums(\"2, 5, 1, 8, 4\") ➞ 20\n\naddNums(\"1, 2, 3, 4, 5, 6, 7\") ➞ 28\n\naddNums(\"10\") ➞ 10</code></pre><h3><span>Notes</span></h3><ul><li><span>Numbers will always be separated by a comma and space.</span></li><li><span>Your function should accept negative numbers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(addNums(\"2, 5, 1, 8, 4\"), 20)",
			"Test.assertEquals(addNums(\"1, 2, 3, 4, 5, 6, 7\"), 28)",
			"Test.assertEquals(addNums(\"10\"), 10)",
			"Test.assertEquals(addNums(\"-12, -8, 2, 11, -16, 16\"), -7)",
			"Test.assertEquals(addNums(\"25, -4, -15, -7, 27, 12, 29, -6, 20, 9\"), 90)",
			"Test.assertEquals(addNums(\"24, 7, -15, -28, -21, 6, 5, -6, 23, 24, -22, 30, -21, -10, -10, -12, 24, -18, -13, -27, 22, -30, -11, -13, 6, 7, 27, 1\"), -51)",
			"Test.assertEquals(addNums(\"-17, -18, -18, -14, -8, 0, 12, 2, 10, 5, -8, 12, -17, 8, -5, -23, 2, 29, -30, 13, -22, 19, 13, -18, -8\"), -81)",
			"Test.assertEquals(addNums(\"16, 8, 19, 25, 18, 26, 2, 14\"), 128)",
			"Test.assertEquals(addNums(\"-18, -10, 9, 12, -16, 22, 2, 17, 10, -25, 1, -25, -15, -29, 12, 11, 4\"), -38)",
			"Test.assertEquals(addNums(\"12, -30, 26, -18, -4, 25, 19, -22, 7, -17, 3, -30, -27, 10, -12, -12, -24\"), -94)",
			"Test.assertEquals(addNums(\"0, 21, 20, 0, 26, -9, 12, -9, 20\"), 81)",
			"Test.assertEquals(addNums(\"-27, 28, -9, -9, 4, -22, -13, 0, -2, 19, 9, 5, 20, 21, -3, 22, 6, -10, -1, -12, 2\"), 28)",
			"Test.assertEquals(addNums(\"13, -29, 13, 22, 23, 14, 2\"), 58)",
			"Test.assertEquals(addNums(\"-18, 3, 30, 13, 20, -23, -18, -27, -30, 1, -19, -3, -19, -22, -1\"), -113)",
			"Test.assertEquals(addNums(\"18, 20, 11, -7, -1, -7, -17, -3, 25, 23, 25, 6, 7, -1, -11, -24, -19, -18, 8, 24, 29, 19, 13, 0, -19, -25, -2, 8\"), 82)",
			"Test.assertEquals(addNums(\"-13, -30, -1, -9, -25, -9, 11, -28, 0, 10, -23, -20, -5, 21, -29, 6, 20, -23, -23, -24, 30, -14, 24\"), -154)",
			"Test.assertEquals(addNums(\"5, -16\"), -11)",
			"Test.assertEquals(addNums(\"-28, -1, 12, 15, 16, -11, 23\"), 26)",
			"Test.assertEquals(addNums(\"16, -3, 15, -20\"), 8)",
			"Test.assertEquals(addNums(\"10, -2, -3, 6, -17, -8, -4, -9, -19, -13, 9, 19, 26, 26, -23, 5, 4, 2, -22, -10, 3, 11, -1, 10, 2, 23\"), 25)",
			"Test.assertEquals(addNums(\"-19, -25, -27, 27, -16, -29, 19, -30, -18\"), -118)",
			"Test.assertEquals(addNums(\"-28, 14, -19, -24, -17, 30, -1, 8, -13, -21, -4, 29, 4, 6, 29, -23, -9, -26, 8, -20, -14, -22\"), -113)",
			"Test.assertEquals(addNums(\"-28, -11, -29\"), -68)",
			"Test.assertEquals(addNums(\"18, -10, 22, -17, -6, -20, -25, -23, -1, 22, -16, 0, -24, 26, 20, 21, 3, -27, -24, -5, -28, -4, -3, 16, -18, 19, 26, -29\"), -87)",
			"Test.assertEquals(addNums(\"-14, -25, -29, 3, 7, 11, 27, 12, -23, -12, 1, -17, -17, 4, 21, -29\"), -80)",
			"Test.assertEquals(addNums(\"-4, 4, 11, 18, 3, -15, 19, 25, 29\"), 90)"
		],
		"starterFn": [
			"1\nfunction addNums(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qKQ8Bn6ontrLTTNsr"
	},
	{
		"title": "RegEx: Boundary Assertions I",
		"description": "<p><span>Assume a program only reads </span><em><span>.js</span></em><span> or </span><em><span>.jsx</span></em><span> files. Write a function that accepts a file path and returns </span><code>true</code><span> if it can read the file and </span><code>false</code><span> if it can't.</span></p><h3><span>Examples</span></h3><pre><code>isJS(\"/users/user.jsx\") ➞ true\n\nisJS(\"/users/user.js\") ➞ true\n\nisJS(\"/users/user.ts\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Use a RegEx boundary assertion in your function.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isJS(\"/users/user.jsx\"), true)",
			"Test.assertEquals(isJS(\"/users/user.js\"), true)",
			"Test.assertEquals(isJS(\"/users/user.ts\"), false)",
			"Test.assertEquals(isJS(\"/users/user.jpg\"), false)",
			"Test.assertEquals(isJS(\"/users/user.ext\"), false)",
			"Test.assertEquals(isJS(\"/users/user.php\"), false)"
		],
		"starterFn": [
			"1\nfunction isJS(path) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AWENJSwyhcceiKvQX"
	},
	{
		"title": "Return the Factorial",
		"description": "<p><span>Create a function that takes an integer and returns the factorial of that integer. That is, the integer multiplied by all positive lower integers.</span></p><h3><span>Examples</span></h3><pre><code>factorial(3) ➞ 6\n\nfactorial(5) ➞ 120\n\nfactorial(13) ➞ 6227020800</code></pre><h3><span>Notes</span></h3><p><span>Assume all inputs are greater than or equal to 0.</span></p>",
		"publishedBy": "SpiralStudios",
		"publishedByUrl": "https://edabit.com/user/a53oGxJAuyuRrx3E8",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(factorial(2), 2)",
			"Test.assertEquals(factorial(6), 720)",
			"Test.assertEquals(factorial(3), 6)",
			"Test.assertEquals(factorial(12), 479001600)",
			"Test.assertEquals(factorial(5), 120)"
		],
		"starterFn": [
			"1\nfunction factorial(int) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GW5kYFCvGWDZ6TRxd"
	},
	{
		"title": "Absolute Sum",
		"description": "<p><span>Take an array of integers (positive or negative or both) and return the sum of the absolute value of each element.</span></p><h3><span>Examples</span></h3><pre><code>getAbsSum([2, -1, 4, 8, 10]) ➞ 25\n\ngetAbsSum([-3, -4, -10, -2, -3]) ➞ 22\n\ngetAbsSum([2, 4, 6, 8, 10]) ➞ 30\n\ngetAbsSum([-1]) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>The term \"absolute value\" means to remove any negative sign in front of a number, and to think of all numbers as positive (or zero).</span></p>",
		"publishedBy": "gabe",
		"publishedByUrl": "https://edabit.com/user/GbE4ff9CcHwyqzJFh",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(getAbsSum([2, -1, -3, 4, 8]), 18);",
			"Test.assertEquals(getAbsSum([-1]), 1);",
			"Test.assertEquals(getAbsSum([-1, -3, -5, -4, -10, 0]), 23);",
			"Test.assertEquals(getAbsSum([8, 9, 10, 32, 101, -10]), 170);",
			"Test.assertEquals(getAbsSum([500]), 500);"
		],
		"starterFn": [
			"1\nfunction getAbsSum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rCmEy2AQYLbRGgKyL"
	},
	{
		"title": "Algorithms I: Introduction to Recursion",
		"description": "<p><span>Welcome to the beginning of this collection on </span><em><span>Computer Science Algorithms</span></em><span>. Admittedly there are other challenges on Edabit that deal with recursion and algorithmic processes, but these particular challenges are designed to give examples and to educate users on the topics being covered.</span></p><h3><span>Recursion</span></h3><p><span>In computer science, \"recursion\" is the act of writing a function that calls itself from within its own code. The function below better helps explain and illustrate recursion by simply counting down from a given number to zero:</span></p><pre><code>function factorial(num) {\n  let targetNumber = 0\n\n  if (num == targetNumber)\n    {console.log(\"Countdown complete!\")}\n  else\n    {factorial(num - 1)}\n}</code></pre><h3><span>Explanation</span></h3><p><span>The above function starts by initializing the target number, which is zero, then it creates a base case by checking if the inputted number has reached the target number yet. If it has, then the function ends and it prints the statement, else the function inputs num subtracted by one and then runs the function again.</span></p><p><span>When using recursive functions a \"Base Case\" is needed. A base case will stop the function once it reaches its intended goal. In the absence of a base case, the program can either crash due to \"Stack Overflow\" or by initiating an \"Infinite Loop.\"</span></p><p><span>On a side note, initializing variables in recursive functions can sometimes be problematic because when the function runs again it will reset the value of that variable. For this specific recursive function the variable works fine because the target number we're trying to reach is consistently zero.</span></p><h3><span>Instructions</span></h3><p><span>The recursive function for this challenge should return the factorial of an inputted integer. If anyone needs a refresher, factorials in mathematics are represented by an exclamation point placed to the right of a number:  </span><code>4! = 4 x 3 x 2 x 1 = 24</code></p><h3><span>Examples</span></h3><pre><code>factorial(5) ➞ 120\n\nfactorial(3) ➞ 6\n\nfactorial(2) ➞ 2</code></pre><h3><span>Notes</span></h3><ul><li><span>Puts statements can be added to the Countdown function example for illustrative purposes if need be.</span></li><li><span>Terms that are placed in italics (\"example\"), while not always necessary to completing the challenge, can be helpful or just generally good to know as an aspiring programmer or computer science student/enthusiast.</span></li><li><span>Several of the challenges that will be covered in this collection on algorithms can be solved non-recursively and without implementing the algorithms described in each challenge. I implore anyone solving these challenges to do them as intended. Not understanding the concepts taught will be an obstacle to later challenges and won't aid anyone in advancing their skills as a programmer.</span></li><li><span>If you are stuck please check the </span><strong><span>Resources</span></strong><span> tab, </span><strong><span>Comments</span></strong><span> tab, or if you're really stuck, use the </span><strong><span>Solutions</span></strong><span> tab to unlock the answers.</span></li></ul>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(factorial(7), 5040)",
			"Test.assertEquals(factorial(1), 1)",
			"Test.assertEquals(factorial(9), 362880)",
			"Test.assertEquals(factorial(2), 2)"
		],
		"starterFn": [
			"1\nfunction factorial(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vtDnynHfWCnMaKYym"
	},
	{
		"title": "Printer Levels",
		"description": "<p><span>Given an object of how many more pages each ink color can print, output the maximum number of pages the printer can print before any of the colors run out.</span></p><h3><span>Examples</span></h3><pre><code>inkLevels({\n  \"cyan\": 23,\n  \"magenta\": 12,\n  \"yellow\": 10\n}) ➞ 10\n\ninkLevels({\n  \"cyan\": 432,\n  \"magenta\": 543,\n  \"yellow\": 777\n}) ➞ 432\n\ninkLevels({\n  \"cyan\": 700,\n  \"magenta\": 700,\n  \"yellow\": 0\n}) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>A single printed page requires each color once, so printing is not possible if any of the slots lack ink (see example #3).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"objects"
		],
		"tests": [
			"Test.assertEquals(inkLevels({",
			"  \"cyan\": 23,",
			"  \"magenta\": 12,",
			"  \"yellow\": 10",
			"}), 10);",
			"​",
			"Test.assertEquals(inkLevels({",
			"  \"cyan\": 432,",
			"  \"magenta\": 543,",
			"  \"yellow\": 777",
			"}), 432);",
			"​",
			"Test.assertEquals(inkLevels({",
			"  \"cyan\": 700,",
			"  \"magenta\": 700,",
			"  \"yellow\": 0",
			"}), 0);",
			"​",
			"Test.assertEquals(inkLevels({",
			"  \"cyan\": 70,",
			"  \"magenta\": 700,",
			"  \"yellow\": 1",
			"}), 1);",
			"​",
			"Test.assertEquals(inkLevels({",
			"  \"cyan\": 6543,"
		],
		"starterFn": [
			"1\nfunction inkLevels(inks) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QXWM2oo7rQNiyDsip"
	},
	{
		"title": "Sum of Cubes",
		"description": "<p><span>Create a function that takes in an array of numbers and returns the sum of its cubes.</span></p><h3><span>Examples</span></h3><pre><code>sumOfCubes([1, 5, 9]) ➞ 855\n// Since 1^3 + 5^3 + 9^3 = 1 + 125 + 729 = 855\n\nsumOfCubes([3, 4, 5]) ➞ 216\n\nsumOfCubes([2]) ➞ 8\n\nsumOfCubes([]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>If given an empty array, return </span><code>0</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(sumOfCubes([1, 5, 9]), 855)",
			"Test.assertEquals(sumOfCubes([3, 4, 5]), 216)",
			"Test.assertEquals(sumOfCubes([1, 1, 1]), 3)",
			"Test.assertEquals(sumOfCubes([2]), 8)",
			"Test.assertEquals(sumOfCubes([5, 1, 2]), 134)",
			"Test.assertEquals(sumOfCubes([32]), 32768)",
			"Test.assertEquals(sumOfCubes([5, 9, 4, 4, 9]), 1711)",
			"Test.assertEquals(sumOfCubes([0, 1, 2]), 9)",
			"Test.assertEquals(sumOfCubes([]), 0)"
		],
		"starterFn": [
			"1\nfunction sumOfCubes(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XdAR3KohR5w7rjrFg"
	},
	{
		"title": "How Many Vowels?",
		"description": "<p><span>Create a function that takes a string and returns the number (count) of vowels contained within it.</span></p><h3><span>Examples</span></h3><pre><code>countVowels(\"Celebration\") ➞ 5\n\ncountVowels(\"Palm\") ➞ 1\n\ncountVowels(\"Prediction\") ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>a, e, i, o, u are considered vowels (not y).</span></li><li><span>All test cases are one word and only contain letters.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countVowels(\"Celebration\"), 5)",
			"Test.assertEquals(countVowels(\"Palm\"), 1)",
			"Test.assertEquals(countVowels(\"Prediction\"), 4)",
			"Test.assertEquals(countVowels(\"Suite\"), 3)",
			"Test.assertEquals(countVowels(\"Quote\"), 3)",
			"Test.assertEquals(countVowels(\"Portrait\"), 3)",
			"Test.assertEquals(countVowels(\"Steam\"), 2)",
			"Test.assertEquals(countVowels(\"Tape\"), 2)",
			"Test.assertEquals(countVowels(\"Nightmare\"), 3)",
			"Test.assertEquals(countVowels(\"Convention\"), 4)"
		],
		"starterFn": [
			"1\nfunction countVowels(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3EQGHyiYTNc9LPmhF"
	},
	{
		"title": "Scrabble Hand",
		"description": "<p><span>Given an array of scrabble tiles, create a function that outputs the maximum possible score a player can achieve by summing up the total number of points for all the tiles in their hand. Each hand contains 7 scrabble tiles.</span></p><p><span>Here's an example hand:</span></p><pre><code>[\n  { tile: \"N\", score: 1 },\n  { tile: \"K\", score: 5 },\n  { tile: \"Z\", score: 10 },\n  { tile: \"X\", score: 8 },\n  { tile: \"D\", score: 2 },\n  { tile: \"A\", score: 1 },\n  { tile: \"E\", score: 1 }\n]</code></pre><p><span>The players maximumScore from playing all these tiles would be 1 + 5 + 10 + 8 + 2 + 1 + 1, or 28.</span></p><h3><span>Examples</span></h3><pre><code>maximumScore([\n  { tile: \"N\", score: 1 },\n  { tile: \"K\", score: 5 },\n  { tile: \"Z\", score: 10 },\n  { tile: \"X\", score: 8 },\n  { tile: \"D\", score: 2 },\n  { tile: \"A\", score: 1 },\n  { tile: \"E\", score: 1 }\n]) ➞ 28\n\nmaximumScore([\n  { tile: \"B\", score: 2 },\n  { tile: \"V\", score: 4 },\n  { tile: \"F\", score: 4 },\n  { tile: \"U\", score: 1 },\n  { tile: \"D\", score: 2 },\n  { tile: \"O\", score: 1 },\n  { tile: \"U\", score: 1 }\n]) ➞ 15</code></pre><h3><span>Notes</span></h3><p><span>Here, each tile is represented as an object with two keys: tile and score.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"games",
			"loops",
			"math",
			"objects"
		],
		"tests": [
			"Test.assertEquals(maximumScore([{tile: 'N', score: 1}, {tile: 'K', score: 5},  {tile: 'Z', score: 10}, {tile: 'X', score: 8}, {tile: 'D', score: 2}, {tile: 'A', score: 1}, {tile: 'E', score: 1}]), 28);",
			"Test.assertEquals(maximumScore([{tile: 'B', score: 2}, {tile: 'V', score: 4},  {tile: 'F', score: 4}, {tile: 'U', score: 1}, {tile: 'D', score: 2}, {tile: 'O', score: 1}, {tile: 'U', score: 1}]), 15);",
			"Test.assertEquals(maximumScore([{tile: 'M', score: 3}, {tile: 'Q', score: 10},  {tile: 'O', score: 1}, {tile: 'E', score: 1}, {tile: 'E', score: 1}, {tile: 'I', score: 1}, {tile: 'A', score: 1}]), 18);",
			"Test.assertEquals(maximumScore([{tile: 'A', score: 1}, {tile: 'E', score: 1},  {tile: 'O', score: 1}, {tile: 'E', score: 1}, {tile: 'E', score: 1}, {tile: 'I', score: 1}, {tile: 'A', score: 1}]), 7);"
		],
		"starterFn": [
			"1\nfunction maximumScore(tileHand) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/i6YqzHcSiPiEQKjeX"
	},
	{
		"title": "Pi to N Decimal Places",
		"description": "<p><span>Given a number </span><code>n</code><span>, write a function that returns PI to </span><code>n</code><span> decimal places.</span></p><h3><span>Examples</span></h3><pre><code>myPi(5) ➞ 3.14159\n\nmyPi(4) ➞ 3.1416\n\nmyPi(15) ➞ 3.141592653589793</code></pre><h3><span>Notes</span></h3><ul><li><code>n</code><span> will not be above 15, to keep this challenge simple.</span></li><li><span>Round up the last digit if the next digit in PI is greater or equal to 5 (see second example above).</span></li><li><span>The return value must be a number, not a string.</span></li></ul>",
		"publishedBy": "joe111",
		"publishedByUrl": "https://edabit.com/user/E3bAbAjwFzekBoMGD",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(myPi(0), 3)",
			"Test.assertEquals(myPi(1), 3.1)",
			"Test.assertEquals(myPi(2), 3.14)",
			"Test.assertEquals(myPi(3), 3.142)",
			"Test.assertEquals(myPi(5), 3.14159)",
			"Test.assertEquals(myPi(6), 3.141593)",
			"Test.assertEquals(myPi(7), 3.1415927)",
			"Test.assertEquals(myPi(8), 3.14159265)",
			"Test.assertEquals(myPi(9), 3.141592654)",
			"Test.assertEquals(myPi(10), 3.1415926536)",
			"Test.assertEquals(myPi(11), 3.14159265359)",
			"Test.assertEquals(myPi(12), 3.141592653590)",
			"Test.assertEquals(myPi(13), 3.1415926535898)",
			"Test.assertEquals(myPi(14), 3.14159265358979)",
			"Test.assertEquals(myPi(15), 3.141592653589793)"
		],
		"starterFn": [
			"1\nfunction myPi(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Y8vbWzFb2GcyQ3hMm"
	},
	{
		"title": "Is the Average of All Elements a Whole Number?",
		"description": "<p><span>Create a function that takes an array as an argument and returns </span><code>true</code><span> or </span><code>false</code><span> depending on whether the average of all elements in the array is a whole number or not.</span></p><h3><span>Examples</span></h3><pre><code>isAvgWhole([1, 3]) ➞ true\n\nisAvgWhole([1, 2, 3, 4]) ➞ false\n\nisAvgWhole([1, 5, 6]) ➞ true\n\nisAvgWhole([1, 1, 1]) ➞ true\n\nisAvgWhole([9, 2, 2, 5]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isAvgWhole([3, 5, 9]), false);",
			"Test.assertEquals(isAvgWhole([1, 1, 1, 1]), true);",
			"Test.assertEquals(isAvgWhole([1, 2, 3, 4, 5]), true);",
			"Test.assertEquals(isAvgWhole([5, 2, 4]), false);",
			"Test.assertEquals(isAvgWhole([11, 22]), false);",
			"Test.assertEquals(isAvgWhole([4, 1, 7, 9, 2, 5, 7, 2, 4]), false);"
		],
		"starterFn": [
			"1\nfunction isAvgWhole(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/arzsQcGsstJxHAnGi"
	},
	{
		"title": "Regex Series: Even Number?",
		"description": "<p><span>Write a regular expression that matches only an </span><strong><span>even number</span></strong><span>. Numbers will be presented as strings.</span></p><h3><span>Examples</span></h3><pre><code>\"2341\" ➞ false\n\n\"132\" ➞ true\n\n\"29\" ➞ false\n\n\"5578\" ➞ true</code></pre><h3><span>Notes</span></h3><p><span>This challenge is designed to use </span><strong><span>Regex only</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"function validate(num) {",
			"  return x.test(num); ",
			"}",
			"​",
			"describe(\"Deterministic Tests\", function() {",
			"  Test.expect(!validate(\"2341\"), \"2341 is odd.\")",
			"  Test.expect(validate(\"132\"), \"132 is even.\")",
			"  Test.expect(!validate(\"29\"), \"29 is odd.\")",
			"  Test.expect(validate(\"5578\"), \"5578 is even.\")",
			"})",
			"​",
			"describe(\"Randomized Tests: Passing\", function() {",
			"  for (let i = 0; i < 5; i++) {",
			"    let x = Math.ceil(Math.random()*7000)*2; ",
			"    Test.expect(validate(x.toString()), `${x} is even.`);",
			"  }",
			"})",
			"​",
			"describe(\"Randomized Tests: Failing\", function() {",
			"  for (let i = 0; i < 5; i++) {",
			"    let x = Math.ceil(Math.random()*7000)*2 + 1; ",
			"    Test.expect(!validate(x.toString()), `${x} is odd.`);",
			"  }",
			"})"
		],
		"starterFn": [
			"1\nlet x = /* Write the regular expression */"
		],
		"url": "https://edabit.com/challenge/pQh6uEM2Dp3BjAyzS"
	},
	{
		"title": "Secret Society",
		"description": "<p><span>A group of friends have decided to start a secret society. The name will be the first letter of each of their names, sorted in alphabetical order.</span></p><p><span>Create a function that takes in an array of names and returns the name of the secret society.</span></p><h3><span>Examples</span></h3><pre><code>societyName([\"Adam\", \"Sarah\", \"Malcolm\"]) ➞ \"AMS\"\n\nsocietyName([\"Harry\", \"Newt\", \"Luna\", \"Cho\"]) ➞ \"CHLN\"\n\nsocietyName([\"Phoebe\", \"Chandler\", \"Rachel\", \"Ross\", \"Monica\", \"Joey\"]) ➞ \"CJMPRR\"</code></pre><h3><span>Notes</span></h3><p><span>The secret society's name should be entirely uppercased.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(societyName(['Adam', 'Sarah', 'Malcolm']), 'AMS')",
			"Test.assertEquals(societyName(['Phoebe', 'Chandler', 'Rachel', 'Ross', 'Monica', 'Joey']), 'CJMPRR')",
			"Test.assertEquals(societyName(['Harry', 'Newt', 'Luna', 'Cho']), 'CHLN')",
			"Test.assertEquals(societyName(['Sherlock', 'Irene', 'John']), 'IJS')",
			"Test.assertEquals(societyName(['Sheldon', 'Amy', 'Penny', 'Howard', 'Raj']), 'AHPRS')"
		],
		"starterFn": [
			"1\nfunction societyName(friends) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zQm9YZTTFPhNtYjDr"
	},
	{
		"title": "Find the Largest Numbers in a Group of Arrays",
		"description": "<p><span>Create a function that takes an array of arrays with numbers. Return a new (single) array with the largest numbers of each.</span></p><h3><span>Examples</span></h3><pre><code>findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]) ➞ [7, 90, 2]\n\nfindLargestNums([[-34, -54, -74], [-32, -2, -65], [-54, 7, -43]]) ➞ [-34, -2, 7]\n\nfindLargestNums([[0.4321, 0.7634, 0.652], [1.324, 9.32, 2.5423, 6.4314], [9, 3, 6, 3]]) ➞ [0.7634, 9.32, 9]</code></pre><h3><span>Notes</span></h3><p><span>Watch out for negative integers (numbers).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(findLargestNums([[4, 2, 7, 1], [20, 70, 40, 90], [1, 2, 0]]), [7, 90, 2])",
			"Test.assertSimilar(findLargestNums([[0.4321, 0.7634, 0.652], [1.324, 9.32, 2.5423, 6.4314], [9, 3, 6, 3]]), [0.7634, 9.32, 9])",
			"Test.assertSimilar(findLargestNums([[-34, -54, -74], [-32, -2, -65], [-54, 7, -43]]), [-34, -2, 7])",
			"Test.assertSimilar(findLargestNums([[0.34, -5, 1.34], [-6.432, -1.762, -1.99], [32, 65, -6]]), [1.34, -1.762, 65])",
			"Test.assertSimilar(findLargestNums([[0, 0, 0, 0], [3, 3, 3, 3], [-2, -2]]), [ 0, 3, -2 ])"
		],
		"starterFn": [
			"1\nfunction findLargestNums(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/h7LTMAFeNz79rXB2Y"
	},
	{
		"title": "Sort Numbers in Ascending Order",
		"description": "<p><span>Create a function that takes an array of numbers and returns a new array, sorted in ascending order (smallest to biggest).</span></p><ul><li><span>Sort numbers array in ascending order.</span></li><li><span>If the function's argument is null, an empty array, or undefined; return an empty array.</span></li><li><span>Return a new array of sorted numbers.</span></li></ul><h3><span>Examples</span></h3><pre><code>sortNumsAscending([1, 2, 10, 50, 5]) ➞ [1, 2, 5, 10, 50]\n\nsortNumsAscending([80, 29, 4, -95, -24, 85]) ➞ [-95, -24, 4, 29, 80, 85]\n\nsortNumsAscending(null) ➞ []\n\nsortNumsAscending([]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Test input can be positive or negative.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(sortNumsAscending([1, 2, 10, 50, 5]), [1, 2, 5, 10, 50])",
			"Test.assertSimilar(sortNumsAscending([80, 29, 4, -95, -24, 85]), [-95, -24, 4, 29, 80, 85])",
			"Test.assertSimilar(sortNumsAscending(null), [])",
			"Test.assertSimilar(sortNumsAscending([]), [])",
			"Test.assertSimilar(sortNumsAscending([47, 51, -17, -16, 91, 47, -85, -8, -16, -27]), [-85, -27, -17, -16, -16, -8, 47, 47, 51, 91])",
			"Test.assertSimilar(sortNumsAscending([-51, -73, 65, 69, -76, 74, -14]), [-76, -73, -51, -14, 65, 69, 74])",
			"Test.assertSimilar(sortNumsAscending([45, 98, 35, 65, 97, 21, 33]), [21, 33, 35, 45, 65, 97, 98])",
			"Test.assertSimilar(sortNumsAscending([-23, -69, -54, -2, -32]), [-69, -54, -32, -23, -2])",
			"Test.assertSimilar(sortNumsAscending([-21, -9, -96]), [-96, -21, -9])",
			"Test.assertSimilar(sortNumsAscending([0]), [0])"
		],
		"starterFn": [
			"1\nfunction sortNumsAscending(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SS23vniCZ6ssGwsQP"
	},
	{
		"title": "Return the Index of the First Vowel",
		"description": "<p><span>Create a function that returns the index of the first vowel in a string.</span></p><h3><span>Examples</span></h3><pre><code>firstVowel(\"apple\") ➞ 0\n\nfirstVowel(\"hello\") ➞ 1\n\nfirstVowel(\"STRAWBERRY\") ➞ 3\n\nfirstVowel(\"pInEaPPLe\") ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Input will be single words.</span></li><li><span>Characters in words will be upper or lower case.</span></li><li><span>\"y\" is not considered a vowel.</span></li><li><span>Input always contains a vowel.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(firstVowel(\"hello\"), 1)",
			"Test.assertEquals(firstVowel(\"apple\"), 0)",
			"Test.assertEquals(firstVowel(\"string\"), 3)",
			"Test.assertEquals(firstVowel(\"STRAWBERRY\"), 3)",
			"Test.assertEquals(firstVowel(\"MELON\"), 1)",
			"Test.assertEquals(firstVowel(\"piNNEaPLE\"), 1)"
		],
		"starterFn": [
			"1\nfunction firstVowel(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ppBDRwSoqZYcR95Aq"
	},
	{
		"title": "Remove Every Vowel from a String",
		"description": "<p><span>Create a function that takes a string and returns a new string with all vowels removed.</span></p><h3><span>Examples</span></h3><pre><code>removeVowels(\"I have never seen a thin person drinking Diet Coke.\")\n➞ \" hv nvr sn  thn prsn drnkng Dt Ck.\"\n\nremoveVowels(\"We're gonna build a wall!\")\n➞ \"W'r gnn bld  wll!\"\n\nremoveVowels(\"Happy Thanksgiving to all--even the haters and losers!\")\n➞ \"Hppy Thnksgvng t ll--vn th htrs nd lsrs!\"</code></pre><h3><span>Notes</span></h3><p><span>\"y\" is not considered a vowel.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeVowels(\"If Obama resigns from office NOW, thereby doing a great service to the country—I will give him free lifetime golf at any one of my courses!\"), \"f bm rsgns frm ffc NW, thrby dng  grt srvc t th cntry— wll gv hm fr lftm glf t ny n f my crss!\")",
			"Test.assertEquals(removeVowels(\"This election is a total sham and a travesty. We are not a democracy!\"), \"Ths lctn s  ttl shm nd  trvsty. W r nt  dmcrcy!\")",
			"Test.assertEquals(removeVowels(\"I have never seen a thin person drinking Diet Coke.\"), \" hv nvr sn  thn prsn drnkng Dt Ck.\")",
			"Test.assertEquals(removeVowels(\"Everybody wants me to talk about Robert Pattinson and not Brian Williams—I guess people just don’t care about Brian!\"), \"vrybdy wnts m t tlk bt Rbrt Pttnsn nd nt Brn Wllms— gss ppl jst dn’t cr bt Brn!\")",
			"Test.assertEquals(removeVowels(\"Katy, what the hell were you thinking when you married loser Russell Brand. There is a guy who has got nothing going, a waste!\"), \"Kty, wht th hll wr y thnkng whn y mrrd lsr Rssll Brnd. Thr s  gy wh hs gt nthng gng,  wst!\")",
			"Test.assertEquals(removeVowels(\"Windmills are the greatest threat in the US to both bald and golden eagles. Media claims fictional ‘global warming’ is worse.\"), \"Wndmlls r th grtst thrt n th S t bth bld nd gldn gls. Md clms fctnl ‘glbl wrmng’ s wrs.\")",
			"Test.assertEquals(removeVowels(\"Sorry losers and haters, but my I.Q. is one of the highest -and you all know it! Please don’t feel so stupid or insecure,it’s not your fault\"), \"Srry lsrs nd htrs, bt my .Q. s n f th hghst -nd y ll knw t! Pls dn’t fl s stpd r nscr,t’s nt yr flt\")",
			"Test.assertEquals(removeVowels(\"Happy Thanksgiving to all--even the haters and losers!\"), \"Hppy Thnksgvng t ll--vn th htrs nd lsrs!\")",
			"Test.assertEquals(removeVowels(\"Watch Kasich squirm --- if he is not truthful in his negative ads I will sue him just for fun!\"), \"Wtch Ksch sqrm --- f h s nt trthfl n hs ngtv ds  wll s hm jst fr fn!\")",
			"Test.assertEquals(removeVowels(\"Obama is, without question, the WORST EVER president. I predict he will now do something really bad and totally stupid to show manhood!\"), \"bm s, wtht qstn, th WRST VR prsdnt.  prdct h wll nw d smthng rlly bd nd ttlly stpd t shw mnhd!\")"
		],
		"starterFn": [
			"1\nfunction removeVowels(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DbLp2kHgwQbridSSy"
	},
	{
		"title": "Phone Number Formatting",
		"description": "<p><span>Create a function that takes an array of 10 numbers (between 0 and 9) and returns a string of those numbers formatted as a phone number (e.g. </span><strong><span>(555) 555-5555</span></strong><span>).</span></p><h3><span>Examples</span></h3><pre><code>formatPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) ➞ \"(123) 456-7890\"\n\nformatPhoneNumber([5, 1, 9, 5, 5, 5, 4, 4, 6, 8]) ➞ \"(519) 555-4468\"\n\nformatPhoneNumber([3, 4, 5, 5, 0, 1, 2, 5, 2, 7]) ➞ \"(345) 501-2527\"</code></pre><h3><span>Notes</span></h3><p><span>Don't forget the space after the closing parenthesis.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(formatPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), \"(123) 456-7890\")",
			"Test.assertSimilar(formatPhoneNumber([5, 1, 9, 5, 5, 5, 4, 4, 6, 8]), \"(519) 555-4468\")",
			"Test.assertSimilar(formatPhoneNumber([3, 4, 5, 5, 0, 1, 2, 5, 2, 7]), \"(345) 501-2527\")",
			"Test.assertSimilar(formatPhoneNumber([6, 6, 2, 5, 8, 8, 7, 0, 4, 3]), \"(662) 588-7043\")",
			"Test.assertSimilar(formatPhoneNumber([5, 1, 0, 2, 6, 6, 3, 5, 8, 3]), \"(510) 266-3583\")",
			"Test.assertSimilar(formatPhoneNumber([4, 9, 7, 8, 8, 9, 1, 0, 1, 5]), \"(497) 889-1015\")",
			"Test.assertSimilar(formatPhoneNumber([6, 1, 9, 4, 7, 2, 8, 0, 7, 4]), \"(619) 472-8074\")",
			"Test.assertSimilar(formatPhoneNumber([7, 7, 3, 7, 8, 3, 6, 0, 8, 7]), \"(773) 783-6087\")",
			"Test.assertSimilar(formatPhoneNumber([9, 5, 3, 1, 3, 7, 4, 0, 0, 1]), \"(953) 137-4001\")",
			"Test.assertSimilar(formatPhoneNumber([2, 2, 6, 4, 0, 4, 4, 2, 9, 2]), \"(226) 404-4292\")"
		],
		"starterFn": [
			"1\nfunction formatPhoneNumber(numbers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Z6oY6EWwT9rde8YXm"
	},
	{
		"title": "Amplify the Multiples of Four",
		"description": "<p><span>In this challenge, you must generate a sequence of consecutive numbers, from a lower bound that will always be equal to 1, up to a variable given higher bound (including the bounds in the sequence).</span></p><p><span>Each number of the sequence that can be </span><strong><span>exactly divided by 4</span></strong><span> must be </span><strong><span>amplified by 10</span></strong><span> (</span><em><span>see notes below</span></em><span>).</span></p><p><span>Given a higher bound </span><code>num</code><span>, implement a function that returns an array with the sequence of numbers, after that every multiple of 4 has been amplified.</span></p><h3><span>Examples</span></h3><pre><code>amplify(4) ➞ [1, 2, 3, 40]\n// Create a sequence from 1 to 4\n// 4 is exactly divisible by 4, so it will be 4*10 = 40\n\namplify(3) ➞ [1, 2, 3]\n// Create a sequence from 1 to 3\n// There are no numbers that can be exactly divided by 4\n\namplify(25) ➞ [1, 2, 3, 40, 5, 6, 7, 80, 9, 10, 11, 120, 13, 14, 15, 160, 17, 18, 19, 200, 21, 22, 23, 240, 25]\n// Create a sequence from 1 to 25\n// The numbers exactly divisible by 4 are: 4 (4*10 = 40), 8 (8 * 10 = 80)... and so on.</code></pre><h3><span>Notes</span></h3><ul><li><span>The given parameter </span><code>num</code><span> will always be equal to or greater than 1.</span></li><li><span>Remember to include the </span><code>num</code><span> as the higher bound of the sequence (see the </span><strong><span>Examples</span></strong><span>) above.</span></li><li><span>A number </span><code>a</code><span> amplified by a factor </span><code>b</code><span> can also be read as: </span><code>a * b</code><span>.</span></li><li><span>A number </span><code>a</code><span> is exactly divisible by a number </span><code>b</code><span> when the </span><strong><span>remainder</span></strong><span> of the division </span><code>a / b</code><span> is equal to </span><code>0</code><span>.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(amplify(1), [1])",
			"Test.assertSimilar(amplify(4), [1, 2, 3, 40])",
			"Test.assertSimilar(amplify(25), [1, 2, 3, 40, 5, 6, 7, 80, 9, 10, 11, 120, 13, 14, 15, 160, 17, 18, 19, 200, 21, 22, 23, 240, 25])",
			"Test.assertSimilar(amplify(100), [1, 2, 3, 40, 5, 6, 7, 80, 9, 10, 11, 120, 13, 14, 15, 160, 17, 18, 19, 200, 21, 22, 23, 240, 25, 26, 27, 280, 29, 30, 31, 320, 33, 34, 35, 360, 37, 38, 39, 400, 41, 42, 43, 440, 45, 46, 47, 480, 49, 50, 51, 520, 53, 54, 55, 560, 57, 58, 59, 600, 61, 62, 63, 640, 65, 66, 67, 680, 69, 70, 71, 720, 73, 74, 75, 760,77, 78, 79, 800, 81, 82, 83, 840, 85, 86, 87, 880, 89, 90, 91,920, 93, 94, 95, 960, 97, 98, 99, 1000])",
			"Test.assertSimilar(amplify(333), [1, 2, 3, 40, 5, 6, 7, 80, 9, 10, 11, 120, 13, 14, 15, 160, 17, 18, 19, 200, 21, 22, 23, 240, 25, 26, 27, 280, 29, 30, 31, 320, 33, 34, 35, 360, 37, 38, 39, 400, 41, 42, 43, 440, 45, 46, 47, 480, 49, 50, 51, 520, 53, 54, 55, 560, 57, 58, 59, 600, 61, 62, 63, 640, 65, 66, 67, 680, 69, 70, 71, 720, 73, 74, 75, 760,77, 78, 79, 800, 81, 82, 83, 840, 85, 86, 87, 880, 89, 90, 91,920, 93, 94, 95, 960, 97, 98, 99, 1000, 101, 102, 103, 1040, 105, 106, 107, 1080, 109, 110, 111, 1120, 113, 114, 115, 1160, 117, 118, 119, 1200, 121, 122, 123, 1240, 125, 126, 127, 1280, 129, 130, 131, 1320, 133, 134, 135, 1360, 137, 138, 139, 1400, 141, 142, 143, 1440, 145, 146, 147, 1480, 149, 150, 151, 1520, 153, 154, 155, 1560, 157, 158, 159, 1600, 161, 162, 163, 1640, 165, 166, 167, 1680, 169, 170, 171, 1720, 173, 174, 175, 1760, 177, 178, 179, 1800, 181, 182, 183, 1840, 185, 186, 187, 1880, 189, 190, 191, 1920, 193, 194, 195, 1960, 197, 198, 199, 2000, 201, 202, 203, 2040, 205, 206, 207, 2080, 209, 210, 211, 2120, 213, 214, 215, 2160, 217, 218, 219, 2200, 221, 222, 223, 2240, 225, 226, 227, 2280, 229, 230, 231, 2320, 233, 234, 235, 2360, 237, 238, 239, 2400, 241, 242, 243, 2440, 245, 246, 247, 2480, 249, 250, 251, 2520, 253, 254, 255, 2560, 257, 258, 259, 2600, 261, 262, 263, 2640, 265, 266, 267, 2680, 269, 270, 271, 2720, 273, 274, 275, 2760, 277, 278, 279, 2800, 281, 282, 283, 2840, 285, 286, 287, 2880, 289, 290, 291, 2920, 293, 294, 295, 2960, 297, 298, 299, 3000, 301, 302, 303, 3040, 305, 306, 307, 3080, 309, 310, 311, 3120, 313, 314, 315, 3160, 317, 318, 319, 3200, 321, 322, 323, 3240, 325, 326, 327, 3280, 329, 330, 331, 3320, 333])",
			"Test.assertSimilar(amplify(500), [1, 2, 3, 40, 5, 6, 7, 80, 9, 10, 11, 120, 13, 14, 15, 160, 17, 18, 19, 200, 21, 22, 23, 240, 25, 26, 27, 280, 29, 30, 31, 320, 33, 34, 35, 360, 37, 38, 39, 400, 41, 42, 43, 440, 45, 46, 47, 480, 49, 50, 51, 520, 53, 54, 55, 560, 57, 58, 59, 600, 61, 62, 63, 640, 65, 66, 67, 680, 69, 70, 71, 720, 73, 74, 75, 760,77, 78, 79, 800, 81, 82, 83, 840, 85, 86, 87, 880, 89, 90, 91,920, 93, 94, 95, 960, 97, 98, 99, 1000, 101, 102, 103, 1040, 105, 106, 107, 1080, 109, 110, 111, 1120, 113, 114, 115, 1160, 117, 118, 119, 1200, 121, 122, 123, 1240, 125, 126, 127, 1280, 129, 130, 131, 1320, 133, 134, 135, 1360, 137, 138, 139, 1400, 141, 142, 143, 1440, 145, 146, 147, 1480, 149, 150, 151, 1520, 153, 154, 155, 1560, 157, 158, 159, 1600, 161, 162, 163, 1640, 165, 166, 167, 1680, 169, 170, 171, 1720, 173, 174, 175, 1760, 177, 178, 179, 1800, 181, 182, 183, 1840, 185, 186, 187, 1880, 189, 190, 191, 1920, 193, 194, 195, 1960, 197, 198, 199, 2000, 201, 202, 203, 2040, 205, 206, 207, 2080, 209, 210, 211, 2120, 213, 214, 215, 2160, 217, 218, 219, 2200, 221, 222, 223, 2240, 225, 226, 227, 2280, 229, 230, 231, 2320, 233, 234, 235, 2360, 237, 238, 239, 2400, 241, 242, 243, 2440, 245, 246, 247, 2480, 249, 250, 251, 2520, 253, 254, 255, 2560, 257, 258, 259, 2600, 261, 262, 263, 2640, 265, 266, 267, 2680, 269, 270, 271, 2720, 273, 274, 275, 2760, 277, 278, 279, 2800, 281, 282, 283, 2840, 285, 286, 287, 2880, 289, 290, 291, 2920, 293, 294, 295, 2960, 297, 298, 299, 3000, 301, 302, 303, 3040, 305, 306, 307, 3080, 309, 310, 311, 3120, 313, 314, 315, 3160, 317, 318, 319, 3200, 321, 322, 323, 3240, 325, 326, 327, 3280, 329, 330, 331, 3320, 333, 334, 335, 3360, 337, 338, 339, 3400, 341, 342, 343, 3440, 345, 346, 347, 3480, 349, 350, 351, 3520, 353, 354, 355, 3560, 357, 358, 359, 3600, 361, 362, 363, 3640, 365, 366, 367, 3680, 369, 370, 371, 3720, 373, 374, 375, 3760, 377, 378, 379, 3800, 381, 382, 383, 3840, 385, 386, 387, 3880, 389, 390, 391, 3920, 393, 394, 395, 3960, 397, 398, 399, 4000, 401, 402, 403, 4040, 405, 406, 407, 4080, 409, 410, 411, 4120, 413, 414, 415, 4160, 417, 418, 419, 4200, 421, 422, 423, 4240, 425, 426, 427, 4280, 429, 430, 431, 4320, 433, 434, 435, 4360, 437, 438, 439, 4400, 441, 442, 443, 4440, 445, 446, 447, 4480, 449, 450, 451, 4520, 453, 454, 455, 4560, 457, 458, 459, 4600, 461, 462, 463, 4640, 465, 466, 467, 4680, 469, 470, 471, 4720, 473, 474, 475, 4760, 477, 478, 479, 4800, 481, 482, 483, 4840, 485, 486, 487, 4880, 489, 490, 491, 4920, 493, 494, 495, 4960, 497, 498, 499, 5000])"
		],
		"starterFn": [
			"1\nfunction amplify(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FPHnbisnLwrQFYyAg"
	},
	{
		"title": "Hashes and Pluses",
		"description": "<p><span>Create a function that returns the number of hashes and pluses in a string.</span></p><h3><span>Examples</span></h3><pre><code>hashPlusCount(\"###+\") ➞ [3, 1]\n\nhashPlusCount(\"##+++#\") ➞ [3, 3]\n\nhashPlusCount(\"#+++#+#++#\") ➞ [4, 6]\n\nhashPlusCount(\"\") ➞ [0, 0]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>[0, 0]</code><span> for an empty string.</span></li><li><span>Return in the order of </span><code>[hashes, pluses]</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(hashPlusCount(\"####\"), [4, 0])",
			"Test.assertSimilar(hashPlusCount(\"#\"), [1, 0])",
			"Test.assertSimilar(hashPlusCount(\"+++++++\"), [0, 7])",
			"Test.assertSimilar(hashPlusCount(\"++\"), [0, 2])",
			"Test.assertSimilar(hashPlusCount(\"#+#+\"), [2, 2])",
			"Test.assertSimilar(hashPlusCount(\"###+\"), [3, 1])",
			"Test.assertSimilar(hashPlusCount(\"##+++#\"), [3, 3])",
			"Test.assertSimilar(hashPlusCount(\"#+++#+#++#\"), [4, 6])",
			"Test.assertSimilar(hashPlusCount(\"\"), [0, 0])"
		],
		"starterFn": [
			"1\nfunction hashPlusCount(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ydBcGvv3n447nbxCy"
	},
	{
		"title": "Say \"Hello\" Say \"Bye\"",
		"description": "<p><span>Write a function that takes a string </span><code>name</code><span> and a number </span><code>num</code><span> (either 0 or 1) and return \"Hello\" + </span><code>name</code><span> if  </span><code>num</code><span> is 1, otherwise return \"Bye\" + </span><code>name</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>sayHelloBye(\"alon\", 1) ➞ \"Hello Alon\"\n\nsayHelloBye(\"Tomi\", 0) ➞ \"Bye Tomi\"\n\nsayHelloBye(\"jose\", 0) ➞ \"Bye Jose\"</code></pre><h3><span>Notes</span></h3><p><span>The name you return must be capitalized.</span></p>",
		"publishedBy": "Alon",
		"publishedByUrl": "https://edabit.com/user/Q69qbJ2JtmQFkMXqz",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"control_flow",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sayHelloBye(\"jose\", 1), \"Hello Jose\")",
			"Test.assertEquals(sayHelloBye(\"barry\", 1), \"Hello Barry\")",
			"Test.assertEquals(sayHelloBye(\"jon\", 0), \"Bye Jon\")",
			"Test.assertEquals(sayHelloBye(\"khloy\", 1), \"Hello Khloy\")",
			"Test.assertEquals(sayHelloBye(\"sara\", 0), \"Bye Sara\")",
			"Test.assertEquals(sayHelloBye(\"Jon\", 0), \"Bye Jon\")",
			"Test.assertEquals(sayHelloBye(\"Matt\", 1), \"Hello Matt\")"
		],
		"starterFn": [
			"1\nfunction sayHelloBye(name, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kLa2w7m4h849k8rmW"
	},
	{
		"title": "Maximum Possible Total",
		"description": "<p><span>Given an array of 10 numbers, return the </span><strong><span>maximum possible total</span></strong><span> made by summing just  </span><strong><span>5 of the 10 numbers</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>maxTotal([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]) ➞ 43\n\nmaxTotal([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]) ➞ 100\n\nmaxTotal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 40</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(maxTotal([1, 1, 0, 1, 3, 10, 10, 10, 10, 1]), 43)",
			"Test.assertEquals(maxTotal([0, 0, 0, 0, 0, 0, 0, 0, 0, 100]), 100)",
			"Test.assertEquals(maxTotal([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 40)",
			"Test.assertEquals(maxTotal([12, 8, 73, 1, 24, 11, 88, 39, 2, -47]), 236)",
			"Test.assertEquals(maxTotal([48, 90, 42, -12, 1, -14, -36, -37, -9, -4]), 177)",
			"Test.assertEquals(maxTotal([-99, -38, -13, -84, 66, 13, -13, -16, 14, 15]), 95)",
			"Test.assertEquals(maxTotal([60, -70, -53, -4, 53, -66, 10, -7, 56, 89]), 268)",
			"Test.assertEquals(maxTotal([88, 45, 76, 34, -42, 10, -22, 85, -52, 49]), 343)",
			"Test.assertEquals(maxTotal([70, -74, 20, -56, -15, 93, -75, 98, 46, 36]), 343)",
			"Test.assertEquals(maxTotal([-20, -61, 50, 52, 60, -70, 0, 69, 91, -36]), 322)",
			"Test.assertEquals(maxTotal([31, 75, 78, 76, -51, -8, 17, -23, 34, 100]), 363)",
			"Test.assertEquals(maxTotal([-79, 85, 55, -5, -86, -72, 31, -68, 13, 1]), 185)",
			"Test.assertEquals(maxTotal([-93, -79, -26, 53, 74, -55, 68, -36, -6, -94]), 163)",
			"Test.assertEquals(maxTotal([-100, 21, 22, 65, 19, 2, -11, 3, 24, 73]), 205)",
			"Test.assertEquals(maxTotal([92, -43, 80, 43, 23, -41, -19, 90, 78, 31]), 383)",
			"Test.assertEquals(maxTotal([-71, -11, -89, 60, 71, -62, 54, 11, 73, 49]), 307)",
			"Test.assertEquals(maxTotal([61, -55, 60, -30, 27, 61, -68, -1, -36, -27]), 208)",
			"Test.assertEquals(maxTotal([67, -44, 40, -75, 27, 71, -59, 4, 45, -91]), 250)",
			"Test.assertEquals(maxTotal([27, -61, 81, -28, 5, 45, -81, 37, 30, 36]), 229)",
			"Test.assertEquals(maxTotal([42, 34, -11, -41, -73, 53, 52, 34, 63, -15]), 244)",
			"Test.assertEquals(maxTotal([-89, 51, -24, -12, 26, 52, -98, -14, -99, 85]), 202)",
			"Test.assertEquals(maxTotal([-77, 24, 83, -67, -5, 58, -64, 21, 86, 41]), 292)",
			"Test.assertEquals(maxTotal([-69, 74, -78, 56, -9, -28, 39, 54, -74, 30]), 253)",
			"Test.assertEquals(maxTotal([70, -25, 78, -58, -49, -42, -77, -52, 93, -37]), 179)",
			"Test.assertEquals(maxTotal([-30, -29, 32, -60, 84, -13, 67, -77, 94, 64]), 341)",
			"Test.assertEquals(maxTotal([-54, 7, 18, 83, -45, 68, 0, 78, 55, -30]), 302)"
		],
		"starterFn": [
			"1\nfunction maxTotal(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Wg3pBiH8HQggcfaTg"
	},
	{
		"title": "Is the Number Symmetrical?",
		"description": "<p><span>Create a function that takes a number as an argument and returns </span><code>true</code><span> or </span><code>false</code><span> depending on whether the number is symmetrical or not. A number is symmetrical when it is the same as its reverse.</span></p><h3><span>Examples</span></h3><pre><code>isSymmetrical(7227) ➞ true\n\nisSymmetrical(12567) ➞ false\n\nisSymmetrical(44444444) ➞ true\n\nisSymmetrical(9939) ➞ false\n\nisSymmetrical(1112111) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isSymmetrical(23), false)",
			"Test.assertEquals(isSymmetrical(9562), false)",
			"Test.assertEquals(isSymmetrical(10019), false)",
			"Test.assertEquals(isSymmetrical(1), true)",
			"Test.assertEquals(isSymmetrical(3223), true)",
			"Test.assertEquals(isSymmetrical(95559), true)",
			"Test.assertEquals(isSymmetrical(66566), true)"
		],
		"starterFn": [
			"1\nfunction isSymmetrical(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/at7jF9Y7SmPGyD92u"
	},
	{
		"title": "Transform into an Array with No Duplicates",
		"description": "<p><span>A </span><strong><span>set</span></strong><span> is a collection of unique items. A </span><strong><span>set</span></strong><span> can be formed from an array from removing all duplicate items.</span></p><pre><code>[1, 3, 3, 5, 5, 5]\n// original array\n\n[1, 3, 5]\n// original array transformed into a set</code></pre><p><span>Create a function that sorts an array and removes all duplicate items from it.</span></p><h3><span>Examples</span></h3><pre><code>set([1, 3, 3, 5, 5]) ➞ [1, 3, 5]\n\nset([4, 4, 4, 4]) ➞ [4]\n\nset([5, 7, 8, 9, 10, 15]) ➞ [5, 7, 8, 9, 10, 15]\n\nset([3, 3, 3, 2, 1]) ➞ [1, 2, 3]</code></pre><h3><span>Notes</span></h3><ul><li><span>For this question, output </span><strong><span>an array, not a set</span></strong><span>. These are two distinctly different data structures in JavaScript (although they can be converted from one to the other).</span></li><li><span>See resources for a hint if you get stuck.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(set([1, 3, 3, 5, 5]), [1, 3, 5])",
			"Test.assertSimilar(set([4, 4, 4, 4]), [4])",
			"Test.assertSimilar(set([5, 7, 8, 9, 10, 15]), [5, 7, 8, 9, 10, 15])",
			"Test.assertSimilar(set([5, 9, 9]), [5, 9])",
			"Test.assertSimilar(set([1, 2, 3, 4, 5, 5, 6, 6, 7]), [1, 2, 3, 4, 5, 6, 7])",
			"Test.assertSimilar(set([1, 1, 2, 2, 2]), [1, 2])",
			"Test.assertSimilar(set(['A', 'A', 'A', 'A']), ['A'])",
			"Test.assertSimilar(set(['A', 'B', 'C', 'D']), ['A', 'B', 'C', 'D'])"
		],
		"starterFn": [
			"1\nfunction set(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Mo6Coy4PpTbZgtDKd"
	},
	{
		"title": "Sort an Array by String Length",
		"description": "<p><span>Create a function that takes an array of strings and return an array, sorted from shortest to longest.</span></p><h3><span>Examples</span></h3><pre><code>sortByLength([\"Google\", \"Apple\", \"Microsoft\"])\n➞ [\"Apple\", \"Google\", \"Microsoft\"]\n\nsortByLength([\"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"])\n➞ [\"Raphael\", \"Leonardo\", \"Donatello\", \"Michelangelo\"]\n\nsortByLength([\"Turing\", \"Einstein\", \"Jung\"])\n➞ [\"Jung\", \"Turing\", \"Einstein\"]</code></pre><h3><span>Notes</span></h3><p><span>All test cases contain arrays with strings of </span><em><span>different</span></em><span> lengths, so you won't have to deal with multiple strings of the same length.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(sortByLength([\"Google\", \"Apple\", \"Microsoft\"]), [\"Apple\", \"Google\", \"Microsoft\"])",
			"Test.assertSimilar(sortByLength([\"Leonardo\", \"Michelangelo\", \"Raphael\", \"Donatello\"]), [\"Raphael\", \"Leonardo\", \"Donatello\", \"Michelangelo\"])",
			"Test.assertSimilar(sortByLength([\"Turing\", \"Einstein\", \"Jung\"]), [\"Jung\", \"Turing\", \"Einstein\"])",
			"Test.assertSimilar(sortByLength([\"Tatooine\", \"Hoth\", \"Yavin\", \"Dantooine\"]), [\"Hoth\", \"Yavin\", \"Tatooine\", \"Dantooine\"])",
			"Test.assertSimilar(sortByLength([\"Mario\", \"Bowser\", \"Link\"]), [\"Link\", \"Mario\", \"Bowser\"])"
		],
		"starterFn": [
			"1\nfunction sortByLength(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Gz27eKkMcLarzE5Rj"
	},
	{
		"title": "Most Left Digit",
		"description": "<p><span>Write a function that takes a string as an argument and returns the left most digit in the string.</span></p><h3><span>Examples</span></h3><pre><code>leftDigit(\"TrAdE2W1n95!\") ➞ 2\n\nleftDigit(\"V3r1ta$\") ➞ 3\n\nleftDigit(\"U//DertHe1nflu3nC3\") ➞ 1\n\nleftDigit(\"J@v@5cR1PT\") ➞ 5</code></pre><h3><span>Notes</span></h3><p><span>Each string will have at least two numbers.</span></p>",
		"publishedBy": "DreamArdor",
		"publishedByUrl": "https://edabit.com/user/PAzNgJF54C2mYPkR9",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(leftDigit(\"TrAdE2W1n95!\"), 2)",
			"Test.assertEquals(leftDigit(\"V3r1ta$\"), 3)",
			"Test.assertEquals(leftDigit(\"U//DertHe1nflu3nC3\"), 1)",
			"Test.assertEquals(leftDigit(\"J@v@5cR1PT\"), 5)",
			"Test.assertEquals(leftDigit(\"0nSlaUgh7*d3atH\"), 0)",
			"Test.assertEquals(leftDigit(\"F8andD3st1nY\"), 8)"
		],
		"starterFn": [
			"1\nfunction leftDigit(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tPvx6pgPmerPrwqM8"
	},
	{
		"title": "Calculate the Mean",
		"description": "<p><span>Create a function that takes an array of numbers and returns the mean value.</span></p><h3><span>Examples</span></h3><pre><code>mean([1, 0, 4, 5, 2, 4, 1, 2, 3, 3, 3]) ➞ 2.55\n\nmean([2, 3, 2, 3]) ➞ 2.50\n\nmean([3, 3, 3, 3, 3]) ➞ 3.00</code></pre><h3><span>Notes</span></h3><ul><li><span>Round to two decimal places.</span></li><li><span>You can expect a number ranging from 0 to 10,000.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals((mean([1, 0, 4, 5, 2, 4, 1, 2, 3, 3, 3])), 2.55)",
			"Test.assertEquals((mean([324, 543, 654, 9876])), 2849.25)",
			"Test.assertEquals((mean([0, 0, 0, 0])), 0.00)",
			"Test.assertEquals((mean([30, 40, 20, 100, 30])), 44.00)",
			"Test.assertEquals((mean([1, 1, 1, 0])), 0.75)",
			"Test.assertEquals((mean([1, 1, 0, 1, 2, 1, 1, 1, 0, 0])), 0.80)",
			"Test.assertEquals((mean([10000])), 10000.00)"
		],
		"starterFn": [
			"1\nfunction mean(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8zBhNfrQv7CWKvcx3"
	},
	{
		"title": "Sort Numbers in Descending Order",
		"description": "<p><span>Create a function that takes any nonnegative number as an argument and return it with it's digits in descending order. Descending order is when you sort from highest to lowest.</span></p><h3><span>Examples</span></h3><pre><code>sortDescending(123) ➞ 321\n\nsortDescending(1254859723) ➞ 9875543221\n\nsortDescending(73065) ➞ 76530</code></pre><h3><span>Notes</span></h3><p><span>You can expect non-negative numbers for all test cases.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(sortDescending(123), 321)",
			"Test.assertEquals(sortDescending(670276097), 977766200)",
			"Test.assertEquals(sortDescending(2619805), 9865210)",
			"Test.assertEquals(sortDescending(81294), 98421)",
			"Test.assertEquals(sortDescending(0000000), 0000000)",
			"Test.assertEquals(sortDescending(321), 321)",
			"Test.assertEquals(sortDescending(628904), 986420)",
			"Test.assertEquals(sortDescending(289327560), 987653220)",
			"Test.assertEquals(sortDescending(6456), 6654)",
			"Test.assertEquals(sortDescending(444111888555333), 888555444333111)"
		],
		"starterFn": [
			"1\nfunction sortDescending(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yaXQvCzAXJLe37Qie"
	},
	{
		"title": "Snail Race",
		"description": "<p><span>Steve and Maurice have racing snails. They each have 3, a slow (</span><code>s</code><span>), medium (</span><code>m</code><span>) and fast (</span><code>f</code><span>) one. Although Steve's snails are all a bit stronger than Maurice's, Maurice has a trick up his sleeve. His plan is:</span></p><ol><li><span>Round 1: </span><code>[s, f]</code><span> Sacrifice his slowest snail against Steve's fastest.</span></li><li><span>Round 2: </span><code>[m, s]</code><span> Use his middle snail against Steve's slowest.</span></li><li><span>Round 3: </span><code>[f, m]</code><span> Use his fastest snail against Steve's middle.</span></li></ol><p><span>Create a function that determines whether Maurice's plan will work by outputting </span><code>true</code><span> if Maurice wins 2/3 games.</span></p><p><span>The function inputs:</span></p><ol><li><span>Array 1: </span><code>[s, m, f]</code><span> for Maurice.</span></li><li><span>Array 2: </span><code>[s, m, f]</code><span> for Steve.</span></li></ol><h3><span>Examples</span></h3><pre><code>mauriceWins([3, 5, 10], [4, 7, 11]) ➞ true\n// Since the matches are (3, 11), (5, 4) and (10, 7), Maurice wins 2 out of 3.\n\nmauriceWins([6, 8, 9], [7, 12, 14]) ➞ false\n// Since the matches are (6, 14), (8, 7) and (9, 12), Steve wins 2 out of 3.\n\nmauriceWins([1, 8, 20], [2, 9, 100]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Maurice wins if his competing snail's speed </span><strong><span>strictly</span></strong><span> exceeds Steve's competing snail's speed.</span></li><li><span>Steve will always play in this order: </span><code>[f, s, m]</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(mauriceWins([3, 5, 10], [4, 7, 11]), true);",
			"Test.assertEquals(mauriceWins([6, 8, 9], [7, 12, 14]), false);",
			"Test.assertEquals(mauriceWins([1, 8, 20], [2, 9, 100]), true);",
			"Test.assertEquals(mauriceWins([1, 2, 3], [2, 3, 4]), false);",
			"Test.assertEquals(mauriceWins([2, 4, 10], [3, 9, 11]), true);",
			"Test.assertEquals(mauriceWins([3, 8, 13], [5, 11, 15]), true);"
		],
		"starterFn": [
			"1\nfunction mauriceWins(mSnails, sSnails) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fiLc5x3x2bHzHvgK4"
	},
	{
		"title": "Omnipresent Value",
		"description": "<p><span>A value is </span><strong><span>omnipresent</span></strong><span> if it exists in every subarray inside the main array. </span></p><p><span>To illustrate:</span></p><pre><code>[[3, 4], [8, 3, 2], [3], [9, 3], [5, 3], [4, 3]]\n// 3 exists in every element inside this array, so is omnipresent.</code></pre><p><span>Create a function that determines whether an input value is </span><strong><span>omnipresent</span></strong><span> for a given array.</span></p><h3><span>Examples</span></h3><pre><code>isOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 1) ➞ true\n\nisOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 6) ➞ false\n\nisOmnipresent([[5], [5], [5], [6, 5]], 5) ➞ true\n\nisOmnipresent([[5], [5], [5], [6, 5]], 6) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Sub-arrays can be any length.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 1), true)",
			"Test.assertEquals(isOmnipresent([[1, 1], [1, 3], [5, 1], [6, 1]], 6), false)",
			"Test.assertEquals(isOmnipresent([[5], [5], [5], [6, 5]], 5), true)",
			"Test.assertEquals(isOmnipresent([[5], [5], [5], [6, 5]], 6), false)",
			"Test.assertEquals(isOmnipresent([[5, 1], [5, 1], [5, 1], [6, 5, 1]], 1), true)"
		],
		"starterFn": [
			"1\nfunction isOmnipresent(arr, val) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Twbmxzd3JwkkqAWES"
	},
	{
		"title": "Regex Series: 5-Digit Zip Code",
		"description": "<p><span>Write a </span><strong><span>regular expression</span></strong><span> that matches a string if and only if it is a </span><strong><span>valid zip code</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>\"32554\" ➞ true\n\n\"92 342\" ➞ false\n// Invalid: contains a whitespace\n\n\"9@342\" ➞ false\n// Invalid: contains a non-numeric character\n\n\"923444\" ➞ false\n// Invalid: length is not 5</code></pre><h3><span>Notes</span></h3><ul><li><span>Zipcodes must be 5 digits long exactly and only contain numbers.</span></li><li><span>Not allowed: non-numeric characters or whitespaces.</span></li><li><span>This challenge is designed to use </span><strong><span>Regex only</span></strong><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"describe(\"Valid zips\", function() {",
			"  Test.expect(validate(\"81442\"), \"92345 is a valid zip.\"); ",
			"  Test.expect(validate(\"81442\"), \"81442 is a valid zip.\"); ",
			"  Test.expect(validate(\"33789\"), \"33789 is a valid zip.\"); ",
			"  Test.expect(validate(\"42531\"), \"42531 is a valid zip.\"); ",
			"})",
			"​",
			"describe(\"Zips cannot contain other characters.\", function() {",
			"  Test.expect(!validate(\"9a345\", \"9a345 contains a letter.\"));",
			"  Test.expect(!validate(\"%2345\"), \"%2345 contains a special character.\"); ",
			"})",
			"​",
			"describe(\"Zips must have a length of 5.\", function() {",
			"  Test.expect(!validate(\"933345\"), \"933345 is too long.\");",
			"  Test.expect(!validate(\"2345\", \"too short\"), \"2345 is too short.\"); ",
			"})",
			"​",
			"describe(\"Zips cannot have whitespaces.\", function() {",
			"  Test.expect(!validate(\" 93345\"), \"No leading whitespaces.\");",
			"  Test.expect(!validate(\"23455 \"), \"No trailing whitespaces.\");",
			"  Test.expect(!validate(\"23 455\"), \"No middle whitespaces.\"); ",
			"})",
			"​",
			"function validate(zip) {",
			"  return x.test(zip); ",
			"}"
		],
		"starterFn": [
			"1\nlet x = /* Write your regular expression here */"
		],
		"url": "https://edabit.com/challenge/zmyuLfHcbJeTef5yr"
	},
	{
		"title": "Prefixes vs. Suffixes",
		"description": "<p><span>Create two functions: </span><code>isPrefix(word, prefix-)</code><span> and </span><code>isSuffix(word, -suffix)</code><span>.</span></p><ol><li><code>isPrefix</code><span> should return </span><code>true</code><span> if it begins with the </span><strong><span>prefix</span></strong><span> argument.</span></li><li><code>isSuffix</code><span> should return </span><code>true</code><span> if it ends with the </span><strong><span>suffix</span></strong><span> argument.</span></li></ol><p><span>Otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>isPrefix(\"automation\", \"auto-\") ➞ true\n\nisSuffix(\"arachnophobia\", \"-phobia\") ➞ true\n\nisPrefix(\"retrospect\", \"sub-\") ➞ false\n\nisSuffix(\"vocation\", \"-logy\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>The </span><code>prefix</code><span> and </span><code>suffix</code><span> arguments have dashes </span><code>-</code><span> in them.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPrefix(\"automation\", \"auto-\"), true)",
			"Test.assertEquals(isPrefix(\"superfluous\", \"super-\"), true)",
			"Test.assertEquals(isPrefix(\"oration\", \"mega-\"), false)",
			"Test.assertEquals(isPrefix(\"retrospect\", \"sub-\"), false)",
			"Test.assertEquals(isSuffix(\"arachnophobia\", \"-phobia\"), true)",
			"Test.assertEquals(isSuffix(\"rhinoplasty\", \"-plasty\"), true)",
			"Test.assertEquals(isSuffix(\"movement\", \"-scope\"), false)",
			"Test.assertEquals(isSuffix(\"vocation\", \"-logy\"), false)"
		],
		"starterFn": [
			"1\nfunction isPrefix(word, prefix) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction isSuffix(word, suffix) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/pBp7v6zkQvNa9jByh"
	},
	{
		"title": "Convert to Decimal Notation",
		"description": "<p><span>Create a function to convert an array of percentages to their decimal equivalents.</span></p><h3><span>Examples</span></h3><pre><code>convertToDecimal([\"1%\", \"2%\", \"3%\"]) ➞ [0.01, 0.02, 0.03]\n\nconvertToDecimal([\"45%\", \"32%\", \"97%\", \"33%\"]) ➞ [0.45, 0.32, 0.97, 0.33]\n\nconvertToDecimal([\"33%\", \"98.1%\", \"56.44%\", \"100%\"]) ➞ [0.33, 0.981, 0.5644, 1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(convertToDecimal([\"33%\", \"98.1%\", \"56.44%\", \"100%\"]), [0.33, 0.981, 0.5644, 1])",
			"Test.assertSimilar(convertToDecimal([\"45%\", \"32%\", \"97%\", \"33%\"]), [0.45, 0.32, 0.97, 0.33])",
			"Test.assertSimilar(convertToDecimal([\"1%\", \"2%\", \"3%\"]), [0.01, 0.02, 0.03])"
		],
		"starterFn": [
			"1\nfunction convertToDecimal(perc) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4tLabih2cr5Haw7xo"
	},
	{
		"title": "Numbers to Arrays and Vice Versa",
		"description": "<p><span>Write two functions:</span></p><ol><li><code>toArray()</code><span>, which converts a number to an array of its digits.</span></li><li><code>toNumber()</code><span>, which converts an array of digits back to its number.</span></li></ol><h3><span>Examples</span></h3><pre><code>toArray(235) ➞ [2, 3, 5]\n\ntoArray(0) ➞ [0]\n\ntoNumber([2, 3, 5]) ➞ 235\n\ntoNumber([0]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>All test cases will be weakly positive numbers: </span><code>&gt;= 0</code></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(toArray(235), [2, 3, 5])",
			"Test.assertSimilar(toArray(19), [1, 9])",
			"Test.assertSimilar(toArray(0), [0] )",
			"Test.assertEquals(toNumber([2, 3, 5]), 235)",
			"Test.assertEquals(toNumber([1, 9]), 19)",
			"Test.assertEquals(toNumber([0]), 0)"
		],
		"starterFn": [
			"1\nfunction toArray(num) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction toNumber(arr) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/rufYqKzTLvDefFmKa"
	},
	{
		"title": "How Many Decimal Places?",
		"description": "<p><span>Create a function that returns the number of </span><strong><span>decimal places</span></strong><span> a number (given as a string) has. Any zeros after the decimal point count towards the number of decimal places.</span></p><h3><span>Examples</span></h3><pre><code>getDecimalPlaces(\"43.20\") ➞ 2\n\ngetDecimalPlaces(\"400\") ➞ 0\n\ngetDecimalPlaces(\"3.1\") ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>0</code><span> if the number doesn't have any decimal places (see example #2).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getDecimalPlaces(\"3.22\"), 2)",
			"Test.assertEquals(getDecimalPlaces(\"400\"), 0)",
			"Test.assertEquals(getDecimalPlaces(\"43.50\"), 2)",
			"Test.assertEquals(getDecimalPlaces(\"100,000,000\"), 0)",
			"Test.assertEquals(getDecimalPlaces(\"3.1415\"), 4)",
			"Test.assertEquals(getDecimalPlaces(\"0\"), 0)",
			"Test.assertEquals(getDecimalPlaces(\"01\"), 0)",
			"Test.assertEquals(getDecimalPlaces(\"00010.00010\"), 5)",
			"Test.assertEquals(getDecimalPlaces(\"3,141.592\"), 3)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction getDecimalPlaces(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/arKLRM8qGzKZbCxCk"
	},
	{
		"title": "Reverse the Case",
		"description": "<p><span>Given a string, create a function to reverse the case. All lower-cased letters should be upper-cased, and vice versa.</span></p><h3><span>Examples</span></h3><pre><code>reverseCase(\"Happy Birthday\") ➞ \"hAPPY bIRTHDAY\"\n\nreverseCase(\"MANY THANKS\") ➞ \"many thanks\"\n\nreverseCase(\"sPoNtAnEoUs\") ➞ \"SpOnTaNeOuS\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverseCase('Happy Birthday'), 'hAPPY bIRTHDAY')",
			"Test.assertEquals(reverseCase('MANY THANKS'), 'many thanks')",
			"Test.assertEquals(reverseCase('sPoNtAnEoUs'), 'SpOnTaNeOuS')",
			"Test.assertEquals(reverseCase('eXCELLENT, yOuR mAJESTY'), 'Excellent, YoUr Majesty')"
		],
		"starterFn": [
			"1\nfunction reverseCase(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PTvYKkvf7oytHmJFm"
	},
	{
		"title": "Index Shuffle",
		"description": "<p><span>Write a function  that takes all even-indexed characters and odd-indexed characters from a string and concatenates them together.</span></p><p><span>To illustrate:</span></p><pre><code>indexShuffle(\"abcd\") ➞ \"acbd\"\n// \"ac\" (even-indexed) + \"bd\" (odd-indexed)</code></pre><h3><span>Examples</span></h3><pre><code>indexShuffle(\"abcdefg\") ➞ \"acegbdf\"\n\nindexShuffle(\"holiday\") ➞ \"hldyoia\"\n\nindexShuffle(\"maybe\") ➞ \"myeab\"</code></pre><h3><span>Notes</span></h3><p><span>0 should be treated as an even number.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(indexShuffle(\"abcdef\"), \"acebdf\")",
			"Test.assertEquals(indexShuffle(\"abababab\"), \"aaaabbbb\")",
			"Test.assertEquals(indexShuffle(\"it was a beautiful day\"), \"i a  euiu atwsabatfldy\")",
			"Test.assertEquals(indexShuffle(\"maybe\"), \"myeab\")",
			"Test.assertEquals(indexShuffle(\"holiday\"), \"hldyoia\")"
		],
		"starterFn": [
			"1\nfunction indexShuffle(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ATbswTsEaMJb37Ez2"
	},
	{
		"title": "Valid Zip Code",
		"description": "<p><span>Zip codes consist of 5 consecutive digits. Given a string, write a function to determine whether the input is a valid zip code. A valid zip code is as follows:</span></p><ul><li><span>Must only contain numbers (no non-digits allowed).</span></li><li><span>Must not contain any spaces.</span></li><li><span>Must not be greater than 5 digits in length.</span></li></ul><h3><span>Examples</span></h3><pre><code>isValid(\"59001\") ➞ true\n\nisValid(\"853a7\") ➞ false\n\nisValid(\"732 32\") ➞ false\n\nisValid(\"393939\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isValid(\"59001\"), true)",
			"Test.assertEquals(isValid(\"853a7\"), false, \"No non-digits allowed.\")",
			"Test.assertEquals(isValid(\"732 32\"), false, \"No spaces allowed.\")",
			"Test.assertEquals(isValid(\"788876\"), false, \"No sequences of length greater than 5.\")",
			"Test.assertEquals(isValid(\"a923b\"), false, \"No letters allowed.\")",
			"Test.assertEquals(isValid(\"5923!\"), false, \"No non-digits allowed.\")",
			"Test.assertEquals(isValid(\"59238aa\"), false, \"No letters and no sequences of length greater than 5.\")",
			"Test.assertEquals(isValid(\"88231\"), true)"
		],
		"starterFn": [
			"1\nfunction isValid(zip) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ysk5M8XAscc4fqaAi"
	},
	{
		"title": "First and Last Index",
		"description": "<p><span>Given a word, write a function that returns the </span><strong><span>first index</span></strong><span> and the </span><strong><span>last index</span></strong><span> of a character.</span></p><h3><span>Examples</span></h3><pre><code>charIndex(\"hello\", \"l\") ➞ [2, 3]\n// The first \"l\" has index 2, the last \"l\" has index 3.\n\ncharIndex(\"circumlocution\", \"c\") ➞ [0, 8]\n// The first \"c\" has index 0, the last \"c\" has index 8.\n\ncharIndex(\"happy\", \"h\") ➞ [0, 0]\n// Only one \"h\" exists, so the first and last index is 0.\n\ncharIndex(\"happy\", \"e\") ➞ undefined\n// \"e\" does not exist in \"happy\", so we return undefined.</code></pre><h3><span>Notes</span></h3><ul><li><span>If the character does not exist in the word, return </span><code>undefined</code><span>.</span></li><li><span>If only one instance of the character exists, the first and last index will be the same.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for hints.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(charIndex('hello', 'l'), [2, 3])",
			"Test.assertSimilar(charIndex('circumlocution', 'r'), [2, 2])",
			"Test.assertSimilar(charIndex('circumlocution', 'i'), [1, 11])",
			"Test.assertSimilar(charIndex('circumlocution', 'c'), [0, 8])",
			"Test.assertSimilar(charIndex('happy', 'h'), [0, 0])",
			"Test.assertSimilar(charIndex('happy', 'p'), [2, 3])",
			"Test.assertSimilar(charIndex('happy', 'e'), undefined)"
		],
		"starterFn": [
			"1\nfunction charIndex(word, char) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AYpxyzbnbS7BGSgvd"
	},
	{
		"title": "Count Ones in a 2D Array",
		"description": "<p><span>Create a function to count the number of </span><code>1</code><span>s in a 2D array.</span></p><h3><span>Examples</span></h3><pre><code>countOnes([\n  [1, 0],\n  [0, 0]\n]) ➞ 1\n\ncountOnes([\n  [1, 1, 1],\n  [0, 0, 1],\n  [1, 1, 1]\n]) ➞ 7\n\ncountOnes([\n  [1, 2, 3],\n  [0, 2, 1],\n  [5, 7, 33]\n]) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays"
		],
		"tests": [
			"Test.assertEquals(countOnes([",
			"  [1, 0, 1],",
			"  [0, 0, 0],",
			"  [0, 0, 1]",
			"]), 3)",
			"​",
			"Test.assertEquals(countOnes([",
			"  [1, 1, 1],",
			"  [0, 0, 1],",
			"  [1, 1, 1]",
			"]), 7)",
			"​",
			"Test.assertEquals(countOnes([",
			"  [1, 2, 3],",
			"  [0, 2, 1],",
			"  [5, 7, 33]",
			"]), 2)",
			"​",
			"Test.assertEquals(countOnes([",
			"  [5, 2, 3],",
			"  [0, 2, 5],",
			"  [5, 7, 33]",
			"]), 0)",
			"​",
			"Test.assertEquals(countOnes([",
			"  [5, 2],"
		],
		"starterFn": [
			"1\nfunction countOnes(matrix) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ve7mQnJsjtFep97fm"
	},
	{
		"title": "Return the Highest and Lowest Numbers",
		"description": "<p><span>Create a function that accepts a string of space separated numbers and returns the highest and lowest number (as a string).</span></p><h3><span>Examples</span></h3><pre><code>highLow(\"1 2 3 4 5\") ➞ \"5 1\"\n\nhighLow(\"1 2 -3 4 5\") ➞ \"5 -3\"\n\nhighLow(\"1 9 3 4 -5\") ➞ \"9 -5\"\n\nhighLow(\"13\") ➞ \"13 13\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All numbers are valid Int32, no need to validate them.</span></li><li><span>There will always be at least one number in the input string.</span></li><li><span>Output string must be two numbers separated by a single space, and highest number is first.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(highLow(\"4 5 29 54 4 0 -214 542 -64 1 -3 6 -6\"), \"542 -214\")",
			"Test.assertEquals(highLow(\"1 -1\"), \"1 -1\")",
			"Test.assertEquals(highLow(\"1 1\"), \"1 1\")",
			"Test.assertEquals(highLow(\"-1 -1\"), \"-1 -1\")",
			"Test.assertEquals(highLow(\"1 -1 0\"), \"1 -1\")",
			"Test.assertEquals(highLow(\"1 1 0\"), \"1 0\")",
			"Test.assertEquals(highLow(\"-1 -1 0\"), \"0 -1\")",
			"Test.assertEquals(highLow(\"42\"), \"42 42\")"
		],
		"starterFn": [
			"1\nfunction highLow(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PBXe4hLP3mbbMEFt8"
	},
	{
		"title": "Transforming Words into Binary Strings",
		"description": "<p><span>Write a function that transforms all letters from </span><code>[a, m]</code><span> to </span><code>0</code><span> and letters from </span><code>[n, z]</code><span> to </span><code>1</code><span> in a string.</span></p><h3><span>Examples</span></h3><pre><code>convertBinary(\"house\") ➞ \"01110\"\n\nconvertBinary(\"excLAIM\") ➞ \"0100000\"\n\nconvertBinary(\"moon\") ➞ \"0111\"</code></pre><h3><span>Notes</span></h3><p><span>Conversion should be case </span><strong><span>insensitive</span></strong><span> (see example #2).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(convertBinary(\"house\"), \"01110\")",
			"Test.assertEquals(convertBinary(\"excLAIM\"), \"0100000\")",
			"Test.assertEquals(convertBinary(\"moon\"), \"0111\")",
			"Test.assertEquals(convertBinary(\"MOOn\"), \"0111\")",
			"Test.assertEquals(convertBinary(\"topsyTurvy\"), \"1111111111\")"
		],
		"starterFn": [
			"1\nfunction convertBinary(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/djNxjykvXvKuHvGPZ"
	},
	{
		"title": "Chat Room Status",
		"description": "<p><span>Write a function that returns the number of users in a chatroom based on the following rules:</span></p><ol><li><span>If there is no one, return </span><code>\"no one online\"</code><span>.</span></li><li><span>If there is 1 person, return </span><code>\"user1 online\"</code><span>.</span></li><li><span>If there are 2 people, return </span><code>\"user1 and user2 online\"</code><span>.</span></li><li><span>If there are </span><code>n&gt;2</code><span> people, return the first two names and add </span><code>\"and n-2 more online\"</code><span>.</span></li></ol><p><span>For example, if there are 5 users, return:</span></p><pre><code>\"user1, user2 and 3 more online\"</code></pre><h3><span>Examples</span></h3><pre><code>chatroomStatus([]) ➞ \"no one online\"\n\nchatroomStatus([\"paRIE_to\"]) ➞ \"paRIE_to online\"\n\nchatroomStatus([\"s234f\", \"mailbox2\"]) ➞ \"s234f and mailbox2 online\"\n\nchatroomStatus([\"pap_ier44\", \"townieBOY\", \"panda321\", \"motor_bike5\", \"sandwichmaker833\", \"violinist91\"])\n➞ \"pap_ier44, townieBOY and 4 more online\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow"
		],
		"tests": [
			"Test.assertSimilar(chatroomStatus([]), \"no one online\")",
			"Test.assertSimilar(chatroomStatus([\"becky325\"]), \"becky325 online\")",
			"Test.assertSimilar(chatroomStatus([\"becky325\", \"malcolm888\"]), \"becky325 and malcolm888 online\")",
			"Test.assertSimilar(chatroomStatus([\"becky325\", \"malcolm888\", \"fah32fa\"]), \"becky325, malcolm888 and 1 more online\")",
			"Test.assertSimilar(chatroomStatus([\"paRIE_to\"]), \"paRIE_to online\")",
			"Test.assertSimilar(chatroomStatus([\"s234f\", \"mailbox2\"]), \"s234f and mailbox2 online\")",
			"Test.assertSimilar(chatroomStatus([\"pap_ier44\", \"townieBOY\", \"panda321\", \"motor_bike5\", \"sandwichmaker833\", \"violinist91\"]), \"pap_ier44, townieBOY and 4 more online\")"
		],
		"starterFn": [
			"1\nfunction chatroomStatus(users) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hscAGyt4iNZ3PKy3g"
	},
	{
		"title": "Hiding the Card Number",
		"description": "<p><span>Write a function that takes a credit card number and only displays the last four characters. The rest of the card number must be replaced by </span><code>************</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>cardHide(\"1234123456785678\") ➞ \"************5678\"\n\ncardHide(\"8754456321113213\") ➞ \"************3213\"\n\ncardHide(\"35123413355523\") ➞ \"**********5523\"</code></pre><h3><span>Examples</span></h3><ul><li><span>Ensure you return a string.</span></li><li><span>The length of the string must remain the same as the input.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(cardHide(\"1234123456785678\"), \"************5678\")",
			"Test.assertEquals(cardHide(\"8754456321113213\"), \"************3213\")",
			"Test.assertEquals(cardHide(\"35123413355523\"), \"**********5523\")"
		],
		"starterFn": [
			"1\nfunction cardHide(card) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rtpvAqFT3koqMoFCJ"
	},
	{
		"title": "Detect Browser from User Agent",
		"description": "<p><span>You need to detect what browser is being used. Create a function that takes a string (browser identifier) and returns the browser name.</span></p><h3><span>Examples</span></h3><pre><code>detectBrowser(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36\") ➞ \"Google Chrome\"\n\ndetectBrowser(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0\") ➞ \"Mozilla Firefox\"\n\ndetectBrowser(\"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; rv:11.0) like Gecko\") ➞ \"Internet Explorer\"</code></pre><h3><span>Notes</span></h3><p><span>All test case user agents are valid.</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"var uAgt =[\"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0)\",",
			"\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\",",
			"\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\",",
			"\"Microsoft Internet Explorer/4.0b1 (Windows 95)\",",
			"\"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322)\",",
			"\"Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)\",",
			"\"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Win64; x64; Trident/6.0)\",",
			"\"Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)\",",
			"\"Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)\",",
			"\"Mozilla/1.22 (compatible; MSIE 1.5; Windows NT)\",",
			"\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; WOW64; Trident/4.0)\",",
			"\"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Win64; x64; Trident/4.0)\",",
			"\"Mozilla/4.0 (compatible; MSIE 5.23; Mac_PowerPC)\",",
			"\"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727)\",",
			"\"Mozilla/5.0 (Windows NT 5.1; rv:5.0.1) Gecko/20100101 Firefox/5.0.1\",",
			"\"Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.02\",",
			"\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0\",",
			"\"Mozilla/5.0 (Windows NT 6.1; rv:2.0b7pre) Gecko/20100921 Firefox/4.0b7pre\",",
			"\"Mozilla/5.0 (X11; U; Linux x86; fr-fr) Gecko/20100423 Ubuntu/10.04 (lucid) Firefox/3.6.3 AppleWebKit/532.4 Safari/532.4\",",
			"\"Mozilla/5.0 (Windows; U; Windows NT 5.1; fr; rv:1.9.0.11) Gecko/2009060215 Firefox/3.0.11\",",
			"\"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 GTB5\",",
			"\"Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.0.19; aggregator:Spinn3r (Spinn3r 3.1); http://spinn3r.com/robot) Gecko/2010040121 Firefox/3.0.19\",",
			"\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:19.0) Gecko/20100101 Firefox/19.0\",",
			"\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:15.0) Gecko/20100101 Firefox/15.0.1\",",
			"\"Mozilla/5.0 (Windows NT 5.1; rv:19.0) Gecko/20100101 Firefox/19.0\",",
			"\"Mozilla/5.0 (Windows NT 6.1; rv:19.0) Gecko/20100101 Firefox/19.0\","
		],
		"starterFn": [
			"1\nfunction detectBrowser(userAgent) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PbEuBFLRpzgWQwuvY"
	},
	{
		"title": "Capitalize by ASCII",
		"description": "<p><span>Create a function that takes a string as input and capitalizes a letter if its ASCII code is even and returns its lower case version if its ASCII code is odd.</span></p><h3><span>Examples</span></h3><pre><code>asciiCapitalize(\"to be or not to be!\") ➞ \"To Be oR NoT To Be!\"\n\nasciiCapitalize(\"THE LITTLE MERMAID\") ➞ \"THe LiTTLe meRmaiD\"\n\nasciiCapitalize(\"Oh what a beautiful morning.\") ➞ \"oH wHaT a BeauTiFuL moRNiNg.\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(asciiCapitalize(\"Oh what a beautiful morning.\"), \"oH wHaT a BeauTiFuL moRNiNg.\")",
			"Test.assertEquals(asciiCapitalize(\"THE LITTLE MERMAID\"), \"THe LiTTLe meRmaiD\")",
			"Test.assertEquals(asciiCapitalize(\"to be or not to be!\"), \"To Be oR NoT To Be!\")"
		],
		"starterFn": [
			"1\nfunction asciiCapitalize(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KPENunE3uhBcmSQ7C"
	},
	{
		"title": "Is the Number a Repdigit",
		"description": "<p><span>A repdigit is a positive number composed out of the same digit.</span></p><p><span>Create a function that takes an integer and returns whether it's a repdigit or not.</span></p><h3><span>Examples</span></h3><pre><code>isRepdigit(66) ➞ true\n\nisRepdigit(0) ➞ true\n\nisRepdigit(-11) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The number </span><code>0</code><span> should return </span><code>true</code><span> (even though it's not a positive number).</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on repdigits.</span></li></ul>",
		"publishedBy": "Eduard Diakunenko",
		"publishedByUrl": "https://edabit.com/user/KcpfY4XZ7fNamyLd3",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"functional_programming",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isRepdigit(6), true)",
			"Test.assertEquals(isRepdigit(66), true)",
			"Test.assertEquals(isRepdigit(666), true)",
			"Test.assertEquals(isRepdigit(6666), true)",
			"Test.assertEquals(isRepdigit(1001), false)",
			"Test.assertEquals(isRepdigit(-11), false, \"The number must be >= 0\")"
		],
		"starterFn": [
			"1\nfunction isRepdigit(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8vSpPNjNx6JBcvxdc"
	},
	{
		"title": "Video Length in Seconds",
		"description": "<p><span>You are given the length of a video in minutes. The format is </span><strong><span>mm:ss</span></strong><span> (e.g.: </span><code>\"02:54\"</code><span>). Create a function that takes the </span><em><span>video length</span></em><span> and return it in </span><strong><span>seconds</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>minutesToSeconds(\"01:00\") ➞ 60\n\nminutesToSeconds(\"13:56\") ➞ 836\n\nminutesToSeconds(\"10:60\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The video length is given as a string.</span></li><li><span>If the number of seconds is </span><strong><span>60 or over</span></strong><span>, return </span><code>false</code><span> (see example #3).</span></li><li><span>You may get a number of minutes over 99 (e.g. </span><code>\"121:49\"</code><span> is perfectly </span><strong><span>valid</span></strong><span>).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(minutesToSeconds(\"01:00\"), 60)",
			"Test.assertEquals(minutesToSeconds(\"13:56\"), 836)",
			"Test.assertEquals(minutesToSeconds(\"10:60\"), false, \"60 is invalid\")",
			"Test.assertEquals(minutesToSeconds(\"132:21\"), 7941)",
			"Test.assertEquals(minutesToSeconds(\"132:271\"), false)",
			"Test.assertEquals(minutesToSeconds(\"01:30\"), 90)",
			"Test.assertEquals(minutesToSeconds(\"10:00\"), 600)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction minutesToSeconds(time) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/n7qZMpuLsAMGBGNLA"
	},
	{
		"title": "Join Two Portions of a Path",
		"description": "<p><span>Write a function that receives two portions of a path and joins them. The portions will be joined with the \"/\" separator. There could be only one separator and if it is not present it should be added.</span></p><h3><span>Examples</span></h3><pre><code>joinPath(\"portion1\", \"portion2\") ➞ \"portion1/portion2\"\n\njoinPath(\"portion1/\", \"portion2\") ➞ \"portion1/portion2\"\n\njoinPath(\"portion1\", \"/portion2\") ➞ \"portion1/portion2\"\n\njoinPath(\"portion1/\", \"/portion2\") ➞ \"portion1/portion2\"</code></pre><h3><span>Notes</span></h3><p><span>Try not to solve this challenge using only </span><code>if-else</code><span> conditions.</span></p>",
		"publishedBy": "drecdroid",
		"publishedByUrl": "https://edabit.com/user/XrzvNadiHFD5oWyLZ",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(joinPath(\"portion1\", \"portion2\"), \"portion1/portion2\")",
			"Test.assertEquals(joinPath(\"portion1/\", \"portion2\"), \"portion1/portion2\")",
			"Test.assertEquals(joinPath(\"portion1\", \"/portion2\"), \"portion1/portion2\")",
			"Test.assertEquals(joinPath(\"portion1/\", \"/portion2\"), \"portion1/portion2\")",
			"Test.assertEquals(joinPath(\"5wf7fny\", \"stJKXlc8\"), \"5wf7fny/stJKXlc8\")",
			"Test.assertEquals(joinPath(\"5wf7fny/\", \"stJKXlc8\"), \"5wf7fny/stJKXlc8\")",
			"Test.assertEquals(joinPath(\"5wf7fny\", \"/stJKXlc8\"), \"5wf7fny/stJKXlc8\")",
			"Test.assertEquals(joinPath(\"5wf7fny/\", \"/stJKXlc8\"), \"5wf7fny/stJKXlc8\")",
			"Test.assertEquals(joinPath(\"FKBZOBHo\", \"GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")",
			"Test.assertEquals(joinPath(\"FKBZOBHo/\", \"GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")",
			"Test.assertEquals(joinPath(\"FKBZOBHo\", \"/GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")",
			"Test.assertEquals(joinPath(\"FKBZOBHo/\", \"/GNcYGnB\"), \"FKBZOBHo/GNcYGnB\")",
			"Test.assertEquals(joinPath(\"vL533Y3\", \"uVz3nul\"), \"vL533Y3/uVz3nul\")",
			"Test.assertEquals(joinPath(\"vL533Y3/\", \"uVz3nul\"), \"vL533Y3/uVz3nul\")",
			"Test.assertEquals(joinPath(\"vL533Y3\", \"/uVz3nul\"), \"vL533Y3/uVz3nul\")",
			"Test.assertEquals(joinPath(\"vL533Y3/\", \"/uVz3nul\"), \"vL533Y3/uVz3nul\")",
			"Test.assertEquals(joinPath(\"kfDOTwf\", \"Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")",
			"Test.assertEquals(joinPath(\"kfDOTwf/\", \"Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")",
			"Test.assertEquals(joinPath(\"kfDOTwf\", \"/Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")",
			"Test.assertEquals(joinPath(\"kfDOTwf/\", \"/Xr8viY8e\"), \"kfDOTwf/Xr8viY8e\")",
			"Test.assertEquals(joinPath(\"F4tBPmoV\", \"Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")",
			"Test.assertEquals(joinPath(\"F4tBPmoV/\", \"Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")",
			"Test.assertEquals(joinPath(\"F4tBPmoV\", \"/Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")",
			"Test.assertEquals(joinPath(\"F4tBPmoV/\", \"/Lv18joOw\"), \"F4tBPmoV/Lv18joOw\")",
			"Test.assertEquals(joinPath(\"7ASOjVuT\", \"wwPOgKX\"), \"7ASOjVuT/wwPOgKX\")",
			"Test.assertEquals(joinPath(\"7ASOjVuT/\", \"wwPOgKX\"), \"7ASOjVuT/wwPOgKX\")"
		],
		"starterFn": [
			"1\nfunction joinPath(portion1, portion2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ezv3TCDcgAYhyL3R2"
	},
	{
		"title": "Finding Nemo",
		"description": "<p><span>You're given a string of words. You need to find the word \"Nemo\", and return a string like this: </span><code>\"I found Nemo at [the order of the word you find nemo]!\"</code><span>.</span></p><p><span>If you can't find Nemo, return </span><code>\"I can't find Nemo :(\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>findNemo(\"I am finding Nemo !\") ➞ \"I found Nemo at 4!\"\n\nfindNemo(\"Nemo is me\") ➞ \"I found Nemo at 1!\"\n\nfindNemo(\"I Nemo am\") ➞ \"I found Nemo at 2!\"</code></pre><h3><span>Notes</span></h3><ul><li><code>! , ? .</code><span> are always separated from the last word.</span></li><li><span>Nemo will always look like </span><em><span>Nemo</span></em><span>, and not </span><em><span>NeMo</span></em><span> or other capital variations.</span></li><li><em><span>Nemo's</span></em><span>, or anything that says </span><em><span>Nemo</span></em><span> with something behind it, doesn't count as </span><em><span>Finding Nemo</span></em><span>.</span></li><li><span>If there are multiple </span><em><span>Nemo's</span></em><span> in the sentence, only return for the first one.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(findNemo(\"I am Ne mo Nemo !\"), \"I found Nemo at 5!\")",
			"Test.assertEquals(findNemo(\"N e m o is NEMO NeMo Nemo !\"), \"I found Nemo at 8!\")",
			"Test.assertEquals(findNemo(\"I am Nemo's dad Nemo senior .\"), \"I found Nemo at 5!\")",
			"Test.assertEquals(findNemo(\"Oh, hello !\"), \"I can't find Nemo :(\")",
			"Test.assertEquals(findNemo(\"Is it Nemos, Nemona, Nemoor or Garfield?\"), \"I can't find Nemo :(\")",
			"Test.assertEquals(findNemo(\"Nemo is a clown fish, he has white and orange stripes. Nemo , come back!\"), \"I found Nemo at 1!\")"
		],
		"starterFn": [
			"1\nfunction findNemo(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/c23dFfNiKbnguSQtq"
	},
	{
		"title": "Spelling it Out",
		"description": "<p><span>Create a function which takes in a word and spells it out, by consecutively adding letters until the full word is completed.</span></p><h3><span>Examples</span></h3><pre><code>spelling(\"bee\") ➞ [\"b\", \"be\", \"bee\"]\n\nspelling(\"happy\") ➞ [\"h\", \"ha\", \"hap\", \"happ\", \"happy\"]\n\nspelling(\"eagerly\") ➞ [\"e\", \"ea\", \"eag\", \"eage\", \"eager\", \"eagerl\", \"eagerly\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(spelling(\"bee\"), ['b', 'be', 'bee'])",
			"Test.assertSimilar(spelling(\"cake\"), ['c', 'ca', 'cak', 'cake'])",
			"Test.assertSimilar(spelling(\"happy\"), ['h', 'ha', 'hap', 'happ', 'happy'])",
			"Test.assertSimilar(spelling(\"eagerly\"), ['e', 'ea', 'eag', 'eage', 'eager', 'eagerl', 'eagerly'])",
			"Test.assertSimilar(spelling(\"believe\"), ['b', 'be', 'bel', 'beli', 'belie', 'believ', 'believe'])"
		],
		"starterFn": [
			"1\nfunction spelling(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Akgh37c6dccEsNBt6"
	},
	{
		"title": "Bug: Regular Expression",
		"description": "<p><span>Shreeya first year computer science student is taking an intro to regex class. Her professor gives her the assignment to write a function that checks whether an input date as a string is in the format </span><strong><span>yyyy/mm/dd</span></strong><span>. She has written a regular expression but the regular expression does not seem to be correct. Help Shreeya fix the error!</span></p><h3><span>Examples</span></h3><pre><code>assignment(\"12/1/1\") ➞ false\n\nassignment(\"1234/12/01\") ➞ true\n\nassignment(\"2012/1/1\") ➞ false\n\nassignment(\"2012/01/07\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>The pattern may not be the only part of the code that needs fixing.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for help.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(assignment(\"12/1/1\"), false)",
			"Test.assertEquals(assignment(\"1234/12/01\"), true)",
			"Test.assertEquals(assignment(\"2012/1/1\"), false)",
			"Test.assertEquals(assignment(\"2012/01/07\"), true)",
			"Test.assertEquals(assignment(\"dates2012/01/07appo\"), false)",
			"Test.assertEquals(assignment(\"2018/09/12\"), true)",
			"Test.assertEquals(assignment(\"ammo2011/01/07\"), false)"
		],
		"starterFn": [
			"1\nfunction assignment(d) {",
			"2\n  return d.search(/(?:\\d{4})([-/])(\\d{2})\\2\\3/);",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6S92uTgcEcbcx4waS"
	},
	{
		"title": "Total Volume",
		"description": "<p><span>Given an array of boxes, create a function that returns the total volume of all those boxes combined together. A box is represented by an array with three elements: length, width and height.</span></p><p><span>For instance, </span><code>totalVolume([2, 3, 2], [6, 6, 7], [1, 2, 1])</code><span> should return </span><code>266</code><span> since  (2 x 3 x 2) + (6 x 6 x 7) + (1 x 2 x 1) = 12 + 252 + 2 = 266.</span></p><h3><span>Examples</span></h3><pre><code>totalVolume([4, 2, 4], [3, 3, 3], [1, 1, 2], [2, 1, 1]) ➞ 63\n\ntotalVolume([2, 2, 2], [2, 1, 1]) ➞ 10\n\ntotalVolume([1, 1, 1]) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>You will be given at least one box.</span></li><li><span>Each box will always have three dimensions included.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(totalVolume([4, 2, 4], [3, 3, 3], [1, 1, 2], [2, 1, 1]), 63)",
			"Test.assertEquals(totalVolume([2, 2, 2], [2, 1, 1]), 10)",
			"Test.assertEquals(totalVolume([1, 1, 1]), 1)",
			"Test.assertEquals(totalVolume([5, 1, 10], [1, 9, 2]), 68)",
			"Test.assertEquals(totalVolume([1, 1, 5], [3, 3, 1]), 14)"
		],
		"starterFn": [
			"1\nfunction totalVolume(...boxes) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Dq8kbbsLYyG9are5Z"
	},
	{
		"title": "Move Capital Letters to the Front",
		"description": "<p><span>Create a function that moves all capital letters to the front of a word.</span></p><h3><span>Examples</span></h3><pre><code>capToFront(\"hApPy\") ➞ \"APhpy\"\n\ncapToFront(\"moveMENT\") ➞ \"MENTmove\"\n\ncapToFront(\"shOrtCAKE\") ➞ \"OCAKEshrt\"</code></pre><h3><span>Notes</span></h3><p><span>Keep the original relative order of the upper and lower case letters the same.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(capToFront(\"hApPy\"), \"APhpy\")",
			"Test.assertEquals(capToFront(\"moveMENT\"), \"MENTmove\")",
			"Test.assertEquals(capToFront(\"aPPlE\"), \"PPEal\")",
			"Test.assertEquals(capToFront(\"shOrtCAKE\"), \"OCAKEshrt\")"
		],
		"starterFn": [
			"1\nfunction capToFront(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8n9RyHThC3dNEPCng"
	},
	{
		"title": "How Much is True?",
		"description": "<p><span>Create a function which returns the </span><strong><span>number of true</span></strong><span> values there are in an array.</span></p><h3><span>Examples</span></h3><pre><code>countTrue([true, false, false, true, false]) ➞ 2\n\ncountTrue([false, false, false, false]) ➞ 0\n\ncountTrue([]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>0</code><span> if given an empty array.</span></li><li><span>All array items are of the type bool (</span><code>true</code><span> or </span><code>false</code><span>).</span></li></ul>",
		"publishedBy": "ente",
		"publishedByUrl": "https://edabit.com/user/2eAwdyT6n7og5EzdW",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(countTrue([true, false, false, true, false]), 2)",
			"Test.assertEquals(countTrue([false, false, false, false]), 0)",
			"Test.assertEquals(countTrue([]), 0)",
			"Test.assertEquals(countTrue([false, false, true, true, false, false, false, true, true, true, true, false, true, true, false]), 8)",
			"Test.assertEquals(countTrue([true, false, true, true, false, false, false, false, false]), 3)",
			"Test.assertEquals(countTrue([false, true, true, false, true, true, false, true, false, true, false, true, false, true, false]), 8)",
			"Test.assertEquals(countTrue([true, false, true, true, true, false, true, true, false, false]), 6)",
			"Test.assertEquals(countTrue([false, false, false, false, true, false, true, false, true, false, false]), 3)",
			"Test.assertEquals(countTrue([true, false, false, false, true, false, false, true, false, false, false]), 3)",
			"Test.assertEquals(countTrue([true, true, false, true, false, false, false, false, true, false]), 4)",
			"Test.assertEquals(countTrue([true, false, true, true, false, true, true, true, true, false, true, false, true, false]), 9)",
			"Test.assertEquals(countTrue([true, false, true, true, true, true, false, true, true, false, true, false, false, false, false]), 8)",
			"Test.assertEquals(countTrue([true, true, false, false, false, false, true, false, true, true, false, true]), 6)"
		],
		"starterFn": [
			"1\nfunction countTrue(arr) {",
			"2\n   ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GLbuMfTtDWwDv2F73"
	},
	{
		"title": "A Redundant Function",
		"description": "<p><span>Write a function </span><code>redundant</code><span> that takes in a string </span><code>str</code><span> and returns a function that returns </span><code>str</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>const f1 = redundant(\"apple\")\nf1() ➞ \"apple\"\n\nconst f2 = redundant(\"pear\")\nf2() ➞ \"pear\"\n\nconst f3 = redundant(\"\")\nf3() ➞ \"\"</code></pre><h3><span>Notes</span></h3><p><span>Your function should return a </span><strong><span>function</span></strong><span>, not a string.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"closures",
			"functional_programming",
			"language_fundamentals"
		],
		"tests": [
			"const f1 = redundant(\"apple\")",
			"const f2 = redundant(\"pear\")",
			"const f3 = redundant(\"\")",
			"​",
			"Test.assertEquals(f1(), \"apple\")",
			"Test.assertEquals(f2(), \"pear\")",
			"Test.assertEquals(f3(), \"\")"
		],
		"starterFn": [
			"1\nfunction redundant(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hzxN9bAebBPNqdQto"
	},
	{
		"title": "RegEx Exercise: An empty string",
		"description": "<p><span>If you've completed this </span><strong><span>RegEx</span></strong><span> series from I to XXII then you have been exposed to all of </span><strong><span>MDN</span></strong><span>'s documentation on </span><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\"><span>regular expressions special characters</span></a><span>. You can check my Collections under </span><strong><span>Basic Reg Ex</span></strong><span> in my profile if you missed any. This next part of the series is to help solidify what you've learned. In order to save time I will be searching the web to find </span><strong><span>regular expression</span></strong><span> exercises to post here.</span></p><p><span>You can test for empty string like this:</span></p><pre><code>\"\".length === 0 ➞ true</code></pre><p><span>Use a </span><strong><span>regular expression</span></strong><span> to test for an empty string.</span></p><pre><code>const REGEXP = /your solution/\nREGEXP.test(\"\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>You can find the solution in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = \"\";",
			"​",
			"const validate = (REGEXP) => {",
			"   // if(!//.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return REGEXP.test(str)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"// Test.assertNotEquals(testExp(str), \"invalid\", \"Nothing new here\")",
			"Test.assertSimilar(testExp(str), true) ",
			"​",
			"// credits to https://javascript.info/regexp-anchors"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */"
		],
		"url": "https://edabit.com/challenge/bAqxpvYmDuuvz4LQz"
	},
	{
		"title": "Special Arrays",
		"description": "<p><span>An array is </span><strong><span>special</span></strong><span>, if every </span><strong><span>even index</span></strong><span> contains an </span><strong><span>even number</span></strong><span> and every </span><strong><span>odd index</span></strong><span> contains an </span><strong><span>odd number</span></strong><span>. Create a function that returns </span><code>true</code><span> if an array is </span><strong><span>special</span></strong><span>, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isSpecialArray([2, 7, 4, 9, 6, 1, 6, 3]) ➞ true\n// Even indices: [2, 4, 6, 6]; Odd indices: [7, 9, 1, 3]\n\nisSpecialArray([2, 7, 9, 1, 6, 1, 6, 3]) ➞ false\n// Index 2 has an odd number 9.\n\nisSpecialArray([2, 7, 8, 8, 6, 1, 6, 3]) ➞ false\n// Index 3 has an even number 8.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSpecialArray([2, 7, 4, 9, 6, 1, 6, 3]), true)",
			"Test.assertEquals(isSpecialArray([2, 7, 9, 1, 6, 1, 6, 3]), false)",
			"Test.assertEquals(isSpecialArray([2, 7, 8, 8, 6, 1, 6, 3]), false)",
			"Test.assertEquals(isSpecialArray([1, 1, 1, 2]), false)",
			"Test.assertEquals(isSpecialArray([2, 2, 2, 2]), false)",
			"Test.assertEquals(isSpecialArray([2, 1, 2, 1]), true)",
			"Test.assertEquals(isSpecialArray([4, 5, 6, 7]), true)",
			"Test.assertEquals(isSpecialArray([4, 5, 6, 7, 0, 5]), true)"
		],
		"starterFn": [
			"1\nfunction isSpecialArray(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wikfKaQm3zP7buRA4"
	},
	{
		"title": "Convert Key, Values in an Object to Array",
		"description": "<p><span>Write a function that converts an object into an array of keys and values.</span></p><h3><span>Examples</span></h3><pre><code>objectToArray({\n  D: 1,\n  B: 2,\n  C: 3\n}) ➞ [[\"D\", 1], [\"B\", 2], [\"C\", 3]]\n\nobjectToArray({\n  likes: 2,\n  dislikes: 3,\n  followers: 10\n}) ➞ [[\"likes\", 2], [\"dislikes\", 3], [\"followers\", 10]]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(objectToArray({",
			"  D: 1, ",
			"  B: 2, ",
			"  C: 3",
			"}), [[\"D\", 1], [\"B\", 2], [\"C\", 3]])",
			"​",
			"Test.assertSimilar(objectToArray({",
			"  likes: 2, ",
			"  dislikes: 3, ",
			"  followers: 10",
			"}), [[\"likes\", 2], [\"dislikes\", 3], [\"followers\", 10]])"
		],
		"starterFn": [
			"1\nfunction objectToArray(obj) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4aaBNPnFMc3bzR7JR"
	},
	{
		"title": "Concatenate Variable Number of Input Arrays",
		"description": "<p><span>Create a function that concatenates </span><strong><span>n</span></strong><span> input arrays, where </span><strong><span>n</span></strong><span> is variable.</span></p><h3><span>Examples</span></h3><pre><code>concat([1, 2, 3], [4, 5], [6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n\nconcat([1], [2], [3], [4], [5], [6], [7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n\nconcat([1, 2], [3, 4]) ➞ [1, 2, 3, 4]\n\nconcat([4, 4, 4, 4, 4]) ➞ [4, 4, 4, 4, 4]</code></pre><h3><span>Notes</span></h3><p><span>Arrays should be concatenated in order of the arguments.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(concat([1, 2, 3], [4, 5], [6, 7]), [1, 2, 3, 4, 5, 6, 7])",
			"Test.assertSimilar(concat([1], [2], [3], [4], [5], [6], [7]), [1, 2, 3, 4, 5, 6, 7])",
			"Test.assertSimilar(concat([1, 2], [3, 4]), [1, 2, 3, 4])",
			"Test.assertSimilar(concat([4, 4, 4, 4, 4]), [4, 4, 4, 4, 4])",
			"Test.assertSimilar(concat(['a'], ['b', 'c']), ['a', 'b', 'c'])"
		],
		"starterFn": [
			"1\nfunction concat(...args) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Hs4TpDHX57Rqegmgg"
	},
	{
		"title": "Converting Objects to Arrays",
		"description": "<p><span>Write a function that converts an object into an array, where each element represents a key-value pair.</span></p><h3><span>Examples</span></h3><pre><code>toArray({ a: 1, b: 2 }) ➞ [[\"a\", 1], [\"b\", 2]]\n\ntoArray({ shrimp: 15, tots: 12 }) ➞ [[\"shrimp\", 15], [\"tots\", 12]]\n\ntoArray({}) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Return an empty array if the object is empty.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(toArray({ a: 1, b: 2 }), [[\"a\", 1], [\"b\", 2]])",
			"Test.assertSimilar(toArray({ foo: 33, bar: 45, baz: 67 }), [[\"foo\", 33], [\"bar\", 45], [\"baz\", 67]])",
			"Test.assertSimilar(toArray({ shrimp: 15, tots: 12 }), [[\"shrimp\", 15], [\"tots\", 12]])",
			"Test.assertSimilar(toArray({}), [])"
		],
		"starterFn": [
			"1\nfunction toArray(obj) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pPNAs5PvB3WvnDwDM"
	},
	{
		"title": "Triangular Number Sequence",
		"description": "<p><span>This Triangular Number Sequence is generated from a pattern of dots that form a triangle. The first 5 numbers of the sequence, or dots, are:</span></p><pre><code>1, 3, 6, 10, 15</code></pre><p><span>This means that the first triangle has just one dot, the second one has three dots, the third one has 6 dots and so on.</span></p><p><span>Write a function that gives the number of dots with its corresponding triangle number of the sequence.</span></p><h3><span>Examples</span></h3><pre><code>triangle(1) ➞ 1\n\ntriangle(6) ➞ 21\n\ntriangle(215) ➞ 23220</code></pre><h3><span>Notes</span></h3><p><span> Check the </span><strong><span>Resources</span></strong><span> for info on triangular number sequence.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(triangle(1), 1)",
			"Test.assertEquals(triangle(2), 3)",
			"Test.assertEquals(triangle(3), 6)",
			"Test.assertEquals(triangle(8), 36)",
			"Test.assertEquals(triangle(2153), 2318781)"
		],
		"starterFn": [
			"1\nfunction triangle(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RMZiERz2cbjmbXruY"
	},
	{
		"title": "Convenience Store",
		"description": "<p><span>Given a total due and an array representing the amount of change in your pocket, determine whether or not you are able to pay for the item. Change will always be represented in the following order: quarters, dimes, nickels, pennies.</span></p><p><span>To illustrate: </span><code>changeEnough([25, 20, 5, 0], 4.25)</code><span> should yield </span><code>true</code><span>, since having 25 quarters, 20 dimes, 5 nickels and 0 pennies gives you 6.25 + 2 + .25 + 0 = 8.50.</span></p><h3><span>Examples</span></h3><pre><code>changeEnough([2, 100, 0, 0], 14.11) ➞ false\n\nchangeEnough([0, 0, 20, 5], 0.75) ➞ true\n\nchangeEnough([30, 40, 20, 5], 12.55) ➞ true\n\nchangeEnough([10, 0, 0, 50], 3.85) ➞ false\n\nchangeEnough([1, 0, 5, 219], 19.99) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><strong><span>quarter</span></strong><span>: 25 cents / $0.25</span></li><li><strong><span>dime</span></strong><span>: 10 cents / $0.10</span></li><li><strong><span>nickel</span></strong><span>: 5 cents / $0.05</span></li><li><strong><span>penny</span></strong><span>: 1 cent / $0.01</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(changeEnough([2, 100, 0, 0], 14.11), false);",
			"Test.assertEquals(changeEnough([0, 0, 20, 5], 0.75), true);",
			"Test.assertEquals(changeEnough([30, 40, 20, 5], 12.55), true);",
			"Test.assertEquals(changeEnough([10, 0, 0, 50], 13.85), false);",
			"Test.assertEquals(changeEnough([1, 0, 5, 219], 19.99), false);",
			"Test.assertEquals(changeEnough([1, 0, 2555, 219], 127.75), true);",
			"Test.assertEquals(changeEnough([1, 335, 0, 219], 35.21), true);"
		],
		"starterFn": [
			"1\nfunction changeEnough(change, amountDue) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/erFxBbqzZPSegMwnc"
	},
	{
		"title": "Array of Multiples",
		"description": "<p><span>Create a function that takes two numbers as arguments (</span><code>num</code><span>, </span><code>length</code><span>) and returns an array of multiples of </span><code>num</code><span> up to </span><code>length</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>arrayOfMultiples(7, 5) ➞ [7, 14, 21, 28, 35]\n\narrayOfMultiples(12, 10) ➞ [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\n\narrayOfMultiples(17, 6) ➞ [17, 34, 51, 68, 85, 102]</code></pre><h3><span>Notes</span></h3><p><span>Notice that </span><code>num</code><span> is also included in the returned array.</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(arrayOfMultiples(7, 5), [7, 14, 21, 28, 35])",
			"Test.assertSimilar(arrayOfMultiples(12, 10), [12, 24, 36, 48, 60, 72, 84, 96, 108, 120])",
			"Test.assertSimilar(arrayOfMultiples(17, 7), [17, 34, 51, 68, 85, 102, 119])",
			"Test.assertSimilar(arrayOfMultiples(630, 14), [630, 1260, 1890, 2520, 3150, 3780, 4410, 5040, 5670, 6300, 6930, 7560, 8190, 8820])",
			"Test.assertSimilar(arrayOfMultiples(140, 3), [140, 280, 420])",
			"Test.assertSimilar(arrayOfMultiples(7, 8), [7, 14, 21, 28, 35, 42, 49, 56])",
			"Test.assertSimilar(arrayOfMultiples(11, 21), [11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 121, 132, 143, 154, 165, 176, 187, 198, 209, 220, 231])"
		],
		"starterFn": [
			"1\nfunction arrayOfMultiples (num, length) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ebcd4Xu8TLizaj6dm"
	},
	{
		"title": "Clone a List",
		"description": "<p><span>The </span><strong><span>Code</span></strong><span> tab has a code which attempts to add a clone of an array to itself. There is no error message, but the results are not as expected. Can you fix the code?</span></p><h3><span>Examples</span></h3><pre><code>clone([1, 1]) ➞ [1, 1, [1, 1]]\n\nclone([1, 2, 3]) ➞ [1, 2, 3, [1, 2, 3]]\n\nclone([\"x\", \"y\"]) ➞ [\"x\", \"y\", [\"x\", \"y\"]]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs"
		],
		"tests": [
			"Test.assertSimilar(clone([1, 2, 3]), [1, 2, 3, [1, 2, 3]], \"Example #1\")",
			"Test.assertSimilar(clone([\"x\", \"y\"]), [\"x\", \"y\", [\"x\", \"y\"]], \"Example #2\")",
			"Test.assertSimilar(clone([1, 1]), [1, 1, [1, 1]])",
			"Test.assertSimilar(clone([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\", [\"a\", \"b\", \"c\"]])",
			"Test.assertSimilar(clone([]),[[]])"
		],
		"starterFn": [
			"1\nfunction clone(arr) {",
			"2\n  arr.push(arr)",
			"3\n  return arr",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/RiyXDZNZAD4fj9xfJ"
	},
	{
		"title": "Return the Objects Keys and Values",
		"description": "<p><span>Create a function that takes an object and returns the keys and values as separate arrays.</span></p><h3><span>Examples</span></h3><pre><code>keysAndValues({ a: 1, b: 2, c: 3 })\n➞ [[\"a\", \"b\", \"c\"], [1, 2, 3]]\n\nkeysAndValues({ a: \"Apple\", b: \"Microsoft\", c: \"Google\" })\n➞ [[\"a\", \"b\", \"c\"], [\"Apple\", \"Microsoft\", \"Google\"]]\n\nkeysAndValues({ key1: true, key2: false, key3: undefined })\n➞ [[\"key1\", \"key2\", \"key3\"], [true, false, undefined]]</code></pre><h3><span>Notes</span></h3><p><span>Remember to sort the keys.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(keysAndValues({a: 1, b: 2, c: 3}), [[\"a\", \"b\", \"c\"], [1, 2, 3]])",
			"Test.assertSimilar(keysAndValues({a: \"Apple\", b: \"Microsoft\", c: \"Google\"}), [[\"a\", \"b\", \"c\"], [\"Apple\", \"Microsoft\", \"Google\"]])",
			"Test.assertSimilar(keysAndValues({key1: true, key2: false, key3: undefined}), [[\"key1\", \"key2\", \"key3\"], [true, false, undefined]])",
			"Test.assertSimilar(keysAndValues({1: null, 2: null, 3: null}), [[\"1\", \"2\", \"3\"], [null, null, null]])",
			"Test.assertSimilar(keysAndValues({key1: \"cat\", key2: \"dog\", key3: null}), [[\"key1\", \"key2\", \"key3\"], [\"cat\", \"dog\", null]])"
		],
		"starterFn": [
			"1\nfunction keysAndValues(obj) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AP4hnF97anRc2mAZ6"
	},
	{
		"title": "Integer in Range?",
		"description": "<p><span>Create a function which validates whether a number </span><code>n</code><span> is </span><em><span>exclusively</span></em><span> within the bounds of </span><code>lower</code><span> and </span><code>upper</code><span>. Return </span><code>false</code><span> if </span><code>n</code><span> is not an </span><strong><span>integer</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>intWithinBounds(3, 1, 9) ➞ true\n\nintWithinBounds(6, 1, 6) ➞ false\n\nintWithinBounds(4.5, 3, 8) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><em><span>Exclusively</span></em><span> means that a number is considered not within the bounds if it is equal to the upper bound (see example #2).</span></li><li><span>Bounds will be always given as integers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(intWithinBounds(3, 1, 9), true)",
			"Test.assertEquals(intWithinBounds(6, 1, 6), false)",
			"Test.assertEquals(intWithinBounds(4.5, 3, 8), false)",
			"Test.assertEquals(intWithinBounds(-5, -10, 6), true)",
			"Test.assertEquals(intWithinBounds(4, 0, 0), false)",
			"Test.assertEquals(intWithinBounds(10, 9, 11), true)",
			"Test.assertEquals(intWithinBounds(6.3, 2, 6), false)",
			"Test.assertEquals(intWithinBounds(6.3, 2, 10), false)",
			"Test.assertEquals(intWithinBounds(9, 2, 3), false)",
			"Test.assertEquals(intWithinBounds(9, 9, 9), false)",
			"Test.assertEquals(intWithinBounds(-3, -5, -2), true)",
			"Test.assertEquals(intWithinBounds(-3, -5, -3), false)",
			"Test.assertEquals(intWithinBounds(-3, -10, 10), true)",
			"Test.assertEquals(intWithinBounds(0, -3, 3), true)",
			"Test.assertEquals(intWithinBounds(0, 0, 1), true)",
			"Test.assertEquals(intWithinBounds(7, 7, 12), true)"
		],
		"starterFn": [
			"1\nfunction intWithinBounds(n, lower, upper) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YT2kXSMEtACPPk35R"
	},
	{
		"title": "Orthogonal Vector",
		"description": "<p><span>Create a function that takes two vectors as arrays and checks if the two vectors are orthogonal or not. The return value is boolean. Two vectors a and b are orthogonal if their dot product is equal to zero.</span></p><h3><span>Examples</span></h3><pre><code>isOrthogonal([1, 2], [2, -1]) ➞ true\n\nisOrthogonal([3, -1], [7, 5]) ➞ false\n\nisOrthogonal([1, 2, 0], [2, -1, 10]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>The two arrays will be of same length.</span></li><li><span>Check out the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isOrthogonal([7, 8], [7, -6]), false)",
			"Test.assertEquals(isOrthogonal([-13, -26], [-8, 4]), true)",
			"Test.assertEquals(isOrthogonal([1, 2], [2, -1]), true)",
			"Test.assertEquals(isOrthogonal([2, 4, 1], [2, 1, -8]), true)",
			"Test.assertEquals(isOrthogonal([1, 2, 0], [2, -1, 10]), true)",
			"Test.assertEquals(isOrthogonal([3, 8, 9], [16, 17, -18]), false)"
		],
		"starterFn": [
			"1\nfunction isOrthogonal(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qJGDCEZRoGRPt3viu"
	},
	{
		"title": "Fix the Error: Value vs. Reference Types",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if two arrays contain identical values, and </span><code>false</code><span> otherwise.</span></p><p><span>To solve this question, your friend writes the following code:</span></p><pre><code>function checkEquals(arr1, arr2) {\nif (arr1 === arr2) {\n  return true\n } else {\n  return false\n }\n}</code></pre><p><span>But testing the code, you see that something is not quite right.\nRunning the code yields the following results:</span></p><pre><code>checkEquals([1, 2], [1, 3]) ➞ false\n// Good so far...\n\ncheckEquals([1, 2], [1, 2]) ➞ false\n// Yikes! What happened?</code></pre><p><span>Rewrite your friend's code so that it correctly checks if two arrays are equal. The tests below should pass:</span></p><h3><span>Examples</span></h3><pre><code>checkEquals([1, 2], [1, 3]) ➞ false\n\ncheckEquals([1, 2], [1, 2]) ➞ true\n\ncheckEquals([4, 5, 6], [4, 5, 6]) ➞ true\n\ncheckEquals([4, 7, 6], [4, 5, 6]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Hint: This has to do with </span><strong><span>value</span></strong><span> vs. </span><strong><span>reference types</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkEquals([1, 2], [1, 3]), false)",
			"Test.assertEquals(checkEquals([1, 2], [1, 2]), true)",
			"Test.assertEquals(checkEquals([4, 5, 6], [4, 5, 6]), true)",
			"Test.assertEquals(checkEquals([4, 7, 6], [4, 5, 6]), false)"
		],
		"starterFn": [
			"1\n// Fix this broken code!",
			"2\nfunction checkEquals(arr1, arr2) {",
			"3\n  if (arr1 === arr2) {",
			"4\n    return true ",
			"5\n  } else {",
			"6\n    return false",
			"7\n  }",
			"8\n}"
		],
		"url": "https://edabit.com/challenge/3jZyJTfsXTXXwAQkA"
	},
	{
		"title": "Make a Circle with OOP",
		"description": "<p><span>Your task is to create a Circle constructor that creates a circle  with a radius provided by an argument. The circles constructed must have two getters </span><code>getArea()</code><span> (PI</span><em><span>r^2) and </span><code>getPerimeter()</code><span> (2</span></em><span>PI*r) which give both respective areas and perimeter (circumference).</span></p><p><span>For help with this class, I have provided you with a Rectangle constructor which you can use as a base example.</span></p><h3><span>Examples</span></h3><pre><code>let circy = new Circle(11);\ncircy.getArea();\n\n// Should return 380.132711084365\n\nlet circy = new Circle(4.44);\ncircy.getPerimeter();\n\n// Should return 27.897342763877365</code></pre><h3><span>Notes</span></h3><p><span>Don't worry about floating point  precision - I've factored in the chance that your answer may be more or less accurate than mine. This is more of a tutorial than a challenge so the topic covered may be considered advanced, yet the challenge is more simple - so if this challenge gets labelled as easy, don't worry too much.</span></p>",
		"publishedBy": "joe111",
		"publishedByUrl": "https://edabit.com/user/E3bAbAjwFzekBoMGD",
		"language": "JavaScript",
		"tags": [
			"classes",
			"math",
			"objects"
		],
		"tests": [
			"function round(number) {",
			"  var factor = Math.pow(10, 5);",
			"  return Math.round(number * factor) / factor;",
			"}",
			"let circo = new Circle(20);",
			"Test.assertEquals(round(circo.getArea()), 1256.63706);",
			"Test.assertEquals(round(circo.getPerimeter()), 125.66371);",
			"let circo1 = new Circle(2);",
			"Test.assertEquals(round(circo1.getArea()), 12.56637);",
			"Test.assertEquals(round(circo1.getPerimeter()), 12.56637);",
			"let circo2 = new Circle(4.4);",
			"Test.assertEquals(round(circo2.getArea()), 60.82123);",
			"Test.assertEquals(round(circo2.getPerimeter()),  27.64602);",
			"let randomInt = round(Math.floor(Math.random() * Math.floor(200)));",
			"//scroll down for spoilers that are hard to use",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​"
		],
		"starterFn": [
			"1\nclass Rectangle {",
			"2\n  constructor(sideA,sideB){",
			"3\n    this.sideA = sideA;",
			"4\n    this.sideB = sideB;",
			"5\n  }",
			"6\n  getArea(){return this.sideA*this.sideB};",
			"7\n  getPerimeter(){return (this.sideA + this.sideB) *2 };",
			"8\n}",
			"9\n​",
			"10\n​",
			"11\nclass Circle {",
			"12\n  //put code here",
			"13\n}",
			"14\n​",
			"15\n//unquote and use run to test these cases",
			"16\n/*let q = new Circle(4.44);",
			"17\nconsole.log(q.getArea());",
			"18\nconsole.log(q.getPerimeter());",
			"19\n*/"
		],
		"url": "https://edabit.com/challenge/Hgb38yhWGwJCMHbRQ"
	},
	{
		"title": "Factor Chain",
		"description": "<p><span>A </span><strong><span>factor chain</span></strong><span> is an array where each previous element is a factor of the next  consecutive element. The following is a factor chain: </span></p><pre><code>[3, 6, 12, 36]\n\n// 3 is a factor of 6\n// 6 is a factor of 12\n// 12 is a factor of 36</code></pre><p><span>Create a function that determines whether or not an array is a factor chain. </span></p><h3><span>Examples</span></h3><pre><code>factorChain([1, 2, 4, 8, 16, 32]) ➞ true\n\nfactorChain([1, 1, 1, 1, 1, 1]) ➞ true\n\nfactorChain([2, 4, 6, 7, 12]) ➞ false\n\nfactorChain([10, 1]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(factorChain([1, 2, 4, 8, 16, 32]), true)",
			"Test.assertEquals(factorChain([1, 1, 1, 1, 1, 1]), true)",
			"Test.assertEquals(factorChain([2, 4, 6, 7, 12]), false)",
			"Test.assertEquals(factorChain([10, 1]), false)",
			"Test.assertEquals(factorChain([10, 20, 30, 40]), false)",
			"Test.assertEquals(factorChain([10, 20, 40]), true)",
			"Test.assertEquals(factorChain([1, 1, 1, 1, 7, 49]), true)"
		],
		"starterFn": [
			"1\nfunction factorChain(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FtZGQEonGwyozeCna"
	},
	{
		"title": "Basic Calculator",
		"description": "<p><span>Create a function that takes two numbers and a mathematical operator </span><code>+ - / *</code><span> and will perform a calculation with the given numbers.</span></p><h3><span>Examples</span></h3><pre><code>calculator(2, \"+\", 2) ➞ 4\n\ncalculator(2, \"*\", 2) ➞ 4\n\ncalculator(4, \"/\", 2) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>If the input tries to divide by 0, return: </span><code>\"Can't divide by 0!\"</code></p>",
		"publishedBy": "Stanislav Mozolevskiy",
		"publishedByUrl": "https://edabit.com/user/M3z4ZPgywPqX9eoS4",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(calculator(2, '/', 2), 1)",
			"Test.assertEquals(calculator(10, '-', 7), 3)",
			"Test.assertEquals(calculator(2, '*', 16), 32)",
			"Test.assertEquals(calculator(2, '-', 2), 0)",
			"Test.assertEquals(calculator(15, '+', 26), 41)",
			"Test.assertEquals(calculator(2, '+', 2), 4)",
			"Test.assertEquals(calculator(2, \"/\", 0), \"Can't divide by 0!\")"
		],
		"starterFn": [
			"1\nfunction calculator(num1, operator, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AtoWYYC9THAH5HbS2"
	},
	{
		"title": "Even or Odd Number of Factors",
		"description": "<p><span>Create a function that returns </span><code>\"even\"</code><span> if a number has an even number of factors and </span><code>\"odd\"</code><span> if a number has an odd number of factors.</span></p><h3><span>Examples</span></h3><pre><code>factorGroup(33) ➞ \"even\"\n\nfactorGroup(36) ➞ \"odd\"\n\nfactorGroup(7) ➞ \"even\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You don't need to actually calculate the factors to solve this problem.</span></li><li><span>Think about </span><em><span>why</span></em><span> a number would have an odd number of factors.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(factorGroup(33), \"even\")",
			"Test.assertEquals(factorGroup(36), \"odd\")",
			"Test.assertEquals(factorGroup(7), \"even\")",
			"Test.assertEquals(factorGroup(1), \"odd\")",
			"Test.assertEquals(factorGroup(19), \"even\")",
			"Test.assertEquals(factorGroup(27), \"even\")",
			"Test.assertEquals(factorGroup(100), \"odd\")",
			"Test.assertEquals(factorGroup(18), \"even\")",
			"Test.assertEquals(factorGroup(16), \"odd\")"
		],
		"starterFn": [
			"1\nfunction factorGroup(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uGKSYufSxtBErTrhd"
	},
	{
		"title": "Get Sum of People's Budget",
		"description": "<p><span>Create the function that takes an array with objects and returns the sum of people's budgets.</span></p><h3><span>Examples</span></h3><pre><code>getBudgets([\n  { name: \"John\", age: 21, budget: 23000 },\n  { name: \"Steve\",  age: 32, budget: 40000 },\n  { name: \"Martin\",  age: 16, budget: 2700 }\n]) ➞ 65700\n\ngetBudgets([\n  { name: \"John\",  age: 21, budget: 29000 },\n  { name: \"Steve\",  age: 32, budget: 32000 },\n  { name: \"Martin\",  age: 16, budget: 1600 }\n]) ➞ 62600</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "felixjoykind",
		"publishedByUrl": "https://edabit.com/user/Yqafc6nLMBJnG3SqR",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"objects"
		],
		"tests": [
			"Test.assertEquals(getBudgets([{name: \"John\",  age: 21, budget: 23000}, {name: \"Steve\",  age: 32, budget: 40000}, {name: \"Martin\",  age: 16, budget: 2700}]), 65700)",
			"Test.assertEquals(getBudgets([{name: \"John\",  age: 21, budget: 29000}, {name: \"Steve\",  age: 32, budget: 32000}, {name: \"Martin\",  age: 16, budget: 1600}]), 62600)",
			"Test.assertEquals(getBudgets([{name: \"John\",  age: 21, budget: 19401}, {name: \"Steve\",  age: 32, budget: 12321}, {name: \"Martin\",  age: 16, budget: 1204}]), 32926)",
			"Test.assertEquals(getBudgets([{name: \"John\",  age: 21, budget: 10234}, {name: \"Steve\",  age: 32, budget: 21754}, {name: \"Martin\",  age: 16, budget: 4935}]), 36923)"
		],
		"starterFn": [
			"1\nfunction getBudgets(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tmnCStcrkdWbreKP5"
	},
	{
		"title": "Hitting the Jackpot",
		"description": "<p><span>Create a function that takes in an array (slot machine outcome) and returns </span><code>true</code><span> if all elements in the array are identical, and </span><code>false</code><span> otherwise. The array will contain 4 elements.</span></p><h3><span>Examples</span></h3><pre><code>testJackpot([\"@\", \"@\", \"@\", \"@\"]) ➞ true\n\ntestJackpot([\"abc\", \"abc\", \"abc\", \"abc\"]) ➞ true\n\ntestJackpot([\"SS\", \"SS\", \"SS\", \"SS\"]) ➞ true\n\ntestJackpot([\"&amp;&amp;\", \"&amp;\", \"&amp;&amp;&amp;\", \"&amp;&amp;&amp;&amp;\"]) ➞ false\n\ntestJackpot([\"SS\", \"SS\", \"SS\", \"Ss\"]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>The elements must be exactly identical for there to be a jackpot.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"games",
			"strings"
		],
		"tests": [
			"Test.assertEquals(testJackpot(['@', '@', '@', '@']), true)",
			"Test.assertEquals(testJackpot(['!', '!', '!', '!']), true)",
			"Test.assertEquals(testJackpot(['abc', 'abc', 'abc', 'abc']), true)",
			"Test.assertEquals(testJackpot(['karaoke', 'karaoke', 'karaoke', 'karaoke']), true)",
			"Test.assertEquals(testJackpot(['SS', 'SS', 'SS', 'SS']), true)",
			"Test.assertEquals(testJackpot([':(', ':)', ':|', ':|']), false)",
			"Test.assertEquals(testJackpot(['&&', '&', '&&&', '&&&&']), false)",
			"Test.assertEquals(testJackpot(['hee', 'heh', 'heh', 'heh']), false)",
			"Test.assertEquals(testJackpot(['SS', 'SS', 'SS', 'Ss']), false)",
			"Test.assertEquals(testJackpot(['SS', 'SS', 'Ss', 'Ss']), false)"
		],
		"starterFn": [
			"1\nfunction testJackpot(result) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hxyvTffvdT4E238CY"
	},
	{
		"title": "Square Every Digit",
		"description": "<p><span>Create a function that squares every digit of a number.</span></p><h3><span>Examples</span></h3><pre><code>squareDigits(9119) ➞ 811181\n\nsquareDigits(2483) ➞ 416649\n\nsquareDigits(3212) ➞ 9414</code></pre><h3><span>Notes</span></h3><p><span>The function receives an integer and must return an integer.</span></p>",
		"publishedBy": "Enkuryo",
		"publishedByUrl": "https://edabit.com/user/Nc23QyxhdeFRwzj5W",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(squareDigits(9119), 811181)",
			"Test.assertEquals(squareDigits(8726), 6449436)",
			"Test.assertEquals(squareDigits(9763), 8149369)",
			"Test.assertEquals(squareDigits(2230), 4490)",
			"Test.assertEquals(squareDigits(2797), 4498149)",
			"Test.assertEquals(squareDigits(233), 499)",
			"Test.assertEquals(squareDigits(7437), 4916949)",
			"Test.assertEquals(squareDigits(2483), 416649)",
			"Test.assertEquals(squareDigits(5742), 2549164)",
			"Test.assertEquals(squareDigits(5636), 2536936)",
			"Test.assertEquals(squareDigits(841), 64161)"
		],
		"starterFn": [
			"1\nfunction squareDigits(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Tnjbf6pdFsCjmaF8p"
	},
	{
		"title": "Remove Trailing and Leading Zeros",
		"description": "<p><span>Create a function that takes in a </span><em><span>number as a string</span></em><span> </span><code>n</code><span> and returns the number </span><strong><span>without trailing and leading zeros</span></strong><span>.</span></p><ul><li><strong><span>Trailing Zeros</span></strong><span> are the zeros </span><em><span>after</span></em><span> a decimal point which </span><em><span>don't affect the value</span></em><span>\n(e.g. the </span><em><span>last three</span></em><span> zeros in </span><code>3.4000</code><span> and </span><code>3.04000</code><span>).</span></li><li><strong><span>Leading Zeros</span></strong><span> are the zeros </span><em><span>before</span></em><span> a whole number which </span><em><span>don't affect the value</span></em><span> (e.g. the </span><em><span>first three</span></em><span> zeros in </span><code>000234</code><span> and </span><code>000230</code><span>).</span></li></ul><h3><span>Examples</span></h3><pre><code>removeLeadingTrailing(\"230.000\") ➞ \"230\"\n\nremoveLeadingTrailing(\"00402\") ➞ \"402\"\n\nremoveLeadingTrailing(\"03.1400\") ➞ \"3.14\"\n\nremoveLeadingTrailing(\"30\") ➞ \"30\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Return a </span><strong><span>string</span></strong><span>.</span></li><li><span>If you get a number with </span><code>.0</code><span> on the end, return the </span><em><span>integer value</span></em><span> (e.g. return </span><code>\"4\"</code><span> rather than </span><code>\"4.0\"</code><span>).</span></li><li><span>If the number is </span><code>0</code><span>, </span><code>0.0</code><span>, </span><code>000</code><span>, </span><code>00.00</code><span>, etc... return </span><code>\"0\"</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeLeadingTrailing(\"230.000\"), \"230\")",
			"Test.assertEquals(removeLeadingTrailing(\"00402\"), \"402\")",
			"Test.assertEquals(removeLeadingTrailing(\"03.1400\"), \"3.14\")",
			"Test.assertEquals(removeLeadingTrailing(\"30\"), \"30\")",
			"Test.assertEquals(removeLeadingTrailing(\"30.0000\"), \"30\")",
			"Test.assertEquals(removeLeadingTrailing(\"24340\"), \"24340\")",
			"Test.assertEquals(removeLeadingTrailing(\"0404040\"), \"404040\")",
			"Test.assertEquals(removeLeadingTrailing(\"0\"), \"0\")",
			"Test.assertEquals(removeLeadingTrailing(\"00\"), \"0\")",
			"Test.assertEquals(removeLeadingTrailing(\"0.000000\"), \"0\")",
			"Test.assertEquals(removeLeadingTrailing(\"0000.000\"), \"0\")",
			"Test.assertEquals(removeLeadingTrailing(\"00.0001\"), \"0.0001\")",
			"Test.assertEquals(removeLeadingTrailing(\"10000\"), \"10000\")",
			"Test.assertEquals(removeLeadingTrailing(\"1345\"), \"1345\")",
			"Test.assertEquals(removeLeadingTrailing(\"30.000020\"), \"30.00002\")",
			"Test.assertEquals(removeLeadingTrailing(\"00200.1900001\"), \"200.1900001\")"
		],
		"starterFn": [
			"1\nfunction removeLeadingTrailing(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3jzycf6fcgwZbvpcf"
	},
	{
		"title": "Algebra Sequence — Boxes",
		"description": "<p><span>Create a function that takes a number (step) as an argument and returns the amount of boxes in that step of the sequence.</span></p><p><img alt=\"Box Sequence Image\" title=\"Box Sequence\" src=\"https://edabit-challenges.s3.amazonaws.com/algebra_sequence_boxes.png\"></p><ul><li><span>Step 0: Start with 0</span></li><li><span>Step 1: Add 3</span></li><li><span>Step 2: Subtract 1</span></li><li><span>Repeat Step 1 &amp; 2 ...</span></li></ul><h3><span>Examples</span></h3><pre><code>boxSeq(0) ➞ 0\n\nboxSeq(1) ➞ 3\n\nboxSeq(2) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>Step (the input) is always a positive integer (or zero).</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"loops"
		],
		"tests": [
			"Test.assertEquals(boxSeq(5), 7)",
			"Test.assertEquals(boxSeq(0), 0)",
			"Test.assertEquals(boxSeq(6), 6)",
			"Test.assertEquals(boxSeq(99), 101)",
			"Test.assertEquals(boxSeq(2), 2)",
			"Test.assertEquals(boxSeq(1), 3)"
		],
		"starterFn": [
			"1\nfunction boxSeq(step) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Q4mYkd8nc8zdFBDE8"
	},
	{
		"title": "Fix the Error: Flattening an Array",
		"description": "<p><span>I'm trying to write a function to flatten an array of subarrays into one array. (Suppose I am unware there is a </span><code>.flat()</code><span> method in the Array prototype). In other words, I want to transform this: </span><code>[[1, 2], [3, 4]]</code><span> into </span><code>[1, 2, 3, 4]</code><span>.</span></p><p><span>Here is my code:</span></p><pre><code>function flatten(arr) {\n  arr2 = [];\n  for (let i = 0; i &lt; arr.length; i++) {\n    arr2.concat(arr[i]);\n  }\n  return arr2;\n}</code></pre><p><span>But...it doesn't seem to be working! Fix my code so that it correctly flattens the array. </span></p><h3><span>Examples</span></h3><pre><code>flatten([[1, 2], [3, 4]]) ➞ []\n// Expected: [1, 2, 3, 4]\n\nflatten([[\"a\", \"b\"], [\"c\", \"d\"]]) ➞ []\n// Expected: [\"a\", \"b\", \"c\", \"d\"]\n\nflatten([[true, false], [false, false]]) ➞ []\n// Expected: [true, false, false, false]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs"
		],
		"tests": [
			"Test.assertSimilar(flatten([[1, 2], [3, 4]]), [1, 2, 3, 4])",
			"Test.assertSimilar(flatten([['a', 'b'], ['c', 'd']]), ['a', 'b', 'c', 'd'])",
			"Test.assertSimilar(flatten([[true, false], [false, false]]), [true, false, false, false])"
		],
		"starterFn": [
			"1\n// Fix this incorrect code so that all tests pass!",
			"2\nfunction flatten(arr) {",
			"3\n  arr2 = [];",
			"4\n  for (let i = 0; i < arr.length; i++) {",
			"5\n    arr2.concat(arr[i]);",
			"6\n  }",
			"7\n  return arr2; ",
			"8\n}"
		],
		"url": "https://edabit.com/challenge/MXChCnzCSBobgY4Ex"
	},
	{
		"title": "The Reverser!",
		"description": "<p><span>The \"Reverser\" takes a string as input and returns that string in reverse order, with the opposite case.</span></p><h3><span>Examples</span></h3><pre><code>reverse(\"Hello World\") ➞ \"DLROw OLLEh\"\n\nreverse(\"ReVeRsE\") ➞ \"eSrEvEr\"\n\nreverse(\"Radar\") ➞ \"RADAr\"</code></pre><h3><span>Notes</span></h3><p><span>There will be no punctuation in any of the test cases.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverse(\"Hello World\"), \"DLROw OLLEh\")",
			"Test.assertEquals(reverse(\"ReVeRsE\"), \"eSrEvEr\")",
			"Test.assertEquals(reverse(\"\"), \"\")",
			"Test.assertEquals(reverse(\"Radar\"), \"RADAr\")"
		],
		"starterFn": [
			"1\nfunction reverse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/m3Ho3E9KDE7i8XKCn"
	},
	{
		"title": "Promises I: What Is a Closure?",
		"description": "<p><span>Closures are functions that </span><strong><span>remember</span></strong><span> their lexical environments.  </span><strong><span>Lexical environments</span></strong><span> mean the environment in which the function was declared.</span></p><pre><code>function parent(x) {\n  return function closure() {    // Closure is declared here.\n    return x\n  }\n}\n\nconst remember = parent(\"remembers me\")\n// Seems like the variable x would be gone after\n// parent is executed, but it's not.\n\nclosure()\n// Returns \"remembers me\" because the inner\n// function remembers x.</code></pre><ul><li><span>Fix the </span><code>greetingMaker()</code><span> function so that it works with the </span><code>greeting()</code><span> function. </span></li><li><span>The </span><code>greeting()</code><span> function has already been created (check the </span><strong><span>Tests</span></strong><span> tab).</span></li></ul><h3><span>Example</span></h3><pre><code>const greeting = greetingMaker(\"Hello\")\ngreeting(\"James\") ➞ \"Hello, James\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on closures.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"closures",
			"functional_programming"
		],
		"tests": [
			"const greeting = greetingMaker(\"Hello\")",
			"​",
			"Test.assertEquals(greeting(\"James\"), \"Hello, James\")",
			"Test.assertEquals(greeting(\"John\"), \"Hello, John\")",
			"Test.assertEquals(greeting(\"Jacob\"), \"Hello, Jacob\")",
			"Test.assertEquals(greeting(\"Joseph\"), \"Hello, Joseph\")"
		],
		"starterFn": [
			"1\nfunction greetingMaker() {",
			"2\n  function closure(name) {",
			"3\n    return salutation + \", \" + name   ",
			"4\n  }",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/rLybgi7vcxL2ykt8F"
	},
	{
		"title": "Sastry Numbers",
		"description": "<p><span>In this challenge, you have to establish if a given integer </span><code>n</code><span> is a Sastry number. If the number resulting from the concatenation of an integer  </span><code>n</code><span> with its successor is a perfect square, then </span><code>n</code><span> is a Sastry Number.</span></p><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns </span><code>true</code><span> if </span><code>n</code><span> is a Sastry number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isSastry(183) ➞ true\n// Concatenation of n and its successor = 183184\n// 183184 is a perfect square (428 ^ 2)\n\nisSastry(184) ➞ false\n// Concatenation of n and its successor = 184185\n// 184185 is not a perfect square\n\nisSastry(106755) ➞ true\n// Concatenation of n and its successor = 106755106756\n// 106755106756 is a perfect square (326734 ^ 2)</code></pre><h3><span>Notes</span></h3><ul><li><span>A perfect square is a number with a square root equals to a whole integer.</span></li><li><span>You can expect only valid positive integers greater than 0 as input, without exceptions to handle. Zero is a perfect square, but the concatenation 00 isn't considered as a valid result to check.</span></li><li><span>In JavaScript, despite the specific challenge the results are proofed, the method used to calculate if an integer greater of </span><code>2 ** 53 - 1</code><span> is a Sastry number can lead to errors due to the approximation of the JS engine.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSastry(183), true, \"Example #1\")",
			"Test.assertEquals(isSastry(184), false, \"Example #2\")",
			"Test.assertEquals(isSastry(106755), true, \"Example #3\")",
			"Test.assertEquals(isSastry(129987253440921), false)",
			"Test.assertEquals(isSastry(157175907513603), true)",
			"Test.assertEquals(isSastry(206611570247935), true)",
			"Test.assertEquals(isSastry(338752188230098), false)",
			"Test.assertEquals(isSastry(433610247875715), true)",
			"Test.assertEquals(isSastry(652333983478884), false)",
			"Test.assertEquals(isSastry(718717107443715), true)",
			"Test.assertEquals(isSastry(752199872453889), false)",
			"Test.assertEquals(isSastry(786704531939448), true)"
		],
		"starterFn": [
			"1\nfunction isSastry(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KjSae7LTFzYTC256A"
	},
	{
		"title": "Return the Time Saved by Speeding",
		"description": "<p><span>One cause for speeding is the desire to shorten the time spent traveling. While in long distance trips speeding does save an appreciable amount of time, the same cannot be said about short distance trips.</span></p><p><span>Create a function that calculates the amount of time saved (in minutes) were you traveling with an average speed that is above the speed-limit as compared to traveling with an average speed exactly at the speed-limit.</span></p><h3><span>Examples</span></h3><pre><code>// The paramater's format is as follows:\n// (speed limit, avg speed, distance traveled at avg speed)\n\ntimeSaved(80, 90, 40) ➞ 3.3\n\ntimeSaved(80, 90, 4000) ➞ 333.3\n\ntimeSaved(80, 100, 40 ) ➞ 6.0\n\ntimeSaved(80, 100, 10) ➞ 1.5</code></pre><h3><span>Notes</span></h3><ul><li><span>Speed = distance/time</span></li><li><span>The time returned should be in </span><strong><span>minutes</span></strong><span>, not hours.</span></li><li><span>The unit of speed is assumed to be </span><strong><span>miles per hour</span></strong><span> (</span><strong><em><span>mph</span></em></strong><span>).</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math"
		],
		"tests": [
			"Test.assertEquals(timeSaved(80, 90, 40), 3.3)",
			"Test.assertEquals(timeSaved(80, 90, 4000), 333.3)",
			"Test.assertEquals(timeSaved(80, 100, 40), 6.0)",
			"Test.assertEquals(timeSaved(80, 100, 10), 1.5)",
			"Test.assertEquals(timeSaved(60, 65, 25), 1.9)",
			"Test.assertEquals(timeSaved(60, 60, 20), 0)",
			"Test.assertEquals(timeSaved(80, 95, 200), 23.7)",
			"Test.assertEquals(timeSaved(70, 92, 50), 10.2)",
			"Test.assertEquals(timeSaved(70, 92, 20), 4.1)",
			"Test.assertEquals(timeSaved(70, 100, 12), 3.1)"
		],
		"starterFn": [
			"1\nfunction timeSaved(lim, avg, d) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fkzJMioMcnP4p4BFG"
	},
	{
		"title": "All About Anonymous Functions: Adding Suffixes",
		"description": "<p><span>Write a function that returns an </span><strong><span>anonymous function</span></strong><span>, which transforms its input by adding a particular </span><code>suffix</code><span> at the end.</span></p><h3><span>Examples</span></h3><pre><code>add_ly = add_suffix(\"ly\")\n\nadd_ly(\"hopeless\") ➞ \"hopelessly\"\nadd_ly(\"total\") ➞\"totally\"\n\nadd_less = add_suffix(\"less\")\n\nadd_less(\"fear\") ➞ \"fearless\"\nadd_less(\"ruth\") ➞ \"ruthless\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"closures",
			"higher_order_functions",
			"language_fundamentals"
		],
		"tests": [
			"add_ly = add_suffix(\"ly\") ",
			"add_less = add_suffix(\"less\") ",
			"add_ing = add_suffix(\"ing\") ",
			"​",
			"​",
			"Test.assertEquals(add_ly(\"hopeless\"), \"hopelessly\")",
			"Test.assertEquals(add_ly(\"total\"), \"totally\")",
			"​",
			"Test.assertEquals(add_less(\"fear\"), \"fearless\")",
			"Test.assertEquals(add_less(\"ruth\"), \"ruthless\")",
			"​",
			"Test.assertEquals(add_ing(\"cheer\"), \"cheering\")",
			"Test.assertEquals(add_ing(\"book\"), \"booking\")"
		],
		"starterFn": [
			"1\nfunction add_suffix(suffix) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ra85gzkCTtXrNyCag"
	},
	{
		"title": "Index Multiplier",
		"description": "<p><span>Return the sum of all items in an array, where each item is multiplied by its index (zero-based). For empty arrays, return </span><code>0</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>indexMultiplier([1, 2, 3, 4, 5]) ➞ 40\n// (1*0 + 2*1 + 3*2 + 4*3 + 5*4)\n\nindexMultiplier([-3, 0, 8, -6]) ➞ -2\n// (-3*0 + 0*1 + 8*2 + -6*3)</code></pre><h3><span>Notes</span></h3><p><span>All items in the array will be integers.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(indexMultiplier([9, 3, 7, -7]), -4)",
			"Test.assertEquals(indexMultiplier([3, 8, 6, -4]), 8)",
			"Test.assertEquals(indexMultiplier([10, -9, -2, 0, 2]), -5)",
			"Test.assertEquals(indexMultiplier([4, 4, 2, 2, -4]), -2)",
			"Test.assertEquals(indexMultiplier([9, 4, 7, 5, -1, -3]), 14)",
			"Test.assertEquals(indexMultiplier([-9, 5, 9, 5, -7, 7]), 45)",
			"Test.assertEquals(indexMultiplier([-1, -2, 8, -5]), -1)",
			"Test.assertEquals(indexMultiplier([7, 10, -5, -4, 6, 2]), 22)",
			"Test.assertEquals(indexMultiplier([0, 1, 0, 1, 0, 1, 0, 1]), 16)",
			"Test.assertEquals(indexMultiplier([-2, 5, -7, -23, 0, 14]), -8)",
			"Test.assertEquals(indexMultiplier([53, -43, 39, -2, -11, 3]), 0)",
			"Test.assertEquals(indexMultiplier([40, 32, -18, 48, -15]), 80)",
			"Test.assertEquals(indexMultiplier([1, -20, -11, 4, -12, 38, -30, 34]), 170)",
			"Test.assertEquals(indexMultiplier([-21, 30, 20, 6, -16]), 24)",
			"Test.assertEquals(indexMultiplier([8, -24, -8, -23, 20, 32, -29, -20]), -183)",
			"Test.assertEquals(indexMultiplier([]), 0)"
		],
		"starterFn": [
			"1\nfunction indexMultiplier(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3Efavz8YmSBia4p8s"
	},
	{
		"title": "Count Ones in Binary Representation of Integer",
		"description": "<p><span>Count the amount of ones in the </span><em><span>binary representation</span></em><span> of an integer. So for example, since 12 is '1100' in binary, the return value should be </span><code>2</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>countOnes(0) ➞ 0\n\ncountOnes(100) ➞ 3\n\ncountOnes(999) ➞ 8</code></pre><h3><span>Notes</span></h3><p><span>The input will always be a valid integer (number).</span></p>",
		"publishedBy": "Jasperr",
		"publishedByUrl": "https://edabit.com/user/xxmeopX7HggJJsvYB",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(countOnes(12), 2)",
			"Test.assertEquals(countOnes(0), 0)",
			"Test.assertEquals(countOnes(100), 3)",
			"Test.assertEquals(countOnes(101), 4)",
			"Test.assertEquals(countOnes(999), 8)",
			"Test.assertEquals(countOnes(1e9), 13)",
			"Test.assertEquals(countOnes(123456789), 16)",
			"Test.assertEquals(countOnes(1234567890), 12)"
		],
		"starterFn": [
			"1\nfunction countOnes(i) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KcMmQE3bhxvfiYquQ"
	},
	{
		"title": "Volume of a Cone",
		"description": "<p><span>Create a function that takes the height and radius of a cone as arguments and returns the volume of the cone rounded to the nearest hundredth.</span></p><p><img alt=\"Volume of a Cone Image\" title=\"Volume of a Cone\" src=\"https://edabit-challenges.s3.amazonaws.com/volume_of_cone.gif\"></p><h3><span>Examples</span></h3><pre><code>coneVolume(3, 2) ➞ 12.57\n\nconeVolume(15, 6) ➞ 565.49\n\nconeVolume(18, 0) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>See the resources tab for the formula.</span></li><li><span>Return  approximate answer by rounding the answer to the nearest hundredth.</span></li><li><span>Use JavaScript's PI property, don't fall for 3.14 ;-)</span></li><li><span>If the cone has no volume, return </span><code>0</code><span>.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(coneVolume(3, 2), 12.57)",
			"Test.assertEquals(coneVolume(15, 6), 565.49)",
			"Test.assertEquals(coneVolume(18, 0), 0)",
			"Test.assertEquals(coneVolume(100, 2), 418.88)",
			"Test.assertEquals(coneVolume(1, 1), 1.05)",
			"Test.assertEquals(coneVolume(0, 30), 0)"
		],
		"starterFn": [
			"1\nfunction coneVolume(h, r) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/P6XbTvWyHkrpPfhvu"
	},
	{
		"title": "Explosion Intensity",
		"description": "<p><span>Given a number, return a string of the word </span><code>\"Boom\"</code><span>, which varies in the following ways:</span></p><ul><li><span>The string should include </span><code>n</code><span> number of \"o\"s, unless </span><code>n</code><span> is below 2 (in that case, return </span><code>\"boom\"</code><span>).</span></li><li><span>If </span><code>n</code><span> is </span><em><span>evenly divisible by 2</span></em><span>, add an exclamation mark to the end.</span></li><li><span>If </span><code>n</code><span> is </span><em><span>evenly divisible by 5</span></em><span>, return the string in </span><em><span>ALL CAPS</span></em><span>.</span></li><li><span>If </span><code>n</code><span> is </span><em><span>evenly divisible by </span><strong><span>both</span></strong><span> 2 </span><strong><span>and</span></strong><span> 5</span></em><span>, return the string in </span><em><span>ALL CAPS</span></em><span> and add an exclamation mark to the end.</span></li></ul><p><span>The example below should help clarify these instructions.</span></p><h3><span>Examples</span></h3><pre><code>boomIntensity(4) ➞ \"Boooom!\"\n// There are 4 \"o\"s and 4 is divisible by 2 (exclamation mark included)\n\nboomIntensity(1) ➞ \"boom\"\n// 1 is lower than 2, so we return \"boom\"\n\nboomIntensity(5) ➞ \"BOOOOOM\"\n// There are 5 \"o\"s and 5 is divisible by 5 (all caps)\n\nboomIntensity(10) ➞ \"BOOOOOOOOOOM!\"\n// There are 10 \"o\"s and 10 is divisible by 2 and 5 (all caps and exclamation mark included)</code></pre><h3><span>Notes</span></h3><ul><li><span>A number which is evenly divisible by 2 </span><strong><span>and</span></strong><span> 5 will have both effects applied (see example #4).</span></li><li><code>\"Boom\"</code><span> will always start with a capital \"B\", except when </span><code>n</code><span> is </span><em><span>less than 2</span></em><span>, then return a minature explosion as </span><code>\"boom\"</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"conditions",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(boomIntensity(0), \"boom\")",
			"Test.assertEquals(boomIntensity(1), \"boom\")",
			"Test.assertEquals(boomIntensity(2), \"Boom!\")",
			"Test.assertEquals(boomIntensity(3), \"Booom\")",
			"Test.assertEquals(boomIntensity(4), \"Boooom!\")",
			"Test.assertEquals(boomIntensity(5), \"BOOOOOM\")",
			"Test.assertEquals(boomIntensity(6), \"Boooooom!\")",
			"Test.assertEquals(boomIntensity(7), \"Booooooom\")",
			"Test.assertEquals(boomIntensity(8), \"Boooooooom!\")",
			"Test.assertEquals(boomIntensity(9), \"Booooooooom\")",
			"Test.assertEquals(boomIntensity(10), \"BOOOOOOOOOOM!\")",
			"Test.assertEquals(boomIntensity(11), \"Booooooooooom\")",
			"Test.assertEquals(boomIntensity(12), \"Boooooooooooom!\")",
			"Test.assertEquals(boomIntensity(13), \"Booooooooooooom\")",
			"Test.assertEquals(boomIntensity(14), \"Boooooooooooooom!\")",
			"Test.assertEquals(boomIntensity(15), \"BOOOOOOOOOOOOOOOM\")",
			"Test.assertEquals(boomIntensity(16), \"Boooooooooooooooom!\")",
			"Test.assertEquals(boomIntensity(17), \"Booooooooooooooooom\")",
			"Test.assertEquals(boomIntensity(18), \"Boooooooooooooooooom!\")",
			"Test.assertEquals(boomIntensity(19), \"Booooooooooooooooooom\")",
			"Test.assertEquals(boomIntensity(20), \"BOOOOOOOOOOOOOOOOOOOOM!\")",
			"Test.assertEquals(boomIntensity(21), \"Booooooooooooooooooooom\")",
			"Test.assertEquals(boomIntensity(22), \"Boooooooooooooooooooooom!\")",
			"Test.assertEquals(boomIntensity(23), \"Booooooooooooooooooooooom\")",
			"Test.assertEquals(boomIntensity(24), \"Boooooooooooooooooooooooom!\")",
			"Test.assertEquals(boomIntensity(25), \"BOOOOOOOOOOOOOOOOOOOOOOOOOM\")"
		],
		"starterFn": [
			"1\nfunction boomIntensity(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XnZAcvr4tCD9ppyrN"
	},
	{
		"title": "One Odd and One Even",
		"description": "<p><span>Given a </span><strong><span>two digit</span></strong><span> number, return </span><code>true</code><span> if that number contains </span><strong><span>one even</span></strong><span> and </span><strong><span>one odd</span></strong><span> digit.</span></p><h3><span>Examples</span></h3><pre><code>oneOddOneEven(12) ➞ true\n\noneOddOneEven(55) ➞ false\n\noneOddOneEven(22) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(oneOddOneEven(10), true)",
			"Test.assertEquals(oneOddOneEven(11), false)",
			"Test.assertEquals(oneOddOneEven(12), true)",
			"Test.assertEquals(oneOddOneEven(13), false)",
			"Test.assertEquals(oneOddOneEven(14), true)",
			"Test.assertEquals(oneOddOneEven(15), false)",
			"Test.assertEquals(oneOddOneEven(16), true)",
			"Test.assertEquals(oneOddOneEven(17), false)",
			"Test.assertEquals(oneOddOneEven(18), true)",
			"Test.assertEquals(oneOddOneEven(19), false)",
			"Test.assertEquals(oneOddOneEven(20), false)",
			"Test.assertEquals(oneOddOneEven(21), true)",
			"Test.assertEquals(oneOddOneEven(22), false)",
			"Test.assertEquals(oneOddOneEven(23), true)",
			"Test.assertEquals(oneOddOneEven(24), false)",
			"Test.assertEquals(oneOddOneEven(25), true)",
			"Test.assertEquals(oneOddOneEven(26), false)",
			"Test.assertEquals(oneOddOneEven(27), true)",
			"Test.assertEquals(oneOddOneEven(28), false)",
			"Test.assertEquals(oneOddOneEven(29), true)",
			"Test.assertEquals(oneOddOneEven(30), true)",
			"Test.assertEquals(oneOddOneEven(31), false)",
			"Test.assertEquals(oneOddOneEven(32), true)",
			"Test.assertEquals(oneOddOneEven(33), false)",
			"Test.assertEquals(oneOddOneEven(34), true)",
			"Test.assertEquals(oneOddOneEven(35), false)"
		],
		"starterFn": [
			"1\nfunction oneOddOneEven(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/d3ZmD3EiNdECFyyPR"
	},
	{
		"title": "Reverse Words Starting With a Particular Letter",
		"description": "<p><span>Write a function that reverses all the words in a sentence that start with a particular letter.</span></p><h3><span>Examples</span></h3><pre><code>specialReverse(\"word searches are super fun\", \"s\")\n➞ \"word sehcraes are repus fun\"\n\nspecialReverse(\"first man to walk on the moon\", \"m\")\n➞ \"first nam to walk on the noom\"\n\nspecialReverse(\"peter piper picked pickled peppers\", \"p\")\n➞ \"retep repip dekcip delkcip sreppep\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Reverse the words themselves, not the entire sentence.</span></li><li><span>All characters in the sentence will be in lower case.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(specialReverse('word searches are super fun', 's'), 'word sehcraes are repus fun')",
			"Test.assertEquals(specialReverse('first man to walk on the moon', 'm'), 'first nam to walk on the noom')",
			"Test.assertEquals(specialReverse('peter piper picked pickled peppers', 'p'), 'retep repip dekcip delkcip sreppep')",
			"Test.assertEquals(specialReverse('he went to climb mount everest', 'p'), 'he went to climb mount everest')"
		],
		"starterFn": [
			"1\nfunction specialReverse(s, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KffCqRz23XL5ewbgH"
	},
	{
		"title": "Barbecue Skewers",
		"description": "<p><span>You are in charge of the barbecue grill. A </span><strong><span>vegetarian skewer</span></strong><span> is a skewer that has </span><strong><span>only vegetables (-o)</span></strong><span>. A </span><strong><span>non-vegetarian skewer</span></strong><span> is a skewer with </span><strong><span>at least one piece of meat (-x)</span></strong><span>.</span></p><p><span>For example, the grill below has </span><strong><span>4 non-vegetarian skewers</span></strong><span> and </span><strong><span>1 vegetarian skewer</span></strong><span> (the one in the middle).</span></p><pre><code>[\"--xo--x--ox--\",\n\"--xx--x--xx--\",\n\"--oo--o--oo--\",      &lt;&lt;&lt; vegetarian skewer\n\"--xx--x--ox--\",\n\"--xx--x--ox--\"]</code></pre><p><span>Given a BBQ grill, write a function that returns </span><code>[# vegetarian skewers, # non-vegetarian skewers]</code><span>. For example above, the function should return </span><code>[1, 4]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>bbqSkewers( [\n  \"--oooo-ooo--\",\n  \"--xx--x--xx--\",\n  \"--o---o--oo--\",\n  \"--xx--x--ox--\",\n  \"--xx--x--ox--\"\n]) ➞ [2, 3]\n\nbbqSkewers([\n  \"--oooo-ooo--\",\n  \"--xxxxxxxx--\",\n  \"--o---\",\n  \"-o-----o---x--\",\n  \"--o---o-----\"\n]) ➞ [3, 2]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(bbqSkewers(",
			"[\"--oooo-ooo--\", ",
			"\"--xx--x--xx--\", ",
			"\"--o---o--oo--\", ",
			"\"--xx--x--ox--\", ",
			"\"--xx--x--ox--\"]",
			"), [2, 3])",
			"​",
			"Test.assertSimilar(bbqSkewers(",
			"[\"--oooo-ooo--\", ",
			"\"--xxxxxxxx--\", ",
			"\"--o---\", ",
			"\"-o-----o---x--\", ",
			"\"--o---o-----\"]",
			"), [3, 2])",
			"​",
			"Test.assertSimilar(bbqSkewers(",
			"[\"--oooo-ooo--\", ",
			"\"--ooooooo--\", ",
			"\"--o---\", ",
			"\"-o-----o---x--\", ",
			"\"--o-oooo-----\"]",
			"), [4, 1])"
		],
		"starterFn": [
			"1\nfunction bbqSkewers(grill) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uAGzHNBWbNj2iNqLr"
	},
	{
		"title": "Remove Duplicates from an Array",
		"description": "<p><span>Create a function that takes an array of items, removes all duplicate items and returns a new array in the same sequential order as the old array (minus duplicates).</span></p><h3><span>Examples</span></h3><pre><code>removeDups([1, 0, 1, 0]) ➞ [1, 0]\n\nremoveDups([\"The\", \"big\", \"cat\"]) ➞ [\"The\", \"big\", \"cat\"]\n\nremoveDups([\"John\", \"Taylor\", \"John\"]) ➞ [\"John\", \"Taylor\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Tests contain arrays with both strings and numbers.</span></li><li><span>Tests are case sensitive.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(removeDups(['John', 'Taylor', 'John']), ['John', 'Taylor'])",
			"Test.assertSimilar(removeDups(['John', 'Taylor', 'John', 'john']), ['John', 'Taylor', 'john'])",
			"Test.assertSimilar(removeDups(['javascript', 'python', 'python', 'ruby', 'javascript', 'c', 'ruby']), ['javascript', 'python', 'ruby', 'c'])",
			"Test.assertSimilar(removeDups([1, 2, 2, 2, 3, 2, 5, 2, 6, 6, 3, 7, 1, 2, 5]), [1, 2, 3, 5, 6, 7])",
			"Test.assertSimilar(removeDups(['#', '#', '%', '&', '#', '$', '&']), ['#', '%', '&', '$'])",
			"Test.assertSimilar(removeDups([3, 'Apple', 3, 'Orange', 'Apple']), [3, 'Apple', 'Orange'])"
		],
		"starterFn": [
			"1\nfunction removeDups(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Wd7WKqm95jhcAGATG"
	},
	{
		"title": "Purge and Organize",
		"description": "<p><span>Given an array of numbers, write a function that returns an array that... </span></p><ol><li><span>Has all duplicate elements removed.</span></li><li><span>Is sorted from least to greatest value.</span></li></ol><h3><span>Examples</span></h3><pre><code>uniqueSort([1, 2, 4, 3]) ➞ [1, 2, 3, 4]\n\nuniqueSort([1, 4, 4, 4, 4, 4, 3, 2, 1, 2]) ➞ [1, 2, 3, 4]\n\nuniqueSort([6, 7, 3, 2, 1]) ➞ [1, 2, 3, 6, 7]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Tony",
		"publishedByUrl": "https://edabit.com/user/ketYXr2XoMEbbgn5W",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(",
			"  uniqueSort([1, 5, 8, 2, 3, 4, 4, 4, 10]),",
			"  [1, 2, 3, 4, 5, 8, 10]",
			");",
			"​",
			"Test.assertSimilar(",
			"  uniqueSort([1, 2, 5, 4, 7, 7, 7]),",
			"  [1, 2, 4, 5, 7]",
			");",
			"​",
			"Test.assertSimilar(",
			"  uniqueSort([7, 6, 5, 4, 3, 2, 1, 0, 1]),",
			"  [0, 1, 2, 3, 4, 5, 6, 7]",
			");",
			"​",
			"Test.assertSimilar(",
			"  uniqueSort([3, 6, 5, 4, 3, 27, 1, 100, 1]),",
			"  [1, 3, 4, 5, 6, 27, 100]",
			");",
			"​",
			"Test.assertSimilar(",
			"  uniqueSort([-9, -3.1414, -87, 8, -4.323827, -3.1415, -3.1415]),",
			"  [-87, -9, -4.323827, -3.1415, -3.1414, 8]",
			");"
		],
		"starterFn": [
			"1\nfunction uniqueSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CvPCBc9FtTLix9zov"
	},
	{
		"title": "Filter Repeating Character Strings",
		"description": "<p><span>Create a function that keeps only strings with repeating identical characters (in other words, it has a set size of 1).</span></p><h3><span>Examples</span></h3><pre><code>identicalFilter([\"aaaaaa\", \"bc\", \"d\", \"eeee\", \"xyz\"]) \n➞ [\"aaaaaa\", \"d\", \"eeee\"]\n\nidenticalFilter([\"88\", \"999\", \"22\", \"545\", \"133\"]) \n➞ [\"88\", \"999\", \"22\"]\n\nidenticalFilter([\"xxxxo\", \"oxo\", \"xox\", \"ooxxoo\", \"oxo\"]) \n➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>A string with a single character is trivially counted as a string with repeating identical characters.</span></li><li><span>If there are no strings with repeating identical characters, return an empty array (see example #3).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(identicalFilter(['aaaaaa', 'bc', 'd', 'eeee', 'xyz']), ",
			"['aaaaaa', 'd', 'eeee'])",
			"​",
			"Test.assertSimilar(identicalFilter(['88', '999', '22', '545', '133']), ",
			"['88', '999', '22'])",
			"​",
			"Test.assertSimilar(identicalFilter(['xxxxo', 'oxo', 'xox', 'ooxxoo', 'oxo']), ",
			"[])",
			"​",
			"Test.assertSimilar(identicalFilter(['aa', 'bb', 'cc', 'dd', 'ee']), ",
			"['aa', 'bb', 'cc', 'dd', 'ee'])",
			"​",
			"Test.assertSimilar(identicalFilter(['aba', 'bcb', 'abb', 'bcc', 'eee']), ",
			"['eee'])",
			"​",
			"Test.assertSimilar(identicalFilter(['1', '2', '3']), ",
			"['1', '2', '3'])"
		],
		"starterFn": [
			"1\nfunction identicalFilter(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fxvceQdv7RHQzrx2J"
	},
	{
		"title": "Multiplying Numbers in a String",
		"description": "<p><span>Given a string of numbers separated by a </span><em><span>comma and space</span></em><span>, return the product of the numbers.</span></p><h3><span>Examples</span></h3><pre><code>multiplyNums(\"2, 3\") ➞ 6\n\nmultiplyNums(\"1, 2, 3, 4\") ➞ 24\n\nmultiplyNums(\"54, 75, 453, 0\") ➞ 0\n\nmultiplyNums(\"10, -2\") ➞ -20</code></pre><h3><span>Notes</span></h3><p><span>Bonus: Try to complete this challenge in </span><strong><span>one line</span></strong><span>!</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(multiplyNums(\"2, 3\"), 6)",
			"Test.assertEquals(multiplyNums(\"1, 2, 3, 4\"), 24)",
			"Test.assertEquals(multiplyNums(\"54, 75, 453, 0\"), 0)",
			"Test.assertEquals(multiplyNums(\"10, -2\"), -20)",
			"Test.assertEquals(multiplyNums(\"-26, 1, -27, -12, -19\"), 160056)",
			"Test.assertEquals(multiplyNums(\"16, 8\"), 128)",
			"Test.assertEquals(multiplyNums(\"-27, -14, -28, 13, -17\"), 2339064)",
			"Test.assertEquals(multiplyNums(\"-19, -22, -14, 20, -15, -24, -17, 19, 30, -10\"), -4082823360000)",
			"Test.assertEquals(multiplyNums(\"1, 13, 0, -11, 26, -17, 21\"), 0)",
			"Test.assertEquals(multiplyNums(\"-25, -19, 7, -26, -26\"), 2247700)",
			"Test.assertEquals(multiplyNums(\"-4, -16, -22, -3, -6\"), -25344)",
			"Test.assertEquals(multiplyNums(\"-22, 11, 19, 5, 19, -9, -13, 20, -29\"), 29641926600)",
			"Test.assertEquals(multiplyNums(\"-25, 22\"), -550)",
			"Test.assertEquals(multiplyNums(\"26, -19, 17, 26, -21\"), 4585308)",
			"Test.assertEquals(multiplyNums(\"5, -1, 1, -28, 14, 28, 1\"), 54880)",
			"Test.assertEquals(multiplyNums(\"-27, -9, 6, -25, 4\"), -145800)",
			"Test.assertEquals(multiplyNums(\"-24, -13, -14, 30, 9, -14\"), 16511040)",
			"Test.assertEquals(multiplyNums(\"27, 25, 27, -18, -27, -7, 28, 27, 0\"), 0)",
			"Test.assertEquals(multiplyNums(\"-23, 11, -18, -5, -4\"), 91080)",
			"Test.assertEquals(multiplyNums(\"-16, -10, -29, -23, -30, -1\"), 3201600)",
			"Test.assertEquals(multiplyNums(\"-14, -17, 9, -2, -17, -10, -30\"), 21848400)",
			"Test.assertEquals(multiplyNums(\"-13, -23, 10, 0, -23\"), 0)",
			"Test.assertEquals(multiplyNums(\"0\"), 0)",
			"Test.assertEquals(multiplyNums(\"30\"), 30)",
			"Test.assertEquals(multiplyNums(\"-24, -21, 6, -29, 23, 11, -21, -29\"), -13511936592)",
			"Test.assertEquals(multiplyNums(\"4, 23, 10\"), 920)"
		],
		"starterFn": [
			"1\nfunction multiplyNums(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TzxoYExuxuQw2ahWR"
	},
	{
		"title": "Reverse the Number",
		"description": "<p><span>Create a function that takes an integer </span><code>n</code><span> and reverses it.</span></p><h3><span>Examples</span></h3><pre><code>rev(5121) ➞ \"1215\"\n\nrev(69) ➞ \"96\"\n\nrev(-122157) ➞ \"751221\"</code></pre><h3><span>Notes</span></h3><ul><li><span>This challenge is about using two operators that are related to division.</span></li><li><span>If the number is negative, treat it like it's positive.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(rev(215), \"512\")",
			"Test.assertEquals(rev(122225), \"522221\")",
			"Test.assertEquals(rev(215), \"512\")",
			"Test.assertEquals(rev(-215), \"512\", \"Should work with negative numbers.\")",
			"Test.assertEquals(rev(-2152), \"2512\", \"Should work with negative numbers.\")",
			"Test.assertEquals(rev(-122157), \"751221\", \"Should work with negative numbers.\")",
			"Test.assertEquals(rev(666), \"666\", \"Should work if all digits are the same.\")",
			"Test.assertEquals(rev(999), \"999\", \"Should work if all digits are the same.\")"
		],
		"starterFn": [
			"1\nfunction rev(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qrDWy9xS8BrfhLS6o"
	},
	{
		"title": "Find the Mean of All Digits",
		"description": "<p><span>Create a function that returns the mean of all digits.</span></p><h3><span>Examples</span></h3><pre><code>mean(42) ➞ 3\n\nmean(12345) ➞ 3\n\nmean(666) ➞ 6</code></pre><h3><span>Notes</span></h3><ul><li><span>The mean of all digits is the sum of digits / how many digits there are (e.g. mean of digits in 512 is </span><code>(5+1+2)/3(number of digits) = 8/3=2</code><span>).</span></li><li><span>The mean will always be an integer.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(mean(666), 6)",
			"Test.assertEquals(mean(80), 4)",
			"Test.assertEquals(mean(789), 8)",
			"Test.assertEquals(mean(417), 4)",
			"Test.assertEquals(mean(1357), 4)",
			"Test.assertEquals(mean(42), 3)",
			"Test.assertEquals(mean(12345), 3)"
		],
		"starterFn": [
			"1\nfunction mean(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JAgtuPDXj6BrDMxa5"
	},
	{
		"title": "Something in the Box?",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if an asterisk </span><code>*</code><span> is inside a box.</span></p><h3><span>Examples</span></h3><pre><code>inBox([\n  \"###\",\n  \"#*#\",\n  \"###\"\n]) ➞ true\n\ninBox([\n  \"####\",\n  \"#* #\",\n  \"#  #\",\n  \"####\"\n]) ➞ true\n\ninBox([\n  \"*####\",\n  \"# #\",\n  \"#  #*\",\n  \"####\"\n]) ➞ false\n\ninBox([\n  \"#####\",\n  \"#   #\",\n  \"#   #\",\n  \"#   #\",\n  \"#####\"\n]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>The asterisk may be in the array, however, it must be inside the box, if it exists.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(inBox([",
			"    \"###\", ",
			"    \"# #\", ",
			"    \"###\"",
			"  ]), false)",
			"​",
			"Test.assertEquals(inBox([",
			"    \"####\", ",
			"    \"#  #\", ",
			"    \"#  #\", ",
			"    \"####\"",
			"  ]), false)",
			"​",
			"Test.assertEquals(inBox([",
			"    \"#####\", ",
			"    \"#   #\", ",
			"    \"#   #\", ",
			"    \"#   #\", ",
			"    \"#####\"",
			"  ]), false)",
			"​",
			"Test.assertEquals(inBox([",
			"    \"###\", ",
			"    \"#*#\", ",
			"    \"###\"",
			"  ]), true)"
		],
		"starterFn": [
			"1\nfunction inBox(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CKEAH6cs5Tt7aKXKv"
	},
	{
		"title": "Xs and Os, Nobody Knows",
		"description": "<p><span>Create a function that takes a string, checks if it has the same number of x's and o's and returns either </span><code>true</code><span> or </span><code>false</code><span>.</span></p><ul><li><span>Return a boolean value (</span><code>true</code><span> or </span><code>false</code><span>).</span></li><li><span>The string can contain any character.</span></li><li><span>When no x and no o are in the string, return </span><code>true</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>XO(\"ooxx\") ➞ true\n\nXO(\"xooxx\") ➞ false\n\nXO(\"ooxXm\") ➞ true\n// Case insensitive.\n\nXO(\"zpzpzpp\") ➞ true\n// Returns true if no x and o.\n\nXO(\"zzoo\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to return true if there aren't any x's or o's.</span></li><li><span>Must be case insensitive.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(XO(\"ooxx\"), true);",
			"Test.assertEquals(XO(\"xooxx\"), false);",
			"Test.assertEquals(XO(\"ooxXm\"), true);",
			"Test.assertEquals(XO(\"zpzpzpp\"), true);",
			"Test.assertEquals(XO(\"zzoo\"), false);",
			"Test.assertEquals(XO(\"Xo\"), true);",
			"Test.assertEquals(XO(\"x\"), false);",
			"Test.assertEquals(XO(\"o\"), false);",
			"Test.assertEquals(XO(\"xxxoo\"), false);",
			"Test.assertEquals(XO(\"\"), true);"
		],
		"starterFn": [
			"1\nfunction XO(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RG5NJWDa7pZGFkhTA"
	},
	{
		"title": "Ageing the Population...",
		"description": "<p><span>Given an object of </span><em><span>people</span></em><span> and their </span><em><span>ages</span></em><span>, return how old the people would be after </span><code>n</code><span> years have passed. Use the </span><strong><span>absolute value</span></strong><span> of </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>afterNYears({\n  \"Joel\" : 32,\n  \"Fred\" : 44,\n  \"Reginald\" : 65,\n  \"Susan\" : 33,\n  \"Julian\" : 13\n}, 1) ➞ {\n  \"Joel\" : 33,\n  \"Fred\" : 45,\n  \"Reginald\" : 66,\n  \"Susan\" : 34,\n  \"Julian\" : 14\n}\n\nafterNYears({\n  \"Baby\" : 2,\n  \"Child\" : 8,\n  \"Teenager\" : 15,\n  \"Adult\" : 25,\n  \"Elderly\" : 71\n}, 19) ➞ {\n  \"Baby\" : 21,\n  \"Child\" : 27,\n  \"Teenager\" : 34,\n  \"Adult\" : 44,\n  \"Elderly\" : 90\n}\n\nafterNYears({\n  \"Genie\" : 1000,\n  \"Joe\" : 40\n}, 5) ➞ {\n  \"Genie\" : 1005,\n  \"Joe\" : 45\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume that everyone is immortal (it would be a bit grim if I told you to remove names once they reached 75).</span></li><li><code>n</code><span> should be a positive number because last time I checked, people don't tend to age backwards. Therefore, use the </span><strong><span>absolute</span></strong><span> value of </span><code>n</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(afterNYears({",
			"  \"Joel\" : 32,",
			"  \"Fred\" : 44,",
			"  \"Reginald\" : 65,",
			"  \"Susan\" : 33,",
			"  \"Julian\" : 13",
			"}, 1), {",
			"  \"Joel\" : 33,",
			"  \"Fred\" : 45,",
			"  \"Reginald\" : 66,",
			"  \"Susan\" : 34,",
			"  \"Julian\" : 14",
			"})",
			"​",
			"Test.assertSimilar(afterNYears({",
			"  \"Baby\" : 2,",
			"  \"Child\" : 8,",
			"  \"Teenager\" : 15,",
			"  \"Adult\" : 25,",
			"  \"Elderly\" : 71",
			"}, 19), {",
			"  \"Baby\" : 21,",
			"  \"Child\" : 27,",
			"  \"Teenager\" : 34,",
			"  \"Adult\" : 44,",
			"  \"Elderly\" : 90"
		],
		"starterFn": [
			"1\nfunction afterNYears(names, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xtDkfWxEh2hbmAHvn"
	},
	{
		"title": "Capitalize the First Letter of Each Word",
		"description": "<p><span>Create a function that takes a string as an argument and converts the first character of each word to uppercase. Return the newly formatted string.</span></p><h3><span>Examples</span></h3><pre><code>makeTitle(\"This is a title\") ➞ \"This Is A Title\"\n\nmakeTitle(\"capitalize every word\") ➞ \"Capitalize Every Word\"\n\nmakeTitle(\"I Like Pizza\") ➞ \"I Like Pizza\"\n\nmakeTitle(\"PIZZA PIZZA PIZZA\") ➞ \"PIZZA PIZZA PIZZA\"</code></pre><h3><span>Notes</span></h3><p><span>You can expect a valid string for each test case.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(makeTitle(\"I am a title\"), \"I Am A Title\")",
			"Test.assertSimilar(makeTitle(\"I AM A TITLE\"), \"I AM A TITLE\")",
			"Test.assertSimilar(makeTitle(\"i aM a tITLE\"), \"I AM A TITLE\")",
			"Test.assertSimilar(makeTitle(\"the first letter of every word is capitalized\"), \"The First Letter Of Every Word Is Capitalized\")",
			"Test.assertSimilar(makeTitle(\"I Like Pizza\"), \"I Like Pizza\")",
			"Test.assertSimilar(makeTitle(\"Don't count your ChiCKens BeFore They HatCh\"), \"Don't Count Your ChiCKens BeFore They HatCh\")",
			"Test.assertSimilar(makeTitle(\"All generalizations are false, including this one\"), \"All Generalizations Are False, Including This One\")",
			"Test.assertSimilar(makeTitle(\"Me and my wife lived happily for twenty years and then we met.\"), \"Me And My Wife Lived Happily For Twenty Years And Then We Met.\")",
			"Test.assertSimilar(makeTitle(\"There are no stupid questions, just stupid people.\"), \"There Are No Stupid Questions, Just Stupid People.\")",
			"Test.assertSimilar(makeTitle(\"1f you c4n r34d 7h15, you r34lly n33d 2 g37 l41d\"), \"1f You C4n R34d 7h15, You R34lly N33d 2 G37 L41d\")",
			"Test.assertSimilar(makeTitle(\"PIZZA PIZZA PIZZA\"), \"PIZZA PIZZA PIZZA\")"
		],
		"starterFn": [
			"1\nfunction makeTitle(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LvtsCQNpx7CwHGubf"
	},
	{
		"title": "Capitalize the Names",
		"description": "<p><span>Create a function that takes an array of names and returns an array where only the first letter of each name is capitalized.</span></p><h3><span>Examples</span></h3><pre><code>capMe([\"mavis\", \"senaida\", \"letty\"]) ➞ [\"Mavis\", \"Senaida\", \"Letty\"]\n\ncapMe([\"samuel\", \"MABELLE\", \"letitia\", \"meridith\"]) ➞ [\"Samuel\", \"Mabelle\", \"Letitia\", \"Meridith\"]\n\ncapMe([\"Slyvia\", \"Kristal\", \"Sharilyn\", \"Calista\"]) ➞ [\"Slyvia\", \"Kristal\", \"Sharilyn\", \"Calista\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't change the order of the original array.</span></li><li><span>Notice in the second example above, \"MABELLE\" is returned as \"Mabelle\".</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(capMe(['mavis', 'senaida', 'letty']), ['Mavis', 'Senaida', 'Letty'])",
			"Test.assertSimilar(capMe(['samuel', 'MABELLE', 'letitia', 'meridith']), ['Samuel', 'Mabelle', 'Letitia', 'Meridith'])",
			"Test.assertSimilar(capMe(['Slyvia', 'Kristal', 'Sharilyn', 'Calista']), ['Slyvia', 'Kristal', 'Sharilyn', 'Calista'])",
			"Test.assertSimilar(capMe(['krisTopher', 'olIva', 'herminiA']), ['Kristopher', 'Oliva', 'Herminia'])",
			"Test.assertSimilar(capMe(['luke', 'marsha', 'stanford']), ['Luke', 'Marsha', 'Stanford'])",
			"Test.assertSimilar(capMe(['kara']), ['Kara'])",
			"Test.assertSimilar(capMe(['mARIANN', 'jOI', 'gEORGEANN']), ['Mariann', 'Joi', 'Georgeann'])"
		],
		"starterFn": [
			"1\nfunction capMe(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZN5cpGPNRS3nrjMo5"
	},
	{
		"title": "Clear the Fog",
		"description": "<p><span>Create a function which returns the word in the string, but with all the </span><code>fog</code><span> letters removed. However, if the string is clear from fog, return </span><code>\"It's a clear day!\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>clearFog(\"sky\") ➞ \"It's a clear day!\"\n\nclearFog(\"fogfogfffoooofftreesggfoogfog\") ➞ \"trees\"\n\nclearFog(\"fogFogFogffffooobirdsandthebeesGGGfogFog\") ➞ \"birdsandthebees\"</code></pre><h3><span>Notes</span></h3><ul><li><span>There won't be any fog inside of any of the actual words (won't include the letters </span><code>f</code><span>, </span><code>o</code><span> or </span><code>g</code><span>).</span></li><li><span>Hidden words are always in lowercase.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(clearFog(\"fogfogfffoooofftreesggfoogfog\"), \"trees\")",
			"Test.assertEquals(clearFog(\"fooofffgggofoogfoskygfogfogfoooggg\"), \"sky\")",
			"Test.assertEquals(clearFog(\"ffogfogoggofobirdsandthebeesfogfoggofgoffog\"), \"birdsandthebees\")",
			"Test.assertEquals(clearFog(\"fogfoofgfogfgplanefogofgoffgo\"), \"plane\")",
			"Test.assertEquals(clearFog(\"fogofogoofgfffogthesaurusfogfogfogfgofg\"), \"thesaurus\")",
			"Test.assertEquals(clearFog(\"fogfgofofsunfogfgoogfogofgff\"), \"sun\")",
			"Test.assertEquals(clearFog(\"city\"), \"It's a clear day!\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction clearFog(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cHNEFGeQrH3nonwJw"
	},
	{
		"title": "Is Johnny Making Progress?",
		"description": "<p><span>To train for an upcoming marathon, Johnny goes on one long-distance run each Saturday. He wants to track how often the number of miles he runs this Saturday exceeds the number of miles run the </span><strong><span>previous</span></strong><span> Saturday. This is called a </span><strong><span>progress day</span></strong><span>.</span></p><p><span>Create a function that takes in an array of miles run every Saturday and returns Johnny's total number of progress days.</span></p><h3><span>Examples</span></h3><pre><code>progressDays([3, 4, 1, 2]) ➞ 2\n// There are two progress days, (3-&gt;4) and (1-&gt;2)\n\nprogressDays([10, 11, 12, 9, 10]) ➞ 3\n\nprogressDays([6, 5, 4, 3, 2, 9]) ➞ 1\n\nprogressDays([9, 9])  ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Running the </span><strong><span>same number of miles</span></strong><span> as last week does not count as a progress day.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(progressDays([3, 4, 1, 2]), 2);",
			"Test.assertEquals(progressDays([10, 11, 12, 9, 10]), 3);",
			"Test.assertEquals(progressDays([6, 5, 4, 3, 2, 9]), 1);",
			"Test.assertEquals(progressDays([9, 9]), 0);",
			"Test.assertEquals(progressDays([12, 11, 10, 12, 11, 13]), 2);"
		],
		"starterFn": [
			"1\nfunction progressDays(runs) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QtcPzxgcZJQdsfdMS"
	},
	{
		"title": "Transform Upvotes",
		"description": "<p><span>Create a function that transforms a string of upvote counts into an array of numbers. Each </span><code>k</code><span> represents a thousand.</span></p><h3><span>Examples</span></h3><pre><code>transformUpvotes(\"6.8k 13.5k\") ➞ [6800, 13500]\n\ntransformUpvotes(\"5.5k 8.9k 32\") ➞ [5500, 8900, 32]\n\ntransformUpvotes(\"20.3k 3.8k 7.7k 992\") ➞ [20300, 3800, 7700, 992]</code></pre><h3><span>Notes</span></h3><p><span>Return the upvotes as an array.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(transformUpvotes('20.3k 3.8k 7.7k 992'), [20300, 3800, 7700, 992])",
			"Test.assertSimilar(transformUpvotes('5.5k 8.9k 32'), [5500, 8900, 32])",
			"Test.assertSimilar(transformUpvotes('6.8k 13.5k'), [6800, 13500])"
		],
		"starterFn": [
			"1\nfunction transformUpvotes(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/niTEsddTdE4gs4YGX"
	},
	{
		"title": "Equality of 3 Values",
		"description": "<p><span>Create a function that takes three integer arguments </span><code>(a, b, c)</code><span> and returns the amount of integers which are of equal value.</span></p><h3><span>Examples</span></h3><pre><code>equal(3, 4, 3) ➞ 2\n\nequal(1, 1, 1) ➞ 3\n\nequal(3, 4, 1) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Your function must return 0, 2 or 3.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"conditions",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(equal(2,3,4), 0, \"All values are differents\");",
			"Test.assertEquals(equal(7,3,7), 2, \"Two values are equal\");",
			"Test.assertEquals(equal(4,4,4), 3, \"All 3 values are equal\");",
			"Test.assertEquals(equal(7,3,4), 0, \"All values are differents\");",
			"Test.assertEquals(equal(3,3,6), 2, \"Two values are equal\");",
			"Test.assertEquals(equal(1,1,1), 3, \"All 3 values are equal\");",
			"Test.assertEquals(equal(1,7,6), 0, \"All values are differents\");",
			"Test.assertEquals(equal(7, 7, 7), 3, \"All 3 values are equal\");"
		],
		"starterFn": [
			"1\nfunction equal(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PKiTjA7SLK99ZZ8GK"
	},
	{
		"title": "Enharmonic Equivalents",
		"description": "<p><span>In music, notes can be written out in multiple ways (especially for notes on the black keys). Although these notes are spelled out differently, they still are the same note physically.</span></p><p><img alt=\"C# = Db, D# = Eb, F# = Gb, G# = Ab, A# = Bb\" src=\"https://edabit-challenges.s3.amazonaws.com/23KQwnog7Q1jpM7UL4uccJvWqNFx53qoBmAEuqMaGU7hGPNut4YA52MMaZzN7NZesom1bDvb5bT3L2TtQkj5W2wJdwxPTGz.png\"></p><p><span>Given a musical note, create a function that returns its </span><strong><span>enharmonic equivalent</span></strong><span>. The examples below should make this clear.</span></p><h3><span>Examples</span></h3><pre><code>getEquivalent(\"D#\") ➞ \"Eb\"\n\ngetEquivalent(\"Gb\") ➞ \"F#\"\n\ngetEquivalent(\"Bb\") ➞\"A#\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Note names will always be a capital letter followed by either </span><strong><span>#</span></strong><span> or </span><strong><span>b</span></strong><span>.</span></li><li><span>Remember that the note after </span><strong><span>G is A</span></strong><span> and vice versa.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getEquivalent(\"C#\"), \"Db\")",
			"Test.assertEquals(getEquivalent(\"Db\"), \"C#\")",
			"Test.assertEquals(getEquivalent(\"D#\"), \"Eb\")",
			"Test.assertEquals(getEquivalent(\"Eb\"), \"D#\")",
			"Test.assertEquals(getEquivalent(\"F#\"), \"Gb\")",
			"Test.assertEquals(getEquivalent(\"Gb\"), \"F#\")",
			"Test.assertEquals(getEquivalent(\"G#\"), \"Ab\", \"Remember that the note after G is A\")",
			"Test.assertEquals(getEquivalent(\"Ab\"), \"G#\", \"Remember that the note before A is G\")",
			"Test.assertEquals(getEquivalent(\"A#\"), \"Bb\")",
			"Test.assertEquals(getEquivalent(\"Bb\"), \"A#\")"
		],
		"starterFn": [
			"1\nfunction getEquivalent(note) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZMk2HeNSWX7vRewcD"
	},
	{
		"title": "RegEx: Character Classes XII ⁠- \\t",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>We have the </span><code>\\t</code><span> and </span><code>\\v</code><span> character classes that match any tabs in a string. But more specifically </span><code>\\t</code><span> is used to match </span><strong><span>horizontal tabs</span></strong><span> while </span><code>\\v</code><span> matches </span><strong><span>vertical tabs</span></strong><span>.  Vertical tabs were once a thing but are rarely used anymore. We generally use horizontal tabs which are produced by the </span><strong><span>tab</span></strong><span> key on our keyboards.</span></p><p><span>Find how many tabs with one </span><strong><span>literal</span></strong><span> whitespace immediately following the tab are in a string.</span></p><h3><span>Notes</span></h3><ul><li><span>Not all whitespaces are the same.</span></li><li><span>See </span><strong><span>Resources</span></strong><span> for help.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = `What ",
			"about ",
			"me?  `",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\t/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return str.match(REGEXP).length",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str), \"invalid\", \"You are required to use a \\\\t character class in your expression.\")",
			"Test.assertEquals(testExp(str), 1, \"There is only one LITERAL white space in this string.\") ",
			"​",
			"// Credit goes to DeltaTango and Alnitak from SO"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/w2abzEMHE7SFLQzDq"
	},
	{
		"title": "Sum of the Items in an Array",
		"description": "<p><span>Create a function that takes an array and returns the sum of all items in the array.</span></p><h3><span>Examples</span></h3><pre><code>sumArray([1, 2, 3]) ➞ 6\n// 1 + 2 + 3 = 6\n\nsumArray([1, [2, [1]], 3]) ➞ 7\n// 1 + 2 + 1 + 3 = 7</code></pre><h3><span>Notes</span></h3><p><span>The item in an array can be another array.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(sumArray([1, 2, 3]), 6)",
			"Test.assertEquals(sumArray([1, [1, 2], [3, 1]]), 8)",
			"Test.assertEquals(sumArray([[1, 1], [2, 8], 8]), 20)",
			"Test.assertEquals(sumArray([1, 2]), 3)",
			"Test.assertEquals(sumArray([1, [2, [1]], 3]), 7)"
		],
		"starterFn": [
			"1\nfunction sumArray(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/27Toh4rACcmRvRLrb"
	},
	{
		"title": "Return the Middle Character(s) of a String",
		"description": "<p><span>Create a function that takes a string and returns the middle character(s). If the word's length is odd, return the middle character. If the word's length is even, return the middle two characters.</span></p><h3><span>Examples</span></h3><pre><code>getMiddle(\"test\") ➞ \"es\"\n\ngetMiddle(\"testing\") ➞ \"t\"\n\ngetMiddle(\"middle\") ➞ \"dd\"\n\ngetMiddle(\"A\") ➞ \"A\"</code></pre><h3><span>Notes</span></h3><p><span>All test cases contain a single word (as a string).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getMiddle(\"test\"), \"es\")",
			"Test.assertEquals(getMiddle(\"testing\"), \"t\")",
			"Test.assertEquals(getMiddle(\"middle\"), \"dd\")",
			"Test.assertEquals(getMiddle(\"A\"), \"A\")",
			"Test.assertEquals(getMiddle(\"inhabitant\"), \"bi\")",
			"Test.assertEquals(getMiddle(\"brown\"), \"o\")",
			"Test.assertEquals(getMiddle(\"pawn\"), \"aw\")",
			"Test.assertEquals(getMiddle(\"cabinet\"), \"i\")",
			"Test.assertEquals(getMiddle(\"fresh\"), \"e\")",
			"Test.assertEquals(getMiddle(\"shorts\"), \"or\")"
		],
		"starterFn": [
			"1\nfunction getMiddle(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/R3649PDvoFf6wGxyg"
	},
	{
		"title": "Replace Vowel with Another Character",
		"description": "<p><span>Create a function that takes a string and replaces the vowels with another character.</span></p><ul><li><span>a = 1</span></li><li><span>e = 2</span></li><li><span>i = 3</span></li><li><span>o = 4</span></li><li><span>u = 5</span></li></ul><h3><span>Examples</span></h3><pre><code>replaceVowel(\"karachi\") ➞ \"k1r1ch3\"\n\nreplaceVowel(\"chembur\") ➞ \"ch2mb5r\"\n\nreplaceVowel(\"khandbari\") ➞ \"kh1ndb1r3\"</code></pre><h3><span>Notes</span></h3><p><span>The input will always be in lowercase.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(replaceVowel(\"karachi\"), \"k1r1ch3\")",
			"Test.assertEquals(replaceVowel(\"dang\"), \"d1ng\")",
			"Test.assertEquals(replaceVowel(\"aen\"), \"12n\")",
			"Test.assertEquals(replaceVowel(\"chembur\"), \"ch2mb5r\")",
			"Test.assertEquals(replaceVowel(\"khandbari\"), \"kh1ndb1r3\")",
			"Test.assertEquals(replaceVowel(\"thamel\"), \"th1m2l\")"
		],
		"starterFn": [
			"1\nfunction replaceVowel(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xuRjEej9F9ZG3vg7M"
	},
	{
		"title": "Find Unique Character Strings",
		"description": "<p><span>Create a function that returns only strings with unique characters.</span></p><h3><span>Examples</span></h3><pre><code>filterUnique([\"abb\", \"abc\", \"abcdb\", \"aea\", \"bbb\"]) ➞ [\"abc\"]\n// \"b\" occurs in \"abb\" more than once, \"b\" occurs in \"abcdb\" more than once, etc.\n\nfilterUnique([\"88\", \"999\", \"989\", \"9988\", \"9898\"]) ➞ []\n\nfilterUnique([\"ABCDE\", \"DDEB\", \"BED\", \"CCA\", \"BAC\"]) ➞ [\"ABCDE\", \"BED\", \"BAC\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(filterUnique(['abb', 'abc', 'abcdb', 'aea', 'bbb']), ['abc'])",
			"Test.assertSimilar(filterUnique(['88', '999', '989', '9988', '9898']), [])",
			"Test.assertSimilar(filterUnique(['ABCDE', 'DDEB', 'BED', 'CCA', 'BAC']), ['ABCDE', 'BED', 'BAC'])",
			"Test.assertSimilar(filterUnique(['qrrs', 'srrq', 'qqrs', 'qq', 'ss', 'rs']), ['rs'])",
			"Test.assertSimilar(filterUnique(['abab', 'ba', 'ab', 'cc']), ['ba', 'ab'])"
		],
		"starterFn": [
			"1\nfunction filterUnique(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kPjg5tCKnFsyYFfex"
	},
	{
		"title": "Find the Missing Number",
		"description": "<p><span>Create a function that takes an array of numbers between 1 and 10 (excluding one number) and returns the missing number.</span></p><h3><span>Examples</span></h3><pre><code>missingNum([1, 2, 3, 4, 6, 7, 8, 9, 10]) ➞ 5\n\nmissingNum([7, 2, 3, 6, 5, 9, 1, 4, 8]) ➞ 10\n\nmissingNum([10, 5, 1, 2, 4, 6, 8, 3, 9]) ➞ 7</code></pre><h3><span>Notes</span></h3><ul><li><span>The array of numbers will be </span><strong><span>unsorted</span></strong><span> (not in order).</span></li><li><span>Only one number will be missing.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(missingNum([1, 2, 3, 4, 6, 7, 8, 9, 10]), 5)",
			"Test.assertEquals(missingNum([7, 2, 3, 6, 5, 9, 1, 4, 8]), 10)",
			"Test.assertEquals(missingNum([7, 2, 3, 9, 4, 5, 6, 8, 10]), 1)",
			"Test.assertEquals(missingNum([10, 5, 1, 2, 4, 6, 8, 3, 9]), 7)",
			"Test.assertEquals(missingNum([1, 7, 2, 4, 8, 10, 5, 6, 9]), 3)"
		],
		"starterFn": [
			"1\nfunction missingNum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rgdT9sZ4QhsKhaSw9"
	},
	{
		"title": "Solving Exponential Equations With Logarithms",
		"description": "<p><span>Create a function that takes a number </span><code>a</code><span> and finds the missing exponent </span><em><span>x</span></em><span> so that </span><code>a</code><span> when raised to the power of </span><em><span>x</span></em><span> is equal to </span><code>b</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>solveForExp(4, 1024) ➞ 5\n\nsolveForExp(2, 1024) ➞ 10\n\nsolveForExp(9, 3486784401) ➞ 10</code></pre><h3><span>Notes</span></h3><p><code>a</code><span> is raised to the power of what in order to equal </span><code>b</code><span>?</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(solveForExp(4, 1024), 5)",
			"Test.assertEquals(solveForExp(2, 1024), 10)",
			"Test.assertEquals(solveForExp(9, 3486784401), 10)",
			"Test.assertEquals(solveForExp(4, 4294967296), 16)",
			"Test.assertEquals(solveForExp(8, 134217728), 9)",
			"Test.assertEquals(solveForExp(19, 47045881), 6)",
			"Test.assertEquals(solveForExp(10, 100000000), 8)"
		],
		"starterFn": [
			"1\nfunction solveForExp(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PXau3Fzk8GXgF6oRQ"
	},
	{
		"title": "Find the Characters Counterpart Char Code",
		"description": "<p><span>Create a function that takes a single character as an argument and returns the char code of its lowercased / uppercased counterpart.</span></p><h3><span>Examples</span></h3><pre><code>Given that:\n  - \"A\" char code is: 65\n  - \"a\" char code is: 97\n\ncounterpartCharCode(\"A\") ➞ 97\n\ncounterpartCharCode(\"a\") ➞ 65</code></pre><h3><span>Notes</span></h3><ul><li><span>The argument will always be a single character.</span></li><li><span>Not all inputs will have a counterpart (e.g. numbers), in which case return the inputs char code.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"// Normal letters",
			"Test.assertEquals(counterpartCharCode('a'), 65)",
			"Test.assertEquals(counterpartCharCode('A'), 97)",
			"Test.assertEquals(counterpartCharCode('l'), 76)",
			"Test.assertEquals(counterpartCharCode('L'), 108)",
			"Test.assertEquals(counterpartCharCode('z'), 90)",
			"Test.assertEquals(counterpartCharCode('Z'), 122)",
			"​",
			"// Accented / weird letters",
			"Test.assertEquals(counterpartCharCode('è'), 200)",
			"Test.assertEquals(counterpartCharCode('È'), 232)",
			"Test.assertEquals(counterpartCharCode('Œ'), 339)",
			"Test.assertEquals(counterpartCharCode('œ'), 338)",
			"Test.assertEquals(counterpartCharCode('Ⱥ'), 11365)",
			"Test.assertEquals(counterpartCharCode('ⱥ'), 570)",
			"​",
			"// These don't have a counterpart, you should return the input's char code",
			"Test.assertEquals(counterpartCharCode('5'), 53)",
			"Test.assertEquals(counterpartCharCode('$'), 36)"
		],
		"starterFn": [
			"1\nfunction counterpartCharCode(char) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fbaLZPNjTvYtY444B"
	},
	{
		"title": "Doubled Pay",
		"description": "<p><span>An employee working at a very bizzare company, earns one penny on their first day. However, for every day that passes, their base amount </span><strong><span>doubles</span></strong><span>, so they earn two pennies on the second day and four pennies on the third day (totalling 7 pennies). Given a number of days, return how many pennies the employee accumulates.</span></p><h3><span>Examples</span></h3><pre><code>doubledPay(1) ➞ 1\n\ndoubledPay(2) ➞ 3\n\ndoubledPay(3) ➞ 7</code></pre><h3><span>Notes</span></h3><p><span>You will only get tests for valid positive integers.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(doubledPay(1), 1)",
			"Test.assertEquals(doubledPay(2), 3)",
			"Test.assertEquals(doubledPay(3), 7)",
			"Test.assertEquals(doubledPay(4), 15)",
			"Test.assertEquals(doubledPay(5), 31)",
			"Test.assertEquals(doubledPay(6), 63)",
			"Test.assertEquals(doubledPay(7), 127)",
			"Test.assertEquals(doubledPay(8), 255)",
			"Test.assertEquals(doubledPay(9), 511)",
			"Test.assertEquals(doubledPay(10), 1023)",
			"Test.assertEquals(doubledPay(11), 2047)",
			"Test.assertEquals(doubledPay(12), 4095)",
			"Test.assertEquals(doubledPay(13), 8191)",
			"Test.assertEquals(doubledPay(14), 16383)",
			"Test.assertEquals(doubledPay(15), 32767)",
			"Test.assertEquals(doubledPay(16), 65535)",
			"Test.assertEquals(doubledPay(17), 131071)",
			"Test.assertEquals(doubledPay(18), 262143)",
			"Test.assertEquals(doubledPay(19), 524287)",
			"Test.assertEquals(doubledPay(20), 1048575)",
			"Test.assertEquals(doubledPay(21), 2097151)",
			"Test.assertEquals(doubledPay(22), 4194303)",
			"Test.assertEquals(doubledPay(59), 576460752303423487)",
			"Test.assertEquals(doubledPay(66), 73786976294838206463)",
			"Test.assertEquals(doubledPay(35), 34359738367)",
			"Test.assertEquals(doubledPay(73), 9444732965739290427391)"
		],
		"starterFn": [
			"1\nfunction doubledPay(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WdhGpwBN9DnNnWNDs"
	},
	{
		"title": "H4ck3r Sp34k",
		"description": "<p><span>Create a function that takes a string as an argument and returns a coded (h4ck3r 5p34k) version of the string.</span></p><h3><span>Examples</span></h3><pre><code>hackerSpeak(\"javascript is cool\") ➞ \"j4v45cr1pt 15 c00l\"\n\nhackerSpeak(\"programming is fun\") ➞ \"pr0gr4mm1ng 15 fun\"\n\nhackerSpeak(\"become a coder\") ➞ \"b3c0m3 4 c0d3r\"</code></pre><h3><span>Notes</span></h3><p><span>In order to work properly, the function should replace all 'a's with 4, 'e's with 3, 'i's with 1, 'o's with 0, and 's's with 5.</span></p>",
		"publishedBy": "Michael Alexander",
		"publishedByUrl": "https://edabit.com/user/9nRurh3vGSqKaFJCX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"control_flow",
			"functional_programming"
		],
		"tests": [
			"Test.assertEquals(hackerSpeak(\"javascript is cool\"), \"j4v45cr1pt 15 c00l\")",
			"Test.assertEquals(hackerSpeak(\"become a coder\"), \"b3c0m3 4 c0d3r\")",
			"Test.assertEquals(hackerSpeak(\"hi there\"), \"h1 th3r3\")",
			"Test.assertEquals(hackerSpeak(\"programming is fun\"), \"pr0gr4mm1ng 15 fun\")",
			"Test.assertEquals(hackerSpeak(\"keep on practicing\"), \"k33p 0n pr4ct1c1ng\")"
		],
		"starterFn": [
			"1\nfunction hackerSpeak(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cada8J3AWGRhwQhkk"
	},
	{
		"title": "Get the Century",
		"description": "<p><span>Create a function that takes in a year and returns the correct century.</span></p><h3><span>Examples</span></h3><pre><code>century(1756) ➞ \"18th century\"\n\ncentury(1555) ➞ \"16th century\"\n\ncentury(1000) ➞ \"10th century\"\n\ncentury(1001) ➞ \"11th century\"\n\ncentury(2005) ➞ \"21st century\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All years will be between </span><code>1000</code><span> and </span><code>2010</code><span>.</span></li><li><span>The 11th century is between 1001 and 1100.</span></li><li><span>The 18th century is between 1701-1800.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(century(1756), \"18th century\")",
			"Test.assertEquals(century(1555), \"16th century\")",
			"Test.assertEquals(century(1000), \"10th century\")",
			"Test.assertEquals(century(1001), \"11th century\")",
			"Test.assertEquals(century(2005), \"21st century\")",
			"Test.assertEquals(century(1789), \"18th century\")",
			"Test.assertEquals(century(1510), \"16th century\")",
			"Test.assertEquals(century(1615), \"17th century\")",
			"Test.assertEquals(century(2000), \"20th century\")",
			"Test.assertEquals(century(1997), \"20th century\")"
		],
		"starterFn": [
			"1\nfunction century(year) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SAdqaWKRpjLfZnGKA"
	},
	{
		"title": "ReverseAndNot",
		"description": "<p><span>Write a function that takes an integer </span><code>i</code><span> and returns an integer with the integer backwards followed by the original integer.</span></p><p><span>To illustrate:</span></p><pre><code>123</code></pre><p><span>We reverse </span><code>123</code><span> to get </span><code>321</code><span> and then add </span><code>123</code><span> to the end, resulting in </span><code>321123</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>reverseAndNot(123) ➞ 321123\n\nreverseAndNot(152) ➞ 251152\n\nreverseAndNot(123456789) ➞ 987654321123456789</code></pre><h3><span>Notes</span></h3><p><code>i</code><span> is a non-negative integer.</span></p>",
		"publishedBy": "Enkuryo",
		"publishedByUrl": "https://edabit.com/user/Nc23QyxhdeFRwzj5W",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverseAndNot(123), 321123)",
			"Test.assertEquals(reverseAndNot(123456789), 987654321123456789)",
			"Test.assertEquals(reverseAndNot(496), 694496)",
			"Test.assertEquals(reverseAndNot(307), 703307)",
			"Test.assertEquals(reverseAndNot(500), 5500)",
			"Test.assertEquals(reverseAndNot(321), 123321)",
			"Test.assertEquals(reverseAndNot(564), 465564)",
			"Test.assertEquals(reverseAndNot(66), 6666)",
			"Test.assertEquals(reverseAndNot(553), 355553)",
			"Test.assertEquals(reverseAndNot(518), 815518)",
			"Test.assertEquals(reverseAndNot(152), 251152)",
			"Test.assertEquals(reverseAndNot(273), 372273)",
			"Test.assertEquals(reverseAndNot(603), 306603)",
			"Test.assertEquals(reverseAndNot(864), 468864)",
			"Test.assertEquals(reverseAndNot(170), 71170)",
			"Test.assertEquals(reverseAndNot(96), 6996)",
			"Test.assertEquals(reverseAndNot(869), 968869)",
			"Test.assertEquals(reverseAndNot(960), 69960)",
			"Test.assertEquals(reverseAndNot(471), 174471)",
			"Test.assertEquals(reverseAndNot(925), 529925)",
			"Test.assertEquals(reverseAndNot(235), 532235)",
			"Test.assertEquals(reverseAndNot(389), 983389)",
			"Test.assertEquals(reverseAndNot(293), 392293)",
			"Test.assertEquals(reverseAndNot(586), 685586)",
			"Test.assertEquals(reverseAndNot(218), 812218)",
			"Test.assertEquals(reverseAndNot(262), 262262)"
		],
		"starterFn": [
			"1\nfunction reverseAndNot(i) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/moK78CirzYbqk6g3z"
	},
	{
		"title": "Negative Image",
		"description": "<p><span>Suppose an image can be represented as a 2D array of 0s and 1s. Write a function to reverse an image. Replace the 0s with 1s and vice versa.</span></p><h3><span>Examples</span></h3><pre><code>reverseImage([\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1]\n]) ➞ [\n  [0, 1, 1],\n  [1, 0, 1],\n  [1, 1, 0]\n]\n\nreverseImage([\n  [1, 1, 1],\n  [0, 0, 0]\n]) ➞ [\n  [0, 0, 0],\n  [1, 1, 1]\n]\n\nreverseImage([\n  [1, 0, 0],\n  [1, 0, 0]\n]) ➞ [\n  [0, 1, 1],\n  [0, 1, 1]\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"closures",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(reverseImage([",
			"  [1, 0, 0], ",
			"  [0, 1, 0], ",
			"  [0, 0, 1]",
			"]), [",
			"  [0, 1, 1], ",
			"  [1, 0, 1], ",
			"  [1, 1, 0]",
			"])",
			"​",
			"Test.assertSimilar(reverseImage([",
			"  [1, 1, 1], ",
			"  [0, 0, 0]",
			"]), [",
			"  [0, 0, 0], ",
			"  [1, 1, 1]",
			"])",
			"​",
			"Test.assertSimilar(reverseImage([",
			"  [1, 0, 0], ",
			"  [1, 0, 0]",
			"]), [",
			"  [0, 1, 1], ",
			"  [0, 1, 1]",
			"])",
			"​"
		],
		"starterFn": [
			"1\nfunction reverseImage(image) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uNzzNQPDQferAAGMc"
	},
	{
		"title": "Factorize a Number",
		"description": "<p><span>Create a function that takes a number as its argument and returns an array of all its factors.</span></p><h3><span>Examples</span></h3><pre><code>factorize(12) ➞ [1, 2, 3, 4, 6, 12]\n\nfactorize(4) ➞ [1, 2, 4]\n\nfactorize(17) ➞ [1, 17]</code></pre><h3><span>Notes</span></h3><ul><li><span>The input integer will be positive.</span></li><li><span>A factor is a number that evenly divides into another number without leaving a remainder. The second example is a factor of 12, because 12 / 2 = 6, with remainder 0.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(factorize(12), [1, 2, 3, 4, 6, 12])",
			"Test.assertSimilar(factorize(4), [1, 2, 4])",
			"Test.assertSimilar(factorize(17), [1, 17])",
			"Test.assertSimilar(factorize(24), [1, 2, 3, 4, 6, 8, 12, 24])",
			"Test.assertSimilar(factorize(1), [1])"
		],
		"starterFn": [
			"1\nfunction factorize(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zLYbAPk8NMnwoPhjG"
	},
	{
		"title": "Odd Up, Even Down — N Times",
		"description": "<p><span>Create a function that performs an </span><strong><span>even-odd</span></strong><span> transform to an array, </span><strong><span>n times</span></strong><span>. Each </span><strong><span>even-odd</span></strong><span> transformation:</span></p><ol><li><span>Adds two (</span><strong><span>+2</span></strong><span>) to each </span><strong><span>odd</span></strong><span> integer.</span></li><li><span>Subtracts two (</span><strong><span>-2</span></strong><span>) to each </span><strong><span>even</span></strong><span> integer.</span></li></ol><h3><span>Examples</span></h3><pre><code>evenOddTransform([3, 4, 9], 3) ➞ [9, -2, 15]\n// Since [3, 4, 9] =&gt; [5, 2, 11] =&gt; [7, 0, 13] =&gt; [9, -2, 15]\n\nevenOddTransform([0, 0, 0], 10) ➞ [-20, -20, -20]\n\nevenOddTransform([1, 2, 3], 1) ➞ [3, 0, 5]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(evenOddTransform([3, 4, 9], 3), ([9, -2, 15]))",
			"Test.assertSimilar(evenOddTransform([0, 0, 0], 10), ([-20, -20, -20]))",
			"Test.assertSimilar(evenOddTransform([1, 2, 3], 1), ([3, 0, 5]))",
			"Test.assertSimilar(evenOddTransform([55, 90, 830], 2), ([59, 86, 826]))"
		],
		"starterFn": [
			"1\nfunction evenOddTransform(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MsNyn2xmTzRWjFuMT"
	},
	{
		"title": "Censor Words Longer Than Four Characters",
		"description": "<p><span>Create a function that takes a string and censors words </span><strong><span>over four characters</span></strong><span> with </span><code>*</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>censor(\"The code is fourty\") ➞ \"The code is ******\"\n\ncensor(\"Two plus three is five\") ➞ \"Two plus ***** is five\"\n\ncensor(\"aaaa aaaaa 1234 12345\") ➞ \"aaaa ***** 1234 *****\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't censor words with exactly four characters.</span></li><li><span>If all words have four characters or less, return the original string.</span></li><li><span>The amount of </span><code>*</code><span> is the same as the length of the word.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(censor(\"The code is fourty\"),\"The code is ******\", \"Example #1\")",
			"Test.assertEquals(censor(\"Two plus three is five\"),\"Two plus ***** is five\", \"Example #2\")",
			"Test.assertEquals(censor(\"aaaa aaaaa 1234 12345\"),\"aaaa ***** 1234 *****\", \"Example #3\")",
			"Test.assertEquals(censor(\"abcdefghijklmnop\"),\"****************\")",
			"Test.assertEquals(censor(\"a\"),\"a\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction censor(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/huiJkoQzegoc5qeCJ"
	},
	{
		"title": "Return the Sum of the Two Smallest Numbers",
		"description": "<p><span>Create a function that takes an array of numbers and returns the sum of the two lowest </span><strong><span>positive</span></strong><span> numbers.</span></p><h3><span>Examples</span></h3><pre><code>sumTwoSmallestNums([19, 5, 42, 2, 77]) ➞ 7\n\nsumTwoSmallestNums([10, 343445353, 3453445, 3453545353453]) ➞ 3453455\n\nsumTwoSmallestNums([2, 9, 6, -1]) ➞ 8\n\nsumTwoSmallestNums([879, 953, 694, -847, 342, 221, -91, -723, 791, -587]) ➞ 563\n\nsumTwoSmallestNums([3683, 2902, 3951, -475, 1617, -2385]) ➞ 4519</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't count negative numbers.</span></li><li><span>Floats and empty arrays will not be used in any of the test cases.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sumTwoSmallestNums([19, 5, 42, 2, 77]), 7);",
			"Test.assertEquals(sumTwoSmallestNums([10, 343445353, 3453445, 3453545353453]), 3453455);",
			"Test.assertEquals(sumTwoSmallestNums([2, 9, 6, -1]), 8);",
			"Test.assertEquals(sumTwoSmallestNums([879, 953, 694, -847, 342, 221, -91, -723, 791, -587]), 563);",
			"Test.assertEquals(sumTwoSmallestNums([3683, 2902, 3951, -475, 1617, -2385]), 4519);",
			"Test.assertEquals(sumTwoSmallestNums([280, 134, 108]), 242);",
			"Test.assertEquals(sumTwoSmallestNums([280, 134, 108, 1]), 109);",
			"Test.assertEquals(sumTwoSmallestNums([321, 406, -176]), 727);",
			"Test.assertEquals(sumTwoSmallestNums([1, 1, 1, 1]), 2);",
			"Test.assertEquals(sumTwoSmallestNums([-1, -1, 1, 1]), 2);"
		],
		"starterFn": [
			"1\nfunction sumTwoSmallestNums(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GNgCfKHWfQwByBNqa"
	},
	{
		"title": "RegEx: Character Classes XI ⁠- \\S",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>Write a regex that will return </span><code>true</code><span> if the bio </span><strong><span>does not</span></strong><span> have any spaces before the last ending punctuation </span><code>?</code><span>. You must use the </span><code>\\S</code><span> character class in your expression.</span></p><pre><code>\"Can read a spray chart and a balance sheet. 1 part Executive, 1 part entrepreneur, 2 parts geek and 3 parts baseball coach. Too many parts?\"</code></pre><p><span>The bio above is in the correct format. Therefore your </span><strong><span>RegEx</span></strong><span> should return </span><code>true</code><span> for it.</span></p><h3><span>Notes</span></h3><ul><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on character classes if you're stuck.</span></li><li><a target=\"_blank\" href=\"https://twitter.com/m_gallion\"><span>Mark Gallion's Twitter</span></a><span> bio is used for educational purposes only.</span></li><li><span>To search for the character </span><code>?</code><span> in RegEx, the pattern must include </span><code>\\?</code><span>.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex",
			"validation"
		],
		"tests": [
			"const str1 = \"Can read a spray chart and a balance sheet. 1 part Executive, 1 part entrepreneur, 2 parts geek and 3 parts baseball coach. Too many parts?\"",
			"const str2 = \"Can read a spray chart and a balance sheet. 1 part Executive, 1 part entrepreneur, 2 parts geek and 3 parts baseball coach. Too many parts ?\"",
			"const str3 = \"Can read a spray chart and a balance sheet. 1 part Executive, 1 part entrepreneur, 2 parts geek and 3 parts baseball coach. Too many parts  ?\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\S/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return REGEXP.test(str)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str3), \"invalid\", \"You are required to use a \\\\S character class in your expression.\")",
			"Test.assertEquals(testExp(str1), true, \"This string is in the correct format.\") ",
			"Test.assertEquals(testExp(str2), false, \"There is a space before the ending punctuation ?\") ",
			"Test.assertEquals(testExp(str3), false, \"There are spaces before the ending punctuation          ?\")"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you oexpression here */g"
		],
		"url": "https://edabit.com/challenge/6Zs9AyraoFAAEhX6v"
	},
	{
		"title": "Format Number with Comma(s) Separating Thousands",
		"description": "<p><span>Create a function that takes a number as an argument and returns a string formatted to separate thousands.</span></p><h3><span>Examples</span></h3><pre><code>formatNum(1000) ➞ \"1,000\"\n\nformatNum(100000) ➞ \"100,000\"\n\nformatNum(20) ➞ \"20\"</code></pre><h3><span>Notes</span></h3><p><span>You can expect a valid number for all test cases.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(formatNum(1000), \"1,000\");",
			"Test.assertEquals(formatNum(1000000), \"1,000,000\");",
			"Test.assertEquals(formatNum(20), \"20\");",
			"Test.assertEquals(formatNum(0), \"0\");",
			"Test.assertEquals(formatNum(12948), \"12,948\");"
		],
		"starterFn": [
			"1\nfunction formatNum(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5o7CE6N4uNAGDzjRg"
	},
	{
		"title": "Double Letters",
		"description": "<p><span>Create a function that takes a word and returns </span><code>true</code><span> if the word has two consecutive identical letters.</span></p><h3><span>Examples</span></h3><pre><code>doubleLetters(\"loop\") ➞ true\n\ndoubleLetters(\"yummy\") ➞ true\n\ndoubleLetters(\"orange\") ➞ false\n\ndoubleLetters(\"munchkin\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"// True test cases",
			"Test.assertEquals(doubleLetters(\"loop\"), true)",
			"Test.assertEquals(doubleLetters(\"meeting\"), true)",
			"Test.assertEquals(doubleLetters(\"yummy\"), true)",
			"Test.assertEquals(doubleLetters(\"moo\"), true)",
			"Test.assertEquals(doubleLetters(\"toodles\"), true)",
			"Test.assertEquals(doubleLetters(\"droop\"), true)",
			"Test.assertEquals(doubleLetters(\"loot\"), true)",
			"// False test cases",
			"Test.assertEquals(doubleLetters(\"orange\"), false)",
			"Test.assertEquals(doubleLetters(\"munchkin\"), false)",
			"Test.assertEquals(doubleLetters(\"forestry\"), false)",
			"Test.assertEquals(doubleLetters(\"raindrops\"), false)",
			"Test.assertEquals(doubleLetters(\"gold\"), false)",
			"Test.assertEquals(doubleLetters(\"paradise\"), false)",
			"Test.assertEquals(doubleLetters(\"chicken\"), false)"
		],
		"starterFn": [
			"1\nfunction doubleLetters(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YHLaB8itA9tEDN5TG"
	},
	{
		"title": "Find the Second Occurrence of \"zip\" in a String",
		"description": "<p><span>Write a function that returns the </span><strong><span>position</span></strong><span> of the </span><strong><span>second occurrence</span></strong><span> of \"zip\" in a string, or </span><strong><span>-1</span></strong><span> if it does not occur at least twice. Your code should be general enough to pass every possible case where \"zip\" can occur in a string.</span></p><h3><span>Examples</span></h3><pre><code>findZip(\"all zip files are zipped\") ➞ 18\n\nfindZip(\"all zip files are compressed\") ➞ -1</code></pre><h3><span>Notes</span></h3><p><span>Uppercase \"Zip\" is not the same as lowercase \"zip\".</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"logic",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(findZip(\"all zip files are zipped\"), 18)",
			"Test.assertEquals(findZip(\"all zip files are compressed\"), -1)",
			"Test.assertEquals(findZip(\"We believe university-level zip education can be both high quality and low cost. Using the economics of the Internet, we've connected some of the greatest teachers to hundreds of thousands of students all over the world.\"), -1)",
			"Test.assertEquals(findZip(\"Zip is a file format used for data compression and archiving. A zip file contains one or more files that have been compressed, to reduce file size, or stored as is. The zip file format permits a number of compression algorithms.\"), 169)"
		],
		"starterFn": [
			"1\nfunction findZip(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HLvES6FKvbFGPXs7X"
	},
	{
		"title": "Neatly Formatted Math",
		"description": "<p><span>Given a simple </span><em><span>math expression</span></em><span> as a string, neatly format it </span><em><span>as an equation</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>formatMath(\"3 + 4\") ➞ \"3 + 4 = 7\"\n\nformatMath(\"3 - 2\") ➞ \"3 - 2 = 1\"\n\nformatMath(\"4 x 5\") ➞ \"4 x 5 = 20\"\n\nformatMath(\"6 / 3\") ➞ \"6 / 3 = 2\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You will need to deal with </span><strong><span>addition</span></strong><span>, </span><strong><span>subtraction</span></strong><span>, </span><strong><span>multiplication</span></strong><span> and </span><strong><span>division</span></strong><span>.</span></li><li><span>Division will have </span><strong><span>whole number</span></strong><span> answers (and will obviously </span><strong><span>not</span></strong><span> involve 0).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(formatMath(\"3 + 4\"), \"3 + 4 = 7\")",
			"Test.assertEquals(formatMath(\"3 - 2\"), \"3 - 2 = 1\")",
			"Test.assertEquals(formatMath(\"4 x 5\"), \"4 x 5 = 20\")",
			"Test.assertEquals(formatMath(\"6 / 3\"), \"6 / 3 = 2\")",
			"Test.assertEquals(formatMath(\"9 / 3\"), \"9 / 3 = 3\")",
			"Test.assertEquals(formatMath(\"21 / 3\"), \"21 / 3 = 7\")",
			"Test.assertEquals(formatMath(\"24 / 3\"), \"24 / 3 = 8\")",
			"Test.assertEquals(formatMath(\"80 / 8\"), \"80 / 8 = 10\")",
			"Test.assertEquals(formatMath(\"60 / 30\"), \"60 / 30 = 2\")",
			"Test.assertEquals(formatMath(\"44 - 11\"), \"44 - 11 = 33\")",
			"Test.assertEquals(formatMath(\"48 + 35\"), \"48 + 35 = 83\")",
			"Test.assertEquals(formatMath(\"8 + 5\"), \"8 + 5 = 13\")",
			"Test.assertEquals(formatMath(\"46 - 11\"), \"46 - 11 = 35\")",
			"Test.assertEquals(formatMath(\"23 x 46\"), \"23 x 46 = 1058\")",
			"Test.assertEquals(formatMath(\"11 + 1\"), \"11 + 1 = 12\")",
			"Test.assertEquals(formatMath(\"29 - 21\"), \"29 - 21 = 8\")",
			"Test.assertEquals(formatMath(\"24 x 26\"), \"24 x 26 = 624\")",
			"Test.assertEquals(formatMath(\"47 + 8\"), \"47 + 8 = 55\")",
			"Test.assertEquals(formatMath(\"42 - 48\"), \"42 - 48 = -6\")",
			"Test.assertEquals(formatMath(\"33 x 44\"), \"33 x 44 = 1452\")",
			"Test.assertEquals(formatMath(\"26 + 3\"), \"26 + 3 = 29\")",
			"Test.assertEquals(formatMath(\"32 + 17\"), \"32 + 17 = 49\")",
			"Test.assertEquals(formatMath(\"3 x 26\"), \"3 x 26 = 78\")",
			"Test.assertEquals(formatMath(\"12 x 25\"), \"12 x 25 = 300\")",
			"Test.assertEquals(formatMath(\"43 + 31\"), \"43 + 31 = 74\")",
			"Test.assertEquals(formatMath(\"28 + 27\"), \"28 + 27 = 55\")"
		],
		"starterFn": [
			"1\nfunction formatMath(expr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QtEsWc3qmxWReBNmK"
	},
	{
		"title": "Number of Arrays in an Array",
		"description": "<p><span>Return the total number of arrays inside a given array.</span></p><h3><span>Examples</span></h3><pre><code>numOfSubbarrays([[1, 2, 3]]) ➞ 1\n\nnumOfSubbarrays([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) ➞ 3\n\nnumOfSubbarrays([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) ➞ 4\n\nnumOfSubbarrays([1, 2, 3]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Вања",
		"publishedByUrl": "https://edabit.com/user/puF7tgr34fjsLXiDT",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(numOfSubbarrays([[1,2,3], [1,2,3], [1,2,3]]), 3)",
			"Test.assertSimilar(numOfSubbarrays([[1,2,3]]), 1)",
			"Test.assertSimilar(numOfSubbarrays([1,2,3]), 0)",
			"Test.assertSimilar(numOfSubbarrays([[1,2,3], [ 1,2,3 ], [ 1,2,3 ], [1,2,3]]), 4)"
		],
		"starterFn": [
			"1\nfunction numOfSubbarrays(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TwJghdCGSbDywLZz7"
	},
	{
		"title": "Rock, Paper, Scissors",
		"description": "<p><span>Create a function which takes two strings (</span><code>p1</code><span> and </span><code>p2</code><span> ⁠— which represent player 1 and 2) as arguments and returns a string stating the winner in a game of </span><em><span>Rock, Paper, Scissors</span></em><span>.</span></p><p><span>Each argument will contain a single string: </span><code>\"Rock\"</code><span>, </span><code>\"Paper\"</code><span>, or </span><code>\"Scissors\"</code><span>. Return the winner according to the following rules:</span></p><ul><li><strong><span>Rock</span></strong><span> beats </span><strong><span>Scissors</span></strong></li><li><strong><span>Scissors</span></strong><span> beats </span><strong><span>Paper</span></strong></li><li><strong><span>Paper</span></strong><span> beats </span><strong><span>Rock</span></strong></li></ul><p><span>If </span><code>p1</code><span> wins, return the string </span><code>\"The winner is p1\"</code><span>. If </span><code>p2</code><span> wins, return the string </span><code>\"The winner is p2\"</code><span> and if </span><code>p1</code><span> and </span><code>p2</code><span> are the same, return </span><code>\"It's a draw\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>rps(\"Rock\", \"Paper\") ➞ \"The winner is p2\"\n\nrps(\"Scissors\", \"Paper\") ➞ \"The winner is p1\"\n\nrps(\"Paper\", \"Paper\") ➞ \"It's a draw\"</code></pre><h3><span>Notes</span></h3><p><span>All inputs will be valid strings.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"data_structures",
			"games"
		],
		"tests": [
			"Test.assertEquals(rps(\"Rock\", \"Paper\"), \"The winner is p2\")",
			"Test.assertEquals(rps(\"Scissors\", \"Rock\"), \"The winner is p2\")",
			"Test.assertEquals(rps(\"Scissors\", \"Paper\"), \"The winner is p1\")",
			"Test.assertEquals(rps(\"Paper\", \"Rock\"), \"The winner is p1\")",
			"Test.assertEquals(rps(\"Paper\", \"Paper\"), \"It's a draw\")",
			"Test.assertEquals(rps(\"Rock\", \"Rock\"), \"It's a draw\")"
		],
		"starterFn": [
			"1\nfunction rps(p1, p2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uXf7RQ5am84tup7mQ"
	},
	{
		"title": "Match the Last Item",
		"description": "<p><span>Create a function that takes an array of items and checks if the last item matches the rest of the array.</span></p><h3><span>Examples</span></h3><pre><code>matchLastItem([\"rsq\", \"6hi\", \"g\", \"rsq6hig\"]) ➞ true\n// The last item is the rest joined.\n\nmatchLastItem([1, 1, 1, \"11\"]) ➞ false\n// The last item should be \"111\".\n\nmatchLastItem([8, \"thunder\", true, \"8thundertrue\"]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>The array is always filled with items.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(matchLastItem(['rsq', '6hi', 'g', 'rsq6hig']), true)",
			"Test.assertEquals(matchLastItem([ 0, 1, 2, 3, 4, 5, '12345' ]), false)",
			"Test.assertEquals(matchLastItem([ 'for', 'mi', 'da', 'bel', 'formidable' ]), false)",
			"Test.assertEquals(matchLastItem([8, 'thunder', true, '8thundertrue']), true)",
			"Test.assertEquals(matchLastItem([ 1, 1, 1, '11' ]), false)",
			"Test.assertEquals(matchLastItem(['tocto','G8G','xtohkgc','3V8','ctyghrs',100.88,'fyuo','Q','toctoG8Gxtohkgc3V8ctyghrs100.88fyuoQ']), true)"
		],
		"starterFn": [
			"1\nfunction matchLastItem(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jbR9NupEL8zAZkbKx"
	},
	{
		"title": "Check for Anagrams",
		"description": "<p><span>Create a function that takes two strings and returns either </span><code>true</code><span> or </span><code>false</code><span> depending on whether they're anagrams or not.</span></p><h3><span>Examples</span></h3><pre><code>isAnagram(\"cristian\", \"Cristina\") ➞ true\n\nisAnagram(\"Dave Barry\", \"Ray Adverb\") ➞ true\n\nisAnagram(\"Nope\", \"Note\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Should be case insensitive.</span></li><li><span>The two given strings can be of different lengths.</span></li></ul>",
		"publishedBy": "faqofff",
		"publishedByUrl": "https://edabit.com/user/NnJhaSQJGXmv9Tqse",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isAnagram(\"cristian\", \"Cristina\"), true)",
			"Test.assertEquals(isAnagram(\"Dave Barry\", \"Ray Adverb\"), true)",
			"Test.assertEquals(isAnagram(\"Nope\", \"Note\"), false)",
			"Test.assertEquals(isAnagram(\"Apple\", \"Appeal\"), false)"
		],
		"starterFn": [
			"1\nfunction isAnagram(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FPamWj3Ky7ep9ApBz"
	},
	{
		"title": "Don't Roll Doubles!",
		"description": "<p><span>John is playing a dice game. The rules are as follows.</span></p><ol><li><span>Roll two dice.</span></li><li><span>Add the numbers on the dice together.</span></li><li><span>Add the total to your overall score.</span></li><li><span>Repeat this for three rounds.</span></li></ol><p><strong><span>But if you roll DOUBLES, your score is instantly wiped to 0 and your game ends immediately!</span></strong></p><p><span>Create a function which takes in a matrix as input, and return John's score after his game has ended.</span></p><h3><span>Examples</span></h3><pre><code>diceGame([[1, 2], [3, 4], [5, 6]]) ➞ 21\n\ndiceGame([[1, 1], [5, 6], [6, 4]]) ➞ 0\n\ndiceGame([[4, 5], [4, 5], [4, 5]]) ➞ 27</code></pre><h3><span>Notes</span></h3><ul><li><span>Ignore all other arrays in the matrix if a throw happens to be doubles and go straight to returning </span><code>0</code><span>.</span></li><li><span>John only has two dice and will always give you outcomes for three rounds.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"games"
		],
		"tests": [
			"Test.assertEquals(diceGame([[1, 2], [3, 4], [5, 6]]), 21)",
			"Test.assertEquals(diceGame([[1, 1], [5, 6], [6, 4]]), 0)",
			"Test.assertEquals(diceGame([[4, 5], [4, 5], [4, 5]]), 27)",
			"Test.assertEquals(diceGame([[1, 3], [4, 3], [5, 2]]), 18)",
			"Test.assertEquals(diceGame([[1, 3], [4, 3], [5, 5]]), 0)",
			"Test.assertEquals(diceGame([[1, 3], [4, 4], [5, 2]]), 0)",
			"Test.assertEquals(diceGame([[5, 6], [5, 6], [5, 6]]), 33)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction diceGame(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/chy94ZtNqzAHMSXoW"
	},
	{
		"title": "Reverse the Order of Words with Five Letters or More",
		"description": "<p><span>Write a function that takes a string of one or more words as an argument and returns the same string, but with all five or more letter words reversed. Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.</span></p><h3><span>Examples</span></h3><pre><code>reverse(\"Reverse\") ➞ \"esreveR\"\n\nreverse(\"This is a typical sentence.\") ➞ \"This is a lacipyt .ecnetnes\"\n\nreverse(\"The dog is big.\") ➞ \"The dog is big.\"</code></pre><h3><span>Notes</span></h3><p><span>You can expect a valid string to be provided for each test case.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverse(\"Reverse\"), \"esreveR\");",
			"Test.assertEquals(reverse(\"This is a typical sentence.\"), \"This is a lacipyt .ecnetnes\");",
			"Test.assertEquals(reverse(\"The dog is big.\"), \"The dog is big.\");",
			"Test.assertEquals(reverse(\"Reverse the order of every word greater than or equal to five characters.\"), \"esreveR the redro of yreve word retaerg than or lauqe to five .sretcarahc\");",
			"Test.assertEquals(reverse(\"Lets all be unique together until we realise we are all the same.\"), \"Lets all be euqinu rehtegot litnu we esilaer we are all the .emas\");",
			"Test.assertEquals(reverse(\"The old apple revels in its authority.\"), \"The old elppa slever in its .ytirohtua\");",
			"Test.assertEquals(reverse(\"The shooter says goodbye to his love.\"), \"The retoohs says eybdoog to his .evol\");",
			"Test.assertEquals(reverse(\"Please wait outside of the house.\"), \"esaelP wait edistuo of the .esuoh\");",
			"Test.assertEquals(reverse(\"Two seats were vacant.\"), \"Two staes were .tnacav\");",
			"Test.assertEquals(reverse(\"Sixty-Four comes asking for bread.\"), \"ruoF-ytxiS semoc gniksa for .daerb\");"
		],
		"starterFn": [
			"1\nfunction reverse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wPNzJEJebN2mewcqY"
	},
	{
		"title": "Promises II: What Is a Callback?",
		"description": "<p><strong><span>Callbacks</span></strong><span> are </span><strong><span>first-class</span></strong><span> functions. This means they have first-class characteristics, like being able to be passed to other functions. There was a time when </span><strong><span>callbacks</span></strong><span> were used to handle async operations, but we needed something better because of a few shortcomings (like problems with nested callbacks).  </span></p><p><span>Here's a simple example of a callback:</span></p><pre><code>function asyncFunc(cb) {\n  let result = \"\"\n  // After some time the result of an async opertion comes back and is put in the \"result\" variable.  We'll use a string for this example.   \n  result = \"hello\"\n  cb(result)\n}\n\nfunction callback(str) {\n  console.log(str)\n}\n\nasyncFunc(callback)\nconsole.log(\"goodbye\")\n\n// goodbye\n// hello</code></pre><p><span>\"goodbye\" appears before \"hello\" because the async operation in </span><code>asyncFunc()</code><span> is </span><strong><span> non-blocking</span></strong><span>, meaning that it is set aside until it finishes but in the meantime we go ahead and call the next function.</span></p><h3><span>Challenge</span></h3><ul><li><span>Fix </span><code>anotherFunc()</code><span> so that calls to it will change the doc variable to </span><strong><span>bye</span></strong><span>.</span></li><li><span>Keep the </span><code>setTimeout</code><span> to 100ms and do not change the </span><strong><span>callback</span></strong><span> function or the </span><strong><span>doc</span></strong><span> variable.</span></li></ul><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on </span><strong><span>callbacks</span></strong><span>.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(doc, \"hello\", \"Do not change the doc variable\")",
			"​",
			"anotherFunc(callback)",
			"​",
			"setTimeout(()=> {",
			"  Test.assertEquals(doc, \"bye\")",
			"}, 1000)"
		],
		"starterFn": [
			"1\nfunction anotherFunc() {",
			"2\n  let str = \"bye\"",
			"3\n  setTimeout(() => {",
			"4\n  }, 100)",
			"5\n}",
			"6\n​",
			"7\nvar doc = \"hello\"",
			"8\n​",
			"9\nfunction callback(str) {",
			"10\n  doc = str",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/W6RRCaj8mZJgiRAgy"
	},
	{
		"title": "ES6: Destructuring Arrays V",
		"description": "<p><span>ES6 Destructuring can come in handy when you use regular expressions. Here is a function that uses a regular expression to parse a URL.</span></p><pre><code>const parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url)\n\nparseURL(\"https://developer.mozilla.org/en-US/Web/JavaScript\")\n// returns [\"https://developer.mozilla.org/en-US/Web/JavaScript\", \"https\", \"developer.mozilla.org\", \"en-US/Web/JavaScript\"]\n\n// the protocol = https\n// the host = developer.mozilla.org\n// the path = en-US/Web/JavaScript</code></pre><p><span>From the </span><code>parsedURL</code><span> result you could assign these segments using ES6 array destructuring.</span></p><h3><span>Challenge</span></h3><ul><li><span>Assign the variables </span><code>protocol</code><span>, </span><code>host</code><span>, </span><code>path</code><span> inside the brackets of the given string.</span></li><li><span>Pay close attention to what is being returned from </span><code>parsedURL</code><span>, as you will need to skip over any values that are not </span><code>protocol</code><span>, </span><code>host</code><span>, or </span><code>path</code><span>.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"const url1 = 'https://developer.mozilla.org/en-US/Web/JavaScript'",
			"​",
			"const parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url1)",
			"eval(str)",
			"​",
			"const validString = (str) => {",
			"  return /(protocol).*(host).*(path)/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"const stringConstraints = (expression) => {",
			"  return /^\\[.*\\]\\s\\=\\sparsedURL/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"Test.assertEquals(validString(str), \"valid\", \"You must use the correct variables and they must be inside the brackets\")",
			"Test.assertEquals(stringConstraints(str), \"valid\", \"Changes must only be made inside the [ ] brackets\")",
			"Test.assertEquals(protocol, \"https\", \"The variable protocol must equal https\")",
			"Test.assertEquals(host, \"developer.mozilla.org\", \"The variable host must equal developer.mozilla.org\")",
			"Test.assertEquals(path, \"en-US/Web/JavaScript\", \"The variable path must equal en-US/Web/JavaScript\")"
		],
		"starterFn": [
			"1\nconst str = `[/* edit inside brackets only*/] = parsedURL`"
		],
		"url": "https://edabit.com/challenge/gMXdPQQbMdws8fTxC"
	},
	{
		"title": "Function Factory",
		"description": "<p><span>Create a function that takes a \"base number\" as an argument. This function should return another function which takes a new argument, and returns the sum of the \"base number\" and the new argument.</span></p><p><span>Please check the examples below for a clearer representation of the behavior expected.</span></p><h3><span>Examples</span></h3><pre><code>// Calling makePlusFunction(5) returns a new function that takes an input,\n// and returns the result when adding 5 to it.\n\nconst plusFive = makePlusFunction(5)\n\nplusFive(2) ➞ 7\n\nplusFive(-8) ➞ -3\n\n// Calling makePlusFunction(10) returns a new function that takes an input,\n// and returns the result when adding 10 to it.\n\nconst plusTen = makePlusFunction(10)\n\nplusTen(0) ➞ 10\n\nplusTen(188) ➞ 198\n\nplusFive(plusTen(0)) ➞ 15</code></pre><h3><span>Notes</span></h3><p><span>All inputs will be valid numbers.</span></p>",
		"publishedBy": "mbbentley",
		"publishedByUrl": "https://edabit.com/user/n5wubRfh6zh8QRymN",
		"language": "JavaScript",
		"tags": [
			"closures",
			"functional_programming",
			"higher_order_functions"
		],
		"tests": [
			"const plusTwo = makePlusFunction(2)",
			"const plusFive = makePlusFunction(5)",
			"const plusSeven = makePlusFunction(plusTwo(plusFive(0)))",
			"const plusTen = makePlusFunction(10)",
			"​",
			"Test.assertEquals(plusTwo(0), 2)",
			"Test.assertEquals(plusTwo(18), 20)",
			"Test.assertEquals(plusTwo(-1), 1)",
			"Test.assertEquals(plusFive(0), 5)",
			"Test.assertEquals(plusFive(12), 17)",
			"Test.assertEquals(plusFive(-5), 0)",
			"Test.assertEquals(plusSeven(0), 7)",
			"Test.assertEquals(plusSeven(41), 48)",
			"Test.assertEquals(plusSeven(-117), -110)",
			"Test.assertEquals(plusTen(0), 10)",
			"Test.assertEquals(plusTen(1), 11)",
			"Test.assertEquals(plusTen(-1), 9)",
			"Test.assertEquals(plusTwo(plusFive(plusSeven(plusTen(1)))), 25)",
			"​",
			"Test.assertEquals(makePlusFunction(8)(8), 16)",
			"Test.assertEquals(makePlusFunction(1)(100), 101)",
			"Test.assertEquals(makePlusFunction(-100)(0), -100)",
			"Test.assertEquals(makePlusFunction(0)(0), 0)"
		],
		"starterFn": [
			"1\nfunction makePlusFunction(baseNum) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ENWFBL4jbTgLbSqwS"
	},
	{
		"title": "Is the Word an Isogram?",
		"description": "<p><span>An isogram is a word that has no repeating letters, consecutive or nonconsecutive. Create a function that takes a string and returns either </span><code>true</code><span> or </span><code>false</code><span> depending on whether or not it's an \"isogram\".</span></p><h3><span>Examples</span></h3><pre><code>isIsogram(\"Algorism\") ➞ true\n\nisIsogram(\"PasSword\") ➞ false\n// Not case sensitive.\n\nisIsogram(\"Consecutive\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Ignore letter case (should not be case sensitive).</span></li><li><span>All test cases contain valid one word strings.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isIsogram(\"Algorism\"), true)",
			"Test.assertEquals(isIsogram(\"PasSword\"), false)",
			"Test.assertEquals(isIsogram(\"Dermatoglyphics\"), true)",
			"Test.assertEquals(isIsogram(\"Cat\"), true)",
			"Test.assertEquals(isIsogram(\"Filmography\"), true)",
			"Test.assertEquals(isIsogram(\"Consecutive\"), false)",
			"Test.assertEquals(isIsogram(\"Bankruptcies\"), true)",
			"Test.assertEquals(isIsogram(\"Unforgivable\"), true)",
			"Test.assertEquals(isIsogram(\"Unpredictably\"), true)",
			"Test.assertEquals(isIsogram(\"Moose\"), false)"
		],
		"starterFn": [
			"1\nfunction isIsogram(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rJPgai5r5XdXeQmLg"
	},
	{
		"title": "Apples and Bananas",
		"description": "<p><span>Write a function, </span><code>.vreplace()</code><span> that </span><strong><span>extends the String prototype</span></strong><span> by replacing all vowels in a string with a specified vowel.</span></p><h3><span>Examples</span></h3><pre><code>\"apples and bananas\".vreplace(\"u\") ➞ \"upplus und bununus\"\n\n\"cheese casserole\".vreplace(\"o\") ➞ \"chooso cossorolo\"\n\n\"stuffed jalapeno poppers\".vreplace(\"e\") ➞ \"steffed jelepene peppers\"</code></pre><h3><span>Notes</span></h3><p><span>Words will be lowercased.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(\"apples and bananas\".vreplace(\"u\"), \"upplus und bununus\")",
			"Test.assertEquals(\"cheese casserole\".vreplace(\"o\"), \"chooso cossorolo\")",
			"Test.assertEquals(\"stuffed jalapeno poppers\".vreplace(\"e\"), \"steffed jelepene peppers\")",
			"Test.assertEquals(\"shrimp tempura\".vreplace(\"a\"), \"shramp tampara\")",
			"Test.assertEquals(\"tuna sashimi\".vreplace(\"i\"), \"tini sishimi\")",
			"Test.assertEquals(\"chocolate cake\".vreplace(\"a\"), \"chacalata caka\")"
		],
		"starterFn": [
			"1\n/* fill in */ = function(vowel) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bhanrxz6EKfWR7ApR"
	},
	{
		"title": "Maskify the String",
		"description": "<p><span>Usually when you sign up for an account to buy something, your credit card number, phone number or answer to a secret question is partially obscured in some way. Since someone could look over your shoulder, you don't want that shown on your screen. Hence, the website masks these strings.</span></p><p><span>Your task is to create a function that takes a string, transforms all but the last four characters into \"#\" and returns the new masked string.</span></p><h3><span>Examples</span></h3><pre><code>maskify(\"4556364607935616\") ➞ \"############5616\"\n\nmaskify(\"64607935616\") ➞ \"#######5616\"\n\nmaskify(\"1\") ➞ \"1\"\n\nmaskify(\"\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The maskify function must accept a string of any length.</span></li><li><span>An empty string should return an empty string (fourth example above).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(maskify(\"4556364607935616\"), \"############5616\")",
			"Test.assertEquals(maskify(\"64607935616\"), \"#######5616\")",
			"Test.assertEquals(maskify(\"1\"), \"1\")",
			"Test.assertEquals(maskify(\"\"), \"\")",
			"Test.assertEquals(maskify(\"tBy>L/cMe+?<j:6n;C~H\"), \"################;C~H\")",
			"Test.assertEquals(maskify(\"12\"), \"12\")",
			"Test.assertEquals(maskify(\"8Ikhlf6yoxPOwi5cB014eWbRumj7vJ\"), \"##########################j7vJ\")",
			"Test.assertEquals(maskify(\"123\"), \"123\")",
			"Test.assertEquals(maskify(\")E$aCU=e\\\"_\"), \"######=e\\\"_\")",
			"Test.assertEquals(maskify(\"2673951408\"), \"######1408\")",
			"Test.assertEquals(maskify(\"1234\"), \"1234\")"
		],
		"starterFn": [
			"1\nfunction maskify(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/32mN4NsXypmqtuYkA"
	},
	{
		"title": "Basic E-Mail Validation",
		"description": "<p><span>Create a function that accepts a string, checks if it's a valid email address and returns either  </span><code>true</code><span> or </span><code>false</code><span>, depending on the evaluation.</span></p><ul><li><span>The string must contain an </span><code>@</code><span> character.</span></li><li><span>The string must contain a </span><code>.</code><span> character.</span></li><li><span>The </span><code>@</code><span> must have at least one character in front of it.</span><ul><li><span>e.g. </span><code>\"e@edabit.com\"</code><span> is valid while </span><code>\"@edabit.com\"</code><span> is invalid.</span></li></ul></li><li><span>The </span><code>.</code><span> and the </span><code>@</code><span> must be in the appropriate places.</span><ul><li><span>e.g. </span><code>\"hello.email@com\"</code><span> is invalid while </span><code>\"john.smith@email.com\"</code><span> is valid.</span></li></ul></li></ul><p><span>If the string passes these tests, it's considered a valid email address.</span></p><h3><span>Examples</span></h3><pre><code>validateEmail(\"@gmail.com\") ➞ false\n\nvalidateEmail(\"hello.gmail@com\") ➞ false\n\nvalidateEmail(\"gmail\") ➞ false\n\nvalidateEmail(\"hello@gmail\") ➞ false\n\nvalidateEmail(\"hello@edabit.com\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Check the </span><strong><span>Tests</span></strong><span> tab to see exactly what's being evaluated.</span></li><li><span>You can solve this challenge with RegEx, but it's intended to be solved with logic.</span></li><li><span>Solutions using RegEx will be accepted but frowned upon :(</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validateEmail('@edabit.com'), false)",
			"Test.assertEquals(validateEmail('@edabit'), false)",
			"Test.assertEquals(validateEmail('matt@edabit.com'), true)",
			"Test.assertEquals(validateEmail(''), false, \"Don't forget about empty strings!\")",
			"Test.assertEquals(validateEmail('hello.gmail@com'), false)",
			"Test.assertEquals(validateEmail('bill.gates@microsoft.com'), true)",
			"Test.assertEquals(validateEmail('hello@email'), false)",
			"Test.assertEquals(validateEmail('%^%$#%^%'), false)",
			"Test.assertEquals(validateEmail('www.email.com'), false)",
			"Test.assertEquals(validateEmail('email'), false)"
		],
		"starterFn": [
			"1\nfunction validateEmail(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8rC8cbEonMKbHeLTx"
	},
	{
		"title": "ATM PIN Code Validation",
		"description": "<p><span>ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits. Your task is to create a function that takes a string and returns </span><code>true</code><span> if the PIN is valid and </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>validatePIN(\"1234\") ➞ true\n\nvalidatePIN(\"12345\") ➞ false\n\nvalidatePIN(\"a234\") ➞ false\n\nvalidatePIN(\"\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Some test cases contain special characters.</span></li><li><span>Empty strings must return false.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"regex",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validatePIN(\"1234\"), true);",
			"Test.assertEquals(validatePIN(\"12345\"), false);",
			"Test.assertEquals(validatePIN(\"a234\"), false);",
			"Test.assertEquals(validatePIN(\"\"), false);",
			"Test.assertEquals(validatePIN(\"%234\"), false);",
			"Test.assertEquals(validatePIN(\"`234\"), false);",
			"Test.assertEquals(validatePIN(\"@234\"), false);",
			"Test.assertEquals(validatePIN(\"#234\"), false);",
			"Test.assertEquals(validatePIN(\"$234\"), false);",
			"Test.assertEquals(validatePIN(\"*234\"), false);",
			"Test.assertEquals(validatePIN(\"5678\"), true);",
			"Test.assertEquals(validatePIN(\"^234\"), false);",
			"Test.assertEquals(validatePIN(\"(234\"), false);",
			"Test.assertEquals(validatePIN(\")234\"), false);",
			"Test.assertEquals(validatePIN(\"123456\"), true);",
			"Test.assertEquals(validatePIN(\"-234\"), false);",
			"Test.assertEquals(validatePIN(\"_234\"), false);",
			"Test.assertEquals(validatePIN(\"+234\"), false);",
			"Test.assertEquals(validatePIN(\"=234\"), false);",
			"Test.assertEquals(validatePIN(\"?234\"), false);"
		],
		"starterFn": [
			"1\nfunction validatePIN(pin) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RhvdtEWHAMAqkdugn"
	},
	{
		"title": "Number to Reversed Array",
		"description": "<p><span>Create a function that takes a number and returns an array with the digits of the number in reverse order.</span></p><h3><span>Examples</span></h3><pre><code>reverseArr(1485979) ➞ [9, 7, 9, 5, 8, 4, 1]\n\nreverseArr(623478) ➞ [8, 7, 4, 3, 2, 6]\n\nreverseArr(12345) ➞ [5, 4, 3, 2, 1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Dan Barrick",
		"publishedByUrl": "https://edabit.com/user/jcPZ5ySXseCB7Ec3x",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(reverseArr(1485979), [9, 7, 9, 5, 8, 4, 1])",
			"Test.assertSimilar(reverseArr(623478), [8, 7, 4, 3, 2, 6])",
			"Test.assertSimilar(reverseArr(12345), [5, 4, 3, 2, 1])",
			"Test.assertSimilar(reverseArr(202069), [9, 6, 0, 2, 0, 2])"
		],
		"starterFn": [
			"1\nfunction reverseArr(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2nLTDz2yk4vW8Cnwv"
	},
	{
		"title": "Find NaN in an Array",
		"description": "<p><span>Create a function to find </span><code>NaN</code><span> in an array of numbers. The return value should be the index where </span><code>NaN</code><span> is found. If </span><code>NaN</code><span> is not found in the array, then return </span><code>-1</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>findNaN([1, 2, NaN]) ➞ 2\n\nfindNaN([NaN, 1, 2, 3, 4]) ➞ 0\n\nfindNaN([0, 1, 2, 3, 4]) ➞ -1</code></pre><h3><span>Notes</span></h3><p><span>Inputs are array of numbers.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(findNaN([1, 2, NaN, 3]), 2)",
			"Test.assertEquals(findNaN([1, 2, 3, NaN, 3, 4, 5, 3]), 3)",
			"Test.assertEquals(findNaN([1, 2, 3, 4 ,5]), -1)",
			"Test.assertEquals(findNaN([NaN, 2, 3, 4]), 0)",
			"Test.assertEquals(findNaN([1, 2, 3]), -1)"
		],
		"starterFn": [
			"1\nfunction findNaN(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zwPbeSJHoyiRT72h2"
	},
	{
		"title": "Remove the Special Characters from a String",
		"description": "<p><span>Create a function that takes a string, removes all \"special\" characters (e.g. </span><code>!, @, #, $, %, ^, &amp;, \\, *, (, )</code><span>) and returns the new string. The only non-alphanumeric characters allowed are dashes </span><code>-</code><span>, underscores </span><code>_</code><span> and spaces.</span></p><h3><span>Examples</span></h3><pre><code>removeSpecialCharacters(\"The quick brown fox!\") ➞ \"The quick brown fox\"\n\nremoveSpecialCharacters(\"%fd76$fd(-)6GvKlO.\") ➞ \"fd76fd-6GvKlO\"\n\nremoveSpecialCharacters(\"D0n$c sed 0di0 du1\") ➞ \"D0nc sed 0di0 du1\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeSpecialCharacters(\"The quick brown fox!\"), \"The quick brown fox\")",
			"Test.assertEquals(removeSpecialCharacters(\"%fd76$fd(-)6GvKlO.\"), \"fd76fd-6GvKlO\")",
			"Test.assertEquals(removeSpecialCharacters(\"D0n$c sed 0di0 du1\"), \"D0nc sed 0di0 du1\")",
			"Test.assertEquals(removeSpecialCharacters(\"cat_pic.jpeg\"), \"cat_picjpeg\")",
			"Test.assertEquals(removeSpecialCharacters(\"519-555-8093\"), \"519-555-8093\")",
			"Test.assertEquals(removeSpecialCharacters(\"h-d+=rf[]_{}<>.,`~!@#$%^&*(|)\"), \"h-drf_\")",
			"Test.assertEquals(removeSpecialCharacters(\"Etiam#!!!!!,,, [`po%rta ~sem!] {male*su-ada} (ma*gna) mo^llis... eui$smod???\"), \"Etiam porta sem malesu-ada magna mollis euismod\")"
		],
		"starterFn": [
			"1\nfunction removeSpecialCharacters(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/k7CwrsKPHrEL8h4z6"
	},
	{
		"title": "Get the Date",
		"description": "<p><span>Write a function that, given a date (in the format </span><em><span>MM/DD/YYYY</span></em><span>), returns the day of the week as a string. Each day name must be one of the following strings: \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", or \"Saturday\".</span></p><p><span>To illustrate, the day of the week for </span><code>\"12/07/2016\"</code><span> is </span><code>\"Wednesday\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>getDay(\"12/07/2016\") ➞ \"Wednesday\"\n\ngetDay(\"09/04/2016\") ➞ \"Sunday\"\n\ngetDay(\"12/08/2011\") ➞ \"Thursday\"</code></pre><h3><span>Notes</span></h3><p><span>This challenge assumes the week starts on Sunday.</span></p>",
		"publishedBy": "DreamArdor",
		"publishedByUrl": "https://edabit.com/user/PAzNgJF54C2mYPkR9",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(getDay('12/07/2016'), 'Wednesday')",
			"Test.assertEquals(getDay('12/08/2011'), 'Thursday')",
			"Test.assertEquals(getDay('09/04/2016'), 'Sunday')",
			"Test.assertEquals(getDay('06/08/2012'), 'Friday')",
			"Test.assertEquals(getDay('08/13/2019'), 'Tuesday')"
		],
		"starterFn": [
			"1\nfunction getDay(day) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/K8FPxyGNDXhWQD9jX"
	},
	{
		"title": "Fractions and Rounding",
		"description": "<p><span>Given a fraction </span><code>frac</code><span> (given in the format \"1/2\" for example) and </span><code>n</code><span> number of decimal places, return a sentence in the following format:</span></p><p><strong><span>\"{fraction} rounded to {n} decimal places is {answer}\"</span></strong></p><h3><span>Examples</span></h3><pre><code>fracRound(\"1/3\", 5) ➞ \"1/3 rounded to 5 decimal places is 0.33333\"\n\nfracRound(\"2/8\", 4) ➞ \"2/8 rounded to 4 decimal places is 0.2500\"\n\nfracRound(\"22/7\", 2) ➞ \"22/7 rounded to 2 decimal places is 3.14\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Add trailing zeros if </span><code>n</code><span> is greater than the actual number of decimal places the fraction has (see example </span><span>#</span><span>2).</span></li><li><span>Numbers greater than one may be given as top-heavy fractions (no mixed numbers).</span></li><li><code>n</code><span> won't be 1 because that would cause </span><em><span>\"decimal places\"</span></em><span> to be </span><em><span>\"decimal place\"</span></em><span>, making the challenge more cumbersome than it needs to be.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fracRound(\"1/3\", 5), \"1/3 rounded to 5 decimal places is 0.33333\")",
			"Test.assertEquals(fracRound(\"2/8\", 4), \"2/8 rounded to 4 decimal places is 0.2500\")",
			"Test.assertEquals(fracRound(\"22/7\", 2), \"22/7 rounded to 2 decimal places is 3.14\")",
			"Test.assertEquals(fracRound(\"23/2\", 2), \"23/2 rounded to 2 decimal places is 11.50\")",
			"Test.assertEquals(fracRound(\"40/77\", 3), \"40/77 rounded to 3 decimal places is 0.519\")",
			"Test.assertEquals(fracRound(\"15/58\", 3), \"15/58 rounded to 3 decimal places is 0.259\")",
			"Test.assertEquals(fracRound(\"2/92\", 2), \"2/92 rounded to 2 decimal places is 0.02\")",
			"Test.assertEquals(fracRound(\"21/65\", 6), \"21/65 rounded to 6 decimal places is 0.323077\")",
			"Test.assertEquals(fracRound(\"29/40\", 3), \"29/40 rounded to 3 decimal places is 0.725\")",
			"Test.assertEquals(fracRound(\"49/38\", 6), \"49/38 rounded to 6 decimal places is 1.289474\")",
			"Test.assertEquals(fracRound(\"20/69\", 3), \"20/69 rounded to 3 decimal places is 0.290\")",
			"Test.assertEquals(fracRound(\"17/46\", 6), \"17/46 rounded to 6 decimal places is 0.369565\")",
			"Test.assertEquals(fracRound(\"46/28\", 4), \"46/28 rounded to 4 decimal places is 1.6429\")",
			"Test.assertEquals(fracRound(\"12/89\", 3), \"12/89 rounded to 3 decimal places is 0.135\")",
			"Test.assertEquals(fracRound(\"9/76\", 7), \"9/76 rounded to 7 decimal places is 0.1184211\")",
			"Test.assertEquals(fracRound(\"20/64\", 4), \"20/64 rounded to 4 decimal places is 0.3125\")",
			"Test.assertEquals(fracRound(\"28/77\", 7), \"28/77 rounded to 7 decimal places is 0.3636364\")",
			"Test.assertEquals(fracRound(\"17/52\", 4), \"17/52 rounded to 4 decimal places is 0.3269\")",
			"Test.assertEquals(fracRound(\"21/98\", 6), \"21/98 rounded to 6 decimal places is 0.214286\")",
			"Test.assertEquals(fracRound(\"49/61\", 4), \"49/61 rounded to 4 decimal places is 0.8033\")",
			"Test.assertEquals(fracRound(\"28/62\", 3), \"28/62 rounded to 3 decimal places is 0.452\")",
			"Test.assertEquals(fracRound(\"17/36\", 3), \"17/36 rounded to 3 decimal places is 0.472\")",
			"Test.assertEquals(fracRound(\"8/41\", 2), \"8/41 rounded to 2 decimal places is 0.20\")",
			"Test.assertEquals(fracRound(\"50/37\", 7), \"50/37 rounded to 7 decimal places is 1.3513514\")",
			"Test.assertEquals(fracRound(\"21/41\", 3), \"21/41 rounded to 3 decimal places is 0.512\")",
			"Test.assertEquals(fracRound(\"28/47\", 6), \"28/47 rounded to 6 decimal places is 0.595745\")"
		],
		"starterFn": [
			"1\nfunction fracRound(frac, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/e9oMvkS7Fb72kSehT"
	},
	{
		"title": "Return the End Letters of Numbers",
		"description": "<p><span>Create a function that takes an integer and returns it as an </span><strong><span>ordinal number</span></strong><span>. An Ordinal Number is a number that tells the position of something in a list, such as 1st, 2nd, 3rd, 4th, 5th, etc.</span></p><h3><span>Examples</span></h3><pre><code>returnEndOfNumber(553) ➞ \"553-RD\"\n\nreturnEndOfNumber(34) ➞ \"34-TH\"\n\nreturnEndOfNumber(1231) ➞ \"1231-ST\"\n\nreturnEndOfNumber(22) ➞ \"22-ND\"\n\nreturnEndOfNumber(412) ➞ \"412-TH\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on </span><em><span>ordinal numbers</span></em><span>.</span></p>",
		"publishedBy": "Alon",
		"publishedByUrl": "https://edabit.com/user/Q69qbJ2JtmQFkMXqz",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(returnEndOfNumber(334), \"334-TH\")",
			"Test.assertEquals(returnEndOfNumber(12341), \"12341-ST\")",
			"Test.assertEquals(returnEndOfNumber(1), \"1-ST\")",
			"Test.assertEquals(returnEndOfNumber(3222), \"3222-ND\")",
			"Test.assertEquals(returnEndOfNumber(563), \"563-RD\")",
			"Test.assertEquals(returnEndOfNumber(412), \"412-TH\")",
			"Test.assertEquals(returnEndOfNumber(711), \"711-TH\")",
			"Test.assertEquals(returnEndOfNumber(213), \"213-TH\")"
		],
		"starterFn": [
			"1\nfunction returnEndOfNumber(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MEgXcp8cj3vNvD42v"
	},
	{
		"title": "Find Unique Positive Numbers from Array",
		"description": "<p><span>Write a function that takes an array and returns a new array with unique positive (more than 0) numbers.</span></p><h3><span>Examples</span></h3><pre><code>uniqueArr([-5, 1, -7, -5, -2, 3, 3, -5, -1, -1]) ➞ [1, 3]\n\nuniqueArr([3, -3, -3, 5, 5, -6, -2, -4, -1, 3]) ➞ [3, 5]\n\nuniqueArr([10, 6, -12, 13, 5, 5, 13, 6, 5]) ➞ [10, 6, 13, 5]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return the elements in the order that they are found in the array.</span></li><li><span>Your function should also work for empty arrays.</span></li></ul>",
		"publishedBy": "Stanislav Mozolevskiy",
		"publishedByUrl": "https://edabit.com/user/M3z4ZPgywPqX9eoS4",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(uniqueArr([-5, 1, -7, -5, -2, 3, 3, -5, -1, -1]), [1, 3])",
			"Test.assertSimilar(uniqueArr([3, -3, -3, 5, 5, -6, -2, -4, -1, 3]), [3, 5])",
			"Test.assertSimilar(uniqueArr([-5, 3, 2, -4, 3, -1, -7, 2, 4, 4]), [3, 2, 4])",
			"Test.assertSimilar(uniqueArr([3, -5, 0, -5, 2, -1, 0, -4, -6, 1]), [3, 2, 1])",
			"Test.assertSimilar(uniqueArr([10, 6, -12, 13, 5, 5, 13, 6, 5]), [10, 6, 13, 5])",
			"Test.assertSimilar(uniqueArr([5, 10, -12, 5, 9, 5, 10, 9, 10, -12]), [5, 10, 9])",
			"Test.assertSimilar(uniqueArr([]), [])"
		],
		"starterFn": [
			"1\nfunction uniqueArr(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Fx2NdxGzayHpfu8pS"
	},
	{
		"title": "Position in the Alphabet",
		"description": "<p><span>Given a number </span><em><span>between 1-26</span></em><span>, return what letter is at </span><em><span>that position</span></em><span> in the alphabet. Return </span><code>\"invalid\"</code><span> if the number given is not within that range, or isn't an integer.</span></p><h3><span>Examples</span></h3><pre><code>letterAtPosition(1) ➞ \"a\"\n\nletterAtPosition(26.0) ➞ \"z\"\n\nletterAtPosition(0) ➞ \"invalid\"\n\nletterAtPosition(4.5) ➞ \"invalid\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Return a lowercase letter.</span></li><li><span>Numbers that end with </span><code>\".0\"</code><span> are valid.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(letterAtPosition(1), \"a\")",
			"Test.assertEquals(letterAtPosition(2), \"b\")",
			"Test.assertEquals(letterAtPosition(3), \"c\")",
			"Test.assertEquals(letterAtPosition(4), \"d\")",
			"Test.assertEquals(letterAtPosition(5), \"e\")",
			"Test.assertEquals(letterAtPosition(6), \"f\")",
			"Test.assertEquals(letterAtPosition(7), \"g\")",
			"Test.assertEquals(letterAtPosition(8), \"h\")",
			"Test.assertEquals(letterAtPosition(9), \"i\")",
			"Test.assertEquals(letterAtPosition(10), \"j\")",
			"Test.assertEquals(letterAtPosition(11), \"k\")",
			"Test.assertEquals(letterAtPosition(12), \"l\")",
			"Test.assertEquals(letterAtPosition(13), \"m\")",
			"Test.assertEquals(letterAtPosition(14), \"n\")",
			"Test.assertEquals(letterAtPosition(15), \"o\")",
			"Test.assertEquals(letterAtPosition(16), \"p\")",
			"Test.assertEquals(letterAtPosition(17), \"q\")",
			"Test.assertEquals(letterAtPosition(18), \"r\")",
			"Test.assertEquals(letterAtPosition(19), \"s\")",
			"Test.assertEquals(letterAtPosition(20), \"t\")",
			"Test.assertEquals(letterAtPosition(21), \"u\")",
			"Test.assertEquals(letterAtPosition(22), \"v\")",
			"Test.assertEquals(letterAtPosition(23), \"w\")",
			"Test.assertEquals(letterAtPosition(24), \"x\")",
			"Test.assertEquals(letterAtPosition(25), \"y\")",
			"Test.assertEquals(letterAtPosition(26), \"z\")"
		],
		"starterFn": [
			"1\nfunction letterAtPosition(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nSYREMMMz239AoKxX"
	},
	{
		"title": "Is the Phone Number Formatted Correctly?",
		"description": "<p><span>Create a function that accepts a string and returns </span><code>true</code><span> if it's in the format of a proper phone number and </span><code>false</code><span> if it's not. Assume any number between 0-9 (in the appropriate spots) will produce a valid phone number.</span></p><p><span>This is what a valid phone number looks like:</span></p><pre><code>(123) 456-7890</code></pre><h3><span>Examples</span></h3><pre><code>isValidPhoneNumber(\"(123) 456-7890\") ➞ true\n\nisValidPhoneNumber(\"1111)555 2345\") ➞ false\n\nisValidPhoneNumber(\"098) 123 4567\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Don't forget the space after the closing parentheses.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isValidPhoneNumber(\"(123) 456-7890\"), true)",
			"Test.assertEquals(isValidPhoneNumber(\"(1111)555 2345\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(098) 123 4567\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(123)456-7890\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"abc(123)456-7890\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(123)456-7890abc\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"abc(123)456-7890abc\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"abc(123) 456-7890\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(123) 456-7890abc\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"abc(123) 456-7890abc\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(123)-456-7890\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(123)_456-7890\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"-123) 456-7890\"), false)",
			"Test.assertEquals(isValidPhoneNumber(\"(519) 505-6498\"), true)"
		],
		"starterFn": [
			"1\nfunction isValidPhoneNumber(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nHaKL55KwW3XaGrAw"
	},
	{
		"title": "Same ASCII?",
		"description": "<p><span>Return </span><code>true</code><span> if the sum of ASCII values of the first string is same as the sum of ASCII values of the second string, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>sameAscii(\"a\", \"a\") ➞ true\n\nsameAscii(\"AA\", \"B@\") ➞ true\n\nsameAscii(\"EdAbIt\", \"EDABIT\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>If you need some help with ASCII codes, check the </span><strong><span>Resources</span></strong><span> tab for an image of all ASCII codes used in this challenge.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sameAscii(\"a\", \"a\"), true)",
			"Test.assertEquals(sameAscii(\"A\", \"a\"), false)",
			"Test.assertEquals(sameAscii(\"!\", \"g\"), false)",
			"Test.assertEquals(sameAscii(\"aAAAaaAA\", \"~~~aa,\"), true)",
			"Test.assertEquals(sameAscii(\"aUGSIGHIhiSJGijs\", \"~~~~~~~~~FF,\"), false)",
			"Test.assertEquals(sameAscii(\"~~Tga2\", \"{}[]()I\"), true)"
		],
		"starterFn": [
			"1\nfunction sameAscii(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/y6TD7s63sm9RwByLY"
	},
	{
		"title": "RegEx: Character Classes XII⁠I - hexidecimals",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh,</code></pre><p><span>You might get text that looks like it's all English characters but it very well may not be:</span></p><pre><code>pànts !== pants</code></pre><p><span>To ensure that you only get the characters you want in a string you will need to use the character classes that accept </span><strong><span>hexadecimal</span></strong><span> digits.</span></p><p><span>Create a </span><strong><span>regex</span></strong><span> that matches the word \"edabit\". You cannot use character classes </span><code>\\w</code><span>, </span><code>\\d</code><span>, </span><code>[]</code><span>, or </span><code>.</code><span> to solve.</span></p><h3><span>Notes</span></h3><p><span>Use the handy text to hex converter tool in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"validation"
		],
		"tests": [
			"const str = \"edabit\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(/[edabit]|\\\\t|\\\\T\\\\w|\\\\W|\\\\d|\\\\S|\\\\D|\\[|\\]|\\.|\\\\c/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     console.log(str.match(REGEXP))",
			"     return str.match(REGEXP)[0] === \"edabit\"",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str), \"invalid\", \"You cannot use letters or any restricted character class in your expression.\")",
			"Test.assertEquals(testExp(str), true)"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/fdDprqnJyvFb2QLsu"
	},
	{
		"title": "International Greetings",
		"description": "<p><span>Suppose you have a </span><strong><span>guest list</span></strong><span> of students and the country they are from, stored as key-value pairs in an object.</span></p><pre><code>const GUEST_LIST = {\n  Randy: \"Germany\",\n  Karla: \"France\",\n  Wendy: \"Japan\",\n  Norman: \"England\",\n  Sam: \"Argentina\"\n}</code></pre><p><span>Write a function that takes in a name and returns a </span><strong><span>name tag</span></strong><span>, that should read:</span></p><pre><code>\"Hi! I'm [name], and I'm from [country].\"</code></pre><p><span>If the name is not in the object, return:</span></p><pre><code>\"Hi! I'm a guest.\"</code></pre><h3><span>Examples</span></h3><pre><code>greeting(\"Randy\") ➞ \"Hi! I'm Randy, and I'm from Germany.\"\n\ngreeting(\"Sam\") ➞ \"Hi! I'm Sam, and I'm from Argentina.\"\n\ngreeting(\"Monti\") ➞ \"Hi! I'm a guest.\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"objects"
		],
		"tests": [
			"Test.assertEquals(greeting(\"Randy\"), \"Hi! I'm Randy, and I'm from Germany.\")",
			"Test.assertEquals(greeting(\"Sam\"), \"Hi! I'm Sam, and I'm from Argentina.\")",
			"Test.assertEquals(greeting(\"Monti\"), \"Hi! I'm a guest.\")",
			"Test.assertEquals(greeting(\"Trudy\"), \"Hi! I'm a guest.\")",
			"Test.assertEquals(greeting(\"Wendy\"), \"Hi! I'm Wendy, and I'm from Japan.\")"
		],
		"starterFn": [
			"1\nconst GUEST_LIST = {",
			"2\n  Randy: \"Germany\",",
			"3\n  Karla: \"France\",",
			"4\n  Wendy: \"Japan\",",
			"5\n  Norman: \"England\",",
			"6\n  Sam: \"Argentina\"",
			"7\n}",
			"8\n​",
			"9\nfunction greeting(name) {",
			"10\n  ",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/83sWemMhpG6pScXKp"
	},
	{
		"title": "Find the Bugs: Returning Valid Prices",
		"description": "<p><span>There has been a masterdata issue which affected the prices of the products. All prices need to be checked if they are a valid number and zero or higher (&gt;= 0). Products with a price of 0 are free and is a valid price.</span></p><p><span>The return value should be a Boolean.</span></p><h3><span>Examples</span></h3><pre><code>hasValidPrice({ \"product\": \"Milk\", price: 1.50 }) ➞ true\n\nhasValidPrice({ \"product\": \"Cheese\", price: -1 }) ➞ false\n\nhasValidPrice({ \"product\": \"Eggs\", price: 0 }) ➞ true\n\nhasValidPrice({ \"product\": \"Cerials\", price: '3.0' }) ➞ false\n\nhasValidPrice() ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Run the tests first to see the results before making changes and understand why eggs is returning 0 and flour is returning undefined.</span></p><p><strong><span>Why is eggs 0?</span></strong></p><p><span>.denruter si 0 erofereht os ,</span><code>ecirp.tcudorp</code><span> ta eulav yslaf a si 0 .noitidnoc tsal eht ro noitidnoc yslaf tsal eht fo tluser eht si eulav denruter eht ,&amp;&amp; hguorht snoitidnoc gnigrem nehW (</span><a target=\"_blank\" href=\"https://www.textreverse.com\"><span>https://www.textreverse.com</span></a><span>)</span></p><p><strong><span>Why is flour undefined?</span></strong></p><p><span>.denruter si denifednu erofereht os ,denifednu si </span><code>ecirp.tcudorp</code><span> .noitidnoc tsal eht ro noitidnoc yslaf tsal eht fo tluser eht si eulav denruter eht ,&amp;&amp; hguorht snoitidnoc gnigrem nehw ,ereh emaS (</span><a target=\"_blank\" href=\"https://www.textreverse.com\"><span>https://www.textreverse.com</span></a><span>)</span></p>",
		"publishedBy": "Allard",
		"publishedByUrl": "https://edabit.com/user/d2oMpeLcNGNtnab8n",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"conditions",
			"control_flow",
			"logic"
		],
		"tests": [
			"Test.assertEquals(hasValidPrice({ \"product\": \"Milk\", price: 1.50 }), true)",
			"Test.assertEquals(hasValidPrice({ \"product\": \"Cheese\", price: -1 }), false)",
			"Test.assertEquals(hasValidPrice({ \"product\": \"Eggs\", price: 0 }), true)",
			"Test.assertEquals(hasValidPrice({ \"product\": \"Flour\" }), false)",
			"Test.assertEquals(hasValidPrice({ \"product\": \"Cerials\", price: '3.0' }), false)",
			"Test.assertEquals(hasValidPrice({ \"product\": \"Beer\", price: NaN }), false)",
			"Test.assertEquals(hasValidPrice(), false)"
		],
		"starterFn": [
			"1\nfunction hasValidPrice(product) {",
			"2\n  return (product && product.price && product.price >= 0)",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nQx5XHtWurbGrFJww"
	},
	{
		"title": "Numbered Alphabet",
		"description": "<p><span>Create a function that converts a string of letters to their respective number in the alphabet.</span></p><table><thead><tr><th><span>A</span></th><th><span>B</span></th><th><span>C</span></th><th><span>D</span></th><th><span>E</span></th><th><span>F</span></th><th><span>G</span></th><th><span>H</span></th><th><span>I</span></th><th><span>J</span></th><th><span>K</span></th><th><span>L</span></th><th><span>M</span></th><th><span>N</span></th><th><span>O</span></th><th><span>P</span></th><th><span>Q</span></th><th><span>R</span></th><th><span>S</span></th><th><span>T</span></th><th><span>U</span></th><th><span>V</span></th><th><span>W</span></th><th><span>...</span></th></tr></thead><tbody><tr><td><span>0</span></td><td><span>1</span></td><td><span>2</span></td><td><span>3</span></td><td><span>4</span></td><td><span>5</span></td><td><span>6</span></td><td><span>7</span></td><td><span>8</span></td><td><span>9</span></td><td><span>10</span></td><td><span>11</span></td><td><span>12</span></td><td><span>13</span></td><td><span>14</span></td><td><span>15</span></td><td><span>16</span></td><td><span>17</span></td><td><span>18</span></td><td><span>19</span></td><td><span>20</span></td><td><span>21</span></td><td><span>22</span></td><td><span>...</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>alphNum(\"XYZ\") ➞ \"23 24 25\"\n\nalphNum(\"ABCDEF\") ➞ \"0 1 2 3 4 5\"\n\nalphNum(\"JAVASCRIPT\") ➞ \"9 0 21 0 18 2 17 8 15 19\"</code></pre><h3><span>Notes</span></h3><p><span>Make sure the numbers are spaced.</span></p>",
		"publishedBy": "ArcherHume",
		"publishedByUrl": "https://edabit.com/user/wQ25xzXqh4y3A8NBB",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(alphNum(\"ABCD\"), \"0 1 2 3\")",
			"Test.assertEquals(alphNum(\"BCDA\"), \"1 2 3 0\")",
			"Test.assertEquals(alphNum(\"AAA\"), \"0 0 0\")",
			"Test.assertEquals(alphNum(\"XYZ\"), \"23 24 25\")"
		],
		"starterFn": [
			"1\nfunction alphNum(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/i3b97FrfXT5mr9Lnx"
	},
	{
		"title": "The Fizz Buzz Test",
		"description": "<p><span>Write a method that returns  array of all the numbers from 1 to an integer argument. But for multiples of three use “Fizz” instead of the number and for the multiples of five use “Buzz”. For numbers which are multiples of both three and five use “FizzBuzz”.</span></p><h3><span>Example</span></h3><pre><code>fizzBuzz(10) ➞ [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\"]\n\nfizzBuzz(15) ➞ [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]</code></pre><h3><span>Notes</span></h3><p><span>Make sure to </span><code>return</code><span> array.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic"
		],
		"tests": [
			"Test.assertSimilar(fizzBuzz(10), [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz'])",
			"Test.assertSimilar(fizzBuzz(15), [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz'])",
			"Test.assertSimilar(fizzBuzz(100), [1, 2, 'Fizz', 4, 'Buzz', 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz', 16, 17, 'Fizz', 19, 'Buzz', 'Fizz', 22, 23, 'Fizz', 'Buzz', 26, 'Fizz', 28, 29, 'FizzBuzz', 31, 32, 'Fizz', 34, 'Buzz', 'Fizz', 37, 38, 'Fizz', 'Buzz', 41, 'Fizz', 43, 44, 'FizzBuzz', 46, 47, 'Fizz', 49, 'Buzz', 'Fizz', 52, 53, 'Fizz', 'Buzz', 56, 'Fizz', 58, 59, 'FizzBuzz', 61, 62, 'Fizz', 64, 'Buzz', 'Fizz', 67, 68, 'Fizz', 'Buzz', 71, 'Fizz', 73, 74, 'FizzBuzz', 76, 77, 'Fizz', 79, 'Buzz', 'Fizz', 82, 83, 'Fizz', 'Buzz', 86, 'Fizz', 88, 89, 'FizzBuzz', 91, 92, 'Fizz', 94, 'Buzz', 'Fizz', 97, 98, 'Fizz', 'Buzz'])",
			"​",
			"// Translated from Python.",
			"// The problem was originally posted by Akshat Adsule."
		],
		"starterFn": [
			"1\nfunction fizzBuzz(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cKQA9N9Yg7ExeWusQ"
	},
	{
		"title": "Magic Date",
		"description": "<p><span>You are to read each part of the date into its own integer type variable. The year should be a 4 digit number. You can assume the user enters a correct date formatted </span><strong><span>d m yyyy</span></strong><span> (no error checking required).</span></p><p><span>Determine whether the entered date is a </span><em><span>magic date</span></em><span>. Here are the rules for a magic date:</span></p><ul><li><code>mm * dd</code><span> is a 1-digit number that matches the last digit of </span><code>yyyy</code><span> </span><em><span>or</span></em></li><li><code>mm * dd</code><span> is a 2-digit number that matches the last 2 digits of </span><code>yyyy</code><span> </span><em><span>or</span></em></li><li><code>mm * dd</code><span> is a 3-digit number that matches the last 3 digits of </span><code>yyyy</code></li></ul><p><span>The program should then display </span><code>true</code><span> if the date is magic, or </span><code>false</code><span> if it is not.</span></p><h3><span>Examples</span></h3><pre><code>Magic(\"1 1 2011\") ➞ true\n\nMagic(\"4 1 2001\") ➞ false\n\nMagic(\"5 2 2010\") ➞ true\n\nMagic(\"9 2 2011\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Nabeel Mumtaz",
		"publishedByUrl": "https://edabit.com/user/8wFyDvkPiDdKRDExt",
		"language": "JavaScript",
		"tags": [
			"dates",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(Magic('1 1 2011'), true, 'magic date')",
			"Test.assertEquals(Magic('4 1 2001'), false, 'is not a magic date')",
			"Test.assertEquals(Magic('2 4 2008'), true, 'magic date')",
			"Test.assertEquals(Magic('3 3 2009'), true, 'magic date')",
			"Test.assertEquals(Magic('5 2 2010'), true, 'magic date')",
			"Test.assertEquals(Magic('1 2 2011'), false, 'is not a magic date')",
			"Test.assertEquals(Magic('9 2 2011'), false, 'is not a magic date')",
			"Test.assertEquals(Magic('1 4 2011'), false, 'is not a magic date')"
		],
		"starterFn": [
			"1\nfunction Magic(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/x6bADPfDJPMYyzpBa"
	},
	{
		"title": "ES6: Destructuring Objects IV",
		"description": "<pre><code>const obj =  { first: \"James\", last: \"Baker\", alias: \"JB\"  }\n\nvar { first = \"John\", last = \"Doe\", alias } = obj\n\nconsole.log(nickname) // outputs nickname is not defined</code></pre><p><span>There may be times where we would like the property name to be different from the object property names we receive and also give those new property names a default value. Use ES6 object destructuring to rename the variable </span><code>alias</code><span> to </span><code>nickname</code><span> and give </span><code>nickname</code><span> a default value of \"JD\". Ignore the </span><code>.toString()</code><span> function (used for validation).</span></p><h3><span>Notes</span></h3><p><span>Use </span><strong><span>double</span></strong><span> quotes for \"JD\"\nIf you know how to use object destructuring, go ahead and complete this challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab for some examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"const validString = (str) => {",
			"  return /\\{.*alias.*\\:.*nickname.*\\=.*\\\"JD\\\".*\\}/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			"  ",
			"Test.assertEquals(validString(str), \"valid\", \"You must rename alias to nickname and give it a default value of JD\")",
			"Test.assertEquals(first, \"James\", \"The variable first does not equal James\")",
			"Test.assertEquals(last, \"Baker\", \"The variable last does not equal Baker\")",
			"Test.assertEquals(nickname, \"JD\", \"The variable nickname does not equal JD\")"
		],
		"starterFn": [
			"1\nconst str = `({ first = \"John\", last = \"Doe\", alias } = { first: \"James\", last: \"Baker\" }).toString()`"
		],
		"url": "https://edabit.com/challenge/JQRbpfn6WpEksA2tu"
	},
	{
		"title": "Check If Lines Are Parallel",
		"description": "<p><span>Given two lines, determine whether or not they are parallel.</span></p><p><span>Lines are represented by an array </span><code>[a, b, c]</code><span>, which corresponds to the line </span><code>ax+by=c</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>linesAreParallel([1, 2, 3], [1, 2, 4]) ➞ true\n// x+2y=3 and x+2y=4 are parallel.\n\nlinesAreParallel([2, 4, 1], [4, 2, 1]) ➞ false\n// 2x+4y=1 and 4x+2y=1 are not parallel.\n\nlinesAreParallel([0, 1, 5], [0, 1, 5]) ➞ true\n// Lines are parallel to themselves.</code></pre><h3><span>Notes</span></h3><ul><li><span>Two lines are parallels if they have the same slope and the y-intercepts are different. If the slopes are different, the lines are not parallel.</span></li><li><span>All test cases use valid input (no lists of the wrong size, for example).</span></li><li><span>All coefficients will be integers (whole numbers).</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(linesAreParallel([1,2,3], [1,2,4]), true, \"Given example 1.\")",
			"Test.assertEquals(linesAreParallel([2,4,1], [4,2,1]), false, \"Given example 2.\")",
			"Test.assertEquals(linesAreParallel([0,1,5], [0,1,5]), true, \"Given example 3.\")",
			"Test.assertEquals(linesAreParallel([2,5,0], [20,50,10]), true)",
			"Test.assertEquals(linesAreParallel([2,5,0], [-200,-500,10]), true)",
			"Test.assertEquals(linesAreParallel([400000,1,0], [400000,2,0]), false)",
			"Test.assertEquals(linesAreParallel([800,20,0], [40,20,0]), false)",
			"Test.assertEquals(linesAreParallel([400000,1,0], [800000,2,100000]), true)",
			"Test.assertEquals(linesAreParallel([-5,7,100000], [5,-7,-200000]), true)"
		],
		"starterFn": [
			"1\nfunction linesAreParallel(l1, l2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rpmQpjzxo4rnBhrca"
	},
	{
		"title": "Distance Between Two Points",
		"description": "<p><span>In this challenge, you have to find the distance between two points placed on a Cartesian plane. Knowing the coordinates of both the points, you have to apply the </span><strong><span>Pythagorean theorem</span></strong><span> to find the distance between them.</span></p><p><img alt=\"Two points on a Cartesian plane\" src=\"https://edabit-challenges.s3.amazonaws.com/coordinateplane26.png\"></p><p><span>Given two object literals </span><code>a</code><span> and </span><code>b</code><span> being the two points coordinates (</span><strong><span>x</span></strong><span> and </span><strong><span>y</span></strong><span>), implement a function that returns the distance between the points, rounded to the nearest thousandth.</span></p><h3><span>Examples</span></h3><pre><code>getDistance({x: -2, y: 1}, {x: 4, y: 3}) ➞ 6.325\n\ngetDistance({x: 0, y: 0}, {x: 1, y: 1}) ➞ 1.414\n\ngetDistance({x: 10, y: -5}, {x: 8, y: 16}) ➞ 21.095</code></pre><h3><span>Notes</span></h3><ul><li><span>Take a look at the </span><strong><span>Resources</span></strong><span> tab if you need a refresher on the geometry related to this challenge.</span></li><li><span>The \"distance\" is the shortest distance between the two points, or the straight line generated from </span><code>a</code><span> to </span><code>b</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(getDistance({x: -2, y: 1}, {x: 4, y: 3}), 6.325, \"Example #1\")",
			"Test.assertEquals(getDistance({x: 0, y: 0}, {x: 1, y: 1}), 1.414, \"Example #2\")",
			"Test.assertEquals(getDistance({x: 10, y: -5}, {x: 8, y: 16}), 21.095, \"Example #3\")",
			"Test.assertEquals(getDistance({x: 4, y: 3}, {x: 3, y: -2}), 5.099)",
			"Test.assertEquals(getDistance({x: -1, y: -1}, {x: 10, y: 10}), 15.556)",
			"Test.assertEquals(getDistance({x: 100, y: 100}, {x: 100, y: 100}), 0)",
			"Test.assertEquals(getDistance({x: 14239, y: -11222}, {x: -12301, y: 12888}), 35856.153)"
		],
		"starterFn": [
			"1\nfunction getDistance(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/caeSeQ3K53GMQKenX"
	},
	{
		"title": "In the Centre?",
		"description": "<p><span>Given a string containing mostly spaces and </span><em><span>one</span></em><span> non-space character, return whether the character is positioned in the very centre of the string. This means the number of spaces on both sides </span><strong><span>should be the same</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>isCentral(\"  #  \") ➞ true\n\nisCentral(\" 2    \") ➞ false\n\nisCentral(\"@\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Only one character other than spaces will be given at a time.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isCentral('  #  '), true)",
			"Test.assertEquals(isCentral(' 2    '), false)",
			"Test.assertEquals(isCentral('@'), true)",
			"Test.assertEquals(isCentral(' 1'), false)",
			"Test.assertEquals(isCentral('7 '), false)",
			"Test.assertEquals(isCentral('  l '), false)",
			"Test.assertEquals(isCentral(' a  '), false)",
			"Test.assertEquals(isCentral('    G    '), true)",
			"Test.assertEquals(isCentral('        %        '), true)"
		],
		"starterFn": [
			"1\nfunction isCentral(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EatpBWKGDGvntrMmo"
	},
	{
		"title": "Automorphic Numbers",
		"description": "<p><span>A number </span><code>n</code><span> is automorphic if </span><code>n^2</code><span> ends in </span><code>n</code><span>.</span></p><p><span>For example: n=5, n^2=2</span><strong><span>5</span></strong></p><p><span>Create a function that takes a number and returns </span><code>true</code><span> if the number is automorphic, </span><code>false</code><span> if it isn't.</span></p><h3><span>Examples</span></h3><pre><code>isAutomorphic(5) ➞ true\n\nisAutomorphic(8) ➞ false\n\nisAutomorphic(76) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isAutomorphic(0), true)",
			"Test.assertEquals(isAutomorphic(1), true)",
			"Test.assertEquals(isAutomorphic(5), true)",
			"Test.assertEquals(isAutomorphic(6), true)",
			"Test.assertEquals(isAutomorphic(25), true)",
			"Test.assertEquals(isAutomorphic(76), true)",
			"Test.assertEquals(isAutomorphic(7109376), true)",
			"Test.assertEquals(isAutomorphic(36), false)",
			"Test.assertEquals(isAutomorphic(100), false)",
			"Test.assertEquals(isAutomorphic(11), false)",
			"Test.assertEquals(isAutomorphic(6025), false)",
			"Test.assertEquals(isAutomorphic(3), false)",
			"Test.assertEquals(isAutomorphic(1376), false)"
		],
		"starterFn": [
			"1\nfunction isAutomorphic(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QXadaT8denMNXvn3t"
	},
	{
		"title": "Changing Mixed Types",
		"description": "<p><span>Create a function that changes all the elements in an array as follows:</span></p><ul><li><span>Add 1 to all </span><strong><span>even integers</span></strong><span>, nothing to odd integers.</span></li><li><span>Concatenates \"!\" to all </span><strong><span>strings</span></strong><span> and capitalises them.</span></li><li><span>Changes all </span><code>boolean</code><span> values to its opposite.</span></li></ul><h3><span>Examples</span></h3><pre><code>changeTypes([\"a\", 12, true]) ➞ [\"A!\", 13, false]\n\nchangeTypes([13, \"13\", \"12\", \"twelve\"]) ➞ [13, \"13!\", \"12!\", \"Twelve!\"]\n\nchangeTypes([false, \"false\", \"true\"]) ➞ [true, \"False!\", \"True!\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>There won't be any float values.</span></li><li><span>You won't get strings with both numbers and letters in them.</span></li><li><span>Although the task may be easy, try keeping your code as clean and as readable as possible!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions"
		],
		"tests": [
			"Test.assertSimilar(changeTypes([\"a\", 12, true]),[\"A!\", 13, false])",
			"Test.assertSimilar(changeTypes([13, \"13\", \"12\", \"twelve\"]), [13, \"13!\", \"12!\", \"Twelve!\"])",
			"Test.assertSimilar(changeTypes([false, \"false\", \"true\"]), [true, \"False!\", \"True!\"])",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction changeTypes(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FY8DmJXbQXL3yugGC"
	},
	{
		"title": "Stand in Line",
		"description": "<p><span>Write a function that takes an array and a number as arguments. Add the number to the end of the array, then remove the first element of the array. The function should then return the updated array.</span></p><h3><span>Examples</span></h3><pre><code>nextInLine([5, 6, 7, 8, 9], 1) ➞ [6, 7, 8, 9, 1]\n\nnextInLine([7, 6, 3, 23, 17], 10) ➞ [6, 3, 23, 17, 10]\n\nnextInLine([1, 10, 20, 42 ], 6) ➞ [10, 20, 42, 6]\n\nnextInLine([], 6) ➞ \"No array has been selected\"</code></pre><h3><span>Notes</span></h3><p><span>For an empty array input, return: </span><code>\"No array has been selected\"</code></p>",
		"publishedBy": "Stanislav Mozolevskiy",
		"publishedByUrl": "https://edabit.com/user/M3z4ZPgywPqX9eoS4",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(nextInLine([5,6,7,8,9], 1), [6,7,8,9 ,1])",
			"Test.assertSimilar(nextInLine([7,6,3,23,17], 10), [6,3,23,17,10])",
			"Test.assertSimilar(nextInLine([1,10,20,42], 6), [10,20,42,6])",
			"Test.assertSimilar(nextInLine(NaN,6),  \"No array has been selected\")",
			"Test.assertSimilar(nextInLine([0], 1), [1])"
		],
		"starterFn": [
			"1\nfunction nextInLine(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ebm9Yo3nxxniskr64"
	},
	{
		"title": "Halve and Halve Again",
		"description": "<p><span>Given two integers </span><code>a</code><span> and </span><code>b</code><span>, return how many times </span><code>a</code><span> can be </span><strong><span>halved</span></strong><span> while still being greater than </span><code>b</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>halveCount(1324, 98) ➞ 3\n// (1324 -&gt; 662 -&gt; 331 -&gt; 165.5)\n\nhalveCount(624, 8) ➞ 6\n// (624 -&gt; 312 -&gt; 156 -&gt; 78 -&gt; 39 -&gt; 19.5 -&gt; 9.75)\n\nhalveCount(1000, 3) ➞ 8\n// (1000 -&gt; 500 -&gt; 250 -&gt; 125 -&gt; 62.5 -&gt; 31.25 -&gt; 15.625 -&gt; 7.8125 -&gt; 3.90625)</code></pre><h3><span>Notes</span></h3><p><span>Integer </span><code>a</code><span> can be halved at least once.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(halveCount(1891, 4), 8)",
			"Test.assertEquals(halveCount(1756, 14), 6)",
			"Test.assertEquals(halveCount(7764, 2), 11)",
			"Test.assertEquals(halveCount(1118, 47), 4)",
			"Test.assertEquals(halveCount(161, 79), 1)",
			"Test.assertEquals(halveCount(8573, 35), 7)",
			"Test.assertEquals(halveCount(4123, 1), 12)",
			"Test.assertEquals(halveCount(1348, 60), 4)",
			"Test.assertEquals(halveCount(7549, 31), 7)",
			"Test.assertEquals(halveCount(4469, 5), 9)",
			"Test.assertEquals(halveCount(1123, 98), 3)",
			"Test.assertEquals(halveCount(8197, 85), 6)",
			"Test.assertEquals(halveCount(1199, 56), 4)",
			"Test.assertEquals(halveCount(8845, 4), 11)",
			"Test.assertEquals(halveCount(606, 67), 3)",
			"Test.assertEquals(halveCount(3375, 6), 9)",
			"Test.assertEquals(halveCount(7085, 10), 9)",
			"Test.assertEquals(halveCount(299, 5), 5)",
			"Test.assertEquals(halveCount(1208, 82), 3)",
			"Test.assertEquals(halveCount(3635, 73), 5)",
			"Test.assertEquals(halveCount(2382, 3), 9)",
			"Test.assertEquals(halveCount(320, 80), 1)"
		],
		"starterFn": [
			"1\nfunction halveCount(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iqZkzkWTHrJCFf6ZQ"
	},
	{
		"title": "Increment to Top",
		"description": "<p><span>Create a function that returns the total number of steps it takes to transform each element to the maximal element in the array. Each step consists of incrementing a digit by one.</span></p><h3><span>Examples</span></h3><pre><code>incrementToTop([3, 4, 5]) ➞ 3\n// 3 increments: 3 -&gt; 4, 4 -&gt; 5; 4 -&gt; 5\n\nincrementToTop([4, 3, 4]) ➞ 1\n\nincrementToTop([3, 3, 3]) ➞ 0\n\nincrementToTop([3, 10, 3]) ➞ 14</code></pre><h3><span>Notes</span></h3><ul><li><span>If the array contains only the same digits, return </span><code>0</code><span> (see example #3).</span></li><li><span>Bonus: Can you write a solution that achieves this by only traversing the array once? (i.e. without finding the max before hand)</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(incrementToTop([3, 4, 5]), 3)",
			"Test.assertEquals(incrementToTop([4, 3, 4]), 1)",
			"Test.assertEquals(incrementToTop([3, 3, 3]), 0)",
			"Test.assertEquals(incrementToTop([3, 10, 3]), 14)",
			"Test.assertEquals(incrementToTop([1, 2, 3, 4, 5]), 10)"
		],
		"starterFn": [
			"1\nfunction incrementToTop(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aR66JfnFDXod5FpbS"
	},
	{
		"title": "All About Anonymous Functions: Adding",
		"description": "<p><span>Write a function that returns an </span><strong><span>anonymous function</span></strong><span>, which adds </span><code>n</code><span> to its input</span></p><h3><span>Examples</span></h3><pre><code>adds1 = addsNum(1)\n\nadds1(3) ➞ 4\nadds1(5.7) ➞ 6.7\n\nadds10 = addsNum(10)\n\nadds10(44) ➞ 54\nadds10(20) ➞ 30</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals"
		],
		"tests": [
			"adds1 = addsNum(1)",
			"adds10 = addsNum(10)",
			"adds5neg = addsNum(-5)",
			"adds0 = addsNum(0)",
			"​",
			"Test.assertEquals(adds1(3), 4)",
			"Test.assertEquals(adds1(5.7), 6.7)",
			"Test.assertEquals(adds10(44), 54)",
			"Test.assertEquals(adds10(20), 30)",
			"​",
			"Test.assertEquals(adds5neg(0), -5)",
			"Test.assertEquals(adds5neg(77), 72)",
			"Test.assertEquals(adds0(77), 77)"
		],
		"starterFn": [
			"1\nfunction addsNum(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/q4FkAnRFwDq5LXqkf"
	},
	{
		"title": "Alternating Ones and Zeroes",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if the binary string can be rearranged to form a string of alternating </span><code>0</code><span>s and </span><code>1</code><span>s.</span></p><h3><span>Examples</span></h3><pre><code>canAlternate(\"0001111\") ➞ true\n// Can make: \"1010101\"\n\ncanAlternate(\"01001\") ➞ true\n// Can make: \"01010\"\n\ncanAlternate(\"010001\") ➞ false\n\ncanAlternate(\"1111\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>No substring of the output may contain more than one consecutive repeating character (e.g. </span><code>00</code><span> or </span><code>11</code><span> are not allowed).</span></li><li><span>Return </span><code>false</code><span> if a string only contains </span><code>0</code><span>s or only contains </span><code>1</code><span>s.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canAlternate(\"0001111\"), true)",
			"Test.assertEquals(canAlternate(\"01001\"), true)",
			"Test.assertEquals(canAlternate(\"010001\"), false)",
			"Test.assertEquals(canAlternate(\"0100110111\"), false)",
			"Test.assertEquals(canAlternate(\"10101010\"), true)",
			"Test.assertEquals(canAlternate(\"010101000\"), false)",
			"Test.assertEquals(canAlternate(\"0111\"), false)",
			"Test.assertEquals(canAlternate(\"00\"), false)",
			"Test.assertEquals(canAlternate(\"1111\"), false)",
			"Test.assertEquals(canAlternate(\"101\"), true)"
		],
		"starterFn": [
			"1\nfunction canAlternate(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XHzuvkGKGy7pB73ZE"
	},
	{
		"title": "Scoring System",
		"description": "<p><span>Andy, Ben and Charlotte are playing a board game. The three of them decided to come up with a new scoring system. A player's first initial (\"A\", \"B\" or \"C\") denotes that player scoring a single point. Given a string of capital letters, return an array of the players' scores.</span></p><p><span>For instance, if </span><code>ABBACCCCAC</code><span> is written when the game is over, then Andy scored </span><strong><span>3 points</span></strong><span>, Ben scored </span><strong><span>2 points</span></strong><span>, and Charlotte scored </span><strong><span>5 points</span></strong><span>, since there are 3 instances of letter A, 2 instances of letter B, and 5 instances of letter C. So the array </span><code>[3, 2, 5]</code><span> should be returned.</span></p><h3><span>Examples</span></h3><pre><code>calculateScores(\"A\") ➞ [1, 0, 0]\n\ncalculateScores(\"ABC\") ➞ [1, 1, 1]\n\ncalculateScores(\"ABCBACC\") ➞ [2, 2, 3]</code></pre><h3><span>Notes</span></h3><p><span>If given an empty string as an input, return </span><code>[0, 0, 0]</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(calculateScores(\"AAB\"), [2, 1, 0]);",
			"Test.assertSimilar(calculateScores(\"ABC\"), [1, 1, 1]);",
			"Test.assertSimilar(calculateScores(\"ABCBACC\"), [2, 2, 3]);",
			"Test.assertSimilar(calculateScores(\"CCBBBB\"), [0, 4, 2]);",
			"Test.assertSimilar(calculateScores(\"CCAABBAABBCC\"), [4, 4, 4]);",
			"Test.assertSimilar(calculateScores(\"A\"), [1, 0, 0]);",
			"Test.assertSimilar(calculateScores(\"\"), [0, 0, 0]);",
			"Test.assertSimilar(calculateScores(\"ACCCA\"), [2, 0, 3]);"
		],
		"starterFn": [
			"1\nfunction calculateScores(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WvGmrCyiiZeunZLAg"
	},
	{
		"title": "RegEx XIV: Group Ranges - Character Sets",
		"description": "<p><strong><span>Groups and ranges</span></strong><span> indicate groups and ranges of expression characters. </span><strong><span>Character Sets</span></strong><span> match any characters inside of brackets </span><code>[ ]</code><span>. You can specify a </span><strong><span>range</span></strong><span> of characters by using a </span><strong><span>hyphen</span></strong><span>.</span></p><pre><code>/[abcd]/ === /[a-d]/</code></pre><p><span>If the hyphen appears as the </span><strong><span>first</span></strong><span> or </span><strong><span>last</span></strong><span> character then it is considered a </span><strong><span>literal</span></strong><span> hyphen.</span></p><pre><code>\"non-profit\".match(/[abc-]/g)  // \"-\"\n\"non-profit\".match(/[-abc]/g)  // \"-\"</code></pre><p><span>You can also use </span><strong><span>character classes</span></strong><span> in a character set. So instead of this:</span></p><pre><code>/[A-Za-z0-9_-]/</code></pre><p><span>You can do this:</span></p><pre><code>/[\\w]/</code></pre><p><span>Create the </span><strong><span>regex</span></strong><span> to match \"x\" followed by two digits or letters from A to F. Case sensitive.</span></p><h3><span>Examples</span></h3><pre><code>\"Exception 0xAF\".match(REGEXP) ➞ \"xAF\"\n\n\"Exception 0xD3\".match(REGEXP) ➞ \"xD3\"\n\n\"Exception 0xd3\".match(REGEXP) ➞ null\n\n\"Exception 0xZZ\".match(REGEXP) ➞ null</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str1 = \"Exception 0xAF\"",
			"const str2 = \"Exception 0x1A\"",
			"const str3 = \"Exception 0x22\"",
			"const str4 = \"Exception 0xF9\"",
			"const str5 = \"Exception 0xG0\"",
			"const str6 = \"Exception 0xH9\"",
			"const str7 = \"Exception 0xF9\"",
			"const str8 = \"Exception 0xF9\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(/\\[\\]/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"    return str.match(REGEXP) && str.match(REGEXP)[0];",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"invalid\", \"You are require to use a character set your expression.\")",
			"Test.assertSimilar(testExp(str1), \"xAF\")",
			"Test.assertSimilar(testExp(str2), \"x1A\")",
			"Test.assertSimilar(testExp(str3), \"x22\")",
			"Test.assertSimilar(testExp(str4), \"xF9\")",
			"Test.assertSimilar(testExp(str5), null)",
			"Test.assertSimilar(testExp(str6), null)",
			"Test.expectError(\"Letters must be upper case\", testExp(str7))"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/vqwqCwfJ3r4zFvzPn"
	},
	{
		"title": "Positive Count / Negative Sum",
		"description": "<p><span>Create a function that takes an array of positive and negative numbers. Return an array where the first element is the </span><strong><span>count</span></strong><span> of positive numbers and the second element is the </span><strong><span>sum</span></strong><span> of negative numbers.</span></p><h3><span>Examples</span></h3><pre><code>countPosSumNeg([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]) ➞ [10, -65]\n// There are a total of 10 positive numbers.\n// The sum of all negative numbers equals -65.\n\ncountPosSumNeg([92, 6, 73, -77, 81, -90, 99, 8, -85, 34]) ➞ [7, -252]\n\ncountPosSumNeg([91, -4, 80, -73, -28]) ➞ [2, -105]\n\ncountPosSumNeg([]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If given an empty array, return an empty array: </span><code>[]</code></li><li><span>0 is not positive.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(countPosSumNeg([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]), [10, -65])",
			"Test.assertSimilar(countPosSumNeg([92, 6, 73, -77, 81, -90, 99, 8, -85, 34]), [7, -252])",
			"Test.assertSimilar(countPosSumNeg([91, -4, 80, -73, -28]), [2, -105])",
			"Test.assertSimilar(countPosSumNeg([]), [])",
			"Test.assertSimilar(countPosSumNeg([69, 100, 28, 47, 53, -61, -24]), [5, -85])",
			"Test.assertSimilar(countPosSumNeg([5, 7, 9, -3, -7, 61, -24]), [4, -34])",
			"Test.assertSimilar(countPosSumNeg([98, 51, -19, -97]), [2, -116])",
			"Test.assertSimilar(countPosSumNeg([-42, 3, -51, -64, 69, 77, -20, -5, 68, -76]), [4, -258])"
		],
		"starterFn": [
			"1\nfunction countPosSumNeg(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xXJLZry3vYd4erPct"
	},
	{
		"title": "Longest Sequence of Consecutive Zeroes",
		"description": "<p><span>Write a function that returns the longest sequence of consecutive zeroes in a binary string.</span></p><h3><span>Examples</span></h3><pre><code>longestZero(\"01100001011000\") ➞ \"0000\"\n\nlongestZero(\"100100100\") ➞ \"00\"\n\nlongestZero(\"11111\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><p><span>If no zeroes exist in the input, return an empty string.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(longestZero(\"01100001011000\"), \"0000\")",
			"Test.assertEquals(longestZero(\"100100100\"), \"00\")",
			"Test.assertEquals(longestZero(\"111101\"), \"0\")",
			"Test.assertEquals(longestZero(\"1000000000011101\"), \"0000000000\")",
			"Test.assertEquals(longestZero(\"100001110000100000\"), \"00000\")",
			"Test.assertEquals(longestZero(\"101001101\"), \"00\")",
			"Test.assertEquals(longestZero(\"101010101\"), \"0\")",
			"Test.assertEquals(longestZero(\"1001001\"), \"00\")",
			"Test.assertEquals(longestZero(\"111111\"), \"\")"
		],
		"starterFn": [
			"1\nfunction longestZero(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5zwzw2AFC95u3ZLtm"
	},
	{
		"title": "Preventing the Collapse of the Universe",
		"description": "<p><strong><span>Dividing by 0</span></strong><span> is a huge mistake and should be avoided at all costs.</span></p><p><span>Create a function that when given a </span><em><span>math expression</span></em><span> as a </span><em><span>string</span></em><span>, return </span><code>True</code><span> if at any point, the expression involves </span><strong><span>dividing by 0</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>catchZeroDivision(\"2 / 0\") ➞ true\n\ncatchZeroDivision(\"4 / (2 + 3 - 5)\") ➞ true\n\ncatchZeroDivision(\"2 * 5 - 10\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Multiplication signs will be given as an asterisk *.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(catchZeroDivision(\"2 / 0\"), true)",
			"Test.assertEquals(catchZeroDivision(\"4 / (2 + 3 - 5)\"), true)",
			"Test.assertEquals(catchZeroDivision(\"2 * 5 - 3\"), false)",
			"Test.assertEquals(catchZeroDivision(\"3 / 0\"), true)",
			"Test.assertEquals(catchZeroDivision(\"23 - 23 / 23\"), false)",
			"Test.assertEquals(catchZeroDivision(\"0 + 1 + 2 + 3 + 0\"), false)",
			"Test.assertEquals(catchZeroDivision(\"0+0+0+0+0+0+0\"), false)",
			"Test.assertEquals(catchZeroDivision(\"0-0-0-0-0-0-0-0-0-0\"), false)",
			"Test.assertEquals(catchZeroDivision(\"4 / 3\"), false)",
			"Test.assertEquals(catchZeroDivision(\"5343456787543234567 / 743044830483009043909003\"), false)",
			"Test.assertEquals(catchZeroDivision(\"0 / 0\"), true)",
			"Test.assertEquals(catchZeroDivision(\"(-100 + 50 + 50) / (60 - 50 - 10)\"), true)",
			"Test.assertEquals(catchZeroDivision(\"0 + 0 + (3 / (3 - 3))\"), true)",
			"Test.assertEquals(catchZeroDivision(\"7 / ((7**2) - ((-7)**2))\"), true)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction catchZeroDivision(expr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2ncgPqA3cY35op7B2"
	},
	{
		"title": "Return an Array of Subarrays",
		"description": "<p><span>Write a function that takes three arguments </span><code>(x, y, z)</code><span> and returns an array containing </span><code>x</code><span> subarrays (e.g. </span><code>[[], [], []]</code><span>), each containing </span><code>y</code><span> number of item </span><code>z</code><span>.</span></p><ul><li><code>x</code><span> Number of subarrays contained within the main array.</span></li><li><code>y</code><span> Number of items contained within each subarray.</span></li><li><code>z</code><span> Item contained within each subarray.</span></li></ul><h3><span>Examples</span></h3><pre><code>matrix(3, 2, 3) ➞ [[3, 3], [3, 3], [3, 3]]\n\nmatrix(2, 1, \"edabit\") ➞ [[\"edabit\"], [\"edabit\"]]\n\nmatrix(3, 2, 0) ➞ [[0, 0], [0, 0], [0, 0]]</code></pre><h3><span>Notes</span></h3><ul><li><span>The first two arguments will always be integers.</span></li><li><span>The third argument is either a string or an integer.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(matrix(3, 4, 0), [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])",
			"Test.assertSimilar(matrix(2, 3, \"#\"), [[\"#\", \"#\", \"#\"], [\"#\", \"#\", \"#\"]])",
			"Test.assertSimilar(matrix(2, 3, -4), [[-4, -4, -4], [-4, -4, -4]])",
			"Test.assertSimilar(matrix(1, 2, 0), [[0, 0]])"
		],
		"starterFn": [
			"1\nfunction matrix(x, y, z) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zeBNPCpiXYNpKG6pt"
	},
	{
		"title": "Upper or Lower Case",
		"description": "<p><span>Return the smallest number of steps it takes to convert a string </span><strong><span>entirely</span></strong><span> into uppercase or </span><strong><span>entirely</span></strong><span> into lower case, whichever takes the fewest number of steps. A step consists of changing one character from lower to upper case, or vice versa.</span></p><h3><span>Examples</span></h3><pre><code>stepsToConvert(\"abC\") ➞ 1\n// \"abC\" converted to \"abc\" in 1 step\n\nstepsToConvert(\"abCBA\") ➞ 2\n// \"abCBA\" converted to \"ABCBA\" in 2 steps\n\nstepsToConvert(\"aba\") ➞ 0\n\nstepsToConvert(\"abaCCC\") ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>0</code><span> if empty string.</span></li><li><span>Return </span><code>0</code><span> if the string is already entirely in one case.</span></li><li><span>Only alphabetic characters.</span></li><li><span>Input has no spaces.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(stepsToConvert('abC'), 1);",
			"Test.assertEquals(stepsToConvert('abCBA'), 2);",
			"Test.assertEquals(stepsToConvert('aba'), 0);",
			"Test.assertEquals(stepsToConvert('ABA'), 0);",
			"Test.assertEquals(stepsToConvert('abaCCC'), 3);",
			"Test.assertEquals(stepsToConvert('abaaCCCDE'), 4);",
			"Test.assertEquals(stepsToConvert('CCaaCCaaCa'), 5);",
			"Test.assertEquals(stepsToConvert(''), 0, 'Return 0 if empty string.');"
		],
		"starterFn": [
			"1\nfunction stepsToConvert(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GYfnaQhSmZWLEMx6P"
	},
	{
		"title": "Twitter Link Finder",
		"description": "<p><span>Your job is to make a \"Twitter link\" regular expression </span><code>rx</code><span>. This RegEx searches a tweet to find the </span><strong><span>@handle</span></strong><span> and the </span><strong><span>#handle</span></strong><span>.</span></p><ul><li><span>The function is already written in the </span><strong><span>Tests</span></strong><span> tab, so you only need to provide the RegEx variable in the </span><strong><span>Code</span></strong><span> tab.</span></li><li><span>Only return the </span><strong><span>@</span></strong><span> and </span><strong><span>#</span></strong><span> handles.</span></li></ul><h3><span>Examples</span></h3><pre><code>tweet(\"Visit us at @edabit\") ➞ \"@edabit\"\n\ntweet(\"Follow @JavaScript\") ➞ \"@JavaScript\"\n\ntweet(\"#Honesty is the best @policy!!\") ➞ \"#Honesty @policy\"</code></pre><h3><span>Notes</span></h3><p><span>Make sure the RegEx doesn't return </span><code>.</code><span> </span><code>,</code><span> </span><code>!</code><span> </span><code>?</code><span>, etc.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const tweet = str => str.match(rx).join` `;",
			"​",
			"[",
			"[ 'Visit us at @edabit', '@edabit' ],",
			"[ 'This is #definitely, the @second test', '#definitely @second' ],",
			"[ '#Finally, a test!', '#Finally' ],",
			"[ '#Paris is the capital of #France.', '#Paris #France' ],",
			"[ 'The @committee consists of #eminent #jurists.',",
			"  '@committee #eminent #jurists'],",
			"[ '#Honesty is the best @policy!!', '#Honesty @policy' ],",
			"[ '@RonaldRoss was awarded the Nobel Prize for his work on the transmission of #malaria.',",
			"  '@RonaldRoss #malaria'],",
			"[ 'Follow @JavaScript', '@JavaScript' ]]",
			"  .forEach(x => Test.assertEquals(tweet(x[0]), x[1]));"
		],
		"starterFn": [
			"1\n// The function is at the test tab, you only need to provide",
			"2\n// the Regex variable:",
			"3\n​",
			"4\nconst rx = "
		],
		"url": "https://edabit.com/challenge/zCkag8556FAjJ6W4L"
	},
	{
		"title": "No Hidden Fees",
		"description": "<p><span>Given an array of prices </span><code>prices</code><span> and a \"supposed\" total </span><code>t</code><span>, return </span><code>true</code><span> if there is a </span><strong><span>hidden fee</span></strong><span> added to the total (i.e. </span><em><span>the total is greater than the sum of prices</span></em><span>), otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>hasHiddenFee([\"$2\", \"$4\", \"$1\", \"$8\"], \"$15\") ➞ false\n\nhasHiddenFee([\"$1\", \"$2\", \"$3\"], \"$6\") ➞ false\n\nhasHiddenFee([\"$1\"], \"$4\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember that each price is given as a string.</span></li><li><span>All $ signs will be at the beginning of the number.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(hasHiddenFee([\"$2\", \"$4\", \"$1\", \"$8\"], \"$15\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$1\", \"$2\", \"$3\"], \"$6\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$1\"], \"$4\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$15\", \"$40\", \"$19\", \"$50\", \"$22\", \"$41\", \"$35\", \"$10\", \"$38\", \"$41\"], \"$311\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$25\", \"$6\", \"$19\", \"$9\", \"$32\", \"$15\", \"$10\", \"$9\", \"$7\", \"$8\", \"$37\", \"$23\", \"$18\"], \"$232\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$31\", \"$30\", \"$21\", \"$12\", \"$10\", \"$38\", \"$42\", \"$27\", \"$51\"], \"$297\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$9\", \"$37\", \"$21\", \"$4\", \"$14\", \"$10\", \"$36\", \"$33\", \"$17\", \"$41\", \"$50\", \"$48\", \"$2\", \"$45\", \"$6\", \"$22\", \"$23\"], \"$499\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$44\"], \"$82\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$15\", \"$30\", \"$34\"], \"$79\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$35\", \"$29\", \"$9\", \"$47\", \"$43\", \"$4\", \"$37\", \"$32\", \"$49\", \"$37\", \"$32\", \"$38\", \"$43\", \"$19\", \"$26\", \"$46\", \"$46\", \"$31\", \"$24\", \"$6\"], \"$696\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$50\", \"$28\", \"$11\", \"$51\", \"$8\", \"$44\"], \"$192\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$50\", \"$14\", \"$45\", \"$43\", \"$7\", \"$45\", \"$34\", \"$28\", \"$46\", \"$50\", \"$36\", \"$23\"], \"$432\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$45\", \"$50\", \"$45\", \"$16\", \"$6\", \"$45\", \"$33\", \"$18\", \"$12\", \"$3\", \"$40\", \"$51\"], \"$364\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$33\", \"$26\", \"$40\", \"$10\", \"$24\", \"$48\"], \"$181\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$21\", \"$45\", \"$6\", \"$43\", \"$39\"], \"$207\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$18\", \"$44\", \"$51\", \"$31\", \"$22\", \"$8\", \"$21\", \"$27\", \"$21\", \"$3\", \"$42\", \"$10\", \"$47\", \"$29\", \"$32\", \"$47\"], \"$517\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$17\", \"$31\", \"$42\", \"$20\", \"$28\", \"$13\", \"$17\", \"$4\", \"$13\", \"$1\", \"$29\", \"$20\", \"$30\", \"$34\", \"$14\", \"$18\", \"$20\", \"$14\", \"$38\", \"$30\"], \"$456\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$48\", \"$24\", \"$11\"], \"$83\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$14\", \"$15\", \"$12\", \"$18\", \"$29\", \"$3\", \"$29\", \"$9\", \"$7\", \"$2\", \"$15\", \"$8\", \"$50\", \"$4\", \"$3\"], \"$218\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$30\", \"$40\", \"$2\", \"$25\", \"$48\", \"$42\", \"$22\", \"$6\", \"$48\", \"$14\", \"$15\", \"$2\", \"$46\", \"$20\", \"$5\", \"$10\", \"$35\"], \"$412\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$43\", \"$49\", \"$2\", \"$15\", \"$6\", \"$20\", \"$31\", \"$7\", \"$38\", \"$40\", \"$17\", \"$25\", \"$21\", \"$29\", \"$12\", \"$34\", \"$22\", \"$45\", \"$18\", \"$19\", \"$31\"], \"$524\"), false)",
			"Test.assertEquals(hasHiddenFee([\"$25\", \"$16\"], \"$56\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$28\", \"$11\", \"$2\", \"$12\", \"$22\", \"$7\", \"$30\", \"$46\", \"$25\", \"$17\", \"$28\", \"$44\", \"$14\", \"$43\", \"$6\", \"$11\", \"$23\", \"$6\", \"$46\"], \"$459\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$24\", \"$31\", \"$6\", \"$20\", \"$35\", \"$33\", \"$1\", \"$46\", \"$45\", \"$36\", \"$43\"], \"$394\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$18\", \"$25\", \"$44\", \"$36\", \"$50\", \"$32\", \"$7\", \"$42\", \"$23\", \"$38\", \"$43\", \"$9\", \"$7\", \"$22\", \"$51\", \"$35\", \"$8\"], \"$557\"), true)",
			"Test.assertEquals(hasHiddenFee([\"$17\", \"$37\", \"$43\", \"$6\", \"$22\", \"$39\", \"$11\", \"$29\", \"$11\", \"$1\", \"$7\", \"$30\", \"$1\", \"$30\", \"$42\", \"$27\", \"$12\", \"$16\", \"$13\", \"$42\", \"$19\"], \"$455\"), false)"
		],
		"starterFn": [
			"1\nfunction hasHiddenFee(prices, t) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LSw9Tgs6yMgQ4JfdX"
	},
	{
		"title": "Wurst Is Better",
		"description": "<p><span>Wurst is the best. Create a function that takes a string and replaces every mention of any type of sausage with the German word \"Wurst,\" unless—of course—the sausage is already a type of German \"Wurst\" (i.e. \"Bratwurst\", see below), then leave the sausage name unchanged.</span></p><table><thead><tr><th><span>German Wursts</span></th><th><span>Convert to Wurst</span></th></tr></thead><tbody><tr><td><span>Bratwurst</span></td><td><span>Kielbasa</span></td></tr><tr><td><span>Kochwurst</span></td><td><span>Chorizo</span></td></tr><tr><td><span>Leberwurst</span></td><td><span>Moronga</span></td></tr><tr><td><span>Mettwurst</span></td><td><span>Salami</span></td></tr><tr><td><span>Rostbratwurst</span></td><td><span>Sausage</span></td></tr><tr><td><span>~</span></td><td><span>Andouille</span></td></tr><tr><td><span>~</span></td><td><span>Naem</span></td></tr><tr><td><span>~</span></td><td><span>Merguez</span></td></tr><tr><td><span>~</span></td><td><span>Gurka</span></td></tr><tr><td><span>~</span></td><td><span>Snorkers</span></td></tr><tr><td><span>~</span></td><td><span>Pepperoni</span></td></tr></tbody></table><h3><span>Rules</span></h3><ul><li><span>Append sausages from the \"Convert to Wurst\" column with \"wurst\".</span></li><li><span>Do not replace any German sausage with the word \"Wurst\".</span></li><li><span>The word \"Wurst\" must be title case.</span></li></ul><h3><span>Examples</span></h3><pre><code>wurstIsBetter(\"I like chorizos, but not sausages\") ➞ \"I like Wursts, but not Wursts\"\n\nwurstIsBetter(\"sich die Wurst vom Brot nehmen lassen\") ➞ \"sich die Wurst vom Brot nehmen lassen\"\n\nwurstIsBetter(\"Bratwurst and Rostbratwurst are sausages\") ➞ \"Bratwurst and Rostbratwurst are Wursts\"</code></pre><h3><span>Notes</span></h3><p><span>All German sausage names contain the word \"wurst\".</span></p>",
		"publishedBy": "raywu",
		"publishedByUrl": "https://edabit.com/user/mnTtC3rYvYiMdengM",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wurstIsBetter(\"Sausage fests are like salami fests\"), \"Wurst fests are like Wurst fests\")",
			"Test.assertEquals(wurstIsBetter(\"Add the kielbasa and the reserved potatoes and stir through\"), \"Add the Wurst and the reserved potatoes and stir through\")",
			"Test.assertEquals(wurstIsBetter(\"Salami sandwiches, salami and cheese, salami on crackers— I couldn't get enough of the salty, spicy sausage\"), \"Wurst sandwiches, Wurst and cheese, Wurst on crackers— I couldn't get enough of the salty, spicy Wurst\")",
			"Test.assertEquals(wurstIsBetter(\"sich die Wurst vom Brot nehmen lassen\"), \"sich die Wurst vom Brot nehmen lassen\")",
			"Test.assertEquals(wurstIsBetter(\"Bratwurst and Rostbratwurst is a sausage made from finely minced pork and beef and usually grilled and served with sweet German mustard and a piece of bread or hard roll. It can be sliced and made into Currywurst by slathering it in a catchup-curry sauce.\"), \"Bratwurst and Rostbratwurst is a Wurst made from finely minced pork and beef and usually grilled and served with sweet German mustard and a piece of bread or hard roll. It can be sliced and made into Currywurst by slathering it in a catchup-curry sauce.\")",
			"Test.assertEquals(wurstIsBetter(\"Il n’arrête pas de faire l’andouille\"), \"Il n’arrête pas de faire l’Wurst\")",
			"Test.assertEquals(wurstIsBetter(\"Naem is a common way of preserving pork meat in several Southeast Asian countries, including Thailand, Laos, Cambodia and Vietnam\"), \"Wurst is a common way of preserving pork meat in several Southeast Asian countries, including Thailand, Laos, Cambodia and Vietnam\")",
			"Test.assertEquals(wurstIsBetter(\"The chipper group over at Orangatang recently dropped another wheel sensation; the Moronga\"), \"The chipper group over at Orangatang recently dropped another wheel sensation; the Wurst\")"
		],
		"starterFn": [
			"1\nfunction wurstIsBetter(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/j7s4LTKexAEazQApv"
	},
	{
		"title": "Is the Number a Prime?",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if a number is prime and </span><code>false</code><span> if it's not. A prime number is any positive integer that is evenly divisible by only two divisors: 1 and itself.  The first ten prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23 and 29.</span></p><h3><span>Examples</span></h3><pre><code>isPrime(7) ➞ true\n\nisPrime(9) ➞ false\n\nisPrime(10) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>1 is not a prime number.</span></li><li><span>If a number is odd it is not divisible by an even number.</span></li></ul>",
		"publishedBy": "Louis",
		"publishedByUrl": "https://edabit.com/user/ynf84kJyw8M2Fmk8G",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPrime(1), false)",
			"Test.assertEquals(isPrime(2), true)",
			"Test.assertEquals(isPrime(3), true)",
			"Test.assertEquals(isPrime(4), false)",
			"Test.assertEquals(isPrime(5), true)",
			"Test.assertEquals(isPrime(6), false)",
			"Test.assertEquals(isPrime(7), true)",
			"Test.assertEquals(isPrime(8), false)",
			"Test.assertEquals(isPrime(9), false)",
			"Test.assertEquals(isPrime(10), false)",
			"Test.assertEquals(isPrime(11), true)",
			"Test.assertEquals(isPrime(102), false)",
			"Test.assertEquals(isPrime(103), true)"
		],
		"starterFn": [
			"1\nfunction isPrime(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oT6fy9Zvtmsnzdcvs"
	},
	{
		"title": "Same Parity?",
		"description": "<p><span>Create a function that takes a number as input and returns </span><code>true</code><span> if the sum of its digits has the same parity as the entire number. Otherwise, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>parityAnalysis(243) ➞ true\n// 243 is odd and so is 9 (2 + 4 + 3)\n\nparityAnalysis(12) ➞ false\n// 12 is even but 3 is odd (1 + 2)\n\nparityAnalysis(3) ➞ true\n// 3 is odd and 3 is odd and 3 is odd (3)</code></pre><h3><span>Notes</span></h3><ul><li><span>Parity is whether a number is even or odd. If the sum of the digits is even and the number itself is even, return </span><code>true</code><span>. The same goes if the number is odd and so is the sum of its digits.</span></li><li><span>Single digits will obviously have the same parities (see example #3).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(parityAnalysis(243), true, \"Example #1\")",
			"Test.assertEquals(parityAnalysis(12), false, \"Example #2\")",
			"Test.assertEquals(parityAnalysis(3), true, \"Example #3\")",
			"Test.assertEquals(parityAnalysis(5), true)",
			"Test.assertEquals(parityAnalysis(4), true)",
			"Test.assertEquals(parityAnalysis(3453), true)",
			"Test.assertEquals(parityAnalysis(0), true)",
			"Test.assertEquals(parityAnalysis(123456789), true)",
			"Test.assertEquals(parityAnalysis(987654321), true)",
			"Test.assertEquals(parityAnalysis(13), false)",
			"Test.assertEquals(parityAnalysis(37), false)",
			"Test.assertEquals(parityAnalysis(182), false)",
			"Test.assertEquals(parityAnalysis(133331), false)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction parityAnalysis(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NH7uN8JRgPz23GSNq"
	},
	{
		"title": "Convert to Hex",
		"description": "<p><span>Create a function that takes a strings characters as ASCII and returns each characters hexadecimal value as a string.</span></p><h3><span>Examples</span></h3><pre><code>toHex(\"hello world\") ➞ \"68 65 6c 6c 6f 20 77 6f 72 6c 64\"\n\ntoHex(\"Big Boi\") ➞ \"42 69 67 20 42 6f 69\"\n\ntoHex(\"Marty Poppinson\") ➞ \"4d 61 72 74 79 20 50 6f 70 70 69 6e 73 6f 6e\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Each byte must be seperated by a space.</span></li><li><span>All alpha hex characters must be lowercase.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"logic",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(toHex(\"Big Boi\"), \"42 69 67 20 42 6f 69\")",
			"Test.assertEquals(toHex(\"Marty Poppinson\"), \"4d 61 72 74 79 20 50 6f 70 70 69 6e 73 6f 6e\")",
			"Test.assertEquals(toHex(\"abcdefghi\"), \"61 62 63 64 65 66 67 68 69\")",
			"Test.assertEquals(toHex(\"oh dear\"), \"6f 68 20 64 65 61 72\")",
			"Test.assertEquals(toHex(\"i hate C#\"), \"69 20 68 61 74 65 20 43 23\")",
			"Test.assertEquals(toHex(\"i love C++ , not really\"), \"69 20 6c 6f 76 65 20 43 2b 2b 20 2c 20 6e 6f 74 20 72 65 61 6c 6c 79\")"
		],
		"starterFn": [
			"1\nfunction toHex(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jBf8Nq259tBEgsz4X"
	},
	{
		"title": "Reverse Coding Challenge #6",
		"description": "<p><span>This is a </span><strong><span>reverse coding challenge</span></strong><span>. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.</span></p><p><span>Your task is to create a function that, when fed the inputs below, produces the sample outputs shown.</span></p><h3><span>Examples</span></h3><pre><code>mysteryFunc(152) ➞ 10\n\nmysteryFunc(832) ➞ 48\n\nmysteryFunc(19) ➞ 9\n\nmysteryFunc(133) ➞ 9</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(mysteryFunc(152), 10)",
			"Test.assertEquals(mysteryFunc(832), 48)",
			"Test.assertEquals(mysteryFunc(5511), 25)",
			"Test.assertEquals(mysteryFunc(19), 9)",
			"Test.assertEquals(mysteryFunc(133), 9)"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/igEBCD9MzBfKfEMog"
	},
	{
		"title": "Slidey Numbers",
		"description": "<p><span>A number is considered </span><em><span>slidey</span></em><span> if for every digit in the number, the next digit from that has an absolute difference of one. Check the examples below.</span></p><h3><span>Examples</span></h3><pre><code>isSlidey(123454321) ➞ true\n\nisSlidey(54345) ➞ true\n\nisSlidey(987654321) ➞ true\n\nisSlidey(1123) ➞ false\n\nisSlidey(1357) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>A number cannot slide properly if there is a \"flat surface\" (example #4), or has gaps (example #5).</span></li><li><span>All single digit numbers can be considered </span><em><span>slidey numbers</span></em><span>!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSlidey(123454321), true)",
			"Test.assertEquals(isSlidey(54345), true)",
			"Test.assertEquals(isSlidey(987654321), true)",
			"Test.assertEquals(isSlidey(1123), false)",
			"Test.assertEquals(isSlidey(1357), false)",
			"Test.assertEquals(isSlidey(1), true)",
			"Test.assertEquals(isSlidey(0), true)",
			"Test.assertEquals(isSlidey(13578987), false)",
			"Test.assertEquals(isSlidey(232323232), true)",
			"Test.assertEquals(isSlidey(2323232322), false)",
			"Test.assertEquals(isSlidey(2343456567878), true)",
			"Test.assertEquals(isSlidey(999999999999), false)",
			"Test.assertEquals(isSlidey(223322332233), false)",
			"Test.assertEquals(isSlidey(7766554433), false)",
			"Test.assertEquals(isSlidey(32), true)",
			"Test.assertEquals(isSlidey(21), true)",
			"Test.assertEquals(isSlidey(33), false)",
			"Test.assertEquals(isSlidey(30), false)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction isSlidey(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EmRbDHpexaHaLeWHo"
	},
	{
		"title": "Compare by ASCII Codes",
		"description": "<p><span>Create a function that compares two words based on the sum of their ASCII codes and returns the word with the smaller ASCII sum.</span></p><h3><span>Examples</span></h3><pre><code>asciiSort([\"hey\", \"man\"]) ➞ \"man\"\n// [\"h\", \"e\", \"y\"] ➞ sum([104, 101, 121]) ➞ 326\n// [\"m\", \"a\", \"n\"] ➞ sum([109, 97, 110]) ➞ 316\n\nasciiSort([\"majorly\", \"then\"]) ➞ \"then\"\n\nasciiSort([\"victory\", \"careless\"]) ➞ \"victory\"</code></pre><h3><span>Notes</span></h3><p><span>Both words will have strictly different ASCII sums.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(asciiSort([\"hey\", \"man\"]), \"man\")",
			"Test.assertEquals(asciiSort([\"majorly\", \"then\"]), \"then\")",
			"Test.assertEquals(asciiSort([\"magic\", \"kingdom\"]), \"magic\")",
			"Test.assertEquals(asciiSort([\"bored\", \"shampoo\"]), \"bored\")",
			"Test.assertEquals(asciiSort([\"victory\", \"careless\"]), \"victory\")"
		],
		"starterFn": [
			"1\nfunction asciiSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AKocM4opFZBrva2JX"
	},
	{
		"title": "Power of Two",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if an integer is a </span><strong><span>power of 2</span></strong><span>, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>powerOfTwo(32) ➞ true\n\npowerOfTwo(1) ➞ true\n\npowerOfTwo(-7) ➞ false\n\npowerOfTwo(18) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"describe(\"Basic Tests\", function() {",
			"  Test.assertEquals(powerOfTwo(32), true)",
			"  Test.assertEquals(powerOfTwo(1), true)",
			"  Test.assertEquals(powerOfTwo(-7), false)",
			"  Test.assertEquals(powerOfTwo(18), false)",
			"})",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"// Randomized Tests",
			"describe(\"Randomized Tests\", function() {",
			"​",
			"function powerOf2(n) {",
			"  return n == 0 ? false : Math.floor(Math.log2(n)) == Math.log2(n)",
			"}",
			"​",
			"function getRandomNumber(min, max) {",
			"  return Math.floor(Math.random()*(max + 1 - min) + min)"
		],
		"starterFn": [
			"1\nfunction powerOfTwo(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/x6hfHCyQtbvf6dQDK"
	},
	{
		"title": "Stripping a Sentence Down",
		"description": "<p><span>Create a function which takes in a sentence </span><code>str</code><span> and a string of characters </span><code>chars</code><span> and return the sentence but with all the </span><em><span>specified characters</span></em><span> </span><strong><span>removed</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>stripSentence(\"the quick brown fox jumps over the lazy dog\", \"aeiou\") ➞ \"th qck brwn fx jmps vr th lzy dg\"\n\nstripSentence(\"the hissing snakes sinisterly slither across the rustling leaves\", \"s\") ➞ \"the hiing nake initerly lither acro the rutling leave\"\n\nstripSentence(\"gone, reduced to atoms\", \"go, muscat nerd\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You may be asked to remove punctuation and spaces.</span></li><li><span>Return an </span><em><span>empty string</span></em><span> if every charcter is specified (see example #3).</span></li><li><span>All tests will be in lowercase.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(stripSentence(\"the quick brown fox jumps over the lazy dog\", \"aeiou\"), \"th qck brwn fx jmps vr th lzy dg\")",
			"Test.assertEquals(stripSentence(\"the hissing snakes sinisterly slither across the rustling leaves\", \"s\"), \"the hiing nake initerly lither acro the rutling leave\")",
			"Test.assertEquals(stripSentence(\"gone, reduced to atoms\", \"go, muscat nerd\"), \"\")",
			"Test.assertEquals(stripSentence(\"uh oh i made a typo please fixq it for me\", \"q\"), \"uh oh i made a typo please fix it for me\")",
			"Test.assertEquals(stripSentence(\"sphinx of black quartz, judge my vow!\", \"sgwj\"), \"phinx of black quartz, ude my vo!\")",
			"Test.assertEquals(stripSentence(\"exclamation! marks! and! the! letter! x! arxxxxxxxxexxxxxx! rxxexxxallxxxxy! anxxxnoxyixxxxxxxngxxxxxx!xx\", \"x!\"), \"eclamation marks and the letter  are really annoying\")",
			"Test.assertEquals(stripSentence(\"!!!!!!!!!!!!!!!!!!!!!!!\", \"?\"), \"!!!!!!!!!!!!!!!!!!!!!!!\")",
			"Test.assertEquals(stripSentence(\"cat rat eat pat eat sat\", \"at\"), \"c r e p e s\")",
			"Test.assertEquals(stripSentence(\"abc\", \"def\"), \"abc\")",
			"Test.assertEquals(stripSentence(\"allegro andante\", \"aaaaaaaaa\"), \"llegro ndnte\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction stripSentence(str, chars) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tgSGGGbS6x9foafg9"
	},
	{
		"title": "Online Shopping",
		"description": "<p><span>Create a function that determines whether a shopping order is eligible for free shipping. An order is eligible for free shipping if the total cost of items purchased exceeds $50.00.</span></p><h3><span>Examples</span></h3><pre><code>freeShipping({ \"Shampoo\": 5.99, \"Rubber Ducks\": 15.99 }) ➞ false\n\nfreeShipping({ \"Flatscreen TV\": 399.99 }) ➞ true\n\nfreeShipping({ \"Monopoly\": 11.99, \"Secret Hitler\": 35.99, \"Bananagrams\": 13.99 }) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Ignore tax or additional fees when calculating the total order cost.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"objects",
			"validation"
		],
		"tests": [
			"Test.assertEquals(freeShipping({'Shampoo' : 5.99, 'Rubber Ducks': 15.99}), false)",
			"Test.assertEquals(freeShipping({'Flatscreen TV': 399.99}), true)",
			"Test.assertEquals(freeShipping({'Monopoly': 11.99, 'Secret Hitler': 35.99, 'Bananagrams': 13.99}), true)",
			"Test.assertEquals(freeShipping({'Scrabble': 12.32, 'Jenga': 5.55, 'Clue': 20.00}), false)",
			"Test.assertEquals(freeShipping({'Elephant Plushie': 40.55, 'Octopus Plushie': 20.33, 'Spongebob Plushie': 20.00}), true)"
		],
		"starterFn": [
			"1\nfunction freeShipping(order) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5qYYauQwYwxz3nd9R"
	},
	{
		"title": "Fix the Spacing",
		"description": "<p><span>Additional spaces have been added to a sentence. Return the correct sentence by removing them. All words should be separated by one space, and there should be no spaces at the beginning or end of the sentence.</span></p><h3><span>Examples</span></h3><pre><code>correctSpacing(\"The film   starts       at      midnight. \")\n➞ \"The film starts at midnight.\"\n\ncorrectSpacing(\"The     waves were crashing  on the     shore.   \")\n➞ \"The waves were crashing on the shore.\"\n\ncorrectSpacing(\" Always look on    the bright   side of  life.\")\n➞ \"Always look on the bright side of life.\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(correctSpacing(\" A  glittering  gem     is    not   enough.  \"), \"A glittering gem is not enough.\")",
			"Test.assertEquals(correctSpacing(\"   She      did  her best  to  help    him.  \"), \"She did her best to help him.\")",
			"Test.assertEquals(correctSpacing(\"  They      made  sure   to get   there  early. \"), \"They made sure to get there early.\")",
			"Test.assertEquals(correctSpacing(\"  She  did   her      best     to   help him. \"), \"She did her best to help him.\")",
			"Test.assertEquals(correctSpacing(\"      I     love  eating    toasted  cheese   and tuna  sandwiches.\"), \"I love eating toasted cheese and tuna sandwiches.\")",
			"Test.assertEquals(correctSpacing(\"  There     were  foggy   conditions on   the      trail.   \"), \"There were foggy conditions on the trail.\")",
			"Test.assertEquals(correctSpacing(\"     The  roads   were  impassable  due to      snow.  \"), \"The roads were impassable due to snow.\")",
			"Test.assertEquals(correctSpacing(\" Better   to      paint  with  bold  colors.   \"), \"Better to paint with bold colors.\")",
			"Test.assertEquals(correctSpacing(\"     Remember to  stretch      before you  run.  \"), \"Remember to stretch before you run.\")",
			"Test.assertEquals(correctSpacing(\"  You  rarely    see  a royal   flush     in   poker. \"), \"You rarely see a royal flush in poker.\")",
			"Test.assertEquals(correctSpacing(\"  She was too      short     to   see    over  the   fence.   \"), \"She was too short to see over the fence.\")",
			"Test.assertEquals(correctSpacing(\"   I   will  post     the letter      tonight.  \"), \"I will post the letter tonight.\")",
			"Test.assertEquals(correctSpacing(\" He      could  not remember   a     thing.   \"), \"He could not remember a thing.\")",
			"Test.assertEquals(correctSpacing(\"      Sometimes     it    is  better   to  just walk away.\"), \"Sometimes it is better to just walk away.\")",
			"Test.assertEquals(correctSpacing(\" A   lack   of      stirring  makes  the sauce     stick.  \"), \"A lack of stirring makes the sauce stick.\")",
			"Test.assertEquals(correctSpacing(\"   I      really   want  my dessert.  \"), \"I really want my dessert.\")",
			"Test.assertEquals(correctSpacing(\"   Let      me help you  with     your    bags.   \"), \"Let me help you with your bags.\")",
			"Test.assertEquals(correctSpacing(\"      Around  the world     in   eighty   days.  \"), \"Around the world in eighty days.\")",
			"Test.assertEquals(correctSpacing(\"      The soup   of    the  day   is     lentil. \"), \"The soup of the day is lentil.\")",
			"Test.assertEquals(correctSpacing(\"    Winter is   coming. \"), \"Winter is coming.\")"
		],
		"starterFn": [
			"1\nfunction correctSpacing(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YkKJN9ngARPrpD9gL"
	},
	{
		"title": "Chocolate Dilemma",
		"description": "<p><span>Two sisters are eating chocolate, whose pieces are represented as subarrays of </span><code>[l x w]</code><span>.</span></p><p><span>Write a function that returns </span><code>true</code><span> if the </span><strong><span>total area</span></strong><span> of chocolate is the same for each sister.</span></p><p><span>To illustrate:</span></p><pre><code>testFairness([[4, 3], [2, 4], [1, 2]],\n[[6, 2], [4, 2], [1, 1], [1, 1]])\n➞ true\n\n// Agatha's pieces: [4, 3], [2, 4], [1, 2]\n// Bertha's pieces: [6, 2], [4, 2], [1, 1], [1, 1]\n\n// Total area of Agatha's chocolate\n// 4x3 + 2x4 + 1x2 = 12 + 8 + 2 = 22\n\n// Total area of Bertha's chocolate is:\n// 6x2 + 4x2 + 1x1 + 1x1 = 12 + 8 + 1 + 1 = 22</code></pre><h3><span>Examples</span></h3><pre><code>testFairness([[1, 2], [2, 1]], [[2, 2]]) ➞ true\n\ntestFairness([[1, 2], [2, 1]], [[2, 2], [4, 4]]) ➞ false\n\ntestFairness([[2, 2], [2, 2], [2, 2], [2, 2]], [[4, 4]]) ➞ true\n\ntestFairness([[1, 5], [6, 3], [1, 1]], [[7, 1], [2, 2], [1, 1]]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions"
		],
		"tests": [
			"Test.assertEquals(testFairness([[1,5], [6,3], [1,1]], [[7,1], [2,2], [1,1]]), false);",
			"Test.assertEquals(testFairness([[2,2], [2,2], [2,2], [2,2]], [[4,4]]), true);",
			"Test.assertEquals(testFairness([[1,2], [2,1]], [[2,2]]), true);",
			"Test.assertEquals(testFairness([[1,2], [2,1]], [[2,2], [4,4]]), false);",
			"Test.assertEquals(testFairness([[2,4], [1,1], [11,1]], [[2,2], [4,4]]), true);"
		],
		"starterFn": [
			"1\nfunction testFairness(agatha, bertha) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SLsJZd8EzW8nDoT5f"
	},
	{
		"title": "One Button Messaging Device",
		"description": "<p><span>Imagine a messaging device with only one button. For the letter </span><strong><span>A</span></strong><span>, you press the button </span><strong><span>one time</span></strong><span>, for </span><strong><span>E</span></strong><span>, you press it </span><strong><span>five times</span></strong><span>, for </span><strong><span>G</span></strong><span>, it's pressed </span><strong><span>seven times</span></strong><span>, etc, etc.</span></p><p><span>Write a function that takes a string (the message) and returns the total number of times the button is pressed.</span></p><h3><span>Examples</span></h3><pre><code>howManyTimes(\"abde\") ➞ 12\n\nhowManyTimes(\"azy\") ➞ 52\n\nhowManyTimes(\"qudusayo\") ➞ 123</code></pre><h3><span>Notes</span></h3><p><span>Ignore spaces.</span></p>",
		"publishedBy": "Qudusayo",
		"publishedByUrl": "https://edabit.com/user/86Cs3P5qT5Pyrwhj7",
		"language": "JavaScript",
		"tags": [
			"logic",
			"loops",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(howManyTimes(\"qudusayo\"), 123)",
			"Test.assertEquals(howManyTimes(\"que\"), 43)",
			"Test.assertEquals(howManyTimes(\"abd\"), 7)"
		],
		"starterFn": [
			"1\nfunction howManyTimes(msg) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TEvX5dzA4RS7ZLtxe"
	},
	{
		"title": "Last Digit Ultimate",
		"description": "<p><span>Your job is to create a function, that takes 3 numbers: </span><code>a, b, c</code><span> and returns </span><code>true</code><span> if the last digit of (the last digit of </span><code>a</code><span> * the last digit of </span><code>b</code><span>) = the last digit of </span><code>c</code><span>. Check examples for explanation.</span></p><h3><span>Examples</span></h3><pre><code>lastDig(25, 21, 125) ➞ true\n// The last digit of 25 is 5, the last digit of 21 is 1, and the last\n// digit of 125 is 5, and the last digit of 5*1 = 5, which is equal\n// to the last digit of 125(5).\n\nlastDig(55, 226, 5190) ➞ true\n// The last digit of 55 is 5, the last digit of 226 is 6, and the last\n// digit of 5190 is 0, and the last digit of 5*6 = 30 is 0, which is\n// equal to the last digit of 5190(0).\n\nlastDigit(12, 215, 2142) ➞ false\n// The last digit of 12 is 2, the last digit of 215 is 5, and the last\n// digit of 2142 is 2, and the last digit of 2*5 = 10 is 0, which is\n// not equal to the last digit of 2142(2).</code></pre><h3><span>Notes</span></h3><ul><li><span>If you still don't understand:</span><ul><li><span>The last digit of a = aa, the last digit of b = bb, and the last digit of c = cc.</span></li><li><span>Return </span><code>true</code><span> if the last digit of aa</span><span>*</span><span>bb is equal to cc, and </span><code>false</code><span> otherwise.</span></li></ul></li><li><span>Numbers can be negative.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(lastDig(1, 1, 1), true)",
			"Test.assertEquals(lastDig(12, 15, 10), true)",
			"Test.assertEquals(lastDig(15228, 9209, 72162), true)",
			"Test.assertEquals(lastDig(15, 1, 1), false)",
			"Test.assertEquals(lastDig(123, 15, 10), false)",
			"Test.assertEquals(lastDig(5213, 99219, 6165), false)",
			"Test.assertEquals(lastDig(1523, 513, 512), false)",
			"Test.assertEquals(lastDig(-15, 1, 1), false, \"Should work with negative numbers.\")",
			"Test.assertEquals(lastDig(123, -15, 10), false, \"Should work with negative numbers.\")",
			"Test.assertEquals(lastDig(-12, 15, -10), true, \"Should work with negative numbers.\")",
			"Test.assertEquals(lastDig(15228, -9209, -72162), true, \"Should work with negative numbers.\")"
		],
		"starterFn": [
			"1\nfunction lastDig(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RQtF47HMPbHDGBeW6"
	},
	{
		"title": "Intro to Nested Loops",
		"description": "<p><span>Imagine a school that kids attend for 6 years. In each year, there are five groups started, marked with the letters </span><em><span>a, b, c, d, e</span></em><span>. For the first year, the groups are </span><em><span>1a, 1b, 1c, 1d, 1e</span></em><span> and for the last year, the groups are </span><em><span>6a, 6b, 6c, 6d, 6e</span></em><span>.</span></p><p><span>Write a function that returns the groups in the school by year (as a string), separated with a comma and a space in the form of </span><code>\"1a, 1b, 1c, 1d, 1e, 2a, 2b (....) 5d, 5e, 6a, 6b, 6c, 6d, 6e\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>printAllGroups() ➞ \"1a, 1b, 1c, 1d, 1e, 2a, 2b, 2c, 2d, 2e, 3a, 3b, 3c, 3d, 3e, 4a, 4b, 4c, 4d, 4e, 5a, 5b, 5c, 5d, 5e, 6a, 6b, 6c, 6d, 6e \"</code></pre><h3><span>Notes</span></h3><p><span>Use nested \"for\" loops to achieve this, as well as the array of </span><code>[\"a\", \"b\", \"c\", \"d\", \"e\"]</code><span> groups.</span></p>",
		"publishedBy": "gorosz",
		"publishedByUrl": "https://edabit.com/user/DLs5fZKpcH8mbjSZK",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertNotEquals(printAllGroups(), \"1a, 1b, 1c, 1d, 1e, 2a, 2b, 2c, 2d, 2e, 3a, 3b, 3c, 3d, 3e, 4a, 4b, 4c, 4d, 4e, 5a, 5b, 5c, 5d, 5e, 6a, 6b, 6c, 6d, 6e, \", \"The was almost correct - but you added an unncessary \", \" after the last group.\")",
			"Test.assertEquals(printAllGroups(), \"1a, 1b, 1c, 1d, 1e, 2a, 2b, 2c, 2d, 2e, 3a, 3b, 3c, 3d, 3e, 4a, 4b, 4c, 4d, 4e, 5a, 5b, 5c, 5d, 5e, 6a, 6b, 6c, 6d, 6e\", \"The output was not correct.\")"
		],
		"starterFn": [
			"1\nfunction printAllGroups() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/spA7xt9pND22mNuWS"
	},
	{
		"title": "Simon Says",
		"description": "<p><span>Create a function that takes in two arrays and returns </span><code>true</code><span> if the second array follows the first array by </span><strong><span>one</span></strong><span> element, and </span><code>false</code><span> otherwise. In other words, determine  if the second array is the first array shifted to the right by 1.</span></p><h3><span>Examples</span></h3><pre><code>simonSays([1, 2], [5, 1]) ➞ true\n\nsimonSays([1, 2], [5, 5]) ➞ false\n\nsimonSays([1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) ➞ true\n\nsimonSays([1, 2, 3, 4, 5], [5, 5, 1, 2, 3]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Both input arrays will be of the same length, and will have a minimum length of 2.</span></li><li><span>The values of the </span><code>0</code><span>-indexed element in the first array and the </span><code>n-1</code><span>th indexed element in the second array do not matter.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(simonSays(",
			"  [1, 2, 3, 4, 5],",
			"  [0, 1, 2, 3, 4]",
			"), true)",
			"​",
			"Test.assertEquals(simonSays(",
			"  [1, 2, 3, 4, 5],",
			"  [5, 5, 1, 2, 3]",
			"), false)",
			"​",
			"Test.assertEquals(simonSays(",
			"  [1, 2],",
			"  [5, 1]",
			"), true)",
			"​",
			"Test.assertEquals(simonSays(",
			"  [1, 2],",
			"  [5, 5]",
			"), false)",
			"​",
			"Test.assertEquals(simonSays(",
			"  [1, 2, 3],",
			"  [0, 1, 2]",
			"), true)"
		],
		"starterFn": [
			"1\nfunction simonSays(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/i7gQkdYrx4yyW7uLp"
	},
	{
		"title": "Word Nests",
		"description": "<p><span>A word nest is created by taking a starting word, and generating a new string by placing the word </span><em><span>inside</span></em><span> itself. This process is then repeated.</span></p><p><span>Nesting 3 times with the word \"incredible\":</span></p><pre><code>start  = incredible\nfirst  = incre|incredible|dible\nsecond = increin|incredible|credibledible\nthird  = increinincr|incredible|ediblecredibledible</code></pre><p><span>The final nest is </span><code>\"increinincrincredibleediblecredibledible\"</code><span> (depth = 3).</span></p><p><span>Given a </span><em><span>starting word</span></em><span> and the </span><em><span>final word nest</span></em><span>, return the </span><em><span>depth</span></em><span> of the word nest.</span></p><h3><span>Examples</span></h3><pre><code>wordNest(\"floor\", \"floor\") ➞ 0\n\nwordNest(\"code\", \"cocodccococodededeodeede\") ➞ 5\n\nwordNest(\"incredible\", \"increinincrincredibleediblecredibledible\") ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordNest(\"engagement\", \"engenengagemengagemeengagementntentgagementagement\"), 4)",
			"Test.assertEquals(wordNest(\"passage\", \"passpassageage\"), 1)",
			"Test.assertEquals(wordNest(\"factory\", \"ffacfactofactfafactoryctoryoryrytoryactory\"), 5)",
			"Test.assertEquals(wordNest(\"deny\", \"ddededdddenyenyenyenynynyeny\"), 6)",
			"Test.assertEquals(wordNest(\"jinx\", \"jijijjijjijijjinxinxnxnxinxnxinxnxnx\"), 8)",
			"Test.assertEquals(wordNest(\"deal\", \"dedddealealealal\"), 3)",
			"Test.assertEquals(wordNest(\"paradox\", \"parparaparadoxdoxadox\"), 2)",
			"Test.assertEquals(wordNest(\"meet\", \"mmememmeeteeteteteet\"), 4)",
			"Test.assertEquals(wordNest(\"last\", \"lalastst\"), 1)",
			"Test.assertEquals(wordNest(\"silence\", \"sisilsisilencelenceencelence\"), 3)",
			"Test.assertEquals(wordNest(\"inflate\", \"inflate\"), 0)",
			"Test.assertEquals(wordNest(\"ruin\", \"rurrurrrrrrururuinininuinuinuinuinuininuinin\"), 10)",
			"Test.assertEquals(wordNest(\"episode\", \"episoepisepisepiepiepiepisoepisodedesodesodesodeodeodede\"), 7)",
			"Test.assertEquals(wordNest(\"dictate\", \"dictadicdidictdiddictadictadictateteteictatectateatectatetatete\"), 8)",
			"Test.assertEquals(wordNest(\"caller\", \"callcacacalccallcacaccallerallerllerllererallerlerllerllerer\"), 9)",
			"Test.assertEquals(wordNest(\"sweater\", \"sweatsweswsweatereateraterer\"), 3)",
			"Test.assertEquals(wordNest(\"measure\", \"measumememeasumemmeasmmeasureeasureureeasureasurereasureasurere\"), 8)",
			"Test.assertEquals(wordNest(\"relieve\", \"relierelierelrelierrelieveelieveveieveveve\"), 5)",
			"Test.assertEquals(wordNest(\"home\", \"hohohohhohohhhohhomeomemeomeomememeomemememe\"), 10)",
			"Test.assertEquals(wordNest(\"profession\", \"profesprofessionsion\"), 1)",
			"Test.assertEquals(wordNest(\"continuous\", \"contcontcontinuoconcocontinuousntinuoustinuoususinuousinuous\"), 5)"
		],
		"starterFn": [
			"1\nfunction wordNest(word, nest) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yDQnwtscs6sRi27we"
	},
	{
		"title": "Days in a Month",
		"description": "<p><span>Create a function that takes the month and year (as integers) and returns the number of days in that month.</span></p><h3><span>Examples</span></h3><pre><code>days(2, 2018) ➞ 28\n\ndays(4, 654) ➞ 30\n\ndays(2, 200) ➞ 28\n\ndays(2, 1000) ➞ 28</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"dates"
		],
		"tests": [
			"Test.assertEquals(days(1, 2018), 31, 'Should show the correct day amount for January');",
			"Test.assertEquals(days(2, 2018), 28, 'Should show the correct day amount for February on a non-leap year');",
			"Test.assertEquals(days(3, 2018), 31, 'Should show the correct day amount for March');",
			"Test.assertEquals(days(4, 2018), 30, 'Should show the correct day amount for April');",
			"Test.assertEquals(days(5, 2018), 31, 'Should show the correct day amount for May');",
			"Test.assertEquals(days(6, 2018), 30, 'Should show the correct day amount for June');",
			"Test.assertEquals(days(7, 2018), 31, 'Should show the correct day amount for July');",
			"Test.assertEquals(days(8, 2018), 31, 'Should show the correct day amount for August');",
			"Test.assertEquals(days(9, 2018), 30, 'Should show the correct day amount for September');",
			"Test.assertEquals(days(10, 2018), 31, 'Should show the correct day amount for October');",
			"Test.assertEquals(days(11, 2018), 30, 'Should show the correct day amount for November');",
			"Test.assertEquals(days(12, 2018), 31, 'Should show the correct day amount for December');",
			"Test.assertEquals(days(2, 2004), 29, 'Should show the correct day amount for February on a leap year that is divisible by 4 but not 100');",
			"Test.assertEquals(days(2, 1800), 28, 'Should show the correct day amount for February on a leap year that is divisible by 100 but not 400 ');",
			"Test.assertEquals(days(2, 1600), 29, 'Should show the correct day amount for February on a leap year that is divisible by 100 and 400');"
		],
		"starterFn": [
			"1\nfunction days(month, year) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wNhCHwPXNLJwrTith"
	},
	{
		"title": "Mini Peaks",
		"description": "<p><span>Write a function that returns all the elements in an array that are </span><strong><span>strictly greater</span></strong><span> than their adjacent left and right neighbors.</span></p><h3><span>Examples</span></h3><pre><code>miniPeaks([4, 5, 2, 1, 4, 9, 7, 2]) ➞ [5, 9]\n\nminiPeaks([1, 2, 1, 1, 3, 2, 5, 4, 4]) ➞ [2, 3, 5]\n\nminiPeaks([1, 2, 3, 4, 5, 6]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>Do not count boundary numbers, since they only have </span><strong><span>one</span></strong><span> left/right neighbor.</span></li><li><span>If no such numbers exist, return an empty array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(miniPeaks([4, 5, 2, 1, 4, 9, 7, 2]), [5, 9])",
			"Test.assertSimilar(miniPeaks([1, 2, 1, 1, 3, 2, 5, 4, 4]), [2, 3, 5])",
			"Test.assertSimilar(miniPeaks([1, 2, 3, 4, 5, 6]), [])",
			"Test.assertSimilar(miniPeaks([6, 4, 3]), [])",
			"Test.assertSimilar(miniPeaks([1, 1, 1, 1, 2, 1, 1, 1]), [2])",
			"Test.assertSimilar(miniPeaks([1, 9, 1, 8, 2, 7, 6]), [9, 8, 7])",
			"Test.assertSimilar(miniPeaks([7, 8, 7, 8, 7, 8, 5, 1, 2, 0]), [8, 8, 8, 2])"
		],
		"starterFn": [
			"1\nfunction miniPeaks(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jJmSKcXeYWC3pTjBT"
	},
	{
		"title": "Switcharoo",
		"description": "<p><span>Create a function that takes a string and returns a new string with its first and last characters swapped, except under three conditions:</span></p><ol><li><span>If the length of the string is less than two, return </span><code>\"Incompatible.\"</code><span>.</span></li><li><span>If the argument is not a string, return </span><code>\"Incompatible.\"</code><span>.</span></li><li><span>If the first and last characters are the same, return </span><code>\"Two's a pair.\"</code><span>.</span></li></ol><h3><span>Examples</span></h3><pre><code>flipEndChars(\"Cat, dog, and mouse.\") ➞ \".at, dog, and mouseC\"\n\nflipEndChars(\"ada\") ➞ \"Two's a pair.\"\n\nflipEndChars(\"Ada\") ➞ \"adA\"\n\nflipEndChars(\"z\") ➞ \"Incompatible.\"\n\nflipEndChars([1, 2, 3]) ➞ \"Incompatible.\"</code></pre><h3><span>Notes</span></h3><p><span>Tests are case sensitive (e.g. \"A\" and \"a\" are not the same character).</span></p>",
		"publishedBy": "Tony",
		"publishedByUrl": "https://edabit.com/user/ketYXr2XoMEbbgn5W",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(flipEndChars(\"Cat, dog, and mouse.\"), \".at, dog, and mouseC\");",
			"Test.assertEquals(flipEndChars(\"Anna, Banana\"), \"anna, BananA\");",
			"Test.assertEquals(flipEndChars(\"[]\"), \"][\");",
			"Test.assertEquals(flipEndChars(\"\"), \"Incompatible.\");",
			"Test.assertEquals(flipEndChars([1, 2, 3]), \"Incompatible.\");",
			"Test.assertEquals(flipEndChars(\"dfdkf49824fdfdfjhd\"), \"Two's a pair.\");",
			"Test.assertEquals(flipEndChars(\"#343473847#\"), \"Two's a pair.\");"
		],
		"starterFn": [
			"1\nfunction flipEndChars(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2dcXsuTD68iRK5MiT"
	},
	{
		"title": "Check if One Array is a Subset of Another",
		"description": "<p><span>Array </span><em><span>A</span></em><span> is </span><strong><span>contained inside</span></strong><span> array </span><em><span>B</span></em><span> if each element in </span><em><span>A</span></em><span> also exists in </span><em><span>B</span></em><span>. </span></p><p><span>The number of times a number is present doesn't matter. In other words, if we transformed both arrays into sets, </span><em><span>A</span></em><span> would be a subset of </span><em><span>B</span></em><span>.</span></p><pre><code>A = [3, 3, 9, 9, 9, 5]\nB = [1, 3, 9, 5, 8, 44, 44]\n\nA_Set = [3, 9, 5]\nB_Set = [1, 3, 9, 5, 8, 44]\n\n// A_Set is a subset of B_Set</code></pre><p><span>Create a function that determines if the first array is a subset of the second.</span></p><h3><span>Examples</span></h3><pre><code>subset([1, 3], [1, 3, 3, 5]) ➞ true\n\nsubset([4, 8, 7], [7, 4, 4, 4, 9, 8]) ➞ true\n\nsubset([1, 3], [1, 33]) ➞ false\n\nsubset([1, 3, 10], [10, 8, 8, 8]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Each input array will have at least one element.</span></li><li><span>Check the resources tab for a hint.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(subset([1, 3], [1, 3, 3, 5]), true)",
			"Test.assertEquals(subset([4, 8, 7], [7, 4, 4, 4, 9, 8]), true)",
			"Test.assertEquals(subset([1, 3], [1, 33]), false)",
			"Test.assertEquals(subset([1, 3, 10], [10, 8, 8, 8]), false)",
			"Test.assertEquals(subset([5, 9, 13], [13, 9, 5]), true)",
			"Test.assertEquals(subset([5, 9, 13], [13, 9, 5, 1, 1, 1]), true)",
			"Test.assertEquals(subset([5, 9, 13], [13, 5, 1, 1, 1]), false)"
		],
		"starterFn": [
			"1\nfunction subset(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/m8L8PgCTxAbBbnuYf"
	},
	{
		"title": "Malthusian Catastrophe",
		"description": "<p><span>A man named Thomas Malthus described what is now called a </span><em><span>Malthusian Catastrophe</span></em><span>. According to him, food production grows by a fixed amount, but population grows by a percentage. So, the food supply would soon be insufficient for the population.</span></p><p><span>Your job is to find out when that will occur. For this challenge, assume 1 population needs 1 unit of food production. Food production and population both start at 100. The year starts at 0.</span></p><p><span>The catastrophe happens when the population is larger than food production.</span></p><p><span>The function will pass:</span></p><ul><li><code>foodGrowth</code><span> ⁠— an integer ⁠— food production increase per year.</span></li><li><code>popMult</code><span> ⁠— a floating-point number ⁠— population growth multiplier per year.</span></li></ul><h3><span>Examples</span></h3><pre><code>malthusian(4255, 1.41) ➞ 20\n// { foodProd: 85,200, pop: 96,467.77..., year: 20 }\n\nmalthusian(9433, 1.09) ➞ 107\n// { foodProd: 1,009,431, pop: 1,010,730.28..., year: 107 }\n\nmalthusian(5879, 1.77) ➞ 12\n// { foodProd: 70,648, pop: 94,553.84..., year: 12 }</code></pre><h3><span>Notes</span></h3><ul><li><span>Return the year that the overtake happens, not the next year.</span></li><li><span>Make sure you don't make the mistake of adding a year,  </span><em><span>then</span></em><span> calculating the changes to </span><strong><span>food</span></strong><span> and </span><strong><span>population</span></strong><span>. That way, you miss year 0.</span></li><li><span>If the population and food production are equal, that is </span><em><span>not</span></em><span> a catastrophe.</span></li></ul>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"dates",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(malthusian(3900, 1.26), 31)",
			"Test.assertEquals(malthusian(3367, 1.16), 51)",
			"Test.assertEquals(malthusian(2393, 1.86), 9)",
			"Test.assertEquals(malthusian(6560, 1.66), 14)",
			"Test.assertEquals(malthusian(8481, 1.35), 26)",
			"Test.assertEquals(malthusian(3805, 1.98), 9)",
			"Test.assertEquals(malthusian(9492, 1.06), 166)",
			"Test.assertEquals(malthusian(8278, 1.35), 26)",
			"Test.assertEquals(malthusian(1228, 1.91), 7)",
			"Test.assertEquals(malthusian(4791, 1.25), 34)",
			"Test.assertEquals(malthusian(8194, 1.12), 78)",
			"Test.assertEquals(malthusian(7418, 1.63), 15)",
			"Test.assertEquals(malthusian(8700, 1.18), 51)",
			"Test.assertEquals(malthusian(1066, 1.78), 8)",
			"Test.assertEquals(malthusian(811, 1.46), 13)",
			"Test.assertEquals(malthusian(7836, 1.33), 27)",
			"Test.assertEquals(malthusian(4082, 1.54), 15)",
			"Test.assertEquals(malthusian(4859, 1.87), 10)",
			"Test.assertEquals(malthusian(4656, 1.44), 19)",
			"Test.assertEquals(malthusian(2214, 1.53), 14)",
			"Test.assertEquals(malthusian(1240, 1.10), 72)",
			"Test.assertEquals(malthusian(4434, 1.21), 40)",
			"Test.assertEquals(malthusian(2995, 1.51), 15)",
			"Test.assertEquals(malthusian(578, 1.10), 62)",
			"Test.assertEquals(malthusian(9768, 1.47), 20)",
			"Test.assertEquals(malthusian(1508, 1.10), 74)"
		],
		"starterFn": [
			"1\nfunction malthusian(foodGrowth, popMult) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4BeTkEwBXeuSKJTYe"
	},
	{
		"title": "GCD of Two Numbers",
		"description": "<p><span>Write a function that returns the </span><strong><span>greatest common divisor (GCD)</span></strong><span> of two integers.</span></p><h3><span>Examples</span></h3><pre><code>gcd(32, 8) ➞ 8\n\ngcd(8, 12) ➞ 4\n\ngcd(17, 13) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Both values will be positive.</span></li><li><span>The </span><strong><span>GCD</span></strong><span> is the largest factor that divides both numbers.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(gcd(32, 8), 8)",
			"Test.assertEquals(gcd(8, 12), 4)",
			"Test.assertEquals(gcd(17, 13), 1)",
			"Test.assertEquals(gcd(14, 7), 7)",
			"Test.assertEquals(gcd(32, 16), 16)",
			"Test.assertEquals(gcd(17, 100), 1)",
			"Test.assertEquals(gcd(55, 20), 5)",
			"Test.assertEquals(gcd(55, 22), 11)"
		],
		"starterFn": [
			"1\nfunction gcd(n1, n2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3HPSLLjh8Go5QPq3C"
	},
	{
		"title": "Puzzle Pieces",
		"description": "<p><span>Write a function that takes two arrays and adds the first element in the first array with the first element in the second array, the second element in the first array with the second element in the second array, etc, etc. Return </span><code>true</code><span> if all element combinations add up to the same number. Otherwise, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>puzzlePieces([1, 2, 3, 4], [4, 3, 2, 1]) ➞ true\n// 1 + 4 = 5;  2 + 3 = 5;  3 + 2 = 5;  4 + 1 = 5\n// Both arrays sum to [5, 5, 5, 5]\n\npuzzlePieces([1, 8, 5, 0, -1, 7], [0, -7, -4, 1, 2, -6]) ➞ true\n\npuzzlePieces([1, 2], [-1, -1]) ➞ false\n\npuzzlePieces([9, 8, 7], [7, 8, 9, 10]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Each array will have at least one element.</span></li><li><span>Return </span><code>false</code><span> if both arrays are of different length.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(puzzlePieces([1, 2, 3, 4], [4, 3, 2, 1]), true)",
			"Test.assertEquals(puzzlePieces([1, 8, 5, 0, -1, 7], [0, -7, -4, 1, 2, -6]), true)",
			"Test.assertEquals(puzzlePieces([2, 1, 1], [-2, -1, -1]), true)",
			"Test.assertEquals(puzzlePieces([2], [-2]), true)",
			"Test.assertEquals(puzzlePieces([5, -1], [-6, 0]), true)",
			"Test.assertEquals(puzzlePieces([0, 0, 0, 0, 0], [1, 1, 1, 1, 1]), true)",
			"Test.assertEquals(puzzlePieces([1, 2], [-1, -1]), false)",
			"Test.assertEquals(puzzlePieces([9, 8, 7], [7, 8, 9, 10]), false)",
			"Test.assertEquals(puzzlePieces([9, 8, 7], [7, 8, 9, 16]), false)",
			"Test.assertEquals(puzzlePieces([1, 1, 1], [1, 1, 2]), false)",
			"Test.assertEquals(puzzlePieces([1, 8, 1], [1, -8, -1]), false)",
			"Test.assertEquals(puzzlePieces([0, 0, 0, 0, 0], [1, 1, 0, 1, 1]), false)",
			"Test.assertEquals(puzzlePieces([0, 0, 0, 0, 0], [1, 1, 1, 1]), false)"
		],
		"starterFn": [
			"1\nfunction puzzlePieces(a1, a2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Zu4LyLXhd9e49krFP"
	},
	{
		"title": "Ping Pong!",
		"description": "<p><span>A game of table tennis almost always sounds like </span><em><span>Ping!</span></em><span> followed by </span><em><span>Pong!</span></em><span> Therefore,  you know that Player 2 has won if you hear </span><em><span>Pong!</span></em><span> as the last sound (since Player 1 didn't return the ball back).</span></p><p><span>Given an array of </span><em><span>Ping!</span></em><span>, create a function that inserts </span><em><span>Pong!</span></em><span> in between each element. Also:</span></p><ul><li><span>If </span><code>win</code><span> equals </span><code>true</code><span>, end the list with </span><em><span>Pong!</span></em><span>.</span></li><li><span>If </span><code>win</code><span> equals </span><code>false</code><span>, end with </span><em><span>Ping!</span></em><span> instead.</span></li></ul><h3><span>Examples</span></h3><pre><code>pingPong([\"Ping!\"], true) ➞ [\"Ping!\", \"Pong!\"]\n\npingPong([\"Ping!\", \"Ping!\"], false) ➞ [\"Ping!\", \"Pong!\", \"Ping!\"]\n\npingPong([\"Ping!\", \"Ping!\", \"Ping!\"], true) ➞ [\"Ping!\", \"Pong!\", \"Ping!\", \"Pong!\", \"Ping!\", \"Pong!\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>You will always return the ball (i.e. the Pongs are yours).</span></li><li><span>Player 1 serves the ball and makes </span><em><span>Ping!</span></em><span>.</span></li><li><span>Return an array of strings.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"games"
		],
		"tests": [
			"Test.assertSimilar(pingPong([\"Ping!\", \"Ping!\", \"Ping!\"], true), [\"Ping!\", \"Pong!\", \"Ping!\", \"Pong!\", \"Ping!\", \"Pong!\"])",
			"Test.assertSimilar(pingPong([\"Ping!\", \"Ping!\"], false), [\"Ping!\", \"Pong!\", \"Ping!\"])",
			"Test.assertSimilar(pingPong([\"Ping!\"], true) , [\"Ping!\", \"Pong!\"])",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction pingPong(arr, win) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/S7oxczk4Rtu99kaZ8"
	},
	{
		"title": "Fix the Code: Un-Mutating an Array",
		"description": "<p><span>Your friend is trying to write a function to accomplish the following transformations:</span></p><pre><code>let x = [3, 3, 3, 3, 3, 3, 3]\n\n// Each time x is called, the following results are shown:\n\nchange(x, 0)  // [3, 3, 3, 3, 3, 3, 3]\nchange(x, 1)  // [3, 2, 2, 2, 2, 2, 3]\nchange(x, 2)  // [3, 2, 1, 1, 1, 2, 3]\nchange(x, 3)  // [3, 2, 1, 0, 1, 2, 3]</code></pre><p><span>Note: </span><strong><span>The </span><code>change()</code><span> function should not mutate the original array</span></strong><span>. After each call to the function, the original </span><code>x</code><span> should still equal </span><code>[3, 3, 3, 3, 3, 3, 3]</code><span>.</span></p><p><span>He comes up with the following code:</span></p><pre><code>function change(x, times) {\n  for(let i = 0; i &lt; x.length; i++) {\n    let j = 1; \n    while (j &lt;= times) {\n      if (i &gt;= j &amp;&amp; i &lt; x.length-j) {\n        x[i]--; \n      }\n      j++; \n    }\n  }\n  return x; \n}</code></pre><p><span>Oops! The code appears to </span><strong><span>mutate</span></strong><span> the original array. Fix this incorrect code so that the function </span><strong><span>no longer mutates the original array</span></strong><span>.</span></p><p><span>See below:</span></p><h3><span>Examples</span></h3><pre><code>let x = [3, 3, 3, 3, 3, 3, 3]\n\n// What we want:\nchange(x, 2) =&gt; [3, 2, 1, 1, 1, 2, 3]\n\nchange(x, 2) =&gt; [3, 2, 1, 1, 1, 2, 3]\n\n// What we get:\nchange(x, 2) =&gt; [3, 2, 1, 1, 1, 2, 3]  // Good so far...\n\nchange(x, 2) =&gt; [3, 1, -1, -1, -1, 1, 3] // Array is mutated :(</code></pre><h3><span>Notes</span></h3><ul><li><span>If this is confusing, copy and paste the incorrect code in a REPL environment and play around with the code to understand what the function is doing.</span></li><li><span>Hint: Try to make a copy of the input array.</span></li><li><span>If this looks familiar, it is part of a solution for the </span><strong><span>Concentric Rug</span></strong><span> problem.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"loops",
			"scope"
		],
		"tests": [
			"Test.assertSimilar(change(x, 2), [3, 2, 1, 1, 1, 2, 3])",
			"Test.assertSimilar(change(x, 2), [3, 2, 1, 1, 1, 2, 3])",
			"Test.assertSimilar(change(x, 1), [3, 2, 2, 2, 2, 2, 3])",
			"Test.assertSimilar(change(x, 3), [3, 2, 1, 0, 1, 2, 3])"
		],
		"starterFn": [
			"1\n// As it stands, only 1/4 tests pass",
			"2\n// Fix the code so that all tests pass",
			"3\nfunction change(x, times) {",
			"4\n  for (let i = 0; i < x.length; i++) {",
			"5\n    let j = 1; ",
			"6\n    while (j <= times) {",
			"7\n      if (i >= j && i < x.length - j) {",
			"8\n        x[i]--; ",
			"9\n      }",
			"10\n      j++; ",
			"11\n    }",
			"12\n  }",
			"13\n  return x; ",
			"14\n}",
			"15\n​",
			"16\nlet x = [3, 3, 3, 3, 3, 3, 3]"
		],
		"url": "https://edabit.com/challenge/wTQpSEZPpPdyLtK9k"
	},
	{
		"title": "Recursion: String Palindromes",
		"description": "<p><span>Write a function that </span><strong><span>recursively</span></strong><span> determines if a string is a palindrome.</span></p><h3><span>Examples</span></h3><pre><code>isPalindrome(\"abcba\") ➞ true\n\nisPalindrome(\"b\") ➞ true\n\nisPalindrome(\"\") ➞ true\n\nisPalindrome(\"ad\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>An empty string counts as a palindrome.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"recursion",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPalindrome(\"abcba\"), true)",
			"Test.assertEquals(isPalindrome(\"abbba\"), true)",
			"Test.assertEquals(isPalindrome(\"abbbba\"), true)",
			"Test.assertEquals(isPalindrome(\"abccdba\"), false)",
			"Test.assertEquals(isPalindrome(\"abbaa\"), false)",
			"Test.assertEquals(isPalindrome(\"abbbbb\"), false)",
			"Test.assertEquals(isPalindrome(\"ad\"), false)",
			"Test.assertEquals(isPalindrome(\"b\"), true)",
			"Test.assertEquals(isPalindrome(\"\"), true)"
		],
		"starterFn": [
			"1\nfunction isPalindrome(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/K595YtSroZHAAzvhW"
	},
	{
		"title": "Split Item Codes",
		"description": "<p><span>You have an array of item codes with the following format: </span><code>\"[letters][digits]\"</code></p><p><span>Create a function that splits these strings into their alphabetic and numeric parts.</span></p><h3><span>Examples</span></h3><pre><code>splitCode(\"TEWA8392\") ➞ [\"TEWA\", 8392]\n\nsplitCode(\"MMU778\") ➞ [\"MMU\", 778]\n\nsplitCode(\"SRPE5532\") ➞ [\"SRPE\", 5532]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(splitCode(\"TEWA8392\"), [\"TEWA\", 8392])",
			"Test.assertSimilar(splitCode(\"MMU778\"), [\"MMU\", 778])",
			"Test.assertSimilar(splitCode(\"SRPE5532\"), [\"SRPE\", 5532])",
			"Test.assertSimilar(splitCode(\"SKU8977\"), [\"SKU\", 8977])",
			"Test.assertSimilar(splitCode(\"MCI5589\"), [\"MCI\", 5589])",
			"Test.assertSimilar(splitCode(\"WIEB3921\"), [\"WIEB\", 3921])"
		],
		"starterFn": [
			"1\nfunction splitCode(item) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Trog78Qz4bGNLFh6M"
	},
	{
		"title": "How Close to the Speed of Light?",
		"description": "<p><span>An ultrarelativistic particle is one whose speed </span><em><span>v</span></em><span> is very close to the speed of light </span><em><span>c</span></em><span> (or equivalently, one whose </span><em><span>β</span></em><span> = </span><em><span>v</span></em><span>/</span><em><span>c</span></em><span> is very close to 1). But a number like 0.9999999999999999999 is inconvenient to work with: calculators round it to 1, and trying to write it in scientific notation does the same (because any 9 you stop at gets rounded </span><em><span>up</span></em><span> by the following 9). It's better to work with the quantity (1 - </span><em><span>β</span></em><span>) instead.</span></p><p><span>Fortunately, we don't need to deal directly with </span><em><span>β</span></em><span> to calculate an ultrarelativistic particle's (1 - </span><em><span>β</span></em><span>). There are some other wieldier quantities that we can use to </span><em><span>approximate</span></em><span> (1 - </span><em><span>β</span></em><span>) with great precision. One of them is the particle's </span><strong><span>rapidity</span></strong><span>  </span><em><span>φ</span></em><span>, which is related to </span><em><span>β</span></em><span> by the equation:</span></p><pre><code>tanh φ = β</code></pre><p><span>(where tanh is the hyperbolic tangent function).</span></p><p><span>For an ultrarelativistic particle, the rapidity lets us approximate (1 - </span><em><span>β</span></em><span>) like this:</span></p><pre><code>1 - β ≈ sech(2φ)</code></pre><p><span>(where sech is the hyperbolic secant).</span></p><p><span>Write a function that takes an ultrarelativistic particle's rapidity (a number) and uses the approximation formula given above to return the particle's (1 - </span><em><span>β</span></em><span>) to three significant figures. The output should be a string in scientific notation, formatted like </span><code>\"6.63e-34\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>howCloseToC(3.14) ➞ \"3.75e-3\"\n\nhowCloseToC(42) ➞ \"6.61e-37\"\n\nhowCloseToC(355) ➞ \"8.95e-309\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Euphonic Sounds",
		"publishedByUrl": "https://edabit.com/user/mHT2bJb5SByfJ8yKS",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(howCloseToC(3.14), \"3.75e-3\")",
			"Test.assertEquals(howCloseToC(42), \"6.61e-37\")",
			"Test.assertEquals(howCloseToC(355), \"8.95e-309\")"
		],
		"starterFn": [
			"1\nfunction howCloseToC(rapidity) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9QHYZtK6k9PpQhMaR"
	},
	{
		"title": "Valid Hex Code",
		"description": "<p><span>Create a function that determines whether a string is a valid hex code.</span></p><p><span>A hex code must begin with a pound key </span><code>#</code><span> and is exactly 6 characters in length. Each character must be a digit from </span><code>0-9</code><span> or an alphabetic character from </span><code>A-F</code><span>. All alphabetic characters may be uppercase or lowercase.</span></p><h3><span>Examples</span></h3><pre><code>isValidHexCode(\"#CD5C5C\") ➞ true\n\nisValidHexCode(\"#EAECEE\") ➞ true\n\nisValidHexCode(\"#eaecee\") ➞ true\n\nisValidHexCode(\"#CD5C58C\") ➞ false\n// Length exceeds 6\n\nisValidHexCode(\"#CD5C5Z\") ➞ false\n// Not all alphabetic characters in A-F\n\nisValidHexCode(\"#CD5C&amp;C\") ➞ false\n// Contains unacceptable character\n\nisValidHexCode(\"CD5C5C\") ➞ false\n// Missing #</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isValidHexCode('#CD5C5C'), true)",
			"Test.assertEquals(isValidHexCode('#EAECEE'), true)",
			"Test.assertEquals(isValidHexCode('#eaecee'), true)",
			"Test.assertEquals(isValidHexCode('#CD5C58C'), false, 'Length exceeds 6.')",
			"Test.assertEquals(isValidHexCode('#CD5C5Z'), false, 'Alphabetic characters not in A-F.')",
			"Test.assertEquals(isValidHexCode('#CD5C&C'), false, 'Unacceptable character.')",
			"Test.assertEquals(isValidHexCode('CD5C5C'), false, 'Does not start with #.')",
			"Test.assertEquals(isValidHexCode('#123CCCD'), false, 'Length exceeds 6.')",
			"Test.assertEquals(isValidHexCode('#123456'), true)",
			"Test.assertEquals(isValidHexCode('#987654'), true)",
			"Test.assertEquals(isValidHexCode('#9876543'), false, 'Length exceeds 6.')",
			"Test.assertEquals(isValidHexCode('#CCCCCC'), true)",
			"Test.assertEquals(isValidHexCode('#ZCCZCC'), false, 'Not acceptable alphabetic characters.')",
			"Test.assertEquals(isValidHexCode('#Z88Z99'), false, 'Not acceptable alphabetic characters.')",
			"Test.assertEquals(isValidHexCode('#Z88!99'), false, 'Unacceptable character.')"
		],
		"starterFn": [
			"1\nfunction isValidHexCode(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cWvYKp8JTE9ozC6NF"
	},
	{
		"title": "Compound Interest",
		"description": "<p><span>Suppose that you invest $10,000 for 10 years at an interest rate of 6% compounded monthly. What will be the value of your investment at the end of the 10 year period?</span></p><p><span>Create a function that accepts the principal </span><code>p</code><span>, the term in years </span><code>t</code><span>, the interest rate </span><code>r</code><span>, and the number of compounding periods per year </span><code>n</code><span>. The function returns the value at the end of term rounded to the nearest cent.</span></p><p><span>For the example above:</span></p><pre><code>compoundInterest(10000, 10, 0.06, 12) ➞ 18193.97</code></pre><p><span>Note that the interest rate is given as a decimal and </span><code>n=12</code><span> because with monthly compounding there are 12 periods per year. Compounding can also be done annually, quarterly, weekly or daily.</span></p><h3><span>Examples</span></h3><pre><code>compoundInterest(100, 1, 0.05, 1) ➞ 105.0\n\ncompoundInterest(3500, 15, 0.1, 4) ➞ 15399.26\n\ncompoundInterest(100000, 20, 0.15, 365) ➞ 2007316.26</code></pre><h3><span>Notes</span></h3><p><span>See the </span><strong><span>Resources</span></strong><span> tab for the interest formula and more information.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(compoundInterest(100, 1, 0.05, 1), 105.0)",
			"Test.assertEquals(compoundInterest(3500, 15, 0.1, 4), 15399.26)",
			"Test.assertEquals(compoundInterest(100000, 20, 0.15, 365), 2007316.26)"
		],
		"starterFn": [
			"1\nfunction compoundInterest(p, t, r, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2GmmGPrktkTzTthdB"
	},
	{
		"title": "Check if a String is a Mathematical Expression",
		"description": "<p><span>Create a function that takes an input (e.g. </span><code>\"5 + 4\"</code><span>) and returns </span><code>true</code><span> if it's a mathematical expression or </span><code>false</code><span> if not.</span></p><h3><span>Examples</span></h3><pre><code>mathExpr(\"4 + 5\") ➞ true\n\nmathExpr(\"4*6\") ➞ true\n\nmathExpr(\"4*no\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Should only work with the following operations: </span><code>+, -, *, /, %</code></li><li><span>You don't need to test for floats.</span></li><li><span>int1 and int2 will only be from 0-9.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(mathExpr(\"5+4\"), true)",
			"Test.assertEquals(mathExpr(\"4 * 5\"), true)",
			"Test.assertEquals(mathExpr(\"3*6\"), true)",
			"Test.assertEquals(mathExpr(\"4 - 5\"), true)",
			"Test.assertEquals(mathExpr(\"6 % 7\"), true)",
			"Test.assertEquals(mathExpr(\"a - b\"), false)",
			"Test.assertEquals(mathExpr(\"a - 2\"), false)",
			"Test.assertEquals(mathExpr(\"nope\"), false)"
		],
		"starterFn": [
			"1\nfunction mathExpr(expr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YREKdhk9gK5HByM7r"
	},
	{
		"title": "Check if the String is a Palindrome",
		"description": "<p><span>A palindrome is a word, phrase, number or other sequence of characters which reads the same backward or forward, such as </span><em><span>madam</span></em><span> or </span><em><span>kayak</span></em><span>.</span></p><p><span>Write a function that takes a string and determines whether it's a palindrome or not. The function should return a boolean (</span><code>true</code><span> or </span><code>false</code><span> value).</span></p><h3><span>Examples</span></h3><pre><code>isPalindrome(\"Neuquen\") ➞ true\n\nisPalindrome(\"Not a palindrome\") ➞ false\n\nisPalindrome(\"A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Should be case insensitive.</span></li><li><span>Special characters (punctuation or spaces) should be ignored.</span></li></ul>",
		"publishedBy": "faqofff",
		"publishedByUrl": "https://edabit.com/user/NnJhaSQJGXmv9Tqse",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPalindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!'), true)",
			"Test.assertEquals(isPalindrome('Neuquen'), true)",
			"Test.assertEquals(isPalindrome('Not a palindrome'), false)"
		],
		"starterFn": [
			"1\nfunction isPalindrome(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2kyS2ESQqPaoZhNSd"
	},
	{
		"title": "How Many Solutions Does This Quadratic Have?",
		"description": "<p><span>A quadratic equation </span><code>a x² + b x + c = 0</code><span> has either 0, 1, or 2 distinct solutions for real values of </span><code>x</code><span>. Given </span><code>a</code><span>, </span><code>b</code><span> and </span><code>c</code><span>, you should return the number of solutions to the equation.</span></p><h3><span>Examples</span></h3><pre><code>solutions(1, 0, -1) ➞ 2\n// x² - 1 = 0 has two solutions (x = 1 and x = -1).\n\nsolutions(1, 0, 0) ➞ 1\n// x² = 0 has one solution (x = 0).\n\nsolutions(1, 0, 1) ➞ 0\n// x² + 1 = 0 has no solutions.</code></pre><h3><span>Notes</span></h3><ul><li><span>You do not have to calculate the solutions, just return how many there are.</span></li><li><code>a</code><span> will always be non-zero.</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(solutions(1, 0, -1), 2)",
			"Test.assertEquals(solutions(1, 0, 0), 1)",
			"Test.assertEquals(solutions(1, 0, 1), 0)",
			"Test.assertEquals(solutions(200, 420, 800), 0)",
			"Test.assertEquals(solutions(200, 420, -800), 2)",
			"Test.assertEquals(solutions(1000, 1000, 0), 2)",
			"Test.assertEquals(solutions(10000, 400, 4), 1)"
		],
		"starterFn": [
			"1\nfunction solutions(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/x2DEtfqm4RhGcziw9"
	},
	{
		"title": "Remove Surrounding Duplicate Items",
		"description": "<p><span>Create a function that takes a sequence of either strings or numbers, removes the surrounding duplicates and returns an array of items without any items with the same value next to each other and preserves the original order of items.</span></p><h3><span>Examples</span></h3><pre><code>uniqueInOrder(\"AAAABBBCCDAABBB\") ➞ [\"A\", \"B\", \"C\", \"D\", \"A\", \"B\"]\n\nuniqueInOrder(\"ABBCcAD\") ➞ [\"A\", \"B\", \"C\", \"c\", \"A\", \"D\"]\n\nuniqueInOrder([1, 2, 2, 3, 3]) ➞ [1, 2, 3]</code></pre><h3><span>Notes</span></h3><ul><li><span>The initial sequence of items can be either a string or an array.</span></li><li><span>Tests are case sensitive.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(uniqueInOrder(\"AAAABBBCCDAABBB\"), [\"A\", \"B\", \"C\", \"D\", \"A\", \"B\"])",
			"Test.assertSimilar(uniqueInOrder(\"ABBCcAD\"), [\"A\", \"B\", \"C\", \"c\", \"A\", \"D\"])",
			"Test.assertSimilar(uniqueInOrder([1, 2, 2, 3, 3]), [1, 2, 3])",
			"Test.assertSimilar(uniqueInOrder(\"12333355555522211133\"), [\"1\", \"2\", \"3\", \"5\", \"2\", \"1\", \"3\"])",
			"Test.assertSimilar(uniqueInOrder(\"uuUfffFgGggYtt76%5$$$\"), [\"u\", \"U\", \"f\", \"F\", \"g\", \"G\", \"g\", \"Y\", \"t\", \"7\", \"6\", \"%\", \"5\", \"$\"])",
			"Test.assertSimilar(uniqueInOrder([\"1\", \"2\", \"2\", \"3\", \"3\"]), [\"1\", \"2\", \"3\"])",
			"Test.assertSimilar(uniqueInOrder([3, 7, 3, 8, 4]), [3, 7, 3, 8, 4])",
			"Test.assertSimilar(uniqueInOrder(\"ABC\"), [\"A\", \"B\", \"C\"])",
			"Test.assertSimilar(uniqueInOrder(\"$$$%%%$$$%%%\"), [\"$\", \"%\", \"$\", \"%\"])",
			"Test.assertSimilar(uniqueInOrder([1, 1, 1, \"A\", \"B\", \"B\"]), [1, \"A\", \"B\"])"
		],
		"starterFn": [
			"1\nfunction uniqueInOrder(sequence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cW5gZqYEv6bszrNSw"
	},
	{
		"title": "Is it an Object?",
		"description": "<p><span>Create a function to check whether the given parameter is an Object or not.</span></p><h3><span>Examples</span></h3><pre><code>isObject(function add(x,y) {return x + y;}) ➞ true\n\nisObject(new Regex(\"^[a-zA-Z0-9]+$)\",\"g\")) ➞ true\n\nisObject(null) ➞ false\n\nisObject(\"\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Inputs may be </span><code>null</code><span>, primitive wrapper types, dates.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"logic",
			"objects",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isObject(new Date()), true)",
			"Test.assertEquals(isObject(\"12/12/2011\"), false)",
			"Test.assertEquals(isObject(null), false)",
			"Test.assertEquals(isObject([1,2,3]), true)",
			"Test.assertEquals(isObject({}), true)"
		],
		"starterFn": [
			"1\nfunction isObject(value) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5xrKJPsXLG3czFpuq"
	},
	{
		"title": "Removing Enemies",
		"description": "<p><span>Remove enemies from the list of people, even if the enemy shows up twice.</span></p><h3><span>Examples</span></h3><pre><code>removeEnemies([\"Fred\"], []) ➞ [\"Fred\"]\n\nremoveEnemies([\"Adam\", \"Emmy\", \"Tanya\", \"Emmy\"], [\"Emmy\"]) ➞ [\"Adam\", \"Tanya\"]\n\nremoveEnemies([\"John\", \"Emily\", \"Steve\", \"Sam\"], [\"Sam\", \"John\"]) ➞ [\"Emily\", \"Steve\"]</code></pre><h3><span>Notes</span></h3><p><span>All names to be removed will be in the enemies list; simply return the list, no fancy strings.</span></p>",
		"publishedBy": "ente",
		"publishedByUrl": "https://edabit.com/user/2eAwdyT6n7og5EzdW",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(removeEnemies([\"Steve\", \"Eleanor\"], []), [\"Steve\", \"Eleanor\"])",
			"Test.assertSimilar(removeEnemies([\"Jeff\", \"Charlie\", \"James\", \"Fredrick\"], [\"James\", \"Jeff\"]), [\"Charlie\", \"Fredrick\"])",
			"Test.assertSimilar(removeEnemies([\"Amelia\", \"Max\", \"Isobel\", \"Alex\", \"Phil\"], [\"Phil\", \"Max\"]), [\"Amelia\", \"Isobel\", \"Alex\"])",
			"Test.assertSimilar(removeEnemies([\"John\", \"Skye\", \"Alexander\", \"Skye\", \"Tony\"], [\"Skye\", \"John\"]), [\"Alexander\", \"Tony\"])"
		],
		"starterFn": [
			"1\nfunction removeEnemies(names, enemies) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/maTTAmN9j8creL4Jq"
	},
	{
		"title": "RegEx XVIII : Quantifiers - Control greed quantifiers with ?",
		"description": "<p><strong><span>Quantifiers</span></strong><span> indicate numbers of characters or expressions to match. By default quantifiers like * and + are \"greedy\", meaning that they try to match as much of the string as possible. The </span><code>?</code><span> character after the quantifier makes the quantifier \"non-greedy\": meaning that it will stop as soon as it finds a match.</span></p><pre><code>\"some &lt;foo&gt; &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt; thing\".match(/&lt;.*&gt;/) ➞ \"&lt;foo&gt; &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt;\"\n\"some &lt;foo&gt; &lt;bar&gt; new &lt;/bar&gt; &lt;/foo&gt; thing\".match(/&lt;.*?&gt;/) ➞ \"&lt;foo&gt;\"</code></pre><p><span>Find all HTML comments in the text. Use the </span><code>?</code><span> in your expression.</span></p><pre><code class=\"language-let\">let str = `... &lt;!-- My -- comment test --&gt; ..  &lt;!----&gt; .. `;\n\nstr.match(regexp) ➞ \"&lt;!-- My -- comment test --&gt;\", \"&lt;!----&gt;\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"let str = \"... <!-- My -- comment test --> ..  <!----> .. \";",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\?/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"    return str.match(REGEXP);",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str), \"invalid\", \"You are require to use the character ? in set your expression.\")",
			"Test.assertSimilar(testExp(str), ['<!-- My -- comment test -->', '<!---->'])",
			"​",
			"​",
			"// credits to https://javascript.info/regexp-greedy-and-lazy"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/BdJWELgsSr5nktqAG"
	},
	{
		"title": "Remove Repeated Letters",
		"description": "<p><span>Try to remove any repeated charcters in a word that will be passed to our function. Any character could be used, even special ones and numbers.</span></p><h3><span>Examples</span></h3><pre><code>unrepeated(\"hello\") ➞ \"helo\"\n\nunrepeated(\"aaaaa\") ➞ \"a\"\n\nunrepeated(\"WWE!!!\") ➞ \"WE!\"\n\nunrepeated(\"call 911\") ➞ \"cal 91\"</code></pre><h3><span>Notes</span></h3><ul><li><span>No more than two words will be passed.</span></li><li><span>Try to use new data type introduced in ES6.</span></li><li><span>Notice that a string is iterable.</span></li></ul>",
		"publishedBy": "Ali0Kh",
		"publishedByUrl": "https://edabit.com/user/NczXsSrYNX6nDWhjF",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertEquals(unrepeated(\"hello\"), \"helo\")",
			"Test.assertEquals(unrepeated(\"aaaaa\"), \"a\")",
			"Test.assertEquals(unrepeated(\"WWE!!!\"), \"WE!\")",
			"Test.assertEquals(unrepeated(\"call 911\"), \"cal 91\")",
			"Test.assertEquals(unrepeated(\"altwaff test\"), \"altwf es\")"
		],
		"starterFn": [
			"1\nfunction unrepeated(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cgSmKhr3Hzez2Pt9n"
	},
	{
		"title": "Split a String Based on Vowels and Consonants",
		"description": "<p><span>Write a function that takes a string, breaks it up and returns it with vowels first, consonants second. For any character that's not a vowel (like special characters or spaces), treat them like consonants.</span></p><h3><span>Examples</span></h3><pre><code>split(\"abcde\") ➞ \"aebcd\"\n\nsplit(\"Hello!\") ➞ \"eoHll!\"\n\nsplit(\"What's the time?\") ➞ \"aeieWht's th tm?\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Vowels are </span><code>a, e, i, o, u</code><span>.</span></li><li><span>Define a separate </span><code>isVowel()</code><span> function for easier to read code (recommendation).</span></li></ul>",
		"publishedBy": "gorosz",
		"publishedByUrl": "https://edabit.com/user/DLs5fZKpcH8mbjSZK",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"control_flow",
			"functional_programming",
			"regex"
		],
		"tests": [
			"Test.assertEquals(split(\"abcde\"), \"aebcd\")",
			"Test.assertEquals(split(\"Hello!\"), \"eoHll!\")",
			"Test.assertEquals(split(\"What's the time?\"), \"aeieWht's th tm?\")"
		],
		"starterFn": [
			"1\nfunction split(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tWgCG2PjN6FHq27S7"
	},
	{
		"title": "Calculate the Shortest Distance Between Two Points",
		"description": "<p><span>Create a function that takes a string of four numbers. These numbers represent two separat points on a graph known as the x-axis (horizontal axis) and y-axis (vertical axis). Each number corresponds as follows: </span><code>\"x1, y1, x2, y2\"</code><span>. Calculate the distance between x and y.</span></p><h3><span>Examples</span></h3><pre><code>shortestDistance(\"1,1,2,1\") ➞ 1\n\nshortestDistance(\"1,1,3,1\") ➞ 2\n\nshortestDistance(\"-5,1,3,1\") ➞ 8\n\nshortestDistance(\"-5,2,3,1\") ➞ 8.06</code></pre><h3><span>Notes</span></h3><p><span>All floats fixed to 2 decimal places (e.g. 2.34).</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(shortestDistance('1,1,2,1'), 1);",
			"Test.assertEquals(shortestDistance('1,1,3,1'), 2);",
			"Test.assertEquals(shortestDistance('-5,1,3,1'), 8);",
			"Test.assertEquals(shortestDistance('-5,2,3,1'), 8.06);",
			"Test.assertEquals(shortestDistance('18174,773931,851747,490653'), 880392.17);",
			"Test.assertEquals(shortestDistance('737017,82252,882429,883228'), 814068.3);",
			"Test.assertEquals(shortestDistance('700230,523734,877217,172766'), 393068.61);",
			"Test.assertEquals(shortestDistance('354972,19774,976623,664356'), 895508.75);",
			"Test.assertEquals(shortestDistance('587568,609626,654834,18784'), 594658.71);",
			"Test.assertEquals(shortestDistance('66662,790481,873587,545905'), 843175.77);",
			"Test.assertEquals(shortestDistance('332500,825806,905569,98242'), 926151.96);",
			"Test.assertEquals(shortestDistance('699436,718399,148249,268862'), 711259.88);",
			"Test.assertEquals(shortestDistance('569116,693885,298926,707866'), 270551.48);",
			"Test.assertEquals(shortestDistance('31746,315604,33219,558330'), 242730.47);",
			"Test.assertEquals(shortestDistance('269374,778748,642370,575892'), 424589.89);",
			"Test.assertEquals(shortestDistance('31569,18273,773659,944231'), 1186632.12);",
			"Test.assertEquals(shortestDistance('939517,332491,433853,846748'), 721218.65);",
			"Test.assertEquals(shortestDistance('683331,360682,350306,419799'), 338231.39);",
			"Test.assertEquals(shortestDistance('432164,634064,426613,762549'), 128604.86);",
			"Test.assertEquals(shortestDistance('104921,837065,896870,361030'), 924008.95);",
			"Test.assertEquals(shortestDistance('922238,809131,213159,45327'), 1042204.19);",
			"Test.assertEquals(shortestDistance('758369,659880,695294,282443'), 382671.07);",
			"Test.assertEquals(shortestDistance('919543,155658,842376,916848'), 765091.47);",
			"Test.assertEquals(shortestDistance('584808,222082,926167,794435'), 666418.73);",
			"Test.assertEquals(shortestDistance('875800,489178,754311,314534'), 212744.22);",
			"Test.assertEquals(shortestDistance('696995,146484,394853,798083'), 718241.63);"
		],
		"starterFn": [
			"1\nfunction shortestDistance(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/W6H4Bcaiu6svso7vT"
	},
	{
		"title": "GCD and LCM ( Part 1)",
		"description": "<p><span>Create a function that takes two numbers as arguments and returns the GCD of the two numbers.</span></p><h3><span>Examples</span></h3><pre><code>gcd(3, 5) ➞ 1\n\ngcd(14, 28) ➞ 14\n\ngcd(4, 18) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>GCD looks at all the divisors of each number and finds the greatest one.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(gcd(6, 10), 2)",
			"Test.assertEquals(gcd(17, 85), 17)",
			"Test.assertEquals(gcd(18, 153), 9)",
			"Test.assertEquals(gcd(14, 14), 14)",
			"Test.assertEquals(gcd(6, 31), 1)"
		],
		"starterFn": [
			"1\nfunction gcd(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/M7PGwcinRM9ntmqPS"
	},
	{
		"title": "The Museum of Incredibly DULL Things",
		"description": "<p><span>A museum wants to get rid of some exhibitions. Katya, the interior architect, comes up with a plan to remove the most boring exhibitions. She gives them a rating, and removes the one with the lowest rating. Just as she finishes rating the exhibitions, she's called off to an important meeting. She asks you to write a program that tells her the ratings of the items after the lowest one is removed.</span></p><p><span>Create a function that takes an array of integers and removes the smallest value.</span></p><h3><span>Examples</span></h3><pre><code>removeSmallest([1, 2, 3, 4, 5] ) ➞ [2, 3, 4, 5]\n\nremoveSmallest([5, 3, 2, 1, 4]) ➞ [5, 3, 2, 4]\n\nremoveSmallest([2, 2, 1, 2, 1]) ➞ [2, 2, 2, 1]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't change the order of the left over items.</span></li><li><span>If you get an empty array, return an empty array: </span><code>[] ➞ []</code><span>.</span></li><li><span>If there are multiple items with the same value, remove item with lower index (3rd example).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(removeSmallest([1, 2, 3, 4, 5]), [2, 3, 4, 5])",
			"Test.assertSimilar(removeSmallest([5, 3, 2, 1, 4]), [5, 3, 2, 4])",
			"Test.assertSimilar(removeSmallest([2, 2, 1, 2, 1]), [2, 2, 2, 1])",
			"Test.assertSimilar(removeSmallest([3, 1, 6, 7, 3, 7, 6]), [3, 6, 7, 3, 7, 6])",
			"Test.assertSimilar(removeSmallest([4, 4, 4, 1]), [4, 4, 4])",
			"Test.assertSimilar(removeSmallest([5, 4, 5, 3, 1, 1]), [5, 4, 5, 3, 1])",
			"Test.assertSimilar(removeSmallest([1, 5, 3]), [5, 3])",
			"Test.assertSimilar(removeSmallest([]), [])",
			"Test.assertSimilar(removeSmallest([6, 2, 5, 4, 8, 6, 3, 2, 7]), [6, 5, 4, 8, 6, 3, 2, 7])",
			"Test.assertSimilar(removeSmallest([3]), [])"
		],
		"starterFn": [
			"1\nfunction removeSmallest(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9ukwiKyv8R9NHSt3d"
	},
	{
		"title": "Count the Towers",
		"description": "<p><span>Create a function that counts the number of towers.</span></p><h3><span>Examples</span></h3><pre><code>count_towers([\n  [\"     ##         \"],\n  [\"##   ##        ##\"],\n  [\"##   ##   ##   ##\"],\n  [\"##   ##   ##   ##\"]\n]) ➞ 4\n\ncount_towers([\n  [\"                         ##\"],\n  [\"##             ##   ##   ##\"],\n  [\"##        ##   ##   ##   ##\"],\n  [\"##   ##   ##   ##   ##   ##\"]\n]) ➞ 6\n\ncount_towers([\n  [\"##\"],\n  [\"##\"]\n]) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>You are given a 2D matrix.</span></li><li><span>Towers are two characters in length.</span></li><li><span>Towers are made only of the character </span><strong><span>#</span></strong><span>.</span></li><li><span>Some tests have no towers, return </span><code>0</code><span>.</span></li></ul>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countTowers([",
			"  [\"     ##          \"],",
			"  [\"##   ##        ##\"],",
			"  [\"##   ##   ##   ##\"],",
			"  [\"##   ##   ##   ##\"]",
			"]), 4)",
			"​",
			"Test.assertEquals(countTowers([",
			"  [\"                         ##\"],",
			"  [\"##             ##   ##   ##\"],",
			"  [\"##        ##   ##   ##   ##\"],",
			"  [\"##   ##   ##   ##   ##   ##\"]",
			"]), 6)",
			"​",
			"Test.assertEquals(countTowers([",
			"  [\"##\"],",
			"  [\"##\"]",
			"]), 1)",
			"​",
			"Test.assertEquals(countTowers([",
			"  [\"\"]",
			"]), 0)",
			"​",
			"Test.assertEquals(countTowers([",
			"  [\"                                              \"],",
			"  [\"##   ##   ##   ##   ##   ##   ##   ##   ##   ##\"],"
		],
		"starterFn": [
			"1\nfunction countTowers(towers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LcEFe7PsxTqciY62v"
	},
	{
		"title": "Reformatting the Date",
		"description": "<p><span>Create a function that converts dates from one of five string formats:</span></p><ol><li><span>\"January 9, 2019\" (MM D, YYYY)</span></li><li><span>\"Jan 9, 2019\" (MM D, YYYY)</span></li><li><span>\"01/09/2019\"  (MM/DD/YYYY)</span></li><li><span>\"01-09-2019\"  (MM-DD-YYYY)</span></li><li><span>\"01.09.2019\" (MM.DD.YYYY)</span></li></ol><p><span>The return value will be an array formatted like: </span><code>[MM, DD, YYYY]</code><span>, where </span><code>MM</code><span>, </span><code>DD</code><span>, and </span><code>YYYY</code><span> are all integers. Using the examples above:</span></p><h3><span>Examples</span></h3><pre><code>convertDate(\"January 9, 2019\") ➞ [1, 9, 2019]\n\nconvertDate(\"Jan 9, 2019\") ➞ [1, 9, 2019]\n\nconvertDate(\"01/09/2019\") ➞ [1, 9, 2019]\n\nconvertDate(\"01-09-2019\") ➞ [1, 9, 2019]\n\nconvertDate(\"01.09.2019\") ➞ [1, 9, 2019]</code></pre><h3><span>Notes</span></h3><p><span>You can solve this any number of ways, but using JavaScript's </span><code>new Date()</code><span> method is probably the easiest. Check the </span><strong><span>Resources</span></strong><span> tab for documentation.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"dates",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(convertDate(\"January 9, 2019\"), [1, 9, 2019])",
			"Test.assertSimilar(convertDate(\"Jan 9, 2019\"), [1, 9, 2019])",
			"Test.assertSimilar(convertDate(\"01/09/2019\"), [1, 9, 2019])",
			"Test.assertSimilar(convertDate(\"01-09-2019\"), [1, 9, 2019])",
			"Test.assertSimilar(convertDate(\"01.09.2019\"), [1, 9, 2019])",
			"Test.assertSimilar(convertDate(\"March 3, 1901\"), [3, 3, 1901])",
			"Test.assertSimilar(convertDate(\"Mar 3, 1901\"), [3, 3, 1901])",
			"Test.assertSimilar(convertDate(\"03/03/1901\"), [3, 3, 1901])",
			"Test.assertSimilar(convertDate(\"03-03-1901\"), [3, 3, 1901])",
			"Test.assertSimilar(convertDate(\"03.03.1901\"), [3, 3, 1901])",
			"Test.assertSimilar(convertDate(\"August 8, 1666\"), [8, 8, 1666])",
			"Test.assertSimilar(convertDate(\"Nov 13, 1533\"), [11, 13, 1533])",
			"Test.assertSimilar(convertDate(\"04/15/1789\"), [4, 15, 1789])",
			"Test.assertSimilar(convertDate(\"12-23-1111\"), [12, 23, 1111])",
			"Test.assertSimilar(convertDate(\"02.28.1832\"), [2, 28, 1832])"
		],
		"starterFn": [
			"1\nfunction convertDate(date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CJo2NPyHDb5YyDu2S"
	},
	{
		"title": "Quarantine TP",
		"description": "<p><span>Can you spare a square?</span></p><p><span>Try to imagine a world in which you might have to stay home for 14 days at any given time. Do you have enough TP to make it through?</span></p><p><span>Although the number of squares per roll of TP varies significantly, we'll assume each roll has 500 sheets, and the average person uses 57 sheets per day.</span></p><p><span>Create a function that will receive an object with two key/values:</span></p><ul><li><code>people</code><span> ⁠— Number of people in the household.</span></li><li><code>tp</code><span> ⁠— Number of rolls.</span></li></ul><p><span>Return a statement telling the user if they need to buy more TP!</span></p><h3><span>Examples</span></h3><pre><code>tpChecker({people: 4, tp: 1}) ➞ \"Your TP will only last 2 days, buy more!\"\n\ntpChecker({people: 3, tp: 20}) ➞ \"Your TP will last 58 days, no need to panic!\"\n\ntpChecker({people: 4, tp: 12} ➞ \"Your TP will last 26 days, no need to panic!\"</code></pre><h3><span>Notes</span></h3><p><span>Stay safe, and happy coding!</span></p>",
		"publishedBy": "vtchris",
		"publishedByUrl": "https://edabit.com/user/Rrb84KWhN5tjhMGMA",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"objects"
		],
		"tests": [
			"Test.assertEquals(tpChecker({people: 4, tp: 1}), \"Your TP will only last 2 days, buy more!\")",
			"Test.assertEquals(tpChecker({people: 2, tp: 4}), \"Your TP will last 17 days, no need to panic!\")",
			"Test.assertEquals(tpChecker({people: 3, tp: 20}), \"Your TP will last 58 days, no need to panic!\")",
			"Test.assertEquals(tpChecker({people: 4, tp: 12}), \"Your TP will last 26 days, no need to panic!\")",
			"Test.assertEquals(tpChecker({people: 6, tp: 8}), \"Your TP will only last 11 days, buy more!\")",
			"Test.assertEquals(tpChecker({people: 1, tp: 1}), \"Your TP will only last 8 days, buy more!\")"
		],
		"starterFn": [
			"1\nfunction tpChecker(home) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xhrEw5w9N45TfsgiY"
	},
	{
		"title": "Count Letters in a Word Search",
		"description": "<p><span>Create a function that counts the number of times a particular letter shows up in the word search.</span></p><h3><span>Examples</span></h3><pre><code>letterCounter([\n  [\"D\", \"E\", \"Y\", \"H\", \"A\", \"D\"],\n  [\"C\", \"B\", \"Z\", \"Y\", \"J\", \"K\"],\n  [\"D\", \"B\", \"C\", \"A\", \"M\", \"N\"],\n  [\"F\", \"G\", \"G\", \"R\", \"S\", \"R\"],\n  [\"V\", \"X\", \"H\", \"A\", \"S\", \"S\"]\n], \"D\") ➞ 3\n\n// \"D\" shows up 3 times: twice in the first row, once in the third row.\n\nletterCounter([\n  [\"D\", \"E\", \"Y\", \"H\", \"A\", \"D\"],\n  [\"C\", \"B\", \"Z\", \"Y\", \"J\", \"K\"],\n  [\"D\", \"B\", \"C\", \"A\", \"M\", \"N\"],\n  [\"F\", \"G\", \"G\", \"R\", \"S\", \"R\"],\n  [\"V\", \"X\", \"H\", \"A\", \"S\", \"S\"]\n], \"H\") ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>You will always be given an array with five sub-arrays.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertEquals(letterCounter([",
			"  ['D', 'E', 'Y', 'H', 'A', 'D'],",
			"  ['C', 'B', 'Z', 'Y', 'J', 'K'],",
			"  ['D', 'B', 'C', 'A', 'M', 'N'],",
			"  ['F', 'G', 'G', 'R', 'S', 'R'],",
			"  ['V', 'X', 'H', 'A', 'S', 'S']",
			"], 'D'), 3)",
			"​",
			"Test.assertEquals(letterCounter([",
			"  ['D', 'E', 'Y', 'H', 'A', 'D'],",
			"  ['C', 'B', 'Z', 'Y', 'J', 'K'],",
			"  ['D', 'B', 'C', 'A', 'M', 'N'],",
			"  ['F', 'G', 'G', 'R', 'S', 'R'],",
			"  ['V', 'X', 'H', 'A', 'S', 'S']",
			"], 'H'), 2)",
			"​",
			"Test.assertEquals(letterCounter([",
			"  ['D', 'E', 'Y', 'H', 'A', 'D'],",
			"  ['C', 'B', 'Z', 'Y', 'J', 'K'],",
			"  ['D', 'B', 'C', 'A', 'M', 'N'],",
			"  ['F', 'G', 'G', 'R', 'S', 'R'],",
			"  ['V', 'X', 'H', 'A', 'S', 'S']",
			"], 'Z'), 1)",
			"​",
			"Test.assertEquals(letterCounter([",
			"  ['D', 'E', 'Y', 'H', 'A', 'D'],"
		],
		"starterFn": [
			"1\nfunction letterCounter(arr, letter) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6QNPoEjY8DLGKPiqr"
	},
	{
		"title": "Friday the 13th",
		"description": "<p><span>Given the </span><code>month</code><span> and </span><code>year</code><span> as numbers, return whether that month contains a </span><strong><span>Friday 13th</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>hasFriday13(3, 2020) ➞ true\n\nhasFriday13(10, 2017) ➞ true\n\nhasFriday13(1, 1985) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>January will be given as </span><code>1</code><span>, February as </span><code>2</code><span>, etc ...</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(hasFriday13(3, 2020), true)",
			"Test.assertEquals(hasFriday13(10, 2017), true)",
			"Test.assertEquals(hasFriday13(1, 1985), false)",
			"Test.assertEquals(hasFriday13(5, 1619), false)",
			"Test.assertEquals(hasFriday13(6, 1614), true)",
			"Test.assertEquals(hasFriday13(8, 1767), false)",
			"Test.assertEquals(hasFriday13(6, 1589), false)",
			"Test.assertEquals(hasFriday13(2, 2015), true)",
			"Test.assertEquals(hasFriday13(3, 2015), true)",
			"Test.assertEquals(hasFriday13(11, 2015), true)",
			"Test.assertEquals(hasFriday13(2, 1759), false)",
			"Test.assertEquals(hasFriday13(8, 1612), false)",
			"Test.assertEquals(hasFriday13(8, 1612), false)",
			"Test.assertEquals(hasFriday13(10, 2029), false)",
			"Test.assertEquals(hasFriday13(1, 1590), false)",
			"Test.assertEquals(hasFriday13(7, 1812), false)",
			"Test.assertEquals(hasFriday13(1, 1785), false)",
			"Test.assertEquals(hasFriday13(11, 1961), false)",
			"Test.assertEquals(hasFriday13(9, 1706), false)",
			"Test.assertEquals(hasFriday13(5, 2016), true)",
			"Test.assertEquals(hasFriday13(11, 2020), true)",
			"Test.assertEquals(hasFriday13(1, 2023), true)",
			"Test.assertEquals(hasFriday13(10, 2023), true)",
			"Test.assertEquals(hasFriday13(2, 2043), true)",
			"Test.assertEquals(hasFriday13(4, 2043), false)",
			"Test.assertEquals(hasFriday13(3, 2043), true)"
		],
		"starterFn": [
			"1\nfunction hasFriday13(month, year) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/98CAqzDToJdx5LGFm"
	},
	{
		"title": "ES6: Destructuring Objects VI",
		"description": "<pre><code>function shirtSize({size = \"big\"}) {\n  return size\n}\n\nshirtSize()  // error: Cannot destructure property \"size\" of \"undefined\" or \"null\"</code></pre><p><span>The preceding code produces an error because no object was passed to the function. Fix the function to return the default size, even if nothing is passed to the function. </span><strong><span>Don't</span></strong><span> remove the </span><code>{size = \"big\"}</code><span> object in the parameter and </span><strong><span>don't</span></strong><span> change the </span><code>return</code><span> statement.</span></p><h3><span>Example</span></h3><pre><code>shirtSize( ) ➞ \"big\"</code></pre><h3><span>Notes</span></h3><p><span>If you get stuck the answer is in one of the yellow notes on the MDN docs page (link in the </span><strong><span>Resources</span></strong><span> tab).</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"const result = shirtSize()",
			"​",
			"const code = str.slice(str.lastIndexOf(\"return\"), str.lastIndexOf('}'))",
			"const param = str.slice(0, 26) ",
			"​",
			"const validParams = () => {",
			"  return /\\{.*size/.test(param) ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"const validReturn = () => {",
			"  return code.includes(\"size\")  ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"const doubleReturns = () => {",
			"  return str.match(/return/g).length >= 2 ?  \"not valid\" : \"valid\" ",
			"} ",
			"​",
			"Test.assertEquals(doubleReturns(), \"valid\", 'Multiple returns are not allowed.')",
			"Test.assertEquals(validParams(), \"valid\", 'Do not remove or manipulate the object {size = \"big\"} inside of the parameters.')",
			"Test.assertEquals(validReturn(), \"valid\", \"Changing the return statement is not allowed.\")",
			"Test.assertEquals(result, \"big\")"
		],
		"starterFn": [
			"1\nconst str = `",
			"2\nfunction shirtSize({size = \"big\"}) { ",
			"3\n  return size",
			"4\n}",
			"5\n`"
		],
		"url": "https://edabit.com/challenge/7yCojzi2ye2Fn6iQT"
	},
	{
		"title": "Sum of all Evens in a Matrix",
		"description": "<p><span>Create a function that returns the sum of all even elements in a 2D matrix.</span></p><h3><span>Examples</span></h3><pre><code>sumOfEvens([\n  [1, 0, 2],\n  [5, 5, 7],\n  [9, 4, 3]\n]) ➞ 6\n\n// 2 + 4 = 6\n\nsumOfEvens([\n  [1, 1],\n  [1, 1]\n]) ➞ 0\n\nsumOfEvens([\n  [42, 9],\n  [16, 8]\n]) ➞ 66\n\nsumOfEvens([\n  [],\n  [],\n  []\n]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Submatrices will be of equal length.</span></li><li><span>Return 0 if the 2D matrix only consists of empty submatrices.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(sumOfEvens([",
			"    [1, 5, 1, 3], ",
			"    [4, 1, 2, 0], ",
			"    [6, 9, 7, 4], ",
			"    [5, 1, 2, 6]",
			"  ]), 24)",
			"  ",
			"Test.assertEquals(sumOfEvens([",
			"    [1, 0, 1],",
			"    [33, 1, 2],",
			"    [15, 9, 1],",
			"    [5, 1, 979]",
			"  ]), 2)",
			"  ",
			"Test.assertEquals(sumOfEvens([",
			"    [2, 19, 5, 43], ",
			"    [67, 2, 0, 12]",
			"  ]), 16)",
			"  ",
			"Test.assertEquals(sumOfEvens([",
			"    [1, 3, 7, 9], ",
			"    [11, 13, 15, 17], ",
			"    [19, 21, 23, 25]",
			"  ]), 0)",
			"​",
			"Test.assertEquals(sumOfEvens(["
		],
		"starterFn": [
			"1\nfunction sumOfEvens(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yiMSg6cNNCeJDQo3b"
	},
	{
		"title": "The Million Dollar Fence",
		"description": "<p><span>Your task is to create a </span><em><span>fence</span></em><span> worth </span><strong><span>$1 million</span></strong><span>. You are given the </span><strong><span>price</span></strong><span> of the material (per character), meaning the </span><em><span>length of the fence</span></em><span> will </span><em><span>change</span></em><span> depending on the </span><em><span>cost</span></em><span> of the material.</span></p><p><span>Create a function which constructs this </span><em><span>pricey pricey</span></em><span> fence, using the letter </span><code>\"H\"</code><span> to build.</span></p><pre><code>constructFence(\"$50,000\") ➞ \"HHHHHHHHHHHHHHHHHHHHHHHHHHHH\"\n// 20 fence posts were set up ($1,000,000 / $50,000 = 20)</code></pre><h3><span>Examples</span></h3><pre><code>constructFence(\"$50,000\") ➞ \"HHHHHHHHHHHHHHHHHHHHHHHHHHHH\"\n\nconstructFence(\"$100,000\") ➞ \"HHHHHHHHHH\"\n\nconstructFence(\"$1,000,000\") ➞ \"H\"</code></pre><h3><span>Notes</span></h3><p><span>You are ordered to spend </span><strong><span>all</span></strong><span> of your </span><strong><span>$1,000,000</span></strong><span> budget...</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(constructFence(\"$50,000\"), \"HHHHHHHHHHHHHHHHHHHH\")",
			"Test.assertEquals(constructFence(\"$100,000\"), \"HHHHHHHHHH\")",
			"Test.assertEquals(constructFence(\"$1,000,000\"), \"H\")",
			"Test.assertEquals(constructFence(\"$500,000\"), \"HH\")",
			"Test.assertEquals(constructFence(\"$20,000\"), \"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\")",
			"Test.assertEquals(constructFence(\"$10,000\"), \"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\")",
			"Test.assertEquals(constructFence(\"$5000\"), \"HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\")",
			"Test.assertEquals(constructFence
			"​",
			"// Made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction constructFence(price) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kKcEHvyJemCPKkjPZ"
	},
	{
		"title": "First N Vowels",
		"description": "<p><span>Write a function that returns the first </span><code>n</code><span> vowels of a string.</span></p><h3><span>Examples</span></h3><pre><code>firstNVowels(\"sharpening skills\", 3) ➞ \"aei\"\n\nfirstNVowels(\"major league\", 5) ➞ \"aoeau\"\n\nfirstNVowels(\"hostess\", 5) ➞ \"invalid\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>\"invalid\"</code><span> if the </span><code>n</code><span> exceeds the number of vowels in a string.</span></li><li><span>Vowels are: </span><em><span>a, e, i, o, u</span></em></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(firstNVowels(\"sharpening skills\", 3), \"aei\")",
			"Test.assertEquals(firstNVowels(\"major league\", 5), \"aoeau\")",
			"Test.assertEquals(firstNVowels(\"crabby patty\", 2), \"aa\")",
			"Test.assertEquals(firstNVowels(\"shrimp\", 1), \"i\")",
			"Test.assertEquals(firstNVowels(\"shrimpy\", 2), \"invalid\")",
			"Test.assertEquals(firstNVowels(\"hostess\", 5), \"invalid\")"
		],
		"starterFn": [
			"1\nfunction firstNVowels(s, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2FBEMqxiZ2z9efgQB"
	},
	{
		"title": "Abbreviating a Sentence",
		"description": "<p><span>Create a function which takes a </span><code>sentence</code><span> and returns its abbreviation. Get all of the words over or equal to </span><code>n</code><span> characters in length and return the first letter of each, </span><em><span>capitalised</span></em><span> and overall returned as a single string.</span></p><h3><span>Examples</span></h3><pre><code>abbreviate(\"do it yourself\") ➞ \"Y\"\n\nabbreviate(\"do it yourself\", 2) ➞ \"DIY\"\n// \"do\" and \"it\" are included because the second parameter specified that word lengths 2 are allowed.\n\nabbreviate(\"attention AND deficit OR hyperactivity THE disorder\")➞ \"ADHD\"\n// Words below the default 4 characters are not included in the abbreviation.\n\nabbreviate(\"the acronym of long word lengths\", 5) ➞ \"AL\"\n// \"acronym\" and \"lengths\" have 5 or more characters.</code></pre><h3><span>Notes</span></h3><p><span>There may not be an argument given for </span><code>n</code><span> so set the default to </span><code>4</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(abbreviate(\"do it yourself\", 2), \"DIY\")",
			"Test.assertEquals(abbreviate(\"attention AND deficit OR hyperactivity THE disorder\"), \"ADHD\")",
			"Test.assertEquals(abbreviate(\"the acronym of long word lengths\", 5), \"AL\")",
			"Test.assertEquals(abbreviate(\"laugh out loud\"), \"LL\")",
			"Test.assertEquals(abbreviate(\"Keep It Simple Stupid\"), \"KSS\")",
			"Test.assertEquals(abbreviate(\"laugh out loud\", 3), \"LOL\")",
			"Test.assertEquals(abbreviate(\"Keep It Simple Stupid\",2), \"KISS\")"
		],
		"starterFn": [
			"1\nfunction abbreviate(sentence, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ktqDpdPrFApaQpcCi"
	},
	{
		"title": "Lowercase and Uppercase Map",
		"description": "<p><span>Write a function that creates an object with each </span><strong><span>(key, value)</span></strong><span> pair being the </span><strong><span>(lower case, upper case)</span></strong><span> versions of a letter, respectively.</span></p><h3><span>Examples</span></h3><pre><code>mapping([\"p\", \"s\"]) ➞ { \"p\": \"P\", \"s\": \"S\" }\n\nmapping([\"a\", \"b\", \"c\"]) ➞ { \"a\": \"A\", \"b\": \"B\", \"c\": \"C\" }\n\nmapping([\"a\", \"v\", \"y\", \"z\"]) ➞ { \"a\": \"A\", \"v\": \"V\", \"y\": \"Y\", \"z\": \"Z\" }</code></pre><h3><span>Notes</span></h3><p><span>All of the letters in the input list will always be lowercase.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(mapping([\"a\", \"b\", \"c\"]), { a: \"A\", b: \"B\", c: \"C\" })",
			"Test.assertSimilar(mapping([\"p\", \"s\", \"t\"]), { p: \"P\", s: \"S\", t: \"T\" })",
			"Test.assertSimilar(mapping([\"a\", \"v\", \"y\", \"z\"]), { a: \"A\", v: \"V\", y: \"Y\", z: \"Z\" })"
		],
		"starterFn": [
			"1\nfunction mapping(letters) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5Yt2CrYdrJvoJFHRt"
	},
	{
		"title": "Is There an Upward Trend?",
		"description": "<p><span>Create a function that determines if there is an upward trend.</span></p><h3><span>Examples</span></h3><pre><code>upwardTrend([1, 2, 3, 4]) ➞ true\n\nupwardTrend([1, 2, 6, 5, 7, 8]) ➞ false\n\nupwardTrend([1, 2, 3, \"4\"]) ➞ \"Strings not permitted!\"\n\nupwardTrend([1, 2, 3, 6, 7]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>If there is a string element in the array, return </span><code>\"Strings not permitted!\"</code><span>.</span></li><li><span>The numbers don't have to be consecutive (e.g. </span><code>[1, 3, 5]</code><span> should still return </span><code>true</code><span>).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(upwardTrend([1, 2, 3, 4, 5, 6]), true)",
			"Test.assertEquals(upwardTrend([1, 3, 2, 5, 6, 7]), false)",
			"Test.assertEquals(upwardTrend([1, 2, 3, 4, 5, \"6\", 7, 8, 9]), \"Strings not permitted!\")",
			"Test.assertEquals(upwardTrend([1, 3, 5, 7, 9]), true)",
			"Test.assertEquals(upwardTrend([10, 12, 13, 15, 20]), true)",
			"Test.assertEquals(upwardTrend([6, 9, 11, 15, 12]), false)"
		],
		"starterFn": [
			"1\nfunction upwardTrend(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/X3JBqvoG5aq38Dc38"
	},
	{
		"title": "Capitalize the Last Letter",
		"description": "<p><span>Create a function that capitalizes the last letter of every word.</span></p><h3><span>Examples</span></h3><pre><code>capLast(\"hello\") ➞ \"hellO\"\n\ncapLast(\"My Name Is Edabit\") ➞ \"MY NamE IS EdabiT\"\n\ncapLast(\"HELp THe LASt LETTERs CAPITALISe\") ➞ \"HELP THE LAST LETTERS CAPITALISE\"</code></pre><h3><span>Notes</span></h3><p><span>There won't be any cases of punctuation in the tests.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(capLast(\"hello\"), \"hellO\")",
			"Test.assertEquals(capLast(\"My Name Is Edabit\"),\"MY NamE IS EdabiT\")",
			"Test.assertEquals(capLast(\"HELp THe LASt LETTERs CAPITALISe\"), \"HELP THE LAST LETTERS CAPITALISE\")",
			"Test.assertEquals(capLast(\"hellooooo\"), \"hellooooO\")",
			"Test.assertEquals(capLast(\"hahA I aM alreadY capitaliseD\"), \"hahA I aM alreadY capitaliseD\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction capLast(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WrXmsGDGxqkjNCZtw"
	},
	{
		"title": "Functioninator 8000",
		"description": "<p><span>Create a function that takes a single word string and does the following:</span></p><ol><li><p><span>Concatenates </span><code>inator</code><span> to the end if the word ends with a consonant otherwise, concatenate </span><code>-inator</code><span> instead.</span></p></li><li><p><span>Adds the word length of the original word to the end, supplied with '000'.</span></p></li></ol><p><span>The examples should make this clear.</span></p><h3><span>Examples</span></h3><pre><code>inatorInator(\"Shrink\") ➞ \"Shrinkinator 6000\"\n\ninatorInator(\"Doom\") ➞ \"Doominator 4000\"\n\ninatorInator(\"EvilClone\") ➞ \"EvilClone-inator 9000\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Kavin Umasankar",
		"publishedByUrl": "https://edabit.com/user/td7qPZ7Lv4pEWT2Ya",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(inatorInator('Shrink'), 'Shrinkinator 6000')",
			"Test.assertEquals(inatorInator('Doom'),'Doominator 4000')",
			"Test.assertEquals(inatorInator('EvilClone'), 'EvilClone-inator 9000')",
			"Test.assertEquals(inatorInator('Destroy'),'Destroyinator 7000')",
			"Test.assertEquals(inatorInator('a'),'a-inator 1000')",
			"Test.assertEquals(inatorInator('Shrek'),'Shrekinator 5000')",
			"Test.assertEquals(inatorInator('bEE'),'bEE-inator 3000')",
			"Test.assertEquals(inatorInator('CAPITALISE'),'CAPITALISE-inator 10000')"
		],
		"starterFn": [
			"1\nfunction inatorInator(inv) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xpGPz3QCAhtsZrWeW"
	},
	{
		"title": "Return the Index of All Capital Letters",
		"description": "<p><span>Create a function that takes a single string as argument and returns an ordered array containing the indices of all capital letters in the string.</span></p><h3><span>Examples</span></h3><pre><code>indexOfCaps(\"eDaBiT\") ➞ [1, 3, 5]\n\nindexOfCaps(\"eQuINoX\") ➞ [1, 3, 4, 6]\n\nindexOfCaps(\"determine\") ➞ []\n\nindexOfCaps(\"STRIKE\") ➞ [0, 1, 2, 3, 4, 5]\n\nindexOfCaps(\"sUn\") ➞ [1]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return an empty array if no uppercase letters are found in the string.</span></li><li><span>Special characters ($#@%) and numbers will be included in some test cases.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(indexOfCaps(\"eDaBiT\"), [1, 3, 5])",
			"Test.assertSimilar(indexOfCaps(\"eQuINoX\"), [1, 3, 4, 6])",
			"Test.assertSimilar(indexOfCaps(\"determine\"), [])",
			"Test.assertSimilar(indexOfCaps(\"STRIKE\"), [0, 1, 2, 3, 4, 5])",
			"Test.assertSimilar(indexOfCaps(\"sUn\"), [1])",
			"Test.assertSimilar(indexOfCaps(\"SpiDer\"), [0, 3])",
			"Test.assertSimilar(indexOfCaps(\"accOmpAnY\"), [3, 6, 8])",
			"Test.assertSimilar(indexOfCaps(\"@xCE#8S#i*$en\"), [2, 3, 6])",
			"Test.assertSimilar(indexOfCaps(\"1854036297\"), [])",
			"Test.assertSimilar(indexOfCaps(\"Fo?.arg~{86tUx=|OqZ!\"), [0, 12, 16, 18])"
		],
		"starterFn": [
			"1\nfunction indexOfCaps(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cRAqXCgyYnjdgktEq"
	},
	{
		"title": "Simple Circle Collision Detection",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if the given circular areas are intersecting, otherwise return </span><code>false</code><span>. The circles are given as two arrays containing the values in the following order:</span></p><ol><li><span>Radius of the circle.</span></li><li><span>Center position on the x-axis.</span></li><li><span>Center position on the y-axis.</span></li></ol><h3><span>Examples</span></h3><pre><code>isCircleCollision([10, 0, 0], [10, 10, 10]) ➞ true\n\nisCircleCollision([1, 0, 0], [1, 10, 10]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>You can expect useable input and positive radii.</span></li><li><span>The given coordinates are the centers of the circles.</span></li><li><span>We are looking for intersecting areas, not intersection outlines.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for help.</span></li></ul>",
		"publishedBy": "ente",
		"publishedByUrl": "https://edabit.com/user/2eAwdyT6n7og5EzdW",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"games",
			"math"
		],
		"tests": [
			"Test.assertEquals(isCircleCollision([10, 0, 0], [10, 10, 10]), true)",
			"Test.assertEquals(isCircleCollision([10, 0, 0], [5, 0, 0]), true)",
			"Test.assertEquals(isCircleCollision([1, 0, 0], [1, 0, 0]), true)",
			"Test.assertEquals(isCircleCollision([5, 0, 0], [5, 10, 10]), false)",
			"Test.assertEquals(isCircleCollision([1, 0, 0], [1, 10, 10]), false)"
		],
		"starterFn": [
			"1\nfunction isCircleCollision(c1, c2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qMKzp256C9Ng9pGYc"
	},
	{
		"title": "Rectangle in Circle",
		"description": "<p><span>Create a function that takes three numbers — the width and height of a rectangle, and the radius of a circle and returns </span><code>true</code><span> if the rectangle can fit inside the circle, </span><code>false</code><span> if it can't.</span></p><h3><span>Examples</span></h3><pre><code>rectangleInCircle(8, 6, 5) ➞ true\n\nrectangleInCircle(5, 9, 5) ➞ false\n\nrectangleInCircle(4, 7, 4) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(rectangleInCircle(5, 12, 7), true)",
			"Test.assertEquals(rectangleInCircle(5, 12, 6), false)",
			"Test.assertEquals(rectangleInCircle(3, 7, 4), true)",
			"Test.assertEquals(rectangleInCircle(4, 7, 4), false)",
			"Test.assertEquals(rectangleInCircle(11, 1, 6), true)",
			"Test.assertEquals(rectangleInCircle(21, 12, 12), false)"
		],
		"starterFn": [
			"1\nfunction rectangleInCircle(w, h, radius) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Qqo3rXrDEQ6kc4PqR"
	},
	{
		"title": "Moving to the End",
		"description": "<p><span>Write a function that moves all elements of one type to the </span><strong><span>end</span></strong><span> of the array.</span></p><h3><span>Examples</span></h3><pre><code>moveToEnd([1, 3, 2, 4, 4, 1], 1) ➞ [3, 2, 4, 4, 1, 1]\n// Move all the 1s to the end of the array.\n\nmoveToEnd([7, 8, 9, 1, 2, 3, 4], 9) ➞ [7, 8, 1, 2, 3, 4, 9]\n\nmoveToEnd([\"a\", \"a\", \"a\", \"b\"], \"a\") ➞ [\"b\", \"a\", \"a\", \"a\"]</code></pre><h3><span>Notes</span></h3><p><span>Keep the order of the un-moved items the same.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(moveToEnd([1, 3, 2, 4, 4, 1], 1), [3, 2, 4, 4, 1, 1])",
			"Test.assertSimilar(moveToEnd([7, 8, 9, 1, 2, 3, 4], 9), [7, 8, 1, 2, 3, 4, 9])",
			"Test.assertSimilar(moveToEnd([7, 7, 7, 6, 6, 6, 6], 7), [6, 6, 6, 6, 7, 7, 7])",
			"Test.assertSimilar(moveToEnd([\"a\", \"c\", \"c\", \"c\", \"b\", \"c\"], \"b\"), [\"a\", \"c\", \"c\", \"c\", \"c\", \"b\"])",
			"Test.assertSimilar(moveToEnd([\"a\", \"c\", \"c\", \"c\", \"b\", \"c\"], \"c\"), [\"a\", \"b\", \"c\", \"c\", \"c\", \"c\"])",
			"Test.assertSimilar(moveToEnd([\"a\", \"a\", \"a\", \"b\"], \"a\"), [\"b\", \"a\", \"a\", \"a\"])"
		],
		"starterFn": [
			"1\nfunction moveToEnd(arr, el) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PooaCaiDfY2t229bE"
	},
	{
		"title": "Fibonacci Sequence",
		"description": "<p><span>The Fibonacci Sequence is the sequence of numbers (Fibonacci Numbers) whose sum is the two preceding numbers (e.g. 0, 1, 1, 2, 3, etc). Using 0 and 1 as the starting values, create a function that returns an array containing all of the Fibonacci numbers less than 255.</span></p><h3><span>Examples</span></h3><p><span>On generating a Fibonacci number where input is the two preceding values starting from 0 and 1 </span><code>[0, 1, ...]</code><span>.</span></p><pre><code>fibonacciSequence(0, 1) ➞ 1\n\nfibonacciSequence(1, 1) ➞ 2\n\nfibonacciSequence(1, 2) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>This function will take no parameters.</span></p>",
		"publishedBy": "rthom2178",
		"publishedByUrl": "https://edabit.com/user/PHnPzYBDCCrBf8ytQ",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(fibonacciSequence(), [ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233 ])"
		],
		"starterFn": [
			"1\nfunction fibonacciSequence() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eYBNcjib3xHHrktZm"
	},
	{
		"title": "Harshad Numbers",
		"description": "<p><span>A number </span><code>n</code><span> is a Harshad (also called Niven) number if it is divisible by the sum of its digits. For example, 666 is divisible by 6 + 6 + 6, so it is a Harshad number.</span></p><h3><span>Examples</span></h3><pre><code>isHarshad(209) ➞ true\n\nisHarshad(41) ➞ false\n\nisHarshad(12255) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isHarshad(0), false)",
			"Test.assertEquals(isHarshad(15), false)",
			"Test.assertEquals(isHarshad(990), true)",
			"Test.assertEquals(isHarshad(461), false)",
			"Test.assertEquals(isHarshad(297), false)",
			"Test.assertEquals(isHarshad(345), false)",
			"Test.assertEquals(isHarshad(529), false)",
			"Test.assertEquals(isHarshad(839), false)",
			"Test.assertEquals(isHarshad(281), false)",
			"Test.assertEquals(isHarshad(252), true)",
			"Test.assertEquals(isHarshad(123), false)",
			"Test.assertEquals(isHarshad(840), true)",
			"Test.assertEquals(isHarshad(789), false)",
			"Test.assertEquals(isHarshad(43), false)",
			"Test.assertEquals(isHarshad(907), false)",
			"Test.assertEquals(isHarshad(441), true)",
			"Test.assertEquals(isHarshad(729), false)",
			"Test.assertEquals(isHarshad(801), true)",
			"Test.assertEquals(isHarshad(923), false)",
			"Test.assertEquals(isHarshad(569), false)",
			"Test.assertEquals(isHarshad(828), true)",
			"Test.assertEquals(isHarshad(658), false)",
			"Test.assertEquals(isHarshad(838), false)",
			"Test.assertEquals(isHarshad(711), true)",
			"Test.assertEquals(isHarshad(216), true)",
			"Test.assertEquals(isHarshad(525), false)"
		],
		"starterFn": [
			"1\nfunction isHarshad(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/p2AdWaNfMLHePoi26"
	},
	{
		"title": "RegEx: Character Classes XI ⁠- \\s",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>You probably know already know the string method </span><strong><span>trim()</span></strong><span>.  It will remove all of the leading and trailing whitespaces in a string.</span></p><p><span>Create a </span><strong><span>regular expression</span></strong><span> that will function like the </span><code>trim()</code><span> method. Your </span><strong><span>regex</span></strong><span> will work together with this function: </span><code>string.replace(REGEXP, \"\")</code><span>. You must use the </span><code>\\s</code><span> character class in your expression.</span></p><h3><span>Example</span></h3><pre><code>const str = \"    Hello World    \"\n// \"Hello World\"\n\nconst str = \"    We need more space   \"\n// \"We need more space\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on character classes if you're stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str1 = \"    Hello World    \"",
			"const str2 = \"    We need more space   \"",
			"const str3 = \" I    want more  room    \"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\s/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.replace(REGEXP, \"\")",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"required\", \"You are required to use a \\s character class in your expression.\")",
			"Test.assertSimilar(testExp(str1), \"Hello World\")",
			"Test.assertSimilar(testExp(str2), \"We need more space\")",
			"Test.assertSimilar(testExp(str3), \"I    want more  room\")"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you expression here */g"
		],
		"url": "https://edabit.com/challenge/EAsFHZYmxirxzLTsh"
	},
	{
		"title": "Card Counting (BlackJack)",
		"description": "<p><span>In BlackJack, cards are counted with -1, 0, 1 values:</span></p><ul><li><span>2, 3, 4, 5, 6 are counted as +1</span></li><li><span>7, 8, 9 are counted as 0</span></li><li><span>10, J, Q, K, A are counted as -1</span></li></ul><p><span>Create a function that counts the number and returns it from the array of cards provided.</span></p><h3><span>Examples</span></h3><pre><code>count([5, 9, 10, 3, \"J\", \"A\", 4, 8, 5]) ➞ 1\n\ncount([\"A\", \"A\", \"K\", \"Q\", \"Q\", \"J\"]) ➞ -6\n\ncount([\"A\", 5, 5, 2, 6, 2, 3, 8, 9, 7]) ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>String inputs will always be upper case.</span></li><li><span>You do not need to consider case sensitivity.</span></li><li><span>If the argument is empty, return </span><code>0</code><span>.</span></li><li><span>No input other than: </span><code>2, 3, 4, 5, 6, 7, 8, 9, 10, \"J\", \"Q\", \"K\", \"A\"</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"conditions",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertEquals(count([5, 9, 10, 3, 'J', 'A', 4, 8, 5]), 1, 'Example 1')",
			"Test.assertEquals(count(['A', 'A', 'K', 'Q', 'Q', 'J']), -6, 'Example 2')",
			"Test.assertEquals(count(['A', 5, 5, 2, 6, 2, 3, 8, 9, 7]), 5, 'Example 3')",
			"Test.assertEquals(count([2, 2, 2, 2, 2, 2, 2, 2]), 8)",
			"Test.assertEquals(count([]), 0)",
			"Test.assertEquals(count(['A', 'A', 'A', 'A', 'A', 'A', 'A']), -7)",
			"Test.assertEquals(count(['A', 'K', 'Q', 'J', 10, 9, 8, 7, 6, 5, 4, 3, 2]), 0)"
		],
		"starterFn": [
			"1\nfunction count(deck) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3kzhTP7nEwcaKP82H"
	},
	{
		"title": "Compounding Letters",
		"description": "<p><span>Create a function that takes a string and returns a new string with each new character accumulating by +1. Separate each set with a dash.</span></p><h3><span>Examples</span></h3><pre><code>accum(\"abcd\") ➞ \"A-Bb-Ccc-Dddd\"\n\naccum(\"RqaEzty\") ➞ \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\n\naccum(\"cwAt\") ➞ \"C-Ww-Aaa-Tttt\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Capitalize the first letter of each set.</span></li><li><span>All tests contain valid strings with alphabetic characters (a-z, A-Z).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(accum(\"abcd\"), \"A-Bb-Ccc-Dddd\");",
			"Test.assertEquals(accum(\"RqaEzty\"), \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\");",
			"Test.assertEquals(accum(\"cwAt\"), \"C-Ww-Aaa-Tttt\");",
			"Test.assertEquals(accum(\"VgyCdnQa\"), \"V-Gg-Yyy-Cccc-Ddddd-Nnnnnn-Qqqqqqq-Aaaaaaaa\");",
			"Test.assertEquals(accum(\"nRBSdNOsMl\"), \"N-Rr-Bbb-Ssss-Ddddd-Nnnnnn-Ooooooo-Ssssssss-Mmmmmmmmm-Llllllllll\");",
			"Test.assertEquals(accum(\"nuE\"), \"N-Uu-Eee\");",
			"Test.assertEquals(accum(\"RlDrhZuQaqsoHEfziByObtMxkFCJVe\"), \"R-Ll-Ddd-Rrrr-Hhhhh-Zzzzzz-Uuuuuuu-Qqqqqqqq-Aaaaaaaaa-Qqqqqqqqqq-Sssssssssss-Oooooooooooo-Hhhhhhhhhhhhh-Eeeeeeeeeeeeee-Fffffffffffffff-Zzzzzzzzzzzzzzzz-Iiiiiiiiiiiiiiiii-Bbbbbbbbbbbbbbbbbb-Yyyyyyyyyyyyyyyyyyy-Oooooooooooooooooooo-Bbbbbbbbbbbbbbbbbbbbb-Tttttttttttttttttttttt-Mmmmmmmmmmmmmmmmmmmmmmm-Xxxxxxxxxxxxxxxxxxxxxxxx-Kkkkkkkkkkkkkkkkkkkkkkkkk-Ffffffffffffffffffffffffff-Ccccccccccccccccccccccccccc-Jjjjjjjjjjjjjjjjjjjjjjjjjjjj-Vvvvvvvvvvvvvvvvvvvvvvvvvvvvv-Eeeeeeeeeeeeeeeeeeeeeeeeeeeeee\");",
			"Test.assertEquals(accum(\"EXpzPFx\"), \"E-Xx-Ppp-Zzzz-Ppppp-Ffffff-Xxxxxxx\");",
			"Test.assertEquals(accum(\"NU\"), \"N-Uu\");",
			"Test.assertEquals(accum(\"g\"), \"G\");"
		],
		"starterFn": [
			"1\nfunction accum(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aThG46eyi9LhGdTFY"
	},
	{
		"title": "ES6: Destructuring Objects X",
		"description": "<p><span>Given an array of user objects.</span></p><pre><code>let names = []\n\nlet users = [\n  { name: \"John\", email: \"john@example.com\" },\n  { name: \"Jason\", email: \"jason@example.com\" },\n  { name: \"Jeremy\", email: \"jeremy@example.com\" },\n  { name: \"Jacob\", email: \"jacob@example.com\" }\n]\n\nfor(/* add code inside these parenthesis only */) {\n      names.push(name)\n}\n\nconsole.log(names) // should log [\"John\", \"Jason\", \"Jeremy\", \"Jacob\"]</code></pre><p><span>Push the first names of all users in the names array.</span></p><h3><span>Notes</span></h3><ul><li><span>You only have to change the \"for...of\" loop parameters.</span></li><li><span>Ignore the </span><code>const str</code><span> assignment. This is only used for validation purposes.</span></li><li><span>Check the </span><strong><span>MDN</span></strong><span> docs to find out more about object destructuring in \"for...of\" loops (check the </span><strong><span>Resources</span></strong><span> tab).</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"function validation() {",
			"  return /for.*\\{.*[a-zA-Z]+.*\\}/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"Test.assertEquals(validation(), \"valid\", \"You must use object destructuring inside the for..of parameters \")",
			"Test.assertSimilar(names, ['John', 'Jason', 'Jeremy', 'Jacob'])"
		],
		"starterFn": [
			"1\nlet names = []",
			"2\n​",
			"3\nlet users = [",
			"4\n  { name: \"John\", email: \"john@example.com\" },",
			"5\n  { name: \"Jason\", email: \"jason@example.com\" },",
			"6\n  { name: \"Jeremy\", email: \"jeremy@example.com\" },",
			"7\n  { name: \"Jacob\", email: \"jacob@example.com\" }",
			"8\n] ",
			"9\n​",
			"10\nconst str = `",
			"11\n  for(/* add code inside these parenthesis only */) {",
			"12\n      names.push(name)",
			"13\n  }`"
		],
		"url": "https://edabit.com/challenge/sWzEwh5cXaAY7yEoo"
	},
	{
		"title": "Noddy's Mystery Function",
		"description": "<p><span>Noddy has written a mysterious function which takes in a word and returns </span><code>true</code><span> if it's passed a specific test. Solve the riddle of what Noddy's function is by having a look at some of the examples below.</span></p><h3><span>Examples</span></h3><pre><code>noddyFunction(\"FANTASTIC\") ➞ true\n\nnoddyFunction(\"wonderful\") ➞ false\n\nnoddyFunction(\"NODDY\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Check the </span><strong><span>Tests</span></strong><span> tab for more examples.</span></li><li><span>This isn't really a coding challenge, more of a fun riddle ;)</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(noddyFunction(\"fantastic\"), true)",
			"Test.assertEquals(noddyFunction(\"wonderful\"), false)",
			"Test.assertEquals(noddyFunction(\"noddy\"), false)",
			"Test.assertEquals(noddyFunction(\"blessed\"), false)",
			"Test.assertEquals(noddyFunction(\"Wonder\"), false)",
			"Test.assertEquals(noddyFunction(\"waterfall\"), true)",
			"Test.assertEquals(noddyFunction(\"nature\"), true)",
			"Test.assertEquals(noddyFunction(\"ADVENTUROUS\"), false)",
			"Test.assertEquals(noddyFunction(\"Benevolent\"), true)",
			"Test.assertEquals(noddyFunction(\"courageous\"), true)",
			"Test.assertEquals(noddyFunction(\"End\"), false)",
			"Test.assertEquals(noddyFunction(\"virtue\"), true)",
			"Test.assertEquals(noddyFunction(\"Kindness\"), false)",
			"Test.assertEquals(noddyFunction(\"CREATURE\"), true)",
			"Test.assertEquals(noddyFunction(\"Planet\"), true)",
			"Test.assertEquals(noddyFunction(\"disaster\"), false)",
			"Test.assertEquals(noddyFunction(\"possibility\"), true)",
			"Test.assertEquals(noddyFunction(\"Inspiration\"), true)",
			"Test.assertEquals(noddyFunction(\"Hope\"), true)",
			"Test.assertEquals(noddyFunction(\"nurture\"), true)",
			"Test.assertEquals(noddyFunction(\"UNDERSTANDING\"), false)",
			"Test.assertEquals(noddyFunction(\"Edabit\"), false)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction noddyFunction(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/u7keqjWnKXcYz9DMN"
	},
	{
		"title": "Check If objOne Is Equal to objTwo",
		"description": "<p><span>Create a function that checks to see if two object arguments are equal to one another. Return </span><code>true</code><span> if the objects are equal, otherwise, return </span><code>false</code><span>.</span></p><h3><span>Example #1</span></h3><pre><code>// The first object parameter.\n\n{\n  name: \"Benny\",\n  phone: \"3325558745\",\n  email: \"benny@edabit.com\"\n}\n\n// The second object parameter.\n\n{\n  name: \"Jason\",\n  phone: \"9853759720\",\n  email: \"jason@edabit.com\"\n}\n\n\n➞ false</code></pre><h3><span>Example #2</span></h3><pre><code>// The first object parameter.\n\n{\n  name: \"Jason\",\n  phone: \"9853759720\",\n  email: \"jason@edabit.com\"\n}\n\n// The second object parameter.\n\n{\n  name: \"Jason\",\n  phone: \"9853759720\",\n  email: \"jason@edabit.com\"\n}\n\n\n➞ true</code></pre><h3><span>Notes</span></h3><p><span>If you have a suggestion on how to make these instructions easier to understand, please leave a comment. Your feedback is greatly appreciated.</span></p>",
		"publishedBy": "Pickle",
		"publishedByUrl": "https://edabit.com/user/zzaD2EtTFR7PK52kY",
		"language": "JavaScript",
		"tags": [
			"objects",
			"validation"
		],
		"tests": [
			"describe(\"Tests\", function () {",
			"  it(\"Test #1\", function () {",
			"    const objOne = {",
			"      name: \"Benny\",",
			"      phone: \"3325558745\",",
			"      email: \"benny@edabit.com\"",
			"    }",
			"​",
			"    const objTwo = {",
			"      name: \"Jason\",",
			"      phone: \"9853759720\",",
			"      email: \"jason@edabit.com\"",
			"    }",
			"​",
			"    Test.assertEquals(isEqual(objOne, objTwo), false);",
			"  });",
			"​",
			"  it(\"Test #2\", function () {",
			"    const objOne = {",
			"      name: \"Jason\",",
			"      phone: \"9853759720\",",
			"      email: \"jason@edabit.com\"",
			"    }",
			"​",
			"    const objTwo = {",
			"      name: \"Jason\","
		],
		"starterFn": [
			"1\nfunction isEqual(objOne, objTwo) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zvq3A6AJDWmnnK7Ry"
	},
	{
		"title": "Valid Variable Names",
		"description": "<p><span>When creating variables, the variable name must </span><strong><span>always start with a letter</span></strong><span> and cannot contain spaces, though numbers and underscores are allowed to be contained in it also.</span></p><p><span>Create a function which returns </span><code>true</code><span> if a given variable name is valid, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>variableValid(\"result\") ➞ true\n\nvariableValid(\"odd_nums\") ➞ true\n\nvariableValid(\"2TimesN\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Inputs are given as strings.</span></li><li><span>Variable names with spaces are not allowed.</span></li><li><span>Although this question may seem like otherwise, you can't actually assign words with quotes around them as variables.</span></li><li><span>The rules exposed in this challenge are an oversimplification on how variable and identifier names are considered valid in JavaScript.</span></li></ul>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(variableValid(\"result\"), true)",
			"Test.assertEquals(variableValid(\"odd_nums\"), true)",
			"Test.assertEquals(variableValid(\"2TimesN\"), false)",
			"Test.assertEquals(variableValid(\"rather_long_variable_name\"), true)",
			"Test.assertEquals(variableValid(\"count spaces\"), false)",
			"Test.assertEquals(variableValid(\"nTimes2\"), true)"
		],
		"starterFn": [
			"1\nfunction variableValid(variable) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cGXwWujXdkx6BS3CX"
	},
	{
		"title": "Probabilities (Part 1)",
		"description": "<p><span>Given an array of numbers and a value </span><code>n</code><span>, write a function that returns the probability of choosing a number greater than or equal to </span><code>n</code><span> from the array. The probability should be expressed as a percentage, rounded to one decimal place.</span></p><h3><span>Examples</span></h3><pre><code>probability([5, 1, 8, 9], 6) ➞ 50.0\n\nprobability([7, 4, 17, 14, 12, 3], 16) ➞ 16.7\n\nprobability([4, 6, 2, 9, 15, 18, 8, 2, 10, 8], 6) ➞ 70.0</code></pre><h3><span>Notes</span></h3><p><span>Probability of event = (num of favourable outcomes) / (total num of possible outcomes)</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(probability([14, 19, 2, 6], 12), 50.0)",
			"Test.assertEquals(probability([11, 10, 9, 18, 16, 18, 4, 3, 5], 13), 33.3)",
			"Test.assertEquals(probability([2, 13, 1, 11, 6, 9, 11, 14, 3], 15), 0.0)",
			"Test.assertEquals(probability([11, 6, 17, 2, 1, 16, 20, 15], 7), 62.5)",
			"Test.assertEquals(probability([12, 15, 12, 8, 20, 16, 1], 1), 100.0)",
			"Test.assertEquals(probability([15, 8, 12, 1, 11, 4], 4), 83.3)",
			"Test.assertEquals(probability([14, 11, 16, 3, 13, 14, 3], 8), 71.4)",
			"Test.assertEquals(probability([1, 4, 18, 19, 15, 3, 3, 11], 23), 0.0)",
			"Test.assertEquals(probability([9, 8, 17, 13, 17], 8), 100.0)",
			"Test.assertEquals(probability([4, 6, 2, 9, 15, 18, 8, 2, 10, 8], 6), 70.0)",
			"Test.assertEquals(probability([15, 4, 6, 11, 11, 17, 9, 16, 7, 4, 5, 10], 12), 25.0)",
			"Test.assertEquals(probability([7, 1, 5, 7, 15, 15, 16, 14], 2), 87.5)",
			"Test.assertEquals(probability([11, 4, 6, 7, 14, 4, 4], 8), 28.6)",
			"Test.assertEquals(probability([10, 10, 3, 18, 14, 1, 2, 19, 17, 2, 4, 11, 18, 6, 3], 11), 40.0)"
		],
		"starterFn": [
			"1\nfunction probability(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/L98LmPEeY4LzpYF8i"
	},
	{
		"title": "Paint the Walls",
		"description": "<p><span>Given a predetermined rate from an object,  write the function that will return the time it takes for a certain amount of people to paint a certain amount of walls. Return the minutes as an integer. No rounding is necessary.</span></p><h3><span>Example</span></h3><pre><code>// It takes 22 minutes for 10 people to paint 10 walls.\n// How many minutes does it take 14 people to paint 14 walls?\n\nlet rate = {\n  people: 10,\n  walls: 10,\n  minutes: 22\n}\n\ntime(rate, people, walls) ➞ 22</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"math",
			"objects"
		],
		"tests": [
			"const rate = {",
			"  people: 4,",
			"   walls: 9,",
			"   minutes: 63 ",
			"}",
			"const rate2 = {",
			"  people: 10,",
			"  walls: 10,",
			"  minutes: 22",
			"}",
			"​",
			"Test.assertEquals(time(rate, 7, 4), 16)",
			"Test.assertEquals(time(rate2, 10, 10), 22)"
		],
		"starterFn": [
			"1\nfunction time(obj, people, walls) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2p2sdgq39fysByKba"
	},
	{
		"title": "Edabit Experience Points",
		"description": "<p><span>As you complete questions on Edabit, you gain experience points depending on the difficulty of the question. The points for each difficulty are as follows:</span></p><table><thead><tr><th><span>Difficulty</span></th><th><span>Experience Points</span></th></tr></thead><tbody><tr><td><span>Very Easy</span></td><td><span>5XP</span></td></tr><tr><td><span>Easy</span></td><td><span>10XP</span></td></tr><tr><td><span>Medium</span></td><td><span>20XP</span></td></tr><tr><td><span>Hard</span></td><td><span>40XP</span></td></tr><tr><td><span>Very Hard</span></td><td><span>80XP</span></td></tr></tbody></table><p><span>Given an object of how many questions a person has completed of each difficulty, return </span><strong><span>how many experience points</span></strong><span> they'll have.</span></p><h3><span>Examples</span></h3><pre><code>getXP({\n  \"Very Easy\" : 89,\n  \"Easy\" : 77,\n  \"Medium\" : 30,\n  \"Hard\" : 4,\n  \"Very Hard\" : 1\n}) ➞ \"2055XP\"\n\n\ngetXP({\n  \"Very Easy\" : 254,\n  \"Easy\" : 32,\n  \"Medium\" : 65,\n  \"Hard\" : 51,\n  \"Very Hard\" : 34\n}) ➞ \"7650XP\"\n\n\ngetXP({\n  \"Very Easy\" : 11,\n  \"Easy\" : 0,\n  \"Medium\" : 2,\n  \"Hard\" : 0,\n  \"Very Hard\" : 27\n}) ➞ \"2255XP\"</code></pre><h3><span>Notes</span></h3><p><span>Return values as a string and make sure to add \"XP\" to the end.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"objects"
		],
		"tests": [
			"Test.assertEquals(getXP({",
			"  'Very Easy' : 89,",
			"  'Easy' : 77,",
			"  'Medium' : 30,",
			"  'Hard' : 4,",
			"  'Very Hard' : 1",
			"}), '2055XP');",
			"​",
			"Test.assertEquals(getXP({",
			"  'Very Easy' : 254,",
			"  'Easy' : 32,",
			"  'Medium' : 65,",
			"  'Hard' : 51,",
			"  'Very Hard' : 34",
			"}), '7650XP');",
			"​",
			"​",
			"Test.assertEquals(getXP({",
			"  'Very Easy' : 11,",
			"  'Easy' : 0,",
			"  'Medium' : 2,",
			"  'Hard' : 0,",
			"  'Very Hard' : 27",
			"}), '2255XP');",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction getXP(obj) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yX9LqcQ43nEXo5GS2"
	},
	{
		"title": "Check if a Number is Prime",
		"description": "<p><span>Create a function that outputs </span><code>true</code><span> if a number is prime, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isPrime(31) ➞ true\n\nisPrime(18) ➞ false\n\nisPrime(11) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>A prime number has no other factors except 1 and itself.</span></li><li><span>1 is not considered a prime number.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPrime(31), true)",
			"Test.assertEquals(isPrime(18), false)",
			"Test.assertEquals(isPrime(11), true)",
			"Test.assertEquals(isPrime(12), false)",
			"Test.assertEquals(isPrime(1), false)",
			"Test.assertEquals(isPrime(3), true)",
			"Test.assertEquals(isPrime(48), false)",
			"Test.assertEquals(isPrime(10), false)",
			"Test.assertEquals(isPrime(5), true)",
			"Test.assertEquals(isPrime(77), false)",
			"Test.assertEquals(isPrime(7), true)"
		],
		"starterFn": [
			"1\nfunction isPrime(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/f6n3bkqFCojwB2282"
	},
	{
		"title": "Simulate the Game \"Rock, Paper, Scissors\"",
		"description": "<p><span>Create a function which simulates the game \"rock, paper, scissors\". The function takes the input of both players (rock, paper or scissors), first parameter from first player, second from second player. The function returns the result as such:</span></p><ul><li><span>\"Player 1 wins\"</span></li><li><span>\"Player 2 wins\"</span></li><li><span>\"TIE\" (if both inputs are the same)</span></li></ul><p><span>The rules of rock, paper, scissors, if not known:</span></p><ul><li><span>Both players have to say either \"rock\", \"paper\" or \"scissors\" at the same time.</span></li><li><span>Rock beats scissors, paper beats rock, scissors beat paper.</span></li></ul><h3><span>Examples</span></h3><pre><code>rps(\"rock\", \"paper\") ➞ \"Player 2 wins\"\n\nrps(\"paper\", \"rock\") ➞ \"Player 1 wins\"\n\nrps(\"paper\", \"scissors\") ➞ \"Player 2 wins\"\n\nrps(\"scissors\", \"scissors\") ➞ \"TIE\"\n\nrps(\"scissors\", \"paper\") ➞ \"Player 1 wins\"</code></pre><h3><span>Notes</span></h3><p><span>There are several ways to solve this challenge.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"games"
		],
		"tests": [
			"Test.assertEquals(rps(\"rock\", \"paper\"), \"Player 2 wins\")",
			"Test.assertEquals(rps(\"paper\", \"rock\"), \"Player 1 wins\")",
			"Test.assertEquals(rps(\"paper\", \"scissors\"), \"Player 2 wins\")",
			"Test.assertEquals(rps(\"scissors\", \"scissors\"), \"TIE\")",
			"Test.assertEquals(rps(\"scissors\", \"paper\"), \"Player 1 wins\")"
		],
		"starterFn": [
			"1\nfunction rps(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2n6kGrNsqpexmvJhQ"
	},
	{
		"title": "Narcissistic Numbers",
		"description": "<p><span>A number is narcissistic when the sum of its digits, with each digit raised to the power of digits quantity, is equal to the number itself.</span></p><pre><code>153 ➞ 3 digits ➞ 1³ + 5³ + 3³ = 1 + 125 + 27 = 153 ➞ Narcissistic\n84 ➞ 2 digits ➞ 8² + 4² = 64 + 16 = 80 ➞ Not narcissistic</code></pre><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns </span><code>true</code><span> if the number is narcissistic, and </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isNarcissistic(8208) ➞ true\n// 8⁴ + 2⁴ + 0⁴ + 8⁴ = 8208\n\nisNarcissistic(22) ➞ false\n// 2² + 2² = 8\n\nisNarcissistic(9) ➞ true\n// 9¹ = 9</code></pre><h3><span>Notes</span></h3><ul><li><span>Trivially, any number in the 1-9 range is narcissistic and any two-digit number is not.</span></li><li><span>Curious fact: Only 88 numbers are narcissistic.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isNarcissistic(6), true)",
			"Test.assertEquals(isNarcissistic(1741725), true)",
			"Test.assertEquals(isNarcissistic(66), false)",
			"Test.assertEquals(isNarcissistic(65239), false)",
			"Test.assertEquals(isNarcissistic(886243), false)",
			"Test.assertEquals(isNarcissistic(92727), true)",
			"Test.assertEquals(isNarcissistic(472335975), true)",
			"Test.assertEquals(isNarcissistic(42300981), false)",
			"Test.assertEquals(isNarcissistic(548834), true)"
		],
		"starterFn": [
			"1\nfunction isNarcissistic(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wNh9NaWY6EvA7sPDQ"
	},
	{
		"title": "Planetary Weight Converter",
		"description": "<p><span>In this challenge, you have to convert a weight weighed on a planet of the Solar System to the corresponding weight on another planet.</span></p><p><span>To convert the weight, you have to divide it by the gravitational force of the planet on which is weighed and multiply the result (the </span><em><span>mass</span></em><span>) for the gravitational force of the other planet. See the table below for a list of gravitational forces:</span></p><p><code>weight</code><span> on </span><code>planetA</code><span> / gravitational force of </span><code>planetA</code><span> </span><span>*</span><span> gravitational force of </span><code>planetB</code></p><table><thead><tr><th><span>Planet</span></th><th><span>m/s²</span></th></tr></thead><tbody><tr><td><span>Mercury</span></td><td><span>3.7</span></td></tr><tr><td><span>Venus</span></td><td><span>8.87</span></td></tr><tr><td><span>Earth</span></td><td><span>9.81</span></td></tr><tr><td><span>Mars</span></td><td><span>3.711</span></td></tr><tr><td><span>Jupiter</span></td><td><span>24.79</span></td></tr><tr><td><span>Saturn</span></td><td><span>10.44</span></td></tr><tr><td><span>Uranus</span></td><td><span>8.69</span></td></tr><tr><td><span>Neptune</span></td><td><span>11.15</span></td></tr></tbody></table><p><span>Given a </span><code>weight</code><span> weighed on </span><code>planetA</code><span>, return the converted value for </span><code>planetB</code><span> rounded to the nearest hundredth.</span></p><h3><span>Examples</span></h3><pre><code>spaceWeights(\"Earth\", 1, \"Mars\") ➞ 0.38\n\nspaceWeights(\"Earth\", 1, \"Jupiter\") ➞ 2.53\n\nspaceWeights(\"Earth\", 1, \"Neptune\") ➞ 1.14</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"math",
			"objects",
			"physics"
		],
		"tests": [
			"Test.assertEquals(spaceWeights(\"Earth\", 1, \"Mars\"), 0.38, \"Example #1\")",
			"Test.assertEquals(spaceWeights(\"Earth\", 1, \"Jupiter\"), 2.53, \"Example #2\")",
			"Test.assertEquals(spaceWeights(\"Earth\", 1, \"Neptune\"), 1.14, \"Example #3\")",
			"Test.assertEquals(spaceWeights(\"Jupiter\", 100, \"Mercury\"), 14.93)",
			"Test.assertEquals(spaceWeights(\"Venus\", 75, \"Jupiter\"), 209.61)",
			"Test.assertEquals(spaceWeights(\"Uranus\", 10, \"Saturn\"), 12.01)",
			"Test.assertEquals(spaceWeights(\"Mars\", 120, \"Mercury\"), 119.64)",
			"Test.assertEquals(spaceWeights(\"Neptune\", 1421, \"Earth\"), 1250.23)",
			"Test.assertEquals(spaceWeights(\"Jupiter\", 33, \"Mercury\"), 4.93)",
			"Test.assertEquals(spaceWeights(\"Saturn\", 555, \"Venus\"), 471.54)",
			"Test.assertEquals(spaceWeights(\"Jupiter\", 3.141592, \"Earth\"), 1.24)"
		],
		"starterFn": [
			"1\nfunction spaceWeights(planetA, weight, planetB) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CaWc84kuPBzCMEcR3"
	},
	{
		"title": "Total Count of Numbers in a MultiDimensional Array",
		"description": "<p><span>Create a function that takes a multidimensional array and return the total count of numbers in that array.</span></p><h3><span>Examples</span></h3><pre><code>countNumber([[\"\", 17.2, 5, \"edabit\"]]) ➞ 2\n// 17.2 and 5.\n\ncountNumber([[[[[2, 14]]], 2, 3, 4]]) ➞ 5\n// 2, 14, 2, 3 and 4.\n\ncountNumber([[\"balkot\"]]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Input may be array of numbers, strings and empty arrays.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(countNumber([[\"\", 17.2,5,\"edabit\"]]),2)",
			"Test.assertSimilar(countNumber([[[[[2,14,\"nepal\"]]], 2,3,4]]),5)",
			"Test.assertSimilar(countNumber([0, [12,\"biratnagar\",[[2]]]]),3)",
			"Test.assertSimilar(countNumber([[\"balkot\"]]),0)",
			"Test.assertSimilar(countNumber([1,2,3,4,5,6]),6)"
		],
		"starterFn": [
			"1\nconst countNumber = arr => {",
			"2\n  ",
			"3\n};"
		],
		"url": "https://edabit.com/challenge/6dC7GRf5SsbsNvYdk"
	},
	{
		"title": "Change Every Letter to the Next Letter",
		"description": "<p><span>Write a function that changes every letter to the next letter:</span></p><ul><li><span>\"a\" becomes \"b\"</span></li><li><span>\"b\" becomes \"c\"</span></li><li><span>\"d\" becomes \"e\"</span></li><li><span>and so on ...</span></li></ul><h3><span>Examples</span></h3><pre><code>move(\"hello\") ➞ \"ifmmp\"\n\nmove(\"bye\") ➞ \"czf\"\n\nmove(\"welcome\") ➞ \"xfmdpnf\"</code></pre><h3><span>Notes</span></h3><p><span>There will be no z's in the tests.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(move(\"hello\"), \"ifmmp\")",
			"Test.assertEquals(move(\"lol\"), \"mpm\")",
			"Test.assertEquals(move(\"bye\"), \"czf\")"
		],
		"starterFn": [
			"1\nfunction move(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZvjZEMBB2hgvZMTkv"
	},
	{
		"title": "Extending the String Prototype",
		"description": "<p><span>Javascript has a </span><strong><span>String prototype</span></strong><span> default in the language which contains properties and methods such as </span><code>.length</code><span> and </span><code>.toLowerCase()</code><span>. Extend the </span><strong><span>String prototype</span></strong><span> by creating two new methods:</span></p><ol><li><code>.consonants()</code><span>, which returns the number of consonants in a word when called.</span></li><li><code>.vowels()</code><span>, which returns the number of vowels in a word when called.</span></li></ol><h3><span>Examples</span></h3><pre><code>\"hello\".consonants() ➞ 3\n\"hello\".vowels() ➞ 2\n\n\"greatly\".consonants() ➞ 5\n\"greatly\".vowels() ➞ 2\n\n\"Smithsonian\".consonants() ➞ 7\n\"Smithsonian\".vowels() ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>Treat </span><code>y</code><span> as a consonant, not a vowel.</span></li><li><span>Upper vs. lower case does not matter.</span></li><li><span>Hint: See comments for another example if you get stuck.</span></li></ul><p><span>It is not mandatory for this exercise, but in general it is a good idea to double-check if there exists methods with the </span><em><span>same name</span></em><span> a your custom functions before using them to extend the prototype. This is to prevent the accidental overwrite of a pre-existing method. (See comments for additional info).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"Test.assertEquals('hello'.consonants(), 3)",
			"Test.assertEquals('hello'.vowels(), 2)",
			"Test.assertEquals('greatly'.consonants(), 5)",
			"Test.assertEquals('greatly'.vowels(), 2)",
			"Test.assertEquals('Smithsonian'.consonants(), 7)",
			"Test.assertEquals('Smithsonian'.vowels(), 4)",
			"Test.assertEquals('fudge'.consonants(), 3)",
			"Test.assertEquals('fudge'.vowels(), 2)",
			"Test.assertEquals('lemony'.consonants(), 4)",
			"Test.assertEquals('lemony'.vowels(), 2)",
			"Test.assertEquals('chocolate'.consonants(), 5)",
			"Test.assertEquals('chocolate'.vowels(), 4)"
		],
		"starterFn": [
			"1\nString.prototype.consonants = function() {",
			"2\n  // Write your code here",
			"3\n  ",
			"4\n}",
			"5\n​",
			"6\nString.prototype.vowels = function() {",
			"7\n  // Write your code here",
			"8\n  ",
			"9\n}"
		],
		"url": "https://edabit.com/challenge/otouNcoRc4nswPKHJ"
	},
	{
		"title": "First Before Second Letter",
		"description": "<p><span>You are given three inputs: a string, one letter, and a second letter.</span></p><p><span>Write a function that returns </span><code>true</code><span> if every instance of the first letter occurs </span><strong><span>before</span></strong><span> every instance of the second letter.</span></p><h3><span>Examples</span></h3><pre><code>firstBeforeSecond(\"a rabbit jumps joyfully\", \"a\", \"j\") ➞ true\n// every instance of \"a\" occurs before every instance of \"j\"\n\nfirstBeforeSecond(\"knaves knew about waterfalls\", \"k\", \"w\") ➞  true\n\nfirstBeforeSecond(\"happy birthday\", \"a\", \"y\") ➞ false\n// the \"a\" in \"birthday\" occurs after the \"y\" in \"happy\"\n\nfirstBeforeSecond(\"precarious kangaroos\", \"k\", \"a\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>All strings will be in lower case.</span></li><li><span>All strings will contain the first and second letters at least </span><strong><span>once</span></strong><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(firstBeforeSecond(\"a rabbit jumps joyfully\", \"a\", \"j\"), true)",
			"Test.assertEquals(firstBeforeSecond(\"knaves knew about waterfalls\", \"k\", \"w\"), true)",
			"Test.assertEquals(firstBeforeSecond(\"maria makes money\", \"m\", \"o\"), true)",
			"Test.assertEquals(firstBeforeSecond(\"the hostess made pecan pie\", \"h\", \"p\"), true)",
			"Test.assertEquals(firstBeforeSecond(\"barry the butterfly flew away\", \"b\", \"f\"), true)",
			"Test.assertEquals(firstBeforeSecond(\"moody muggles\", \"m\", \"g\"), true)",
			"Test.assertEquals(firstBeforeSecond(\"happy birthday\", \"a\", \"y\"), false)",
			"Test.assertEquals(firstBeforeSecond(\"precarious kangaroos\", \"k\", \"a\"), false)",
			"Test.assertEquals(firstBeforeSecond(\"maria makes money\", \"m\", \"i\"), false)",
			"Test.assertEquals(firstBeforeSecond(\"taken by the beautiful sunrise\", \"u\", \"s\"), false)",
			"Test.assertEquals(firstBeforeSecond(\"sharp cheddar biscuit\", \"t\", \"s\"), false)",
			"Test.assertEquals(firstBeforeSecond(\"moody muggles\", \"m\", \"o\"), false)"
		],
		"starterFn": [
			"1\nfunction firstBeforeSecond(s, first, second) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ozRsLB9QpRkzuLSXJ"
	},
	{
		"title": "Count the Number of Duplicate Characters",
		"description": "<p><span>Create a function that returns the amount of duplicate characters in a string. It will be case sensitive and spaces are included. If there are no duplicates, return </span><code>0</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>duplicates(\"Hello World!\") ➞ 3\n\nduplicates(\"foobar\") ➞ 1\n\nduplicates(\"helicopter\") ➞ 1\n\nduplicates(\"birthday\") ➞ 0\n// If there are no duplicates, return 0</code></pre><h3><span>Notes</span></h3><p><span>Make sure to only start counting the second time a character appears.</span></p>",
		"publishedBy": "MWO",
		"publishedByUrl": "https://edabit.com/user/Tu22KsScr9mykuy8N",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(duplicates(\"Hello World!\"), 3)",
			"Test.assertEquals(duplicates(\"birthday\"), 0)",
			"Test.assertEquals(duplicates(\"helicopter\"), 1)",
			"Test.assertEquals(duplicates(\"foobar\"), 1)",
			"Test.assertEquals(duplicates(\"The Quick Brown Fox Jumps Over the Lazy Dog\"), 14)",
			"Test.assertEquals(duplicates(\"donald trump\"), 1)",
			"Test.assertEquals(duplicates(\"Row, row, row your boat Gently down the stream Merrily merrily, merrily, merrily Life is but a dream.\"), 77)",
			"Test.assertEquals(duplicates(\"Gen'rals gathered in their masses,Just like witches at black masses\"), 45)",
			"Test.assertEquals(duplicates(\"Evil minds that plot destruction,Sorcerer of death's construction\"), 43)",
			"Test.assertEquals(duplicates(\"gamer\"), 0)",
			"Test.assertEquals(duplicates(\"gamer gang\"), 3)"
		],
		"starterFn": [
			"1\nfunction duplicates(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7T2ytDgjgsh9CMq6D"
	},
	{
		"title": "Multidimensional Array into Single Dimensional Array",
		"description": "<p><span>Create a function that takes multidimensional array, converts into one dimensional array and returns it using </span><strong><span>recursion</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>flatten([[17.2, 5, \"code\"]]) ➞ [17.2, 5, \"code\"]\n\nflatten([[[[[2, 14, \"rubber\"]]], 2, 3, 4]])) ➞ [2, 14, \"rubber\", 2, 3, 4]\n\nflatten([[\"balkot\"]]) ➞ [\"balkot\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Input contains at least one element.</span></li><li><span>Use of built in methods is discouraged.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"recursion"
		],
		"tests": [
			"Test.assertSimilar(flatten([[17.2,5,\"edabit\"]]),[17.2,5,\"edabit\"])",
			"Test.assertSimilar(flatten([[[[[2,14,\"rubber\"]]], 2,3,4]]),[2,14,\"rubber\",2,3,4])",
			"Test.assertSimilar(flatten([0, [12,\"biratnagar\",[[2]]]]),[0,12,\"biratnagar\",2])",
			"Test.assertSimilar(flatten([[\"balkot\"]]),[\"balkot\"])",
			"Test.assertSimilar(flatten([1,2,3,4,5,6]),[1,2,3,4,5,6])"
		],
		"starterFn": [
			"1\nfunction flatten(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2oMTwjqmmXD8XBuMn"
	},
	{
		"title": "Tidy Title and Author Strings",
		"description": "<p><span>You have an array of strings, each consisting of a </span><strong><span>book title</span></strong><span> and an </span><strong><span>author's name</span></strong><span>.</span></p><p><span>To illustrate:</span></p><pre><code>[\n  [\"   Death of a Salesman - Arthur Miller    \"],\n  [\"   Macbeth - William Shakespeare    \"],\n  [\"    A Separate Peace - John Knowles     \"],\n  [\" Lord of the Flies - William Golding\"],\n  [\"A Tale of Two Cities - Charles Dickens\"]\n]</code></pre><p><span>Create a function that takes an array like the one above and transforms it into the same format as the one below:</span></p><pre><code>[\n  [\"Death of a Salesman\", \"Arthur Miller\"],\n  [\"Macbeth\", \"William Shakespeare\"],\n  [\"A Separate Peace\", \"John Knowles\"],\n  [\"Lord of the Flies\", \"William Golding\"],\n  [\"A Tale of Two Cities\", \"Charles Dickens\"]\n]</code></pre><h3><span>Examples</span></h3><pre><code>tidyBooks([\n  \"     The Catcher in the Rye - J. D. Salinger    \",\n  \"    Brave New World - Aldous Huxley   \",\n  \"    Of Mice and Men - John Steinbeck    \"\n]) ➞ [\n  \"The Catcher in the Rye\", \"J. D. Salinger\",\n  \"Brave New World\", \"Aldous Huley\",\n  \"Of Mice and Men\", \"John Steinbeck\"\n]</code></pre><h3><span>Notes</span></h3><p><span>Some of these entries have excess white space. Remove this white space in your final output.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(tidyBooks([\"     The Catcher in the Rye - J. D. Salinger    \", ",
			"\"    Brave New World - Aldous Huxley   \", ",
			"\"    Of Mice and Men - John Steinbeck    \"]), ",
			"[[\"The Catcher in the Rye\", \"J. D. Salinger\"], ",
			"[\"Brave New World\", \"Aldous Huxley\"], ",
			"[\"Of Mice and Men\", \"John Steinbeck\"]])",
			"​",
			"​",
			"Test.assertSimilar(tidyBooks([\"     The Grapes of Wrath - John Steinbeck    \", ",
			"\"    Great Expectations - Charles Dickens   \", ",
			"\"    The Scarlet Letter - Nathaniel Hawthorne    \"]), ",
			"[[\"The Grapes of Wrath\", \"John Steinbeck\"], ",
			"[\"Great Expectations\", \"Charles Dickens\"], ",
			"[\"The Scarlet Letter\", \"Nathaniel Hawthorne\"]])"
		],
		"starterFn": [
			"1\nfunction tidyBooks(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5vz5mrd7BTd7Q7XSz"
	},
	{
		"title": "Recursion: Count Vowels",
		"description": "<p><span>Write a function that </span><strong><span>recursively</span></strong><span> returns the number of vowels in a string.</span></p><h3><span>Examples</span></h3><pre><code>countVowels(\"apple\") ➞ 2\n\ncountVowels(\"cheesecake\") ➞ 5\n\ncountVowels(\"bbb\") ➞ 0\n\ncountVowels(\"\") ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>All letters will be in lower case.</span></li><li><span>Vowels are: </span><code>a, e, i, o, u</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countVowels(\"apple\"), 2)",
			"Test.assertEquals(countVowels(\"cheesecake\"), 5)",
			"Test.assertEquals(countVowels(\"martini\"), 3)",
			"Test.assertEquals(countVowels(\"rhythm\"), 0)",
			"Test.assertEquals(countVowels(\"\"), 0)",
			"Test.assertEquals(countVowels(\"b\"), 0)",
			"Test.assertEquals(countVowels(\"a\"), 1)",
			"Test.assertEquals(countVowels(\"bbbbbb\"), 0)",
			"Test.assertEquals(countVowels(\"bbbbba\"), 1)",
			"Test.assertEquals(countVowels(\"abbbb\"), 1)",
			"Test.assertEquals(countVowels(\"bbbab\"), 1)",
			"Test.assertEquals(countVowels(\"bbaab\"), 2)",
			"Test.assertEquals(countVowels(\"baabab\"), 3)"
		],
		"starterFn": [
			"1\nfunction countVowels(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/j3N6DQa4Z5LvqPGEb"
	},
	{
		"title": "Promises V: Then",
		"description": "<p><span>So we can use </span><strong><span>resolve</span></strong><span> and </span><strong><span>reject</span></strong><span> callbacks to help us store async results whether successful or unsuccessful, but what good are those if we don't have access to those results. Thus we have the </span><strong><span>then</span></strong><span> function which </span><strong><span>returns a promise</span></strong><span> that appends either a fulfilled or rejection handler(callback) or just returns the </span><strong><span>settled value</span></strong><span>.</span></p><pre><code>let promise = new Promise( (resolve, reject) =&gt; {\n  setTimeout(( ) =&gt; {\n     resolve(\"success!\")\n  }, 1000)\n})\n\npromise.then() // returns the settled value\npromise.then((val) =&gt; console.log(val)) // logs the result of the **onFufilled** callback</code></pre><h3><span>Challenge</span></h3><ul><li><span>Add the necessary pieces to fix the promise and the </span><strong><span>then</span></strong><span> function.</span></li><li><span>It should resolve to a message </span><strong><span>success!</span></strong><span>.</span></li><li><span>Re-assign the </span><strong><span>result</span></strong><span> to the settled value inside the then function.</span></li></ul><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on promises.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"function promiseState(p) {",
			"  const t = {};",
			"  return Promise.race([p, t]).then(v => (v === t)? \"pending\" : \"fulfilled\", () => \"rejected\");",
			"}",
			"​",
			"Test.assertEquals(result, \"\", \"You are only allowed to reassign 'result' inside of the 'onFulfilled' callback.\")",
			"promiseState(promise).then(state => Test.assertEquals(state, \"fulfilled\", \"Did pass in the resolve callback to your promise?\"))",
			"promise.then(x => Test.assertEquals(result, \"success!\"))"
		],
		"starterFn": [
			"1\nvar result = \"\"",
			"2\n​",
			"3\nlet promise = new Promise(() => {",
			"4\n})",
			"5\n​",
			"6\npromise.then()"
		],
		"url": "https://edabit.com/challenge/xsaGheX3yQ4g4Tb8b"
	},
	{
		"title": "Fix The Error: Array Reduce",
		"description": "<p><span>The  instructor assigns Boron two tasks (regarding the use of </span><code>reduce()</code><span> method after lecturing in array methods).</span></p><ol><li><span>The first task is to create a function </span><code>calculateSum()</code><span> that takes a string and returns the sum of the ASCII values of all the characters in the string  using </span><code>reduce()</code><span>.</span></li><li><span>The second task is to create a function </span><code>reverseString()</code><span> that reverses and returns an input string using </span><code>reduce()</code><span>.</span></li></ol><p><span>While solving the problem, Boron has encountered errors. Help him fix the errors.</span></p><h3><span>Examples</span></h3><pre><code>calculateSum(\"lime\") ➞ 423\n// 108 + 105 + 109 + 101 = 423\n\ncalculateSum(\"a\") ➞ 97\n// a = 97\n\nreverseString(\"hello\") ➞ \"olleh\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bugs",
			"strings"
		],
		"tests": [
			"Test.assertEquals(calculateSum(\"orange\"), 636)",
			"Test.assertEquals(calculateSum(\"lime\"), 423)",
			"Test.assertEquals(calculateSum(\"mushroom\"), 890)",
			"Test.assertEquals(reverseString(\"Think\"), \"knihT\")",
			"Test.assertEquals(reverseString(\"world\"), \"dlrow\")",
			"Test.assertEquals(reverseString(\"people\"), \"elpoep\")"
		],
		"starterFn": [
			"1\nfunction calculateSum(txt) {",
			"2\n  return txt.reduce(ch => ch);",
			"3\n}",
			"4\n​",
			"5\nfunction reverseString(txt) {",
			"6\n  return txt.reduce(ch => ch);",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/pzv7pwMeXnF5aZMfQ"
	},
	{
		"title": "Balancing Scales",
		"description": "<p><span>Given an array with an odd number of elements, return whether the scale will tip </span><code>\"left\"</code><span> or </span><code>\"right\"</code><span> based on the sum of the numbers. The scale will tip on the direction of the largest total. If both sides are equal, return </span><code>\"balanced\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>scaleTip([0, 0, \"I\", 1, 1]) ➞ \"right\"\n// 0 &lt; 2 so it will tip right\n\nscaleTip([1, 2, 3, \"I\", 4, 0, 0]) ➞ \"left\"\n// 6 &gt; 4 so it will tip left\n\nscaleTip([5, 5, 5, 0, \"I\", 10, 2, 2, 1]) ➞ \"balanced\"\n// 15 = 15 so it will stay balanced</code></pre><h3><span>Notes</span></h3><ul><li><span>The middle element will always be \"I\" so you can just ignore it.</span></li><li><span>Assume the numbers all represent the same unit.</span></li><li><span>Both sides will have the same number of elements.</span></li><li><span>There are no such things as negative weights in both real life and the tests!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"conditions"
		],
		"tests": [
			"Test.assertEquals(scaleTip([0, 0, 0, \"I\", 1, 1, 1]), \"right\", \"0 < 3 so it will tip right\")",
			"Test.assertEquals(scaleTip([1, 2, 3, \"I\", 4, 0, 0]), \"left\", \"6 > 4 so it will tip left\")",
			"Test.assertEquals(scaleTip([5, 5, 5, \"I\", 10, 2, 3]), \"balanced\", \"15 = 15 so it will stay balanced\")",
			"Test.assertEquals(scaleTip([2, 3, 1, \"I\", 6, 0, 0]), \"balanced\")",
			"Test.assertEquals(scaleTip([500, 0, 0, \"I\", 32, 53, 12]), \"left\")",
			"Test.assertEquals(scaleTip([500, 0, 0, \"I\", 302, 53, 12]), \"left\")",
			"Test.assertEquals(scaleTip([50, 0, 0, \"I\", 32, 53, 12]), \"right\")",
			"Test.assertEquals(scaleTip([5, \"I\", 3]), \"left\")",
			"Test.assertEquals(scaleTip([500, 0, 0, \"I\", 500, 0, 0]), \"balanced\")",
			"Test.assertEquals(scaleTip([500, 0, 0, 0, 0, 0, \"I\", 32, 53, 12, 0, 0, 0]), \"left\")",
			"Test.assertEquals(scaleTip([1, 300, \"I\", 300, 1]), \"balanced\")",
			"Test.assertEquals(scaleTip([1, 300, \"I\", 300, 2]), \"right\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction scaleTip(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/g3tBCBvw8Q7phdrPP"
	},
	{
		"title": "Perfect Square Patch",
		"description": "<p><span>Create a function that takes an integer and outputs an </span><code>n x n</code><span> square solely consisting of the integer </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>squarePatch(3) ➞ [\n  [3, 3, 3],\n  [3, 3, 3],\n  [3, 3, 3]\n]\n\nsquarePatch(5) ➞ [\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5],\n  [5, 5, 5, 5, 5]\n]\n\nsquarePatch(1) ➞ [\n  [1]\n]\n\nsquarePatch(0) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><code>n &gt;= 0</code><span>.</span></li><li><span>If </span><code>n === 0</code><span>, return an empty array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(squarePatch(3), [",
			"  [3, 3, 3],",
			"  [3, 3, 3],",
			"  [3, 3, 3]",
			"])",
			"​",
			"Test.assertSimilar(squarePatch(2), [",
			"  [2, 2],",
			"  [2, 2]",
			"])",
			"​",
			"Test.assertSimilar(squarePatch(4), [",
			"  [4, 4, 4, 4],",
			"  [4, 4, 4, 4],",
			"  [4, 4, 4, 4],",
			"  [4, 4, 4, 4]",
			"])",
			"​",
			"Test.assertSimilar(squarePatch(6), [",
			"  [6, 6, 6, 6, 6, 6],",
			"  [6, 6, 6, 6, 6, 6],",
			"  [6, 6, 6, 6, 6, 6],",
			"  [6, 6, 6, 6, 6, 6],",
			"  [6, 6, 6, 6, 6, 6],",
			"  [6, 6, 6, 6, 6, 6]",
			"])"
		],
		"starterFn": [
			"1\nfunction squarePatch(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jrdEvTaFogLcpN2fH"
	},
	{
		"title": "Grab the City",
		"description": "<p><span>Write a function to return the city from each of these vacation spots.</span></p><h3><span>Examples</span></h3><pre><code>grabCity(\"[Last Day!] Beer Festival [Munich]\") ➞ \"Munich\"\n\ngrabCity(\"Cheese Factory Tour [Portland]\") ➞ \"Portland\"\n\ngrabCity(\"[50% Off!][Group Tours Included] 5-Day Trip to Onsen [Kyoto]\") ➞ \"Kyoto\"</code></pre><h3><span>Notes</span></h3><p><span>There may be additional brackets, but the city will always be in the last bracket pair.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(grabCity(\"[Last Day!] Beer Festival [Munich]\"), \"Munich\")",
			"Test.assertEquals(grabCity(\"Cheese Factory Tour [Portland]\"), \"Portland\")",
			"Test.assertEquals(grabCity(\"[Duration: 7 hours] Tour of the Maritimes [Prince Edward Island]\"), \"Prince Edward Island\")",
			"Test.assertEquals(grabCity(\"[5 Stars] Traditional Gondola Experience [Venice]\"), \"Venice\")",
			"Test.assertEquals(grabCity(\"[Last Minute Deal][$1039] Machu Picchu 3 Day Trip [Machu Picchu]\"), \"Machu Picchu\")",
			"Test.assertEquals(grabCity(\"[50% Off!][Group Tours Included] 5-Day Trip to Onsen [Kyoto]\"), \"Kyoto\")"
		],
		"starterFn": [
			"1\nfunction grabCity(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/D47BAo44DZKqnLg5M"
	},
	{
		"title": "Returning an \"Add\" Function",
		"description": "<p><span>Given a number, </span><code>n</code><span>, return a function which adds </span><code>n</code><span> to the number passed to it.</span></p><h3><span>Examples</span></h3><pre><code>add(10)(20) ➞ 30\n\nadd(0)(20) ➞ 20\n\nadd(-30)(80) ➞ 50</code></pre><h3><span>Notes</span></h3><ul><li><span>All numbers used in the tests will be integers (whole numbers).</span></li><li><span>Returning a function from a function is a key part of understanding </span><em><span>higher order functions</span></em><span> (functions which operate on and return functions).</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"closures",
			"higher_order_functions",
			"language_fundamentals",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(add(20)(10), 30)",
			"Test.assertEquals(add(30)(10), 40)",
			"Test.assertEquals(add(100)(100), 200)",
			"Test.assertEquals(add(-30)(80), 50)",
			"Test.assertEquals(add(-10)(-10), -20)"
		],
		"starterFn": [
			"1\nfunction add(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xtv5ZT7xDsHyrshTq"
	},
	{
		"title": "Are Letters in the Second String Present in the First?",
		"description": "<p><span>Create a function that accepts an array of two strings and checks if the letters in the second string are present in the first string.</span></p><h3><span>Examples</span></h3><pre><code>letterCheck([\"trances\", \"nectar\"]) ➞ true\n\nletterCheck([\"compadres\", \"DRAPES\"]) ➞ true\n\nletterCheck([\"parses\", \"parsecs\"]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Function should not be case sensitive (as indicated in the second example).</span></li><li><span>Both strings are presented as a single argument in the form of an array.</span></li><li><strong><span>Bonus:</span></strong><span> Solve this without RegEx.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(letterCheck([\"trances\", \"nectar\"]), true)",
			"Test.assertEquals(letterCheck([\"THE EYES\", \"they see\"]), true)",
			"Test.assertEquals(letterCheck([\"assert\", \"staring\"]), false)",
			"Test.assertEquals(letterCheck([\"arches\", \"later\"]), false)",
			"Test.assertEquals(letterCheck([\"dale\", \"caller\"]), false)",
			"Test.assertEquals(letterCheck([\"parses\", \"parsecs\"]), false)",
			"Test.assertEquals(letterCheck([\"replays\", \"adam\"]), false)",
			"Test.assertEquals(letterCheck([\"mastering\", \"streaming\"]), true)",
			"Test.assertEquals(letterCheck([\"drapes\", \"compadres\"]), false)",
			"Test.assertEquals(letterCheck([\"deltas\", \"slated\"]), true)"
		],
		"starterFn": [
			"1\nfunction letterCheck(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/62FxK8G5XB6mdX4Fy"
	},
	{
		"title": "Max Adjacent Product",
		"description": "<p><span>Given an array of integers, find the pair of adjacent elements that have the largest product and return that product.</span></p><h3><span>Examples</span></h3><pre><code>adjacentProduct([3, 6, -2, -5, 7, 3] ) ➞ 21\n\nadjacentProduct([5, 6, -4, 2, 3, 2, -23]) ➞ 30\n\nadjacentProduct([0, -1, 1, 24, 1, -4, 8, 10]) ➞ 80</code></pre><h3><span>Notes</span></h3><p><span>Each array has at least two elements.</span></p>",
		"publishedBy": "DreamArdor",
		"publishedByUrl": "https://edabit.com/user/PAzNgJF54C2mYPkR9",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(adjacentProduct([3, 6, -2, -5, 7, 3]), 21)",
			"Test.assertEquals(adjacentProduct([5, 6, -4, 2, 3, 2, -23]) , 30)",
			"Test.assertEquals(adjacentProduct([0, -1, 1, 24, 1, -4, 8, 10]), 80)",
			"Test.assertEquals(adjacentProduct([1, 0, 1, 0, 1000]), 0)",
			"Test.assertEquals(adjacentProduct([-23, 4, -3, 8, -12]), -12)",
			"Test.assertEquals(adjacentProduct([-1, -2]), 2)"
		],
		"starterFn": [
			"1\nfunction adjacentProduct(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gRtHcBJSZf6fTaz8g"
	},
	{
		"title": "What's the Data Type?",
		"description": "<p><span>Create a function that returns the data type of a given variable. These are the eight data types this challenge will be testing for:</span></p><ul><li><span>Array</span></li><li><span>Object</span></li><li><span>String</span></li><li><span>Number</span></li><li><span>Boolean</span></li><li><span>Null</span></li><li><span>Undefined</span></li><li><span>Date</span></li></ul><h3><span>Examples</span></h3><pre><code>dataType([1, 2, 3, 4]) ➞ \"array\"\n\ndataType({key: \"value\"}) ➞ \"object\"\n\ndataType(\"This is an example string.\") ➞ \"string\"\n\ndataType(new Date()) ➞ \"date\"</code></pre><h3><span>Notes</span></h3><p><span>Return the name of the data type as a lowercase string.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"validation"
		],
		"tests": [
			"Test.assertEquals(dataType([1, 2, 3, 4, 5]), \"array\")",
			"Test.assertEquals(dataType({key: \"value\"}), \"object\")",
			"Test.assertEquals(dataType(\"This is an example string...\"), \"string\")",
			"Test.assertEquals(dataType(2017), \"number\")",
			"Test.assertEquals(dataType(true), \"boolean\")",
			"Test.assertEquals(dataType(null), \"null\")",
			"Test.assertEquals(dataType(undefined), \"undefined\")",
			"Test.assertEquals(dataType(new Date()), \"date\")"
		],
		"starterFn": [
			"1\nfunction dataType(value) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/muSMtsoSbygZ7J5Xw"
	},
	{
		"title": "Grab the Numbers",
		"description": "<p><span>Given a string including a bunch of </span><em><span>characters and numbers</span></em><span>, return the </span><strong><span>sum</span></strong><span> of all the numbers in the string. Note that multiple digits </span><strong><span>next to each other</span></strong><span> are counted as </span><strong><span>a whole number</span></strong><span> rather than separate digits.</span></p><h3><span>Examples</span></h3><pre><code>grabNumberSum(\"aeiou250abc10\") ➞ 260\n\ngrabNumberSum(\"one1two2twenty20\") ➞ 23\n\ngrabNumberSum(\"900uwu50uwuuwuuwu25uwu25\") ➞ 1000</code></pre><h3><span>Notes</span></h3><p><span>Remember not to just add </span><em><span>single digit numbers together</span></em><span>, it should be possible for answers to easily get into the 100s!</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(grabNumberSum(\"aeiou5abc10\"), 15)",
			"Test.assertEquals(grabNumberSum(\"75shugeb15hvyff15\"), 105)",
			"Test.assertEquals(grabNumberSum(\"900uwu50uwuuwuuwu25uwu25\"), 1000)",
			"Test.assertEquals(grabNumberSum(\"one1two2twenty20\"), 23)",
			"Test.assertEquals(grabNumberSum(\"1s1s11\"), 13)",
			"Test.assertEquals(grabNumberSum(\"75\"), 75)",
			"Test.assertEquals(grabNumberSum(\"aeiou250abc10\"), 260)"
		],
		"starterFn": [
			"1\nfunction grabNumberSum(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8E2BQmb5GZ8G4mkgM"
	},
	{
		"title": "Box Completely Filled?",
		"description": "<p><span>Create a function that checks if the box is completely filled with the asterisk symbol </span><code>*</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>completelyFilled([\n  \"#####\",\n  \"#***#\",\n  \"#***#\",\n  \"#***#\",\n  \"#####\"\n]) ➞ true\n\ncompletelyFilled([\n  \"#####\",\n  \"#* *#\",\n  \"#***#\",\n  \"#***#\",\n  \"#####\"\n]) ➞ false\n\ncompletelyFilled([\n  \"###\",\n  \"#*#\",\n  \"###\"\n]) ➞ true\n\ncompletelyFilled([\n  \"##\",\n  \"##\"\n]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Boxes of size </span><code>n &lt;= 2</code><span> are considered automatically filled (see example #4).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(completelyFilled([",
			"    \"#\"",
			"  ]), true)",
			"Test.assertEquals(completelyFilled([",
			"    \"##\", ",
			"    \"##\"",
			"  ]), true)",
			"Test.assertEquals(completelyFilled([",
			"    \"###\", ",
			"    \"#*#\", ",
			"    \"###\"",
			"  ]), true)",
			"Test.assertEquals(completelyFilled([",
			"    \"######\", ",
			"    \"#****#\", ",
			"    \"#****#\", ",
			"    \"#****#\", ",
			"    \"#****#\", ",
			"    \"######\"",
			"  ]), true)",
			"Test.assertEquals(completelyFilled([",
			"    \"#####\", ",
			"    \"#***#\", ",
			"    \"#***#\", ",
			"    \"#***#\", ",
			"    \"#####\""
		],
		"starterFn": [
			"1\nfunction completelyFilled(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TwxkHyzwiZyHhcTgu"
	},
	{
		"title": "\"EdaBit\" Challenge",
		"description": "<p><span>Create a function that returns the array of numbers from a given range. But for multiples of three, return </span><code>“Eda”</code><span> instead of the number and for the multiples of five, return </span><code>“Bit”</code><span>. For numbers which are multiples of both three and five, return </span><code>“EdaBit”</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>edaBit(0, 10) ➞ [\"EdaBit\", 1, 2, \"Eda\", 4, \"Bit\", \"Eda\", 7, 8, \"Eda\", \"Bit\" ]\n\nedaBit(14, 20) ➞ [14,  \"EdaBit\", 16, 17,  \"Eda\", 19, \"Bit\" ]\n\nedaBit(99, 106) ➞ [\"Eda\", \"Bit\", 101, \"Eda\", 103, 104, \"EdaBit\", 106 ]</code></pre><h3><span>Notes</span></h3><p><span>In case the number 0 happens to be in the range, return </span><code>\"EdaBit\"</code><span> as well.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math"
		],
		"tests": [
			"Test.assertSimilar(edaBit(1, 20), [1,2,'Eda',4,'Bit','Eda',7,8,'Eda','Bit',11,'Eda',13,14,'EdaBit',16,17,'Eda',19,'Bit'])",
			"Test.assertSimilar(edaBit(-250, -230), ['Bit', 'Eda', -248, -247, 'Eda', 'Bit', -244, 'Eda', -242, -241, 'EdaBit', -239, -238, 'Eda', -236, 'Bit', 'Eda', -233, -232, 'Eda', 'Bit'])",
			"Test.assertSimilar(edaBit(-10, 5), ['Bit', 'Eda', -8, -7, 'Eda', 'Bit', -4, 'Eda', -2, -1, 'EdaBit', 1, 2, 'Eda', 4, 'Bit'])",
			"Test.assertSimilar(edaBit(33, 45), ['Eda', 34, 'Bit', 'Eda', 37, 38, 'Eda', 'Bit', 41, 'Eda', 43, 44, 'EdaBit'])",
			"Test.assertSimilar(edaBit(50, 90), ['Bit', 'Eda', 52, 53, 'Eda', 'Bit', 56, 'Eda', 58, 59, 'EdaBit', 61, 62, 'Eda', 64, 'Bit', 'Eda', 67, 68, 'Eda', 'Bit', 71, 'Eda', 73, 74, 'EdaBit', 76, 77, 'Eda', 79, 'Bit', 'Eda', 82, 83, 'Eda', 'Bit', 86, 'Eda', 88, 89, 'EdaBit'])"
		],
		"starterFn": [
			"1\nfunction edaBit(start, end) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RGtTrNLpckt6bdmSx"
	},
	{
		"title": "Alphanumeric Restriction",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if the given string has any of the following:</span></p><ul><li><span>Only letters and no numbers.</span></li><li><span>Only numbers and no letters.</span></li></ul><p><span>If a string has </span><strong><span>both</span></strong><span> numbers and letters, or contains characters which don't fit into any category, return </span><code>false</code></p><h3><span>Examples</span></h3><pre><code>alphanumericRestriction(\"Bold\") ➞ true\n\nalphanumericRestriction(\"123454321\") ➞ true\n\nalphanumericRestriction(\"H3LL0\") ➞ false\n\nalphanumericRestriction(\"ed@bit\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Any string that contains spaces or is empty should return </span><code>false</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(alphanumericRestriction(\"Bold\"), true)",
			"Test.assertEquals(alphanumericRestriction(\"123454321\"), true)",
			"Test.assertEquals(alphanumericRestriction(\"H3LL0\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"hhefuhiwfgn\"), true)",
			"Test.assertEquals(alphanumericRestriction(\"0\"), true)",
			"Test.assertEquals(alphanumericRestriction(\"hhefuhiwfgn\"), true)",
			"Test.assertEquals(alphanumericRestriction(\"ed@bit\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"only letters right\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"132 143 234\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"()\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"Hello\"), true)",
			"Test.assertEquals(alphanumericRestriction(\"10,000\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"1a2b3c\"), false)",
			"Test.assertEquals(alphanumericRestriction(\"\"), false)"
		],
		"starterFn": [
			"1\nfunction alphanumericRestriction(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DEXocQFvKavLFqCLC"
	},
	{
		"title": "Musical Cadences",
		"description": "<p><span>In music, cadences act as </span><em><span>punctuation</span></em><span> in musical phrases, and help to mark the end of phrases. Cadences are the two chords at the end of a phrase. The different cadences are as follows:</span></p><ul><li><strong><span>V</span></strong><span> followed by </span><strong><span>I</span></strong><span> is a </span><em><span>Perfect Cadence</span></em></li><li><strong><span>IV</span></strong><span> followed by </span><strong><span>I</span></strong><span> is a </span><em><span>Plagal Cadence</span></em></li><li><strong><span>V</span></strong><span> followed by </span><strong><span>Any chord other than I</span></strong><span> is an </span><em><span>Interrupted Cadence</span></em></li><li><strong><span>Any chord</span></strong><span> followed by </span><strong><span>V</span></strong><span> is an </span><em><span>Imperfect Cadence</span></em></li></ul><p><span>Create a function where given a chord progression as an array, return the type of cadence the phrase </span><em><span>ends on</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>findCadence([\"I\", \"IV\", \"V\"]) ➞ \"imperfect\"\n\nfindCadence([\"ii\", \"V\", \"I\"]) ➞ \"perfect\"\n\nfindCadence([\"I\", \"IV\", \"I\", \"V\", \"vi\"]) ➞ \"interrupted\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Return strings all in lowercase.</span></li><li><span>Only focus on the last two chords of a progression.</span></li><li><span>Return </span><code>\"no cadence\"</code><span> if none of the criterea match up.</span></li><li><strong><span>I</span></strong><span> is a capital </span><strong><span>i</span></strong><span> not a lowercase </span><strong><span>L</span></strong><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(findCadence([\"I\", \"IV\", \"V\"]), \"imperfect\")",
			"Test.assertEquals(findCadence([\"ii\", \"V\", \"I\"]), \"perfect\")",
			"Test.assertEquals(findCadence([\"I\", \"IV\", \"I\", \"V\", \"vi\"]), \"interrupted\")",
			"Test.assertEquals(findCadence([\"I\", \"IV\", \"I\", \"V\", \"IV\"]), \"interrupted\")",
			"Test.assertEquals(findCadence([\"I\", \"III\", \"IV\", \"V\"]), \"imperfect\")",
			"Test.assertEquals(findCadence([\"I\", \"IV\", \"I\"]), \"plagal\")",
			"Test.assertEquals(findCadence([\"V\", \"IV\", \"I\"]), \"plagal\")",
			"Test.assertEquals(findCadence([\"V\", \"IV\", \"V\", \"I\"]), \"perfect\")",
			"Test.assertEquals(findCadence([\"V\", \"IV\", \"V\", \"I\", \"vi\"]), \"no cadence\")",
			"Test.assertEquals(findCadence([\"V\", \"IV\", \"V\", \"III\", \"vi\"]), \"no cadence\")"
		],
		"starterFn": [
			"1\nfunction findCadence(chords) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5LF862v6CotiDBAYF"
	},
	{
		"title": "Free Throw Probability",
		"description": "<p><span>What's the probability of someone making a certain amount of free throws in a row given their free throw success percentage? If Sally makes 50% of her free shot throws.  Then Sally's probability of making 5 in a row would be 3%.</span></p><h3><span>Examples</span></h3><pre><code>freeThrows(\"75%\", 5) ➞ \"24%\"\n\nfreeThrows(\"25%\", 3) ➞ \"2%\"\n\nfreeThrows(\"90%\", 30) ➞ \"4%\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The success rate is a string.</span></li><li><span>The function should return a string with the percent sign.</span></li><li><span>Round your answer to the nearest whole number.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"math"
		],
		"tests": [
			"Test.assertEquals(freeThrows(\"50%\", 5), \"3%\")",
			"Test.assertEquals(freeThrows(\"75%\", 10), \"6%\")",
			"Test.assertEquals(freeThrows(\"25%\", 3), \"2%\")",
			"Test.assertEquals(freeThrows(\"90%\", 30), \"4%\")"
		],
		"starterFn": [
			"1\nfunction freeThrows(success, rows) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/q3cqi67chT9hRzhAM"
	},
	{
		"title": "Recursion: Fibonacci Numbers",
		"description": "<p><span>Fibonacci numbers are created in the following way:</span></p><pre><code>F(0) = 0\nF(1) = 1\n...\nF(n) = F(n-2) + F(n-1)</code></pre><p><span>Write a function that calculates the </span><code>nth</code><span> Fibonacci number.</span></p><h3><span>Examples</span></h3><pre><code>fib(0) ➞ 0\n\nfib(1) ➞ 1\n\nfib(2) ➞ 1\n\nfib(8) ➞ 21</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(fib(2), 1)",
			"Test.assertEquals(fib(5), 5)",
			"Test.assertEquals(fib(8), 21)",
			"Test.assertEquals(fib(12), 144)",
			"Test.assertEquals(fib(0), 0)",
			"Test.assertEquals(fib(1), 1)"
		],
		"starterFn": [
			"1\nfunction fib(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/z9NGF7CJvXfk9y8eB"
	},
	{
		"title": "Stretched Words",
		"description": "<p><span>Write a function that takes a string, and returns a new string with any duplicate </span><em><span>consecutive</span></em><span> letters removed.</span></p><h3><span>Examples</span></h3><pre><code>unstretch(\"ppoeemm\") ➞ \"poem\"\n\nunstretch(\"wiiiinnnnd\") ➞ \"wind\"\n\nunstretch(\"ttiiitllleeee\") ➞ \"title\"\n\nunstretch(\"cccccaaarrrbbonnnnn\") ➞ \"carbon\"</code></pre><h3><span>Notes</span></h3><p><span>Final strings </span><em><span>won't</span></em><span> include words with double letters (e.g. \"passing\", \"lottery\").</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(unstretch('llossttttt'), 'lost')",
			"Test.assertEquals(unstretch('cccccaaaaannnnne'), 'cane')",
			"Test.assertEquals(unstretch('hhoooneestttt'), 'honest')",
			"Test.assertEquals(unstretch('ppppooowwddddeeerrrr'), 'powder')",
			"Test.assertEquals(unstretch('eexxpppppeeccctt'), 'expect')",
			"Test.assertEquals(unstretch('rrrrepooooorrttt'), 'report')",
			"Test.assertEquals(unstretch('pppaaaaattteeeennnntt'), 'patent')",
			"Test.assertEquals(unstretch('mmmeeemoooryy'), 'memory')",
			"Test.assertEquals(unstretch('vvvvviiiiisssuuaaalll'), 'visual')",
			"Test.assertEquals(unstretch('eeeennnnsuuurrre'), 'ensure')",
			"Test.assertEquals(unstretch('iiinncclludddddeee'), 'include')",
			"Test.assertEquals(unstretch('ttteestiffffyyy'), 'testify')",
			"Test.assertEquals(unstretch('ggrrrrraaaaavvvvviiitttyyyy'), 'gravity')",
			"Test.assertEquals(unstretch('cccuuuultttttuuuuurreee'), 'culture')",
			"Test.assertEquals(unstretch('qquaalliiifffyy'), 'qualify')",
			"Test.assertEquals(unstretch('iiinnccoooonnnnnggggrrrrruuuuooouuuuusss'), 'incongruous')",
			"Test.assertEquals(unstretch('eeeennnnttiiiitlllleeeeemmeennnttttt'), 'entitlement')",
			"Test.assertEquals(unstretch('aaaaassstttttooniiiiissshhiiinnnnnggg'), 'astonishing')",
			"Test.assertEquals(unstretch('cccccoiinnnncccciidddenncee'), 'coincidence')",
			"Test.assertEquals(unstretch('prrrrreeeppppaaaarrrrraaattiionn'), 'preparation')"
		],
		"starterFn": [
			"1\nfunction unstretch(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/X4WDm4ZroqPZpiqgA"
	},
	{
		"title": "Adding Numbers",
		"description": "<p><span>Create a function that takes two number strings and returns their sum as a string.</span></p><h3><span>Examples</span></h3><pre><code>add(\"111\", \"111\") ➞ \"222\"\n\nadd(\"10\", \"80\") ➞ \"90\"\n\nadd(\"\", \"20\") ➞ \"Invalid Operation\"</code></pre><h3><span>Notes</span></h3><p><span>If any input is </span><code>\"\"</code><span>, </span><code>undefined</code><span> or </span><code>null</code><span>, return </span><code>\"Invalid Operation\"</code><span>.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(add('91', '19'), '110');",
			"Test.assertEquals(add('123456789', '987654322'), '1111111111');",
			"Test.assertEquals(add('9999999', '1'), '10000000');",
			"Test.assertEquals(add('300', '3000'), '3300');",
			"Test.assertEquals(add('1000', '6200'), '7200');",
			"Test.assertEquals(add('-10', '-20'), '-30');",
			"Test.assertEquals(add('-100', '100'), '0');",
			"Test.assertEquals(add('0', '6200'), '6200');",
			"Test.assertEquals(add('', '6'), 'Invalid Operation');",
			"Test.assertEquals(add('', undefined), 'Invalid Operation');",
			"Test.assertEquals(add(null, '23'), 'Invalid Operation');",
			"Test.assertEquals(add('', '20'),\"Invalid Operation\");"
		],
		"starterFn": [
			"1\nfunction add(numberOne, numberTwo) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Rd7rkibLqAcBEx7xP"
	},
	{
		"title": "Flash Cards",
		"description": "<p><span>Create a function that outputs the results of a flashcard. A flashcard is an array of three elements: a number, an operator symbol, and another number. Return the mathematical result of that expression.</span></p><p><span>There are 4 operators: </span><code>+</code><span> (addition), </span><code>-</code><span> (subtraction), </span><code>x</code><span> (multiplication), and </span><code>/</code><span> (division). If the flashcard displays a number being divided by zero, e.g. </span><code>[3, \"/\", 0]</code><span>, then return </span><code>undefined</code><span>. For division, round to the hundredths place. So </span><code>[10, \"/\", 3]</code><span> should return </span><code>3.33</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>flash([3, \"x\", 7]) ➞ 21\n\nflash([5, \"+\", 7]) ➞ 12\n\nflash([10, \"-\", 9]) ➞ 1\n\nflash([10, \"/\", 0]) ➞ undefined\n\nflash([10, \"/\", 3]) ➞ 3.33</code></pre><h3><span>Notes</span></h3><p><span>Flash cards contain only zero or positive numbers.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions"
		],
		"tests": [
			"Test.assertEquals(flash([3, 'x', 7]), 21);",
			"Test.assertEquals(flash([5, '+', 7]), 12);",
			"Test.assertEquals(flash([10, '-', 9]), 1);",
			"Test.assertEquals(flash([10, '/', 0]), undefined);",
			"Test.assertEquals(flash([10, '/', 3]), 3.33);",
			"Test.assertEquals(flash([2, 'x', 0]), 0);",
			"Test.assertEquals(flash([0, '/', 5]), 0);",
			"Test.assertEquals(flash([0, '+', 0]), 0);",
			"Test.assertEquals(flash([0, '-', 0]), 0);",
			"Test.assertEquals(flash([8, '-', 0]), 8);",
			"Test.assertEquals(flash([0, '/', 0]), undefined);",
			"Test.assertEquals(flash([3, '/', 8]), 0.38);"
		],
		"starterFn": [
			"1\nfunction flash([num1, op, num2]) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ng4KKFW4CBwteJdDH"
	},
	{
		"title": "An Introduction to the Map-Reduce Pattern",
		"description": "<p><span>You will be implementing a basic case of the map-reduce pattern in programming. Use the built in JavaScript array functions </span><code>.map()</code><span> and </span><code>.reduce()</code><span> to solve the following problem.</span></p><p><span>Given a vector stored as an array of numbers, find the magnitude of the vector (this is similar to the function </span><code>Math.hypot()</code><span>). Use the standard distance formula for n-dimensional Cartesian coordinates.</span></p><h3><span>Examples</span></h3><pre><code>magnitude([3, 4]) ➞ 5\n\nmagnitude([0, 0, -10]) ➞ 10\n\nmagnitude([]) ➞ 0\n\nmagnitude([2, 3, 6, 1, 8] ) ➞ 10.677078252031311</code></pre><h3><span>Notes</span></h3><ul><li><span>The array can have any length.</span></li><li><span>The input array will contain integers (except for empty array </span><code>[] ➞ 0</code><span>).</span></li><li><span>Use both </span><code>.map()</code><span> and </span><code>.reduce()</code><span>.</span></li><li><span>Don't use </span><code>Math.hypot()</code><span>.</span></li></ul>",
		"publishedBy": "Samuel Smucny",
		"publishedByUrl": "https://edabit.com/user/26gpi2gPufKFSpHTK",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"higher_order_functions",
			"math"
		],
		"tests": [
			"// Basic tests",
			"Test.assertEquals(magnitude([3,4]),5,'basic test not met');",
			"Test.assertEquals(magnitude([0,0,-10]),10,'basic test not met');",
			"Test.assertEquals(magnitude([]),0,'basic test not met');",
			"Test.assertEquals(magnitude([2,3,6,1,8]),10.677078252031311,'basic test not met');",
			"​",
			"// Extra tests",
			"Test.assertEquals(magnitude([9,-9,3]),13.076696830622021);",
			"Test.assertEquals(magnitude([-24,94,4,0,10]),97.61147473529944);"
		],
		"starterFn": [
			"1\nvar magnitude = vector => //code goes here"
		],
		"url": "https://edabit.com/challenge/yyKv8f4FrZPDaJbDs"
	},
	{
		"title": "Capital Split",
		"description": "<p><span>Create a function which adds spaces before every capital in a word. Uncapitalize the whole string afterwards.</span></p><h3><span>Examples</span></h3><pre><code>capSpace(\"helloWorld\") ➞ \"hello world\"\n\ncapSpace(\"iLoveMyTeapot\") ➞ \"i love my teapot\"\n\ncapSpace(\"stayIndoors\") ➞ \"stay indoors\"</code></pre><h3><span>Notes</span></h3><p><span>The first letter will stay uncapitalized.</span></p>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(capSpace(\"helloWorld\"), \"hello world\")",
			"Test.assertEquals(capSpace(\"iLoveMyTeapot\"), \"i love my teapot\")",
			"Test.assertEquals(capSpace(\"stayIndoors\"), \"stay indoors\")"
		],
		"starterFn": [
			"1\nfunction capSpace(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cjgxKpAaxAMHCjqsP"
	},
	{
		"title": "RegEx Exercise 2: Find HTML Tags",
		"description": "<p><span>Create a </span><strong><span>regular expression</span></strong><span> to find all (opening and closing) HTML tags with their attributes. Assume that tag attributes may not contain &lt; and &gt; (inside quotes too).</span></p><h3><span>Example</span></h3><pre><code>const REGEXP = /your regexp/g\n\nlet str = '&lt;&gt; &lt;a href=\"/\"&gt; &lt;input type=\"radio\" checked&gt; &lt;b&gt;'\n\nstr.match(REGEXP) ➞  '&lt;a href=\"/\"&gt;', '&lt;input type=\"radio\" checked&gt;', '&lt;b&gt;'</code></pre><h3><span>Notes</span></h3><p><span>The solution is in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = '<> <a href=\"/\"> <input type=\"radio\" checked> <b>'",
			"​",
			"const validate = (REGEXP) => {",
			"   // if(!//.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"// Test.assertNotEquals(testExp(str), \"invalid\", \"Nothing new here\")",
			"Test.assertSimilar(testExp(str), ['<a href=\"/\">', '<input type=\"radio\" checked>', '<b>']) ",
			"​",
			"// credits to https://javascript.info/regexp-greedy-and-lazy#find-html-tags"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/t2zrueG7T4MDhaz6o"
	},
	{
		"title": "ES6: Destructuring Objects VII",
		"description": "<p><span>In normal object literals you can create dynamic property names by using </span><strong><span>computed</span></strong><span> values:</span></p><pre><code>let key = \"name\"\nlet foo = {[key]: \"bar\"}\n\nconsole.log(foo.name); // \"bar\"</code></pre><p><span>However, in object destructuring it works a little different:</span></p><pre><code>let key = \"foo\"\nlet {[key]: \"foo\"} = {foo: \"Jessie\"}\n\nconsole.log(foo)  // Invalid destructuring assignment target</code></pre><p><span>The error above is caused by the literal string \"foo\".  You cannot rename variables this way. You can read the MDN Docs </span><strong><span>Computed object property names and destructuring</span></strong><span> section to find the correct way.</span></p><p><span>Fix the function so </span><code>console.log(foo)</code><span> returns </span><code>Jessie</code><span>. Leave all variable names unchanged. Ignore the </span><code>.toString(</code><span>) function (used for validation).</span></p><h3><span>Example</span></h3><pre><code>console.log(foo) ➞ \"Jessie\"</code></pre><h3><span>Notes</span></h3><p><span>If you know how to use object destructuring, go ahead and complete this challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab for some examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"eval(str)",
			"​",
			"function testStructure() {",
			"  return  /\\{.*\\[.*key.*\\].*\\:.*(?!\\\")foo/.test(str) ? \"valid\" : \"not valid\"  ",
			"}  ",
			"​",
			"console.log(\"console.log(foo) outputs \" + foo)",
			"​",
			"Test.assertEquals(testStructure(), \"valid\", \"Assigning foo outside the template string is not allowed.\")",
			"Test.assertEquals(foo, \"Jessie\")"
		],
		"starterFn": [
			"1\nlet key = \"foo\"",
			"2\nconst str = `({[key] : \"foo\"} = {foo: \"Jessie\"}).toString()`"
		],
		"url": "https://edabit.com/challenge/5cahgiMrJ6M52XbNa"
	},
	{
		"title": "Cumulative Array Sum",
		"description": "<p><span>Create a function that takes an array of numbers and returns an array where each number is the sum of itself + all previous numbers in the array.</span></p><h3><span>Examples</span></h3><pre><code>cumulativeSum([1, 2, 3]) ➞ [1, 3, 6]\n\ncumulativeSum([1, -2, 3]) ➞ [1, -1, 2]\n\ncumulativeSum([3, 3, -2, 408, 3, 3]) ➞ [3, 6, 4, 412, 415, 418]</code></pre><h3><span>Notes</span></h3><p><span>Return an empty array if the input is an empty array.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(cumulativeSum([]), [], 'Should return an empty array if given an empty array.')",
			"Test.assertSimilar(cumulativeSum([1]), [1], 'Should work with 1 value.')",
			"Test.assertSimilar(cumulativeSum([1, 2, 3]), [1, 3, 6], 'Should work with multiple values.')",
			"Test.assertSimilar(cumulativeSum([-1, -2, -3]), [-1, -3, -6], 'Should work with multiple negative values.')",
			"Test.assertSimilar(cumulativeSum([1, -2, 3]), [1, -1, 2], 'Should work with multiple positive and negative values.')",
			"Test.assertSimilar(cumulativeSum([3, 3, -2, 408, 3, 3, 0, 66, 2, -2, 2, 3, 4, 2, -47, 3, 3, 2]), [3, 6, 4, 412, 415, 418, 418, 484, 486, 484, 486, 489, 493, 495, 448, 451, 454, 456], 'Should work with long array.')"
		],
		"starterFn": [
			"1\nfunction cumulativeSum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/77eH2ZqXqEjifotZM"
	},
	{
		"title": "Determine If Two Numbers Add up to a Target Value",
		"description": "<p><span>Given two unique integer arrays </span><code>a</code><span> and </span><code>b</code><span>, and an integer target value </span><code>v</code><span>, create a function to determine whether there is a pair of numbers that add up to the target value </span><code>v</code><span>, where one number comes from one array </span><code>a</code><span> and the other comes from the second array </span><code>b</code><span>.</span></p><p><span>Return true if there is a pair that adds up to the target value and false if otherwise.</span></p><h3><span>Examples</span></h3><pre><code>sumOfTwo([1, 2], [4, 5, 6], 5) ➞ true\n\nsumOfTwo([1, 2], [4,5, 6], 8) ➞ true\n\nsumOfTwo([1, 2], [4, 5, 6], 3) ➞ false\n\nsumOfTwo([1, 2], [4, 5, 6], 9) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Jacob Afuvai",
		"publishedByUrl": "https://edabit.com/user/xKoMMhNyqWdbomgdJ",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sumOfTwo([1,2,3], [10,20,30,40,50], 42), true)",
			"Test.assertEquals(sumOfTwo([1,2,3], [10,20,30,40,50], 44), false)",
			"Test.assertEquals(sumOfTwo([1,2,3], [10,20,30,40,50], 11), true)",
			"Test.assertEquals(sumOfTwo([1,2,3], [10,20,30,40,50], 60), false)",
			"Test.assertEquals(sumOfTwo([1,2,3], [10,20,30,40,50], 53), true)",
			"Test.assertEquals(sumOfTwo([1,2,3], [10,20,30,40,50], 4), false)"
		],
		"starterFn": [
			"1\nfunction sumOfTwo(a, b, v) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DtqQY7hLT2WrtMCFW"
	},
	{
		"title": "Letters Shared between Two Words",
		"description": "<p><span>Create a function that returns the number of characters shared between two words.</span></p><h3><span>Examples</span></h3><pre><code>sharedLetters(\"apple\", \"meaty\") ➞ 2\n// Since \"ea\" is shared between \"apple\" and \"meaty\".\n\nsharedLetters(\"fan\", \"forsook\") ➞ 1\n\nsharedLetters(\"spout\", \"shout\") ➞ 4</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "kpetrov",
		"publishedByUrl": "https://edabit.com/user/Nua6T3dBurBy3Qfg9",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sharedLetters(\"apple\", \"meaty\"), 2)",
			"Test.assertEquals(sharedLetters(\"fan\", \"forsook\"), 1)",
			"Test.assertEquals(sharedLetters(\"spout\", \"shout\"), 4)",
			"Test.assertEquals(sharedLetters(\"took\", \"taken\"), 2)",
			"Test.assertEquals(sharedLetters(\"mentor\", \"terminal\"), 5)",
			"Test.assertEquals(sharedLetters(\"class\", \"last\"), 3)"
		],
		"starterFn": [
			"1\nfunction sharedLetters(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/esP7cxXgx8ygiTq9f"
	},
	{
		"title": "Calculate the Median",
		"description": "<p><span>Create a function that takes an array of numbers and return its median. If the input array is even length, take the average of the two medians, else, take the single median.</span></p><h3><span>Examples</span></h3><pre><code>median([2, 5, 6, 2, 6, 3, 4]) ➞ 4\n\nmedian([21.4323, 432.54, 432.3, 542.4567]) ➞ 432.4\n\nmedian([-23, -43, -29, -53, -67]) ➞ -43</code></pre><h3><span>Notes</span></h3><ul><li><span>Input can be any negative or positive number.</span></li><li><span>Input array will contain at least four numbers.</span></li><li><span>See </span><strong><span>Resources</span></strong><span> tab for info on calculating the median.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(median([20, 40, 20, 30, 50, 60, 70, 0, 20]), 30)",
			"Test.assertEquals(median([342, 98, 5456, 32, 786, 432, 890, 321]), 387)",
			"Test.assertEquals(median([1, 0, 1, 0, 0, 0, 1, 1]), 0.5)",
			"Test.assertEquals(median([32, 5, 78, 32, 4, 5, 3]), 5)",
			"Test.assertEquals(median([-20, 40, 30, -2, 40, -13]), 14)",
			"Test.assertEquals(median([32786, 7837, 83736, 83736, 10383, 738393]), 58261)",
			"Test.assertEquals(median([7685, 83736, 38376, 73638, 7337]), 38376)",
			"Test.assertEquals(median([0, 0, 0, 0]), 0)",
			"Test.assertEquals(median([-30, -42, -60, -10, -30, -50]), -36)",
			"Test.assertEquals(median([238, 432, 897, 710]), 571)"
		],
		"starterFn": [
			"1\nfunction median(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/36cEmt2BiGTtZ9SDx"
	},
	{
		"title": "Identical Subarrays",
		"description": "<p><span>Create a function that takes in a two-dimensional array and returns the number of </span><strong><span>sub-arrays with identical elements</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>countIdentical([\n  [1],\n  [2],\n  [3],\n  [4]\n]) ➞ 4\n\n// Single-item arrays still count as having identical elements.\n\ncountIdentical([\n  [1, 2],\n  [2, 3],\n  [3, 4],\n  [4, 4]\n]) ➞ 1\n\ncountIdentical([\n  [33, 33],\n  [5],\n  [\"a\", \"a\"],\n  [2, 2, 2],\n  [1, 2, 2],\n  [3, 1]\n]) ➞ 4\n\n// 4 arrays with identical elements: [33, 33], [5], [\"a\", \"a\"], and [2, 2, 2]\n\ncountIdentical([\n  [\"@\", \"@\", \"@\", \"@\"],\n  [2, 3], [3, 4], [4, 4]\n]) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>Single-element arrays count as (trivially) having identical elements.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(countIdentical([[33, 33], [5], ['a', 'a'], [2, 2, 2], [1, 2, 2], [3, 1]]), 4)",
			"Test.assertSimilar(countIdentical([[1], [2], [3], [4]]), 4)",
			"Test.assertSimilar(countIdentical([[1, 2], [2, 3], [3, 4], [4, 4]]), 1)",
			"Test.assertSimilar(countIdentical([['@', '@', '@', '@'], [2, 3], [3, 4], [4, 4]]), 2)"
		],
		"starterFn": [
			"1\nfunction countIdentical(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TWwNf9xxyvWGjEn3n"
	},
	{
		"title": "Smallest N Digit Number",
		"description": "<p><span>Write a function that returns the </span><strong><span>smallest N-digit number</span></strong><span> which is a </span><strong><span>multiple</span></strong><span> of the specified value.</span></p><h3><span>Examples</span></h3><pre><code>smallest(3, 8) ➞ 104\n// Smallest 3-digit integer that is a multiple of 8\n\nsmallest(5, 12) ➞ 10008\n\nsmallest(7, 1) ➞ 1000000\n\nsmallest(2, 3) ➞ 12</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(smallest(3, 8), 104)",
			"Test.assertEquals(smallest(5, 12), 10008)",
			"Test.assertEquals(smallest(7, 1), 1000000)",
			"Test.assertEquals(smallest(2, 3), 12)",
			"Test.assertEquals(smallest(9, 33), 100000032)",
			"Test.assertEquals(smallest(8, 17), 10000012)",
			"Test.assertEquals(smallest(4, 67), 1005)",
			"Test.assertEquals(smallest(4, 432), 1296)",
			"Test.assertEquals(smallest(3, 432), 432)",
			"Test.assertEquals(smallest(3, 77), 154)"
		],
		"starterFn": [
			"1\nfunction smallest(digits, value) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hzCaSMeqkErxixioy"
	},
	{
		"title": "Height of the Tallest Building",
		"description": "<p><span>Given an array of strings (depicting a skyline of </span><em><span>several buildings</span></em><span>), return </span><em><span>in meters</span></em><span> the </span><strong><span>height of the tallest building</span></strong><span>. </span><em><span>Each line</span></em><span> in the list represents </span><strong><span>20m</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>tallestBuildingHeight([\n  \"            ##\",\n  \"            ##\",\n  \"            ##\",\n  \"###   ###   ##\",\n  \"###   ###   ###\",\n  \"###   ###   ###\",\n  \"###   ###   ###\"\n]) ➞ \"140m\"\n\n// Tallest building is 7 rows\n// 7 x 20m = 140m\n\ntallestBuildingHeight([\n  \"               \",\n  \"               \",\n  \"               \",\n  \"       #    ###\",\n  \"      # #   ###\",\n  \"###   ###   ###\",\n  \"###   ###   ###\"\n]) ➞ \"80m\"\n\n// tallest building is 4 rows\n// 4 x 20m = 80m\n\ntallestBuildingHeight([\n  \"                              \",\n  \"                         ###  \",\n  \"                         ###  \",\n  \"###                    #####  \",\n  \"###      #             #####  \",\n  \"###     ###            #####  \",\n  \"######  ###            #######\",\n  \"######  ######  ###    #######\",\n  \"###################    #######\",\n  \"###############################\",\n  \"###############################\"\n]) ➞ \"200m\"\n\n// Tallest building is 10 rows\n// 10 x 20m = 200m</code></pre><h3><span>Notes</span></h3><ul><li><span>There may be some </span><strong><span>open sky</span></strong><span> above buildings (can't </span><em><span>just</span></em><span> find the length of the array).</span></li><li><span>There may be multiple tallest buildings (see example #2).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(tallestBuildingHeight([",
			"  \"         \",",
			"  \" ##      \",",
			"  \" ##      \",",
			"  \"###   ## \",",
			"  \"###   ## \",",
			"  \"###   ###\",",
			"  \"###   ###\"",
			"]), \"120m\")",
			"​",
			"Test.assertEquals(tallestBuildingHeight([",
			"  \"            ##\",",
			"  \"            ##\",",
			"  \"            ##\",",
			"  \"###   ###   ##\",",
			"  \"###   ###   ###\",",
			"  \"###   ###   ###\",",
			"  \"###   ###   ###\"",
			"]), \"140m\")",
			"​",
			"Test.assertEquals(tallestBuildingHeight([",
			"  \"               \",",
			"  \"               \",",
			"  \"               \",",
			"  \"       #    ###\",",
			"  \"      # #   ###\","
		],
		"starterFn": [
			"1\nfunction tallestBuildingHeight(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rpTEWc6boQEgQB8D6"
	},
	{
		"title": "Boolean Chain",
		"description": "<p><span>Write three functions:</span></p><ol><li><span>AND</span></li><li><span>OR</span></li><li><span>XOR</span></li></ol><p><span>These functions should evaluate an array of </span><code>true</code><span> and </span><code>false</code><span> values, starting from the leftmost element and evaluating pairwise.</span></p><h3><span>Examples</span></h3><pre><code>and([true, true, false, true]) ➞ false\n// and([true, true, false, true]) =&gt; and([true, false, true]) =&gt; and([false, true]) =&gt; false\n\nor([true, true, false, false]) ➞ true\n// or([true, true, false, true]) =&gt; or([true, false, false]) =&gt; or([true, false]) =&gt; true\n\nxor([true, true, false, false]) ➞ false\n// xor([true, true, false, false]) =&gt; xor([false, false, false]) =&gt; xor([false, false]) =&gt; false</code></pre><h3><span>Notes</span></h3><ul><li><code>XOR</code><span> is the same as </span><code>OR</code><span>, except that it excludes </span><code>[true, true]</code><span>.</span></li><li><span>Each time you evaluate an element at 0 and at 1, you collapse it into the single result.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic"
		],
		"tests": [
			"// AND tests ",
			"Test.assertEquals(and([true, true, false, true]), false)",
			"Test.assertEquals(and([true, true, true, true]), true)",
			"Test.assertEquals(and([false, true, true, true]), false)",
			"Test.assertEquals(and([false, false, false, false]), false)",
			"Test.assertEquals(and([false, false, true, true]), false)",
			"​",
			"// OR tests",
			"Test.assertEquals(or([true, true, false, false]), true)",
			"Test.assertEquals(or([true, false, false, false]), true)",
			"Test.assertEquals(or([false, false, false, true, false]), true)",
			"Test.assertEquals(or([false, true, false, true, false, true]), true)",
			"Test.assertEquals(or([false, false, false, false, false]), false)",
			"​",
			"// XOR tests",
			"Test.assertEquals(xor([true, true, false, true]), true)",
			"Test.assertEquals(xor([true, true, false, false]), false)",
			"Test.assertEquals(xor([true, false, false, false]), true)",
			"Test.assertEquals(xor([true, false, true, false]), false)",
			"Test.assertEquals(xor([true, true, true, true]), false)",
			"Test.assertEquals(xor([false, false, false, false]), false)",
			"Test.assertEquals(xor([false, false, false, true]), true)",
			"Test.assertEquals(xor([true, false, false, true]), false)"
		],
		"starterFn": [
			"1\nfunction and(arr) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction or(arr) {",
			"6\n  ",
			"7\n}",
			"8\n​",
			"9\nfunction xor(arr) {",
			"10\n  ",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/88ZNcDhyzke3Hpu5y"
	},
	{
		"title": "Making a Sandwich",
		"description": "<p><span>Given an array of ingredients </span><code>i</code><span> and a string flavour </span><code>f</code><span> as input, create a function that returns the array but with the elements </span><code>bread</code><span> around the selected ingredient.</span></p><h3><span>Examples</span></h3><pre><code>makeSandwich([\"tuna\", \"ham\", \"tomato\"], \"ham\") ➞ [\"tuna\", \"bread\", \"ham\", \"bread\", \"tomato\"]\n\nmakeSandwich([\"cheese\", \"lettuce\"], \"cheese\") ➞ [\"bread\", \"cheese\", \"bread\", \"lettuce\"]\n\nmakeSandwich([\"ham\", \"ham\"], \"ham\") ➞ [\"bread\", \"ham\", \"bread\", \"bread\", \"ham\", \"bread\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>You will always get valid inputs.</span></li><li><span>Make two separate sandwiches if two of the same elements are next to each other (see example #3).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(makeSandwich([\"t\", \"h\", \"t\"], \"h\"),[\"t\", \"bread\", \"h\", \"bread\", \"t\"])",
			"Test.assertSimilar(makeSandwich([\"c\", \"l\"], \"c\"), [\"bread\", \"c\", \"bread\", \"l\"])",
			"Test.assertSimilar(makeSandwich([\"h\", \"h\"], \"h\"), [\"bread\", \"h\", \"bread\", \"bread\", \"h\", \"bread\"])",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction makeSandwich(ingredients, flavour) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/msejbMPH3k9QzWasE"
	},
	{
		"title": "Is It the Same Upside Down?",
		"description": "<p><span>The number 6090609 has a special property: if you turn the number upside down (imagine rotating your screen 180 degrees), you get 6090609 again.</span></p><p><span>Write a function that takes a string on the digits 0, 6, 9 and returns </span><code>true</code><span> if the number is the same upside down or </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>sameUpsidedown(\"6090609\") ➞ true\n\nsameUpsidedown(\"9669\") ➞false\n// Becomes 6996 when upside down.\n\nsameUpsidedown(\"69069069\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"sorting",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sameUpsidedown(\"9\"), false)",
			"Test.assertEquals(sameUpsidedown(\"0\"), true)",
			"Test.assertEquals(sameUpsidedown(\"6090609\"), true)",
			"Test.assertEquals(sameUpsidedown(\"9669\"), false)",
			"Test.assertEquals(sameUpsidedown(\"69069069\"), true)",
			"Test.assertEquals(sameUpsidedown(\"60906096090609\"), true)",
			"Test.assertEquals(sameUpsidedown(\"966909669\"), false)",
			"Test.assertEquals(sameUpsidedown(\"6000000009\"), true)",
			"Test.assertEquals(sameUpsidedown(\"6666660999999\"), true)",
			"Test.assertEquals(sameUpsidedown(\"96666660999999\"), false)"
		],
		"starterFn": [
			"1\nfunction sameUpsidedown(strNum) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gF3AYnxHQi7aNqiMq"
	},
	{
		"title": "Stalactites or Stalagmites?",
		"description": "<p><strong><span>Stalactites</span></strong><span> hang from the ceiling of a cave while </span><strong><span>stalagmites</span></strong><span> grow from the floor.</span></p><p><span>Create a function that determines whether the input represents </span><code>\"stalactites\"</code><span> or </span><code>\"stalagmites\"</code><span>. If it represents both, return </span><code>\"both\"</code><span>. Input will be a 2D array, with </span><code>1</code><span> representing a piece of rock, and </span><code>0</code><span> representing air space.</span></p><h3><span>Examples</span></h3><pre><code>mineralFormation([\n  [0, 1, 0, 1],\n  [0, 1, 0, 1],\n  [0, 0, 0, 1],\n  [0, 0, 0, 0]\n]) ➞ \"stalactites\"\n\nmineralFormation([\n  [0, 0, 0, 0],\n  [0, 1, 0, 1],\n  [0, 1, 1, 1],\n  [0, 1, 1, 1]\n]) ➞ \"stalagmites\"\n\nmineralFormation([\n  [1, 0, 1, 0],\n  [1, 1, 0, 1],\n  [0, 1, 1, 1],\n  [0, 1, 1, 1]\n]) ➞ \"both\"</code></pre><h3><span>Notes</span></h3><ul><li><span>There won't be any examples where both stalactites and stalagmites meet (because those are called pillars).</span></li><li><span>There won't be any example of neither stalactites nor stalagmites.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(mineralFormation([",
			"[0, 1, 0, 1],",
			"[0, 1, 0, 1],",
			"[0, 0, 0, 1],",
			"[0, 0, 0, 0]",
			"]), 'stalactites')",
			"​",
			"Test.assertEquals(mineralFormation([",
			"[0, 0, 0, 0],",
			"[0, 1, 0, 1],",
			"[0, 1, 1, 1],",
			"[0, 1, 1, 1]",
			"]), 'stalagmites')",
			"​",
			"Test.assertEquals(mineralFormation([",
			"[1, 0, 1, 0],",
			"[1, 1, 0, 1],",
			"[0, 1, 1, 1],",
			"[0, 1, 1, 1]",
			"]), 'both')",
			"​",
			"Test.assertEquals(mineralFormation([",
			"[1],",
			"[1],",
			"[0],",
			"[0]"
		],
		"starterFn": [
			"1\nfunction mineralFormation(cave) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wGwXLHQCYXnjJ9DW9"
	},
	{
		"title": "Impossible Date",
		"description": "<p><span>Given the parameters day, month and year, return whether that date is </span><strong><span>a valid date</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>isValidDate(35, 2, 2020) ➞ false\n// February doesn't have 35 days.\n\nisValidDate(8, 3, 2020) ➞ true\n// 8th March 2020 is a real date.\n\nisValidDate(31, 6, 1980) ➞ false\n// June only has 30 days.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isValidDate(35, 2, 2020), false)",
			"Test.assertEquals(isValidDate(8, 3, 2020), true)",
			"Test.assertEquals(isValidDate(31, 6, 1980), false)",
			"Test.assertEquals(isValidDate(27, 9, 1822), true)",
			"Test.assertEquals(isValidDate(34, 7, 2008), false)",
			"Test.assertEquals(isValidDate(32, 12, 1932), false)",
			"Test.assertEquals(isValidDate(20, 3, 2019), true)",
			"Test.assertEquals(isValidDate(28, 3, 2004), true)",
			"Test.assertEquals(isValidDate(22, 5, 1962), true)",
			"Test.assertEquals(isValidDate(21, 11, 1875), true)",
			"Test.assertEquals(isValidDate(6, 12, 1982), true)",
			"Test.assertEquals(isValidDate(6, 10, 1873), true)",
			"Test.assertEquals(isValidDate(5, 6, 1852), true)",
			"Test.assertEquals(isValidDate(21, 4, 1809), true)",
			"Test.assertEquals(isValidDate(6, 15, 1969), false)",
			"Test.assertEquals(isValidDate(6, 7, 1893), true)",
			"Test.assertEquals(isValidDate(25, 4, 1826), true)",
			"Test.assertEquals(isValidDate(16, 6, 1922), true)",
			"Test.assertEquals(isValidDate(16, 10, 1803), true)",
			"Test.assertEquals(isValidDate(5, 6, 1980), true)",
			"Test.assertEquals(isValidDate(12, 15, 2018), false)",
			"Test.assertEquals(isValidDate(35, 12, 1972), false)",
			"Test.assertEquals(isValidDate(16, 11, 2028), true)",
			"Test.assertEquals(isValidDate(2, 6, 1947), true)",
			"Test.assertEquals(isValidDate(1, 10, 1904), true)",
			"Test.assertEquals(isValidDate(8, 13, 1954), false)"
		],
		"starterFn": [
			"1\nfunction isValidDate(d, m, y) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dhRtmeFcjGcD7yvHA"
	},
	{
		"title": "The Sweetest Ice Cream",
		"description": "<p><span>Create a function which takes an array of </span><em><span>instances</span></em><span> from the class </span><code>IceCream</code><span> and returns </span><strong><span>the sweetness value of the sweetest icecream</span></strong><span>.</span></p><p><span>Sweetness is calculated from the </span><em><span>flavor</span></em><span> and </span><em><span>number of sprinkles</span></em><span>. Each sprinkle has a </span><em><span>sweetness value of 1</span></em><span>, and the sweetness values for the flavors are as follows:</span></p><table><thead><tr><th><span>Flavors</span></th><th><span>Sweetness Value</span></th></tr></thead><tbody><tr><td><span>Plain</span></td><td><span>0</span></td></tr><tr><td><span>Vanilla</span></td><td><span>5</span></td></tr><tr><td><span>ChocolateChip</span></td><td><span>5</span></td></tr><tr><td><span>Strawberry</span></td><td><span>10</span></td></tr><tr><td><span>Chocolate</span></td><td><span>10</span></td></tr></tbody></table><p><span>You'll be given instance properties in the order </span><code>flavor</code><span>, </span><code>numSprinkles</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>ice1 = IceCream(\"Chocolate\", 13)         // value of 23\nice2 = IceCream(\"Vanilla\", 0)           // value of 5\nice3 = IceCream(\"Strawberry\", 7)        // value of 17\nice4 = IceCream(\"Plain\", 18)             // value of 18\nice5 = IceCream(\"ChocolateChip\", 3)      // value of 8\n\nsweetestIcecream([ice1, ice2, ice3, ice4, ice5]) ➞ 23\n\nsweetestIcecream([ice3, ice1]) ➞ 23\n\nsweetestIcecream([ice3, ice5]) ➞ 17</code></pre><h3><span>Notes</span></h3><p><span>Remember to only return the </span><strong><span>sweetness value</span></strong><span>.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"classes",
			"numbers"
		],
		"tests": [
			"class IceCream {",
			"  constructor(flavor, numSprinkles) {",
			"    this.flavor = flavor",
			"    this.numSprinkles = numSprinkles",
			"  }",
			"}",
			"​",
			"ice1 = new IceCream(\"Chocolate\", 13)",
			"ice2 = new IceCream(\"Vanilla\", 0)",
			"ice3 = new IceCream(\"Strawberry\", 7)",
			"ice4 = new IceCream(\"Plain\", 18)",
			"ice5 = new IceCream(\"ChocolateChip\", 3)",
			"ice6 = new IceCream(\"Chocolate\", 23)",
			"ice7 = new IceCream(\"Strawberry\", 0)",
			"ice8 = new IceCream(\"Plain\", 34)",
			"ice9 = new IceCream(\"Plain\", 81)",
			"ice10 = new IceCream(\"Vanilla\", 12)",
			"​",
			"Test.assertEquals(sweetestIcecream([ice1, ice2, ice3, ice4, ice5]), 23)",
			"Test.assertEquals(sweetestIcecream([ice7, ice10, ice1, ice6, ice8, ice10, ice2, ice2]), 34)",
			"Test.assertEquals(sweetestIcecream([ice10, ice10, ice6, ice8, ice4]), 34)",
			"Test.assertEquals(sweetestIcecream([ice2, ice10, ice6, ice9, ice7]), 81)",
			"Test.assertEquals(sweetestIcecream([ice10, ice6, ice4, ice1, ice7, ice8, ice6]), 34)",
			"Test.assertEquals(sweetestIcecream([ice3, ice1]), 23)",
			"Test.assertEquals(sweetestIcecream([ice6, ice7, ice5, ice4, ice3]), 33)",
			"Test.assertEquals(sweetestIcecream([ice4, ice8, ice9]), 81)"
		],
		"starterFn": [
			"1\nfunction sweetestIcecream(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HKmJFmZZCX53ff4ke"
	},
	{
		"title": "RegEx: Character Classes X ⁠- \\s",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>Given the below string, write a </span><strong><span>regex</span></strong><span> that will find all  </span><strong><span>open compound words</span></strong><span> starting with the word </span><strong><span>best</span></strong><span> and the second word begins with the letter </span><strong><span>b</span></strong><span>.</span></p><pre><code>\"best buy best car best friend best-boy bestguest best dressed best bet best man best deal best boyfriend\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Open compound words are words with spaces in them.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on character classes if you're stuck.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const str = \"best buy best car best friend best-boy bestguest best dressed best bet best man best deal best boyfriend\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\s/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str), \"required\", \"You are required to use a \\\\s character class in your expression.\")",
			"Test.assertSimilar(testExp(str), ['best buy', 'best bet', 'best boyfriend'])"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you oexpression here */g"
		],
		"url": "https://edabit.com/challenge/B4kaykgTDQxdi32FW"
	},
	{
		"title": "Remove Repeated Letters",
		"description": "<p><span>Create a function that replaces all consecutively repeated letters in a word with single letters.</span></p><h3><span>Examples</span></h3><pre><code>removeRepeats(\"aaabbbccc\") ➞ \"abc\"\n\nremoveRepeats(\"bookkeeper\") ➞ \"bokeper\"\n\nremoveRepeats(\"nananana\") ➞ \"nananana\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeRepeats(\"aaabbbccc\"), \"abc\")",
			"Test.assertEquals(removeRepeats(\"bookkeeper\"), \"bokeper\")",
			"Test.assertEquals(removeRepeats(\"nananana\"), \"nananana\")",
			"Test.assertEquals(removeRepeats(\"accddbccabadcabccdababaacbdaadcccbcaabaaddbabbaadd\"), \"acdbcabadcabcdababacbdadcbcabadbabad\")",
			"Test.assertEquals(removeRepeats(\"aabbcabdcddddacdccacbbcabadccbbaadcccbddacbdbabbbd\"), \"abcabdcdacdcacbcabadcbadcbdacbdbabd\")",
			"Test.assertEquals(removeRepeats(\"dacbaabacbabacabcabaabdccccbdbbcaadddacdbdbdacbada\"), \"dacbabacbabacabcababdcbdbcadacdbdbdacbada\")",
			"Test.assertEquals(removeRepeats(\"cbdbcbcccbdbbcaaaacacbcabddcdcddcccbdaabdacbdcabbd\"), \"cbdbcbcbdbcacacbcabdcdcdcbdabdacbdcabd\")",
			"Test.assertEquals(removeRepeats(\"cdbdcdccccbcbbcdabbbbcababccadccabdcacabbcaccdaccd\"), \"cdbdcdcbcbcdabcababcadcabdcacabcacdacd\")",
			"Test.assertEquals(removeRepeats(\"bacbdbdadbbbdacbddbdcbadddabbaadcbbdabdaabcdddbacd\"), \"bacbdbdadbdacbdbdcbadabadcbdabdabcdbacd\")",
			"Test.assertEquals(removeRepeats(\"daadadccbcacacbacdbbaabaadbaabadacdacadbacdcababbb\"), \"dadadcbcacacbacdbabadbabadacdacadbacdcabab\")",
			"Test.assertEquals(removeRepeats(\"bbaccaccbbabbaacbacadadaddbadddbaacbadbcbdaabbbaaa\"), \"bacacbabacbacadadadbadbacbadbcbdaba\")",
			"Test.assertEquals(removeRepeats(\"dbdabdccbcdccccbcdbbbcaccdacdacdcacadaddaddbcbdddb\"), \"dbdabdcbcdcbcdbcacdacdacdcacadadadbcbdb\")",
			"Test.assertEquals(removeRepeats(\"cdaaaabbccaccacbdabdbbccbbddddddcadcbbccbccdbaddac\"), \"cdabcacacbdabdbcbdcadcbcbcdbadac\")",
			"Test.assertEquals(removeRepeats(\"dcccccaacdacbbdaccbabaacddcdddabcadbaaccaabdcabdad\"), \"dcacdacbdacbabacdcdabcadbacabdcabdad\")",
			"Test.assertEquals(removeRepeats(\"bcccabddbbacbacacddbbddbbccbdddbcbcabdabdcbccdaddd\"), \"bcabdbacbacacdbdbcbdbcbcabdabdcbcdad\")",
			"Test.assertEquals(removeRepeats(\"bcacaabaadcbbdadcddcdaaaddcccdabdbbaddddbabdccabda\"), \"bcacabadcbdadcdcdadcdabdbadbabdcabda\")",
			"Test.assertEquals(removeRepeats(\"adacddabacdcbdbadcaacacdcdcdbcdcdabdabbadcbdacbdcd\"), \"adacdabacdcbdbadcacacdcdcdbcdcdabdabadcbdacbdcd\")",
			"Test.assertEquals(removeRepeats(\"dbbbbbcddacdbdaacdaaaccbccdccbcbcdabdbddacbcaaadaa\"), \"dbcdacdbdacdacbcdcbcbcdabdbdacbcada\")",
			"Test.assertEquals(removeRepeats(\"bdbdbacabcbbacbcaadbcbcbbdaddacbaacabdccadaaddadca\"), \"bdbdbacabcbacbcadbcbcbdadacbacabdcadadadca\")",
			"Test.assertEquals(removeRepeats(\"bbabccadacbbbaabddbbcadacddacdcccbacbdcbacbabcabaa\"), \"babcadacbabdbcadacdacdcbacbdcbacbabcaba\")",
			"Test.assertEquals(removeRepeats(\"cadaadcbccbcbbdcadbcdcbaacacbcbabbbadaddadcdcacaab\"), \"cadadcbcbcbdcadbcdcbacacbcbabadadadcdcacab\")",
			"Test.assertEquals(removeRepeats(\"adbccadacaabbbcdcaabbdbcbdbbcccbcbadcdddcccbbdcdab\"), \"adbcadacabcdcabdbcbdbcbcbadcdcbdcdab\")",
			"Test.assertEquals(removeRepeats(\"dbbdddaaadccabbddbbcccbddacccccaabbcdbdbdcdacdbada\"), \"dbdadcabdbcbdacabcdbdbdcdacdbada\")",
			"Test.assertEquals(removeRepeats(\"acccdbbbcbdbbbcbaaabcaacacbbcccadddacbbbabbacbccca\"), \"acdbcbdbcbabcacacbcadacbabacbca\")",
			"Test.assertEquals(removeRepeats(\"cccbadadcbccacdababbaabdbdcacadabdddcaaaabbaadacca\"), \"cbadadcbcacdabababdbdcacadabdcabadaca\")",
			"Test.assertEquals(removeRepeats(\"cdcbdbcadadbbdacbdddaaaddbddcaacdaabcbdccacddacbdd\"), \"cdcbdbcadadbdacbdadbdcacdabcbdcacdacbd\")"
		],
		"starterFn": [
			"1\nfunction removeRepeats(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JuDLrvm8PwCABcYnX"
	},
	{
		"title": "ASCII Charts (Part 1: Progress Bar)",
		"description": "<p><span>Given a </span><em><span>character</span></em><span> and a </span><em><span>value</span></em><span> between 0 and 100, return a string that represents a simple progress bar.</span></p><ul><li><span>The value represents a percentage.</span></li><li><span>The bar should begin and end with \"|\"</span></li><li><span>Repeat the character to fill the bar, with each character equivalent to 10%</span></li><li><span>Use spaces to pad the bar to a length of 10 characters.</span></li><li><span>A single space comes after the bar, then a message with the % of completion (e.g. \"Progress: 60%\")</span></li><li><span>If the value is 100, the message should be \"Completed!\".</span></li></ul><h3><span>Examples</span></h3><pre><code>progressBar(\"#\", 0) ➞ \"|          | Progress: 0%\"\n\nprogressBar(\"=\", 40) ➞ \"|====      | Progress: 40%\"\n\nprogressBar(\"#\", 60) ➞ \"|######    | Progress: 60%\"\n\nprogressBar(\"&gt;\", 100) ➞ \"|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;| Completed!\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(progressBar(\"=\", 10), \"|=         | Progress: 10%\")",
			"Test.assertEquals(progressBar(\"#\", 90), \"|######### | Progress: 90%\")",
			"Test.assertEquals(progressBar(\"*\", 100), \"|**********| Completed!\")",
			"Test.assertEquals(progressBar(\"#\", 50), \"|#####     | Progress: 50%\")",
			"Test.assertEquals(progressBar(\"*\", 60), \"|******    | Progress: 60%\")",
			"Test.assertEquals(progressBar(\"#\", 100), \"|##########| Completed!\")",
			"Test.assertEquals(progressBar(\"*\", 60), \"|******    | Progress: 60%\")",
			"Test.assertEquals(progressBar(\"=\", 30), \"|===       | Progress: 30%\")",
			"Test.assertEquals(progressBar(\">\", 70), \"|>>>>>>>   | Progress: 70%\")",
			"Test.assertEquals(progressBar(\"=\", 40), \"|====      | Progress: 40%\")",
			"Test.assertEquals(progressBar(\">\", 20), \"|>>        | Progress: 20%\")",
			"Test.assertEquals(progressBar(\"*\", 0), \"|          | Progress: 0%\")",
			"Test.assertEquals(progressBar(\"=\", 60), \"|======    | Progress: 60%\")",
			"Test.assertEquals(progressBar(\">\", 90), \"|>>>>>>>>> | Progress: 90%\")",
			"Test.assertEquals(progressBar(\"*\", 80), \"|********  | Progress: 80%\")",
			"Test.assertEquals(progressBar(\"#\", 20), \"|##        | Progress: 20%\")",
			"Test.assertEquals(progressBar(\"*\", 30), \"|***       | Progress: 30%\")",
			"Test.assertEquals(progressBar(\"=\", 70), \"|=======   | Progress: 70%\")",
			"Test.assertEquals(progressBar(\"=\", 0), \"|          | Progress: 0%\")",
			"Test.assertEquals(progressBar(\">\", 100), \"|>>>>>>>>>>| Completed!\")"
		],
		"starterFn": [
			"1\nfunction progressBar(bar, progress) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dPAzqLybypQdJKkKm"
	},
	{
		"title": "Complete the Binary Number",
		"description": "<p><span>Create a function which adds </span><em><span>zeros</span></em><span> to the </span><strong><span>start</span></strong><span> of a binary string, so that its length is a </span><strong><span>mutiple of 8</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>completeBinary(\"1100\") ➞ \"00001100\"\n\ncompleteBinary(\"1101100\") ➞ \"01101100\"\n\ncompleteBinary(\"110010100010\") ➞ \"0000110010100010\"</code></pre><h3><span>Notes</span></h3><p><span>Return the same string if its length is already a multiple of 8.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(completeBinary(\"1100\"), \"00001100\")",
			"Test.assertEquals(completeBinary(\"1101100\"), \"01101100\")",
			"Test.assertEquals(completeBinary(\"110010100010\"), \"0000110010100010\")",
			"Test.assertEquals(completeBinary(\"1001110001111011100101\"), \"001001110001111011100101\")",
			"Test.assertEquals(completeBinary(\"111101100011001111100111010001001110010101011001000000001101100\"), \"0111101100011001111100111010001001110010101011001000000001101100\")",
			"Test.assertEquals(completeBinary(\"1100110111000000010000110011001\"), \"01100110111000000010000110011001\")",
			"Test.assertEquals(completeBinary(\"011001100101100100100001110101110\"), \"0000000011001100101100100100001110101110\")",
			"Test.assertEquals(completeBinary(\"10000010100000011\"), \"000000010000010100000011\")",
			"Test.assertEquals(completeBinary(\"0010100101011110000000101010010\"), \"00010100101011110000000101010010\")",
			"Test.assertEquals(completeBinary(\"1111000010000101010011001110110000\"), \"0000001111000010000101010011001110110000\")",
			"Test.assertEquals(completeBinary(\"100111110111011110101100\"), \"100111110111011110101100\")",
			"Test.assertEquals(completeBinary(\"1111011011010101000001010001000011110000001100100001111110111110001100\"), \"001111011011010101000001010001000011110000001100100001111110111110001100\")",
			"Test.assertEquals(completeBinary(\"000101011101010110000011100011000001001111001001000101111101011\"), \"0000101011101010110000011100011000001001111001001000101111101011\")",
			"Test.assertEquals(completeBinary(\"01000000011101110001100011101111111011100110011\"), \"001000000011101110001100011101111111011100110011\")",
			"Test.assertEquals(completeBinary(\"0001001100011100111101000111111011001001111100100000\"), \"00000001001100011100111101000111111011001001111100100000\")",
			"Test.assertEquals(completeBinary(\"11011111000001001000\"), \"000011011111000001001000\")",
			"Test.assertEquals(completeBinary(\"111011100010111000\"), \"000000111011100010111000\")",
			"Test.assertEquals(completeBinary(\"11000011100111000001110100\"), \"00000011000011100111000001110100\")",
			"Test.assertEquals(completeBinary(\"010001100100001110000001001000000001111111101010010111\"), \"00010001100100001110000001001000000001111111101010010111\")",
			"Test.assertEquals(completeBinary(\"110101101100010110010000100100110110010010000000101000110101010101100\"), \"000110101101100010110010000100100110110010010000000101000110101010101100\")",
			"Test.assertEquals(completeBinary(\"1010\"), \"00001010\")",
			"Test.assertEquals(completeBinary(\"11010010010\"), \"0000011010010010\")",
			"Test.assertEquals(completeBinary(\"1010010101001010011000110101101101100011100010111101110110\"), \"0000001010010101001010011000110101101101100011100010111101110110\")",
			"Test.assertEquals(completeBinary(\"10011101001100001\"), \"000000010011101001100001\")",
			"Test.assertEquals(completeBinary(\"1011001110011101010011101110001000010011011\"), \"000001011001110011101010011101110001000010011011\")",
			"Test.assertEquals(completeBinary(\"111110101111100011010001111110100001101110101011001110111001\"), \"0000111110101111100011010001111110100001101110101011001110111001\")"
		],
		"starterFn": [
			"1\nfunction completeBinary(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HpmC7qQpLeGqj6RCg"
	},
	{
		"title": "Longest Daily Streak",
		"description": "<p><span>Create a function that takes an array of booleans that represent whether or not a player has logged into a game that day. Output the longest streak of consecutive logged in days.</span></p><h3><span>Examples</span></h3><pre><code>dailyStreak([true, true, false, true]) ➞ 2\n\ndailyStreak([false, false, false]) ➞ 0\n\ndailyStreak([true, true, true, false, true, true]) ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>Return your output as an integer.</span></li><li><span>If a given array is all </span><code>false</code><span>, return </span><code>0</code><span> (see example #2).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic"
		],
		"tests": [
			"Test.assertEquals(dailyStreak([true, true, false, true]), 2)",
			"Test.assertEquals(dailyStreak([false, false, false]), 0)",
			"Test.assertEquals(dailyStreak([true, true, true, false]), 3)",
			"Test.assertEquals(dailyStreak([true, true, true, false, true, true]), 3)",
			"Test.assertEquals(dailyStreak([true, false]), 1)",
			"Test.assertEquals(dailyStreak([true, false, true]), 1)",
			"Test.assertEquals(dailyStreak([true, false, true, true]), 2)",
			"​",
			"// Made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction dailyStreak(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wi65FEnQe6rYguxMQ"
	},
	{
		"title": "Sum of Negative Integers",
		"description": "<p><span>Create a function that takes a string containing integers as well as other characters and return the sum of the negative integers only.</span></p><h3><span>Examples</span></h3><pre><code>negativeSum(\"-12 13%14&amp;-11\") ➞ -23\n// -12 + -11 = -23\n\nnegativeSum(\"22 13%14&amp;-11-22 13 12\") ➞ -33\n// -11 + -22 = -33</code></pre><h3><span>Notes</span></h3><p><span>There is at least one negative integer.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(negativeSum(\"-12 13%14&-11\"), -23)",
			"Test.assertEquals(negativeSum(\"-12 13%14&-2 0 12 -4\"), -18)",
			"Test.assertEquals(negativeSum(\"33%14&-1 12 a 21 -2 b c\"), -3)",
			"Test.assertEquals(negativeSum(\"22 13%14&-11-22 13 12\"), -33)",
			"Test.assertEquals(negativeSum(\"-12 -8\"), -20)"
		],
		"starterFn": [
			"1\nfunction negativeSum(chars) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ttD7mWf329nxxS3wf"
	},
	{
		"title": "ES6: Destructuring Objects IX",
		"description": "<p><span>Given an array of user objects. If we just wanted to get the name of the third object in the array, one way could be to use an array method like:</span></p><pre><code>let users = [\n  { name: \"John\", email: \"john@example.com\" },\n  { name: \"Jason\", email: \"jason@example.com\" },\n  { name: \"Jeremy\", email: \"jeremy@example.com\" },\n  { name: \"Jacob\", email: \"jacob@example.com\" }\n]\n\nlet thirdUser = users.filter((e, i) =&gt; i === 2 )[0].name\nconsole.log(thirdUser)  // \"Jeremy\"</code></pre><p><span>However, you can combine array and Object destructuring to extract it more declaratively. Use </span><strong><span>array and object destructuring</span></strong><span> to extract the name from the third object in the users array and assign it to the variable </span><code>thirdUser</code><span>. Provide the solution inside the </span><strong><span>brackets</span></strong><span> only. Ignore the </span><code>.toString()</code><span> function (used for validation).</span></p><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"let users = [",
			"  { name: \"John\", email: \"john@example.com\" },",
			"  { name: \"Jason\", email: \"jason@example.com\" },",
			"  { name: \"Jeremy\", email: \"jeremy@example.com\" },",
			"  { name: \"Jacob\", email: \"jacob@example.com\" }",
			"] ",
			"​",
			"eval(str)",
			"​",
			"function validation() {",
			"  return /\\,.*\\,.*thirdUser/.test(str) ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"Test.assertEquals(validation(), \"valid\", \"You must assign thirdUser inside the brackets\")",
			"Test.assertEquals(thirdUser, \"Jeremy\")"
		],
		"starterFn": [
			"1\nconst str = `[/* make your changes here only */] = users`"
		],
		"url": "https://edabit.com/challenge/4k9HnP6bF5ptHjmxE"
	},
	{
		"title": "Replace Letters With Position In Alphabet",
		"description": "<p><span>Create a function that takes a string and replaces each letter with its appropriate position in the alphabet. \"a\" is 1, \"b\" is 2, \"c\" is 3, etc, etc.</span></p><h3><span>Examples</span></h3><pre><code>alphabetIndex(\"Wow, does that work?\")\n➞ \"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\"\n\nalphabetIndex(\"The river stole the gods.\")\n➞ \"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\"\n\nalphabetIndex(\"We have a lot of rain in June.\")\n➞ \"23 5 8 1 22 5 1 12 15 20 15 6 18 1 9 14 9 14 10 21 14 5\"</code></pre><h3><span>Notes</span></h3><p><span>If any character in the string isn't a letter, ignore it.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(alphabetIndex(\"Wednesday is hump day, but has anyone asked the camel if he’s happy about it?\"), \"23 5 4 14 5 19 4 1 25 9 19 8 21 13 16 4 1 25 2 21 20 8 1 19 1 14 25 15 14 5 1 19 11 5 4 20 8 5 3 1 13 5 12 9 6 8 5 19 8 1 16 16 25 1 2 15 21 20 9 20\")",
			"Test.assertEquals(alphabetIndex(\"Check back tomorrow; I will see if the book has arrived.\"), \"3 8 5 3 11 2 1 3 11 20 15 13 15 18 18 15 23 9 23 9 12 12 19 5 5 9 6 20 8 5 2 15 15 11 8 1 19 1 18 18 9 22 5 4\")",
			"Test.assertEquals(alphabetIndex(\"We have a lot of rain in June.\"), \"23 5 8 1 22 5 1 12 15 20 15 6 18 1 9 14 9 14 10 21 14 5\")",
			"Test.assertEquals(alphabetIndex(\"Sixty-Four comes asking for bread.\"), \"19 9 24 20 25 6 15 21 18 3 15 13 5 19 1 19 11 9 14 7 6 15 18 2 18 5 1 4\")",
			"Test.assertEquals(alphabetIndex(\"The#b00k$is*in^fr0nt#0f!the_taBle.\"), \"20 8 5 2 11 9 19 9 14 6 18 14 20 6 20 8 5 20 1 2 12 5\")",
			"Test.assertEquals(alphabetIndex(\"Lets all be unique together until we realise we are all the same.\"), \"12 5 20 19 1 12 12 2 5 21 14 9 17 21 5 20 15 7 5 20 8 5 18 21 14 20 9 12 23 5 18 5 1 12 9 19 5 23 5 1 18 5 1 12 12 20 8 5 19 1 13 5\")",
			"Test.assertEquals(alphabetIndex(\"The river stole the gods.\"), \"20 8 5 18 9 22 5 18 19 20 15 12 5 20 8 5 7 15 4 19\")",
			"Test.assertEquals(alphabetIndex(\"Wow, does that work?\"), \"23 15 23 4 15 5 19 20 8 1 20 23 15 18 11\")",
			"Test.assertEquals(alphabetIndex(\"If Purple People Eaters are real… where do they find purple people to eat?\"), \"9 6 16 21 18 16 12 5 16 5 15 16 12 5 5 1 20 5 18 19 1 18 5 18 5 1 12 23 8 5 18 5 4 15 20 8 5 25 6 9 14 4 16 21 18 16 12 5 16 5 15 16 12 5 20 15 5 1 20\")",
			"Test.assertEquals(alphabetIndex(\"Abstraction is often one floor above you.\"), \"1 2 19 20 18 1 3 20 9 15 14 9 19 15 6 20 5 14 15 14 5 6 12 15 15 18 1 2 15 22 5 25 15 21\")"
		],
		"starterFn": [
			"1\nfunction alphabetIndex(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LzqbjjEnBkbFYbmDz"
	},
	{
		"title": "Quadratic Equation",
		"description": "<p><span>Create a function to find only the root value of </span><code>x</code><span> in any quadratic equation </span><code>ax^2 + bx  + c</code><span>. The function will take three arguments:</span></p><ul><li><code>a</code><span> as the coefficient of </span><code>x^2</code></li><li><code>b</code><span> as the coefficient of </span><code>x</code></li><li><code>c</code><span> as the constant term</span></li></ul><h3><span>Examples</span></h3><pre><code>quadraticEquation(1, 2, -3) ➞ 1\n\nquadraticEquation(2, -7, 3) ➞ 3\n\nquadraticEquation(1, -12, -28) ➞ 14</code></pre><h3><span>Notes</span></h3><ul><li><span>Quadratic equation is always guaranteed to have a root.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more information on quadratic equations.</span></li><li><span>Calculate only the root that sums the square root of the discriminant, not the one that subtracts it.</span></li><li><span>Round the value / return only integer value.</span></li></ul>",
		"publishedBy": "Relativity",
		"publishedByUrl": "https://edabit.com/user/uNCaMmtN427KX6Gni",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"conditions",
			"math"
		],
		"tests": [
			"Test.assertEquals(quadraticEquation(1, 2, -3), 1)",
			"Test.assertEquals(quadraticEquation(2, -7, 3), 3)",
			"Test.assertEquals(quadraticEquation(1, -12, -28), 14)"
		],
		"starterFn": [
			"1\nfunction quadraticEquation(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FdsQBPLYBwrpYEbRn"
	},
	{
		"title": "Sum of Decimals",
		"description": "<p><span>Captain Obvious is asked to implement a simple function that given two decimal numbers </span><code>A</code><span> and </span><code>B</code><span> returns their sum.</span></p><p><span>\"</span><em><span>Easy one!</span></em><span>\" he thinks, but soon he discovers that his function fails over the fifty percent of given test cases! He suspects the test cases are wrong, but his calculator is saying they're correct! What's happening?</span></p><p><span>Can you help Captain Obvious to debug his function and solve the exercise?</span></p><h3><span>Examples</span></h3><pre><code>floatSum(0.3, 0.7) ➞ 1\n\nfloatSum(0.35, 0.75) ➞ 1.1\n\nfloatSum(1.234, 5.6789) ➞ 6.9129</code></pre><h3><span>Notes</span></h3><ul><li><span>Given numbers can be either integer or float with 1 up to 6 decimals.</span></li><li><span>Don't round results!</span></li><li><span>Bonus: Can you resolve it using a simple math expression instead of a built-in method?</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(floatSum(0.1, 0.2), 0.3)",
			"Test.assertEquals(floatSum(0.2, 0.3), 0.5)",
			"Test.assertEquals(floatSum(8.4, 8.8), 17.2)",
			"Test.assertEquals(floatSum(5.7, 4.3), 10)",
			"Test.assertEquals(floatSum(5, 0.81), 5.81)",
			"Test.assertEquals(floatSum(0.81, 99), 99.81)",
			"Test.assertEquals(floatSum(99.1, 0.109), 99.209)",
			"Test.assertEquals(floatSum(50.1234, 11.5678), 61.6912)",
			"Test.assertEquals(floatSum(3.4444, 3.5555), 6.9999)",
			"Test.assertEquals(floatSum(2.12022, 1.110001), 3.230221)"
		],
		"starterFn": [
			"1\nfunction floatSum(A, B) {",
			"2\n  return A + B;",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cwZQWhHHDTHP4ASbu"
	},
	{
		"title": "RNA Reverse Complement",
		"description": "<p><span>Create a function that finds the reverse complement of a ribonucleic acid (RNA) strand. The RNA will be represented as a string containing only the characters \"A\", \"C\", \"G\" and \"U\". Since RNA can only (canonically) allow pairings of A/U and G/C, the complement of an RNA would be as follows:</span></p><pre><code>original -&gt; complement\n\"AAA\" -&gt; \"UUU\"\n\"UUU\" -&gt; \"AAA\"\n\"GGG\" -&gt; \"CCC\"\n\"CCC\" -&gt; \"GGG\"\n\"GGAACC\" -&gt; \"CCUUGG\"</code></pre><p><span>Your function should find the complement on the right </span><strong><span>AND</span></strong><span> also reverse the resulting string.</span></p><h3><span>Examples</span></h3><pre><code>reverseComplement(\"GUGU\") ➞ \"ACAC\"\n\nreverseComplement(\"UCUCG\") ➞ \"CGAGA\"\n\nreverseComplement(\"CAGGU\") ➞ \"ACCUG\"</code></pre><h3><span>Notes</span></h3><p><span>You can assume all input sequences will be valid.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops"
		],
		"tests": [
			"Test.assertEquals(reverseComplement(\"GAGGC\"), \"GCCUC\")",
			"Test.assertEquals(reverseComplement(\"UCUCG\"), \"CGAGA\")",
			"Test.assertEquals(reverseComplement(\"CAGGU\"), \"ACCUG\")",
			"Test.assertEquals(reverseComplement(\"UAUUUUUCCA\"), \"UGGAAAAAUA\")",
			"Test.assertEquals(reverseComplement(\"GUAGGCAACA\"), \"UGUUGCCUAC\")",
			"Test.assertEquals(reverseComplement(\"UAGCUAAAUC\"), \"GAUUUAGCUA\")",
			"Test.assertEquals(reverseComplement(\"AUGAGCGUAC\"), \"GUACGCUCAU\")",
			"Test.assertEquals(reverseComplement(\"UUAUACCCGAGUCGGAUUUGUCACU\"), \"AGUGACAAAUCCGACUCGGGUAUAA\")",
			"Test.assertEquals(reverseComplement(\"CUUGUGCGCUAUACAUCGAGUAGUUGCUAGAGUAUGUUACUCAAGAGCGC\"), \"GCGCUCUUGAGUAACAUACUCUAGCAACUACUCGAUGUAUAGCGCACAAG\")",
			"Test.assertEquals(reverseComplement(\"UUAACUGGGGUGAACUGUCCUGAGCCUAUGGAUCUGCGCGCAGGGCUUCAAAUGGAGUUCGGAAUGACCAUCGAUUCUCGAUGUUUGGCACGAAGUCGCA\"), \"UGCGACUUCGUGCCAAACAUCGAGAAUCGAUGGUCAUUCCGAACUCCAUUUGAAGCCCUGCGCGCAGAUCCAUAGGCUCAGGACAGUUCACCCCAGUUAA\")",
			"Test.assertEquals(reverseComplement(\"GCAGCUCCCCGUCCAUCGAUAAGAGACGUUCCUGCCACGGUUGCUCUACUUUAGAGGUACAACUCUCUUGUAUAAGCCUAGCGUCCUUCCGGAGGAGCCGGGUGCCGUCUCAUGGAUCCGCAUUGUCAGGUUGGCCACGACCAUUCAAAAUUUAACUUACACUUAUGAUGCGAAAUGCACACCAUAGUGCCACCGUGAUAAGUUUCCAGCCGAACUAUGCGAGUUUGCGAGAGGCAGGCUCAAUGCCAGCAGGGGCCAGUGAGGGCUCGAUCUAAAACCCGCUGUUGAUAUUCGUAAACGGUGGCCCGCCUGUUCAGUUACUCUCCAUAUCAUCACCUCAGGUUGAGCCAAAGUAGCCGCGCCGCAUCAAGCUGAGAGAAGUGCACGAGGUUUACACGUAGCCCUCUCUGAUCCGGUUGCCGUGCACUAGCGAUUUGUUUCACAUGAAUCGGUCGGGAGUACACACACAUAUAUUAUUAGAGUUGUUCAAUCCCGCAGAG\"), \"CUCUGCGGGAUUGAACAACUCUAAUAAUAUAUGUGUGUGUACUCCCGACCGAUUCAUGUGAAACAAAUCGCUAGUGCACGGCAACCGGAUCAGAGAGGGCUACGUGUAAACCUCGUGCACUUCUCUCAGCUUGAUGCGGCGCGGCUACUUUGGCUCAACCUGAGGUGAUGAUAUGGAGAGUAACUGAACAGGCGGGCCACCGUUUACGAAUAUCAACAGCGGGUUUUAGAUCGAGCCCUCACUGGCCCCUGCUGGCAUUGAGCCUGCCUCUCGCAAACUCGCAUAGUUCGGCUGGAAACUUAUCACGGUGGCACUAUGGUGUGCAUUUCGCAUCAUAAGUGUAAGUUAAAUUUUGAAUGGUCGUGGCCAACCUGACAAUGCGGAUCCAUGAGACGGCACCCGGCUCCUCCGGAAGGACGCUAGGCUUAUACAAGAGAGUUGUACCUCUAAAGUAGAGCAACCGUGGCAGGAACGUCUCUUAUCGAUGGACGGGGAGCUGC\")"
		],
		"starterFn": [
			"1\nfunction reverseComplement(sequence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9gtnTRq5iksMCKWRZ"
	},
	{
		"title": "Replacing Letters with Hashes",
		"description": "<p><span>Write a function that replaces all letters within a specified range with the hash symbol </span><code>#</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>replace(\"abcdef\", \"c-e\") ➞ \"ab###f\"\n\nreplace(\"rattle\", \"r-z\") ➞ \"#a##le\"\n\nreplace(\"microscopic\", \"i-i\") ➞ \"m#croscop#c\"\n\nreplace(\"\", \"a-z\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The range will always be in order, a.k.a. for </span><code>m-n</code><span>, character </span><code>m</code><span> will always come before or equal </span><code>n</code><span>.</span></li><li><span>Strings will be in lower case letters only.</span></li><li><span>Return an empty string if the input is an empty string.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(replace(\"abcdef\", \"c-e\"), \"ab###f\")",
			"Test.assertEquals(replace(\"rattle\", \"r-z\"), \"#a##le\")",
			"Test.assertEquals(replace(\"microscopic\", \"i-i\"), \"m#croscop#c\")",
			"Test.assertEquals(replace(\"bountiful\", \"a-o\"), \"##u#t##u#\")",
			"Test.assertEquals(replace(\"zebra\", \"a-z\"), \"#####\")",
			"Test.assertEquals(replace(\"mount\", \"a-e\"), \"mount\")",
			"Test.assertEquals(replace(\"\", \"a-z\"), \"\")"
		],
		"starterFn": [
			"1\nfunction replace(str, r) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2kentanhDPfDNfXG4"
	},
	{
		"title": "Word Builder",
		"description": "<p><span>In this challenge, you have to build a word from the scrambled letters contained in the first given array. For establishing how to assign the spots to the letters, you will use the positions contained in the second given array.</span></p><pre><code>letters = [\"e\", \"t\", \"s\", \"t\"]\npositions = [1, 3, 2, 0]\n\nStep 1 ➞ Letter \"e\" goes to index 1 ➞ _  e  _   _\nStep 2 ➞ Letter \"t\" goes to index 3 ➞ _  e  _   t\nStep 3 ➞ Letter \"s\" goes to index 2 ➞ _  e  s   t\nStep 4 ➞ Letter \"t\" goes to index 0 ➞ t  e  s   t</code></pre><p><span>Given the two arrays </span><code>letters</code><span> (containing the scrambled letters of the word) and </span><code>positions</code><span> (containing the indexes of the letters), implement a function that returns the resulting word as a string.</span></p><h3><span>Examples</span></h3><pre><code>wordBuilder([\"e\", \"t\", \"s\", \"t\"], [1, 3, 2, 0]) ➞ \"test\"\n\nwordBuilder([\"b\", \"e\", \"t\", \"i\", \"d\", \"a\"], [3, 0, 5, 4, 1, 2]) ➞ \"edabit\"\n\nwordBuilder([\"g\", \"e\", \"o\"], [1, 0, 2]) ➞ \"ego\"</code></pre><h3><span>Notes</span></h3><p><span>Every given test case has valid parameters, don't worry about exceptions handling.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(wordBuilder([\"e\", \"t\", \"s\", \"t\"], [1, 3, 2, 0]), \"test\")",
			"Test.assertEquals(wordBuilder([\"b\", \"e\", \"t\", \"i\", \"d\", \"a\"], [3, 0, 5, 4, 1, 2]), \"edabit\")",
			"Test.assertEquals(wordBuilder([\"g\", \"e\", \"o\"], [1, 0, 2]), \"ego\")",
			"Test.assertEquals(wordBuilder([\"l\", \"e\", \"h\", \"n\", \"l\", \"c\", \"a\", \"e\", \"g\"], [3, 5, 1, 6, 4, 0, 2, 8, 7]), \"challenge\")",
			"Test.assertEquals(wordBuilder([\"e\", \"i\", \"l\", \"g\", \"x\", \"h\", \"p\", \"o\", \"c\", \"r\", \"i\", \"a\", \"c\"], [1, 3, 0, 6, 2, 10, 9, 5, 4, 7, 11, 8, 12]), \"lexicographic\")",
			"Test.assertEquals(wordBuilder([\"s\", \"o\", \"r\", \"t\", \"e\", \"d\"], [0, 1, 2, 3, 4, 5]), \"sorted\")"
		],
		"starterFn": [
			"1\nfunction wordBuilder(letters, positions) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PMKNyPeYgz7weyNXF"
	},
	{
		"title": "No Yelling",
		"description": "<p><span>Create a function that transforms sentences ending  with multiple question marks </span><code>?</code><span> or exclamation marks </span><code>!</code><span> into a sentence only ending with one without changing punctuation in the middle of the sentences.</span></p><h3><span>Examples</span></h3><pre><code>noYelling(\"What went wrong?????????\") ➞ \"What went wrong?\"\n\nnoYelling(\"Oh my goodness!!!\") ➞ \"Oh my goodness!\"\n\nnoYelling(\"I just!!! can!!! not!!! believe!!! it!!!\") ➞ \"I just!!! can!!! not!!! believe!!! it!\"\n// Only change repeating punctuation at the end of the sentence.\n\nnoYelling(\"Oh my goodness!\") ➞ \"Oh my goodness!\"\n// Do not change sentences where there exists only one or zero exclamation marks/question marks.\n\nnoYelling(\"I just cannot believe it.\") ➞ \"I just cannot believe it.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Only change </span><strong><span>ending punctuation</span></strong><span> - keep the exclamation marks or question marks in the middle of the sentence the same (see third example).</span></li><li><span>Don't worry about mixed punctuation (no cases that end in something like </span><code>?!??!</code><span>).</span></li><li><span>Keep sentences that do not have question/exclamation marks the same.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(noYelling(\"What went wrong?????????\"), \"What went wrong?\")",
			"Test.assertEquals(noYelling(\"Oh my goodness!!!\"), \"Oh my goodness!\")",
			"Test.assertEquals(noYelling(\"WHAT!\"), \"WHAT!\")",
			"Test.assertEquals(noYelling(\"WHAT?\"), \"WHAT?\")",
			"Test.assertEquals(noYelling(\"Oh my goodness!\"), \"Oh my goodness!\")",
			"Test.assertEquals(noYelling(\"I just cannot believe it.\"), \"I just cannot believe it.\")",
			"Test.assertEquals(noYelling(\"I just!!! can!!! not!!! believe!!! it!!!\"), \"I just!!! can!!! not!!! believe!!! it!\")",
			"Test.assertEquals(noYelling(\"That's a ton!! of cheese!!!!\"), \"That's a ton!! of cheese!\")"
		],
		"starterFn": [
			"1\nfunction noYelling(phrase) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rKeYpxFeRQRP2Afg7"
	},
	{
		"title": "Counting Adverbs",
		"description": "<p><span>Create a function that counts the number of </span><strong><span>adverbs</span></strong><span> in a sentence. An adverb is a word that ends with </span><code>ly</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>countAdverbs(\"She ran hurriedly towards the stadium.\") ➞ 1\n\ncountAdverbs(\"She ate the lasagna heartily and noisily.\") ➞ 2\n\ncountAdverbs(\"He hates potatoes.\") ➞ 0\n\ncountAdverbs(\"He was happily, crazily, foolishly over the moon.\") ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>Do NOT count words where the </span><code>ly</code><span> is in the beginning or the middle (e.g. Lysol, Illya).</span></li><li><span>For the purpose of this exercise, ignore the nuances of the English language (some adjectives also end in </span><code>ly</code><span>).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countAdverbs(\"She ran hurriedly towards the stadium.\"), 1)",
			"Test.assertEquals(countAdverbs(\"She ate the lasagna heartily and noisily.\"), 2)",
			"Test.assertEquals(countAdverbs(\"He hates potatoes.\"), 0)",
			"Test.assertEquals(countAdverbs(\"He was happily, crazily, foolishly over the moon.\"), 3)",
			"Test.assertEquals(countAdverbs(\"She writes poetry beautifully.\"), 1)",
			"Test.assertEquals(countAdverbs(\"There are many fat geese in the park.\"), 0)",
			"Test.assertEquals(countAdverbs(\"The horse acted aggressively and stubbornly.\"), 2)",
			"Test.assertEquals(countAdverbs(\"She forgot where to buy the lysol.\"), 0, '-ly should not be counted if it is not at the end.')",
			"Test.assertEquals(countAdverbs(\"Ilya ran to the store.\"), 0, '-ly should not be counted if it is not at the end.')"
		],
		"starterFn": [
			"1\nfunction countAdverbs(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sjeXqkCFvv6qSchtA"
	},
	{
		"title": "Divide a Fraction by Two",
		"description": "<p><span>Create a function that takes a fractional number as a string for its argument and returns its half.</span></p><h3><span>Examples</span></h3><pre><code>fractionHalf(\"1/2\") ➞ \"1/4\"\n\nfractionHalf(\"6/8\") ➞ \"3/8\"\n\nfractionHalf(\"3/8\") ➞ \"3/16\"</code></pre><h3><span>Notes</span></h3><p><span>Always return the simplified fraction (reduced to its lowest terms).</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(fractionHalf(\"1/2\"), \"1/4\")",
			"Test.assertEquals(fractionHalf(\"2/3\"), \"1/3\")",
			"Test.assertEquals(fractionHalf(\"3/8\"), \"3/16\")",
			"Test.assertEquals(fractionHalf(\"39/46\"), \"39/92\")",
			"Test.assertEquals(fractionHalf(\"52/97\"), \"26/97\")"
		],
		"starterFn": [
			"1\nfunction fractionHalf(fraction) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uEKkeNBEXPGTcGETL"
	},
	{
		"title": "Basic Statistics: Median",
		"description": "<p><span>The </span><em><span>median</span></em><span> of a group of numbers is the </span><em><span>middle</span></em><span> number when the group is sorted. If the size of the group is even, the median is the </span><em><span>average</span></em><span> of the middle two numbers. Given a sorted array of numbers, return the median (rounded to one decimal place if the median isn't an integer).</span></p><h3><span>Examples</span></h3><pre><code>median([1, 2, 4, 5, 6, 8, 8, 8, 10]) ➞ 6\n\nmedian([2, 2, 6, 8, 8, 10, 10]) ➞ 8\n\nmedian([1, 2, 2, 4, 7, 8, 9, 10]) ➞ 5.5</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(median([3, 4, 4, 5, 6, 8]), 4.5)",
			"Test.assertEquals(median([1, 4, 4, 9, 9, 10]), 6.5)",
			"Test.assertEquals(median([1, 2, 4, 4, 4, 7, 7, 9, 10]), 4)",
			"Test.assertEquals(median([1, 7, 8, 8, 10, 10, 10]), 8)",
			"Test.assertEquals(median([2, 3, 3, 3, 3, 5]), 3.0)",
			"Test.assertEquals(median([1, 1, 3, 4, 6, 6, 6, 7, 10]), 6)",
			"Test.assertEquals(median([3, 4, 6, 6, 6, 7, 9, 10, 10]), 6)",
			"Test.assertEquals(median([3, 3, 4, 5, 6, 6, 7, 9]), 5.5)",
			"Test.assertEquals(median([3, 4, 4, 6, 9, 9, 9]), 6)",
			"Test.assertEquals(median([3, 4, 4, 5, 7, 8]), 4.5)",
			"Test.assertEquals(median([2, 4, 4, 5, 5, 8, 8, 9, 10]), 5)",
			"Test.assertEquals(median([4, 5, 5, 6, 8, 10]), 5.5)",
			"Test.assertEquals(median([1, 4, 4, 5, 8, 9]), 4.5)",
			"Test.assertEquals(median([1, 4, 8, 8, 8, 8, 9, 10]), 8.0)",
			"Test.assertEquals(median([1, 1, 2, 2, 10, 10]), 2.0)",
			"Test.assertEquals(median([3, 4, 4, 5, 7, 8, 9]), 5)",
			"Test.assertEquals(median([1, 1, 2, 2, 2, 4, 5, 6, 8]), 2)",
			"Test.assertEquals(median([2, 4, 5, 5, 7, 7, 9, 10]), 6.0)",
			"Test.assertEquals(median([1, 3, 4, 8, 8, 10, 10]), 8)",
			"Test.assertEquals(median([1, 1, 4, 5, 5, 9, 9, 10]), 5.0)"
		],
		"starterFn": [
			"1\nfunction median(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PdooZppJkpCGiJHCf"
	},
	{
		"title": "Spicy Food",
		"description": "<p><span>The facts are:</span></p><ol><li><span>You've just finished dinner.</span></li><li><span>You love spicy food but your friend hates it.</span></li></ol><p><span>Given your friend's unfortunate taste preferences, you decide to </span><strong><span>split the bill only for non-spicy items</span></strong><span>. You will pay in full for the spicy dishes.</span></p><p><span>Given two ordered arrays, one classifying the dishes as spicy vs. non-spicy and the other listing their prices, write a function that outputs an array where the first element is </span><strong><span>how much you pay</span></strong><span> and the second element is </span><strong><span>how much your friend pays</span></strong><span>.</span></p><pre><code>billSplit([\"S\", \"N\", \"S\", \"S\"], [13, 18, 15, 4]) ➞ [41, 9]\n\n// Since:\n// You pay: [13, 9, 15, 4] = 41\n// Friend pays: [0, 9, 0, 0] = 9</code></pre><h3><span>Examples</span></h3><pre><code>billSplit([\"N\", \"S\", \"N\"], [10, 10, 20]) ➞ [25, 15]\n// You pay for half of both \"N\" dishes (5 + 10) and entirely pay for the \"S\" dish (10).\n\nbillSplit([\"N\", \"N\"], [10, 10]) ➞ [10, 10]\n\nbillSplit([\"S\", \"N\"], [41, 10]) ➞ [46, 5]</code></pre><h3><span>Notes</span></h3><ul><li><span>The dishes are in the same order for both input arrays.</span></li><li><span>Remember to output an array in this order: </span><code>[your payment, friend's payment]</code></li><li><span>The array will contain at least one non-spicy dish </span><code>N</code><span> (you're not going to let your poor friend go hungry, are you?).</span></li><li><span>Express both payments as integers.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(billSplit(['N', 'S', 'N'], [10, 10, 20]), [25, 15])",
			"Test.assertSimilar(billSplit(['N', 'N'], [10, 10]), [10, 10])",
			"Test.assertSimilar(billSplit(['S', 'N'], [41, 10]), [46, 5])",
			"Test.assertSimilar(billSplit(['S', 'S', 'S', 'N', 'N'], [8, 9, 8, 7, 7]), [32, 7])",
			"Test.assertSimilar(billSplit(['N', 'N', 'N', 'S'], [40, 20, 20, 10]), [50, 40])"
		],
		"starterFn": [
			"1\nfunction billSplit(spicy, cost) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WoFZTyrayj9f2FPwD"
	},
	{
		"title": "Folding a Piece of Paper",
		"description": "<p><span>Create a function that returns the </span><strong><span>thickness (in meters)</span></strong><span> of a piece of paper after folding it </span><code>n</code><span> number of times. The paper starts off with a thickness of </span><strong><span>0.5mm</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>numLayers(1) ➞ \"0.001m\"\n// Paper folded once is 1mm (equal to 0.001m)\n\nnumLayers(4) ➞ \"0.008m\"\n// Paper folded 4 times is 8mm (equal to 0.008m)\n\nnumLayers(21) ➞ \"1048.576m\"\n// Paper folded 21 times is 1048576mm (equal to 1048.576m)</code></pre><h3><span>Notes</span></h3><ul><li><span>There are </span><em><span>1000mm</span></em><span> in a </span><em><span>single meter</span></em><span>.</span></li><li><span>Don't round answers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"formatting",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(numLayers(0), \"0.0005m\")",
			"Test.assertEquals(numLayers(1), \"0.001m\")",
			"Test.assertEquals(numLayers(2), \"0.002m\")",
			"Test.assertEquals(numLayers(3), \"0.004m\")",
			"Test.assertEquals(numLayers(4), \"0.008m\")",
			"Test.assertEquals(numLayers(5), \"0.016m\")",
			"Test.assertEquals(numLayers(6), \"0.032m\")",
			"Test.assertEquals(numLayers(7), \"0.064m\")",
			"Test.assertEquals(numLayers(8), \"0.128m\")",
			"Test.assertEquals(numLayers(9), \"0.256m\")",
			"Test.assertEquals(numLayers(10), \"0.512m\")",
			"Test.assertEquals(numLayers(11), \"1.024m\")",
			"Test.assertEquals(numLayers(12), \"2.048m\")",
			"Test.assertEquals(numLayers(13), \"4.096m\")",
			"Test.assertEquals(numLayers(14), \"8.192m\")",
			"Test.assertEquals(numLayers(15), \"16.384m\")",
			"Test.assertEquals(numLayers(16), \"32.768m\")",
			"Test.assertEquals(numLayers(17), \"65.536m\")",
			"Test.assertEquals(numLayers(18), \"131.072m\")",
			"Test.assertEquals(numLayers(19), \"262.144m\")",
			"Test.assertEquals(numLayers(20), \"524.288m\")",
			"Test.assertEquals(numLayers(21), \"1048.576m\")",
			"Test.assertEquals(numLayers(22), \"2097.152m\")",
			"Test.assertEquals(numLayers(23), \"4194.304m\")",
			"Test.assertEquals(numLayers(24), \"8388.608m\")",
			"Test.assertEquals(numLayers(25), \"16777.216m\")"
		],
		"starterFn": [
			"1\nfunction numLayers(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/piuXusWgzhovQx3Dn"
	},
	{
		"title": "String Flips",
		"description": "<p><span>Create a function that takes a string as the first argument, and a (string) specification as a second argument. If the specification is </span><code>\"word\"</code><span>, return a string with each word reversed while maintaining their original order. If the specification is </span><code>\"sentence\"</code><span>, reverse the order of the words in the string, while keeping the words intact.</span></p><h3><span>Examples</span></h3><pre><code>str = \"There's never enough time to do all the nothing you want\"\n\n\nflip(\"Hello\", \"word\") ➞ \"olleH\"\n\nflip(\"Hello\", \"sentence\") ➞ \"Hello\"\n\nflip(str, \"word\") ➞ \"s'erehT reven hguone emit ot od lla eht gnihton uoy tnaw\"\n\nflip(str, \"sentence\") ➞ \"want you nothing the all do to time enough never There's\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"regex",
			"strings"
		],
		"tests": [
			"str1 = \"There's never enough time to do all the nothing you want\"",
			"str2 = \"I have all these great genes but they're recessive\"",
			"str3 = \"I like maxims that don't encourage behavior modification\"",
			"​",
			"Test.assertEquals(flip('Hello', 'word'), 'olleH')",
			"Test.assertEquals(flip('Hello', 'sentence'), 'Hello')",
			"Test.assertEquals(flip(str1, 'word'), \"s'erehT reven hguone emit ot od lla eht gnihton uoy tnaw\")",
			"Test.assertEquals(flip(str1, 'sentence'), \"want you nothing the all do to time enough never There's\")",
			"Test.assertEquals(flip(str2, 'word'), \"I evah lla eseht taerg seneg tub er'yeht evissecer\")",
			"Test.assertEquals(flip(str2, 'sentence'), \"recessive they're but genes great these all have I\")",
			"Test.assertEquals(flip(str3, 'word'), \"I ekil smixam taht t'nod egaruocne roivaheb noitacifidom\")",
			"Test.assertEquals(flip(str3, 'sentence'), \"modification behavior encourage don't that maxims like I\")",
			"​",
			"// Quotes credit: Bill Watterson"
		],
		"starterFn": [
			"1\nfunction flip(str, spec) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DmKPX7XLSTFPBxysD"
	},
	{
		"title": "Evaluating Factorials",
		"description": "<p><span>Create a function that takes an array of factorial expressions and returns their sum.</span></p><h3><span>Examples</span></h3><pre><code>evalFactorial([\"2!\", \"3!\"]) ➞ 8\n\nevalFactorial([\"5!\", \"4!\", \"2!\"]) ➞ 146\n\nevalFactorial([\"0!\", \"1!\"]) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>0! and 1! both equal 1.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(evalFactorial([\"2!\", \"3!\"]), 8)",
			"Test.assertEquals(evalFactorial([\"5!\", \"4!\", \"2!\"]), 146)",
			"Test.assertEquals(evalFactorial([\"0!\", \"1!\"]), 2)",
			"Test.assertEquals(evalFactorial([\"5!\", \"5!\", \"10!\"]), 3629040)",
			"Test.assertEquals(evalFactorial([\"6!\", \"3!\"]), 726)",
			"Test.assertEquals(evalFactorial([\"2!\", \"2!\", \"1!\", \"1!\"]), 6)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction evalFactorial(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/syor4LetxQytquHdx"
	},
	{
		"title": "Count the Letters and Digits",
		"description": "<p><span>Write a function that takes a string and calculates the number of letters and digits within it. Return the result as an object.</span></p><h3><span>Examples</span></h3><pre><code>countAll(\"Hello World\") ➞ { \"LETTERS\":  10, \"DIGITS\": 0 }\n\ncountAll(\"H3ll0 Wor1d\") ➞ { \"LETTERS\":  7, \"DIGITS\": 3 }\n\ncountAll(\"149990\") ➞ { \"LETTERS\": 0, \"DIGITS\": 6 }</code></pre><h3><span>Notes</span></h3><ul><li><span>Tests contain only alphanumeric characters.</span></li><li><span>Spaces are not letters.</span></li><li><span>All tests contain valid strings.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"data_structures",
			"objects",
			"regex"
		],
		"tests": [
			"Test.assertSimilar(countAll('Hello'), {'LETTERS': 5, 'DIGITS': 0});",
			"Test.assertSimilar(countAll('137'), {'LETTERS': 0, 'DIGITS': 3});",
			"Test.assertSimilar(countAll('H3LL0'), {'LETTERS': 3, 'DIGITS': 2});",
			"Test.assertSimilar(countAll('149990'), {'LETTERS': 0, 'DIGITS': 6});",
			"Test.assertSimilar(countAll('edabit 2018'), {'LETTERS': 6, 'DIGITS': 4}, 'Spaces are not letters.');",
			"Test.assertSimilar(countAll('    '), {'LETTERS': 0, 'DIGITS': 0});"
		],
		"starterFn": [
			"1\nfunction countAll(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2ndkdWJpycphvhmv8"
	},
	{
		"title": "Count the Points in a Circle",
		"description": "<p><span>Count the amount of coordinates on a two-dimensional grid that are inside a given circle. The function has four arguments: the points, the circle's center x, y and the circle's radius. For example:</span></p><h3><span>Examples</span></h3><pre><code>pointsInCircle([\n  { x: 0, y: 0 },\n  { x: 1, y: 1 },\n  { x: 0, y: 5 },\n  { x: 10, y: 10 }\n], 0, 0, 5) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>Only count the coordinates that are </span><em><span>in</span></em><span> the circle, not the ones that are on the border.</span></p>",
		"publishedBy": "Jasperr",
		"publishedByUrl": "https://edabit.com/user/xxmeopX7HggJJsvYB",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(pointsInCircle([{x: 0, y: 0}, {x: 1, y: 1}, {x: 0, y: 5}, {x: 10, y: 10}], 0, 0, 5), 2)",
			"Test.assertEquals(pointsInCircle([{x: 9, y: 6}, {x: 9, y: 3}, {x: 4, y: 8}, {x: 3, y: 10}, {x: 1, y: 6}], 0, 0, 7.5), 1)",
			"Test.assertEquals(pointsInCircle([{x: 8, y: 8}, {x: 8, y: 6}, {x: 4, y: 7}], 0, 0, 1), 0)",
			"Test.assertEquals(pointsInCircle([{x: 0, y: 0}, {x: 1, y: 1}, {x: 0, y: 5}, {x: 10, y: 10}], 50, 50, 40), 0)",
			"Test.assertEquals(pointsInCircle([{x: 10, y: 10}, {x: 33, y: 54}, {x: 7, y: 98}, {x: 516, y: 85}], 23, 94, 100), 3)",
			"Test.assertEquals(pointsInCircle([{x: 6, y: 3}, {x: 1, y: 4}, {x: 1, y: 9}, {x: 4, y: 9}, {x: 9, y: 3}, {x: 10, y: 8}, {x: 2, y: 2}, {x: 4, y: 3}, {x: 4, y: 4}, {x: 1, y: 2}, {x: 8, y: 9}, {x: 6, y: 10}, {x: 10, y: 6}, {x: 8, y: 8}, {x: 2, y: 1}, {x: 7, y: 4}, {x: 6, y: 1}, {x: 8, y: 1}, {x: 8, y: 5}, {x: 2, y: 1}, {x: 10, y: 5}, {x: 6, y: 5}, {x: 8, y: 3}, {x: 7, y: 8}, {x: 1, y: 6}, {x: 8, y: 7}, {x: 4, y: 10}, {x: 6, y: 5}, {x: 4, y: 5}, {x: 1, y: 10}, {x: 4, y: 4}, {x: 6, y: 8}, {x: 2, y: 8}, {x: 2, y: 8}, {x: 1, y: 10}, {x: 3, y: 2}, {x: 5, y: 7}, {x: 10, y: 2}, {x: 9, y: 8}, {x: 4, y: 3}, {x: 9, y: 5}, {x: 6, y: 3}, {x: 1, y: 3}, {x: 5, y: 10}, {x: 2, y: 7}, {x: 10, y: 6}, {x: 8, y: 4}, {x: 9, y: 9}, {x: 1, y: 8}, {x: 1, y: 3}, {x: 2, y: 2}, {x: 10, y: 1}, {x: 5, y: 6}, {x: 10, y: 5}, {x: 8, y: 5}, {x: 9, y: 10}, {x: 1, y: 4}, {x: 5, y: 6}, {x: 6, y: 5}, {x: 2, y: 2}, {x: 10, y: 10}, {x: 6, y: 7}, {x: 2, y: 1}, {x: 4, y: 4}, {x: 8, y: 4}, {x: 6, y: 10}, {x: 6, y: 7}, {x: 3, y: 5}, {x: 9, y: 1}, {x: 1, y: 7}, {x: 2, y: 9}, {x: 7, y: 4}, {x: 9, y: 5}, {x: 7, y: 6}, {x: 9, y: 6}, {x: 3, y: 1}, {x: 2, y: 9}, {x: 7, y: 1}, {x: 3, y: 7}, {x: 6, y: 5}, {x: 8, y: 8}, {x: 7, y: 5}, {x: 6, y: 4}, {x: 6, y: 5}, {x: 7, y: 2}, {x: 7, y: 10}, {x: 7, y: 1}, {x: 3, y: 1}, {x: 9, y: 10}, {x: 6, y: 7}, {x: 5, y: 9}, {x: 2, y: 6}, {x: 10, y: 1}, {x: 9, y: 1}, {x: 7, y: 3}, {x: 3, y: 1}, {x: 7, y: 9}, {x: 2, y: 5}, {x: 1, y: 9}, {x: 8, y: 8}], 0, 0, 7.5), 34)",
			"Test.assertEquals(pointsInCircle([{x: 16, y: 98}, {x: 48, y: 5}, {x: 66, y: 18}, {x: 87, y: 8}, {x: 37, y: 94}, {x: 69, y: 49}, {x: 85, y: 37}, {x: 61, y: 63}, {x: 19, y: 4}, {x: 81, y: 3}, {x: 90, y: 30}, {x: 35, y: 65}, {x: 30, y: 92}, {x: 72, y: 38}, {x: 67, y: 4}, {x: 41, y: 70}, {x: 93, y: 92}, {x: 43, y: 17}, {x: 22, y: 12}, {x: 5, y: 58}, {x: 27, y: 73}, {x: 42, y: 70}, {x: 40, y: 61}, {x: 75, y: 99}, {x: 41, y: 79}, {x: 98, y: 99}, {x: 20, y: 64}, {x: 2, y: 74}, {x: 69, y: 44}, {x: 39, y: 58}, {x: 6, y: 11}, {x: 51, y: 34}, {x: 32, y: 19}, {x: 50, y: 12}, {x: 16, y: 91}, {x: 1, y: 99}, {x: 13, y: 60}, {x: 16, y: 64}, {x: 34, y: 25}, {x: 41, y: 68}, {x: 61, y: 57}, {x: 61, y: 17}, {x: 47, y: 17}, {x: 10, y: 63}, {x: 40, y: 76}, {x: 82, y: 93}, {x: 54, y: 14}, {x: 6, y: 28}, {x: 21, y: 69}, {x: 76, y: 79}, {x: 37, y: 5}, {x: 85, y: 73}, {x: 24, y: 72}, {x: 36, y: 75}, {x: 72, y: 4}, {x: 71, y: 80}, {x: 37, y: 13}, {x: 62, y: 83}, {x: 45, y: 43}, {x: 95, y: 67}, {x: 6, y: 12}, {x: 79, y: 27}, {x: 1, y: 12}, {x: 19, y: 51}, {x: 94, y: 27}, {x: 29, y: 34}, {x: 21, y: 43}, {x: 8, y: 81}, {x: 98, y: 65}, {x: 63, y: 82}, {x: 45, y: 38}, {x: 70, y: 19}, {x: 61, y: 30}, {x: 47, y: 86}, {x: 52, y: 41}, {x: 89, y: 16}, {x: 28, y: 75}, {x: 21, y: 98}, {x: 54, y: 68}, {x: 80, y: 46}, {x: 82, y: 71}, {x: 36, y: 91}, {x: 76, y: 20}, {x: 33, y: 81}, {x: 56, y: 57}, {x: 6, y: 47}, {x: 85, y: 62}, {x: 83, y: 67}, {x: 98, y: 66}, {x: 92, y: 54}, {x: 70, y: 88}, {x: 42, y: 38}, {x: 66, y: 100}, {x: 92, y: 22}, {x: 77, y: 36}, {x: 90, y: 57}, {x: 48, y: 39}, {x: 49, y: 97}, {x: 12, y: 66}, {x: 30, y: 85}], 0, 0, 50), 16)"
		],
		"starterFn": [
			"1\nfunction pointsInCircle(points, centerX, centerY, radius) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jdYxyKyppvogyhBJ6"
	},
	{
		"title": "Sum of Digits Between Two Numbers",
		"description": "<p><span>Create a function that sums the total number of digits between two numbers, </span><strong><span>inclusive</span></strong><span>. For example, between the numbers </span><code>19</code><span> and </span><code>22</code><span> we have:</span></p><pre><code>// 19, 20, 21, 22\n(1 + 9) + (2 + 0) + (2 + 1) + (2 + 2) = 19</code></pre><h3><span>Examples</span></h3><pre><code>sumDigits(7, 8) ➞ 15\n\nsumDigits(17, 20) ➞ 29\n\nsumDigits(10, 12) ➞ 6</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sumDigits(7, 8), 15)",
			"Test.assertEquals(sumDigits(17, 20), 29)",
			"Test.assertEquals(sumDigits(10, 12), 6)",
			"Test.assertEquals(sumDigits(500, 506), 56)",
			"Test.assertEquals(sumDigits(66, 789), 9324)"
		],
		"starterFn": [
			"1\nfunction sumDigits(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uryLqjondNYMTXhBt"
	},
	{
		"title": "Count the Smiley Faces :)",
		"description": "<p><span>Create a function that takes an array of strings and return the number of smiley faces contained within it. These are the components that make up a valid smiley:</span></p><ul><li><span>A smiley has </span><strong><span>eyes</span></strong><span>. Eyes can be </span><code>:</code><span> or </span><code>;</code><span>.</span></li><li><span>A smiley has a </span><strong><span>nose</span></strong><span> but it doesn't have to. A nose can be </span><code>-</code><span> or </span><code>~</code><span>.</span></li><li><span>A smiley has a </span><strong><span>mouth</span></strong><span> which can be </span><code>)</code><span> or </span><code>D</code><span>.</span></li></ul><p><span>No other characters are allowed except for those mentioned above.</span></p><h3><span>Examples</span></h3><pre><code>countSmileys([\":)\", \";(\", \";}\", \":-D\"]) ➞ 2\n\ncountSmileys([\";D\", \":-(\", \":-)\", \";~)\"]) ➞ 3\n\ncountSmileys([\";]\", \":[\", \";*\", \":$\", \";-D\"]) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>You will always be given an array as input.</span></li><li><span>An empty array should return 0.</span></li><li><span>The order of each facial element will always be the same.</span></li><li><span>Noses are optional (e.g. </span><code>:)</code><span> and </span><code>:-)</code><span> are both valid).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countSmileys([\":)\", \";(\", \";}\", \":-D\"]), 2);",
			"Test.assertEquals(countSmileys([\";D\", \":-(\", \":-)\", \";~)\"]), 3);",
			"Test.assertEquals(countSmileys([\";]\", \":[\", \";*\", \":$\", \";-D\"]), 1);",
			"Test.assertEquals(countSmileys([\";(\", \":>\", \":}\", \":]\"]), 0);",
			"Test.assertEquals(countSmileys([\":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\", \":)\",]), 13);",
			"Test.assertEquals(countSmileys([':)',':(',':D',':O',':;']), 2);",
			"Test.assertEquals(countSmileys([':-)',';~D',':-D',':_D']), 3);",
			"Test.assertEquals(countSmileys([':---)','))',';~~D',';D']), 1);",
			"Test.assertEquals(countSmileys([';~)',':)',':-)',':--)']), 3);",
			"Test.assertEquals(countSmileys([':o)',':--D',';-~)']), 0);",
			"Test.assertEquals(countSmileys([]), 0, \"An empty array should return 0\");"
		],
		"starterFn": [
			"1\nfunction countSmileys(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pFbR2RAjeJmrf9tua"
	},
	{
		"title": "Turn That Frown Upside Down",
		"description": "<p><span>It is important to be happy! Therefore, you must create a function that takes a sentence containing sad faces and turn them into happy ones! This involves changing only the mouths.</span></p><ul><li><strong><span>Sad face examples:</span></strong><span> </span><code>:(</code><span>   </span><code>8(</code><span>   </span><code>x(</code><span>   </span><code>;(</code></li><li><strong><span>Happy face examples:</span></strong><span> </span><code>:)</code><span>   </span><code>8)</code><span>   </span><code>x)</code><span>   </span><code>;)</code></li></ul><p><span>Make sure to only change the face if there are eyes before them, </span><em><span>round(3.4)</span></em><span> wouldn't become </span><em><span>round)3.4)</span></em><span> (for example).</span></p><h3><span>Examples</span></h3><pre><code>makeHappy(\"My current mood: :(\") ➞ \"My current mood: :)\"\n\nmakeHappy(\"I was hungry 8(\") ➞ \"I was hungry 8)\"\n\nmakeHappy(\"print('x(')\") ➞ \"print('x)')\"</code></pre><h3><span>Notes</span></h3><p><span>Faces such as </span><code>:(((((((</code><span> are not included.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(makeHappy('My current mood: :('), 'My current mood: :)')",
			"Test.assertEquals(makeHappy('I was hungry 8('), 'I was hungry 8)')",
			"Test.assertEquals(makeHappy('print(\"x(\")'), 'print(\"x)\")')",
			"Test.assertEquals(makeHappy(\"I'm thirsty ;(\"), \"I'm thirsty ;)\")",
			"Test.assertEquals(makeHappy('(((:())))'), '(((:)))))')",
			"Test.assertEquals(makeHappy('I am :( :( 8( :)'), 'I am :) :) 8) :)')",
			"Test.assertEquals(makeHappy('l'), 'l')",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction makeHappy(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3HcuuwEyBAExktt6c"
	},
	{
		"title": "Intersecting Intervals",
		"description": "<p><span>Create a function that takes in an array of </span><strong><span>intervals</span></strong><span> and returns how many intervals overlap with a given point.</span></p><p><span>An interval overlaps a particular point if the point exists </span><strong><span>inside</span></strong><span> the interval, or on the interval's </span><strong><span>boundary</span></strong><span>. For example the point </span><code>3</code><span> overlaps with the interval </span><code>[2, 4]</code><span> (it is inside) and </span><code>[2, 3]</code><span> (it is on the boundary).</span></p><p><span>To illustrate:</span></p><pre><code>countOverlapping([[1, 2], [2, 3], [1, 3], [4, 5], [0, 1]], 2) ➞ 3\n// Since [1, 2], [2, 3] and [1, 3] all overlap with point 2.</code></pre><h3><span>Examples</span></h3><pre><code>countOverlapping([[1, 2], [2, 3], [3, 4]], 5) ➞ 0\n\ncountOverlapping([[1, 2], [5, 6], [5, 7]], 5) ➞ 2\n\ncountOverlapping([[1, 2], [5, 8], [6, 9]], 7) ➞ 2</code></pre><h3><span>Notes</span></h3><ul><li><span>Each interval is represented as an array with a start point and an endpoint.</span></li><li><span>Intervals count as intersecting even if they only intersect at one point, i.e. </span><code>[2, 3]</code><span> and </span><code>[3, 4]</code><span> both intersect at point </span><code>3</code><span>.</span></li><li><span>If it's helpful, you can draw these intervals on a line on a piece of paper.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(countOverlapping([[1, 2], [2, 3], [3, 4]], 5),0)",
			"Test.assertEquals(countOverlapping([[1, 2], [5, 6], [5, 7]], 5),2)",
			"Test.assertEquals(countOverlapping([[1, 2], [5, 8], [6, 9]], 7),2)",
			"Test.assertEquals(countOverlapping([[1, 5], [2, 5], [3, 6], [4, 5], [5, 6]], 5), 5)",
			"Test.assertEquals(countOverlapping([[1, 5], [2, 5], [3, 6], [4, 5], [5, 6]], 6), 2)",
			"Test.assertEquals(countOverlapping([[1, 5], [2, 5], [3, 6], [4, 5], [5, 6]], 2), 2)",
			"Test.assertEquals(countOverlapping([[1, 5], [2, 5], [3, 6], [4, 5], [5, 6]], 1), 1)"
		],
		"starterFn": [
			"1\nfunction countOverlapping(intervals, point) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FqdfcJ65WkiSn5WpJ"
	},
	{
		"title": "Merge Two Arrays",
		"description": "<p><span>Create a function that takes two arrays and combines them by alternatingly taking elements from each array in turn.</span></p><ul><li><span>The arrays may be of different lengths, with at least one character / digit.</span></li><li><span>The first array will contain string characters (lowercase, a-z).</span></li><li><span>The second array will contain integers (all positive).</span></li></ul><h3><span>Examples</span></h3><pre><code>mergeArrays([\"f\", \"d\", \"w\", \"t\"], [5, 3, 7, 8])\n➞ [\"f\", 5, \"d\", 3, \"w\", 7, \"t\", 8]\n\nmergeArrays([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n➞ [1, \"a\", 2, \"b\", 3, \"c\", \"d\", \"e\", \"f\"]\n\nmergeArrays([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5])\n➞ [\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(mergeArrays([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5]), [\"a\", 1, \"b\", 2, \"c\", 3, \"d\", 4, \"e\", 5])",
			"Test.assertSimilar(mergeArrays([1, 2, 3], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]), [1, \"a\", 2, \"b\", 3, \"c\", \"d\", \"e\", \"f\"])",
			"Test.assertSimilar(mergeArrays([\"f\", \"d\", \"w\", \"t\"], [5, 3, 7, 8]), [\"f\", 5, \"d\", 3, \"w\", 7, \"t\", 8])",
			"Test.assertSimilar(mergeArrays([4, 54, 7, 87], [\"t\", \"d\", \"t\"]), [4, \"t\", 54, \"d\", 7, \"t\", 87])",
			"Test.assertSimilar(mergeArrays([\"c\"], [3]), [ \"c\", 3 ])",
			"Test.assertSimilar(mergeArrays([4, 3, 2, 1], [\"r\", \"d\"]), [ 4, \"r\", 3, \"d\", 2, 1 ])",
			"Test.assertSimilar(mergeArrays([\"u\", \"k\", \"c\"], [2, 8, 30]), [\"u\", 2, \"k\", 8, \"c\", 30])",
			"Test.assertSimilar(mergeArrays([\"e\"], [1, 2, 3, 4, 5, 6, 7]), [\"e\", 1, 2, 3, 4, 5, 6, 7])",
			"Test.assertSimilar(mergeArrays([1, 2, 3, 4, 5, 6, 7], [\"e\"]), [1, \"e\", 2, 3, 4, 5, 6, 7])",
			"Test.assertSimilar(mergeArrays([123, 456], [\"c\", \"b\", \"a\"]), [123, \"c\", 456, \"b\", \"a\"])"
		],
		"starterFn": [
			"1\nfunction mergeArrays(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kaNYPQQWHSX4zGNhj"
	},
	{
		"title": "Construct and Deconstruct",
		"description": "<p><span>Given a string, create a function which outputs an array, </span><strong><span>building</span></strong><span> and </span><strong><span>deconstructing</span></strong><span> the string </span><em><span>letter by letter</span></em><span>. See the examples below for some helpful guidance.</span></p><h3><span>Examples</span></h3><pre><code>constructDeconstruct(\"Hello\") ➞ [\n  \"H\",\n  \"He\",\n  \"Hel\",\n  \"Hell\",\n  \"Hello\",\n  \"Hell\",\n  \"Hel\",\n  \"He\",\n  \"H\"\n]\n\nconstructDeconstruct(\"edabit\") ➞ [\n  \"e\",\n  \"ed\",\n  \"eda\",\n  \"edab\",\n  \"edabi\",\n  \"edabit\",\n  \"edabi\",\n  \"edab\",\n  \"eda\",\n  \"ed\",\n  \"e\"\n]\n\nconstructDeconstruct(\"the sun\") ➞ [\n  \"t\",\n  \"th\",\n  \"the\",\n  \"the \",\n  \"the s\",\n  \"the su\",\n  \"the sun\",\n  \"the su\",\n  \"the s\",\n  \"the \",\n  \"the\",\n  \"th\",\n  \"t\"\n]</code></pre><h3><span>Notes</span></h3><p><span>Include spaces (see example #3).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(constructDeconstruct(\"Hello\"), [",
			"  \"H\",",
			"  \"He\",",
			"  \"Hel\",",
			"  \"Hell\",",
			"  \"Hello\",",
			"  \"Hell\",",
			"  \"Hel\",",
			"  \"He\",",
			"  \"H\"",
			"])",
			"​",
			"Test.assertSimilar(constructDeconstruct(\"edabit\"), [",
			"  \"e\",",
			"  \"ed\",",
			"  \"eda\",",
			"  \"edab\",",
			"  \"edabi\",",
			"  \"edabit\",",
			"  \"edabi\",",
			"  \"edab\",",
			"  \"eda\",",
			"  \"ed\",",
			"  \"e\"",
			"])",
			"​"
		],
		"starterFn": [
			"1\nfunction constructDeconstruct(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ALy97jpKC2CPRJsYR"
	},
	{
		"title": "Ranged Reversal",
		"description": "<p><span>Write a function that reverses the subarray between the start and end index (</span><strong><span>inclusive</span></strong><span>). The rest of the array should be kept the same.</span></p><h3><span>Examples</span></h3><pre><code>rangedReversal([1, 2, 3, 4, 5, 6], 1, 3) ➞ [1, 4, 3, 2, 5, 6]\n\nrangedReversal([1, 2, 3, 4, 5, 6], 0, 4) ➞ [5, 4, 3, 2, 1, 6]\n\nrangedReversal([9, 8, 7, 4], 0, 0) ➞ [9, 8, 7, 4]</code></pre><h3><span>Notes</span></h3><ul><li><span>Arrays will be zero-indexed.</span></li><li><span>The start and end indices will always be valid in context of the array.</span></li><li><span>The end index will always be greater than or equal to the starting index.</span></li><li><span>Return the array itself if the starting and ending index are the same.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(rangedReversal([1, 2, 3, 4, 5, 6], 1, 3), [1, 4, 3, 2, 5, 6])",
			"Test.assertSimilar(rangedReversal([1, 2, 3, 4, 5, 6], 0, 4), [5, 4, 3, 2, 1, 6])",
			"Test.assertSimilar(rangedReversal([9, 8, 7, 4], 0, 0), [9, 8, 7, 4])",
			"Test.assertSimilar(rangedReversal([9, 8, 7, 4], 0, 3), [4, 7, 8, 9])",
			"Test.assertSimilar(rangedReversal([8, 9, 3, 3, 2, 7, 4], 5, 6), [8, 9, 3, 3, 2, 4, 7])",
			"Test.assertSimilar(rangedReversal([1, 2], 0, 1), [2, 1])",
			"Test.assertSimilar(rangedReversal([7, 8, 9, 4], 1, 2), [7, 9, 8, 4])"
		],
		"starterFn": [
			"1\nfunction rangedReversal(arr, start, end) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Me6dgybsZshsdXTQt"
	},
	{
		"title": "Left, Right Shift",
		"description": "<p><span>Create two functions: a </span><strong><span>left-shift function</span></strong><span> and a </span><strong><span>right-shift function</span></strong><span>. Each function will take in an array and a single parameter: the number of shifts.</span></p><pre><code>[1, 2, 3, 4, 5]\n\n[2, 3, 4, 5, 1]  // left shift of 1\n[5, 1, 2, 3, 4]  // left shift of 4\n\n[5, 1, 2, 3, 4]  // right shift of 1\n[3, 4, 5, 1, 2]  // right shift of 3</code></pre><h3><span>Examples</span></h3><pre><code>leftShift([1, 2, 3, 4], 1) ➞ [2, 3, 4, 1]\n\nrightShift([1, 2, 3, 4], 1) ➞ [4, 1, 2, 3]\n\nleftShift([1, 2, 3, 4, 5], 3) ➞ [4, 5, 1, 2, 3]\n\nleftShift([1, 2, 3, 4, 5], 5) ➞ [1, 2, 3, 4, 5]\n// You have fully shifted the array, you end up back where you began.\n\nleftShift([1, 2, 3, 4, 5], 6) ➞ [2, 3, 4, 5, 1]\n// You should be able to take in numbers greater than the length.\n// Think of the length of the array as a modulo.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(leftShift([1, 2, 3, 4], 1), [2, 3, 4, 1])",
			"Test.assertSimilar(rightShift([1, 2, 3, 4], 1), [4, 1, 2, 3])",
			"Test.assertSimilar(leftShift([1, 2, 3, 4, 5], 3), [4, 5, 1, 2, 3])",
			"Test.assertSimilar(leftShift([1, 2, 3, 4, 5], 5), [1, 2, 3, 4, 5])",
			"Test.assertSimilar(leftShift([1, 2, 3, 4, 5], 6), [2, 3, 4, 5, 1])",
			"Test.assertSimilar(leftShift([1, 2, 3, 4, 5], 1), [2, 3, 4, 5, 1])",
			"Test.assertSimilar(leftShift([1, 2, 3, 4, 5], 4), [5, 1, 2, 3, 4])",
			"Test.assertSimilar(rightShift([1, 2, 3, 4, 5], 1), [5, 1, 2, 3, 4])",
			"Test.assertSimilar(rightShift([1, 2, 3, 4, 5], 3), [3, 4, 5, 1, 2])",
			"Test.assertSimilar(rightShift([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5])",
			"Test.assertSimilar(rightShift([1, 2, 3, 4, 5], 15), [1, 2, 3, 4, 5])"
		],
		"starterFn": [
			"1\nfunction leftShift(arr, num) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction rightShift(arr, num) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/GSXZ9PBjGhKijkC4o"
	},
	{
		"title": "RegEx: Boundary Assertions III",
		"description": "<p><span>Write a regular expression that ensures the word \"end\" is inside of another word (e.g. \"bending\"). Non-word characters such as </span><code>!</code><span>, </span><code>?</code><span>, etc. cannot be boundaries.</span></p><h3><span>Examples</span></h3><pre><code>\"The end of the story.\" ➞ false\n\"Endings are pointless.\" ➞ false\n\"Let's send!\" ➞ false\n\"We viewed the rendering at the end.\" ➞ false\n\"Sometimes bending the rules is good.\" ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>You cannot use </span><code>\\w</code><span>, </span><code>*</code><span>, </span><code>.</code><span> or </span><code>+</code><span> in your expressions.</span></li><li><span>The expression should be case-insensitive and should check all occurences of \"end\".</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"validation"
		],
		"tests": [
			"const validate = (REGEXP) => {",
			"   if(/[w*.+]/.test(String(REGEXP))) return () => \"exclude\"",
			"   return function testReg(str) {",
			"     return REGEXP.test(str) ",
			"   }",
			"} ",
			"​",
			"let str1 = \"The end of the story.\"",
			"let str2 = \"Ending is pointless.\"",
			"let str3 = \"DEFENDING THE CROWN WILL END THE CROWN\"",
			"let str4 = \"Let's send!\"",
			"let str5 = \"We viewed the rendering at the end.\" ",
			"let str6 = \"Sometimes bending the rules is good.\"",
			"​",
			"const testStr = validate(REGEXP) ",
			"​",
			"Test.assertNotEquals(testStr(str1), \"exclude\", \"You are not allowed to use \\w, *, ., or + in your expressions.\")",
			"Test.assertEquals(testStr(str1), false)",
			"Test.assertEquals(testStr(str2), false)",
			"Test.assertEquals(testStr(str3), true)",
			"Test.assertEquals(testStr(str3), false)",
			"Test.assertEquals(testStr(str4), false)",
			"Test.assertEquals(testStr(str5), true)",
			"Test.assertEquals(testStr(str5), false)",
			"Test.assertEquals(testStr(str6), true)"
		],
		"starterFn": [
			"1\n/* Fix the expression */",
			"2\nconst REGEXP = /end/"
		],
		"url": "https://edabit.com/challenge/5bETfgL67yy9FKnF4"
	},
	{
		"title": "Digit Distance",
		"description": "<p><span>The </span><strong><span>digit distance</span></strong><span> between two numbers is the absolute value of the difference of each digit.</span></p><p><span>To illustrate:</span></p><pre><code>digitDistance(234, 489) ➞ 12\n// Since |2 - 4| + |3 - 8| + |4 - 9| = 2 + 5 + 5</code></pre><p><span>Create a function that returns the </span><strong><span>digit distance</span></strong><span> between two integers.</span></p><h3><span>Examples</span></h3><pre><code>digitDistance(121, 599) ➞ 19\n\ndigitDistance(12, 12) ➞ 0\n\ndigitDistance(10, 20) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Both integers will be exactly the same length.</span></li><li><span>All digits in </span><code>num2</code><span> have to be higher than their counterparts in </span><code>num1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(digitDistance(121, 599), 19)",
			"Test.assertEquals(digitDistance(12, 12), 0)",
			"Test.assertEquals(digitDistance(10, 20), 1)",
			"Test.assertEquals(digitDistance(12345678, 23456789), 8)",
			"Test.assertEquals(digitDistance(5555, 6666), 4)",
			"Test.assertEquals(digitDistance(105, 777), 15)"
		],
		"starterFn": [
			"1\nfunction digitDistance(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aeYjmvYD5YmmA9Dso"
	},
	{
		"title": "Every Value Needs Some Testing (To Pass)",
		"description": "<p><span>In this challenge, you have to verify that every, or some, of the given variables, pass a given test condition. There are seven parameters:</span></p><ul><li><code>test</code><span> A string being the condition to verify.</span></li><li><code>type</code><span> A string with two possible values:</span><ul><li><code>everybody</code><span> if </span><strong><span>every</span></strong><span> variable has to pass the test;</span></li><li><code>somebody</code><span> if </span><strong><span>at least one</span></strong><span> of the variables has to pass the test.</span></li></ul></li><li><code>a</code><span>, </span><code>b</code><span>, </span><code>c</code><span>, </span><code>d</code><span>, </span><code>e</code><span> The variables being integers or booleans.</span></li></ul><p><span>Create a function that returns </span><code>true</code><span> or </span><code>false</code><span>, depending on the result of the test applied to the variables.</span></p><h3><span>Examples</span></h3><pre><code>everySome(\"&gt;= 1\", \"everybody\", 1, 1, -1, 1, 1) ➞ false\n// Is every variable &gt;= 1?\n\neverySome(\"&gt;= 1\", \"somebody\", -1, -1, -1, -1, 1) ➞ true\n// Is some variable &gt;= 1?\n\neverySome(\"&lt; 4 / 2\", \"everybody\", 1, 2, 1, 2, 1, 0, -10) ➞ false\n// Is every variable &lt; 2?</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(everySome(\">= 1\", \"everybody\", 1, 1, -1, 1, 1), false, \"Example #1\")",
			"Test.assertEquals(everySome(\">= 1\", \"somebody\", -1, -1, -1, -1, 1), true, \"Example #2\")",
			"Test.assertEquals(everySome(\"< 4 / 2\", \"everybody\", 1, 2, 1, 2, 1, 0, -10), false, \"Example #3\")",
			"Test.assertEquals(everySome(\"!= 0\", \"everybody\", false, false, false, false, false), false)",
			"Test.assertEquals(everySome(\"<= 10 * 2\", \"somebody\", 21, 68, 104, 20, 3), true)",
			"Test.assertEquals(everySome(\"!== 1\", \"everybody\", true, true, true, true, true), true)",
			"Test.assertEquals(everySome(\"=== 9 % 9\", \"somebody\", 9, 1, 81, 218, 33), false)"
		],
		"starterFn": [
			"1\nfunction everySome(test, type, a, b, c, d, e) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ugFFzGwCYAAYEvoRF"
	},
	{
		"title": "Remix the String",
		"description": "<p><span>Create a function that takes both a string and an array of numbers as arguments. Rearrange the letters in the string to be in the order specified by the index numbers. Return the \"remixed\" string.</span></p><h3><span>Examples</span></h3><pre><code>remix(\"abcd\", [0, 3, 1, 2]) ➞ \"acdb\"</code></pre><p><span>The string you'll be returning will have: \"a\" at index 0, \"b\" at index 3, \"c\" at index 1, \"d\" at index 2, because the order of those characters maps to their corresponding numbers in the index array.</span></p><pre><code>remix(\"PlOt\", [1, 3, 0, 2]) ➞ \"OPtl\"\n\nremix(\"computer\", [0, 2, 1, 5, 3, 6, 7, 4]) ➞ \"cmourpte\"</code></pre><h3><span>Notes</span></h3><p><span>Be sure not to change the original case; otherwise no gotchas. Assume you'll be given a string and array of equal length, both containing valid characters (A-Z, a-z, or 0-9).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(remix(\"abcd\", [0, 3, 1, 2]), \"acdb\");",
			"Test.assertEquals(remix(\"PlOt\", [1, 3, 0, 2]), \"OPtl\");",
			"Test.assertEquals(remix(\"computer\", [0, 2, 1, 5, 3, 6, 7, 4]), \"cmourpte\");",
			"Test.assertEquals(remix(\"twist\", [4, 0, 1, 2, 3]), \"wistt\");",
			"Test.assertEquals(remix(\"responsibility\", [0, 6, 8, 11, 10, 7, 13, 5, 3, 2, 4, 12, 1, 9]), \"rtibliensyopis\");",
			"Test.assertEquals(remix(\"Interference\", [6, 9, 10, 11, 7, 3, 0, 2, 5, 1, 8, 4]), \"enrfeeIrcnte\");",
			"Test.assertEquals(remix(\"sequence\", [5, 7, 3, 4, 0, 1, 2, 6]), \"encqusee\");"
		],
		"starterFn": [
			"1\nfunction remix(str, arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TeadejgLka6ZxKhWM"
	},
	{
		"title": "Round to the Nearest",
		"description": "<p><span>Create a function that takes two numbers as arguments and returns the first number rounded to the nearest number, or a multiple of that number.</span></p><h3><span>Examples</span></h3><pre><code>roundNearest(17, 10) ➞ 20\n\nroundNearest(36.3) ➞ 36\n\nroundNearest(123, 5) ➞ 125</code></pre><h3><span>Notes</span></h3><p><span>If no nearest number is given, round the number as you normally would (see example #2).</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"[[11, 10.5],",
			"[-17, -16.9],",
			"[180, 178, 10],",
			"[21446.69, 21418.3, 118.49],",
			"[125, 123, 5],",
			"[19700, 19684, 100],",
			"[159.5, 160, 1.1],",
			"[36, 36.3],",
			"[123000, 123456, 1000],",
			"[21, 18, 7],",
			"[123500, 123456, 100],",
			"[25, 25.9, 2.5],",
			"[123460, 123456, 10],",
			"[99, 100, 11],",
			"[876519, 876518, 3],",
			"[160, 160],",
			"[-87912, -87510.69, 888],",
			"[0, 0.05],",
			"[722228, 722222, 19],",
			"[190, 189, 2]].forEach(x =>",
			"Test.assertEquals(roundNearest(x[1], x[2]), x[0]));"
		],
		"starterFn": [
			"1\nfunction roundNearest(num, nearest) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dihfjTJtMyT3wAgPb"
	},
	{
		"title": "Regex Series: Canadian Postal Codes",
		"description": "<p><span>Write a </span><strong><span>regular expression</span></strong><span> that matches any </span><strong><span>valid Canadian postal code</span></strong><span> with any of the following formats:</span></p><pre><code>A1A 1A1\nA1A-1A1\nA1A1B1</code></pre><p><span>Make the match </span><strong><span>case insensitive</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>\"M3M 0A9\" ➞ true\n\n\"m4c-1t1\" ➞ true\n\n\"m45 1t1\" ➞ false\n\n\"M4C-1T1Z\" ➞ false</code></pre><h3><span>Notes</span></h3><p><span>This challenge is designed to use </span><strong><span>Regex only</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"function validate(zip) {",
			"  return x.test(zip)",
			"}",
			"​",
			"Test.expect(validate(\"M3M 0A9\"), \"M3M 0A9 is a valid zip.\")",
			"Test.expect(validate(\"M3M-0A9\"), \"M3M-0A9 is a valid zip.\")",
			"Test.expect(validate(\"M3M0A9\"), \"M3M0A9 is a valid zip.\")",
			"Test.expect(validate(\"m4c 1t1\"), \"m4c 1t1 is a valid zip.\")",
			"Test.expect(validate(\"m4c-1t1\"), \"m4c-1t1 is a valid zip.\")",
			"Test.expect(validate(\"m4c1t1\"), \"m4c1t1 is a valid zip.\")",
			"​",
			"Test.expect(!validate(\"m45 1t1\"), \"m45 1t1 is not in the correct format.\")",
			"Test.expect(!validate(\"M4F 1TY\"), \"M4F 1TY is not in the correct format.\")",
			"Test.expect(!validate(\"M4C A1T\"), \"M4C A1T is not in the correct format.\")",
			"Test.expect(!validate(\"M4C-1T1Z\"), \"M4C-1T1Z is too long.\")",
			"Test.expect(!validate(\"M4C1T1Z\"), \"M4C1T1Z is too long.\")",
			"Test.expect(!validate(\"M4C 1T\"), \"M4C 1T is too short.\")",
			"Test.expect(!validate(\"M4C  1T2\"), \"M4C  1T2 has too many whitespaces.\")",
			"Test.expect(!validate(\"M3M ?A9\"), \"M3M ?A9 uses an unacceptable character.\")",
			"Test.expect(!validate(\"M3M~8A9\"), \"M3M~8A9 uses an unacceptable delimiter.\")",
			"Test.expect(!validate(\"M3M^ 8A9\"), \"M3M^ 8A9 uses an unacceptable delimiter.\")"
		],
		"starterFn": [
			"1\nlet x = /* Fill in regular expression */"
		],
		"url": "https://edabit.com/challenge/6y3Ew3v7GzdQhNrgm"
	},
	{
		"title": "ES6: Destructuring Objects V",
		"description": "<pre><code>const user = {\n  first: 'James',\n  last: 'Baker',\n  bestFriend: {\n    first: 'Scott',\n    last: 'Parkman'\n  }\n}\n\nfunction welcomeMsg(user) {\n  console.log(\"Welcome \" +  user.first + \" \" + user.last  )\n}\n\nwelcomeMsg(user)\n// outputs Welcome James Baker</code></pre><p><span>With </span><strong><span>ES6 object destructuring</span></strong><span> you make this less terse by destructuring the function parameters which reduces duplication when scaling:</span></p><pre><code>function welcomeMsg({ first, last }) {\n  console.log(\"Welcome \" + first + \" \" + last)\n}</code></pre><p><span>Use </span><strong><span>ES6 object destructuring</span></strong><span> to unpack the object inside of the </span><strong><span>function parameters</span></strong><span>. You will need to assign </span><code>user.bestFriend.first</code><span> to the variable name </span><code>best</code><span>. </span><strong><span>Don't</span></strong><span> remove the parameters </span><code>{ first, last }</code><span> and </span><strong><span>don't</span></strong><span> change the return statement.</span></p><h3><span>Example</span></h3><pre><code>bio(user) ➞ \"Hi, my name is James Baker. Scott is my best friend.\"</code></pre><h3><span>Notes</span></h3><p><span>If you know how to use object destructuring, go ahead and complete this challenge, otherwise check the </span><strong><span>Resources</span></strong><span> tab for some examples.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"const user = {",
			"  first: 'James',",
			"  last: 'Baker',",
			"  bestFriend: {",
			"    first: 'Scott',",
			"    last: 'Parkman'",
			"  }",
			"}",
			"​",
			"eval(str)",
			"​",
			"const result = bio(user)",
			"​",
			"const code = str.slice(str.lastIndexOf(\"return\")+8, str.lastIndexOf('\"'))",
			"​",
			"const untouched = (str) => {",
			"  return code === `Hi, my name is \" + first + \" \" + last + \". \" + best + \" is my best friend.` ? \"valid\" : \"not valid\" ",
			"}",
			"​",
			"Test.assertEquals(untouched(str), \"valid\", \"Changing the return statement is not allowed.\")",
			"Test.assertEquals(result, \"Hi, my name is James Baker. Scott is my best friend.\")"
		],
		"starterFn": [
			"1\nconst str = `",
			"2\nfunction bio(/* use es6 destructuring here */) {",
			"3\n  // Do not edit the return statement below",
			"4\n  return \"Hi, my name is \" + first + \" \" + last + \". \" + best + \" is my best friend.\"  ",
			"5\n }",
			"6\n`"
		],
		"url": "https://edabit.com/challenge/KKuTiK2opwMtZnrZ5"
	},
	{
		"title": "Amazing Alliteration",
		"description": "<p><strong><span>Alliteration</span></strong><span> refers to a sequence of words that begin with the same letter. For this exercise, a sentence is correctly alliterated if all words </span><strong><span>strictly greater than 3 characters</span></strong><span> begin with the same letter.</span></p><h3><span>Examples</span></h3><pre><code>alliterationCorrect(\"She swam to the shore.\") ➞ true\n// All words &gt;= 4 letters long begins with \"s\"\n\nalliterationCorrect(\"Maybel manages money well.\") ➞ false\n// \"well\" does not begin with an \"m\"\n\nalliterationCorrect(\"He helps harness happiness.\") ➞ true\n\nalliterationCorrect(\"There are many animals.\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Check the resources tab for a better explanation of alliteration.</span></li><li><span>This is to allow for </span><strong><span>filler words</span></strong><span> such as \"the\", \"to\", \"a\", etc. - so words with three or fewer characters are not counted.</span></li><li><span>Punctuation does not count as part of a word's length.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(alliterationCorrect('She swam to the shore.'), true)",
			"Test.assertEquals(alliterationCorrect('Maybel manages money well.'), false)",
			"Test.assertEquals(alliterationCorrect('He helps harness happiness.'), true)",
			"Test.assertEquals(alliterationCorrect('There are many animals in the zoo.'), false)",
			"Test.assertEquals(alliterationCorrect('Tanya took the tomatoes. Two times two is not twenty.'), true)",
			"Test.assertEquals(alliterationCorrect('Two times two is four.'), false)",
			"Test.assertEquals(alliterationCorrect('Nancy nimbly ran for the newts.'), true)"
		],
		"starterFn": [
			"1\nfunction alliterationCorrect(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RdypN7bxyrjnyhcCe"
	},
	{
		"title": "Harmonic Series",
		"description": "<p><span>In mathematics, the harmonic series is the divergent infinite series:</span></p><p><img alt=\"Alternative Text\" src=\"https://edabit-challenges.s3.amazonaws.com/a741e7af8c9e50f3ad47c3ef7d9b903de7824608.svg\"></p><p><span>Its name derives from the concept of overtones, or harmonics in music.</span></p><p><span>Create a function that, given a precision parameter, returns the value of the harmonic series.</span></p><h3><span>Examples</span></h3><pre><code>harmonic(3) ➞ 1.833\n\nharmonic(1) ➞ 1.0\n\nharmonic(5) ➞ 2.283</code></pre><h3><span>Notes</span></h3><p><span>Round the result to the third decimal place.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(harmonic(10), 2.929)",
			"Test.assertEquals(harmonic(1), 1)",
			"Test.assertEquals(harmonic(12345), 9.998)",
			"Test.assertEquals(harmonic(0), 0)",
			"Test.assertEquals(harmonic(5000), 9.095)",
			"Test.assertEquals(harmonic(2), 1.5)"
		],
		"starterFn": [
			"1\nfunction harmonic(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZhKGjy56E5LYdjreW"
	},
	{
		"title": "Characters and ASCII Code",
		"description": "<p><span>Write a function that transforms an array of characters into an array of objects, where:</span></p><ol><li><span>The keys are the characters themselves.</span></li><li><span>The values are the ASCII codes of those characters.</span></li></ol><h3><span>Examples</span></h3><pre><code>toObj([\"a\", \"b\", \"c\"]) ➞ [{a: 97}, {b: 98}, {c: 99}]\n\ntoObj([\"z\"]) ➞ [{z: 122}]\n\ntoObj([]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(toObj([\"a\", \"b\", \"c\"]), [{a: 97}, {b: 98}, {c: 99}])",
			"Test.assertSimilar(toObj([\"a\", \"p\", \"e\"]), [{a: 97}, {p: 112}, {e: 101}])",
			"Test.assertSimilar(toObj([\"z\"]), [{z: 122}])",
			"Test.assertSimilar(toObj([\"e\",\"o\",\"n\"]), [{e: 101},{o:111},{n:110}])",
			"Test.assertSimilar(toObj([]), [])"
		],
		"starterFn": [
			"1\nfunction toObj(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/h87ArHxmQaaYGKD7m"
	},
	{
		"title": "All Occurrences of an Element in an Array",
		"description": "<p><span>Create a function that returns the indices of all occurrences of an item in the array.</span></p><h3><span>Examples</span></h3><pre><code>getIndices([\"a\", \"a\", \"b\", \"a\", \"b\", \"a\"], \"a\") ➞ [0, 1, 3, 5]\n\ngetIndices([1, 5, 5, 2, 7], 7) ➞ [4]\n\ngetIndices([1, 5, 5, 2, 7], 5) ➞ [1, 2]\n\ngetIndices([1, 5, 5, 2, 7], 8) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If an element does not exist in an array, return </span><code>[]</code><span>.</span></li><li><span>Arrays are zero-indexed.</span></li><li><span>Values in the array will be value-types (don't need to worry about nested arrays).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(getIndices(['a', 'a', 'b', 'a', 'b', 'a'], 'a'), [0, 1, 3, 5])",
			"Test.assertSimilar(getIndices([1, 5, 5, 2, 7], 7), [4])",
			"Test.assertSimilar(getIndices([1, 5, 5, 2, 7], 5),[1, 2])",
			"Test.assertSimilar(getIndices([1, 5, 5, 2, 7], 8), [])",
			"Test.assertSimilar(getIndices([8, 8, 8, 8, 8], 8), [0, 1, 2, 3, 4])",
			"Test.assertSimilar(getIndices([8, 8, 7, 8, 8], 8), [0, 1, 3, 4])",
			"Test.assertSimilar(getIndices([true, false, true, false], true), [0, 2])",
			"Test.assertSimilar(getIndices([true, false, true, false], false), [1, 3])"
		],
		"starterFn": [
			"1\nfunction getIndices(arr, el) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rLf6ApKPLy3fP37XH"
	},
	{
		"title": "Sum of Every Nth Number",
		"description": "<p><span>Given an array of </span><code>numbers</code><span> and a positive value for </span><code>n</code><span>, return the sum of every </span><em><span>nth</span></em><span> number in the array.</span></p><h3><span>Examples</span></h3><pre><code>sumEveryNth([4, 8, 6, 6, 7, 9, 3], 1) ➞ 43\n// 4+8+6+6+7+9+3 = 43\n\nsumEveryNth([7, 3, 10, 4, 5, 8, 4, 9, 6, 9, 10, 1, 4], 4) ➞ 14\n// 4+9+1 = 14\n\nsumEveryNth([10, 6, 5, 4, 5, 2, 3, 3, 8, 10, 7, 2], 8) ➞ 3\n// 3\n\nsumEveryNth([6, 8, 9, 4, 6, 4, 7, 1, 5, 6, 10, 2], 13) ➞ 0\n// only 12 numbers in array</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sumEveryNth([2, 5, 3, 9, 5, 7, 10, 7, 3, 3, 3], 9), 3)",
			"Test.assertEquals(sumEveryNth([10, 9, 2, 5, 9, 6, 4, 6, 7, 10, 9, 9, 9, 9, 2, 1, 2], 7), 13)",
			"Test.assertEquals(sumEveryNth([4, 5, 8, 7, 8, 1, 7, 9, 7, 4, 6, 2, 8, 8, 9, 9, 1, 7, 4], 6), 10)",
			"Test.assertEquals(sumEveryNth([8, 3, 5, 2, 6, 1, 5, 4, 3, 6, 6, 8, 5, 10, 7, 3, 7, 3, 5], 11), 6)",
			"Test.assertEquals(sumEveryNth([8, 9, 4, 8, 7, 5, 2, 9, 1, 8, 3, 8, 4, 9, 9, 6], 11), 3)",
			"Test.assertEquals(sumEveryNth([8, 2, 2, 7, 10, 6, 3, 5, 4, 4], 12), 0)",
			"Test.assertEquals(sumEveryNth([7, 4, 4, 10, 2, 6, 1, 9, 5, 10, 6, 4, 6, 6, 5, 9, 4, 10, 9], 8), 18)",
			"Test.assertEquals(sumEveryNth([5, 10, 10, 9, 10, 3, 5, 6, 6, 2, 10, 2, 9, 6, 8, 9, 10, 9, 4], 16), 9)",
			"Test.assertEquals(sumEveryNth([10, 4, 8, 4, 3, 9, 1, 1, 10, 7, 1, 4, 5, 5, 6, 1, 9], 6), 13)",
			"Test.assertEquals(sumEveryNth([2, 6, 3, 10, 6, 5, 4, 7, 9, 4, 1, 8, 9, 10, 8, 7, 2, 3, 6], 8), 14)",
			"Test.assertEquals(sumEveryNth([10, 9, 7, 8, 5, 7, 9, 5, 3, 3, 1], 7), 9)",
			"Test.assertEquals(sumEveryNth([7, 2, 9, 6, 1, 8, 8, 10, 2, 5, 5, 7, 3, 10, 1], 2), 48)",
			"Test.assertEquals(sumEveryNth([3, 10, 3, 8, 10, 9, 1, 3, 7, 2], 2), 32)",
			"Test.assertEquals(sumEveryNth([6, 5, 7, 9, 4, 2, 2, 9, 8, 10, 5, 2, 8], 7), 2)",
			"Test.assertEquals(sumEveryNth([9, 3, 7, 10, 3, 10, 2, 8, 8, 7, 1], 11), 1)",
			"Test.assertEquals(sumEveryNth([4, 6, 10, 8, 4, 7, 10, 10, 4, 4, 9, 2, 1, 9, 9, 8, 6, 6, 10], 7), 19)",
			"Test.assertEquals(sumEveryNth([3, 3, 2, 6, 4, 4, 10, 2, 10, 5, 5, 8, 6], 1), 68)",
			"Test.assertEquals(sumEveryNth([10, 1, 10, 8, 3, 2, 10, 8, 2, 3, 8, 7, 6, 4, 8], 6), 9)",
			"Test.assertEquals(sumEveryNth([5, 1, 4, 7, 3, 9, 4, 5, 9, 6, 1, 6, 9, 6, 7, 6, 8, 1], 14), 6)",
			"Test.assertEquals(sumEveryNth([2, 1, 7, 4, 2, 6, 2, 4, 6, 1, 2, 2, 10, 10], 2), 28)"
		],
		"starterFn": [
			"1\nfunction sumEveryNth(numbers, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jzPuM8s7HcGni7Ewi"
	},
	{
		"title": "Product of All Other Numbers",
		"description": "<p><span>You have an array of integers, and for each index you want to find the product of every integer </span><strong><span>except the integer at that index</span></strong><span>.</span></p><p><span>Create a function that takes an array of integers and returns an array of the products.</span></p><h3><span>Examples</span></h3><pre><code>getProducts([1, 7, 3, 4]) ➞ [84, 12, 28, 21]\n\ngetProducts([1, 7, 3, 4]) ➞ [84, 12, 28, 21]\n\ngetProducts([1, 2, 3, 0, 5]) ➞ [0, 0, 0, 30, 0]</code></pre><h3><span>Notes</span></h3><p><span>You can't use division, otherwise you might end up dividing by 0 and the universe would end.</span></p>",
		"publishedBy": "faqofff",
		"publishedByUrl": "https://edabit.com/user/NnJhaSQJGXmv9Tqse",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(getProducts([1, 2, 6, 5, 9]), [540, 270, 90, 108, 60])",
			"Test.assertSimilar(getProducts([1, 7, 3, 4]), [84, 12, 28, 21])",
			"Test.assertSimilar(getProducts([1, 2, 3, 0, 5]), [0, 0, 0, 30, 0])"
		],
		"starterFn": [
			"1\nfunction getProducts(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/r9yzk5388xhrsrLv2"
	},
	{
		"title": "Birthday Cake",
		"description": "<p><span>Create a function which </span><strong><span>constructs</span></strong><span> a </span><em><span>rectangular</span></em><span> birthday cake, based on someone's </span><code>name</code><span> and </span><code>age</code><span>! Build it out of </span><em><span>strings</span></em><span> in an array and makes sure to surround the birthday message with the character that fits the rule:</span></p><ul><li><span>If the age is an </span><strong><span>even number</span></strong><span>, surround the message with \"#\".</span></li><li><span>If the age is an </span><strong><span>odd number</span></strong><span>, surround the message with \"*\".</span></li></ul><p><span>Other important rules:</span></p><ul><li><span>The message should be in the format: </span><strong><span>{age} Happy Birthday {name}! {age}</span></strong></li><li><strong><span>Leave a space</span></strong><span> between the edge of the cake and the age numbers.</span></li></ul><h3><span>Examples</span></h3><pre><code>getBirthdayCake(\"Jack\", 10) ➞ [\n  \"##############################\",\n  \"# 10 Happy Birthday Jack! 10 #\",\n  \"##############################\"\n]\n\ngetBirthdayCake(\"Russell\", 19) ➞ [\n  \"*********************************\",\n  \"* 19 Happy Birthday Russell! 19 *\",\n  \"*********************************\"\n]\n\ngetBirthdayCake(\"Isabelle\", 2) ➞ [\n  \"################################\",\n  \"# 2 Happy Birthday Isabelle! 2 #\",\n  \"################################\"\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting"
		],
		"tests": [
			"Test.assertSimilar(getBirthdayCake(\"Jack\", 10), [",
			"  \"##############################\",",
			"  \"# 10 Happy Birthday Jack! 10 #\",",
			"  \"##############################\"",
			"])",
			"​",
			"Test.assertSimilar(getBirthdayCake(\"Russell\", 19), [",
			"  \"*********************************\",",
			"  \"* 19 Happy Birthday Russell! 19 *\",",
			"  \"*********************************\"",
			"])",
			"​",
			"Test.assertSimilar(getBirthdayCake(\"Isabelle\", 2), [",
			"  \"################################\",",
			"  \"# 2 Happy Birthday Isabelle! 2 #\",",
			"  \"################################\"",
			"])",
			"​",
			"// Time for a right mess",
			"Test.assertSimilar(getBirthdayCake(\"Princess\", 40), [\"##################################\", \"# 40 Happy Birthday Princess! 40 #\", \"##################################\"])",
			"Test.assertSimilar(getBirthdayCake(\"Maxwell\", 85), [\"*********************************\", \"* 85 Happy Birthday Maxwell! 85 *\", \"*********************************\"])",
			"Test.assertSimilar(getBirthdayCake(\"Zenobia\", 63), [\"*********************************\", \"* 63 Happy Birthday Zenobia! 63 *\", \"*********************************\"])",
			"Test.assertSimilar(getBirthdayCake(\"Adrian\", 91), [\"********************************\", \"* 91 Happy Birthday Adrian! 91 *\", \"********************************\"])",
			"Test.assertSimilar(getBirthdayCake(\"Gayle\", 28), [\"###############################\", \"# 28 Happy Birthday Gayle! 28 #\", \"###############################\"])",
			"Test.assertSimilar(getBirthdayCake(\"Jo\", 69), [\"****************************\", \"* 69 Happy Birthday Jo! 69 *\", \"****************************\"])",
			"Test.assertSimilar(getBirthdayCake(\"Val\", 80), [\"#############################\", \"# 80 Happy Birthday Val! 80 #\", \"#############################\"])"
		],
		"starterFn": [
			"1\nfunction getBirthdayCake(name, age) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BBFPC6HhZ2ZFv3fpK"
	},
	{
		"title": "The Fibonacci Number",
		"description": "<p><span>Create a function that, given a number, returns the corresponding Fibonacci number.</span></p><h3><span>Examples</span></h3><pre><code>fibonacci(3) ➞ 3\n\nfibonacci(7) ➞ 21\n\nfibonacci(12) ➞ 233</code></pre><h3><span>Notes</span></h3><p><span>The first number in the sequence starts at 1 (not 0).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"loops",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(fibonacci(3), 3)",
			"Test.assertEquals(fibonacci(7), 21)",
			"Test.assertEquals(fibonacci(12), 233)",
			"Test.assertEquals(fibonacci(0), 1)",
			"Test.assertEquals(fibonacci(1), 1)"
		],
		"starterFn": [
			"1\nfunction fibonacci(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TpqLBh6weuqFs9qKy"
	},
	{
		"title": "Is it a Valid Floating Numeric Character?",
		"description": "<p><span>Create a regular expression  to check whether the given string is a valid floating numeric character or not.</span></p><h3><span>Examples</span></h3><pre><code>isFloatingCharacter(\"12.12\") ➞ true\n\nisFloatingCharacter(\"12.\") ➞ false\n\nisFloatingCharacter(\".1\") ➞ true\n\nisFloatingCharacter(\"-.1\") ➞ true\n\nisFloatingCharacter(\"abc\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs are strings.</span></li><li><span>Think about </span><code>RegExp.prototype.test()</code><span>.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"logic",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isFloatingCharacter(\"-12.12\"), true)",
			"Test.assertEquals(isFloatingCharacter(\"-.12\"), true)",
			"Test.assertEquals(isFloatingCharacter(\"0.12\"), true)",
			"Test.assertEquals(isFloatingCharacter(\".122332\"), true)",
			"Test.assertEquals(isFloatingCharacter(\"av0.12\"), false)",
			"Test.assertEquals(isFloatingCharacter(\"-.\"), false)",
			"Test.assertEquals(isFloatingCharacter(\"+\"), false)",
			"Test.assertEquals(isFloatingCharacter(\"12\"), false)"
		],
		"starterFn": [
			"1\nfunction isFloatingCharacter(num){",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yjJbyjGkXxTrhe9as"
	},
	{
		"title": "Accumulating Array",
		"description": "<p><span>Create a function that takes in an array and returns an array of the accumulating sum. </span></p><h3><span>Examples</span></h3><pre><code>accumulatingArray([1, 2, 3, 4]) ➞ [1, 3, 6, 10]\n// [1, 3, 6, 10] can be written as  [1, 1 + 2, 1 + 2 + 3, 1 + 2 + 3 + 4]\n\naccumulatingArray([1, 5, 7]) ➞ [1, 6, 13]\n\naccumulatingArray([1, 0, 1, 0, 1]) ➞ [1, 1, 2, 2, 3]\n\naccumulatingArray([]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>An empty array input should return an empty array </span><code>[]</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"closures",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(accumulatingArray([1, 1, 1, 1, 1]), [1, 2, 3, 4, 5])",
			"Test.assertSimilar(accumulatingArray([1, 5, 7]), [1, 6, 13])",
			"Test.assertSimilar(accumulatingArray([1, 0, 1, 0, 1]), [1, 1, 2, 2, 3])",
			"Test.assertSimilar(accumulatingArray([1, 2, 3, 0, 0, 1]), [1, 3, 6, 6, 6, 7])",
			"Test.assertSimilar(accumulatingArray([]), [])"
		],
		"starterFn": [
			"1\nfunction accumulatingArray(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FkH4K9TpFG98t52Ex"
	},
	{
		"title": "A Pirate's Tale",
		"description": "<p><span>Captain Hook and his crew are currently resting at Origin Shore. They are about to embark on their next adventure to an undisclosed location </span><code>(x, y)</code><span> to find treasure.</span></p><p><span>Captain Hook's ship can only move exactly north, south, east or west. It takes exactly 1 day for the ship to travel 1 unit in one of the four cardinal directions.</span></p><p><span>After every 5 days, the crew will take one day of rest.</span></p><p><span>Given the location of the treasure, find out how long it takes for Captain Hook and his crew to find the treasure. The ship is currently at coordinate  </span><code>(0, 0)</code><span>.</span></p><pre><code>numberOfDays([3, 5]) =&gt; 9 days\n// Since: 3 days east + 2 days north (5 days passed) + 1 day of rest + 3 days north\n\nnumberOfDays([-4, -1]) =&gt; 5 days\n// Since 4 days west + 1 day south</code></pre><h3><span>Examples</span></h3><pre><code>numberOfDays([10, 10]) ➞ 23\n\nnumberOfDays([3, 3]) ➞ 7\n\nnumberOfDays([-10, -9]) ➞ 22\n\nnumberOfDays([-1, -2]) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(numberOfDays([10, 10]), 23);",
			"Test.assertEquals(numberOfDays([3, 3]), 7);",
			"Test.assertEquals(numberOfDays([-10, -9]), 22);",
			"Test.assertEquals(numberOfDays([-1, -4]), 5);",
			"Test.assertEquals(numberOfDays([-10, -2]), 14);",
			"Test.assertEquals(numberOfDays([3, 30]), 39);",
			"Test.assertEquals(numberOfDays([40, 1]), 49);",
			"Test.assertEquals(numberOfDays([3, 5]), 9);"
		],
		"starterFn": [
			"1\nfunction numberOfDays(coordinate) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/r5iWRGMmLpyreLKEf"
	},
	{
		"title": "RegEx: Boundary Assertions IV",
		"description": "<p><span>You've just webscraped a web page and stored it in a string.  In the string there is a bullet list of states that voted for President Trump's impeachment:</span></p><pre><code>const str = `\n* Texas = no\n* California = yes\n* Florida = yes\n* Michigan = no\n`</code></pre><p><span>Add a </span><strong><span>positive lookahead</span></strong><span>  assertion so a regex match would output the states that voted </span><strong><span>yes</span></strong></p><h3><span>Notes</span></h3><ul><li><span>You </span><strong><span>must</span></strong><span> use a </span><strong><span>positive lookahead</span></strong><span> assertion (check the </span><strong><span>Resources</span></strong><span> tab for info).</span></li><li><span>This is fake data and used only for educational purposes.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"regex",
			"strings"
		],
		"tests": [
			"const validate = (REGEXP) => {",
			"   if(!/\\(\\?\\=/.test(String(REGEXP))) return () => \"need lookahead assertion\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"} ",
			"const str = `",
			"* Texas = no ",
			"* California = yes  ",
			"* Florida = yes ",
			"* Michigan = no ",
			"`",
			"​",
			"const testStr = validate(REGEXP) ",
			"​",
			"Test.assertNotEquals(testStr(str), \"need lookahead assertion\", \"You need to use a lookahead in your expressions.\")",
			"Test.assertSimilar(testStr(str), ['California', 'Florida'])"
		],
		"starterFn": [
			"1\nconst REGEXP = /(\\w+)/g"
		],
		"url": "https://edabit.com/challenge/rRdMJ5nasKk9dogm5"
	},
	{
		"title": "Playing RisiKo!",
		"description": "<p><span>In a game of </span><strong><span>RisiKo!</span></strong><span> (the Italian version of the popular board game </span><strong><span>Risk!</span></strong><span>), the players throw six-sided dice to conquer territories around a World map.</span></p><p><span>When two players contend a territory there is a battle, and they throw from 1 up to 3 dice, with each die being an army sent to fight. To establish who loses armies after the battle, the dice are compared starting from the highest value, and proceeding with the comparisons in </span><strong><span>descending order</span></strong><span> (eliminating the dice in excess if the amount of thrown dice among the two players is different).</span></p><p><span>When the rolls are compared, for each comparison the die of the attacking player must have a greater value than the defender's die to win the fight. In the case of a tie, the defender wins the single fight.</span></p><p><span>Given two arrays </span><code>att</code><span> (rolls of the attacker) and </span><code>def</code><span> (rolls of the defender), implement a function that returns the </span><strong><span>armies lost by the defender</span></strong><span> as an integer.</span></p><h3><span>Examples</span></h3><pre><code>risiko([3, 6, 4], [2, 5, 3]) ➞ 3\n// Comparison 1:\n// ATT(6) vs. DEF(5): DEF loses an army\n// Comparison 2:\n// ATT(4) vs. DEF(3): DEF loses an army\n// Comparison 3:\n// ATT(3) vs. DEF(2): DEF loses an army\n\nrisiko([3, 6], [6, 4, 4]) ➞ 0\n// Comparison 1:\n// ATT(6) vs. DEF(6): ATT loses an army\n// Comparison 2:\n// ATT(3) vs. DEF(4): ATT loses an army\n\nrisiko([3, 1], [1]) ➞ 1\n// Comparison 1:\n// ATT(3) vs. DEF(1): DEF loses an army</code></pre><h3><span>Notes</span></h3><ul><li><span>When two compared dice have the same value, the player who defends wins the fight (see example #2).</span></li><li><span>When the number of rolls is different among the two players, the comparisons to do are equals to the lowest amount of rolled dice (see examples #2 and #3).</span></li><li><span>You can expect only valid inputs: each array will have at least a die, and no more than three dice, with values in the range from 1 to 6.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"games",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(risiko([3, 6, 4], [2, 5, 3]), 3, \"Example #1\")",
			"Test.assertEquals(risiko([3, 6], [6, 4, 4]), 0, \"Example #2\")",
			"Test.assertEquals(risiko([3, 1], [1]), 1, \"Example #3\")",
			"Test.assertEquals(risiko([4, 4, 3], [3, 2]), 2)",
			"Test.assertEquals(risiko([5], [3, 1, 4]), 1)",
			"Test.assertEquals(risiko([3, 5], [3, 5]), 0)",
			"Test.assertEquals(risiko([3, 6, 6], [6]), 0)",
			"Test.assertEquals(risiko([5, 4], [3, 4, 3]), 2)",
			"Test.assertEquals(risiko([3], [2, 1]), 1)",
			"Test.assertEquals(risiko([3, 3, 3], [2, 1, 2]), 3)"
		],
		"starterFn": [
			"1\nfunction risiko(att, def) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DzZfKGHEF8jWMNYXq"
	},
	{
		"title": "Rearrange the Number",
		"description": "<p><span>Given a number, return the </span><strong><span>difference</span></strong><span> between the maximum and minimum numbers that can be formed when the digits are rearranged.</span></p><h3><span>Examples</span></h3><pre><code>rearrangedDifference(972882) ➞ 760833\n// 988722 - 227889 = 760833\n\nrearrangedDifference(3320707) ➞ 7709823\n// 7733200 - 23377 = 7709823\n\nrearrangedDifference(90010) ➞ 90981\n// 91000 - 19 = 90981</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(rearrangedDifference(9092564), 9719721)",
			"Test.assertEquals(rearrangedDifference(1308821), 8719722)",
			"Test.assertEquals(rearrangedDifference(8386568), 5319765)",
			"Test.assertEquals(rearrangedDifference(7794084), 9429651)",
			"Test.assertEquals(rearrangedDifference(6366093), 9329661)",
			"Test.assertEquals(rearrangedDifference(7863060), 8729622)",
			"Test.assertEquals(rearrangedDifference(3368327), 6429654)",
			"Test.assertEquals(rearrangedDifference(7218787), 7599933)",
			"Test.assertEquals(rearrangedDifference(7723188), 7639533)",
			"Test.assertEquals(rearrangedDifference(8816317), 7739523)",
			"Test.assertEquals(rearrangedDifference(8824349), 7539543)",
			"Test.assertEquals(rearrangedDifference(3320707), 7709823)",
			"Test.assertEquals(rearrangedDifference(1695488), 8429652)",
			"Test.assertEquals(rearrangedDifference(2120034), 4309866)",
			"Test.assertEquals(rearrangedDifference(5300586), 8619732)",
			"Test.assertEquals(rearrangedDifference(3538814), 7519743)",
			"Test.assertEquals(rearrangedDifference(1336939), 8629632)",
			"Test.assertEquals(rearrangedDifference(6290200), 9619731)",
			"Test.assertEquals(rearrangedDifference(5268866), 6299964)",
			"Test.assertEquals(rearrangedDifference(5155458), 7099983)"
		],
		"starterFn": [
			"1\nfunction rearrangedDifference(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gGbtZXnfj79GaPFc8"
	},
	{
		"title": "Partially Hidden String",
		"description": "<p><span>Create a function that takes a phrase and transforms each word using the following rules:</span></p><ol><li><span>Keep first and last character the same.</span></li><li><span>Transform middle characters into a dash </span><code>-</code><span>.</span></li></ol><h3><span>Examples</span></h3><pre><code>partiallyHide(\"skies were pretty\") ➞ \"s---s w--e p----y\"\n\npartiallyHide(\"red is not my color\") ➞ \"r-d is n-t my c---r\"\n\npartiallyHide(\"She rolled her eyes\") ➞ \"S-e r----d h-r e--s\"\n\npartiallyHide(\"Harry went to fight the basilisk\") ➞ \"H---y w--t to f---t t-e b------k\"</code></pre><h3><span>Notes</span></h3><p><span>Words with two or fewer letters should not be hidden at all.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(partiallyHide('Harry went to fight the basilisk'), 'H---y w--t to f---t t-e b------k')",
			"Test.assertEquals(partiallyHide('She rolled her eyes'), 'S-e r----d h-r e--s')",
			"Test.assertEquals(partiallyHide('skies were so beautiful'), 's---s w--e so b-------l')",
			"Test.assertEquals(partiallyHide('red is not my color'), 'r-d is n-t my c---r')",
			"Test.assertEquals(partiallyHide('so many options'), 'so m--y o-----s')",
			"Test.assertEquals(partiallyHide('the orient express'), 't-e o----t e-----s')",
			"Test.assertEquals(partiallyHide('went to the post office'), 'w--t to t-e p--t o----e')"
		],
		"starterFn": [
			"1\nfunction partiallyHide(phrase) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/odpZ7xKpEpMKgasXb"
	},
	{
		"title": "Pages in a Book",
		"description": "<p><span>Suppose that you add all of the page numbers in a book.  If the total is 21, the book would have only 6 pages because 1 + 2 + 3 + 4 + 5 + 6 = 21.  If I had said the total is 25,\nthat would be impossible because the next number in the series is 28 (21 + 7).</span></p><p><span>Create a function that has as it's argument the sum of all the page numbers and returns\n</span><code>true</code><span> if it is a valid number and </span><code>false</code><span> if it is not.</span></p><p><span>Can you devise a solution that is more efficient than simply adding consecutive integers\nas I did above?</span></p><h3><span>Examples</span></h3><pre><code>pagesInBook(5) ➞ false\n\npagesInBook(4005) ➞ true\n\npagesInBook(9453) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(pagesInBook(5), false)",
			"Test.assertEquals(pagesInBook(4005), true)",
			"Test.assertEquals(pagesInBook(9453), true)",
			"Test.assertEquals(pagesInBook(9474), false)",
			"Test.assertEquals(pagesInBook(125250), true)",
			"Test.assertEquals(pagesInBook(920046), true)"
		],
		"starterFn": [
			"1\nfunction pagesInBook(total) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zhKrkGqt6pbs7xEEw"
	},
	{
		"title": "Encode Morse",
		"description": "<p><span>Create a function that takes a string as an argument and returns a non-encoded, encrypted string.</span></p><h3><span>Examples</span></h3><pre><code>encodeMorse(\"EDABBIT CHALLENGE\") ➞ \". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\"\n\nencodeMorse(\"HELP ME !\") ➞ \".... . .-.. .--.   -- .   -.-.--\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Input value can be lower or upper case.</span></li><li><span>Input string can have digits.</span></li><li><span>Input string can have some special characters (e.g. comma, colon, apostrophe, period, question mark, exclamation mark).</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops"
		],
		"tests": [
			"Test.assertEquals(encodeMorse(\"EDABBIT CHALLENGE\"),\". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\");",
			"Test.assertEquals(encodeMorse(\"HELP ME !\"),\".... . .-.. .--.   -- .   -.-.--\");",
			"Test.assertEquals(encodeMorse(\"CHALLENGE\"),\"-.-. .... .- .-.. .-.. . -. --. .\");",
			"Test.assertEquals(encodeMorse( \"1 APPLE AND 5 CHERRY, 7 SANDWICHES, 2 TABLES, 9 INVITED GUYS ! THAT'S SO COOL...\"),\".----   .- .--. .--. .-.. .   .- -. -..   .....   -.-. .... . .-. .-. -.-- --..--   --...   ... .- -. -.. .-- .. -.-. .... . ... --..--   ..---   - .- -... .-.. . ... --..--   ----.   .. -. ...- .. - . -..   --. ..- -.-- ...   -.-.--   - .... .- - .----. ...   ... ---   -.-. --- --- .-.. .-.-.- .-.-.- .-.-.-\");",
			"Test.assertEquals(encodeMorse(\"did you got my mail ?\"),\"-.. .. -..   -.-- --- ..-   --. --- -   -- -.--   -- .- .. .-..   ..--..\");",
			"Test.assertEquals(encodeMorse(\"TWO THInGS TO KNOW : i FORGeT THeM :C\"),\"- .-- ---   - .... .. -. --. ...   - ---   -.- -. --- .--   ---...   ..   ..-. --- .-. --. . -   - .... . --   ---... -.-.\");"
		],
		"starterFn": [
			"1\nfunction encodeMorse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qktP97jpm5arY2yEA"
	},
	{
		"title": "Count Palindrome Numbers in a Range",
		"description": "<p><span>Create a function that returns the number of </span><strong><span>palindrome numbers</span></strong><span> in a specified range (</span><strong><span>inclusive</span></strong><span>).</span></p><p><span>For example, between </span><strong><span>8</span></strong><span> and </span><strong><span>34</span></strong><span>, there are </span><strong><span>5</span></strong><span> palindromes: </span><strong><span>8</span></strong><span>, </span><strong><span>9</span></strong><span>, </span><strong><span>11</span></strong><span>, </span><strong><span>22</span></strong><span> and </span><strong><span>33</span></strong><span>. Between </span><strong><span>1550</span></strong><span> and </span><strong><span>1552</span></strong><span> there is exactly one palindrome: </span><strong><span>1551</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>countPalindromes(1, 10) ➞ 9\n\ncountPalindromes(555, 556) ➞ 1\n\ncountPalindromes(878, 898) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>Single-digit numbers are trivially palindrome numbers.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countPalindromes(1, 10), 9)",
			"Test.assertEquals(countPalindromes(555, 556), 1)",
			"Test.assertEquals(countPalindromes(878, 898), 3)",
			"Test.assertEquals(countPalindromes(8, 34), 5)",
			"Test.assertEquals(countPalindromes(1550, 1556), 1)"
		],
		"starterFn": [
			"1\nfunction countPalindromes(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BRoBDeEc2be7wm8BD"
	},
	{
		"title": "Palindromic Dates",
		"description": "<p><span>The </span><em><span>2nd of February 2020</span></em><span> is a palindromic date in </span><em><span>both</span></em><span> </span><strong><span>dd/mm/yyyy</span></strong><span> and </span><strong><span>mm/dd/yyyy</span></strong><span> format </span><em><span>(02/02/2020)</span></em><span>. Given a date in </span><strong><span>dd/mm/yyyy</span></strong><span> format, return </span><code>true</code><span> if the date is </span><strong><span>palindromic</span></strong><span> in </span><strong><span>both date formats</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>palindromicDate(\"02/02/2020\") ➞ true\n\npalindromicDate(\"11/12/2019\") ➞ false\n\npalindromicDate(\"11/02/2011\") ➞ false\n// Although 11/02/2011 is palindromic in dd/mm/yyyy format,\n// it isn't in mm/dd/yyyy format (02/11/2011)</code></pre><h3><span>Notes</span></h3><p><span>All dates will be valid in both date formats.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(palindromicDate(\"02/02/2020\"), true)",
			"Test.assertEquals(palindromicDate(\"11/12/2019\"), false)",
			"Test.assertEquals(palindromicDate(\"11/02/2011\"), false)",
			"Test.assertEquals(palindromicDate(\"06/10/1469\"), false)",
			"Test.assertEquals(palindromicDate(\"06/05/3133\"), false)",
			"Test.assertEquals(palindromicDate(\"12/12/2121\"), true)",
			"Test.assertEquals(palindromicDate(\"09/09/9090\"), true)",
			"Test.assertEquals(palindromicDate(\"11/04/2203\"), false)",
			"Test.assertEquals(palindromicDate(\"07/07/7070\"), true)",
			"Test.assertEquals(palindromicDate(\"06/11/2923\"), false)",
			"Test.assertEquals(palindromicDate(\"03/08/8030\"), false)",
			"Test.assertEquals(palindromicDate(\"01/01/1010\"), true)",
			"Test.assertEquals(palindromicDate(\"03/11/3369\"), false)",
			"Test.assertEquals(palindromicDate(\"11/03/2775\"), false)",
			"Test.assertEquals(palindromicDate(\"03/03/1822\"), false)"
		],
		"starterFn": [
			"1\nfunction palindromicDate(date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TmoJMiKP7iuckJHbQ"
	},
	{
		"title": "Apocalyptic Numbers",
		"description": "<p><span>In this challenge, you have to establish if a number is apocalyptic. A positive integer </span><code>n</code><span> greater than 0 is apocalyptic when </span><strong><span>2 elevated to </span><code>n</code></strong><span> contains one or more occurrences of </span><strong><span>666</span></strong><span> into it.</span></p><p><span>Given an integer n, implement a function that returns:</span></p><ul><li><code>\"Safe\"</code><span> if </span><code>n</code><span> is not apocalyptic.</span></li><li><code>\"Single\"</code><span> if into </span><code>2^n</code><span> there's a single occurence of 666.</span></li><li><code>\"Double\"</code><span> if into </span><code>2^n</code><span> there are two occurences of 666.</span></li><li><code>\"Triple\"</code><span> if into </span><code>2^n</code><span> there are three occurences of 666.</span></li></ul><h3><span>Examples</span></h3><pre><code>isApocalyptic(66) ➞ \"Safe\"\n// 2^66 = 73786976294838206464\n\nisApocalyptic(157) ➞ \"Single\"\n// 2^157 =\n// 182687704|666|362864775460604089535377456991567872\n\nisApocalyptic(220) ➞ \"Double\"\n// 2^220 =\n// 168499|666|66969149871|666|8844293872691710232152640 ...\n\nisApocalyptic(931) ➞ \"Triple\"\n// 2^931 =\n// 181520618710|666|8777829|666|135436890332191479738353753001777065257954029122510259245050254290156440857653562895251700406555730694879815558725330603736697259064676478076718090|666| ...</code></pre><h3><span>Notes</span></h3><ul><li><span>Any given </span><code>n</code><span> will be a positive integer in the range of 1 to 1000.</span></li><li><span>Occurrences have to be unique, you can't use digits that have already been matched again (see example #3, there are five adjacent 6, but only a possible match).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isApocalyptic(66), \"Safe\", \"Example #1\")",
			"Test.assertEquals(isApocalyptic(157), \"Single\", \"Example #2\")",
			"Test.assertEquals(isApocalyptic(220), \"Double\", \"Example #3\")",
			"Test.assertEquals(isApocalyptic(931), \"Triple\", \"Example #4\")",
			"Test.assertEquals(isApocalyptic(166), \"Safe\")",
			"Test.assertEquals(isApocalyptic(529), \"Double\")",
			"Test.assertEquals(isApocalyptic(443), \"Single\")",
			"Test.assertEquals(isApocalyptic(166), \"Safe\")",
			"Test.assertEquals(isApocalyptic(703), \"Safe\")",
			"Test.assertEquals(isApocalyptic(528), \"Single\")",
			"Test.assertEquals(isApocalyptic(648), \"Double\")"
		],
		"starterFn": [
			"1\nfunction isApocalyptic(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nY4MYku8Sn9kDs8m8"
	},
	{
		"title": "Cluster Vowels, Single Out Consonants",
		"description": "<p><span>Write a function that takes in a word and splits the consonants one by one, but keeps the vowels in a cluster.</span></p><h3><span>Examples</span></h3><pre><code>split(\"beautifully\") ➞ [\"b\", \"eau\", \"t\", \"i\", \"f\", \"u\", \"l\", \"l\", \"y\"]\n\nsplit(\"spoonful\") ➞ [\"s\", \"p\", \"oo\", \"n\", \"f\", \"u\", \"l\"]\n\nsplit(\"swimming\") ➞ [\"s\", \"w\", \"i\", \"m\", \"m\", \"i\", \"n\", \"g\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Vowels are: </span><code>a, e, i, o, u</code><span>.</span></li><li><span>All letters will be in lower case.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(split(\"beautifully\"), [\"b\", \"eau\", \"t\", \"i\", \"f\", \"u\", \"l\", \"l\", \"y\"])",
			"Test.assertSimilar(split(\"spoonful\"), [\"s\", \"p\", \"oo\", \"n\", \"f\", \"u\", \"l\"])",
			"Test.assertSimilar(split(\"swimming\"), [\"s\", \"w\", \"i\", \"m\", \"m\", \"i\", \"n\", \"g\"])",
			"Test.assertSimilar(split(\"courage\"), [\"c\", \"ou\", \"r\", \"a\", \"g\", \"e\"])",
			"Test.assertSimilar(split(\"cooing\"), [\"c\", \"ooi\", \"n\", \"g\"])"
		],
		"starterFn": [
			"1\nfunction split(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9MbruYbn8NWRzG2vC"
	},
	{
		"title": "Read The Abacus (Part 1: Russian Schoty)",
		"description": "<p><span>The Russian </span><em><span>schoty</span></em><span> is type of abacus (counting tool) that is used by sliding threaded beads along horizontal wires. An example schoty would have 7 wires, each holding 10 beads. Each bead, when moved to the </span><em><span>left</span></em><span>, would count as 1 unit. Starting from the bottom wire and moving up, the units increase by a factor of 10. If we use \"O\" for a bead and \"-\" to show the wire, we can represent the schoty as follows:</span></p><pre><code>---OOOOOOOOOO  millions\n---OOOOOOOOOO  hundred-thousands\n---OOOOOOOOOO  ten-thousands\n---OOOOOOOOOO  thousands\n---OOOOOOOOOO  hundreds\n---OOOOOOOOOO  tens \n---OOOOOOOOOO  ones</code></pre><p><span>To read the number, we count the beads on the left-hand side of each wire. In the example below, the number is </span><strong><span>501264</span></strong><span>:</span></p><pre><code>---OOOOOOOOOO  0\nOOOOO---OOOOO  5\n---OOOOOOOOOO  0\nO---OOOOOOOOO  1\nOO---OOOOOOOO  2\nOOOOOO---OOOO  6\nOOOO---OOOOOO  4</code></pre><p><span>Given an array of strings representing each wire in the schoty, return the </span><em><span>number</span></em><span> being displayed.</span></p><h3><span>Examples</span></h3><pre><code>schoty([\"---OOOOOOOOOO\",\n        \"---OOOOOOOOOO\",\n        \"---OOOOOOOOOO\",\n        \"OOO---OOOOOOO\",\n        \"O---OOOOOOOOO\",\n        \"OOOOOOOOO---O\",\n        \"OO---OOOOOOOO\"]) ➞ 3192\n\nschoty([\"OO---OOOOOOOO\",\n        \"O---OOOOOOOOO\",\n        \"OOOOO---OOOOO\",\n        \"---OOOOOOOOOO\",\n        \"---OOOOOOOOOO\",\n        \"---OOOOOOOOOO\",\n        \"---OOOOOOOOOO\"]) ➞ 2150000</code></pre><h3><span>Notes</span></h3><p><span>For more info on how to use a schoty, please check the </span><strong><span>Resources</span></strong><span> tab. This challenge ignores the traditional 4-bead wires used for quarter-ruble and quarter-kopek calculations.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(schoty(['OOOOO---OOOOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'O---OOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOO---OO', 'OO---OOOOOOOO']), 5011082)",
			"Test.assertEquals(schoty(['OOOOOO---OOOO', 'OOOOOO---OOOO', 'OOOO---OOOOOO', 'OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOOOOO---OOO', 'OOOOOOO---OOO']), 6647177)",
			"Test.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', 'O---OOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOOO---O']), 2109)",
			"Test.assertEquals(schoty(['O---OOOOOOOOO', 'OOO---OOOOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'OOOOOOOO---OO', 'OO---OOOOOOOO', 'OOOOOOO---OOO']), 1370827)",
			"Test.assertEquals(schoty(['---OOOOOOOOOO', 'OOOOOOOOO---O', 'OOO---OOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOOOO---OOOOO']), 930265)",
			"Test.assertEquals(schoty(['---OOOOOOOOOO', 'OOOOOO---OOOO', 'OOOOOOO---OOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOO---OO']), 677008)",
			"Test.assertEquals(schoty(['OOOOOOOOO---O', 'OOOOOOO---OOO', 'OOOOO---OOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'OOO---OOOOOOO']), 9757013)",
			"Test.assertEquals(schoty(['OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOO---OOOOOO', 'O---OOOOOOOOO', 'OO---OOOOOOOO', 'O---OOOOOOOOO', 'OOOOOOO---OOO']), 7141217)",
			"Test.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO', 'OOOOOOO---OOO', 'O---OOOOOOOOO', 'OOOOOOOO---OO', 'OOO---OOOOOOO']), 47183)",
			"Test.assertEquals(schoty(['OOOOOO---OOOO', '---OOOOOOOOOO', '---OOOOOOOOOO', 'O---OOOOOOOOO', 'OOOOOOOOO---O', 'OOOOO---OOOOO', '---OOOOOOOOOO']), 6001950)",
			"Test.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOOOOO---O', 'OOOOOOOO---OO', 'OOOOOOOOO---O', 'OO---OOOOOOOO', 'OOOOOOOO---OO']), 98928)",
			"Test.assertEquals(schoty(['OOOOO---OOOOO', 'OOOOOOOO---OO', 'OOOOOOOOO---O', 'OOO---OOOOOOO', 'O---OOOOOOOOO', 'OOOOOOOOO---O', 'OOOOOO---OOOO']), 5893196)",
			"Test.assertEquals(schoty(['OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOOOOOOOO---O', 'OOOOOOO---OOO', 'OOOOOOOO---OO', 'OOOOO---OOOOO', 'OOOOOOOO---OO']), 2697858)",
			"Test.assertEquals(schoty(['---OOOOOOOOOO', '---OOOOOOOOOO', 'OOOOOO---OOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO', 'O---OOOOOOOOO', 'OOOO---OOOOOO']), 60414)",
			"Test.assertEquals(schoty(['OO---OOOOOOOO', 'OOOOOO---OOOO', 'OOO---OOOOOOO', 'OOO---OOOOOOO', 'OOO---OOOOOOO', 'OO---OOOOOOOO', '---OOOOOOOOOO']), 2633320)",
			"Test.assertEquals(schoty(['OOOOOOOOO---O', '---OOOOOOOOOO', 'OOOOO---OOOOO', 'O---OOOOOOOOO', 'OOOOOOOO---OO', '---OOOOOOOOOO', 'OOOOOOOOO---O']), 9051809)",
			"Test.assertEquals(schoty(['OO---OOOOOOOO', 'OO---OOOOOOOO', 'OOOOOOO---OOO', '---OOOOOOOOOO', 'OOOOOOO---OOO', 'OOOO---OOOOOO', 'OOOOOOOOO---O']), 2270749)",
			"Test.assertEquals(schoty(['OOOOOOO---OOO', 'OOOOOOOOO---O', '---OOOOOOOOOO', '---OOOOOOOOOO', 'OO---OOOOOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO']), 7900204)",
			"Test.assertEquals(schoty(['OOOOOO---OOOO', 'OOOO---OOOOOO', 'OOOOOO---OOOO', 'OOOOOOOO---OO', '---OOOOOOOOOO', 'OOOOOOO---OOO', 'OOOOOO---OOOO']), 6468076)",
			"Test.assertEquals(schoty(['OOOOOOOO---OO', 'OOOOOOOOO---O', 'OOOO---OOOOOO', 'OOOOOO---OOOO', 'OOOOO---OOOOO', '---OOOOOOOOOO', 'OOOO---OOOOOO']), 8946504)"
		],
		"starterFn": [
			"1\nfunction schoty(frame) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5DfJYH9bXn4fG4Zui"
	},
	{
		"title": "Find the Odd Integer",
		"description": "<p><span>Create a function that takes an array and finds the integer which appears an odd number of times.</span></p><h3><span>Examples</span></h3><pre><code>findOdd([1, 1, 2, -2, 5, 2, 4, 4, -1, -2, 5]) ➞ -1\n\nfindOdd([20, 1, 1, 2, 2, 3, 3, 5, 5, 4, 20, 4, 5]) ➞ 5\n\nfindOdd([10]) ➞ 10</code></pre><h3><span>Notes</span></h3><p><span>There will always only be one integer that appears an odd number of times.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bit_operations",
			"loops",
			"math"
		],
		"tests": [
			"function doTest(a, n) {",
			"  console.log(\"==================\")",
			"  console.log(\"A = \", a);",
			"  console.log(\"n = \", n);",
			"  Test.assertEquals(findOdd(a), n);",
			"}",
			"​",
			"Test.describe('TEST CASES', function() {",
			"  doTest([20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5], 5);",
			"  doTest([1,1,2,-2,5,2,4,4,-1,-2,5], -1);",
			"  doTest([20,1,1,2,2,3,3,5,5,4,20,4,5], 5);",
			"  doTest([10], 10);",
			"  doTest([1,1,1,1,1,1,10,1,1,1,1], 10);",
			"  doTest([5,4,3,2,1,5,4,3,2,10,10], 1);",
			"});"
		],
		"starterFn": [
			"1\nfunction findOdd(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GaWzhCsGSHcWyGoZh"
	},
	{
		"title": "Words that Start with a Vowel",
		"description": "<p><span>Write a function that retrieves all words that begin with a vowel.</span></p><h3><span>Examples</span></h3><pre><code>retrieve(\"A simple life is a happy life for me.\") ➞ [\"a\", \"is\", \"a\"]\n\nretrieve(\"Exercising is a healthy way to burn off energy.\"\n➞ [\"exercising\", \"is\", \"a\", \"off\", \"energy\"]\n\nretrieve(\"The poor ostrich was ostracized.\")\n➞ [\"ostrich\", \"ostracized\"]\n\nretrieve(\"\")\n➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>Make all words lower case in the output.</span></li><li><span>Retrieve the words in the order they appear in the sentence.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(retrieve(\"A simple life is a happy life for me.\"), [\"a\", \"is\", \"a\"])",
			"Test.assertSimilar(retrieve(\"Exercising is a healthy way to burn off energy.\"), [\"exercising\", \"is\", \"a\", \"off\", \"energy\"])",
			"Test.assertSimilar(retrieve(\"The poor ostrich was ostracized.\"), [\"ostrich\", \"ostracized\"])",
			"Test.assertSimilar(retrieve(\"\"), [])"
		],
		"starterFn": [
			"1\nfunction retrieve(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KZwvC92KweCGiwiXF"
	},
	{
		"title": "Kaprekar Numbers",
		"description": "<p><span>A Kaprekar Number is a positive integer that, after being squared and split into two lexicographical parts, is equal to the sum of the two new numbers obtained:</span></p><ul><li><span>If the quantity of digits of the squared number is even, the left and right parts will have the same length.</span></li><li><span>If the quantity of digits of the squared number is odd, then the right part will be the longest half, with the left part being the smallest or equal to zero if the quantity of digits is equal to 1.</span></li></ul><p><span>Given a positive integer </span><code>n</code><span> implement a function that returns </span><code>true</code><span> if it's a Kaprekar number, and </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isKaprekar(3) ➞ false\n// n² = \"9\"\n// Left + Right = 0 + 9 = 9 ➞ 9 !== 3\n\nisKaprekar(5) ➞ false\n// n² = \"25\"\n// Left + Right = 2 + 5 = 7 ➞ 7 !== 5\n\nisKaprekar(297) ➞ true\n// n² = \"88209\"\n// Left + Right = 88 + 209 = 297 ➞ 297 === 297</code></pre><h3><span>Notes</span></h3><ul><li><span>Trivially, 0 and 1 are Kaprekar Numbers being the only two numbers equal to their square. Any number formed only by digits equal to </span><em><span>9</span></em><span> will always be a Kaprekar Number.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(isKaprekar(1), true)",
			"Test.assertEquals(isKaprekar(2), false)",
			"Test.assertEquals(isKaprekar(3), false, \"Example #1\")",
			"Test.assertEquals(isKaprekar(5), false, \"Example #2\")",
			"Test.assertEquals(isKaprekar(9), true)",
			"Test.assertEquals(isKaprekar(65), false)",
			"Test.assertEquals(isKaprekar(99), true)",
			"Test.assertEquals(isKaprekar(297), true, \"Example #3\")",
			"Test.assertEquals(isKaprekar(348), false)",
			"Test.assertEquals(isKaprekar(666), false)",
			"Test.assertEquals(isKaprekar(1441), false)",
			"Test.assertEquals(isKaprekar(77778), true)",
			"Test.assertEquals(isKaprekar(102102), false)",
			"Test.assertEquals(isKaprekar(533170), true)"
		],
		"starterFn": [
			"1\nfunction isKaprekar(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FzHZJtG5LQwjMGdZp"
	},
	{
		"title": "Rows of ASCII",
		"description": "<p><span>Given a very long string of ASCII characters, split the string up into equal sized groups of size </span><code>width</code><span>. To properly display the image, join up the groups with the newline character </span><code>\\n</code><span> and return the output string.</span></p><p><span>See the following examples for clarity!</span></p><h3><span>Examples</span></h3><pre><code>formatAscii(\"0123456789\", 2) ➞ \"01\\n23\\n45\\n67\\n89\"\n\nformatAscii(\"................................\", 8) ➞ \"........\\n........\\n........\\n........\"\n\nformatAscii(\"^^^^^^^^\", 1) ➞ \"^\\n^\\n^\\n^\\n^\\n^\\n^\\n^\"</code></pre><h3><span>Notes</span></h3><p><span>Enjoy the (somewhat oversized) art in the </span><strong><span>Tests</span></strong><span> tab.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"strings"
		],
		"tests": [
			"// Credit goes to Joshua Senoron for these amazing artworks ;)",
			"​",
			"Test.assertEquals(formatAscii('#@#@#@#@', 2), '#@\\n#@\\n#@\\n#@')",
			"Test.assertEquals(formatAscii('0123456789', 2), '01\\n23\\n45\\n67\\n89')",
			"Test.assertEquals(formatAscii('................................', 8), '........\\n........\\n........\\n........')",
			"Test.assertEquals(formatAscii('^^^^^^^^', 1), '^\\n^\\n^\\n^\\n^\\n^\\n^\\n^')",
			"​",
			"let art1 = \"                                                  \\n                 ....,,,,,,,,....                 \\n               .,,,,,,,,,,,,,,,,,,.               \\n             .,,........,,,,,,,,,,,,.             \\n            .,.....:*,.,,,,,:?:,,,,,,,            \\n           .,......S@*.,,,,,%@?,,,,,,,,           \\n          .,.......S@*.,,,,,%@?,,,,,,.,.          \\n          .........:*,.,,,,,:?:,,,,,,.,,          \\n          .............,,,,,,,,,,,,,,.,,          \\n          .,....,:......,,,,,,,.:;,,,.,.          \\n          .,,...,??:.........,:*%;,,,,,.          \\n           .,,,,,,+%S?+;;;;+?SS*,,,,,,.           \\n            ..,,,,,,;*%SSSS%?;,,,,,,..            \\n              ..,,,,,,,,,,,,,,::,,..              \\n                 ...,,,,,,,,,,,..                 \\n                     ........                     \"",
			"Test.assertEquals(formatAsciiart1)",
			"​",
			"/**                                                   ",
			"                 ....,,,,,,,,....                 ",
			"               .,,,,,,,,,,,,,,,,,,.               ",
			"             .,,........,,,,,,,,,,,,.             ",
			"            .,.....:*,.,,,,,:?:,,,,,,,            ",
			"           .,......S@*.,,,,,%@?,,,,,,,,           ",
			"          .,.......S@*.,,,,,%@?,,,,,,.,.          ",
			"          .........:*,.,,,,,:?:,,,,,,.,,          ",
			"          .............,,,,,,,,,,,,,,.,,          ",
			"          .,....,:......,,,,,,,.:;,,,.,.          ",
			"          .,,...,??:.........,:*%;,,,,,.          ",
			"           .,,,,,,+%S?+;;;;+?SS*,,,,,,.           ",
			"            ..,,,,,,;*%SSSS%?;,,,,,,..            ",
			"              ..,,,,,,,,,,,,,,::,,..              ",
			"                 ...,,,,,,,,,,,..                 ",
			"                     ........                      **/"
		],
		"starterFn": [
			"1\nfunction formatAscii(str, width) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2FrARSNih5YWMtLG5"
	},
	{
		"title": "Anti-Divisors of a Number",
		"description": "<p><span>The anti-divisors are numbers that </span><strong><span>do not</span></strong><span> divide a given number by the largest possible margin, and they can be found following a simple set of rules:</span></p><ul><li><span>Every number greater than 1 and lower than </span><code>n</code><span> is checked.</span></li><li><span>Every checked number </span><strong><span>must not be</span></strong><span> a divisor of </span><code>n</code><span>.</span></li><li><span>If the checked number is </span><strong><span>odd</span></strong><span> and it is a divisor of </span><code>n * 2 - 1</code><span> or </span><code>n * 2 + 1</code><span> it's an anti-divisor.</span></li><li><span>If the checked number is </span><strong><span>even</span></strong><span> and it is a divisor of </span><code>n * 2</code><span>, it's an anti-divisor.</span></li></ul><p><span>Given an integer </span><code>n</code><span>, implement a function that returns an array containing the anti-divisors of </span><code>n</code><span> sorted in ascending order.</span></p><h3><span>Examples</span></h3><pre><code>antiDivisors(10) ➞ [3, 4, 7]\n// 3 is a divisor of 21 (10 * 2 + 1)\n// 4 is a divisor of 20 (10 * 2)\n// 7 is a divisor of 21\n\nantiDivisors(12) ➞ [5, 8]\n// 5 is a divisor of 25 (12 * 2 + 1)\n// 8 is a divisor of 24 (12 * 2)\n\nantiDivisors(20) ➞ [3, 8, 13]\n// 3 is a divisor of 39 (20 * 2 - 1)\n// 8 is a divisor of 40 (20 * 2)\n// 13 is a divisor of 39</code></pre><h3><span>Notes</span></h3><p><span>The given </span><code>n</code><span> can be any integer, either positive, negative or 0.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"conditions",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(antiDivisors(10), [3, 4, 7], \"Example #1\")",
			"Test.assertSimilar(antiDivisors(12), [5, 8], \"Example #2\")",
			"Test.assertSimilar(antiDivisors(20), [3, 8, 13], \"Example #3\")",
			"Test.assertSimilar(antiDivisors(1), [])",
			"Test.assertSimilar(antiDivisors(31), [2, 3, 7, 9, 21])",
			"Test.assertSimilar(antiDivisors(55), [2, 3, 10, 22, 37])",
			"Test.assertSimilar(antiDivisors(0), [])",
			"Test.assertSimilar(antiDivisors(105), [2,  6, 10, 11, 14, 19, 30, 42, 70])",
			"Test.assertSimilar(antiDivisors(666), [4, 11, 12, 31, 36, 43, 121, 148, 444])",
			"Test.assertSimilar(antiDivisors(9999), [2, 6, 7, 18, 22, 66, 198, 202, 606, 1818, 2222, 2857, 6666])",
			"Test.assertSimilar(antiDivisors(-33), [])"
		],
		"starterFn": [
			"1\nfunction antiDivisors(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Dk95Tc99fB2Bz2SjX"
	},
	{
		"title": "Subset Validation",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if all subsets in a list belong to a given set.</span></p><h3><span>Examples</span></h3><pre><code>validateSubsets([[1, 2], [2, 3], [1, 3]], [1, 2, 3]) ➞ true\n\nvalidateSubsets([[1, 2, 3], [2], [3], []], [1, 2, 3]) ➞ true\n\nvalidateSubsets([[1, 2], [2, 3], [1, 4]], [1, 2, 3]) ➞ false\n\nvalidateSubsets([[1, 2, 3, 4]], [1, 2, 3]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The </span><strong><span>empty set</span></strong><span> and the </span><strong><span>set</span></strong><span> itself are </span><strong><span>both</span></strong><span> valid subsets of a set (we are not talking about proper subsets here).</span></li><li><span>The set and the subset will each have unique elements.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validateSubsets([[1, 2], [2, 3], [1, 3]], [1, 2, 3]), true)",
			"Test.assertEquals(validateSubsets([[1, 2, 3], [2], [3], []], [1, 2, 3]), true)",
			"Test.assertEquals(validateSubsets([[1, 2], [2, 3], [1, 4]], [1, 2, 3]), false)",
			"Test.assertEquals(validateSubsets([[1, 2, 3, 4]], [1, 2, 3]), false)",
			"Test.assertEquals(validateSubsets([['a', 'b'], ['b', 'c'], ['a', 'c']], ['a', 'b', 'c']), true)",
			"Test.assertEquals(validateSubsets([['a', 'b', 'c'], ['b'], ['c'], []], ['a', 'b', 'c']), true)",
			"Test.assertEquals(validateSubsets([['a', 'b'], ['b', 'c'], ['a', 'd']], ['a', 'b', 'c']), false)",
			"Test.assertEquals(validateSubsets([['a', 'b', 'c', 'd']], ['a', 'b', 'c']), false)",
			"Test.assertEquals(validateSubsets([[true, false], [true]], [true, false]), true)",
			"Test.assertEquals(validateSubsets([[true], [false], []], [true, false]), true)",
			"Test.assertEquals(validateSubsets([[true], [true, false]], [true]), false)",
			"Test.assertEquals(validateSubsets([[false]], [true]), false)"
		],
		"starterFn": [
			"1\nfunction validateSubsets(subsets, set) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4LA4kWtJGXpG3SJhA"
	},
	{
		"title": "Get Student Top Notes",
		"description": "<p><span>Create a function that takes an array of students and returns an array of their top notes.\nIf the student does not have notes then let's assume their top note is equal to 0.</span></p><h3><span>Examples</span></h3><pre><code>getStudentTopNotes([\n  {\n    id: 1,\n    name: \"Jacek\",\n    notes: [5, 3, 4, 2, 5, 5]\n  },\n  {\n    id: 2,\n    name: \"Ewa\",\n    notes: [2, 3, 3, 3, 2, 5]\n  },\n  {\n    id: 3,\n    name: \"Zygmunt\",\n    notes: [2, 2, 4, 4, 3, 3]\n  }\n]) ➞ [5, 5, 4]</code></pre><h3><span>Notes</span></h3><ul><li><span>Try it with </span><code>Array.prototype.map</code><span> and </span><code>Array.prototype.reduce</code><span>.</span></li><li><span>Alternatively use </span><code>Math.max</code><span> instead of </span><code>Array.prototype.reduce</code><span>.</span></li></ul>",
		"publishedBy": "Bartosz Cytrowski",
		"publishedByUrl": "https://edabit.com/user/QCchMDx3z8NcqT8QJ",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects"
		],
		"tests": [
			"const areEqual = (actual, expected) => expected.every(",
			"  (item, index) => item === actual[index]",
			")",
			"const sets = [",
			"  [[5, 4, 3], [5], [4]],",
			"  [[1, 2, 3], [1, 1, 1], []],",
			"  [[], []],",
			"  []",
			"].map(",
			"  set => ({ ",
			"    actual: getStudentTopNotes(",
			"      set.map(notes => ({ notes }))",
			"    ), ",
			"    expected: set.map(notes => Math.max(...notes, 0))",
			"  })   ",
			").forEach(",
			"  ({ actual, expected }) => {",
			"    Test.expectNoError('Result should be an array', () => {",
			"      Test.assertEquals(areEqual(actual, expected), true, '' + actual)",
			"    })",
			"  }",
			")"
		],
		"starterFn": [
			"1\nfunction getStudentTopNotes(students) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/b7dXbWEhbr3bXCk7i"
	},
	{
		"title": "N-Sized Parts",
		"description": "<p><span>Create a function that divides a string into parts of size </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>partition(\"chew\", 2) ➞ [\"ch\", \"ew\"]\n\npartition(\"thematic\", 4) ➞ [\"them\", \"atic\"]\n\npartition(\"c++\", 2) ➞ [\"c+\", \"+\"]</code></pre><h3><span>Notes</span></h3><p><span>For inputs that do not split evenly into parts of size </span><code>n</code><span>, the last element in the array will have a \"leftover\" string (see example #3).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(partition(\"them\", 2), [\"th\", \"em\"])",
			"Test.assertSimilar(partition(\"thematic\", 4), [\"them\", \"atic\"])",
			"Test.assertSimilar(partition(\"movement\", 2), [\"mo\", \"ve\", \"me\", \"nt\"])",
			"Test.assertSimilar(partition(\"python\", 2), [\"py\", \"th\", \"on\"])",
			"Test.assertSimilar(partition(\"c++\", 2), [\"c+\", \"+\"])"
		],
		"starterFn": [
			"1\nfunction partition(str, n) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yffZ8xYon38AnH6J5"
	},
	{
		"title": "Shift and Multiple Validators",
		"description": "<p><span>For this task, you will write two validators.</span></p><ol><li><strong><span>Shift Validator:</span></strong><span> When each element is translated (added or subtracted) by a constant.</span></li><li><strong><span>Multiple Validator:</span></strong><span> When each element is multiplied (by a positive or negative number) by a constant.</span></li></ol><p><span>A few examples to illustrate these respective functions:</span></p><h3><span>Examples</span></h3><pre><code>isShifted([1, 2, 3], [2, 3, 4]) ➞ true\n// Each element is shifted +1\n\nisShifted([1, 2, 3], [-9, -8, -7]) ➞ true\n// Each element is shifted -10\n\nisMultiplied([1, 2, 3], [10, 20, 30]) ➞ true\n// Each element is multiplied by 10\n\nisMultiplied([1, 2, 3], [-0.5, -1, -1.5]) ➞ true\n// Each element is multiplied by -1/2\n\nisMultiplied([1, 2, 3], [0, 0, 0]) ➞ true\n// Each element is multiplied by 0</code></pre><h3><span>Notes</span></h3><p><span>Keep in mind one special case: if the </span><strong><span>second array</span></strong><span> is an array of </span><strong><span>only zeroes</span></strong><span>, then the first array can be anything (the multiplier will be </span><code>0</code><span>).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isShifted([1, 2, 3], [2, 3, 4]), true)",
			"Test.assertEquals(isShifted([1, 2, 3], [-9, -8, -7]), true)",
			"Test.assertEquals(isMultiplied([1, 2, 3], [10, 20, 30]), true)",
			"Test.assertEquals(isMultiplied([1, 2, 3], [-0.5, -1, -1.5]), true )",
			"Test.assertEquals(isMultiplied([1, 2, 3], [0, 0, 0]), true )",
			"Test.assertEquals(isShifted([1, 2, 3], [2, 3, 5]), false)",
			"Test.assertEquals(isShifted([1, 2, 3], [-9, -1, -7]), false)",
			"Test.assertEquals(isMultiplied([1, 2, 3], [10, 20, 29]), false)",
			"Test.assertEquals(isMultiplied([1, 2, 3], [-0.5, -1, -2]), false)",
			"Test.assertEquals(isMultiplied([1, 2, 3], [0, 0, 1]), false)"
		],
		"starterFn": [
			"1\nfunction isShifted(arr1, arr2) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction isMultiplied(arr1, arr2) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/jYJiNZqx588FFJ5F7"
	},
	{
		"title": "Count the Number of Duplicate Characters",
		"description": "<p><span>Create a function that takes a string and returns the number of alphanumeric characters that occur more than once.</span></p><h3><span>Examples</span></h3><pre><code>duplicateCount(\"abcde\") ➞ 0\n\nduplicateCount(\"aabbcde\") ➞ 2\n\nduplicateCount(\"Indivisibilities\") ➞ 2\n\nduplicateCount(\"Aa\") ➞ 0\n// Case sensitive</code></pre><h3><span>Notes</span></h3><ul><li><span>Duplicate characters are case sensitive.</span></li><li><span>The input string will contain only alphanumeric characters.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(duplicateCount(\"abcde\"), 0)",
			"Test.assertEquals(duplicateCount(\"Aa\"), 0, \"Duplicate characters are case sensitive.\")",
			"Test.assertEquals(duplicateCount(\"aabbcde\"), 2)",
			"Test.assertEquals(duplicateCount(\"aabbcdeB\"), 2)",
			"Test.assertEquals(duplicateCount(\"indivisibility\"), 1)",
			"Test.assertEquals(duplicateCount(\"Indivisibilities\"), 2)",
			"Test.assertEquals(duplicateCount(\"aa1112\"), 2)",
			"Test.assertEquals(duplicateCount(\"bb2c\"), 1)"
		],
		"starterFn": [
			"1\nfunction duplicateCount(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/p7vkhrwcWK7iPSqix"
	},
	{
		"title": "Recursion: GCD",
		"description": "<p><span>Write a function that calculates the </span><strong><span>GCD</span></strong><span> (Greatest Common Divisor) of two numbers </span><strong><span>recursively</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>gcd(10, 20) ➞ 10\n\ngcd(1, 3) ➞ 1\n\ngcd(5, 7) ➞ 1\n\ngcd(2, 6) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(gcd(10, 20), 10)",
			"Test.assertEquals(gcd(1, 3), 1)",
			"Test.assertEquals(gcd(5, 7), 1)",
			"Test.assertEquals(gcd(2, 6), 2)",
			"Test.assertEquals(gcd(13, 39), 13)",
			"Test.assertEquals(gcd(50, 5), 5)",
			"Test.assertEquals(gcd(70, 35), 35)",
			"Test.assertEquals(gcd(100, 8), 4)",
			"Test.assertEquals(gcd(11, 45), 1)"
		],
		"starterFn": [
			"1\nfunction gcd(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kPLz93JtyjK77LFDP"
	},
	{
		"title": "Split String by Identical Characters",
		"description": "<p><span>Create a function that splits a string into an array of identical clusters.</span></p><h3><span>Examples</span></h3><pre><code>splitGroups(\"555\") ➞ [\"555\"]\n\nsplitGroups(\"5556667788\") ➞ [\"555\", \"666\", \"77\", \"88\"]\n\nsplitGroups(\"aaabbbaabbab\") ➞ [\"aaa\", \"bbb\", \"aa\", \"bb\", \"a\", \"b\"]\n\nsplitGroups(\"abbbcc88999&amp;&amp;!!!_\") ➞ [\"a\", \"bbb\", \"cc\", \"88\", \"999\", \"&amp;&amp;\", \"!!!\", \"_\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Each cluster should only have one unique character.</span></li><li><span>The resulting array should be in the same order as the input string.</span></li><li><span>Should work with letters, numbers and other characters.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(splitGroups('aaabbbaabbab'), ['aaa', 'bbb', 'aa', 'bb', 'a', 'b'])",
			"Test.assertSimilar(splitGroups('5556667788'), ['555', '666', '77', '88'])",
			"Test.assertSimilar(splitGroups('abbbcc88999&&!!!_'), ['a', 'bbb', 'cc', '88', '999', '&&', '!!!', '_'], 'It should work with special chars.')",
			"Test.assertSimilar(splitGroups('555'), ['555'])",
			"Test.assertSimilar(splitGroups('AABBCC'), ['AA', 'BB', 'CC'])"
		],
		"starterFn": [
			"1\nfunction splitGroups(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rcgqCsnCqMPTSjkBf"
	},
	{
		"title": "An Ordered Matrix",
		"description": "<p><span>Create an ordered 2D array (matrix). A matrix is ordered if its (0, 0) element is 1, its (0, 1) element is 2, and so on. Your function needs to create an a × b matrix. </span><code>a</code><span> is the first argument and </span><code>b</code><span> is the second.</span></p><h3><span>Examples</span></h3><pre><code>orderedMatrix(5, 5) ➞ [\n  [1 ,2 ,3 ,4 ,5],\n  [6 ,7 ,8 ,9 ,10],\n  [11, 12, 13, 14, 15],\n  [16, 17, 18, 19, 20],\n  [21, 22, 23, 24, 25]\n]\n\norderedMatrix(1, 1) ➞ [[1]]\n\norderedMatrix(1, 5) ➞ [[1, 2, 3, 4, 5]]</code></pre><h3><span>Notes</span></h3><ul><li><code>a</code><span> is the height of the matrix (y coordinate), and </span><code>b</code><span> is the width (x coordinate).</span></li><li><code>a</code><span> and </span><code>b</code><span> will always be positive, and the matrix will always be square shaped (in each row are the same amount of columns).</span></li><li><code>a</code><span> and </span><code>b</code><span> are integers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(orderedMatrix(1,2), [[1,2]])",
			"Test.assertSimilar(orderedMatrix(3,3), [[1,2,3],[4,5,6],[7,8,9]])",
			"Test.assertSimilar(orderedMatrix(5,5), [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25]])",
			"Test.assertSimilar(orderedMatrix(3,4), [[1,2,3,4],[5,6,7,8],[9,10,11,12]])"
		],
		"starterFn": [
			"1\nfunction orderedMatrix(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2eDHKWPt7tDCzCJa3"
	},
	{
		"title": "Sum Fractions",
		"description": "<p><span>Create a function that takes an array containing </span><strong><span>nested arrays</span></strong><span> as an argument. Each subarray has 2 elements. The first element is the numerator and the second element is the denominator. Return the sum of the fractions rounded to the nearest whole number.</span></p><h3><span>Examples</span></h3><pre><code>sumFractions([[18, 13], [4, 5]]) ➞ 2\n\nsumFractions([[36, 4], [22, 60]]) ➞ 9\n\nsumFractions([[11, 2], [3, 4], [5, 4], [21, 11], [12, 6]]) ➞ 11</code></pre><h3><span>Notes</span></h3><p><span>Your result should be a number not string.</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"data_structures"
		],
		"tests": [
			"Test.assertEquals(sumFractions([[36, 4], [22, 60]]), 9)",
			"Test.assertEquals(sumFractions([[-11, 12], [18, 13], [4, 5]]), 1)",
			"Test.assertEquals(sumFractions([[11, 12], [18, 13], [4, 5]]), 3)",
			"Test.assertEquals(sumFractions([[18, 13], [4, 5]]), 2)",
			"Test.assertEquals(sumFractions([[41, 14], [10, 91]]), 3)",
			"Test.assertEquals(sumFractions([[11, 2], [3, 4], [5, 4], [21, 11], [12, 6]]), 11)"
		],
		"starterFn": [
			"1\nfunction sumFractions(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WYgMqmQqZ9GiGmBPB"
	},
	{
		"title": "Number of Two or More Consecutive Ones",
		"description": "<p><span>Create a function that counts the number of blocks of </span><strong><span>two or more</span></strong><span> adjacent </span><code>1</code><span>s in an array.</span></p><h3><span>Examples</span></h3><pre><code>countOnes([1, 0, 0, 1, 1, 0, 1, 1, 1]) ➞ 2\n// Two instances: [1, 1] (middle) and [1, 1, 1] (end)\n\ncountOnes([1, 0, 1, 0, 1, 0, 1, 0]) ➞ 0\n\ncountOnes([1, 1, 1, 1, 0, 0, 0, 0]) ➞ 1\n\ncountOnes([0, 0, 0]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>A single 1 by itself (surrounded by a zero on its left and right), does </span><strong><span>not</span></strong><span> count towards the total (see first example).</span></li><li><span>Each input will contain only zeroes and ones.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countOnes([1, 1, 1, 1, 1]), 1)",
			"Test.assertEquals(countOnes([1, 1, 1, 1, 0]), 1)",
			"Test.assertEquals(countOnes([0, 0, 0, 0, 0]), 0)",
			"Test.assertEquals(countOnes([1, 0, 0, 0, 0]), 0)",
			"Test.assertEquals(countOnes([1, 0, 1, 0, 1]), 0)",
			"Test.assertEquals(countOnes([1, 0, 0, 0, 1, 0, 0, 1, 1]), 1)",
			"Test.assertEquals(countOnes([1, 1, 0, 1, 1, 0, 0, 1, 1]), 3)",
			"Test.assertEquals(countOnes([1, 0, 0, 1, 1, 0, 0, 1, 1]), 2)",
			"Test.assertEquals(countOnes([1, 0, 0, 1, 1, 0, 1, 1, 1]), 2)",
			"Test.assertEquals(countOnes([1, 0, 1, 0, 1, 0, 1, 0]), 0)",
			"Test.assertEquals(countOnes([1, 1, 1, 1, 0, 0, 0, 0]), 1)",
			"Test.assertEquals(countOnes([1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1]), 3)"
		],
		"starterFn": [
			"1\nfunction countOnes(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XmozNpoBjcqrKD82i"
	},
	{
		"title": "Blackjack",
		"description": "<p><span>Create a function that takes an array of card numbers and checks if the sum of their value exceeds 21. If the sum exceeds 21, return </span><code>true</code><span> and if the sum is under or equal to 21, return </span><code>false</code><span>. Values of the cards are as follows:</span></p><ul><li><span>2-10 are their value.</span></li><li><span>J-K (face cards) count as 10.</span></li><li><span>Aces count either as 1 or 11 - play conservatively, so that if giving an ace a value of 11 causes you to lose and 1 allows you to win, then go with 1.</span></li></ul><h3><span>Examples</span></h3><pre><code>overTwentyOne([2, 8, \"J\"]) ➞ false\n\noverTwentyOne([\"A\", \"J\", \"K\"]) ➞ false\n\noverTwentyOne([5, 5, 3, 9]) ➞ true\n\noverTwentyOne([2, 6, 4, 4, 5]) ➞ false\n\noverTwentyOne([\"J\", \"Q\", \"K\"]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertEquals(overTwentyOne(['A', 2, 3]), false);",
			"Test.assertEquals(overTwentyOne(['A', 'J', 'K']), false);",
			"Test.assertEquals(overTwentyOne(['A', 'J', 'K', 'Q']), true);",
			"Test.assertEquals(overTwentyOne([5, 3, 6, 6, 7, 9]), true);"
		],
		"starterFn": [
			"1\nfunction overTwentyOne(cards) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QGHWExeW6neueusKP"
	},
	{
		"title": "Reverse Coding Challenge #1",
		"description": "<p><span>This is a </span><strong><span>reverse coding challenge</span></strong><span>. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.</span></p><p><span>Your task is to create a function that, when fed the inputs below, produce the sample outputs shown.</span></p><h3><span>Examples</span></h3><pre><code>\"A4B5C2\" ➞ \"AAAABBBBBCC\"\n\n\"C2F1E5\" ➞ \"CCFEEEEE\"\n\n\"T4S2V2\" ➞ \"TTTTSSVV\"\n\n\"A1B2C3D4\" ➞ \"ABBCCCDDDD\"</code></pre><h3><span>Notes</span></h3><p><span>If you get stuck, check the </span><strong><span>Comments</span></strong><span> for help.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(mysteryFunc(\"A4B5C2\"), \"AAAABBBBBCC\")",
			"Test.assertEquals(mysteryFunc(\"C2F1E5\"), \"CCFEEEEE\")",
			"Test.assertEquals(mysteryFunc(\"T4S2V2\"), \"TTTTSSVV\")",
			"Test.assertEquals(mysteryFunc(\"A1B2C3D4\"), \"ABBCCCDDDD\")"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ifZ3cDoGZN7gNtRWZ"
	},
	{
		"title": "Is This a Right Angled Triangle?",
		"description": "<p><span>Given three numbers, </span><code>x</code><span>, </span><code>y</code><span> and </span><code>z</code><span>, determine whether they are the edges of a right angled triangle.</span></p><h3><span>Examples</span></h3><pre><code>rightTriangle(3, 4, 5) ➞ true\n// This is the classic example of a \"nice\" right angled triangle.\n\nrightTriangle(145, 105, 100) ➞ true\n// This is a less famous example.\n\nrightTriangle(70, 130, 110) ➞ false\n// This isn't a right angled triangle.</code></pre><h3><span>Notes</span></h3><ul><li><span>Notice the largest side of the triangle might not be the last one passed to the function.</span></li><li><span>All numbers will be integers (whole numbers).</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(rightTriangle(3, 4, 5), true)",
			"Test.assertEquals(rightTriangle(145, 105, 100), true)",
			"Test.assertEquals(rightTriangle(70, 130, 110), false)",
			"Test.assertEquals(rightTriangle(60, 60, 60), false)",
			"Test.assertEquals(rightTriangle(0, 4, 4), false, \"A triangle can't have an edge of length 0.\")",
			"Test.assertEquals(rightTriangle(-3, 4, 5), false, \"A triangle can't have edges of negative length.\")",
			"Test.assertEquals(rightTriangle(115, 277, 252), true)",
			"Test.assertEquals(rightTriangle(140, 170, 220), false)",
			"Test.assertEquals(rightTriangle(915, 1748, 1973), true)"
		],
		"starterFn": [
			"1\nfunction rightTriangle(x, y, z) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/d4TfH5d9nHvJiRSCb"
	},
	{
		"title": "Mini Sudoku",
		"description": "<p><span>A Sudoku is a 9x9 grid that is completed when every 3x3 square, row and column consist of the numbers 1-9.</span></p><p><span>For this task, you will be given a completed 3x3 square, in the form of a two-dimensional array. Create a function that checks to make sure this 3x3 square contains each  number from 1-9 exactly once. Make sure there are no duplicates, and no numbers outside this range.</span></p><h3><span>Examples</span></h3><pre><code>isMiniSudoku([[1, 3, 2], [9, 7, 8], [4, 5, 6]]) ➞ true\n\nisMiniSudoku([[1, 1, 3], [6, 5, 4], [8, 7, 9]]) ➞ false\n// The 1 is repeated twice \n\nisMiniSudoku([[0, 1, 2], [6, 4, 5], [9, 8, 7]]) ➞ false\n// The 0 is included (outside range)\n\nisMiniSudoku([[8, 9, 2], [5, 6, 1], [3, 7, 4]]) ➞ true </code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isMiniSudoku(",
			"[[1, 3, 2], ",
			"[9, 7, 8], ",
			"[4, 5, 6]]), true);",
			"Test.assertEquals(isMiniSudoku(",
			"[[1, 1, 3], ",
			"[6, 5, 4], ",
			"[8, 7, 9]]), false, '1 is included twice.');",
			"Test.assertEquals(isMiniSudoku(",
			"[[0, 1, 2], ",
			"[6, 4, 5], ",
			"[9, 8, 7]]), false, '0 is not in range 1-9.');",
			"Test.assertEquals(isMiniSudoku(",
			"[[8, 9, 2], ",
			"[5, 6, 1], ",
			"[3, 7, 4]]), true);",
			"Test.assertEquals(isMiniSudoku(",
			"[[2, 3, 4], ",
			"[6, 7, 7], ",
			"[8, 9, 1]]), false, '7 is included twice.');",
			"Test.assertEquals(isMiniSudoku(",
			"[[6, 5, 9], ",
			"[4, 3, 8], ",
			"[2, 1, 7]]), true);",
			"Test.assertEquals(isMiniSudoku(",
			"[[4, 3, 5], "
		],
		"starterFn": [
			"1\nfunction isMiniSudoku(square) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FGrQragjD9MCXo4Ei"
	},
	{
		"title": "Perfect Number",
		"description": "<p><span>Create a function that tests whether or not an integer is a </span><strong><span>perfect number</span></strong><span>. A perfect number is a number that can be written as the sum of its factors, excluding the number itself. </span></p><p><span>For example, 6 is a </span><strong><span>perfect number</span></strong><span>, since 1 + 2 + 3 = 6, where 1, 2, and 3 are all factors of 6. Similarly, 28 is a </span><strong><span>perfect number</span></strong><span>, since 1 + 2 + 4 + 7 + 14 = 28. </span></p><h3><span>Examples</span></h3><pre><code>checkPerfect(6) ➞ true\n\ncheckPerfect(28) ➞ true\n\ncheckPerfect(496) ➞ true\n\ncheckPerfect(12) ➞ false\n\ncheckPerfect(97) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(checkPerfect(6), true);",
			"Test.assertEquals(checkPerfect(28), true);",
			"Test.assertEquals(checkPerfect(496), true);",
			"Test.assertEquals(checkPerfect(8128), true);",
			"Test.assertEquals(checkPerfect(33550336), true);",
			"Test.assertEquals(checkPerfect(12), false);",
			"Test.assertEquals(checkPerfect(97), false);",
			"Test.assertEquals(checkPerfect(481), false);",
			"Test.assertEquals(checkPerfect(1001), false);",
			"Test.assertEquals(checkPerfect(55555), false);"
		],
		"starterFn": [
			"1\nfunction checkPerfect(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CEF6zcYWWWhbbgA2M"
	},
	{
		"title": "Sort a String by Its Last Character",
		"description": "<p><span>Create a function that takes a string of words and return a </span><em><span>string</span></em><span> sorted alphabetically by the </span><em><span>last</span></em><span> character of each word.</span></p><h3><span>Examples</span></h3><pre><code>sortByLast(\"herb camera dynamic\") ➞ \"camera herb dynamic\"\n\nsortByLast(\"stab traction artist approach\") ➞ \"stab approach traction artist\"\n\nsortByLast(\"sample partner autonomy swallow trend\") ➞ \"trend sample partner swallow autonomy\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Tests consist of lowercase alphabetic characters (a-z) and spaces.</span></li><li><span>If two words have the same last character, sort by the order they originally appeared.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sortByLast(\"herb camera dynamic\"), \"camera herb dynamic\");",
			"Test.assertEquals(sortByLast(\"stab traction artist approach\"), \"stab approach traction artist\");",
			"Test.assertEquals(sortByLast(\"sample partner autonomy swallow trend\"), \"trend sample partner swallow autonomy\");",
			"Test.assertEquals(sortByLast(\"dividend platform pupil conclusion silence breakfast\"), \"dividend silence pupil platform conclusion breakfast\");",
			"Test.assertEquals(sortByLast(\"harm\"), \"harm\");",
			"Test.assertEquals(sortByLast(\"card warrant opinion medium illustrate\"), \"card illustrate medium opinion warrant\");",
			"Test.assertEquals(sortByLast(\"cause fine virtue\"), \"cause fine virtue\");",
			"Test.assertEquals(sortByLast(\"introduce fashionable cause sacrifice reality\"), \"introduce fashionable cause sacrifice reality\");",
			"Test.assertEquals(sortByLast(\"brick moral institution loud talk resign worth\"), \"loud worth brick talk moral institution resign\");"
		],
		"starterFn": [
			"1\nfunction sortByLast(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZeNq6QYyDMk8bKsaJ"
	},
	{
		"title": "Odds vs. Evens",
		"description": "<p><span>Given an integer, return </span><code>\"odd\"</code><span> if the sum of all </span><em><span>odd</span></em><span> digits is greater than the sum of all </span><em><span>even</span></em><span> digits. Return </span><code>\"even\"</code><span> if the sum of </span><em><span>even</span></em><span> digits is greater than the sum of </span><em><span>odd</span></em><span> digits, and </span><code>\"equal\"</code><span> if both sums are the same.</span></p><h3><span>Examples</span></h3><pre><code>oddsVsEvens(97428) ➞ \"odd\"\n// odd = 16 (9+7)\n// even = 14 (4+2+8)\n\noddsVsEvens(81961) ➞ \"even\"\n// odd = 11 (1+9+1)\n// even = 14 (8+6)\n\noddsVsEvens(54870) ➞ \"equal\"\n// odd = 12 (5+7)\n// even = 12 (4+8+0)</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(oddsVsEvens(44547), 'equal')",
			"Test.assertEquals(oddsVsEvens(412420), 'even')",
			"Test.assertEquals(oddsVsEvens(128797), 'odd')",
			"Test.assertEquals(oddsVsEvens(838768), 'even')",
			"Test.assertEquals(oddsVsEvens(371910), 'odd')",
			"Test.assertEquals(oddsVsEvens(769431), 'odd')",
			"Test.assertEquals(oddsVsEvens(221294), 'equal')",
			"Test.assertEquals(oddsVsEvens(859307), 'odd')",
			"Test.assertEquals(oddsVsEvens(847617), 'even')",
			"Test.assertEquals(oddsVsEvens(348466), 'even')",
			"Test.assertEquals(oddsVsEvens(50236), 'equal')",
			"Test.assertEquals(oddsVsEvens(133987), 'odd')",
			"Test.assertEquals(oddsVsEvens(698570), 'odd')",
			"Test.assertEquals(oddsVsEvens(822406), 'even')",
			"Test.assertEquals(oddsVsEvens(54313), 'odd')",
			"Test.assertEquals(oddsVsEvens(17788), 'even')",
			"Test.assertEquals(oddsVsEvens(72083), 'equal')",
			"Test.assertEquals(oddsVsEvens(649924), 'odd')",
			"Test.assertEquals(oddsVsEvens(968740), 'even')",
			"Test.assertEquals(oddsVsEvens(942674), 'equal')"
		],
		"starterFn": [
			"1\nfunction oddsVsEvens(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Hxc6AgMFdKqdprpdt"
	},
	{
		"title": "Initialize",
		"description": "<p><span>Create a function that takes in an array of full names and returns the initials.</span></p><h3><span>Examples</span></h3><pre><code>initialize([\"Stephen Hawking\"]) ➞ [\"S. H.\"]\n\ninitialize([\"Harry Potter\", \"Ron Weasley\"]) ➞ [\"H. P.\", \"R. W.\"]\n\ninitialize([\"Sherlock Holmes\", \"John Watson\", \"Irene Adler\"]) ➞ [\"S. H.\", \"J. W.\", \"I. A.\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Each initial is followed by a dot.</span></li><li><span>Names will always be made of two words, separated by a space.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting"
		],
		"tests": [
			"Test.assertSimilar(initialize(['Sherlock Holmes', 'John Watson', 'Irene Adler']), ['S. H.', 'J. W.', 'I. A.'])",
			"Test.assertSimilar(initialize(['Harry Potter', 'Ron Weasley']), ['H. P.', 'R. W.'])",
			"Test.assertSimilar(initialize(['Stephen Hawking']), ['S. H.'])",
			"Test.assertSimilar(initialize(['Atticus Finch']), ['A. F.'])",
			"Test.assertSimilar(initialize(['Leonardo DiCaprio']), ['L. D.'])"
		],
		"starterFn": [
			"1\nfunction initialize(names) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uJewuaLAFMXGWhbgu"
	},
	{
		"title": "Get the Diagonals",
		"description": "<p><span>Given a square array (</span><em><span>n</span></em><span>*</span><em><span>n</span></em><span> size) implement a function that returns a new array containing two arrays equal to the two diagonals, in the following order:</span></p><pre><code>diagonal 1 = from upper-left to lower-right corner\ndiagonal 2 = from upper-right to lower-left corner</code></pre><h3><span>Examples</span></h3><pre><code>getDiagonals([ [1, 2], [3, 4] ]) ➞ [ [1, 4], [2, 3] ]\n\ngetDiagonals([ [\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"] ]) ➞ [ [\"a\", \"e\", \"i\"], [\"c\", \"e\", \"g\"] ]\n\ngetDiagonals([ [true] ]) ➞ [ [true], [true] ]</code></pre><h3><span>Notes</span></h3><ul><li><span>Your function must also work with single elements or empty arrays.</span></li><li><span>Try to build both diagonals with a single loop.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(getDiagonals([",
			"  [1, 2, 3],",
			"  [4, 5, 6],",
			"  [7, 8, 9]",
			"]), [",
			"  [1, 5, 9], ",
			"  [3, 5, 7]",
			"])",
			"​",
			"Test.assertSimilar(getDiagonals([",
			"  [\"e\", \"z\", \"y\", \"o\", \"p\", \"t\"],",
			"  [\"b\", \"d\", \"a\", \"t\", \"i\", \"w\"],",
			"  [\"u\", \"l\", \"a\", \"n\", \"s\", \"k\"],",
			"  [\"s\", \"v\", \"k\", \"b\", \"r\", \"z\"],",
			"  [\"h\", \"e\", \"w\", \"c\", \"i\", \"j\"],",
			"  [\"r\", \"p\", \"y\", \"d\", \"x\", \"t\"]",
			"]), [",
			"  [\"e\", \"d\", \"a\", \"b\", \"i\", \"t\"], ",
			"  [\"t\", \"i\", \"n\", \"k\", \"e\", \"r\"]",
			"])",
			"​",
			"Test.assertSimilar(getDiagonals([",
			"  [true, false, true, false],",
			"  [false, true, false, true],",
			"  [true, false, true, false],",
			"  [false, false, false, true]"
		],
		"starterFn": [
			"1\nfunction getDiagonals(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GwdGioqhZGdGRD2FJ"
	},
	{
		"title": "Sort By Index of Character",
		"description": "<p><span>Write a function that sorts an array of characters alphabetically in ascending order </span><strong><span>(a-z)</span></strong><span> by the character at the </span><strong><span>n-th character</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>sortByCharacter([\"az16\", \"by35\", \"cx24\"], 2) ➞ [\"cx24\", \"by35\", \"az16\"]\n// By 2nd character: [\"x\", \"y\", \"z\"] is in alphabetical order.\n\nsortByCharacter([\"mayor\", \"apple\", \"petal\"], 5) ➞ [\"apple\", \"petal\", \"mayor\"]\n// By 5th character: [\"e\", \"l\", \"r\"] is in alphabetical order.\n\nsortByCharacter([\"mate\", \"team\", \"bade\"], 3) ➞ [\"team\", \"bade\", \"mate\"]</code></pre><h3><span>Notes</span></h3><p><span>All inputs will be of same length.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(sortByCharacter(['az16', 'by35', 'cx24'], 1), ['az16', 'by35', 'cx24'])",
			"Test.assertSimilar(sortByCharacter(['az16', 'by35', 'cx24'], 2), ['cx24', 'by35', 'az16'])",
			"Test.assertSimilar(sortByCharacter(['az16', 'by35', 'cx24'], 3), ['az16', 'cx24', 'by35'])",
			"Test.assertSimilar(sortByCharacter(['az16', 'by35', 'cx24'], 4), ['cx24', 'by35', 'az16'])",
			"Test.assertSimilar(sortByCharacter(['apple', 'mayor', 'bendy', 'petal'], 5), ['apple', 'petal', 'mayor', 'bendy'])",
			"Test.assertSimilar(sortByCharacter(['team', 'mate', 'bade'], 3), ['team', 'bade', 'mate'])"
		],
		"starterFn": [
			"1\nfunction sortByCharacter(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nxH5e4p2TR8sAEAc7"
	},
	{
		"title": "Which Number Is Not like the Others?",
		"description": "<p><span>Create a function that takes an array of numbers and return the number that's unique.</span></p><h3><span>Examples</span></h3><pre><code>unique([3, 3, 3, 7, 3, 3]) ➞ 7\n\nunique([0, 0, 0.77, 0, 0]) ➞ 0.77\n\nunique([0, 1, 1, 1, 1, 1, 1, 1]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Test cases will always have exactly one unique number while all others are the same.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(unique([3, 3, 3, 7, 3, 3]), 7);",
			"Test.assertEquals(unique([0, 0, 0.77, 0, 0]), 0.77);",
			"Test.assertEquals(unique([0, 1, 1, 1, 1, 1, 1, 1]), 0);",
			"Test.assertEquals(unique([-4, -4, -4, 4]), 4);",
			"Test.assertEquals(unique([8, 8, 8, 8, 8, 8, 8, 0.5]), 0.5);",
			"Test.assertEquals(unique([2, 1, 2, 2, 2, 2, 2, 2]), 1);"
		],
		"starterFn": [
			"1\nfunction unique(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GYXsAp7AabbzuRPbt"
	},
	{
		"title": "Accumulating Product",
		"description": "<p><span>Create a function that takes an array and returns an array of the accumulating product.</span></p><h3><span>Examples</span></h3><pre><code>accumulatingProduct([1, 2, 3, 4]) ➞ [1, 2, 6, 24]\n// [1, 2, 6, 24] can be written as [1, 1 x 2, 1 x 2 x 3, 1 x 2 x 3 x 4]\n\naccumulatingProduct([1, 5, 7]) ➞ [1, 5, 35]\n\naccumulatingProduct([1, 0, 1, 0]) ➞ [1, 0, 0, 0]\n\naccumulatingProduct([]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>An empty array should return an empty array </span><code>[]</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(accumulatingProduct([1, 2, 3, 4]), [1, 2, 6, 24])",
			"Test.assertSimilar(accumulatingProduct([5, 10, 1, 1]), [5, 50, 50, 50])",
			"Test.assertSimilar(accumulatingProduct([1, 5, 7]), [1, 5, 35])",
			"Test.assertSimilar(accumulatingProduct([1, 0, 1, 0]), [1, 0, 0, 0])",
			"Test.assertSimilar(accumulatingProduct([1]), [1])",
			"Test.assertSimilar(accumulatingProduct([1, 2, 2, 2, 2, 2, 2]), [1, 2, 4, 8, 16, 32, 64])",
			"Test.assertSimilar(accumulatingProduct([1, 1, 1, 1, 1, 1, 1]), [1, 1, 1, 1, 1, 1, 1])",
			"Test.assertSimilar(accumulatingProduct([]), [])"
		],
		"starterFn": [
			"1\nfunction accumulatingProduct(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QXRdQoWRMx4rZ8WDR"
	},
	{
		"title": "Blah, Blah, Blah...",
		"description": "<p><span>Create a function which replaces the last </span><code>n</code><span> words with </span><code>\"blah\"</code><span>. Add </span><code>\"...\"</code><span> to the last blah.</span></p><h3><span>Examples</span></h3><pre><code>blahBlah(\"A function is a block of code which only runs when it is called\",  5) ➞ \"A function is a block of code which only blah blah blah blah blah...\"\n\nblahBlah(\"one two three four five\", 2) ➞ \"one two three blah blah...\"\n\nblahBlah(\"Sphinx of black quartz judge my vow\", 10) ➞ \"blah blah blah blah blah blah blah...\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If </span><code>n</code><span> is longer than the amount of words in the sentence, replace every word with \"blah\" (see example </span><span>#</span><span>3).</span></li><li><span>All blahs shall be lowercase!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(blahBlah(\"A function is a block of code which only runs when it is called\",  5), \"A function is a block of code which only blah blah blah blah blah...\");",
			"Test.assertEquals(blahBlah(\"one two three four five\", 2), \"one two three blah blah...\");",
			"Test.assertEquals(blahBlah(\"Sphinx of black quartz judge my vow\", 10), \"blah blah blah blah blah blah blah...\");",
			"Test.assertEquals(blahBlah(\"The quadratic formula is negative b plus or minus the square root of b squared subtract four ac all over two a\", 5), \"The quadratic formula is negative b plus or minus the square root of b squared subtract four blah blah blah blah blah...\");",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction blahBlah(str, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sTk6vyGewy3vZbZkD"
	},
	{
		"title": "Percentage of Box Filled In",
		"description": "<p><span>Create a function that calculates what percentage of the box is filled in. Give your answer as a string percentage rounded to the nearest integer.</span></p><h3><span>Examples</span></h3><pre><code>percentFilled([\n  \"####\",\n  \"#  #\",\n  \"#o #\",\n  \"####\"\n]) ➞ \"25%\"\n\n// One element out of four spaces.\n\npercentFilled([\n  \"#######\",\n  \"#o oo #\",\n  \"#######\"\n]) ➞ \"60%\"\n\n// Three elements out of five spaces.\n\npercentFilled([\n  \"######\",\n  \"#ooo #\",\n  \"#oo  #\",\n  \"#    #\",\n  \"#    #\",\n  \"######\"\n]) ➞ \"31%\"\n\n// Five elements out of sixteen spaces.</code></pre><h3><span>Notes</span></h3><ul><li><span>Only </span><code>\"o\"</code><span> will fill the box and also </span><code>\"o\"</code><span> will not be found outside of the box.</span></li><li><span>Don't focus on how much physical space an element takes up, pretend that each element occupies one whole unit (which you can judge according to the number of </span><code>\"#\"</code><span> on the sides).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(percentFilled([",
			"  \"####\",",
			"  \"#  #\",",
			"  \"#o #\",",
			"  \"####\"",
			"]), \"25%\", \"One element out of four spaces.\")",
			"​",
			"Test.assertEquals(percentFilled([",
			"  \"#######\",",
			"  \"#o oo #\",",
			"  \"#######\"",
			"]), \"60%\", \"Three elements out of five spaces.\")",
			"​",
			"Test.assertEquals(percentFilled([",
			"  \"######\",",
			"  \"#ooo #\",",
			"  \"#oo  #\",",
			"  \"#    #\",",
			"  \"#    #\",",
			"  \"######\"",
			"]), \"31%\", \"Five elements out of sixteen spaces.\")",
			"​",
			"Test.assertEquals(percentFilled([",
			"  \"####\",",
			"  \"#  #\",",
			"  \"####\""
		],
		"starterFn": [
			"1\nfunction percentFilled(box) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qYgE5kyLYuRve4Zap"
	},
	{
		"title": "The Perrin Sequence",
		"description": "<p><span>Each number in the </span><em><span>Perrin</span></em><span> sequence is created by summing the numbers two positions and three positions before it.  The first three numbers are (3, 0, 2), and the sequence is extended as follows:</span></p><pre><code>P(0) P(1) P(2) P(3) P(4) P(5) P(6) P(7) ... P(n)\n3, 0, 2, 3, 2, 5, 5, 7, ...</code></pre><p><span>Given a value for </span><code>n</code><span>, return the Perrin number P(n).</span></p><h3><span>Examples</span></h3><pre><code>perrin(1) ➞ 0\n\nperrin(8) ➞ 10\n\nperrin(26) ➞ 1497</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for a further explanation of the Perrin sequence.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays"
		],
		"tests": [
			"Test.assertEquals(perrin(0), 3)",
			"Test.assertEquals(perrin(38), 43721)",
			"Test.assertEquals(perrin(58), 12110402)",
			"Test.assertEquals(perrin(52), 2240877)",
			"Test.assertEquals(perrin(36), 24914)",
			"Test.assertEquals(perrin(44), 236282)",
			"Test.assertEquals(perrin(50), 1276942)",
			"Test.assertEquals(perrin(42), 134643)",
			"Test.assertEquals(perrin(27), 1983)",
			"Test.assertEquals(perrin(17), 119)",
			"Test.assertEquals(perrin(45), 313007)",
			"Test.assertEquals(perrin(46), 414646)",
			"Test.assertEquals(perrin(28), 2627)",
			"Test.assertEquals(perrin(37), 33004)",
			"Test.assertEquals(perrin(43), 178364)",
			"Test.assertEquals(perrin(22), 486)",
			"Test.assertEquals(perrin(25), 1130)",
			"Test.assertEquals(perrin(51), 1691588)",
			"Test.assertEquals(perrin(34), 14197)",
			"Test.assertEquals(perrin(15), 68)",
			"Test.assertEquals(perrin(41), 101639)"
		],
		"starterFn": [
			"1\nfunction perrin(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BX7cQ3bxKzqrRJer8"
	},
	{
		"title": "Count a Specific Digit",
		"description": "<p><span>Write a function that counts the number of times a specific digit occurs in a range (</span><strong><span>inclusive</span></strong><span>). The function will look like:</span></p><pre><code>digitOccurrences(min, max, digit) ➞ number of times digit occurs</code></pre><h3><span>Examples</span></h3><pre><code>digitOccurrences(51, 55, 5) ➞ 6\n// [51, 52, 53, 54, 55] : 5 occurs 6 times\n\ndigitOccurrences(1, 8, 9) ➞ 0\n\ndigitOccurrences(-8, -1, 8) ➞ 1\n\ndigitOccurrences(71, 77, 2) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Ranges can be negative.</span></li><li><code>min &lt;= max</code></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(digitOccurrences(51, 55, 5), 6)",
			"Test.assertEquals(digitOccurrences(1, 8, 9), 0)",
			"Test.assertEquals(digitOccurrences(71, 77, 2), 1)",
			"Test.assertEquals(digitOccurrences(1, 14, 4), 2)",
			"Test.assertEquals(digitOccurrences(20, 30, 2), 11)",
			"Test.assertEquals(digitOccurrences(18, 37, 3), 10)",
			"Test.assertEquals(digitOccurrences(5, 335, 6), 63)",
			"Test.assertEquals(digitOccurrences(-19, 19, 0), 3)",
			"Test.assertEquals(digitOccurrences(-8, -1, 8), 1)",
			"Test.assertEquals(digitOccurrences(-5, -5, 4), 0)",
			"Test.assertEquals(digitOccurrences(-5, -5, 5), 1)",
			"Test.assertEquals(digitOccurrences(-50, -45, 4), 5)",
			"Test.assertEquals(digitOccurrences(-500, -45, 4), 190)"
		],
		"starterFn": [
			"1\nfunction digitOccurrences(min, max, digit) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dqSPYsWFtsCLeeZC2"
	},
	{
		"title": "RegEx: Boundary Assertions VII",
		"description": "<p><span>You are needed to finish a program that lists how many bad cookies are produced every day. A list of all the cookies produced for the day is given in an array. All that's needed is a regular expression that will make the function work correctly.</span></p><pre><code>const cookies = [\"bad cookie\", \"good cookie\", \"bad cookie\", \"good cookie\", \"good cookie\"]\n\nfunction badCookies(res) {\n  const REGEXP = /* YOU FILL IN */\n  return res.filter( x =&gt; REGEXP.test(x)).length\n}\n\nbadCookies(res) // should output 2</code></pre><h3><span>Challenge</span></h3><ul><li><span>Write the regular expression to make the function output the correct number. </span></li><li><span>You're required to use a </span><strong><span>negative lookbehind</span></strong><span> assertion in your expression.</span></li></ul><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on </span><strong><span>negative lookbehind</span></strong><span> assertions.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"const cookies = [\"bad cookie\", \"good cookie\", \"bad cookie\", \"good cookie\", \"good cookie\"] ",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\(\\?\\<\\!/.test(String(REGEXP))) return () => \"negative lookbehind required\"",
			"   return function testReg(cookies) {",
			"     return cookies.filter(x => REGEXP.test(x)).length",
			"   }",
			"} ",
			"​",
			"const testExp = validate(REGEXP) ",
			"​",
			"Test.assertNotEquals(testExp(cookies), \"negative lookbehind required\", \"You are required to use a negative lookbehind in your expression.\")",
			"Test.assertSimilar(testExp(cookies), 2)"
		],
		"starterFn": [
			"1\nconst REGEXP = /* YOU FILL IN */"
		],
		"url": "https://edabit.com/challenge/mW3z9rJtR5gjcLpeu"
	},
	{
		"title": "How Many Rectangles?",
		"description": "<p><span>Create a function that takes a number </span><code>steps</code><span> as an argument and returns the amount of rectangles you can count in a matrix.</span></p><h3><span>Examples</span></h3><pre><code>rectangles(1) ➞ 1\n\nrectangles(2) ➞ 9\n\nrectangles(3) ➞ 36</code></pre><h3><span>Notes</span></h3><ul><li><span>The input will always be an integer.</span></li><li><span>Watch the video listed in the </span><strong><span>Resources</span></strong><span> tab to get three different formulas.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(rectangles(64), 4326400)",
			"Test.assertEquals(rectangles(76), 8561476)",
			"Test.assertEquals(rectangles(10), 3025)",
			"Test.assertEquals(rectangles(79), 9985600)",
			"Test.assertEquals(rectangles(84), 12744900)",
			"Test.assertEquals(rectangles(0), 0)",
			"Test.assertEquals(rectangles(60), 3348900)",
			"Test.assertEquals(rectangles(29), 189225)",
			"Test.assertEquals(rectangles(18), 29241)",
			"Test.assertEquals(rectangles(74), 7700625)",
			"Test.assertEquals(rectangles(16), 18496)",
			"Test.assertEquals(rectangles(64), 4326400)"
		],
		"starterFn": [
			"1\nfunction rectangles(step) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fgjtbbeZSy55ftXwa"
	},
	{
		"title": "Uno (Part 1)",
		"description": "<p><span>This question is inspired by the popular Uno card game.</span></p><p><span>Write a function that takes in two arguments: (1) a player's current hand and (2) the current face-up card on the table. The function will return </span><code>true</code><span> if the player can make a play, or </span><code>false</code><span> if the player has to draw from the deck.</span></p><p><span>A player can make a play if either:</span></p><ul><li><span>They have a card that is the same </span><strong><span>color</span></strong><span> as the face-up card.</span></li><li><span>They have a card that is the same </span><strong><span>number</span></strong><span> as the face-up card.</span></li></ul><pre><code>canPlay([\"yellow 3\", \"yellow 7\", \"blue 8\", \"red 9\", \"red 2\"], \"red 1\") =&gt; true\n// Since the player has two red cards, and the face-up card is red.\n\ncanPlay([\"yellow 3\", \"yellow 7\"], \"blue 7\") =&gt; true\n// Since the player has a 7, and the face-up card is a 7.</code></pre><h3><span>Examples</span></h3><pre><code>canPlay([\"yellow 3\", \"yellow 5\", \"red 8\"], \"red 2\") ➞ true\n\ncanPlay([\"yellow 3\", \"yellow 5\", \"red 8\"], \"blue 5\") ➞ true\n\ncanPlay([\"yellow 3\", \"blue 5\", \"red 8\", \"red 9\"], \"green 4\") ➞ false\n\ncanPlay([\"yellow 3\", \"red 8\"], \"green 2\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>false</code><span> if the player is not holding any cards (an empty array). </span></li><li><span>There are no special cards or wild cards in this deck.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games"
		],
		"tests": [
			"Test.assertEquals(canPlay(['yellow 3', 'yellow 5', 'red 8'], 'red 2'), true);",
			"Test.assertEquals(canPlay(['yellow 3', 'yellow 5', 'red 8'], 'blue 5'), true);",
			"Test.assertEquals(canPlay(['yellow 3', 'blue 5', 'red 8', 'red 9'], 'green 4'), false);",
			"Test.assertEquals(canPlay(['yellow 3', 'red 8'], 'green 2'), false);",
			"Test.assertEquals(canPlay(['yellow 5', 'yellow 8', 'red 0', 'blue 0', 'green 4'], 'green 2'), true);",
			"Test.assertEquals(canPlay([], 'green 2'), false);",
			"Test.assertEquals(canPlay(['red 2'], 'red 0'), true);",
			"Test.assertEquals(canPlay(['red 2', 'red 8', 'red 5'], 'blue 1'), false);"
		],
		"starterFn": [
			"1\nfunction canPlay(hand, face) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4hyR7qsvSRCLBXDCz"
	},
	{
		"title": "CreateSquare",
		"description": "<p><span>Create a function that takes a number as an argument and return the a string like square.</span></p><h3><span>Examples</span></h3><pre><code>createSquare(-1) ➞ \"\"\n\ncreateSquare(0) ➞ \"\"\n\ncreateSquare(1) ➞ \"#\"\n\ncreateSquare(2) ➞ \"##\\n##\"\n\ncreateSquare(3) ➞ \"###\\n# #\\n###\"\n\ncreateSquare(4) ➞ \"####\\n#  #\\n#  #\\n####\"</code></pre><pre><code>\"####\n#  #\n#  #\n####\"</code></pre><h3><span>Notes</span></h3><p><span>Square width &lt;= 16383</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"strings"
		],
		"tests": [
			"Test.assertEquals(createSquare(-1), \"\");",
			"Test.assertEquals(createSquare(0), \"\");",
			"Test.assertEquals(createSquare(null), \"\");",
			"Test.assertEquals(createSquare(1), \"#\");",
			"Test.assertEquals(createSquare(2), \"##\\n##\");",
			"Test.assertEquals(createSquare(3), \"###\\n# #\\n###\");",
			"Test.assertEquals(createSquare(4), \"####\\n#  #\\n#  #\\n####\");",
			"Test.assertEquals(createSquare(10), \"##########\\n#        #\\n#        #\\n#        #\\n#        #\\n#        #\\n#        #\\n#        #\\n#        #\\n##########\");",
			"Test.assertEquals(createSquare(20), \"####################\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n#                  #\\n####################\");",
			"Test.assertEquals(createSquare(12), \"############\\n#          #\\n#          #\\n#          #\\n#          #\\n#          #\\n#          #\\n#          #\\n#          #\\n#          #\\n#          #\\n############\");",
			"Test.assertEquals(createSquare(50), \"##################################################\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n#                                                #\\n##################################################\");",
			"Test.assertEquals(createSquare(30), \"##############################\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n#                            #\\n##############################\");",
			"Test.assertEquals(createSquare(21), \"#####################\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#                   #\\n#####################\");",
			"Test.assertEquals(createSquare(33), \"#################################\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#                               #\\n#################################\");",
			"Test.assertEquals(createSquare(80), \"################################################################################\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n#                                                                              #\\n################################################################################\");",
			"Test.assertEquals(getLength(createSquare(8000)), 64007999);",
			"Test.assertEquals(getLength(createSquare(4025)), 16204649);",
			"Test.assertEquals(getLength(createSquare(3018)), 9111341);",
			"Test.assertEquals(getLength(createSquare(2020)), 4082419);",
			"Test.assertEquals(getLength(createSquare(9856)), 97150591);",
			"Test.assertEquals(getLength(createSquare(7542)), 56889305);",
			"Test.assertEquals(getLength(createSquare(12540)), 157264139);",
			"Test.assertEquals(getLength(createSquare(13021)), 169559461);",
			"Test.assertEquals(getLength(createSquare(16200)), 262456199);",
			"Test.assertEquals(getLength(createSquare(16383)), 268419071);",
			"Test.assertEquals(getLength(createSquare(10235)), 104765459);"
		],
		"starterFn": [
			"1\nfunction createSquare(length){",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zk8Xrof2x55u9FBJ5"
	},
	{
		"title": "RegEx: Boundary Assertions VII",
		"description": "<p><span>You are given the task to fetch all positive numbers from lists. You discover that the lists are in string format and the numbers are separated by spaces. Someone has already created a function to output positive numbers but they just need a RegEx to make it work.</span></p><pre><code>const list = \"23 -43 34 -44 45 -55 56\"\n\nfunction positiveNumbers(list) {\n  const REGEXP = /* YOU FILL IN */\n  return res.filter( x =&gt; REGEXP.test(x))\n}\n\npositiveNumbers(list) // should return [\"23\", \"34\", \"45\", \"56\"]</code></pre><p><span>Write the </span><strong><span>regular expression</span></strong><span> to make the function work. You are required to use a </span><strong><span>negative lookbehind</span></strong><span> assertion in your expression.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on lookbehind assertions.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"const str1 = \"23 234 -2 334 -3\"",
			"const str2 = \"1 2 -3 -4 5\"",
			"const str3 = \"234 -3 -5 3\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\(\\?\\<\\!/.test(String(REGEXP))) return () => \"negative lookbehind required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"negative lookbehind required\", \"You are required to use a negative lookbehind in your expression.\")",
			"Test.assertSimilar(testExp(str1), [\"23\", \"234\", \"334\"])",
			"Test.assertSimilar(testExp(str2), [\"1\", \"2\", \"5\"])",
			"Test.assertSimilar(testExp(str3), [\"234\", \"3\"])"
		],
		"starterFn": [
			"1\nconst REGEXP = /* YOU FILL IN */"
		],
		"url": "https://edabit.com/challenge/HG93JYjse2r3mb9n3"
	},
	{
		"title": "The Antipodes Average",
		"description": "<p><span>In this challenge, you are given an array and in turn, you must obtain a smaller array, following three steps:</span></p><ul><li><span>Split the array into </span><strong><span>two parts of equal length</span></strong><span>. If the given array has an odd length, then you have to eliminate the number in the middle of the array for obtaining two equal parts.</span></li><li><span>Sum each number of the first part with each number of the </span><strong><span>reversed second part</span></strong><span>, obtaining a new single array having the same length of the previous two.</span></li><li><strong><span>Divide by two</span></strong><span> each number in the final array.</span></li></ul><p><span>Given an array of integers </span><code>arr</code><span>, implement a function that returns a new array applying the above algorithm.</span></p><h3><span>Examples</span></h3><pre><code>antipodesAverage([1, 2, 3, 4]) ➞ [2.5, 2.5]\n// Left part = [1, 2]\n// Reversed right part = [4, 3]\n// Array resulting from the sum of each pair = [5, 5]\n// Each number is divided by two = [2.5, 2.5]\n\nantipodesAverage([1, 2, 3, 4, 5]) ➞ [3, 3]\n// The length of array is odd, number 3 (in the middle) is eliminated\n// Left = [1, 2]\n// Reversed right = [5, 4]\n// Sum = [6, 6]\n// Division by two = [3, 3]\n\nantipodesAverage([-1, -2]) ➞ [-1.5]\n//  (-1 + -2) / 2 = [-1.5]</code></pre><h3><span>Notes</span></h3><ul><li><span>Every given </span><code>arr</code><span> will contain at least two numbers.</span></li><li><span>Into the given </span><code>arr</code><span>, numbers will always be whole (either positives or negatives), but the numbers into the returned final array can also be a float (either positives or negatives, see the examples #1 and #3).</span></li><li><span>You can do three separated steps, or thinking about how the algorithm can be synthesized for obtaining the result.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(antipodesAverage([1, 2, 3, 4]), [2.5, 2.5], \"Example #1\")",
			"Test.assertSimilar(antipodesAverage([1, 2, 3, 4, 5]), [3, 3], \"Example #2\")",
			"Test.assertSimilar(antipodesAverage([-1, -2]), [-1.5], \"Example #3\")",
			"Test.assertSimilar(antipodesAverage([1, 2, 5, 10]), [5.5, 3.5])",
			"Test.assertSimilar(antipodesAverage([1, 2, 3, 5, 7, 9]), [5, 4.5, 4])",
			"Test.assertSimilar(antipodesAverage([-1, -4, -12, -2, -11, -6]), [-3.5, -7.5, -7])",
			"Test.assertSimilar(antipodesAverage([5, -80, 66, -8, -6]), [-0.5, -44])",
			"Test.assertSimilar(antipodesAverage([-1, 0, 1]), [0])"
		],
		"starterFn": [
			"1\nfunction antipodesAverage(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NJ5GkgQbshyDDX3bq"
	},
	{
		"title": "Instances of the Fibonacci Sequence",
		"description": "<p><span>Create a function that takes a number as an argument and returns </span><code>n</code><span> instances of the Fibonacci sequence as an array.</span></p><p><span>Fibonacci numbers: </span><code>F(n) = F(n-1) + F(n-2) with F(0) = 0</code><span> and </span><code>F(1) = 1</code><span>. So the easy explanation is: The next element is the sum of the two previous elements.</span></p><p><span>If you want to read more about this sequence, take a look at the </span><em><span>On-Line Encyclopedia of Integer Sequences</span></em><span>. Fibonacci numbers are strongly related to the golden ratio. See the OEIS and Wikipedia links in the </span><strong><span>resources tab</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>fibSeq(4) ➞ [0, 1, 1, 2]\n\nfibSeq(7) ➞ [0, 1, 1, 2, 3, 5, 8]\n\nfibSeq(0) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If 0 is given, return an empty array.</span></li><li><span>If no argument is given, return </span><code>undefined</code><span>.</span></li><li><span>The input will never be a negative integer.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(fibSeq(2), [0,1])",
			"Test.assertSimilar(fibSeq(4), [0,1,1,2])",
			"Test.assertSimilar(fibSeq(0), [])",
			"Test.assertSimilar(fibSeq(7), [0,1,1,2,3,5,8])",
			"Test.assertSimilar(fibSeq(), undefined, 'An empty input has to return undefined')",
			"Test.assertSimilar(fibSeq(20), [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181])",
			"Test.assertSimilar(fibSeq(1), [0])"
		],
		"starterFn": [
			"1\nfunction fibSeq(end) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PeDpzoeGyv9TfF5G5"
	},
	{
		"title": "The Conquering Queen",
		"description": "<p><span>In chess, queens can move any number of squares horizontally, vertically or diagonally.</span></p><p><span>Given the location of your queen and your opponents' queen, determine whether or not you're able to capture your opponent's queen. Your location and your opponents' location are the first and second elements of the array, respectively.</span></p><h3><span>Examples</span></h3><pre><code>canCapture([\"A1\", \"H8\"]) ➞ true\n// Your queen can move diagonally to capture opponents' piece.\n\ncanCapture([\"A1\", \"C2\"]) ➞ false\n// Your queen cannot reach C2 from A1 (although a knight could).\n\ncanCapture([\"G3\", \"E5\"]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Assume there are no blocking pieces.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"games",
			"strings"
		],
		"tests": [
			"Test.assertEquals(canCapture([\"A1\", \"H8\"]), true);",
			"Test.assertEquals(canCapture([\"A1\", \"C2\"]), false);",
			"Test.assertEquals(canCapture([\"G3\", \"E5\"]), true);",
			"Test.assertEquals(canCapture([\"D3\", \"C2\"]), true);",
			"Test.assertEquals(canCapture([\"F4\", \"C1\"]), true);",
			"Test.assertEquals(canCapture([\"H1\", \"A7\"]), false);",
			"Test.assertEquals(canCapture([\"H1\", \"A8\"]), true);",
			"Test.assertEquals(canCapture([\"G1\", \"G2\"]), true);",
			"Test.assertEquals(canCapture([\"A5\", \"G5\"]), true);",
			"Test.assertEquals(canCapture([\"A5\", \"E2\"]), false);"
		],
		"starterFn": [
			"1\nfunction canCapture([myQueen, opponentsQueen]) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/f9Xi45wjDjfD4v4nD"
	},
	{
		"title": "RegEx XXII : Unicode property escapes",
		"description": "<p><strong><span>Unicode property escapes</span></strong><span> match characters based on their </span><strong><span>Unicode properties</span></strong><span> -  Binary (\"boolean-like\") or non-binary. They can be used to match emojis, punctuations, letters (even letters from specific languages or scripts), etc.</span></p><pre><code>const sentence = \"A ticket to 大阪 costs ¥2000 👌.\"\n\nsentence.match(/\\p{Emoji_Presentation}/gu) ➞ [\"👌\"]</code></pre><p><strong><span>Note</span></strong><span>: For Unicode property escapes to work, a regular expression must use the u flag which indicates a string must be considered as a series of Unicode code points. See also RegExp.prototype.unicode.</span></p><p><strong><span>Note</span></strong><span>: Some Unicode properties encompasses much more characters than some character classes (such as \\w which matches only latin letters, a to z) but the latter is better supported among browsers (as of January 2020).</span></p><p><span>Match all words in the </span><strong><span>nonEnglishText</span></strong><span> using a </span><strong><span>unicode property escape</span></strong><span>.</span></p><pre><code>const nonEnglishText = \"Приключения Алисы в Стране чудес\"\n\nconst regex = /\\w+/gu\nnonEnglishText.match(regex) ➞ null, \\w doesn't work with non english text\n\nconst regexpBMPWord = /([\\u0000-\\u0019\\u0021-\\uFFFF])+/gu\nnonEnglishText.match(regexpBMPWord) ➞ [ 'Приключения', 'Алисы', 'в', 'Стране', 'чудес' ], this works\n\nconst regexpUPE = /YOUR SOLUTION HERE/gu\nnonEnglishText.match(regexpUPE) ➞ [ 'Приключения', 'Алисы', 'в', 'Стране', 'чудес' ], an easier way</code></pre><h3><span>Notes</span></h3><p><span>You will more than likely have to check the references in the </span><strong><span>Resource</span></strong><span> tab to solve.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const str = \"Приключения Алисы в Стране чудес\";",
			"​",
			"const validate = (regexpUPE) => {",
			"   if(!/\\p\\{/.test(String(regexpUPE))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return str.match(regexpUPE)",
			"   }",
			"}",
			"​",
			"const testExp = validate(regexpUPE)",
			"​",
			"Test.assertNotEquals(testExp(str), \"invalid\", \"You are required to use a unicode property escape in your expression\")",
			"Test.assertSimilar(testExp(str), [ 'Приключения', 'Алисы', 'в', 'Стране', 'чудес' ])",
			"​",
			"// credits to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes"
		],
		"starterFn": [
			"1\nconst regexpUPE = /* Write your expression here */gu"
		],
		"url": "https://edabit.com/challenge/evCmPj8YLm2okcunf"
	},
	{
		"title": "Is the Input Factorial of an Integer?",
		"description": "<p><span>Create a function to check if a given integer is a factorial of integer or not. The return value should be a boolean.</span></p><h3><span>Examples</span></h3><pre><code>isFactorial(2) ➞ true\n// 2 = 2 * 1 = 2!\n\nisFactorial(27) ➞ false\n\nisFactorial(24) ➞ true\n// 24 = 4 * 3 * 2 * 1 = 4!</code></pre><h3><span>Notes</span></h3><ul><li><span>Input is a positive integer.</span></li><li><span>Alternatively, you can solve this with a recursive approach.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"recursion",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isFactorial(6), true)",
			"Test.assertEquals(isFactorial(16), false)",
			"Test.assertEquals(isFactorial(24), true)",
			"Test.assertEquals(isFactorial(36), false)",
			"Test.assertEquals(isFactorial(720), true)",
			"Test.assertEquals(isFactorial(120), true)"
		],
		"starterFn": [
			"1\nfunction isFactorial(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cAHN6sDdk8dSCoS2r"
	},
	{
		"title": "Spelling Bee",
		"description": "<p><span>Given a sentence spelling out a word, return </span><code>true</code><span> if the spelled letters match the </span><em><span>word at the end of the string</span></em><span>, or </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>validateSpelling(\"C. Y. T. O. P. L. A. S. M. Cytoplasm?\") ➞ true\n\nvalidateSpelling(\"P. H. A. R. A. O. H. Pharaoh!\") ➞ true\n\nvalidateSpelling(\"H. A. N. K. E. R. C. H. E. I. F. Handkerchief.\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The word at the end is </span><strong><span>always spelled correctly</span></strong><span>.</span></li><li><span>Spelled letters and words will always end in punctuation (but ignore all punctuation).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validateSpelling(\"C. Y. T. O. P. L. A. S. M. Cytoplasm?\"), true)",
			"Test.assertEquals(validateSpelling(\"P. H. A. R. A. O. H. Pharaoh!\"), true)",
			"Test.assertEquals(validateSpelling(\"H. A. N. K. E. R. C. H. E. I. F. Handkerchief.\"), false)",
			"Test.assertEquals(validateSpelling(\"M. E. C. O. M. M. E. N. N. Recommend.\"), false)",
			"Test.assertEquals(validateSpelling(\"C. H. R. Y. S. A. N. T. H. E. M. U. M. Chrysanthemum!\"), true)",
			"Test.assertEquals(validateSpelling(\"A. C. C. O. M. M. O. D. A. M. E. Accommodate!\"), false)",
			"Test.assertEquals(validateSpelling(\"S. U. A. C. E. I. L. L. A. N. C. E. Surveillance.\"), false)",
			"Test.assertEquals(validateSpelling(\"B. U. S. I. N. E. S. S. Business.\"), true)",
			"Test.assertEquals(validateSpelling(\"C. O. N. V. E. N. I. E. N. T. Convenient.\"), true)",
			"Test.assertEquals(validateSpelling(\"C. O. N. V. E. N. O. E. N. T. Convenient!\"), false)",
			"Test.assertEquals(validateSpelling(\"C. H. A. U. F. F. E. U. R. Chauffeur.\"), true)",
			"Test.assertEquals(validateSpelling(\"L. I. A. A. S. O. N. Liaison!\"), false)",
			"Test.assertEquals(validateSpelling(\"O. C. C. U. R. R. E. N. C. E. Occurrence?\"), true)",
			"Test.assertEquals(validateSpelling(\"E. C. C. C. R. R. E. N. C. E. Occurrence!\"), false)",
			"Test.assertEquals(validateSpelling(\"E. A. B. A. R. R. A. S. S. Embarrass!\"), false)",
			"Test.assertEquals(validateSpelling(\"C. O. N. V. E. N. I. E. N. T. Convenient?\"), true)",
			"Test.assertEquals(validateSpelling(\"U. N. C. O. N. S. C. I. C. U. U. Unconscious!\"), false)",
			"Test.assertEquals(validateSpelling(\"I. E. D. R. D. Weird!\"), false)",
			"Test.assertEquals(validateSpelling(\"D. F. F. T. N. I. T. E. L. Y. Definitely?\"), false)",
			"Test.assertEquals(validateSpelling(\"C. A. A. E. N. D. A. R. Calendar.\"), false)",
			"Test.assertEquals(validateSpelling(\"A. C. C. O. M. M. O. D. C. T. E. Accommodate!\"), false)",
			"Test.assertEquals(validateSpelling(\"A. C. C. O. M. M. O. D. A. O. O. Accommodate!\"), false)",
			"Test.assertEquals(validateSpelling(\"S. U. R. V. E. I. L. L. A. N. C. E. Surveillance.\"), true)",
			"Test.assertEquals(validateSpelling(\"S. E. P. A. R. A. T. E. Separate!\"), true)",
			"Test.assertEquals(validateSpelling(\"Q. U. O. S. T. I. O. N. N. A. U. R. E. Questionnaire.\"), false)",
			"Test.assertEquals(validateSpelling(\"S. E. S. A. R. A. T. E. Separate!\"), false)"
		],
		"starterFn": [
			"1\nfunction validateSpelling(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LFdGBECCHWfyyZ7fg"
	},
	{
		"title": "RegEx Exercise 3: Find All Numbers",
		"description": "<p><span>Write a </span><strong><span>RegExp</span></strong><span> that looks for all decimal numbers including integer ones, with the floating point and negative ones.</span></p><h3><span>Example</span></h3><pre><code>const REGEXP = /your regexp/g\n\nlet str = \"-1.5 0 2 -123.4.\"\n\nstr.match(REGEXP)  ➞ -1.5, 0, 2, -123.4</code></pre><h3><span>Notes</span></h3><p><span>The solution is in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"const str = \"-1.5 0 2 -123.4.\";",
			"​",
			"const validate = (REGEXP) => {",
			"   // if(!//.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"// Test.assertNotEquals(testExp(str), \"invalid\", \"Nothing new here\")",
			"Test.assertSimilar(testExp(str), [\"-1.5\", \"0\", \"2\", \"-123.4\"])",
			"​",
			"// credits to https://javascript.info/regexp-groups"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/e5PvcKmnbdNahT9TZ"
	},
	{
		"title": "What's My Golf Score?",
		"description": "<p><span>A standard-sized golf course has 18 holes. Each hole is given a </span><em><span>par</span></em><span>, which is the expected number of strokes (hits) that a good player would use to complete a hole. Golf also uses different terms for a player being over/under par for a particular hole:</span></p><ul><li><span>\"eagle\" = 2 under par (-2)</span></li><li><span>\"birdie\" = 1 under par (-1)</span></li><li><span>\"bogey\" = 1 over par (+1)</span></li><li><span>\"double-bogey\" = 2 over par (+2)</span></li></ul><p><span>Example scores:</span></p><ul><li><span>\"birdie\" on a par 3 hole = 2</span></li><li><span>\"eagle\" on a par 5 hole = 3</span></li><li><span>\"par\" on a par 3 hole = 3</span></li><li><span>\"bogey\" on a par 4 hole = 5</span></li></ul><p><span>Given an array of pars for an 18-hole golf course, and another array containing the player result for each hole, return the </span><strong><span>total score</span></strong><span> for the round of golf.</span></p><h3><span>Example</span></h3><pre><code>course = [4, 4, 5, 3, 4, 4, 3, 5, 5, 3, 5, 4, 4, 4, 4, 3, 4, 4]\n\nresult = [\"eagle\", \"bogey\", \"par\", \"bogey\", \"double-bogey\", \"birdie\", \"bogey\", \"par\", \"birdie\", \"par\", \"par\", \"par\", \"par\", \"par\", \"bogey\", \"eagle\", \"bogey\", \"par\"]\n\nscore = 2+5+5+4+6+3+4+5+4+3+5+4+4+4+5+1+5+4 = 73</code></pre><h3><span>Notes</span></h3><p><span>For this challenge, there will be no </span><em><span>holes-in-one</span></em><span>, </span><em><span>albatrosses</span></em><span> (-3), or anything worse than a double-bogey.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(golfScore([4, 4, 4, 4, 5, 3, 3, 4, 3, 5, 4, 4, 3, 4, 5, 4, 4, 5], ['double-bogey', 'par', 'par', 'double-bogey', 'eagle', 'par', 'bogey', 'birdie', 'birdie', 'bogey', 'par', 'birdie', 'par', 'par', 'par', 'par', 'bogey', 'par']), 74)",
			"Test.assertEquals(golfScore([5, 4, 4, 4, 4, 4, 5, 4, 3, 3, 4, 5, 3, 4, 4, 3, 5, 4], ['par', 'bogey', 'birdie', 'bogey', 'par', 'birdie', 'par', 'bogey', 'eagle', 'par', 'par', 'birdie', 'par', 'eagle', 'double-bogey', 'birdie', 'par', 'birdie']), 68)",
			"Test.assertEquals(golfScore([4, 3, 4, 4, 5, 4, 5, 4, 4, 4, 3, 5, 4, 4, 3, 4, 3, 5], ['bogey', 'par', 'birdie', 'par', 'par', 'birdie', 'bogey', 'par', 'par', 'double-bogey', 'par', 'double-bogey', 'par', 'eagle', 'par', 'par', 'par', 'par']), 74)",
			"Test.assertEquals(golfScore([4, 5, 4, 4, 4, 5, 5, 3, 4, 5, 4, 3, 4, 3, 3, 4, 4, 4], ['par', 'par', 'eagle', 'bogey', 'birdie', 'par', 'par', 'par', 'birdie', 'eagle', 'bogey', 'bogey', 'par', 'par', 'par', 'par', 'birdie', 'bogey']), 69)",
			"Test.assertEquals(golfScore([5, 5, 3, 5, 4, 4, 3, 4, 4, 4, 3, 3, 4, 4, 4, 5, 4, 4], ['birdie', 'par', 'par', 'par', 'bogey', 'bogey', 'bogey', 'double-bogey', 'par', 'par', 'par', 'par', 'eagle', 'par', 'double-bogey', 'par', 'birdie', 'par']), 75)",
			"Test.assertEquals(golfScore([4, 4, 4, 4, 5, 3, 4, 4, 3, 5, 3, 4, 5, 3, 4, 5, 4, 4], ['eagle', 'par', 'birdie', 'par', 'par', 'par', 'bogey', 'birdie', 'par', 'bogey', 'birdie', 'double-bogey', 'par', 'par', 'par', 'par', 'par', 'par']), 71)",
			"Test.assertEquals(golfScore([4, 5, 4, 4, 4, 4, 3, 5, 4, 3, 5, 5, 4, 3, 3, 4, 4, 4], ['par', 'par', 'bogey', 'birdie', 'birdie', 'par', 'par', 'par', 'par', 'bogey', 'par', 'par', 'birdie', 'par', 'birdie', 'bogey', 'birdie', 'double-bogey']), 72)",
			"Test.assertEquals(golfScore([4, 5, 3, 4, 4, 4, 4, 3, 4, 5, 4, 5, 4, 4, 4, 3, 5, 3], ['double-bogey', 'birdie', 'eagle', 'par', 'par', 'birdie', 'par', 'par', 'double-bogey', 'par', 'par', 'par', 'birdie', 'par', 'bogey', 'par', 'birdie', 'par']), 71)",
			"Test.assertEquals(golfScore([5, 5, 4, 5, 3, 4, 3, 4, 5, 3, 4, 4, 4, 4, 4, 4, 3, 4], ['par', 'par', 'eagle', 'bogey', 'bogey', 'par', 'birdie', 'par', 'par', 'par', 'par', 'birdie', 'birdie', 'eagle', 'par', 'birdie', 'par', 'birdie']), 65)",
			"Test.assertEquals(golfScore([5, 3, 4, 4, 4, 4, 5, 3, 4, 4, 4, 3, 4, 5, 4, 5, 4, 3], ['bogey', 'eagle', 'par', 'eagle', 'bogey', 'birdie', 'par', 'par', 'birdie', 'birdie', 'eagle', 'birdie', 'par', 'double-bogey', 'par', 'bogey', 'bogey', 'par']), 68)",
			"Test.assertEquals(golfScore([5, 4, 4, 3, 5, 4, 4, 4, 4, 5, 4, 3, 4, 3, 4, 5, 4, 3], ['birdie', 'par', 'par', 'par', 'par', 'par', 'par', 'eagle', 'birdie', 'par', 'bogey', 'birdie', 'bogey', 'birdie', 'par', 'par', 'birdie', 'par']), 67)",
			"Test.assertEquals(golfScore([4, 4, 4, 3, 4, 4, 4, 5, 4, 3, 4, 3, 5, 3, 4, 5, 4, 5], ['double-bogey', 'par', 'bogey', 'birdie', 'par', 'par', 'birdie', 'par', 'par', 'par', 'par', 'par', 'bogey', 'par', 'par', 'birdie', 'birdie', 'par']), 72)",
			"Test.assertEquals(golfScore([4, 3, 4, 4, 3, 5, 4, 4, 5, 3, 4, 3, 5, 4, 4, 4, 5, 4], ['par', 'eagle', 'bogey', 'par', 'birdie', 'bogey', 'par', 'par', 'birdie', 'par', 'par', 'double-bogey', 'par', 'bogey', 'bogey', 'double-bogey', 'par', 'bogey']), 77)",
			"Test.assertEquals(golfScore([3, 4, 5, 3, 4, 5, 3, 5, 4, 4, 4, 4, 4, 3, 5, 4, 4, 4], ['double-bogey', 'par', 'par', 'par', 'bogey', 'par', 'par', 'par', 'par', 'birdie', 'par', 'eagle', 'eagle', 'bogey', 'par', 'birdie', 'bogey', 'double-bogey']), 73)",
			"Test.assertEquals(golfScore([3, 4, 5, 4, 4, 3, 5, 4, 4, 4, 4, 4, 5, 3, 5, 3, 4, 4], ['double-bogey', 'par', 'par', 'par', 'par', 'birdie', 'par', 'bogey', 'bogey', 'par', 'par', 'birdie', 'par', 'par', 'par', 'par', 'birdie', 'bogey']), 74)",
			"Test.assertEquals(golfScore([5, 3, 4, 3, 4, 5, 4, 4, 4, 4, 4, 3, 4, 5, 5, 4, 3, 4], ['par', 'double-bogey', 'par', 'birdie', 'eagle', 'eagle', 'birdie', 'birdie', 'eagle', 'par', 'par', 'par', 'par', 'par', 'eagle', 'birdie', 'bogey', 'bogey']), 64)",
			"Test.assertEquals(golfScore([5, 4, 4, 3, 4, 5, 4, 3, 3, 4, 4, 4, 4, 5, 3, 5, 4, 4], ['bogey', 'birdie', 'birdie', 'par', 'eagle', 'par', 'birdie', 'par', 'par', 'eagle', 'par', 'bogey', 'par', 'par', 'par', 'eagle', 'par', 'par']), 65)",
			"Test.assertEquals(golfScore([4, 4, 4, 4, 5, 3, 5, 4, 4, 4, 3, 3, 3, 5, 4, 5, 4, 4], ['par', 'par', 'par', 'eagle', 'birdie', 'birdie', 'bogey', 'eagle', 'bogey', 'eagle', 'par', 'birdie', 'bogey', 'bogey', 'par', 'bogey', 'par', 'par']), 68)",
			"Test.assertEquals(golfScore([4, 5, 5, 3, 3, 4, 5, 3, 5, 4, 3, 4, 4, 4, 4, 4, 4, 4], ['par', 'bogey', 'par', 'par', 'bogey', 'par', 'birdie', 'birdie', 'eagle', 'bogey', 'par', 'par', 'par', 'eagle', 'bogey', 'double-bogey', 'par', 'eagle']), 70)",
			"Test.assertEquals(golfScore([4, 5, 3, 4, 4, 4, 5, 5, 4, 4, 4, 3, 4, 4, 3, 5, 3, 4], ['par', 'birdie', 'par', 'birdie', 'eagle', 'birdie', 'par', 'par', 'par', 'par', 'par', 'birdie', 'par', 'double-bogey', 'par', 'birdie', 'bogey', 'eagle']), 66)"
		],
		"starterFn": [
			"1\nfunction golfScore(course, result) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NENuEMyxCoPzxwq5D"
	},
	{
		"title": "Keeping Count",
		"description": "<p><span>Given a number, create a function which returns a new number based on the following rules:</span></p><ul><li><span>For each digit, replace it by the number of times it appears in the number.</span></li><li><span>The final instance of the number will be an integer, not as a string.</span></li></ul><p><span>The following is a working example:</span></p><pre><code>digitCount(136116) ➞ 312332\n// The number 1 appears thrice, so replace all 1s with 3s.\n// The number 3 appears only once, so replace all 3s with 1s.\n// The number 6 appears twice, so replace all 6s with 2s.</code></pre><h3><span>Examples</span></h3><pre><code>digitCount(221333) ➞ 221333\n\ndigitCount(136116) ➞ 312332\n\ndigitCount(2) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>Each test will have a positive whole number in its parameter.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(digitCount(221333), 221333)",
			"Test.assertEquals(digitCount(136116), 312332)",
			"Test.assertEquals(digitCount(2), 1)",
			"Test.assertEquals(digitCount(3410515780), 1122222112)",
			"Test.assertEquals(digitCount(24677734541), 13133313131)",
			"Test.assertEquals(digitCount(79825929634), 13121323111)",
			"Test.assertEquals(digitCount(36123594675), 22112211212)",
			"Test.assertEquals(digitCount(62849835970), 11212211211)",
			"Test.assertEquals(digitCount(29081455325), 21111133123)",
			"Test.assertEquals(digitCount(94717270184), 12323131212)",
			"Test.assertEquals(digitCount(72017589759), 31113212322)",
			"Test.assertEquals(digitCount(53569357419), 32312231112)",
			"Test.assertEquals(digitCount(33879999825), 22214444211)",
			"Test.assertEquals(digitCount(33600360627), 33333333311)",
			"Test.assertEquals(digitCount(12594580129), 22221211222)",
			"Test.assertEquals(digitCount(36852564216), 13122231213)",
			"Test.assertEquals(digitCount(34415793631), 32221113132)",
			"Test.assertEquals(digitCount(76384607724), 32112213312)",
			"Test.assertEquals(digitCount(8604519582), 2111211221)",
			"Test.assertEquals(digitCount(70209476552), 22221121222)",
			"Test.assertEquals(digitCount(20036302062), 34422243423)",
			"Test.assertEquals(digitCount(77674727011), 55151515122)",
			"Test.assertEquals(digitCount(17597066090), 12122322323)",
			"Test.assertEquals(digitCount(79082080537), 21321323112)",
			"Test.assertEquals(digitCount(30187177000), 14213233444)",
			"Test.assertEquals(digitCount(72916170033), 21121222222)"
		],
		"starterFn": [
			"1\nfunction digitCount(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TCEYq7KYJE3ogvt9j"
	},
	{
		"title": "Numeric Seesaw",
		"description": "<p><span>A number is </span><strong><span>left-heavy</span></strong><span> if the digits on the left side are larger than the digits on the right. It is </span><strong><span>right-heavy</span></strong><span> if the digits on the right side are larger than the digits on the left. Else, it is </span><strong><span>balanced</span></strong><span>.</span></p><p><span>Create a function that takes in an integer and classifies it into one of the three mutually exclusive categories: </span><strong><span>left</span></strong><span>, </span><strong><span>right</span></strong><span> or </span><strong><span>balanced</span></strong><span>. For inputs with an odd number of integers, ignore the fulcrum (the middle number).</span></p><h3><span>Examples</span></h3><pre><code>seesaw(3449) ➞ \"right\"\n// since 34 &lt; 49\n\nseesaw(1143113) ➞ \"left\"\n// since 114 &gt; 113 (3 is the fulcrum)\n\nseesaw(585585) ➞ \"balanced\"\n// since 585 == 585</code></pre><h3><span>Notes</span></h3><p><span>If input is </span><code>null</code><span> or </span><code>undefined</code><span> return </span><code>\"balanced\"</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(seesaw(3449), \"right\")",
			"Test.assertEquals(seesaw(1143113), \"left\")",
			"Test.assertEquals(seesaw(585585), \"balanced\")",
			"Test.assertEquals(seesaw(11), \"balanced\")",
			"Test.assertEquals(seesaw(111), \"balanced\")",
			"Test.assertEquals(seesaw(1), \"balanced\")",
			"Test.assertEquals(seesaw(5855), \"left\")",
			"Test.assertEquals(seesaw(5558), \"right\")",
			"Test.assertEquals(seesaw(null), \"balanced\", 'Return balanced when null.')",
			"Test.assertEquals(seesaw(undefined), \"balanced\", 'Return balanced when undefined.')"
		],
		"starterFn": [
			"1\nfunction seesaw(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YoYtzAtQiiyb5Z3Qu"
	},
	{
		"title": "The Secret Bases of Words",
		"description": "<p><span>In this challenge, you have to find the numeric value of a given word. Instead of the usual sum of Unicode values, you have to convert the whole word into a decimal number from a base equal to ten plus the position in the alphabet of the \"highest\" letter of the word (counting from </span><code>a = 1</code><span> to </span><code>z = 26</code><span>).</span></p><p><span>Given a string </span><code>word</code><span>, implement a function that returns an integer being the decimal value obtained after the conversion from the </span><code>word</code><span> specific base, accordingly to the instructions above.</span></p><h3><span>Examples</span></h3><pre><code>wordToDecimal(\"Edabit\") ➞ 351010469\n// The highest letter of \"Edabit\" in the alphabet is \"T\"\n// \"T\" is the 20th letter of the alphabet: adding 10 the result is 30\n// \"Edabit\" in base30 is equal to 351010469 in base10\n\nwordToDecimal(\"JavaScript\") ➞ 680575028284221\n// The highest letter of \"JavaScript\" in the alphabet is \"v\"\n// \"v\" is the 22th letter of the alphabet: adding 10 the result is 32\n// \"JavaScript\" in base32 is equal to 680575028284221 in base10\n\nwordToDecimal(\"ZERO\") ➞ 1652100\n// The highest letter of \"ZERO\" in the alphabet is \"Z\"\n// \"Z\" is the 26th letter of the alphabet: adding 10 the result is 36\n// \"ZERO\" in base36 is equal to 1652100 in base10</code></pre><h3><span>Notes</span></h3><ul><li><span>The bases that accept letters in their representation are those starting from 11 (using 10 digits and 1 letter) up to 36 (using 10 digits and 26 letters).</span></li><li><strong><span>JS Note:</span></strong><span> This challenge is thinked and designed to avoid results bigger than the max safe integer representable in JS, so that the </span><code>BigInt()</code><span> method will be not necessary to pass it.</span></li><li><span>Every given </span><code>word</code><span> will be a valid one made of just letters, either lowercased or uppercased.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordToDecimal(\"Edabit\"), 351010469, \"Example #1\")",
			"Test.assertEquals(wordToDecimal(\"JavaScript\"), 680575028284221, \"Example #2\")",
			"Test.assertEquals(wordToDecimal(\"ZERO\"), 1652100, \"Example #3\")",
			"Test.assertEquals(wordToDecimal(\"oNe\"), 15589)",
			"Test.assertEquals(wordToDecimal(\"TwO\"), 32661)",
			"Test.assertEquals(wordToDecimal(\"THRee\"), 23973734)",
			"Test.assertEquals(wordToDecimal(\"Four\"), 470886)",
			"Test.assertEquals(wordToDecimal(\"fIVe\"), 510958)",
			"Test.assertEquals(wordToDecimal(\"SIx\"), 33013)",
			"Test.assertEquals(wordToDecimal(\"seven\"), 29851095)",
			"Test.assertEquals(wordToDecimal(\"eigHt\"), 11840939)"
		],
		"starterFn": [
			"1\nfunction wordToDecimal(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fxMe9pKFgfHgujahQ"
	},
	{
		"title": "Making a Box",
		"description": "<p><span>Create a function that creates a box based on dimension </span><strong><span>n</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>makeBox(5) ➞ [\n  \"#####\",\n  \"#   #\",\n  \"#   #\",\n  \"#   #\",\n  \"#####\"\n]\n\nmakeBox(3) ➞ [\n  \"###\",\n  \"# #\",\n  \"###\"\n]\n\nmakeBox(2) ➞ [\n  \"##\",\n  \"##\"\n]\n\nmakeBox(1) ➞ [\n  \"#\"\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(makeBox(5), [",
			"    \"#####\",",
			"    \"#   #\",",
			"    \"#   #\",",
			"    \"#   #\",",
			"    \"#####\"",
			"])",
			"​",
			"Test.assertSimilar(makeBox(6), [",
			"    \"######\",",
			"    \"#    #\",",
			"    \"#    #\",",
			"    \"#    #\",",
			"    \"#    #\",",
			"    \"######\"",
			"])",
			"​",
			"Test.assertSimilar(makeBox(4), [",
			"    \"####\",",
			"    \"#  #\",",
			"    \"#  #\",",
			"    \"####\"",
			"])",
			"​",
			"Test.assertSimilar(makeBox(2), [",
			"    \"##\","
		],
		"starterFn": [
			"1\nfunction makeBox(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eqzf7Mtxqa6bgQX3o"
	},
	{
		"title": "Number of Leap Years",
		"description": "<p><span>Given a range of years as a string, return the </span><strong><span>number of leap years</span></strong><span> there are within the range (inclusive).</span></p><h3><span>Examples</span></h3><pre><code>numLeapYears(\"1980-1984\") ➞ 2\n// 1980 and 1984 are leapyears.\n\nnumLeapYears(\"2000-2020\") ➞ 6\n\nnumLeapYears(\"1600-2000\") ➞ 98</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember that a </span><em><span>hyphen</span></em><span> separates the years.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for help on checking whether a year is a leap year.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(numLeapYears(\"2000-2020\"), 6)",
			"Test.assertEquals(numLeapYears(\"1600-2000\"), 98)",
			"Test.assertEquals(numLeapYears(\"1980-1984\"), 2)",
			"Test.assertEquals(numLeapYears(\"1224-8090\"), 1666)",
			"Test.assertEquals(numLeapYears(\"2486-7607\"), 1241)",
			"Test.assertEquals(numLeapYears(\"1813-4354\"), 616)",
			"Test.assertEquals(numLeapYears(\"772-1849\"), 262)",
			"Test.assertEquals(numLeapYears(\"2228-7099\"), 1182)",
			"Test.assertEquals(numLeapYears(\"1349-6325\"), 1206)",
			"Test.assertEquals(numLeapYears(\"1803-3828\"), 492)",
			"Test.assertEquals(numLeapYears(\"295-6278\"), 1451)",
			"Test.assertEquals(numLeapYears(\"107-1821\"), 416)",
			"Test.assertEquals(numLeapYears(\"2912-6566\"), 887)",
			"Test.assertEquals(numLeapYears(\"1006-5181\"), 1013)",
			"Test.assertEquals(numLeapYears(\"2876-9210\"), 1536)",
			"Test.assertEquals(numLeapYears(\"1189-5481\"), 1041)",
			"Test.assertEquals(numLeapYears(\"1325-1409\"), 20)",
			"Test.assertEquals(numLeapYears(\"2665-3338\"), 163)",
			"Test.assertEquals(numLeapYears(\"1886-3577\"), 410)",
			"Test.assertEquals(numLeapYears(\"2951-4523\"), 381)",
			"Test.assertEquals(numLeapYears(\"2651-7572\"), 1194)",
			"Test.assertEquals(numLeapYears(\"2036-3126\"), 264)",
			"Test.assertEquals(numLeapYears(\"1602-6986\"), 1306)",
			"Test.assertEquals(numLeapYears(\"35-602\"), 137)",
			"Test.assertEquals(numLeapYears(\"38-1709\"), 405)",
			"Test.assertEquals(numLeapYears(\"801-2232\"), 347)"
		],
		"starterFn": [
			"1\nfunction numLeapYears(years) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EzxPadgs3Y9hYWymS"
	},
	{
		"title": "camelCase ⇄ snake_case",
		"description": "<p><span>Create two functions </span><code>toCamelCase()</code><span> and </span><code>toSnakeCase()</code><span> that each take a single string and convert it into either camelCase or snake_case. If you're not sure what these terms mean, check the </span><strong><span>Resources</span></strong><span> tab above.</span></p><h3><span>Examples</span></h3><pre><code>toCamelCase(\"hello_edabit\") ➞ \"helloEdabit\"\n\ntoSnakeCase(\"helloEdabit\") ➞ \"hello_edabit\"\n\ntoCamelCase(\"is_modal_open\") ➞ \"isModalOpen\"\n\ntoSnakeCase(\"getColor\") ➞ \"get_color\"</code></pre><h3><span>Notes</span></h3><p><span>Test input will always be appropriately formatted as either camelCase or snake_case, depending on the function being called.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"// camelCase to snake_case tests",
			"Test.assertEquals(toSnakeCase(\"edabit\"), \"edabit\");",
			"Test.assertEquals(toSnakeCase(\"helloEdabit\"), \"hello_edabit\");",
			"Test.assertEquals(toSnakeCase(\"isModalOpen\"), \"is_modal_open\");",
			"Test.assertEquals(toSnakeCase(\"getBackgroundColor\"), \"get_background_color\");",
			"Test.assertEquals(toSnakeCase(\"isLoading\"), \"is_loading\");",
			"Test.assertEquals(toSnakeCase(\"x\"), \"x\");",
			"​",
			"// snake_case to camelCase tests",
			"Test.assertEquals(toCamelCase(\"edabit\"), \"edabit\");",
			"Test.assertEquals(toCamelCase(\"hello_edabit\"), \"helloEdabit\");",
			"Test.assertEquals(toCamelCase(\"is_modal_open\"), \"isModalOpen\");",
			"Test.assertEquals(toCamelCase(\"get_background_color\"), \"getBackgroundColor\");",
			"Test.assertEquals(toCamelCase(\"is_loading\"), \"isLoading\");",
			"Test.assertEquals(toCamelCase(\"x\"), \"x\");"
		],
		"starterFn": [
			"1\nfunction toSnakeCase(str) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction toCamelCase(str) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/uts8XsD5zGHdHr32u"
	},
	{
		"title": "A Possible Shape?",
		"description": "<p><span>Given the </span><em><span>number</span></em><span> </span><code>n</code><span> and an </span><em><span>array of interior angles</span></em><span> </span><code>angles</code><span>, return whether or not it's possible to make a polygon with </span><code>n</code><span> sides with the </span><strong><span>angles</span></strong><span> given. Remember that angles must be </span><strong><span>equals or under 180°</span></strong><span> and </span><strong><span>over 0°</span></strong><span>.</span></p><pre><code>isShapePossible(3, [80, 70, 30]) ➞ true</code></pre><p><img alt=\"Triangle with the angles 80, 70 and 30\" src=\"https://edabit-challenges.s3.amazonaws.com/interior-angles-triangle.png\"></p><p><span>A shape with </span><strong><span>3</span></strong><span> sides and the angles </span><strong><span>80°, 70° and 30°</span></strong><span> is a possible shape.</span></p><h3><span>Examples</span></h3><pre><code>isShapePossible(4, [90, 90, 90, 90]) ➞ true\n\nisShapePossible(3, [20, 20, 140]) ➞ true\n\nisShapePossible(1, [21]) ➞ false\n// n must be larger than 2\n\nisShapePossible(5, [500, 0, 20, 10, 10]) ➞ false\n// You can't have an interior angle bigger than 180°\n// You can't have an interior angle lower than 0° or equal to 0°</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>false</code><span> if </span><code>n</code><span> is less than 3 (see example #3).</span></li><li><span>There will always be an </span><code>n</code><span> number of angles given.</span></li><li><span>The sum of interior angles is </span><strong><span>(n - 2) x 180°</span></strong><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isShapePossible(4, [90, 90, 90, 90]), true);",
			"Test.assertEquals(isShapePossible(3, [20, 20, 140]), true);",
			"Test.assertEquals(isShapePossible(1, [21]), false, 'Remember not to allow shapes with under 3 sides');",
			"Test.assertEquals(isShapePossible(5, [100, 100, 100, 200, 40]), false);",
			"Test.assertEquals(isShapePossible(7, [830, 20, 20, 10, 10, 5, 5]), false, 'Angles cannot be larger than 180');",
			"Test.assertEquals(isShapePossible(4, [90, 90, 90, 89]), false);",
			"Test.assertEquals(isShapePossible(2, [21, 78]), false);",
			"Test.assertEquals(isShapePossible(8, [135, 135, 135, 135, 135, 135, 135, 135]), true);",
			"Test.assertEquals(isShapePossible(5, [500, 10, 10, 10, 10]), false);",
			"Test.assertEquals(isShapePossible(10, [21, 12, 333, 2, 2532, 52, 2, 2, 1, 8]), false);",
			"Test.assertEquals(isShapePossible(5, [108, 108, 108, 108, 108]), true);",
			"Test.assertEquals(isShapePossible(3, [180, 0, 0]), false, 'Angles cannot be equal to 0°');",
			"Test.assertEquals(isShapePossible(4, [180, 180, -10, 10]), false, 'Angles cannot be lower than 0°');",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction isShapePossible(n, angles) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/H2fcrbXCBPpsJ59wv"
	},
	{
		"title": "Consecutive Numbers",
		"description": "<p><span>Create a function that determines whether elements in an array can be re-arranged to form a consecutive list of numbers where </span><strong><span>each number appears exactly once</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>cons([5, 1, 4, 3, 2]) ➞ true\n// Can be re-arranged to form [1, 2, 3, 4, 5]\n\ncons([5, 1, 4, 3, 2, 8]) ➞ false\n\ncons([5, 6, 7, 8, 9, 9]) ➞ false\n// 9 appears twice</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"sorting",
			"validation"
		],
		"tests": [
			"Test.assertEquals(cons([5, 1, 4, 3, 2]), true)",
			"Test.assertEquals(cons([55, 59, 58, 56, 57]), true)",
			"Test.assertEquals(cons([-3, -2, -1, 1, 0]), true)",
			"Test.assertEquals(cons([5, 1, 4, 3, 2, 8]), false)",
			"Test.assertEquals(cons([5, 6, 7, 8, 9, 9]), false)",
			"Test.assertEquals(cons([5, 3]), false)"
		],
		"starterFn": [
			"1\nfunction cons(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cCNsvFaBQYMkgYnGc"
	},
	{
		"title": "Binary to ASCII Conversion",
		"description": "<p><span>Create a function that takes a string of 1's and 0's (binary) as an argument and return the equivalent decoded ASCII text. Characters can be in the range of \"00000000\" to \"11111111\", which means every </span><strong><span>eight digits</span></strong><span> of binary input represents a single character.</span></p><ul><li><span>a = 01100001</span></li><li><span>b = 01100010</span></li><li><span>c = 01100011</span></li></ul><p><span>If you were to combine these characters into the string \"abc\", the corresponding binary would be 011000010110001001100011. Use the resources tab for more info on how to approach this.</span></p><h3><span>Examples</span></h3><pre><code>binaryConversion(\"011001010110010001100001011000100110100101110100\") ➞ \"edabit\"\n\nbinaryConversion(\"001100010011001000110011\") ➞ \"123\"\n\nbinaryConversion(\"010010000110010101101100011011000110111100111111\") ➞ \"Hello?\"</code></pre><h3><span>Notes</span></h3><p><span>If you are given an empty string as input, you must also return an empty string. Otherwise, the input  will always be a valid binary string.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(binaryConversion(\"011001010110010001100001011000100110100101110100\"), 'edabit')",
			"Test.assertEquals(binaryConversion(\"001100010011001000110011\"), \"123\", \"Ah! You have to handle numeric characters.\")",
			"Test.assertEquals(binaryConversion(\"010010000110010101101100011011000110111100111111\"), \"Hello?\", \"You've got to also handle special characters.\")",
			"Test.assertEquals(binaryConversion(\"\"), \"\", \"You forgot to handle an empty string correnctly.\")",
			"Test.assertEquals(binaryConversionrtyUIOLdfgbbhnmIKBJKHIUO(?>?<~~~~~)(*&%^98713/-/*-*/\", \"It's those darn special characters!\")",
			"​",
			"// Random binary string",
			"let randomString = Math.random().toString(36);",
			"let randomStringBinary = \"\";",
			"for (i=0; i < randomString.length; i++) {",
			"  var bin = randomString[i].charCodeAt(0).toString(2);",
			"  randomStringBinary += \"00000000\".slice(bin.length) + bin;",
			"}",
			"Test.assertEquals(binaryConversion(randomStringBinary), randomString, \"Must handle random binary string.\")"
		],
		"starterFn": [
			"1\nfunction binaryConversion(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/p3NwqZ2evahs9jnPh"
	},
	{
		"title": "Christmas Tree",
		"description": "<p><span>Write a function to create a Christmas tree based on height </span><code>h</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>tree(1) ➞ [\n  \"#\"\n]\n\ntree(2) ➞ [\n  \" # \",\n  \"###\"\n]\n\ntree(5) ➞ [\n  \"    #    \",\n  \"   ###   \",\n  \"  #####  \",\n  \" ####### \",\n  \"#########\"\n]\n\ntree(0) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(tree(1), [\"#\"])",
			"​",
			"Test.assertSimilar(tree(2), [",
			"  \" # \", ",
			"  \"###\"",
			"])",
			"​",
			"Test.assertSimilar(tree(5), [",
			"  \"    #    \",",
			"  \"   ###   \", ",
			"  \"  #####  \", ",
			"  \" ####### \", ",
			"  \"#########\"",
			"])",
			"​",
			"Test.assertSimilar(tree(0), [])"
		],
		"starterFn": [
			"1\nfunction tree(h) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QeaCDhw3QrLwbeteD"
	},
	{
		"title": "Curzon Numbers",
		"description": "<p><span>In this challenge, establish if a given integer </span><code>num</code><span> is a Curzon number. If </span><code>1</code><span> plus </span><code>2</code><span> elevated to </span><code>num</code><span> is exactly divisible by </span><code>1</code><span> plus </span><code>2</code><span> multiplied by </span><code>num</code><span>, then </span><code>num</code><span> is a Curzon number.</span></p><p><span>Given a non-negative integer </span><code>num</code><span>, implement a function that returns </span><code>true</code><span> is </span><code>num</code><span> is a Curzon number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isCurzon(5) ➞ true\n// 2 ** 5 + 1 = 33\n// 2 * 5 + 1 = 11\n// 33 is a multiple of 11\n\nisCurzon(10) ➞ false\n// 2 ** 10 + 1 = 1025\n// 2 * 10 + 1 = 21\n// 1025 is not a multiple of 21\n\nisCurzon(14) ➞ true\n// 2 ** 14 + 1 = 16385\n// 2 * 14 + 1 = 29\n// 16385 is a multiple of 29</code></pre><h3><span>Notes</span></h3><p><strong><span>Note for JavaScript version</span></strong><span>: in this challenge, you must use </span><code>BigInt</code><span> objects instead of numbers. If you need an introduction to this special  type of numbers, check the </span><strong><span>Resources</span></strong><span> and </span><strong><span>Comments</span></strong><span> tabs.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isCurzon(5), true)",
			"Test.assertEquals(isCurzon(10), false)",
			"Test.assertEquals(isCurzon(14), true)",
			"Test.assertEquals(isCurzon(86), true)",
			"Test.assertEquals(isCurzon(90), true)",
			"Test.assertEquals(isCurzon(115), false)",
			"Test.assertEquals(isCurzon(120), false)",
			"Test.assertEquals(isCurzon(194), true)",
			"Test.assertEquals(isCurzon(293), true)"
		],
		"starterFn": [
			"1\nfunction isCurzon(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jXdJfXXtJ77rRCCR8"
	},
	{
		"title": "Who's The Oldest?",
		"description": "<p><span>Given an object containing the </span><em><span>names</span></em><span> and </span><em><span>ages</span></em><span> of a group of people, return the </span><strong><span>name</span></strong><span> of the </span><em><span>oldest</span></em><span> person.</span></p><h3><span>Examples</span></h3><pre><code>oldest({\n  Emma: 71,\n  Jack: 45,\n  Amy: 15,\n  Ben: 29\n}) ➞ \"Emma\"\n\noldest({\n  Max: 9,\n  Josh: 13,\n  Sam: 48,\n  Anne: 33\n}) ➞ \"Sam\"</code></pre><h3><span>Notes</span></h3><p><span>All ages will be different.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertEquals(oldest({Charlotte: 53, Oliver: 15, Henry: 18, Gabriel: 46, Violet: 13}), \"Charlotte\")",
			"Test.assertEquals(oldest({Grayson: 50, Imogen: 63, Logan: 21, Daniel: 64, Rory: 19}), \"Daniel\")",
			"Test.assertEquals(oldest({Josh: 78, Adam: 63, Aria: 65, Grace: 51, Bella: 37}), \"Josh\")",
			"Test.assertEquals(oldest({Alex: 9, Jayden: 18, Julia: 43, Penelope: 32, Ella: 34}), \"Julia\")",
			"Test.assertEquals(oldest({Sam: 65, Joseph: 60, Mia: 41, Thomas: 31, Rebecca: 5}), \"Sam\")",
			"Test.assertEquals(oldest({Eden: 64, Archie: 18, Olivia: 32, Kai: 84, Harry: 14}), \"Kai\")",
			"Test.assertEquals(oldest({Anna: 67, Elijah: 10, Cole: 31, Andrew: 24, Elliot: 77}), \"Elliot\")",
			"Test.assertEquals(oldest({Innes: 77, Lilly: 11, Hallie: 41, Nina: 66, Ryan: 9}), \"Innes\")",
			"Test.assertEquals(oldest({Isla: 73, Elsie: 6, Frankie: 36, Robbie: 75, Kayla: 9}), \"Robbie\")",
			"Test.assertEquals(oldest({Jack: 64, Jacob: 33, Tommy: 17, Finn: 5, Isaac: 13}), \"Jack\")",
			"Test.assertEquals(oldest({Carson: 81, Charlie: 33, Riley: 28, Maria: 39, Sadie: 67}), \"Carson\")",
			"Test.assertEquals(oldest({Amy: 70, Owen: 11, Matilda: 64, Lexi: 37, Lena: 26}), \"Amy\")",
			"Test.assertEquals(oldest({Lola: 45, Tyler: 23, Hope: 4, Phoebe: 86, Freya: 44}), \"Phoebe\")",
			"Test.assertEquals(oldest({Hollie: 48, Harris: 24, Ava: 72, Alfie: 9, Louis: 47}), \"Ava\")",
			"Test.assertEquals(oldest({Erica: 32, Eve: 82, Harper: 74, Summer: 38, Ben: 72}), \"Eve\")",
			"Test.assertEquals(oldest({Michael: 63, Jessica: 65, Reuben: 25, Aiden: 82, Emily: 18}), \"Aiden\")",
			"Test.assertEquals(oldest({Brooke: 8, Lucy: 44, Cooper: 33, Ellie: 82, Millie: 7}), \"Ellie\")",
			"Test.assertEquals(oldest({Piper: 10, Quinn: 62, David: 20, John: 61, Noah: 17}), \"Quinn\")",
			"Test.assertEquals(oldest({Cara: 5, Max: 81, Lucas: 62, Sophie: 71, Amelia: 79}), \"Max\")",
			"Test.assertEquals(oldest({Leo: 29, Clara: 8, Florence: 69, Lewis: 38, James: 47}), \"Florence\")"
		],
		"starterFn": [
			"1\nfunction oldest(people) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vPmDvWoP2wj5KpWZi"
	},
	{
		"title": "Find the First Non-Repeated Character",
		"description": "<p><span>Create a function that accepts a string as an argument and returns the first non-repeated character.</span></p><h3><span>Examples</span></h3><pre><code>firstNonRepeatedCharacter(\"g\") ➞ \"g\"\n\nfirstNonRepeatedCharacter(\"it was then the frothy word met the round night\") ➞ \"a\"\n\nfirstNonRepeatedCharacter(\"the quick brown fox jumps then quickly blows air\") ➞ \"f\"\n\nfirstNonRepeatedCharacter(\"hheelloo\") ➞ false\n\nfirstNonRepeatedCharacter(\"\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>An empty string should return </span><code>false</code><span>.</span></li><li><span>If every character repeats, return </span><code>false</code><span>.</span></li><li><span>Don't worry about case sensitivity or non-alphanumeric characters.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(firstNonRepeatedCharacter(\"the quick brown fox jumps then quickly blows air\"), \"f\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"the misty examination pleases into the drab county\"), \"x\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"hheelloo\"), false, \"Return false when every character repeats.\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"it was then the darling top met the whispering wing\"), \"d\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"\"), false, \"An empty string should return false.\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"it was then the frothy word met the round night\"), \"a\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"is the remind zone better than the section\"), \"m\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"b\"), \"b\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"what if the brainy boss ate the afternoon\"), \"w\")",
			"Test.assertEquals(firstNonRepeatedCharacter(\"the sympathetic mixture rejects into the leafy objective\"), \"p\")"
		],
		"starterFn": [
			"1\nfunction firstNonRepeatedCharacter(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NyQF2kPYt3YHdhhjn"
	},
	{
		"title": "The Frugal Gentleman",
		"description": "<p><span>Atticus has been invited to a dinner party, and he decides to purchase a bottle of wine. However, he has little knowledge of how to choose a good bottle. Being a very frugal gentleman (yet disliking looking like a cheapskate), he decides to use a very simple rule. In any selection of </span><strong><span>two or more wines</span></strong><span>, he will always buy the second-cheapest.</span></p><p><span>Given an array of wine objects, write a function that returns the name of the wine he will buy for the party. If given an empty array, return </span><code>null</code><span>. If given an array of only one, Atticus will buy that wine.</span></p><h3><span>Examples</span></h3><pre><code>chosenWine([\n  { name: \"Wine A\", price: 8.99 },\n  { name: \"Wine 32\", price: 13.99 },\n  { name: \"Wine 9\", price: 10.99 }\n]) ➞ \"Wine 9\"\n\nchosenWine([{ name: \"Wine A\", price: 8.99 }]) ➞ \"Wine A\"\n\nchosenWine([]) ➞ null</code></pre><h3><span>Notes</span></h3><p><span>All wines will be different prices, so there is no confusion in the ordering.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(chosenWine([{name: \"Wine A\", price: 8.99}, {name: \"Wine 32\", price: 13.99}, {name: \"Wine 9\", price: 10.99}]), \"Wine 9\");",
			"Test.assertEquals(chosenWine([{name: \"Wine A\", price: 8.99}, {name: \"Wine B\", price: 9.99}]), \"Wine B\");",
			"Test.assertEquals(chosenWine([{name: \"Wine A\", price: 8.99}]), \"Wine A\");",
			"Test.assertEquals(chosenWine([]), null);",
			"Test.assertEquals(chosenWine([{name: \"Wine A\", price: 8.99}, {name: \"Wine 389\", price: 109.99}, {name: \"Wine 44\", price: 38.44}, {name: \"Wine 72\", price: 22.77}]), \"Wine 72\");"
		],
		"starterFn": [
			"1\nfunction chosenWine(wines) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ujzhzyvGoASKxSAib"
	},
	{
		"title": "Enter the Matrix",
		"description": "<p><span>In this challenge, you have to obtain a sentence from the elements of a given matrix. In the matrix, each word of the sentence follows a columnar order from the top to the bottom, instead of the usual left-to-right order: it's time for </span><strong><span>transposition</span></strong><span>!</span></p><p><span>Given a matrix </span><code>mtx</code><span>, implement a function that returns the complete sentence as a string, with the words separated by a space between them.</span></p><h3><span>Examples</span></h3><pre><code>transposeMatrix([\n  [\"Enter\"],\n  [\"the\"],\n  [\"Matrix!\"]\n]) ➞ \"Enter the Matrix!\"\n\ntransposeMatrix([\n  [\"The\", \"are\"],\n  [\"columns\", \"rows.\"]\n]) ➞ \"The columns are rows.\"\n\ntransposeMatrix([\n  [\"You\", \"the\"],\n  [\"must\", \"table\"],\n  [\"transpose\", \"order.\"]\n]) ➞ \"You must transpose the table order.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All given matrices are regular, as to say that each column has the same length.</span></li><li><span>Punctuation is already given, you just have to add the spaces in the returned string.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(transposeMatrix([",
			"  [\"Enter\"],",
			"  [\"the\"],",
			"  [\"Matrix.\"]",
			"]), \"Enter the Matrix.\")",
			"​",
			"Test.assertEquals(transposeMatrix([",
			"  [\"Unfortunately,\", \"be\", \"is.\", \"see\"], ",
			"  [\"no\", \"told\", \"You'll\", \"it\"], ",
			"  [\"one\", \"what\", \"have\", \"for\"], ",
			"  [\"can\", \"Matrix\", \"to\", \"yourself.\"]",
			"]), \"Unfortunately, no one can be told what Matrix is. You'll have to see it for yourself.\")",
			"​",
			"Test.assertEquals(transposeMatrix([",
			"  [\"Matrix\", \"that\"],",
			"  [\"is\", \"system\"],",
			"  [\"a\", \"is\"],",
			"  [\"system\", \"our\"],",
			"  [\"Neo,\", \"enemy.\"]",
			"]), \"Matrix is a system Neo, that system is our enemy.\")",
			"​",
			"Test.assertEquals(transposeMatrix([",
			"  [\"If\", \"killed\", \"you\"],",
			"  [\"you\", \"in\", \"die\"],",
			"  [\"are\", \"Matrix\", \"here?\"]",
			"]), \"If you are killed in Matrix you die here?\")"
		],
		"starterFn": [
			"1\nfunction transposeMatrix(mtx) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3mKNTsZ5f7b9hHTky"
	},
	{
		"title": "Making a Countdown",
		"description": "<p><span>Create a function where given the </span><em><span>number</span></em><span> </span><code>n</code><span> to count down from, and </span><em><span>some words</span></em><span> </span><code>str</code><span>, return a countdown sequence as a string leading up to the words at the end.</span></p><p><span>Put a </span><strong><span>full stop</span></strong><span> after each number and </span><strong><span>uppercase</span></strong><span> and add an </span><strong><span>exclamation mark</span></strong><span> to the word. See the examples below for clarification!</span></p><h3><span>Examples</span></h3><pre><code>countdown(10, \"Blast Off\") ➞ \"10. 9. 8. 7. 6. 5. 4. 3. 2. 1. BLAST OFF!\"\n\ncountdown(3, \"go\") ➞ \"3. 2. 1. GO!\"\n\ncountdown(5, \"FIRE\") ➞ \"5. 4. 3. 2. 1. FIRE!\"</code></pre><h3><span>Notes</span></h3><ul><li><code>n</code><span> will be a number greater than 0.</span></li><li><code>str</code><span> won't already include an exclamation mark.</span></li><li><span>Don't include </span><strong><span>0</span></strong><span> in the countdown.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countdown(10, \"Blast Off\"), \"10. 9. 8. 7. 6. 5. 4. 3. 2. 1. BLAST OFF!\")",
			"Test.assertEquals(countdown(3, \"go\"), \"3. 2. 1. GO!\")",
			"Test.assertEquals(countdown(5, \"FIRE\"), \"5. 4. 3. 2. 1. FIRE!\")",
			"Test.assertEquals(countdown(12, \"watch out\"), \"12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. WATCH OUT!\")",
			"Test.assertEquals(countdown(7, \"fire\"), \"7. 6. 5. 4. 3. 2. 1. FIRE!\")",
			"Test.assertEquals(countdown(16, \"shoot\"), \"16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. SHOOT!\")",
			"Test.assertEquals(countdown(28, \"fire\"), \"28. 27. 26. 25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. FIRE!\")",
			"Test.assertEquals(countdown(14, \"watch out\"), \"14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. WATCH OUT!\")",
			"Test.assertEquals(countdown(29, \"take down\"), \"29. 28. 27. 26. 25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. TAKE DOWN!\")",
			"Test.assertEquals(countdown(8, \"boom\"), \"8. 7. 6. 5. 4. 3. 2. 1. BOOM!\")",
			"Test.assertEquals(countdown(24, \"blast off\"), \"24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. BLAST OFF!\")",
			"Test.assertEquals(countdown(3, \"boom\"), \"3. 2. 1. BOOM!\")",
			"Test.assertEquals(countdown(16, \"watch out\"), \"16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. WATCH OUT!\")",
			"Test.assertEquals(countdown(16, \"blast off\"), \"16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. BLAST OFF!\")",
			"Test.assertEquals(countdown(24, \"boom\"), \"24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. BOOM!\")",
			"Test.assertEquals(countdown(2, \"watch out\"), \"2. 1. WATCH OUT!\")",
			"Test.assertEquals(countdown(1, \"shoot\"), \"1. SHOOT!\")",
			"Test.assertEquals(countdown(16, \"go\"), \"16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. GO!\")",
			"Test.assertEquals(countdown(26, \"watch out\"), \"26. 25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. WATCH OUT!\")",
			"Test.assertEquals(countdown(5, \"blast off\"), \"5. 4. 3. 2. 1. BLAST OFF!\")",
			"Test.assertEquals(countdown(26, \"go\"), \"26. 25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. GO!\")",
			"Test.assertEquals(countdown(29, \"go\"), \"29. 28. 27. 26. 25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. GO!\")",
			"Test.assertEquals(countdown(26, \"shoot\"), \"26. 25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. SHOOT!\")",
			"Test.assertEquals(countdown(25, \"watch out\"), \"25. 24. 23. 22. 21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. WATCH OUT!\")",
			"Test.assertEquals(countdown(16, \"blast off\"), \"16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. BLAST OFF!\")",
			"Test.assertEquals(countdown(21, \"take down\"), \"21. 20. 19. 18. 17. 16. 15. 14. 13. 12. 11. 10. 9. 8. 7. 6. 5. 4. 3. 2. 1. TAKE DOWN!\")"
		],
		"starterFn": [
			"1\nfunction countdown(n, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vkJqNZqK94Hjsr4pi"
	},
	{
		"title": "Strictly Increasing or Decreasing",
		"description": "<p><span>Create a function that takes an array and determines whether it's strictly increasing, strictly decreasing, or neither.</span></p><h3><span>Examples</span></h3><pre><code>check([1, 2, 3]) ➞ \"increasing\"\n\ncheck([3, 2, 1]) ➞ \"decreasing\"\n\ncheck([1, 2, 1]) ➞ \"neither\"\n\ncheck([1, 1, 2]) ➞ \"neither\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The last example does NOT count as strictly increasing, since 1-indexed </span><code>1</code><span> is not strictly greater than the 0-indexed </span><code>1</code><span>.</span></li><li><span>Input arrays have a minimum length of 2.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"control_flow",
			"loops"
		],
		"tests": [
			"Test.assertEquals(check([1, 2, 3]), \"increasing\")",
			"Test.assertEquals(check([3, 2, 1]), \"decreasing\")",
			"Test.assertEquals(check([1, 2, 1]), \"neither\")",
			"Test.assertEquals(check([1, 1, 2]), \"neither\")",
			"Test.assertEquals(check([1, 3, 5, 7, 9, 10]), \"increasing\")",
			"Test.assertEquals(check([5, 6, 5, 7, 9, 10]), \"neither\")",
			"Test.assertEquals(check([5, 7]), \"increasing\")",
			"Test.assertEquals(check([9, 7, 1]), \"decreasing\")"
		],
		"starterFn": [
			"1\nfunction check(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/E4zMxggTmqxS2Fmcj"
	},
	{
		"title": "Numerical Morphisms",
		"description": "<p><span>A number </span><code>num</code><span>, that elevated to the power of another number </span><code>k</code><span> \"ends\" with the same </span><code>num</code><span>, it's automorphic.</span></p><pre><code>5² = 25\n// It's automorphic because \"25\" ends with \"5\"\n\n5³  = 125\n// It's automorphic because \"125\" ends with \"5\"\n\n76⁴ = 33362176\n// It's automorphic because \"33362176\" ends with \"76\"</code></pre><p><span>A number can have various powers that make it automorphic (i.e. look at number </span><code>5</code><span> in the above example). In this challenge, you have to verify if the given number is automorphic for each power from </span><code>2</code><span> up to </span><code>10</code><span>.</span></p><p><span>Given a non-negative integer </span><code>num</code><span>, implement a function that returns the string:</span></p><ul><li><code>\"Polymorphic\"</code><span> if </span><code>num</code><span> is automorphic for </span><strong><span>every</span></strong><span> power from </span><code>2</code><span> up to </span><code>10</code><span>.</span></li><li><code>\"Quadrimorphic\"</code><span>  if </span><code>num</code><span> is automorphic for </span><strong><span>only four</span></strong><span> powers (any from </span><code>2</code><span> up to </span><code>10</code><span>).</span></li><li><code>\"Dimorphic\"</code><span>  if </span><code>num</code><span> is automorphic for </span><strong><span>only two</span></strong><span> powers (any from </span><code>2</code><span> up to </span><code>10</code><span>).</span></li><li><code>\"Enamorphic\"</code><span>  if </span><code>num</code><span> is automorphic for </span><strong><span>only one</span></strong><span> power (any from </span><code>2</code><span> up to </span><code>10</code><span>).</span></li><li><code>\"Amorphic\"</code><span>  if </span><code>num</code><span> is </span><strong><span>not automorphic</span></strong><span> for for any powers from </span><code>2</code><span> up to </span><code>10</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>powerMorphic(5) ➞ \"Polymorphic\"\n// From 2 up to 10, every power of 5 ends with 5\n\npowerMorphic(21) ➞ \"Enamorphic\"\n// 21⁶ = 85766121\n\npowerMorphic(7) ➞ \"Dimorphic\"\n// 7⁵ = 716807\n// 7⁹ = 40353607\n\npowerMorphic(4) ➞ \"Quadrimorphic\"\n// 4³ = 64\n// 4⁵ = 1024\n// 4⁷ = 16384\n// 4⁹ = 262144\n\npowerMorphic(10) ➞ \"Amorphic\"\n// There are no powers that make it automorphic</code></pre><h3><span>Notes</span></h3><ul><li><span>You can do a complete loop cycle to check if </span><code>num</code><span> is automorphic for each power, or you can try to spot the discriminants that permit you to shorten the logic of your code.</span></li><li><span>Despite being inspired by the OEIS sequence A003226, the assertions of this challenge are to be considered properly valid only in the specific context.</span></li><li><strong><span>Note for JavaScript</span></strong><span>: the inputs will be given as </span><code>BigInt</code><span> (big integers) to avoid approximation errors but, besides the numbers notation, there are no differences in the procedure to adopt. You can find a compendium about the global object </span><code>BigInt</code><span> into the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"logic",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(powerMorphic(0n), \"Polymorphic\")",
			"Test.assertEquals(powerMorphic(1n), \"Polymorphic\")",
			"Test.assertEquals(powerMorphic(4n), \"Quadrimorphic\")",
			"Test.assertEquals(powerMorphic(7n), \"Dimorphic\")",
			"Test.assertEquals(powerMorphic(10n), \"Amorphic\")",
			"Test.assertEquals(powerMorphic(68n), \"Dimorphic\")",
			"Test.assertEquals(powerMorphic(121n), \"Amorphic\")",
			"Test.assertEquals(powerMorphic(501n), \"Quadrimorphic\")",
			"Test.assertEquals(powerMorphic(625n), \"Polymorphic\")",
			"Test.assertEquals(powerMorphic(3376n), \"Enamorphic\")",
			"Test.assertEquals(powerMorphic(2030n), \"Amorphic\")",
			"Test.assertEquals(powerMorphic(3751n), \"Quadrimorphic\")",
			"Test.assertEquals(powerMorphic(9376n), \"Polymorphic\")",
			"Test.assertEquals(powerMorphic(9999n), \"Quadrimorphic\")"
		],
		"starterFn": [
			"1\nfunction powerMorphic(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TFnrbZNSE6PxjFBcr"
	},
	{
		"title": "Pronouncing the Xs",
		"description": "<p><span>Create a function which replaces all the x's in the string in the following ways:</span></p><p><span>Replace all x's with \"cks\" </span><strong><span>UNLESS</span></strong><span>:</span></p><ul><li><span>The word begins with \"x\", therefore replace it with \"z\".</span></li><li><span>The word is just the letter \"x\", therefore replace it with \"ecks\".</span></li></ul><h3><span>Examples</span></h3><pre><code>xPronounce(\"Inside the box was a xylophone\") ➞ \"Inside the bocks was a zylophone\"\n\nxPronounce(\"The x ray is excellent\") ➞ \"The ecks ray is eckscellent\"\n\nxPronounce(\"OMG x box unboxing video x D\") ➞ \"OMG ecks bocks unbocksing video ecks D\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All x's are lowercase.</span></li><li><span>I know that not all words with x's follow this rule, but there are too many edge cases to count!</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(xPronounce(\"Inside the box was a xylophone\"), \"Inside the bocks was a zylophone\")",
			"Test.assertEquals(xPronounce(\"The x ray is excellent\"), \"The ecks ray is eckscellent\")",
			"Test.assertEquals(xPronounce(\"OMG x box unboxing video x D\"), \"OMG ecks bocks unbocksing video ecks D\")",
			"Test.assertEquals(xPronounce(\"I gotta make bux but the clox are ticking!\"), \"I gotta make bucks but the clocks are ticking!\")",
			"Test.assertEquals(xPronounce(\"this test does not have an x in it\"), \"this test does not have an ecks in it\")",
			"Test.assertEquals(xPronounce(\"Max bax pax\"), \"Macks backs packs\")",
			"Test.assertEquals(xPronounce(\"Anti vax\"), \"Anti vacks\")",
			"Test.assertEquals(xPronounce(\"Who is xavier and why does he have my car\"), \"Who is zavier and why does he have my car\")",
			"Test.assertEquals(xPronounce(\"OMG xylem unboxing video x D\"), \"OMG zylem unbocksing video ecks D\")"
		],
		"starterFn": [
			"1\nfunction xPronounce(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mH6Ny8eH6AStdzzyS"
	},
	{
		"title": "Choosing a Fuse",
		"description": "<p><span>A fuse melts when a current in an electrical device exceeds the fuse's rating, breaking the circuit and preventing the heat from building up too much (which can cause a fire). The ideal fuse to choose is </span><strong><span>higher</span></strong><span> than the device's current output, yet </span><strong><span>as close as possible</span></strong><span> to it as well.</span></p><p><span>Given an array of </span><em><span>fuse ratings</span></em><span>, and the </span><em><span>device's current output</span></em><span>, return which of the fuses is the best for the device.</span></p><h3><span>Examples</span></h3><pre><code>chooseFuse([\"3V\", \"5V\", \"12V\"], \"4.5V\") ➞ \"5V\"\n\nchooseFuse([\"5V\", \"14V\", \"2V\"], \"5.5V\") ➞ \"14V\"\n\nchooseFuse([\"17V\", \"15V\", \"12V\"], \"9V\") ➞ \"12V\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You will be given three possible ratings in voltage.</span></li><li><span>Fuses may not be in a sorted order.</span></li><li><span>Assume that there is a valid fuse in every test case</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(chooseFuse([\"3V\", \"5V\", \"12V\"], \"4.5V\"), \"5V\")",
			"Test.assertEquals(chooseFuse([\"5V\", \"14V\", \"2V\"], \"5.5V\"), \"14V\")",
			"Test.assertEquals(chooseFuse([\"17V\", \"15V\", \"12V\"], \"9V\"), \"12V\")",
			"Test.assertEquals(chooseFuse([\"1V\", \"2V\", \"3V\"], \"2.5V\"), \"3V\")",
			"Test.assertEquals(chooseFuse([\"17V\", \"15V\", \"12V\"], \"1V\"), \"12V\")",
			"Test.assertEquals(chooseFuse([\"7V\", \"135V\", \"12V\"], \"9.5V\"), \"12V\")",
			"Test.assertEquals(chooseFuse([\"17V\", \"15V\", \"12V\"], \"17V\"), \"17V\")",
			"Test.assertEquals(chooseFuse([\"3V\", \"11V\", \"12V\"], \"4.5V\"), \"11V\")",
			"Test.assertEquals(chooseFuse([\"3V\", \"5V\", \"12V\"], \"0.5V\"), \"3V\")"
		],
		"starterFn": [
			"1\nfunction chooseFuse(fuses, current) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kvGvWEYtquTqn7K5i"
	},
	{
		"title": "All About Strings",
		"description": "<p><span>Create a function that, given a </span><strong><span>string</span></strong><span> with at least </span><strong><span>three characters</span></strong><span>, returns an array of its:</span></p><ol><li><span>Length.</span></li><li><span>First character.</span></li><li><span>Last character.</span></li><li><span>Middle character, if the string has an odd number of characters. Middle TWO characters, if the string has an even number of characters.</span></li><li><span>Index of the second occurrence of the second character in the format </span><strong><span>\"@ index #\"</span></strong><span> and </span><strong><span>\"not found\"</span></strong><span> if the second character doesn't occur again.</span></li></ol><h3><span>Examples</span></h3><pre><code>allAboutStrings(\"LASA\") ➞ [4, \"L\", \"A\", \"AS\", \"@ index 3\"]\n\nallAboutStrings(\"Computer\") ➞ [8, \"C\", \"r\", \"pu\", \"not found\"]\n\nallAboutStrings(\"Science\") ➞ [7, \"S\", \"e\", \"e\", \"@ index 5\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(allAboutStrings('LASA'), [4, 'L', 'A', 'AS', '@ index 3']);",
			"Test.assertSimilar(allAboutStrings('Computer'), [8, 'C', 'r', 'pu', 'not found']);",
			"Test.assertSimilar(allAboutStrings('Science'), [7, 'S', 'e', 'e', '@ index 5']);",
			"Test.assertSimilar(allAboutStrings('homework'), [8, 'h', 'k', 'ew', '@ index 5']);",
			"Test.assertSimilar(allAboutStrings('spring'), [6, 's', 'g', 'ri', 'not found']);",
			"Test.assertSimilar(allAboutStrings('break'), [5, 'b', 'k', 'e', 'not found']);",
			"Test.assertSimilar(allAboutStrings('programming'), [11, 'p', 'g', 'a', '@ index 4']);",
			"Test.assertSimilar(allAboutStrings('bad'), [3, 'b', 'd', 'a', 'not found']);"
		],
		"starterFn": [
			"1\nfunction allAboutStrings(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5bW3TmPnae2FNvusk"
	},
	{
		"title": "Censor Words from Array",
		"description": "<p><span>Create a function that takes a string </span><code>str</code><span> and censors any word from a given array </span><code>arr</code><span>. The text removed must be replaced by the given character </span><code>char</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>censorString(\"Today is a Wednesday!\", [\"Today\", \"a\"], \"-\") ➞ \"----- is - Wednesday!\"\n\ncensorString(\"The cow jumped over the moon.\", [\"cow\", \"over\"], \"*\"), \"The *** jumped **** the moon.\")\n\ncensorString(\"Why did the chicken cross the road?\", [\"Did\", \"chicken\", \"road\"], \"*\") ➞ \"Why *** the ******* cross the ****?\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(censorString(\"The cow jumped over the moon.\", [\"cow\", \"over\"], \"*\"), \"The *** jumped **** the moon.\")",
			"Test.assertEquals(censorString(\"Why do my cats keep eating grass?\", [\"Why\", \"keep\", \"eating\"], \"!\"), \"!!! do my cats !!!! !!!!!! grass?\")",
			"Test.assertEquals(censorString(\"How do I stop myself from using python!?\", [\"do\", \"stop\", \"using\"], \"-\"), \"How -- I ---- myself from ----- python!?\")",
			"Test.assertEquals(censorString(\"If statements are pretty fun to use.\", [\"statements\", \"pretty\", \"to\"], \"~~\"), \"If ~~~~~~~~~~~~~~~~~~~~ are ~~~~~~~~~~~~ fun ~~~~ use.\")",
			"Test.assertEquals(censorString(\"I'm dyslexic, but that deos'tn matter!\", [\"that\", \"matter!\"], \"?\"), \"I'm dyslexic, but ???? deos'tn ???????\")",
			"Test.assertEquals(censorString(\"I should be doing work but I am doing this instead.\", [\"should\", \"but\", \"this\"], \"*\"), \"I ****** be doing work *** I am doing **** instead.\")"
		],
		"starterFn": [
			"1\nfunction censorString(str, arr, char) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vxourdkAeRR3fm7H8"
	},
	{
		"title": "Divide Array into Chunks",
		"description": "<p><span>Write a function that divides an array into chunks of size </span><strong><span>n</span></strong><span>, where </span><strong><span>n</span></strong><span> is the length of each chunk.</span></p><h3><span>Examples</span></h3><pre><code>chunkify([2, 3, 4, 5], 2) ➞ [[2, 3], [4, 5]]\n\nchunkify([2, 3, 4, 5, 6], 2) ➞ [[2, 3], [4, 5], [6]]\n\nchunkify([2, 3, 4, 5, 6, 7], 3) ➞ [[2, 3, 4], [5, 6, 7]]\n\nchunkify([2, 3, 4, 5, 6, 7], 1) ➞ [[2], [3], [4], [5], [6], [7]]\n\nchunkify([2, 3, 4, 5, 6, 7], 7) ➞ [[2, 3, 4, 5, 6, 7]]</code></pre><h3><span>Notes</span></h3><p><span>It's O.K. if the last chunk is not completely filled (see second example).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(chunkify([2, 3, 4, 5], 2), [[2, 3], [4, 5]])",
			"Test.assertSimilar(chunkify([2, 3, 4, 5, 6], 2), [[2, 3], [4, 5], [6]])",
			"Test.assertSimilar(chunkify([2, 3, 4, 5, 6, 7], 3), [[2, 3, 4], [5, 6, 7]])",
			"Test.assertSimilar(chunkify([2, 3, 4, 5, 6, 7], 1), [[2], [3], [4], [5], [6], [7]] )",
			"Test.assertSimilar(chunkify([2, 3, 4, 5, 6, 7], 7), [[2, 3, 4, 5, 6, 7]] )",
			"Test.assertSimilar(chunkify([2, 3, 4, 5], 3), [[2, 3, 4], [5]])",
			"Test.assertSimilar(chunkify([2, 3, 4, 5, 6, 7, 8], 3), [[2, 3, 4], [5, 6, 7], [8]])"
		],
		"starterFn": [
			"1\nfunction chunkify(arr, size) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/g8jGf8wrHtmwFfM8H"
	},
	{
		"title": "Convert \"Zero\" and \"One\" to \"1\" and \"0\"",
		"description": "<p><span>Create a function that takes a string as an argument. The function must return a string containing 1s and 0s based on the string argument's words. If any word in the argument is not equal to \"zero\" or \"one\" (case insensitive), you should ignore it. The returned string's length should be a multiple of 8, if the string is not a multiple of 8 you should remove the numbers in excess.</span></p><h3><span>Examples</span></h3><pre><code>textToNumberBinary(\"zero one zero one zero one zero one\") ➞ \"01010101\"\n\ntextToNumberBinary(\"Zero one zero ONE zero one zero one\") ➞ \"01010101\"\n\ntextToNumberBinary(\"zero one zero one zero one zero one one two\") ➞ \"01010101\"\n\ntextToNumberBinary(\"zero one zero one zero one zero three\") ➞ \"\"\n\ntextToNumberBinary(\"one one\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><p><span>You must return the result as a string.</span></p>",
		"publishedBy": "VeryKnave",
		"publishedByUrl": "https://edabit.com/user/RW2wFPbMQniZWPmw4",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(textToNumberBinary('one one one one zero zero zero zero'), \"11110000\")",
			"Test.assertEquals(textToNumberBinary('one Zero zero one zero zero one one one one one zero oNe one one zero one zerO'), \"1001001111101110\")",
			"Test.assertEquals(textToNumberBinary('one zero one'), \"\")",
			"Test.assertEquals(textToNumberBinary('one zero zero one zero ten one one one one two'), \"10010111\")",
			"Test.assertEquals(textToNumberBinary('One zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero one one one zero one one zero zero zero zero one zero'), \"1001011101100001011101100001011101100001011101100001011101100001\")",
			"Test.assertEquals(textToNumberBinary('TWO one zero one one zero one zero'), \"\")",
			"Test.assertEquals(textToNumberBinary('TWO one zero one one zero one zero one'), \"10110101\")"
		],
		"starterFn": [
			"1\nfunction textToNumberBinary(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iKRmj2Q6GQHkAXXxf"
	},
	{
		"title": "Metaprogramming: Making a Test Case",
		"description": "<p><span>You are given two values </span><code>a</code><span> and </span><code>b</code><span> of identical type: numbers, strings or arrays. The result will be:</span></p><ul><li><span>The </span><strong><span>sum</span></strong><span> of </span><code>a</code><span> and </span><code>b</code><span> if the parameters are numbers.</span><ul><li><span>a = 1 | b = 1 ➞ Result = 2</span></li></ul></li><li><span>The </span><strong><span>join</span></strong><span> in a single string of </span><code>a</code><span> and </span><code>b</code><span> if the parameters are strings.</span><ul><li><span>a = \"1\" | b = \"1\" ➞ Result = \"11\"</span></li></ul></li><li><span>The </span><strong><span>concatenation</span></strong><span> of the values of </span><code>a</code><span> and </span><code>b</code><span> in a single array if the parameters are arrays.</span><ul><li><span>a = </span><span>[</span><span>\"String\"] | b = </span><span>[</span><span>\"String\"] ➞ Result = </span><span>[</span><span>\"String\", \"String\"]</span></li></ul></li></ul><p><span>In any case, you don't have to simply return the result. This challenge will be a little different from usual because your function is going to return the same Test Case that verifies the correctness of your function!</span></p><p><span>When you try to solve a challenge your function is passed to a Test function, that accepts three parameters: your function with its related parameters, the expected result, and an optional comment (not used in this exercise).</span></p><p><span>There are two different types for a Test function:</span></p><pre><code>Test.assertEquals(yourFunctionName(firstParameter, ..., lastParameter), result)</code></pre><p><span>This is used when the value type of the expected result is primitive (numbers, strings, booleans or special values like </span><code>undefined</code><span>, </span><code>null</code><span> and </span><code>NaN</code><span>).</span></p><pre><code>Test.assertSimilar(yourFunctionName(firstParameter, ..., lastParameter), result)</code></pre><p><span>This is used when the value type of the expected result is an object (arrays or object literals).</span></p><p><span>You must return a string containing the Test function that verifies the correctness of the result that you got. See the  examples below for a better explanation.</span></p><h3><span>Examples</span></h3><pre><code>createTest(1, 1) ➞ 'Test.assertEquals(createTest(1, 1), 2)'\n// Parameters are numbers, so result will be their sum: Test function verifies equality.\n\ncreateTest(\"a\", \"b\") ➞ 'Test.assertEquals(createTest(\"a\", \"b\"), \"ab\")'\n// Parameters are strings, so result will be their join: Test function verifies equality.\n\ncreateTest([\"String\"], [\"String\"]) ➞ 'Test.assertSimilar(createTest([\"String\"], [\"String\"]), [\"String\", \"String\"])'\n// Parameters are arrays, so result will be the concatenation of the values inside the arrays: Test function verifies similarity.</code></pre><h3><span>Notes</span></h3><ul><li><span>When parameters, results or values inside arrays are strings, they need the double quotation marks </span><code>\"</code><span> around them in the returned string.</span></li><li><span>Look at </span><strong><span>Tests</span></strong><span> tab if you need help!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"scope",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(createTest(\"a\", \"b\"), 'Test.assertEquals(createTest(\"a\", \"b\"), \"ab\")')",
			"Test.assertEquals(createTest(\"Te\", \"st\"), 'Test.assertEquals(createTest(\"Te\", \"st\"), \"Test\")')",
			"Test.assertEquals(createTest(\"1\", \"1\"), 'Test.assertEquals(createTest(\"1\", \"1\"), \"11\")')",
			"Test.assertEquals(createTest(1, 1), 'Test.assertEquals(createTest(1, 1), 2)')",
			"Test.assertEquals(createTest(99, 1), 'Test.assertEquals(createTest(99, 1), 100)')",
			"Test.assertEquals(createTest(0, 0), 'Test.assertEquals(createTest(0, 0), 0)')",
			"Test.assertEquals(createTest([1], [1]), 'Test.assertSimilar(createTest([1], [1]), [1, 1])')",
			"Test.assertEquals(createTest([\"1\"], [\"1\"]), 'Test.assertSimilar(createTest([\"1\"], [\"1\"]), [\"1\", \"1\"])')",
			"Test.assertEquals(createTest([\"String\"], [\"String\"]), 'Test.assertSimilar(createTest([\"String\"], [\"String\"]), [\"String\", \"String\"])')"
		],
		"starterFn": [
			"1\nfunction createTest(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9tJ97HK3c4Koy3KsF"
	},
	{
		"title": "Seasons on Earth",
		"description": "<p><span>In this challenge, you are given a date and you have to determine the correspondent season in a certain hemisphere of Earth.</span></p><p><span>You have to use the ranges given by the </span><strong><span>meteorological seasons</span></strong><span> definition, accordingly to the following table:</span></p><table><thead><tr><th><span>Start</span></th><th><span>End</span></th><th><span>North Hemisphere</span></th><th><span>South Hemisphere</span></th></tr></thead><tbody><tr><td><span>March, 1</span></td><td><span>May, 31</span></td><td><span>Spring</span></td><td><span>Autumn</span></td></tr><tr><td><span>June, 1</span></td><td><span>August, 31</span></td><td><span>Summer</span></td><td><span>Winter</span></td></tr><tr><td><span>September, 1</span></td><td><span>November, 30</span></td><td><span>Autumn</span></td><td><span>Spring</span></td></tr><tr><td><span>December, 1</span></td><td><span>February, 28</span><span>*</span><span>*</span><span>*</span></td><td><span>Winter</span></td><td><span>Summer</span></td></tr></tbody></table><p><span>Given two strings </span><code>hemisphere</code><span> (can be </span><code>\"N\"</code><span> for the North hemisphere or </span><code>\"S\"</code><span> for the South hemisphere) and </span><code>date</code><span> (name and day of the month), implement a function that returns a string with the season name, accordingly to the above table.</span></p><h3><span>Examples</span></h3><pre><code>hemisphereSeason(\"N\", \"June, 30\") ➞ \"Summer\"\n\nhemisphereSeason(\"N\", \"March, 1\") ➞ \"Spring\"\n\nhemisphereSeason(\"S\", \"September, 22\") ➞ \"Spring\"</code></pre><h3><span>Notes</span></h3><p><span>During leap years the end date of Winter in the northern hemisphere is the 29th day of February (last day of Summer in the southern hemisphere). In this challenge, years are not used, so the last day of February will always be the 28th.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"data_structures",
			"dates"
		],
		"tests": [
			"Test.assertEquals(hemisphereSeason(\"N\", \"June, 30\"), \"Summer\", \"Example #1\")",
			"Test.assertEquals(hemisphereSeason(\"N\", \"March, 1\"), \"Spring\", \"Example #2\")",
			"Test.assertEquals(hemisphereSeason(\"S\", \"September, 22\"), \"Spring\", \"Example #3\")",
			"Test.assertEquals(hemisphereSeason(\"S\", \"April, 20\"), \"Autumn\")",
			"Test.assertEquals(hemisphereSeason(\"N\", \"November, 20\"), \"Autumn\")",
			"Test.assertEquals(hemisphereSeason(\"S\", \"May, 8\"), \"Autumn\")",
			"Test.assertEquals(hemisphereSeason(\"N\", \"February, 28\"), \"Winter\")",
			"Test.assertEquals(hemisphereSeason(\"S\", \"August, 6\"), \"Winter\")",
			"Test.assertEquals(hemisphereSeason(\"N\", \"July, 28\"), \"Summer\")",
			"Test.assertEquals(hemisphereSeason(\"S\", \"October, 12\"), \"Spring\")",
			"Test.assertEquals(hemisphereSeason(\"N\", \"December, 31\"), \"Winter\")",
			"Test.assertEquals(hemisphereSeason(\"S\", \"January, 2\"), \"Summer\")"
		],
		"starterFn": [
			"1\nfunction hemisphereSeason(hemisphere, date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4d4RamC7mArPEwHpX"
	},
	{
		"title": "Triple + Double = So Much Trouble",
		"description": "<p><span>Create a function that takes two integers and returns </span><code>true</code><span> if a number repeats three times in a row at any place in </span><code>num1</code><span> </span><strong><span>AND</span></strong><span> that same number repeats two times in a row in </span><code>num2</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>trouble(451999277, 41177722899) ➞ true\n\ntrouble(1222345, 12345) ➞ false\n\ntrouble(666789, 12345667) ➞ true\n\ntrouble(33789, 12345337) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>You can expect every test case to contain exactly two integers.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"regex",
			"validation"
		],
		"tests": [
			"Test.assertEquals(trouble(451999277, 41177722899), true)",
			"Test.assertEquals(trouble(444, 44), true)",
			"Test.assertEquals(trouble(1222345, 12345), false)",
			"Test.assertEquals(trouble(12345, 12345), false)",
			"Test.assertEquals(trouble(888, 888), true)",
			"Test.assertEquals(trouble(666789, 12345667), true)",
			"Test.assertEquals(trouble(10560002, 100), true)",
			"Test.assertEquals(trouble(1, 1), false)",
			"Test.assertEquals(trouble(9111922229333339, 9559669779), false)"
		],
		"starterFn": [
			"1\nfunction trouble(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vpvR2CrLcQxNt57Z6"
	},
	{
		"title": "All Rotations of a String",
		"description": "<p><span>Create a </span><strong><span>left rotation</span></strong><span> and a </span><strong><span>right rotation</span></strong><span> function that returns all the left rotations and right rotations of a string.</span></p><h3><span>Examples</span></h3><pre><code>leftRotations(\"abc\") ➞ [\"abc\", \"bca\", \"cab\"]\n\nrightRotations(\"abc\") ➞ [\"abc\", \"cab\", \"bca\"]\n\nleftRotations(\"abcdef\") \n➞ [\"abcdef\", \"bcdefa\", \"cdefab\", \"defabc\", \"efabcd\", \"fabcde\"]\n\nrightRotations(\"abcdef\") \n➞ [\"abcdef\", \"fabcde\", \"efabcd\", \"defabc\", \"cdefab\", \"bcdefa\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(leftRotations(\"abc\"), ",
			"    [\"abc\", ",
			"    \"bca\", ",
			"    \"cab\"])",
			"​",
			"Test.assertSimilar(leftRotations(\"abcdef\"),",
			"    [\"abcdef\", ",
			"    \"bcdefa\", ",
			"    \"cdefab\", ",
			"    \"defabc\", ",
			"    \"efabcd\", ",
			"    \"fabcde\"])",
			"​",
			"Test.assertSimilar(leftRotations(\"himalaya\"), ",
			"    [\"himalaya\", ",
			"    \"imalayah\", ",
			"    \"malayahi\", ",
			"    \"alayahim\", ",
			"    \"layahima\", ",
			"    \"ayahimal\", ",
			"    \"yahimala\", ",
			"    \"ahimalay\"])",
			"​",
			"Test.assertSimilar(leftRotations(\"aab\"), ",
			"    [\"aab\", ",
			"    \"aba\","
		],
		"starterFn": [
			"1\nfunction leftRotations(str) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction rightRotations(str) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/XoBFQ9CJDBFEKEAj9"
	},
	{
		"title": "Briscola! (Part I)",
		"description": "<p><span>Briscola is an Italian card game, played with a deck of 40 cards that has four suits (hearts, diamonds, clubs, and spades), so that there are ten cards per suit: the Ace, the numbered cards from 2 up to 7, and the three face-cards (Jack, Queen, and King). In this challenge, the notation used for the cards is a string containing the card value (with the upper-case initial for face-cards) and the lower-case initial for suits, as in the examples below:</span></p><pre><code>Ah = Ace of Hearts\n2s = Two of Spades\nJc = Jack of Clubs\nKd = King of Diamonds</code></pre><p><span>The total number of points available is </span><strong><span>120</span></strong><span>. When counting the points scored at the end of a game, the cards have the following values:</span></p><ul><li><strong><span>Ace</span></strong><span>: 11 points</span></li><li><strong><span>Three</span></strong><span>: 10 points</span></li><li><strong><span>King</span></strong><span>: 4 points</span></li><li><strong><span>Queen</span></strong><span>: 3 points</span></li><li><strong><span>Jack</span></strong><span>: 2 points</span></li><li><span>Any other card has no value (0 points).</span></li></ul><p><span>Each game of Briscola is made of two rounds. After the first round, the points are counted for both you and your opponent, and these scores (plus 1) will set the target for winning the game, after that the second round is played.</span></p><pre><code>- First Round -\nPlayer score: 80\nOpponent score: 40\n- Second Round -\nPlayer wins scoring 41 points or more.\nOpponent wins scoring 81 points or more.</code></pre><p><span>If after the second round the total points are equal for both you and your opponent, it's a tie.</span></p><pre><code>- First Round -\nPlayer score: 80\nOpponent score: 40\n- Second Round -\nPlayer score: 40\nOpponent score: 80\n\nIt's a tie! 120 points for both players.</code></pre><p><span>You are given two arrays as parameters:</span></p><ul><li><code>myDeck1</code><span> contains your collected cards during the </span><strong><span>first round</span></strong><span>.</span></li><li><code>myDeck2</code><span> contains your collected cards during the </span><strong><span>second round</span></strong><span>.</span></li></ul><p><span>You have to implement a function that returns:</span></p><ul><li><code>\"You Win!\"</code><span> if in the second round you totalized a higher score than your opponent's score in the first round.</span></li><li><code>\"You Lose!\"</code><span> if in the second round you totalized a lower score than your opponent's score in the first round.</span></li><li><code>\"Draw!\"</code><span> if after the second round the total points are the same for both you and your opponent.</span></li></ul><h3><span>Examples</span></h3><pre><code>briscolaScore(\n  [\"3c\", \"3s\", \"Qd\", \"Jh\", \"5d\", \"Jc\", \"6d\", \"Ad\", \"Js\", \"Qc\"],\n  [\"Jd\", \"Kd\", \"4c\", \"6s\", \"Ks\", \"5c\", \"3d\", \"As\", \"Jh\", \"6h\"]\n) ➞ \"You Lose!\"\n\n// You score 43 points in the first round.\n// You need to score at least 78 points in the second round.\n// You score 33 points in the second round.\n\nbriscolaScore(\n  [\"Ac\", \"As\", \"3d\", \"3h\", \"3s\", \"Ah\", \"Kd\"],\n  [\"3d\", \"Ad\", \"Ac\", \"As\", \"Ah\"]\n) ➞ \"You Win!\"\n\n// You score 67 points in the first round.\n// You need to score at least 54 points in the second round.\n// You score 54 points in the second round.\n\nbriscolaScore(\n  [\"Ac\", \"As\", \"3d\", \"3h\", \"3s\", \"Ah\", \"Kd\"],\n  [\"3d\", \"Ad\", \"Ac\", \"As\", \"3h\"]\n) ➞ \"Draw!\"\n\n// You score 67 points in the first round.\n// You need to score at least 54 points in the second round.\n// You score 53 points in the second round.\n// Your total score is 120, and so is for your opponent.</code></pre><h3><span>Notes</span></h3><ul><li><span>You don't need to count the points scored by your opponent, because you know the maximum points available in a round (120).</span></li><li><span>Despite suits are important during the game, they do not influence the score when counting points.</span></li><li><span>The original standard suits and face-cards of an Italian deck are different from the international ones used for Poker. If you want to know more, take a look at the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"games"
		],
		"tests": [
			"// Test #1",
			"const myDeck1_test1 = [",
			"  '3c', '3s', 'Qd', 'Jh', '5d', 'Jc', '6d', 'Ad', 'Js', 'Qc'",
			"]",
			"const myDeck2_test1 = [",
			"  'Jd', 'Kd', '4c', '6s', 'Ks', '5c', '3d', 'As', 'Jh', '6h'",
			"]",
			"Test.assertEquals(briscolaScore(myDeck1_test1, myDeck2_test1), \"You Lose!\", \"Example #1\");",
			"​",
			"// Test #2",
			"const myDeck1_test2 = [",
			"  'Ac', 'As', '3d', '3h', '3s', 'Ah', 'Kd'",
			"]",
			"const myDeck2_test2 = [",
			"  '3d', 'Ad', 'Ac', 'As', 'Ah'",
			"]",
			"Test.assertEquals(briscolaScore(myDeck1_test2, myDeck2_test2), \"You Win!\", \"Example #2\");",
			"​",
			"// Test #3",
			"const myDeck1_test3 = [",
			"  'Ac', 'As', '3d', '3h', '3s', 'Ah', 'Kd'",
			"]",
			"const myDeck2_test3 = [",
			"  '3d', 'Ad', 'Ac', 'As', '3h'",
			"]",
			"Test.assertEquals(briscolaScore(myDeck1_test3, myDeck2_test3), \"Draw!\", \"Example #3\");"
		],
		"starterFn": [
			"1\nfunction briscolaScore(myDeck1, myDeck2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GkvBnNFKcf4ZANXPH"
	},
	{
		"title": "Rock, Paper, Scissors!",
		"description": "<p><span>Abigail and Benson are playing Rock, Paper, Scissors.</span></p><p><span>Each game is represented by an array of length 2, where the first element represents what Abigail played and the second element represents what Benson played.</span></p><p><span>Given a sequence of games, determine who wins the most number of matches. If they tie, output \"Tie\".</span></p><ul><li><span>R stands for Rock</span></li><li><span>P stands for Paper</span></li><li><span>S stands for Scissors</span></li></ul><h3><span>Examples</span></h3><pre><code>calculateScore([[\"R\", \"P\"], [\"R\", \"S\"], [\"S\", \"P\"]]) ➞ \"Abigail\"\n\n// Ben wins the first game (Paper beats Rock).\n// Abigail wins the second game (Rock beats Scissors).\n// Abigail wins the third game (Scissors beats Paper). \n// Abigail wins 2/3.\n\ncalculateScore([[\"R\", \"R\"], [\"S\", \"S\"]]) ➞ \"Tie\"\n\ncalculateScore([[\"S\", \"R\"], [\"R\", \"S\"], [\"R\", \"R\"]]) ➞ \"Tie\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"control_flow",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(calculateScore([['R', 'P'], ['R', 'S'], ['S', 'P']]),  \"Abigail\");",
			"Test.assertEquals(calculateScore([['R', 'R'], ['S', 'S']]), \"Tie\");",
			"Test.assertEquals(calculateScore([['S', 'R'], ['R', 'S'], ['R', 'R']]), \"Tie\");",
			"Test.assertEquals(calculateScore([['S', 'R'], ['P', 'R']]), \"Tie\");",
			"Test.assertEquals(calculateScore([['S', 'S'], ['S', 'P'], ['R', 'S'], ['S', 'R'], ['R', 'R']]), \"Abigail\");",
			"Test.assertEquals(calculateScore([['S', 'R'], ['S', 'R'], ['S', 'R'], ['R', 'S'], ['R', 'S']]), \"Benson\");"
		],
		"starterFn": [
			"1\nfunction calculateScore(games) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jtvCv6cjHorKpmyFc"
	},
	{
		"title": "Switching Between Pencils",
		"description": "<p><span>When coloring a striped pattern, you may start by coloring each square </span><em><span>sequentially</span></em><span>, meaning you spend time needing to </span><em><span>switch coloring pencils</span></em><span>.</span></p><p><span>Create a function where given an </span><em><span>array of colors</span></em><span> </span><code>cols</code><span>, return how long it takes to color the whole pattern. Note the following times:</span></p><ul><li><span>It takes </span><strong><span>1 second</span></strong><span> to </span><em><span>switch between pencils</span></em><span>.</span></li><li><span>It takes </span><strong><span>2 seconds</span></strong><span> to </span><em><span> color a square</span></em><span>.</span></li></ul><p><span>See the example below for clarification.</span></p><pre><code>color_pattern_times([\"Red\", \"Blue\", \"Red\", \"Blue\", \"Red\"]) ➞ 14\n\n// There are 5 colors so it takes 2 seconds to color each one (2 x 5 = 10).\n// You need to switch the pencils 4 times and it takes 1 second to switch (1 x 4 = 4).\n// 10 + 4 = 14</code></pre><h3><span>Examples</span></h3><pre><code>colorPatternTimes([\"Blue\"]) ➞ 2\n\ncolorPatternTimes([\"Red\", \"Yellow\", \"Green\", \"Blue\"]) ➞ 11\n\ncolorPatternTimes([\"Blue\", \"Blue\", \"Blue\", \"Red\", \"Red\", \"Red\"]) ➞ 13</code></pre><h3><span>Notes</span></h3><ul><li><span>Only change coloring pencils if the next color is different to the color before it.</span></li><li><span>Return a number in </span><em><span>seconds</span></em><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays"
		],
		"tests": [
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Green\", \"Blue\", \"Yellow\", \"Red\", \"Red\", \"Yellow\", \"Green\", \"Green\", \"Green\", \"Red\", \"Blue\", \"Yellow\", \"Blue\", \"Green\", \"Green\", \"Red\", \"Red\", \"Red\", \"Blue\", \"Green\", \"Red\", \"Blue\", \"Blue\", \"Red\", \"Blue\"]), 70)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Blue\", \"Yellow\", \"Blue\", \"Green\", \"Green\", \"Yellow\", \"Green\", \"Blue\", \"Blue\", \"Blue\", \"Red\", \"Blue\", \"Red\", \"Green\", \"Red\"]), 44)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Green\", \"Blue\"]), 8)",
			"Test.assertEquals(colorPatternTimes([\"Green\", \"Green\", \"Red\", \"Green\", \"Yellow\", \"Red\", \"Red\", \"Green\", \"Red\", \"Green\"]), 27)",
			"Test.assertEquals(colorPatternTimes([\"Red\"]), 2)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Red\", \"Blue\", \"Red\", \"Green\", \"Red\", \"Blue\", \"Green\", \"Green\", \"Yellow\", \"Red\"]), 30)",
			"Test.assertEquals(colorPatternTimes([\"Green\", \"Green\", \"Blue\", \"Red\", \"Red\", \"Blue\", \"Yellow\", \"Red\", \"Red\", \"Green\", \"Yellow\", \"Red\", \"Yellow\", \"Red\", \"Green\", \"Yellow\", \"Red\", \"Green\", \"Yellow\", \"Blue\", \"Yellow\", \"Red\", \"Green\", \"Green\", \"Blue\", \"Yellow\", \"Green\", \"Green\", \"Green\", \"Blue\"]), 83)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Blue\", \"Red\", \"Blue\", \"Green\", \"Blue\", \"Yellow\", \"Blue\", \"Yellow\", \"Yellow\", \"Yellow\", \"Red\"]), 33)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Green\", \"Yellow\", \"Yellow\"]), 10)",
			"Test.assertEquals(colorPatternTimes([\"Blue\", \"Blue\", \"Yellow\", \"Green\", \"Green\", \"Red\", \"Blue\", \"Yellow\", \"Red\", \"Yellow\", \"Green\", \"Red\", \"Yellow\", \"Green\", \"Yellow\", \"Blue\", \"Yellow\", \"Green\", \"Green\", \"Blue\"]), 56)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Blue\", \"Yellow\", \"Blue\", \"Green\", \"Yellow\", \"Yellow\", \"Yellow\", \"Yellow\", \"Red\", \"Red\", \"Yellow\", \"Yellow\"]), 33)",
			"Test.assertEquals(colorPatternTimes([\"Blue\", \"Red\", \"Red\"]), 7)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Blue\", \"Yellow\", \"Green\", \"Blue\", \"Yellow\", \"Blue\", \"Yellow\", \"Red\", \"Green\", \"Green\", \"Blue\", \"Blue\", \"Green\", \"Green\", \"Red\", \"Green\", \"Red\", \"Green\", \"Red\", \"Red\", \"Green\", \"Red\", \"Red\", \"Green\", \"Red\", \"Blue\", \"Yellow\", \"Red\", \"Red\"]), 83)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Blue\", \"Yellow\", \"Yellow\", \"Yellow\", \"Blue\", \"Blue\"]), 17)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Red\", \"Green\", \"Green\", \"Yellow\", \"Green\", \"Green\", \"Yellow\", \"Yellow\", \"Red\", \"Green\", \"Green\", \"Blue\", \"Green\", \"Red\", \"Yellow\"]), 43)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Red\", \"Blue\", \"Yellow\", \"Red\", \"Red\", \"Red\", \"Yellow\", \"Blue\", \"Blue\", \"Yellow\", \"Yellow\", \"Red\", \"Yellow\", \"Red\", \"Blue\", \"Blue\", \"Yellow\", \"Yellow\", \"Blue\", \"Blue\", \"Yellow\", \"Red\", \"Blue\", \"Red\", \"Blue\", \"Red\", \"Yellow\", \"Blue\"]), 78)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Red\", \"Green\"]), 8)",
			"Test.assertEquals(colorPatternTimes([\"Green\", \"Red\", \"Yellow\", \"Yellow\", \"Blue\", \"Red\", \"Blue\", \"Blue\", \"Yellow\", \"Red\", \"Yellow\", \"Green\", \"Green\", \"Red\", \"Green\", \"Blue\", \"Green\", \"Red\", \"Blue\", \"Yellow\", \"Red\"]), 59)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Red\", \"Blue\", \"Green\", \"Red\", \"Green\", \"Yellow\", \"Yellow\", \"Yellow\", \"Red\", \"Green\", \"Blue\", \"Blue\"]), 35)",
			"Test.assertEquals(colorPatternTimes([\"Green\", \"Blue\", \"Blue\", \"Red\", \"Yellow\", \"Red\", \"Red\", \"Yellow\", \"Red\", \"Red\", \"Blue\", \"Red\", \"Red\"]), 34)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Yellow\", \"Red\", \"Blue\"]), 10)",
			"Test.assertEquals(colorPatternTimes([\"Green\", \"Red\", \"Red\", \"Blue\", \"Yellow\", \"Blue\", \"Yellow\", \"Yellow\", \"Green\", \"Red\", \"Red\", \"Green\", \"Red\", \"Yellow\", \"Yellow\", \"Green\", \"Green\", \"Yellow\", \"Blue\", \"Blue\", \"Red\", \"Yellow\", \"Red\", \"Blue\", \"Red\", \"Blue\", \"Blue\", \"Yellow\", \"Blue\", \"Yellow\"]), 82)",
			"Test.assertEquals(colorPatternTimes([\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Yellow\", \"Yellow\", \"Yellow\", \"Blue\"]), 20)",
			"Test.assertEquals(colorPatternTimes([\"Green\", \"Red\", \"Green\", \"Red\", \"Yellow\", \"Green\", \"Green\", \"Red\", \"Red\", \"Yellow\", \"Green\", \"Yellow\", \"Yellow\", \"Yellow\"]), 37)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Red\", \"Green\", \"Blue\", \"Blue\", \"Red\", \"Red\", \"Yellow\", \"Red\", \"Green\", \"Red\"]), 30)",
			"Test.assertEquals(colorPatternTimes([\"Yellow\", \"Yellow\", \"Blue\", \"Yellow\", \"Green\", \"Yellow\", \"Green\", \"Green\", \"Red\", \"Yellow\", \"Blue\", \"Green\", \"Green\", \"Green\"]), 37)"
		],
		"starterFn": [
			"1\nfunction colorPatternTimes(cols) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Np7R8F24PaqBShZc5"
	},
	{
		"title": "Longest Word in a 7 Segment Display",
		"description": "<p><span>Given an </span><em><span>array of words</span></em><span>, return the </span><strong><span>longest word</span></strong><span> which can fit on a </span><em><span>7 segment display</span></em><span>.</span></p><p><img alt=\"Image of a 7 segment display\" src=\"https://edabit-challenges.s3.amazonaws.com/clock_xkmdxe.jpeg\"></p><ul><li><span>Letters which do not fit on a </span><em><span>7 segment display</span></em><span> are </span><strong><span>K</span></strong><span>, </span><strong><span>M</span></strong><span>, </span><strong><span>V</span></strong><span>, </span><strong><span>W</span></strong><span> and </span><strong><span>X</span></strong><span>.</span></li><li><span>Therefore, do not count words which include these letters.</span></li></ul><h3><span>Examples</span></h3><pre><code>longest7SegmentWord([\"knighthood\", \"parental\", \"fridge\", \"clingfilm\"]) ➞ \"parental\"\n\nlongest7SegmentWord([\"coding\", \"crackers\", \"edabit\", \"celebration\"]) ➞ \"celebration\"\n\nlongest7SegmentWord([\"velocity\", \"mackerel\", \"woven\", \"kingsmen\"]) ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All words will be given in lowercase.</span></li><li><span>Return an </span><em><span>empty string</span></em><span> if no words are eligible (see example #3).</span></li><li><span>If multiple valid words have the same length, return the </span><strong><span>first word that appears</span></strong><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(longest7SegmentWord([\"knighthood\", \"parental\", \"fridge\", \"clingfilm\"]), \"parental\")",
			"Test.assertEquals(longest7SegmentWord([\"coding\", \"crackers\", \"edabit\", \"celebration\"]), \"celebration\")",
			"Test.assertEquals(longest7SegmentWord([\"velocity\", \"mackerel\", \"woven\", \"kingsmen\"]), \"\")",
			"Test.assertEquals(longest7SegmentWord([\"embarrassment\", \"perceive\", \"front\"]), \"front\")",
			"Test.assertEquals(longest7SegmentWord([\"truck\", \"accessible\", \"undermine\", \"unique\", \"tear\", \"cat\", \"avenue\", \"labour\", \"goat\", \"dance\", \"rise\", \"scale\"]), \"accessible\")",
			"Test.assertEquals(longest7SegmentWord([\"act\", \"adjust\", \"proud\", \"battery\", \"tear\", \"beautiful\", \"avenue\", \"thoughtful\", \"victory\", \"mobile\", \"straight\"]), \"thoughtful\")",
			"Test.assertEquals(longest7SegmentWord([\"fair\", \"tear\", \"truck\"]), \"fair\")",
			"Test.assertEquals(longest7SegmentWord([\"scale\", \"pass\", \"act\", \"sector\", \"vain\", \"scale\"]), \"sector\")",
			"Test.assertEquals(longest7SegmentWord([\"vegetarian\", \"unique\", \"sensitivity\", \"goat\", \"nature\", \"attract\", \"suntan\", \"mobile\", \"pillow\", \"economist\", \"arrest\", \"galaxy\", \"proud\", \"proud\"]), \"attract\")",
			"Test.assertEquals(longest7SegmentWord([\"vat\", \"suntan\", \"murder\", \"dance\", \"course\", \"institution\"]), \"institution\")",
			"Test.assertEquals(longest7SegmentWord([\"adjust\", \"garlic\", \"preoccupation\", \"nature\", \"garlic\", \"undermine\", \"pavement\", \"payment\", \"fair\", \"twin\", \"expertise\", \"pillow\", \"dance\", \"economist\", \"establish\", \"nervous\", \"sector\"]), \"preoccupation\")",
			"Test.assertEquals(longest7SegmentWord([\"embarrassment\", \"bell\", \"obese\", \"width\", \"singer\", \"strikebreaker\", \"width\", \"preoccupation\", \"nervous\"]), \"preoccupation\")",
			"Test.assertEquals(longest7SegmentWord([\"winner\", \"twin\", \"establish\"]), \"establish\")",
			"Test.assertEquals(longest7SegmentWord([\"fair\", \"institution\", \"vegetarian\", \"electron\", \"suntan\", \"settle\", \"royalty\", \"bracket\", \"conductor\", \"blade\", \"camp\", \"potential\", \"human body\"]), \"institution\")",
			"Test.assertEquals(longest7SegmentWord([\"width\", \"straight\", \"sign\", \"inspire\", \"lay\", \"pavement\", \"settle\", \"undermine\", \"cat\", \"labour\", \"adjust\", \"admire\", \"scramble\", \"pavement\", \"limited\", \"payment\", \"withdrawal\", \"full\", \"brave\"]), \"straight\")",
			"Test.assertEquals(longest7SegmentWord([\"limited\", \"arrest\", \"harm\", \"tear\", \"vain\", \"bracket\", \"settle\", \"settle\", \"spine\", \"mobile\", \"potential\", \"cat\", \"winner\", \"tear\"]), \"potential\")",
			"Test.assertEquals(longest7SegmentWord([\"front\", \"economist\", \"sector\", \"camp\"]), \"sector\")",
			"Test.assertEquals(longest7SegmentWord([\"murder\", \"vain\", \"fair\", \"sign\", \"establish\", \"flow\", \"bell\", \"truck\", \"winner\", \"tear\", \"avenue\", \"move\", \"pillow\", \"murder\", \"gesture\", \"garlic\", \"unique\", \"brave\", \"pass\", \"avenue\"]), \"establish\")",
			"Test.assertEquals(longest7SegmentWord([\"full\", \"suntan\", \"strikebreaker\", \"front\", \"truck\", \"vegetarian\", \"maze\", \"shine\", \"potential\", \"conductor\", \"width\", \"economist\", \"lounge\", \"pound\", \"camp\", \"sensitivity\"]), \"potential\")",
			"Test.assertEquals(longest7SegmentWord([\"party\", \"width\", \"sector\", \"withdrawal\", \"limited\", \"victory\", \"presidency\", \"pillow\", \"beautiful\", \"shine\"]), \"presidency\")",
			"Test.assertEquals(longest7SegmentWord([\"front\", \"mirror\", \"shine\", \"spine\", \"lay\", \"obese\", \"shine\", \"singer\", \"straight\", \"establish\", \"embarrassment\", \"admire\", \"vain\", \"presidency\", \"winner\", \"dance\", \"inject\", \"proud\", \"establish\"]), \"presidency\")",
			"Test.assertEquals(longest7SegmentWord([\"pound\", \"scramble\", \"labour\", \"vegetarian\", \"obese\", \"delicate\", \"dictionary\", \"act\", \"nature\", \"shine\"]), \"dictionary\")",
			"Test.assertEquals(longest7SegmentWord([\"goat\", \"institution\", \"move\", \"twin\", \"lay\", \"embarrassment\", \"labour\"]), \"institution\")",
			"Test.assertEquals(longest7SegmentWord([\"victory\", \"embarrassment\", \"truck\", \"presidency\", \"maze\", \"truck\"]), \"presidency\")",
			"Test.assertEquals(longest7SegmentWord([\"accessible\", \"embarrassment\", \"embarrassment\", \"extort\", \"width\", \"garlic\"]), \"accessible\")",
			"Test.assertEquals(longest7SegmentWord([\"shine\", \"admire\"]), \"shine\")"
		],
		"starterFn": [
			"1\nfunction longest7SegmentWord(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zLSsBEKyu2HLTZYd8"
	},
	{
		"title": "Moving Partition",
		"description": "<p><span>Create a function to partition an array from left to right.</span></p><h3><span>Examples</span></h3><pre><code>movingPartition([-1, -1, -1, -1])\n➞ [[[-1], [-1, -1, -1]], [[-1, -1], [-1, -1]], [[-1, -1, -1], [-1]]]\n\nmovingPartition([1, 2, 3, 4, 5])\n➞ [[[1], [2, 3, 4, 5]], [[1, 2], [3, 4, 5]], [[1, 2, 3], [4, 5]], [[1, 2, 3, 4], [5]]]\n\nmovingPartition([]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>With an </span><code>n</code><span> input, your output should be an array containing </span><code>n-1</code><span> subarrays. Each subarray should have two elements: the left and the right side of the partition (both should be non-empty, unless the input array is empty).</span></li><li><span>An empty array should return an empty array: </span><code>[]</code></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(movingPartition([1, 2, 3, 4, 5]), [[[1], [2, 3, 4, 5]], [[1, 2], [3, 4, 5]], [[1, 2, 3], [4, 5]], [[1, 2, 3, 4], [5]]])",
			"Test.assertSimilar(movingPartition([-1, -1, -1, -1]), [[[-1], [-1, -1, -1]], [[-1, -1], [-1, -1]], [[-1, -1, -1], [-1]]])",
			"Test.assertSimilar(movingPartition([8, 9, 10]), [[[8], [9, 10]], [[8, 9], [10]]])",
			"Test.assertSimilar(movingPartition([]), [])"
		],
		"starterFn": [
			"1\nfunction movingPartition(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MJKYcPsw34sWbcqP8"
	},
	{
		"title": "RegEx: Boundary Assertions VI",
		"description": "<p><span>You're needed to finish a program that lists how many tall people work in your company. All that is needed is a </span><strong><span>regular expression</span></strong><span> that will make the function work correctly.</span></p><pre><code>const res = [\"tall height\", \"tall height\", \"short height\", \"medium height\", \"tall height\"]\n\nfunction countTall(res) {\n  const REGEXP = /* YOU FILL IN */\n  return res.filter( x =&gt; REGEXP.test(x)).length\n}\n\ncountTall(res) // should output 3</code></pre><p><span>Write the </span><strong><span>regular expression</span></strong><span> to make the function output the correct number. You're required to use a </span><strong><span>positive lookbehind</span></strong><span> assertion in your expression.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on </span><strong><span>lookbehind</span></strong><span> assertions.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"const res = [\"tall height\", \"tall height\", \"short height\", \"medium height\", \"tall height\"] ",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\(\\?\\<\\=/.test(String(REGEXP))) return () => \"positive lookbehind required\"",
			"   return function testReg(res) {",
			"     return res.filter(x => REGEXP.test(x)).length",
			"   }",
			"} ",
			"​",
			"const testExp = validate(REGEXP) ",
			"​",
			"Test.assertNotEquals(testExp(res), \"positive lookbehind required\", \"You are required to use a positive lookbehind in your expression.\")",
			"Test.assertSimilar(testExp(res), 3)"
		],
		"starterFn": [
			"1\nconst REGEXP = /* YOU FILL IN */"
		],
		"url": "https://edabit.com/challenge/hQtRsdNykZgNEZp9J"
	},
	{
		"title": "Count the Lone Ones",
		"description": "<p><span>Create a function which counts how many </span><em><span>lone</span></em><span> ones appear in a given number. Lone means the number doesn't appear more than once in a row.</span></p><h3><span>Examples</span></h3><pre><code>countLoneOnes(101) ➞ 2\n\ncountLoneOnes(1191) ➞ 1\n\ncountLoneOnes(1111) ➞ 0\n\ncountLoneOnes(462) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Tests will include positive whole numbers only.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(countLoneOnes(101), 2)",
			"Test.assertEquals(countLoneOnes(1191), 1)",
			"Test.assertEquals(countLoneOnes(1111), 0)",
			"Test.assertEquals(countLoneOnes(11101), 1)",
			"Test.assertEquals(countLoneOnes(462), 0)",
			"Test.assertEquals(countLoneOnes(12131415161718191n), 9)",
			"Test.assertEquals(countLoneOnes(11231212111), 2)",
			"Test.assertEquals(countLoneOnes(1), 1)",
			"Test.assertEquals(countLoneOnes(0), 0)"
		],
		"starterFn": [
			"1\nfunction countLoneOnes(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BuAfYbHeMPJZpSesR"
	},
	{
		"title": "Sum of Slices of an Array (Part 1)",
		"description": "<p><span>Create a function that takes an array as an argument and return an array of the sum of each of its slices. An array's slices are groups of consecutive values that add up to a maximum of 100. No slice's total sum should exceed 100.</span></p><h3><span>Examples</span></h3><pre><code>sumOfSlices([10, 29, 13, 14, 15, 16, 17, 31, 20, 10, 29, 13, 14, 15, 16, 17, 31, 20, 100]) ➞ [97, 78, 87, 68, 100]\n\n/* Explanation:\nFirst slice: [10, 29, 13, 14, 15, 16]\n10 + 29 + 13 + 14 + 15 + 16 = 97\nThe next value could not be included in this slice since the total would exceed 100\n\nSecond slice: [17, 31, 20, 10]\n17 + 31 + 20 + 10 = 78\nThe next value could not be included in this slice since the total would exceed 100\n\nAnd so on... */</code></pre><h3><span>Notes</span></h3><p><span>Do not sort the array.</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(sumOfSlices([10, 29, 13, 14, 15, 16, 17, 31, 20, 10, 29, 13, 14, 15, 16, 17, 31, 20, 100]), [97, 78, 87, 68, 100])",
			"Test.assertSimilar(sumOfSlices([58,3, 38, 99, 10]), [99, 99, 10])",
			"Test.assertSimilar(sumOfSlices([13]), [13])",
			"Test.assertSimilar(sumOfSlices([62, 406,  343,  234,  244,  200,  304,  462,  212,  48, 166,  71, 80, 51, 307,  442,  368,  235,  199,  411,  100,  203,  330,  437,  226,  365,  337,  464,  14, 350]), [62, 406, 343, 234, 244, 200, 304, 462, 212,  48, 166,  71,  80,  51, 307, 442, 368, 235, 199, 411, 100, 203, 330, 437, 226, 365, 337, 464, 14, 350])",
			"Test.assertSimilar(sumOfSlices([315,  47]), [0, 315, 47])"
		],
		"starterFn": [
			"1\nfunction sumOfSlices(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iaySFYs3oTQDboeqd"
	},
	{
		"title": "Dance for Cash",
		"description": "<p><span>Your local bank has decided to upgrade its ATM machines by incorporating motion sensor technology. The machines now interpret a series of consecutive dance moves in place of a PIN number. </span></p><p><span>Create a program that converts a customer's PIN number to its dance equivalent. There is one dance move per digit in the PIN number. A list of dance moves is given in the code.</span></p><h3><span>Examples</span></h3><pre><code>danceConvert(\"0000\") ➞ [\"Shimmy\", \"Shake\", \"Pirouette\", \"Slide\"]\n\ndanceConvert(\"3856\") ➞ [ \"Slide\", \"Arabesque\", \"Pop\", \"Arabesque\" ]\n\ndanceConvert(\"9999\") ➞ [ \"Arabesque\", \"Shimmy\", \"Shake\", \"Pirouette\" ]\n\ndanceConvert(\"32a1\") ➞ \"Invalid input.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Each dance move will be selected from a list by index based on the current digit's value plus that digit's index value. If this value is greater than the last index value of the dance list, it should cycle to the beginning of the list.</span></li><li><span>Valid input will always be a string of four digits. Output will be a string array.</span></li><li><span>If the input is not four valid numbers, return the string, \"Invalid input.\"</span></li></ul>",
		"publishedBy": "Zero_man",
		"publishedByUrl": "https://edabit.com/user/ZZA6JdLEBxHGozyWP",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(danceConvert(\"0000\"), ['Shimmy', 'Shake', 'Pirouette', 'Slide'])",
			"Test.assertSimilar(danceConvert(\"5555\"), ['Headspin', 'Dosado', 'Pop', 'Lock'])",
			"Test.assertSimilar(danceConvert(\"8888\"), ['Lock', 'Arabesque', 'Shimmy', 'Shake'])",
			"Test.assertSimilar(danceConvert(\"0123\"), ['Shimmy', 'Pirouette', 'Box Step', 'Dosado'])",
			"Test.assertSimilar(danceConvert(\"8765\"), ['Lock', 'Lock', \"Lock\", 'Lock'])",
			"Test.assertSimilar(danceConvert(\"9104\"), ['Arabesque', 'Pirouette', 'Pirouette', 'Pop'])",
			"Test.assertSimilar(danceConvert(\"3619\"), ['Slide', 'Pop', 'Slide', 'Pirouette'])",
			"Test.assertSimilar(danceConvert(\"9742\"), ['Arabesque', 'Lock', 'Dosado', 'Headspin'])",
			"Test.assertEquals(danceConvert(\"a95f\"), \"Invalid input.\")",
			"Test.assertEquals(danceConvert(\"834\"), \"Invalid input.\")",
			"Test.assertEquals(danceConvert(\"+493\"), \"Invalid input.\")",
			"Test.assertEquals(danceConvert(\"-324\"), \"Invalid input.\")"
		],
		"starterFn": [
			"1\nconst MOVES = [\"Shimmy\", \"Shake\", \"Pirouette\", \"Slide\", \"Box Step\", \"Headspin\", \"Dosado\", \"Pop\", \"Lock\", \"Arabesque\"];",
			"2\n​",
			"3\nfunction danceConvert(pin) {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/5eCqrJ7ByYCweDbHg"
	},
	{
		"title": "Anonymous Functions All The Way Down",
		"description": "<p><span>Create a function which takes a parameter </span><code>n</code><span> and returns a function such that it, when called </span><code>n</code><span> times, returns the string </span><code>\"edabit\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>lambdaDepth(0) ➞ \"edabit\"\n\nlambdaDepth(1)() ➞ \"edabit\"\n\nlambdaDepth(2)()() ➞ \"edabit\"\n\ntypeof lambdaDepth(2)() ➞ \"function\"</code></pre><h3><span>Notes</span></h3><ul><li><code>num</code><span> will always be a non-negative integer.</span></li><li><span>If </span><code>num == 0</code><span>, return </span><code>\"edabit\"</code><span>.</span></li><li><span>If </span><code>num &gt; 0</code><span>, return a function.</span></li><li><span>All non-example test cases come in two forms: checking whether </span><code>lambda_depth(k)</code><span>, after being called </span><code>k</code><span> times, returns a string, and checking whether </span><code>lambda_depth(k)</code><span> returns a function.</span></li></ul>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"closures",
			"functional_programming",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertEquals(lambdaDepth(0), 'edabit', 'Depth: 0')",
			"Test.assertEquals(lambdaDepth(1)(), 'edabit', 'Depth: 1')",
			"Test.assertEquals(lambdaDepth(2)()(), 'edabit', 'Depth: 2')",
			"Test.assertEquals(typeof lambdaDepth(2)(), 'function', 'Depth: 2')",
			"​",
			"// The following for loop generates 20 additional test cases.",
			"// For each integer k, the first test case calls lambda_depth(k)",
			"// and checks that lambda_depth(k), when called k times, returns 'edabit'.",
			"// The second test case checks if lambda_depth(k) returns a function.",
			"​",
			"for (k = 5; k < 15; k++) {",
			"  n = k.toString()",
			"  eval(\"Test.assertEquals(lambdaDepth(\" + n + \")\" + \"()\".repeat(k) + \", 'edabit', 'Depth: \" + n + \"')\")",
			"  Test.assertEquals(typeof lambdaDepth(k), 'function', 'Depth: ' + n)",
			"}"
		],
		"starterFn": [
			"1\nfunction lambdaDepth(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zaJeE6susYdwRyB6j"
	},
	{
		"title": "Substituting the The",
		"description": "<p><span>Create a function that </span><strong><span>replaces \"the\"</span></strong><span> in the sentence with </span><strong><span>\"an\"</span></strong><span> or </span><strong><span>\"a\"</span></strong><span>. Remember that if the </span><em><span>next word</span></em><span> begins with a </span><em><span>vowel</span></em><span>, use </span><strong><span>\"an\"</span></strong><span>. In the case of a </span><em><span>consonant</span></em><span>, use </span><strong><span>\"a\"</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>replaceThe(\"the dog and the envelope\") ➞ \"a dog and an envelope\"\n\nreplaceThe(\"the boy ran at the wall\") ➞ \"a boy ran at a wall\"\n\nreplaceThe(\"the egg, the spoon and the espionage\") ➞ \"an egg, a spoon and an espionage\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Sentences will always be in </span><strong><span>lowercase</span></strong><span>.</span></li><li><span>This won't cover edge cases such as </span><em><span>\"an hour\"</span></em><span> or </span><em><span>\"a unique thing\"</span></em><span> (since they </span><em><span>sound</span></em><span> differently to the rule).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(replaceThe(\"the dog and the envelope\"), \"a dog and an envelope\")",
			"Test.assertEquals(replaceThe(\"the boy ran at the wall\"), \"a boy ran at a wall\")",
			"Test.assertEquals(replaceThe(\"the egg, the spoon and the espionage\"), \"an egg, a spoon and an espionage\")",
			"Test.assertEquals(replaceThe(\"where is the spoon\"), \"where is a spoon\")",
			"Test.assertEquals(replaceThe(\"the quick brown fox jumps over the lazy dog\"), \"a quick brown fox jumps over a lazy dog\")",
			"Test.assertEquals(replaceThe(\"this edabit thing is quite neat\"), \"this edabit thing is quite neat\")",
			"Test.assertEquals(replaceThe(\"the lion, witch and the wardrobe\"), \"a lion, witch and a wardrobe\")",
			"Test.assertEquals(replaceThe(\"enter the correct password to access the epic program\"), \"enter a correct password to access an epic program\")",
			"Test.assertEquals(replaceThe(\"the man blew the final candle out and all was dark\"), \"a man blew a final candle out and all was dark\")",
			"Test.assertEquals(replaceThe(\"the ant ate the egg salad which the eel had been intending to eat over the weekend\"), \"an ant ate an egg salad which an eel had been intending to eat over a weekend\")",
			"Test.assertEquals(replaceThe(\"this the random english sentence which you have to pass\"), \"this a random english sentence which you have to pass\")"
		],
		"starterFn": [
			"1\nfunction replaceThe(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sjETtrGP8hYoms7vh"
	},
	{
		"title": "Shopping for Memorial Day!",
		"description": "<p><span>Create a function that will take in an array of objects and calculate the total based on the quantity of items purchased. Apply a 6% sales tax for each item when appropriate.</span></p><h3><span>Examples</span></h3><pre><code>checkout([\n  { desc: \"potato chips\", prc: 2, qty: 2, taxable: false },\n  { desc: \"soda\", prc: 3, qty: 2, taxable: false },\n  { desc: \"paper plates\", prc: 5, qty: 1, taxable: true }\n]) ➞ 15.3</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "vtchris",
		"publishedByUrl": "https://edabit.com/user/Rrb84KWhN5tjhMGMA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects"
		],
		"tests": [
			"Test.assertEquals(",
			"  checkout([",
			"    { desc: \"grill\", prc: 300, qty: 1, taxable: true },",
			"    { desc: \"hotdogs\", prc: 10, qty: 2, taxable: false },",
			"    { desc: \"US Flag\", prc: 30, qty: 1, taxable: true }",
			"  ]), 369.8)",
			"  ",
			"Test.assertEquals(",
			"  checkout([",
			"    { desc: \"hamburger\", prc: 5, qty: 2, taxable: false },",
			"    { desc: \"potato salad\", prc: 8, qty: 1, taxable: false },",
			"    { desc: \"potato chips\", prc: 2, qty: 2, taxable: false },",
			"    { desc: \"soda\", prc: 3, qty: 2, taxable: false },",
			"    { desc: \"paper plates\", prc: 5, qty: 1, taxable: true },",
			"  ]), 33.3)",
			"​",
			"Test.assertEquals(",
			"  checkout([",
			"    { desc: \"beach umbrella\", prc: 58, qty: 1, taxable: true },",
			"    { desc: \"beach towel\", prc: 9, qty: 2, taxable: true },",
			"    { desc: \"swim suit\", prc: 25, qty: 2, taxable: false },",
			"    { desc: \"soda\", prc: 3, qty: 2, taxable: false },",
			"    { desc: \"cooler\", prc: 25, qty: 1, taxable: true },",
			"  ]), 163.06)",
			"​",
			"Test.assertEquals("
		],
		"starterFn": [
			"1\nconst tax = .06",
			"2\n​",
			"3\nfunction checkout(cart) {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/rAgNy2t47iMqxz2Wu"
	},
	{
		"title": "Harvest Festival",
		"description": "<p><span>You have cultivated a plant, and after three long months, the time has come to reap the fruits (or the flowers, in this case) of your hard work. During the growth phase, you added water and fertilizer, and kept a constant temperature. It's time to check how much the plant has grown!</span></p><p><span>A plant is represented horizontally, from the base to the left, to the end to the right:</span></p><pre><code>---@---@---@</code></pre><p><span>The stem is made of hyphens, and the flowers are represented by symbols. A plant always starts with the stem, and always ends with flowers.</span></p><p><span>The four given parameters are:</span></p><ul><li><code>seed</code><span> (string) determines the type of flowers generated by the plant.</span></li><li><code>water</code><span> (integer) each unit of water extends the portion of stem between the flowers, and gives the total number of segments (stem + flowers) of the plant.</span></li><li><code>fert</code><span> (integer) each unit of fertilizer increases the amount of flowers, grouped in clusters.</span></li><li><code>temp</code><span> (integer) if the temperature recorded is between 20°C and 30°C (bounds included) the plant grows normally, otherwise all the flowers die, except for a single survivor at the end of the stem.</span></li></ul><p><span>Given the above parameters, implement a function that returns a string representing the plant (see the examples below for a better visualization).</span></p><h3><span>Examples</span></h3><pre><code>plant(\"@\", 3, 3, 25) ➞ \"---@@@---@@@---@@@\"\n// Water gives the length of the stem portions between flowers.\n// Water gives the total number of segments.\n// Fertilizer gives the length of flowers clusters.\n// In this case the temperature is in the acceptable range 20°C | 30°C\n\nplant(\"#\", 1, 5, 30) ➞ \"-#####\"\n\nplant(\"&amp;\", 5, 1, 20) ➞ \"-----&amp;-----&amp;-----&amp;-----&amp;-----&amp;\"\n\nplant(\"§\", 3, 3, 15) ➞ \"---------§\"\n// The temperature out of range make all flowers die, except the last one.\n// The stem is not affected by temperature.</code></pre><h3><span>Notes</span></h3><p><span>All given cases will have valid parameters for </span><code>water</code><span> and </span><code>fert</code><span>, you have to only check that </span><code>temp</code><span> is in the \"safe\" range (20°C|30°C).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(plant(\"@\", 3, 3, 25), \"---@@@---@@@---@@@\", \"Example #1\")",
			"Test.assertEquals(plant(\"#\", 1, 5, 30), \"-#####\", \"Example #2\")",
			"Test.assertEquals(plant(\"§\", 5, 1, 20), \"-----§-----§-----§-----§-----§\", \"Example #3\")",
			"Test.assertEquals(plant(\"&\", 3, 3, 15), \"---------&\", \"Example #4\")",
			"Test.assertEquals(plant(\"🍁\", 2, 6, 28), \"--🍁🍁🍁🍁🍁🍁--🍁🍁🍁🍁🍁🍁\")",
			"Test.assertEquals(plant(\"🍃\", 4, 2, 22), \"----🍃🍃----🍃🍃----🍃🍃----🍃🍃\")",
			"Test.assertEquals(plant(\"€\", 4, 10, 38), \"----------------€\")"
		],
		"starterFn": [
			"1\nfunction plant(seed, water, fert, temp) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CmWQTvvkXSeaNGdDy"
	},
	{
		"title": "Pokemon Damage Calculator",
		"description": "<p><span>It's a Pokemon battle! Your task is to calculate the damage that a particular move would do using the following formula (not the actual one from the game):</span></p><pre><code>damage = 50 * (attack / defense) * effectiveness</code></pre><ul><li><span>attack = your attack power</span></li><li><span>defense = the opponent's defense</span></li><li><span>effectiveness = the effectiveness of the attack based on the matchup (see explanation below)</span></li></ul><p><span>Effectiveness:</span></p><p><span>Attacks can be super effective, neutral, or not very effective depending on the matchup. For example, water would be super effective against fire, but not very effective against grass.</span></p><ul><li><span>Super effective: 2x damage</span></li><li><span>Neutral: 1x damage</span></li><li><span>Not very effective: 0.5x damage</span></li></ul><p><span>To prevent this challenge from being tedious, you'll only be dealing with four types: fire, water, grass, and electric. Here is the effectiveness of each matchup:</span></p><ul><li><span>fire &gt; grass</span></li><li><span>fire &lt; water</span></li><li><span>fire = electric</span></li><li><span>water &lt; grass</span></li><li><span>water &lt; electric</span></li><li><span>grass = electric</span></li></ul><p><span>The function you must implement takes in:</span></p><ul><li><span>your type</span></li><li><span>the opponent's type</span></li><li><span>your attack power</span></li><li><span>the opponent's defense</span></li></ul><h3><span>Examples</span></h3><pre><code>calculateDamage(\"fire\", \"water\", 100, 100) ➞ 25\n\ncalculateDamage(\"grass\", \"fire\", 35, 5) ➞ 175\n\ncalculateDamage(\"electric\", \"fire\", 100, 100) ➞ 50</code></pre><h3><span>Notes</span></h3><p><span>Any type against itself is not very effective. Also, assume that the relationships between different types are symmetric (if A is super effective against B, then B is not very effective against A).</span></p>",
		"publishedBy": "meesie1",
		"publishedByUrl": "https://edabit.com/user/FNBB7APikaxR3DtvN",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"games",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(calculateDamage(\"fire\", \"water\", 100, 100), 25)",
			"Test.assertEquals(calculateDamage(\"grass\", \"water\", 100, 100), 100)",
			"Test.assertEquals(calculateDamage(\"electric\", \"fire\", 100, 100), 50)",
			"Test.assertEquals(calculateDamage(\"grass\", \"electric\", 57, 19), 150)",
			"Test.assertEquals(calculateDamage(\"grass\", \"water\", 40, 40), 100)",
			"Test.assertEquals(calculateDamage(\"grass\", \"fire\", 35, 5), 175)",
			"Test.assertEquals(calculateDamage(\"fire\", \"electric\", 10, 2), 250)"
		],
		"starterFn": [
			"1\nfunction calculateDamage(yourType, opponentType, attack, defense){",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3hgkBd68EyYQF9YxG"
	},
	{
		"title": "Leaderboard Sort",
		"description": "<p><span>Given an array of users, each defined by an object with the following properties: </span><code>name</code><span>, </span><code>score</code><span>, </span><code>reputation</code><span> create a function that sorts the array to form the correct leaderboard.</span></p><p><span>The leaderboard takes into consideration the score of each user of course, but an </span><em><span>emphasis</span></em><span> is put on their </span><code>reputation</code><span> in the community, so to get the </span><code>trueScore</code><span>, you should add the </span><code>reputation</code><span> multiplied by </span><code>2</code><span> to the </span><code>score</code><span>.</span></p><p><span>Once you know the </span><code>trueScore</code><span> of each user, sort the array according to it in </span><strong><span>descending order</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>leaderboards([\n  { name: \"a\", score: 100, reputation: 20 },\n  { name: \"b\", score: 90, reputation: 40 },\n  { name: \"c\", score: 115, reputation: 30 },\n]) ➞ [\n  { name: \"c\", score: 115, reputation: 30 },  // trueScore = 175\n  { name: \"b\", score: 90, reputation: 40 },   // trueScore = 170\n  { name: \"a\", score: 100, reputation: 20 }   // trueScore = 140\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(",
			"  leaderboards([",
			"    { name: 'a', score: 100, reputation: 20 },",
			"    { name: 'b', score: 90, reputation: 40 },",
			"    { name: 'c', score: 115, reputation: 30 },",
			"  ]),",
			"  [",
			"    { name: 'c', score: 115, reputation: 30 },",
			"    { name: 'b', score: 90, reputation: 40 },",
			"    { name: 'a', score: 100, reputation: 20 },",
			"  ]",
			");",
			"​",
			"Test.assertSimilar(",
			"  leaderboards([",
			"    { name: 'tkincaid0', score: 4128, reputation: 3002 },",
			"    { name: 'sblackater1', score: 6208, reputation: 3050 },",
			"    { name: 'ocallis2', score: 6883, reputation: 3812 },",
			"    { name: 'shoofe3', score: 4900, reputation: 174 },",
			"    { name: 'cbrazear4', score: 7862, reputation: 2940 },",
			"    { name: 'oszachnie5', score: 6217, reputation: 1772 },",
			"    { name: 'lingcourt6', score: 5746, reputation: 1263 },",
			"    { name: 'tquincey7', score: 4209, reputation: 1419 },",
			"    { name: 'mcapsey8', score: 6961, reputation: 2699 },",
			"    { name: 'cbester9', score: 4090, reputation: 3934 },",
			"  ]),"
		],
		"starterFn": [
			"1\nfunction leaderboards(users) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nTZqZmAkLrjRx9PcK"
	},
	{
		"title": "Find the Vertex of a Quadratic",
		"description": "<p><span>Every quadratic curve </span><code>y = a x² + b x + c</code><span> has a </span><strong><span>vertex</span></strong><span> point: the turning point where the curve stops heading down and starts going up.</span></p><p><span>Given the values </span><code>a</code><span>, </span><code>b</code><span> and </span><code>c</code><span>, you need to return the coordinates of the vertex. Return your answers rounded to 2 decimal places.</span></p><h3><span>Examples</span></h3><pre><code>findVertex(1, 0, 25)  ➞ [0, 25]\n// The vertex of y=x²+25 is at (0, 25).\n\nfindVertex(-1, 0, 25) ➞ [0, 25]\n// The vertex of y=-x²+25 is at (0, 25).\n\nfindVertex(1, 10, 4) ➞ [-5, -21]\n// The vertex of y=x²+10x+4 is at (-5, -21).</code></pre><h3><span>Notes</span></h3><ul><li><span>See </span><strong><span>Resources</span></strong><span> if you're not sure how to find the x or y coordinates of the vertex.</span></li><li><code>a</code><span> will always be non-zero.</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertSimilar(findVertex(-1,0,25), [0,25])",
			"Test.assertSimilar(findVertex(1,10,25), [-5,0])",
			"Test.assertSimilar(findVertex(8, 4, 0),[ -0.25, -0.5 ])",
			"Test.assertSimilar(findVertex(4, -200, 1000),[25,-1500])",
			"Test.assertSimilar(findVertex(1, -50, -1000),[25,-1625])",
			"Test.assertSimilar(findVertex(-1, 20, 600), [10,700])",
			"Test.assertSimilar(findVertex(5, 1, 20),[-0.1,19.95])"
		],
		"starterFn": [
			"1\nfunction findVertex(a, b, c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/37fqtDceJcgb2zAGt"
	},
	{
		"title": "In N Days...",
		"description": "<p><span>If today was Monday, in two days, it would be Wednesday.</span></p><p><span>Create a function that takes in an array of days as input and the number of days to increment by. Return an array of days after </span><code>n</code><span> number of days has passed.</span></p><h3><span>Examples</span></h3><pre><code>afterNDays([\"Thursday\", \"Monday\"], 4) ➞ [\"Monday\", \"Friday\"]\n\nafterNDays([\"Sunday\", \"Sunday\", \"Sunday\"], 1) ➞ [\"Monday\", \"Monday\", \"Monday\"]\n\nafterNDays([\"Monday\", \"Tuesday\", \"Friday\"], 1) ➞ [\"Tuesday\", \"Wednesday\", \"Saturday\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return as an array.</span></li><li><span>All test cases will have the first letter of each day capitalized.</span></li><li><code>n</code><span> number of days may be greater than 7.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates"
		],
		"tests": [
			"Test.assertSimilar(afterNDays([\"Monday\", \"Tuesday\", \"Friday\"], 1), [\"Tuesday\", \"Wednesday\", \"Saturday\"])",
			"Test.assertSimilar(afterNDays([\"Sunday\", \"Sunday\", \"Sunday\"], 1), [\"Monday\", \"Monday\", \"Monday\"])",
			"Test.assertSimilar(afterNDays([\"Thursday\", \"Monday\"], 4), [\"Monday\", \"Friday\"])",
			"Test.assertSimilar(afterNDays([\"Sunday\"], 7), [\"Sunday\"])",
			"Test.assertSimilar(afterNDays([\"Monday\",\"Friday\",\"Wednesday\"], 15), [\"Tuesday\", \"Saturday\", \"Thursday\"])",
			"Test.assertSimilar(afterNDays([\"Sunday\",\"Tuesday\"], 5), [\"Friday\", \"Sunday\"])",
			"Test.assertSimilar(afterNDays([\"Saturday\",\"Wednesday\",\"Wednesday\"], 10), [\"Tuesday\", \"Saturday\",\"Saturday\"])",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction afterNDays(days, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fLDHdMhmaNEd528wB"
	},
	{
		"title": "One Plus One",
		"description": "<p><span>Create a function that outputs the result of a math expression in words.</span></p><h3><span>Examples</span></h3><pre><code>wordedMath(\"One plus one\") ➞ \"Two\"\n\nwordedMath(\"zero Plus one\") ➞ \"One\"\n\nwordedMath(\"one minus one\") ➞ \"Zero\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Expect only the operations </span><code>plus</code><span> and </span><code>minus</code><span>.</span></li><li><span>Expect to only get numbers and answers from </span><code>0</code><span> to </span><code>2</code><span>.</span></li><li><span>The first letter of the answer must be capitalised.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordedMath(\"One plus one\"), \"Two\")",
			"Test.assertEquals(wordedMath(\"zero Plus one\"), \"One\")",
			"Test.assertEquals(wordedMath(\"one minus one\"), \"Zero\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction wordedMath(expr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ci52KkmCATSCbSbTP"
	},
	{
		"title": "Elastic Words",
		"description": "<p><span>In this challenge, you must think about words as elastics. What happens when do you tend an elastic applying a constant traction force at both ends? Every part (or letter, in this case) of the elastic will expand, with the minimum expansion at the ends, and the maximum expansion in the center.</span></p><p><span>If the word has an odd length, the effective central character of the word will be the pivot that splits the word into two halves.</span></p><pre><code>\"ABC\" -&gt; Left = \"A\" | Center = \"B\" | Right = \"C\"</code></pre><p><span>If the word has an even length, you will consider two parts of equal length, with the last character of the left half and the first character of the right half being the center.</span></p><pre><code>\"ABCD\" -&gt; Left = \"AB\" | Right = \"CD\"</code></pre><p><span>You will represent the expansion of a letter repeating it as many times as its numeric position (so counting the indexes from/to 1, and not from 0 as usual) in its half, with a crescent order in the left half and a decrescent order in the right half.</span></p><pre><code>Word = \"ANNA\" \n\nLeft = \"AN\"\nRight = \"NA\"\n\nLeft = \"A\" * 1 + \"N\" * 2 = \"ANN\"\nRight = \"N\" * 2 + \"A\" * 1 = \"NNA\"\n\nWord = Left + Right = \"ANNNNA\"</code></pre><p><span>If the word has an odd length, the pivot (the central character) will be the peak (as to say, the highest value) that delimits the two halves of the word.</span></p><pre><code>Word = \"KAYAK\"\n\nLeft = \"K\" * 1 + \"A\" * 2 = \"KAA\"\nPivot = \"Y\" * 3 = \"YYY\"\nRight = \"A\" * 2 + \"K\" * 1 = \"AAK\"\n\nWord = Left + Pivot + Right = \"KAAYYYAAK\"</code></pre><p><span>Given a </span><code>word</code><span>, implement a function that returns the elasticized version of the word as a string.</span></p><h3><span>Examples</span></h3><pre><code>elasticize(\"ANNA\") ➞ \"ANNNNA\"\n\nelasticize(\"KAYAK\") ➞ \"KAAYYYAAK\"\n\nelasticize(\"X\") ➞ \"X\"</code></pre><h3><span>Notes</span></h3><ul><li><span>For words with less than three characters, the function must return the same word (no traction appliable).</span></li><li><span>Remember, into the left part characters are counted from 1 to the end, and, in reverse order until 1 is reached, into the right.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(elasticize(\"ANNA\"), \"ANNNNA\", \"Example #1\")",
			"Test.assertEquals(elasticize(\"KAYAK\"), \"KAAYYYAAK\", \"Example #2\")",
			"Test.assertEquals(elasticize(\"X\"), \"X\", \"Example #3\")",
			"Test.assertEquals(elasticize(\"AA\"), \"AA\")",
			"Test.assertEquals(elasticize(\"ABC\"), \"ABBC\")",
			"Test.assertEquals(elasticize(\"BOB\"), \"BOOB\")",
			"Test.assertEquals(elasticize(\"OTTO\"), \"OTTTTO\")",
			"Test.assertEquals(elasticize(\"LEVEL\"), \"LEEVVVEEL\")",
			"Test.assertEquals(elasticize(\"IJKCBA\"), \"IJJKKKCCCBBA\")",
			"Test.assertEquals(elasticize(\"REDDER\"), \"REEDDDDDDEER\")",
			"Test.assertEquals(elasticize(\"ROTATOR\"), \"ROOTTTAAAATTTOOR\")"
		],
		"starterFn": [
			"1\nfunction elasticize(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/diTZjq3pdnwMt6BNN"
	},
	{
		"title": "Safecracker",
		"description": "<p><span>Traditional safes use a three-wheel locking mechanism, with the safe combination entered using a dial on the door of the safe. The dial is marked with clockwise increments between 0 and 99. The three-number combination is entered by first dialling to the right (clockwise), then to the left (anti-clockwise), and then to the right (clockwise) again. Combination numbers are read from the top of the dial:</span></p><p><img src=\"https://www.bradleysmasterlocksmiths.co.uk/images/safe-engineers/image25.jpg\"></p><p><span>Given the starting (top) position of the dial and the increments used for each turn of the dial, return an array containing the </span><em><span>combination</span></em><span> of the safe.</span></p><h3><span>Step-By-Step Example</span></h3><pre><code>safecracker(0, [3, 10, 5]) ➞ [97, 7, 2]\n\nStarting dial position of 0 (same as the diagram above).\n\nFirst turn (rightward) of 3 increments:\n0 -&gt; 99, 98, 97\nFirst number of combination = 97\n\nSecond turn (leftward) of 10 increments:\n97 -&gt; 98, 99, 0, 1, 2, 3, 4, 5, 6, 7\nSecond number of combination = 7\n\nThird turn (rightward) of 5 increments:\n7 -&gt; 6, 5, 4, 3, 2\nThird number of combination = 2\n\nThe final combination is [97, 7, 2]</code></pre><h3><span>Other Examples</span></h3><pre><code>safecracker(96, [54, 48, 77]) ➞ [42, 90, 13]\n\nsafecracker(43, [51, 38, 46]) ➞ [92, 30, 84]\n\nsafecracker(4, [69, 88, 55]) ➞ [35, 23, 68]</code></pre><h3><span>Notes</span></h3><p><span>Each of the three combination numbers will be different.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertSimilar(safecracker(99, [87, 61, 91]), [12, 73, 82])",
			"Test.assertSimilar(safecracker(63, [22, 16, 35]), [41, 57, 22])",
			"Test.assertSimilar(safecracker(18, [10, 57, 96]), [8, 65, 69])",
			"Test.assertSimilar(safecracker(82, [91, 4, 91]), [91, 95, 4])",
			"Test.assertSimilar(safecracker(83, [37, 12, 7]), [46, 58, 51])",
			"Test.assertSimilar(safecracker(31, [44, 86, 23]), [87, 73, 50])",
			"Test.assertSimilar(safecracker(96, [47, 76, 89]), [49, 25, 36])",
			"Test.assertSimilar(safecracker(82, [41, 5, 66]), [41, 46, 80])",
			"Test.assertSimilar(safecracker(31, [59, 79, 99]), [72, 51, 52])",
			"Test.assertSimilar(safecracker(67, [71, 93, 93]), [96, 89, 96])",
			"Test.assertSimilar(safecracker(95, [14, 35, 34]), [81, 16, 82])",
			"Test.assertSimilar(safecracker(77, [73, 98, 55]), [4, 2, 47])",
			"Test.assertSimilar(safecracker(78, [86, 4, 40]), [92, 96, 56])",
			"Test.assertSimilar(safecracker(0, [21, 94, 92]), [79, 73, 81])",
			"Test.assertSimilar(safecracker(45, [63, 96, 30]), [82, 78, 48])",
			"Test.assertSimilar(safecracker(98, [25, 93, 94]), [73, 66, 72])",
			"Test.assertSimilar(safecracker(27, [64, 25, 63]), [63, 88, 25])",
			"Test.assertSimilar(safecracker(52, [6, 81, 49]), [46, 27, 78])",
			"Test.assertSimilar(safecracker(56, [70, 88, 70]), [86, 74, 4])",
			"Test.assertSimilar(safecracker(85, [25, 24, 73]), [60, 84, 11])"
		],
		"starterFn": [
			"1\nfunction safecracker(start, increments) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ggDcLksKsBd8xAiFd"
	},
	{
		"title": "The Most Brilliant Exciting Fantastic Number",
		"description": "<p><span>Given a number </span><code>n</code><span>, return a sentence which describes the number in the following ways.</span></p><ul><li><span>Always start the string with </span><strong><span>\"The most \"</span></strong><span>.</span></li><li><span>If </span><code>n</code><span> is evenly divisible by 1, add </span><strong><span>\"brilliant \"</span></strong><span> to the sentence.</span></li><li><span>If </span><code>n</code><span> is evenly divisble by 2, add </span><strong><span>\"exciting \"</span></strong><span> to the sentence.</span></li><li><span>... 3, add </span><strong><span>\"fantastic \"</span></strong><span> to the sentence.</span></li><li><span>... 4, add </span><strong><span>\"virtuous \"</span></strong><span> to the sentence.</span></li><li><span>... 5, add </span><strong><span>\"heart-warming \"</span></strong><span> ...</span></li><li><span>... 6, add </span><strong><span>\"tear-jerking \"</span></strong><span> ...</span></li><li><span>... 7, add </span><strong><span>\"beautiful \"</span></strong><span> ...</span></li><li><span>... 8, add </span><strong><span>\"exhilarating \"</span></strong><span> ...</span></li><li><span>... 9, add </span><strong><span>\"emotional \"</span></strong><span> ...</span></li><li><span>If </span><code>n</code><span> is evenly divisible by 10, add </span><strong><span>\"inspiring \"</span></strong><span> to the sentence.</span></li><li><span>Always end the string with </span><strong><span>\"number is </span><code>n</code><span>!\"</span></strong><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>describeNum(13) ➞ \"The most brilliant number is 13!\"\n// 13 is evenly divisble by 1 only\n\ndescribeNum(4) ➞ \"The most brilliant exciting virtuous number is 4!\"\n// 4 is evenly divisible by 1, 2 and 4\n\ndescribeNum(21) ➞ \"The most brilliant fantastic beautiful number is 21!\"\n// 21 is evenly divisible by 1, 3 and 7\n\ndescribeNum(60) ➞ \"The most brilliant exciting fantastic virtuous heart-warming tear-jerking inspiring number is 60!\"\n// 60 is evenly divisible by 1, 2, 3, 4, 5, 6 and 10</code></pre><h3><span>Notes</span></h3><ul><li><span>Add words to the sentence in the order going down the list.</span></li><li><span>Remember to add a space between each word.</span></li><li><strong><span>BONUS:</span></strong><span> Try to find the lowest number which uses all possible words in the sentence!</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(describeNum(13), 'The most brilliant number is 13!')",
			"Test.assertEquals(describeNum(4), 'The most brilliant exciting virtuous number is 4!')",
			"Test.assertEquals(describeNum(21), 'The most brilliant fantastic beautiful number is 21!')",
			"Test.assertEquals(describeNum(60), 'The most brilliant exciting fantastic virtuous heart-warming tear-jerking inspiring number is 60!')",
			"Test.assertEquals(describeNum(56), \"The most brilliant exciting virtuous beautiful exhilarating number is 56!\")",
			"Test.assertEquals(describeNum(47), \"The most brilliant number is 47!\")",
			"Test.assertEquals(describeNum(115), \"The most brilliant heart-warming number is 115!\")",
			"Test.assertEquals(describeNum(300), \"The most brilliant exciting fantastic virtuous heart-warming tear-jerking inspiring number is 300!\")",
			"Test.assertEquals(describeNum(201), \"The most brilliant fantastic number is 201!\")",
			"Test.assertEquals(describeNum(224), \"The most brilliant exciting virtuous beautiful exhilarating number is 224!\")",
			"Test.assertEquals(describeNum(42), \"The most brilliant exciting fantastic tear-jerking beautiful number is 42!\")",
			"Test.assertEquals(describeNum(22), \"The most brilliant exciting number is 22!\")",
			"Test.assertEquals(describeNum(23), \"The most brilliant number is 23!\")",
			"Test.assertEquals(describeNum(108), \"The most brilliant exciting fantastic virtuous tear-jerking emotional number is 108!\")",
			"Test.assertEquals(describeNum(58), \"The most brilliant exciting number is 58!\")",
			"Test.assertEquals(describeNum(184), \"The most brilliant exciting virtuous exhilarating number is 184!\")",
			"Test.assertEquals(describeNum(46), \"The most brilliant exciting number is 46!\")",
			"Test.assertEquals(describeNum(43), \"The most brilliant number is 43!\")",
			"Test.assertEquals(describeNum(178), \"The most brilliant exciting number is 178!\")",
			"Test.assertEquals(describeNum(191), \"The most brilliant number is 191!\")",
			"Test.assertEquals(describeNum(175), \"The most brilliant heart-warming beautiful number is 175!\")",
			"Test.assertEquals(describeNum(264), \"The most brilliant exciting fantastic virtuous tear-jerking exhilarating number is 264!\")",
			"Test.assertEquals(describeNum(130), \"The most brilliant exciting heart-warming inspiring number is 130!\")",
			"Test.assertEquals(describeNum(213), \"The most brilliant fantastic number is 213!\")",
			"Test.assertEquals(describeNum(25), \"The most brilliant heart-warming number is 25!\")",
			"Test.assertEquals(describeNum(219), \"The most brilliant fantastic number is 219!\")"
		],
		"starterFn": [
			"1\nfunction describeNum(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/B4SRZm9TLgeYrgPtT"
	},
	{
		"title": "Words to Sentence",
		"description": "<p><span>Create a function that turns an array of words into a comma separated list, where the last word is separated by the word \"and\".</span></p><h3><span>Examples</span></h3><pre><code>wordsToSentence([\"edabit\"]) ➞ \"edabit\"\n\nwordsToSentence([\"Hello\", \"\", \"Bye\"]) ➞ \"Hello and Bye\"\n\nwordsToSentence([\"Hello\", \"Bye\", \"See you soon\"]) ➞ \"Hello, Bye and See you soon\"</code></pre><h3><span>Notes</span></h3><p><code>null</code><span> values, empty arrays or arrays with only empty or </span><code>null</code><span> values should return an empty string (e.g. </span><code>\"\"</code><span>).</span></p>",
		"publishedBy": "Enkuryo",
		"publishedByUrl": "https://edabit.com/user/Nc23QyxhdeFRwzj5W",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordsToSentence([\"one\", \"two\", \"three\", \"four\"]), \"one, two, three and four\")",
			"Test.assertEquals(wordsToSentence([\"one\", \"two\", \"\", \"four\"]), \"one, two and four\")",
			"Test.assertEquals(wordsToSentence([\"one\"]), \"one\")",
			"Test.assertEquals(wordsToSentence([\"one\", \"\", \"three\"]), \"one and three\")",
			"Test.assertEquals(wordsToSentence([\"one\", \"two\", \"\"]), \"one and two\")",
			"Test.assertEquals(wordsToSentence([\"\"]), \"\", \"An array containing an empty string should return an empty string.\")",
			"Test.assertEquals(wordsToSentence([]), \"\", \"An empty array should return an empty string.\")",
			"Test.assertEquals(wordsToSentence(null), \"\", \"null should return an empty string.\")"
		],
		"starterFn": [
			"1\nfunction wordsToSentence(words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ddXhrbFi4ozxxgYdG"
	},
	{
		"title": "Temperature Converter",
		"description": "<p><span>Create a function that converts Celcius to Fahrenheit and vice versa.</span></p><h3><span>Examples</span></h3><pre><code>convert(\"35°C\") ➞ \"95°F\"\n\nconvert(\"19°F\") ➞ \"-7°C\"\n\nconvert(\"33\") ➞ \"Error\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Round to the nearest integer.</span></li><li><span>If the input is incorrect, return </span><code>\"Error\"</code><span>.</span></li><li><span>For the formulae to convert back and forth, check the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(convert('35°C'), '95°F')",
			"Test.assertEquals(convert('18°C'), '64°F')",
			"Test.assertEquals(convert('0°F'), '-18°C')",
			"Test.assertEquals(convert('100°C'), '212°F')",
			"Test.assertEquals(convert('69°F'), '21°C')",
			"Test.assertEquals(convert('159°C'), '318°F')",
			"Test.assertEquals(convert('-40°C'), '-40°F')",
			"Test.assertEquals(convert('-40°F'), '-40°C')",
			"Test.assertEquals(convert('16°C'), '61°F')",
			"Test.assertEquals(convert('500°C'), '932°F')",
			"Test.assertEquals(convert('33'), 'Error')",
			"Test.assertEquals(convert('19°F'), '-7°C')",
			"Test.assertEquals(convert('85°C'), '185°F')",
			"Test.assertEquals(convert('0°C'), '32°F')",
			"Test.assertEquals(convert('1777°F'), '969°C')",
			"Test.assertEquals(convert('-90°C'), '-130°F')",
			"Test.assertEquals(convert('16°F'), '-9°C')",
			"Test.assertEquals(convert('180°C'), '356°F')",
			"Test.assertEquals(convert('7K'), 'Error')",
			"Test.assertEquals(convert('100°F'), '38°C')"
		],
		"starterFn": [
			"1\nfunction convert(deg) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9CNJtMXaw2K5NwMLJ"
	},
	{
		"title": "The Missing Link",
		"description": "<p><span>Your function will get an array with a number sequence. However, one item will be missing. It's your job to find out which one is not in the array.</span></p><p><span>To illustrate, given the array </span><code>[1, 3, 4, 5]</code><span>, </span><code>2</code><span> is missing so the output must be </span><code>2</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>missing([1, 3, 4, 5]) ➞ 2\n\nmissing([2, 4, 6, 8, 10, 14, 16]) ➞ 12\n\nmissing([1.5, 2, 3]) ➞ 2.5</code></pre><h3><span>Notes</span></h3><ul><li><span>The missing item will never be the smallest or largest number in the array.</span></li><li><span>In every array, exactly one item is missing.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers"
		],
		"tests": [
			"[",
			"  [[1, 3, 4, 5], 2],",
			"  [[2, 4, 6, 8, 10, 14, 16], 12],",
			"  [[12, 15, 18, 21, 24, 30, 33], 27],",
			"  [[0, 60, 180], 120],",
			"  [[-1.25, 1.25, 2.5], 0],",
			"  [[1, 19, 28], 10],",
			"  [[100, 500, 900, 1300, 2100, 2500, 2900], 1700],",
			"  [[1.5, 2, 3], 2.5]",
			"].forEach(x => Test.assertSimilar(missing(x[0]), x[1]))"
		],
		"starterFn": [
			"1\nfunction missing(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/M6hcm6ezCoRBbANQr"
	},
	{
		"title": "Smooth Sentences",
		"description": "<p><span>Carlos is a huge fan of something he calls </span><strong><span>smooth sentences</span></strong><span>. A smooth sentence is one where the last letter of each word is identical to the first letter the following word.</span></p><p><span>To illustrate, the following would be a smooth sentence: </span><em><span>\"Carlos swam masterfully.\"</span></em></p><p><span>Since \"Carlos\" ends with an \"s\" and swam begins with an \"s\" and swam ends with an \"m\" and masterfully begins with an \"m\".</span></p><h3><span>Examples</span></h3><pre><code>isSmooth(\"Marta appreciated deep perpendicular right trapezoids\") ➞ true\n\nisSmooth(\"Someone is outside the doorway\") ➞ false\n\nisSmooth(\"She eats super righteously\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSmooth(\"Marta appreciated deep perpendicular right trapezoids\"), true)",
			"Test.assertEquals(isSmooth(\"Someone is outside the doorway\"), false)",
			"Test.assertEquals(isSmooth(\"She eats super righteously\"), true)",
			"Test.assertEquals(isSmooth(\"Ben naps so often\"), true)",
			"Test.assertEquals(isSmooth(\"Cute triangles are cute\"), false)",
			"Test.assertEquals(isSmooth(\"Mad dislikes sharp pointy yoyos\"), true)",
			"Test.assertEquals(isSmooth(\"Rita asks Sam mean numbered dilemmas\"), true)",
			"Test.assertEquals(isSmooth(\"Marigold daffodils streaming happily.\"), false)",
			"Test.assertEquals(isSmooth(\"Simply wonderful laughing.\"), false)"
		],
		"starterFn": [
			"1\nfunction isSmooth(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wRX9cFtAxPZj86Drp"
	},
	{
		"title": "GCD and LCM (Part 2)",
		"description": "<p><span>Create a function that takes two numbers as arguments and return the LCM of the two numbers.</span></p><h3><span>Examples</span></h3><pre><code>lcm(3, 5) ➞ 15\n\nlcm(14, 28) ➞ 28\n\nlcm(4, 6) ➞ 12</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to return the result.</span></li><li><span>You may want to use the GCD function to make this a little easier.</span></li><li><span>LCM stands for least common multiple, the smallest multiple of both integers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(lcm(6, 10), 30)",
			"Test.assertEquals(lcm(30, 60), 60)",
			"Test.assertEquals(lcm(10000, 333), 3330000)",
			"Test.assertEquals(lcm(75, 135), 675)",
			"Test.assertEquals(lcm(102, 2), 102)"
		],
		"starterFn": [
			"1\nfunction lcm(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/y4e52WrRR9sybxzN6"
	},
	{
		"title": "What's the Missing Letter?",
		"description": "<p><span>Given a string of letters in the English alphabet, return the letter that's missing from the string. The missing letter will make the string be in alphabetical order (from A to Z).</span></p><p><span>If there are no missing letters in the string, return </span><code>\"No Missing Letter\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>missingLetter(\"abdefg\") ➞ \"c\"\n\nmissingLetter(\"mnopqs\") ➞ \"r\"\n\nmissingLetter(\"tuvxyz\") ➞ \"w\"\n\nmissingLetter(\"ghijklmno\") ➞ \"No Missing Letter\"</code></pre><h3><span>Notes</span></h3><p><span>The given string will never have more than one missing letter.</span></p>",
		"publishedBy": "jmichael12",
		"publishedByUrl": "https://edabit.com/user/CJnuSjyCBMTbTiibD",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(missingLetter(\"abdefg\"), \"c\", \"Example #1\")",
			"Test.assertEquals(missingLetter(\"mnopqs\"), \"r\", \"Example #2\")",
			"Test.assertEquals(missingLetter(\"tuvxyz\"), \"w\", \"Example #3\")",
			"Test.assertEquals(missingLetter(\"jlm\"), \"k\")",
			"Test.assertEquals(missingLetter(\"rsu\"), \"t\")",
			"Test.assertEquals(missingLetter(\"eghij\"), \"f\")",
			"Test.assertEquals(missingLetter(\"qrtuv\"), \"s\")",
			"Test.assertEquals(missingLetter(\"ghijklmno\"), \"No Missing Letter\", \"Example #4\")",
			"Test.assertEquals(missingLetter(\"xyz\"), \"No Missing Letter\")"
		],
		"starterFn": [
			"1\nfunction missingLetter(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/t6HFLEYD2e7ePxAu5"
	},
	{
		"title": "The Empty Square Sequence",
		"description": "<p><span>In the image below, squares are either empty or filled with a circle.</span></p><p><img alt=\"Steps vs Empty Squarest\" title=\"Steps vs Empty Squares\" src=\"https://edabit-challenges.s3.amazonaws.com/empty_square_sequence.png\"></p><p><span>Create a function that takes a number </span><code>step</code><span> (which equals HALF the width of a square) and returns the amount of empty squares. The image shows the squares with step 1, 2 and 3. The return value is the number of cells not on a diagonal, which is 0 for the first square, 8 for the second, and 24 for the third.</span></p><h3><span>Examples</span></h3><pre><code>emptySq(1) ➞ 0\n\nemptySq(3) ➞ 24\n\nemptySq(10) ➞ 360</code></pre><h3><span>Notes</span></h3><ul><li><span>Test input will always be a positive integer.</span></li><li><span>The width of the square will always be even.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(emptySq(3), 24)",
			"Test.assertEquals(emptySq(1), 0)",
			"Test.assertEquals(emptySq(27), 2808)",
			"Test.assertEquals(emptySq(3), 24)",
			"Test.assertEquals(emptySq(0), 0, 'Even though the box is unexisting, the amount of empty squares is also 0.')",
			"Test.assertEquals(emptySq(10), 360)",
			"Test.assertEquals(emptySq(19), 1368)",
			"Test.assertEquals(emptySq(60), 14160)",
			"Test.assertEquals(emptySq(7), 168)"
		],
		"starterFn": [
			"1\nfunction emptySq(step) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dq5bqbRnPwDxJyobL"
	},
	{
		"title": "Up the Hill, Down the Hill",
		"description": "<p><span>If a person traveled up a hill for 18mins at 20mph and then traveled back down the same path at 60mph then their average speed traveled was </span><strong><span>30mph</span></strong><span>.</span></p><p><span>Write a function that returns the </span><strong><span>average speed</span></strong><span> traveled given an uphill time, uphill rate and a downhill rate. Uphill time is given in </span><strong><span>minutes</span></strong><span>. Return the rate as an integer (</span><strong><span>mph</span></strong><span>). No rounding is necessary.</span></p><h3><span>Examples</span></h3><pre><code>aveSpd(18, 20, 60) ➞ 30\n\naveSpd(30, 10, 30) ➞ 15\n\naveSpd(30, 8, 24) ➞ 12</code></pre><h3><span>Notes</span></h3><ul><li><span>The solution is </span><strong><span>not</span></strong><span> dividing the sum of the speeds by 2.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab if your stuck.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"math"
		],
		"tests": [
			"Test.assertEquals(aveSpd(18, 10, 30), 15)",
			"Test.assertEquals(aveSpd(18, 20, 60), 30)",
			"Test.assertEquals(aveSpd(30, 10, 30), 15)",
			"Test.assertEquals(aveSpd(30, 8, 24), 12)"
		],
		"starterFn": [
			"1\nfunction aveSpd(upTime, upSpd, downSpd) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vEY5A5Kq8xsPTQG8S"
	},
	{
		"title": "Book Shelf",
		"description": "<p><span>Create a </span><code>Book</code><span> </span><strong><span>constructor</span></strong><span> that has </span><strong><span>two properties</span></strong><span> :</span></p><ol><li><span>Title</span></li><li><span>Author</span></li></ol><p><span>and </span><strong><span>two methods</span></strong><span>:</span></p><ol><li><span>A method named </span><code>getTitle</code><span> that returns: </span><code>\"Title: \"</code><span> + the instance title.</span></li><li><span>A method named </span><code>getAuthor</code><span> that returns: </span><code>\"Author: \"</code><span> + the instance author.</span></li></ol><p><span>and instantiate this constructor by creating 3 new books:</span></p><ol><li><span>Pride and Prejudice - Jane Austen (</span><strong><span>PP</span></strong><span>)</span></li><li><span>Hamlet - William Shakespeare (</span><strong><span>H</span></strong><span>)</span></li><li><span>War and Peace - Leo Tolstoy (</span><strong><span>WP</span></strong><span>)</span></li></ol><p><span>Name the new object instances </span><strong><span>PP</span></strong><span>, </span><strong><span>H</span></strong><span>, and </span><strong><span>WP</span></strong><span>, respectively.</span></p><p><span>For instance, if I instantiated the following book using this </span><code>Book</code><span> constructor function:</span></p><ul><li><span>Harry Potter - J.K. Rowling (HP)</span></li></ul><p><span>I would get the following properties and methods:</span></p><h3><span>Examples</span></h3><pre><code>HP.title ➞ \"Harry Potter\"\nHP.author ➞ \"J.K. Rowling\"\nHP.getTitle() ➞ \"Title: Harry Potter\"\nHP.getAuthor() ➞ \"Author: J.K. Rowling\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Read more about constructor functions in </span><strong><span>Resources</span></strong><span>.</span></li><li><span>Remember, after you've finished writing the </span><strong><span>constructor function</span></strong><span>, you must instantiate it through the creation of new objects.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"classes",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertEquals(PP.title, \"Pride and Prejudice\")",
			"Test.assertEquals(PP.author, \"Jane Austen\")",
			"Test.assertEquals(PP.getTitle(), 'Title: Pride and Prejudice')",
			"Test.assertEquals(PP.getAuthor(), 'Author: Jane Austen')",
			"​",
			"Test.assertEquals(H.title, \"Hamlet\")",
			"Test.assertEquals(H.author, \"William Shakespeare\")",
			"Test.assertEquals(H.getTitle(), 'Title: Hamlet')",
			"Test.assertEquals(H.getAuthor(), 'Author: William Shakespeare')",
			"​",
			"Test.assertEquals(WP.title, \"War and Peace\")",
			"Test.assertEquals(WP.author, \"Leo Tolstoy\")",
			"Test.assertEquals(WP.getTitle(), 'Title: War and Peace')",
			"Test.assertEquals(WP.getAuthor(), 'Author: Leo Tolstoy')"
		],
		"starterFn": [
			"1\nfunction Book(title, author) {",
			"2\n  // Write your properties and methods here",
			"3\n}",
			"4\n​",
			"5\n// Instantiate your Book constructor here"
		],
		"url": "https://edabit.com/challenge/s5Sz2ovKsvtGxNGgn"
	},
	{
		"title": "Seven Boom!",
		"description": "<p><span>Create a function that takes an array of numbers and return </span><code>\"Boom!\"</code><span> if the number 7 appears in the array. Otherwise, return </span><code>\"there is no 7 in the array\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>sevenBoom([1, 2, 3, 4, 5, 6, 7]) ➞ \"Boom!\"\n\nsevenBoom([8, 6, 33, 100]) ➞ \"there is no 7 in the array\"\n\nsevenBoom([2, 55, 60, 97, 86]) ➞ \"Boom!\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Alon",
		"publishedByUrl": "https://edabit.com/user/Q69qbJ2JtmQFkMXqz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"regex"
		],
		"tests": [
			"Test.assertEquals(sevenBoom([2, 6, 7, 9, 3]), \"Boom!\")",
			"Test.assertEquals(sevenBoom([33, 68, 400, 5]), \"there is no 7 in the array\")",
			"Test.assertEquals(sevenBoom([86, 48, 100, 66]), \"there is no 7 in the array\")",
			"Test.assertEquals(sevenBoom([76, 55, 44, 32]), \"Boom!\")",
			"Test.assertEquals(sevenBoom([35, 4, 9, 37]), \"Boom!\")"
		],
		"starterFn": [
			"1\nfunction sevenBoom(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6R6gReGTGwzpwuffD"
	},
	{
		"title": "Tower of Hanoi",
		"description": "<p><span>There are three towers. The objective of the game is to move all the disks over to tower #3, but you can't place a larger disk onto a smaller disk. To play the game or learn more about the Tower of Hanoi, check the </span><strong><span>Resources</span></strong><span> tab.</span></p><p><img alt=\"Tower of Hanoi\" title=\"Tower of Hanoi\" src=\"https://edabit-challenges.s3.amazonaws.com/tower_of_hanoi.gif\"></p><p><span>Create a function that takes a number </span><code>discs</code><span> as an argument and returns the minimum amount of steps needed to complete the game.</span></p><h3><span>Examples</span></h3><pre><code>towerHanoi(3) ➞ 7\n\ntowerHanoi(5) ➞ 31\n\ntowerHanoi(0) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>The amount of discs is always a positive integer.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"games",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(towerHanoi(3), 7)",
			"Test.assertEquals(towerHanoi(5), 31)",
			"Test.assertEquals(towerHanoi(8), 255)",
			"Test.assertEquals(towerHanoi(19), 524287)",
			"Test.assertEquals(towerHanoi(9), 511)",
			"Test.assertEquals(towerHanoi(13), 8191)",
			"Test.assertEquals(towerHanoi(0), 0)"
		],
		"starterFn": [
			"1\nfunction towerHanoi(discs) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3ZtykTsx3GSoPHyBb"
	},
	{
		"title": "Number of Boomerangs",
		"description": "<p><span>A </span><strong><span>boomerang</span></strong><span> is a V-shaped sequence that is either upright or upside down. Specifically, a boomerang can be defined as: </span><strong><span>sub-array of length 3, with the first and last digits being the same and the middle digit being different</span></strong><span>.</span></p><p><span>Some boomerang examples:</span></p><pre><code>[3, 7, 3], [1, -1, 1], [5, 6, 5]</code></pre><p><span>Create a function that returns the total number of  </span><strong><span>boomerangs</span></strong><span> in an array. </span></p><p><span>To illustrate:</span></p><pre><code>[3, 7, 3, 2, 1, 5, 1, 2, 2, -2, 2]\n// 3 boomerangs in this sequence:  [3, 7, 3], [1, 5, 1], [2, -2, 2]</code></pre><p><span>Be aware that boomerangs can overlap, like so:</span></p><pre><code>[1, 7, 1, 7, 1, 7, 1]\n// 5 boomerangs (from left to right): [1, 7, 1], [7, 1, 7], [1, 7, 1], [7, 1, 7], and [1, 7, 1]</code></pre><h3><span>Examples</span></h3><pre><code>countBoomerangs([9, 5, 9, 5, 1, 1, 1]) ➞ 2\n\ncountBoomerangs([5, 6, 6, 7, 6, 3, 9]) ➞ 1\n\ncountBoomerangs([4, 4, 4, 9, 9, 9, 9]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><code>[5, 5, 5]</code><span> (triple identical digits) is NOT considered a boomerang because the middle digit is identical to the first and last.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(countBoomerangs([9, 5, 9, 5, 1, 1, 1]), 2)",
			"Test.assertEquals(countBoomerangs([5, 6, 6, 7, 6, 3, 9]), 1)",
			"Test.assertEquals(countBoomerangs([4, 4, 4, 9, 9, 9, 9]), 0)",
			"Test.assertEquals(countBoomerangs([5, 9, 5, 9, 5]), 3)",
			"Test.assertEquals(countBoomerangs([4, 4, 4, 8, 4, 8, 4]), 3)",
			"Test.assertEquals(countBoomerangs([2, 2, 2, 2, 2, 2, 3]), 0)",
			"Test.assertEquals(countBoomerangs([2, 2, 2, 2, 3, 2, 3]), 2)",
			"Test.assertEquals(countBoomerangs([1, 2, 1, 1, 1, 2, 1]), 2)",
			"Test.assertEquals(countBoomerangs([5, 1, 1, 1, 1, 4, 1]), 1)",
			"Test.assertEquals(countBoomerangs([3, 7, 3, 2, 1, 5, 1, 2, 2, -2, 2]), 3)",
			"Test.assertEquals(countBoomerangs([1, 7, 1, 7, 1, 7, 1]), 5)",
			"Test.assertEquals(countBoomerangs([5, 5, 5]), 0)"
		],
		"starterFn": [
			"1\nfunction countBoomerangs(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/b7iHQDw72zzkmgCun"
	},
	{
		"title": "Oddish vs. Evenish",
		"description": "<p><span>Create a function that determines whether a number is </span><strong><span>Oddish</span></strong><span> or </span><strong><span>Evenish</span></strong><span>. A number is </span><strong><span>Oddish</span></strong><span> if the sum of all of its digits is odd, and a number is </span><strong><span>Evenish</span></strong><span> if the sum of all of its digits is even. If a number is </span><strong><span>Oddish</span></strong><span>, return </span><code>\"Oddish\"</code><span>. Otherwise, return </span><code>\"Evenish\"</code><span>.</span></p><p><span>For example, </span><code>oddishOrEvenish(121)</code><span> should return </span><code>\"Evenish\"</code><span>, since 1 + 2 + 1 = 4. </span><code>oddishOrEvenish(41)</code><span> should return </span><code>\"Oddish\"</code><span>, since 4 + 1 = 5.</span></p><h3><span>Examples</span></h3><pre><code>oddishOrEvenish(43) ➞ \"Oddish\"\n\noddishOrEvenish(373) ➞ \"Oddish\"\n\noddishOrEvenish(4433) ➞ \"Evenish\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(oddishOrEvenish(43), \"Oddish\");",
			"Test.assertEquals(oddishOrEvenish(373), \"Oddish\");",
			"Test.assertEquals(oddishOrEvenish(55551), \"Oddish\");",
			"Test.assertEquals(oddishOrEvenish(694), \"Oddish\");",
			"Test.assertEquals(oddishOrEvenish(4433), \"Evenish\");",
			"Test.assertEquals(oddishOrEvenish(11), \"Evenish\");",
			"Test.assertEquals(oddishOrEvenish(211112), \"Evenish\");"
		],
		"starterFn": [
			"1\nfunction oddishOrEvenish(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/r6TSNwkLZ2DgsoKiH"
	},
	{
		"title": "Length of a Nested Array",
		"description": "<p><span>The </span><code>.length</code><span> property on an array will return the number of elements in the array. For example, the array below contains 2 elements:</span></p><pre><code>[1, [2, 3]]\n// 2 elements, number 1 and array [2, 3]</code></pre><p><span>Suppose we instead wanted to know the </span><strong><span>total number of non-nested items</span></strong><span> in the nested array. In the above case, </span><code>[1, [2, 3]]</code><span> contains 3 </span><strong><span>non-nested items</span></strong><span>, </span><code>1</code><span>, </span><code>2</code><span> and </span><code>3</code><span>.</span></p><p><span>Write a function that returns the total number of non-nested items in a nested array.</span></p><h3><span>Examples</span></h3><pre><code>getLength([1, [2, 3]]) ➞ 3\n\ngetLength([1, [2, [3, 4]]]) ➞ 4\n\ngetLength([1, [2, [3, [4, [5, 6]]]]]) ➞ 6\n\ngetLength([1, [2], 1, [2], 1]) ➞ 5</code></pre><h3><span>Notes</span></h3><p><span>An empty array should return </span><code>0</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(getLength([1, [2,3]]), 3)",
			"Test.assertEquals(getLength([1, [2, [3, 4]]]), 4)",
			"Test.assertEquals(getLength([1, [2, [3, [4, [5, 6]]]]]), 6)",
			"Test.assertEquals(getLength([1, 7, 8]), 3)",
			"Test.assertEquals(getLength([2]), 1)",
			"Test.assertEquals(getLength([2, [3], 4, [7]]), 4)",
			"Test.assertEquals(getLength([2, [3, [5, 7]], 4, [7]]), 6)",
			"Test.assertEquals(getLength([2, [3, [4, [5]]], [9]]), 5)",
			"Test.assertEquals(getLength([]), 0)"
		],
		"starterFn": [
			"1\nfunction getLength(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yXSTvCNen2DQHyrh6"
	},
	{
		"title": "RegEx XX : Group Ranges ⁠— Named Capturing Groups (?<Name>x)",
		"description": "<p><strong><span>Groups and ranges</span></strong><span> indicate groups and ranges of expression characters.  </span><strong><span>Named capturing groups</span></strong><span> matches \"x\" in </span><strong><span>(?\\</span><span>&lt;Name&gt;</span><span>x)</span></strong><span> and stores it on the groups property of the returned matches under the name specified by </span><strong><span>\\</span><span>&lt;Name&gt;</span></strong><span>. The angle brackets </span><strong><span>(&lt; and &gt;)</span></strong><span> are required for group name.</span></p><p><span>To extract the United States area code from a phone number, we could use:</span></p><pre><code>let match = \"(214) 987-6482\".match(/\\((?&lt;area&gt;\\d\\d\\d)\\)/)\nconsole.log(match.groups.area) ➞ 214</code></pre><p><span>Grab the </span><strong><span>year, month</span></strong><span> and </span><strong><span>day</span></strong><span> from a string of dates. Name your groups with </span><strong><span>year, month, and day</span></strong><span> and in that order in your expression. You only have to come up with the </span><strong><span>regular expression</span></strong><span>.  The </span><code>replace()</code><span> function is already implemented in the test.</span></p><pre><code>let REGEXP = your solution\nlet str = \"2019-10-30, 2020-01-01\"\n\nstr.replace(regexp, \"$&lt;day&gt;.$&lt;month&gt;.$&lt;year&gt;\") ➞ \"30.10.2019, 01.01.2020\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Dates do not go back before 1900.</span></li><li><span>Dates always come in year-month-day format.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const str1 = \"2019-10-30, 2020-01-01\";",
			"const str2 = \"2020-11-14, 1947-01-30, 1955-04-12\";",
			"const str3 = \"2001-03-09, 1988-12-19, 1918-03-20, 1969-08-15\";",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/(year)+.*(month)+.*(day)+/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"      return str.replace(REGEXP, '$<day>.$<month>.$<year>');",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"invalid\", \"Only the named groups are allowed: year, month, day\")",
			"Test.assertEquals(testExp(str1), \"30.10.2019, 01.01.2020\")",
			"Test.assertEquals(testExp(str2), \"14.11.2020, 30.01.1947, 12.04.1955\")",
			"Test.assertEquals(testExp(str3), \"09.03.2001, 19.12.1988, 20.03.1918, 15.08.1969\")",
			"​",
			"// credits to https://javascript.info/regexp-groups"
		],
		"starterFn": [
			"1\nlet REGEXP = /* Write your expression here */g"
		],
		"url": "https://edabit.com/challenge/8FG9myNKdmtdxWoNN"
	},
	{
		"title": "Factor Tractor",
		"description": "<p><span>Write a program to find all the prime factors of a given number. The program must return an array containing all the prime factors, sorted in ascending order. Remember that </span><em><span>1 is neither prime nor composite</span></em><span> and should not be included in your output array.</span></p><h3><span>Examples</span></h3><pre><code>primeFactorize(25) ➞ [5, 5]\n\nprimeFactorize(19) ➞ [19]\n\nprimeFactorize(77) ➞ [7, 11]</code></pre><h3><span>Notes</span></h3><ul><li><span>Output array must be sorted in ascending order</span></li><li><span>The only positive integer which is neither prime nor composite is 1. Return an empty array if 1 is the input.</span></li></ul>",
		"publishedBy": "Chidambaram",
		"publishedByUrl": "https://edabit.com/user/bsXogzbmTeiwKhpZP",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertSimilar(primeFactorize(32), [2, 2, 2, 2, 2]);",
			"Test.assertSimilar(primeFactorize(17), [17]);",
			"Test.assertSimilar(primeFactorize(35), [5, 7]);",
			"Test.assertSimilar(primeFactorize(2), [2]);",
			"Test.assertNotEquals(primeFactorize(2), [1, 2]);",
			"Test.assertNotEquals(primeFactorize(1), [1]);",
			"Test.assertNotEquals(primeFactorize(35), [7, 5]);",
			"Test.assertSimilar(primeFactorize(2591), [2591]);",
			"Test.assertSimilar(primeFactorize(2532), [2, 2, 3, 211]);"
		],
		"starterFn": [
			"1\nfunction primeFactorize(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zWf4ayT7nbTsxYgRe"
	},
	{
		"title": "Converting One Binary String to Another",
		"description": "<p><span>Write a function that returns the minimum number of swaps to convert the first binary string into the second.</span></p><h3><span>Examples</span></h3><pre><code>minSwaps(\"1100\", \"1001\") ➞ 1\n\nminSwaps(\"110011\", \"010111\") ➞ 1\n\nminSwaps(\"10011001\", \"01100110\") ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>Both binary strings will be of equal length.</span></li><li><span>Both binary strings will have an equal number of zeroes and ones.</span></li><li><span>A swap is switching two elements in a string (swaps do </span><strong><span>not</span></strong><span> have to be adjacent).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(minSwaps(\"1001\", \"1001\"), 0)",
			"Test.assertEquals(minSwaps(\"1100\", \"1001\"), 1)",
			"Test.assertEquals(minSwaps(\"110011\", \"010111\"), 1)",
			"Test.assertEquals(minSwaps(\"1100\", \"0011\"), 2)",
			"Test.assertEquals(minSwaps(\"110011\", \"001111\"), 2)",
			"Test.assertEquals(minSwaps(\"10011001\", \"01100101\"), 3)",
			"Test.assertEquals(minSwaps(\"11111000001100\", \"10110010100110\"), 3)",
			"Test.assertEquals(minSwaps(\"01100100100111\", \"10110010100110\"), 3)",
			"Test.assertEquals(minSwaps(\"11110011001\", \"01100110111\"), 3)",
			"Test.assertEquals(minSwaps(\"100110001\", \"010100110\"), 3)",
			"Test.assertEquals(minSwaps(\"100101011\", \"011001101\"), 3)",
			"Test.assertEquals(minSwaps(\"10011001\", \"01100110\"), 4)"
		],
		"starterFn": [
			"1\nfunction minSwaps(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HZcpmfBg6NstB5soN"
	},
	{
		"title": "How Many Days Between Two Dates",
		"description": "<p><span>Create a function that takes two dates and returns the number of days between the first and second date.</span></p><h3><span>Examples</span></h3><pre><code>getDays(\n  new Date(\"June 14, 2019\"),\n  new Date(\"June 20, 2019\")\n) ➞ 6\n\ngetDays(\n  new Date(\"December 29, 2018\"),\n  new Date(\"January 1, 2019\")\n) ➞ 3\n\ngetDays(\n  new Date(\"July 20, 2019\"),\n  new Date(\"July 30, 2019\")\n) ➞ 10</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Alon",
		"publishedByUrl": "https://edabit.com/user/Q69qbJ2JtmQFkMXqz",
		"language": "JavaScript",
		"tags": [
			"dates",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(getDays(new Date('June 14, 2019'), new Date('June 20, 2019')), 6)",
			"Test.assertEquals(getDays(new Date('December 29, 2018'), new Date('January 1, 2019')), 3)",
			"Test.assertEquals(getDays(new Date('July 20, 2019'), new Date('July 30, 2019')), 10)"
		],
		"starterFn": [
			"1\nfunction getDays(date1, date2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3hdXjfJozQySRC3gE"
	},
	{
		"title": "Secret Function",
		"description": "<p><span>Create a function based on the input and output. Look at the examples, there is a pattern.</span></p><h3><span>Examples</span></h3><pre><code>secret(24) ➞ 8\n\nsecret(42) ➞ 8\n\nsecret(15) ➞ -4\n\nsecret(52) ➞ 15</code></pre><h3><span>Notes</span></h3><ul><li><code>num</code><span> &gt;= 10 and  </span><code>num</code><span> &lt;= 52</span></li><li><code>Math.pow</code><span>, </span><code>*</code><span> and </span><code>-</code><span> can be helpful.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(secret(24), 8)",
			"Test.assertEquals(secret(32), 3)",
			"Test.assertEquals(secret(23), 2)",
			"Test.assertEquals(secret(42), 8)",
			"Test.assertEquals(secret(15), -4)",
			"Test.assertEquals(secret(32), 3)",
			"Test.assertEquals(secret(52), 15)",
			"Test.assertEquals(secret(25), 22)"
		],
		"starterFn": [
			"1\nfunction secret(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BFJbFNJv2E8icogRk"
	},
	{
		"title": "Regex Series: Initials",
		"description": "<p><span>Write a </span><strong><span>regular expression</span></strong><span> that checks if a string is a valid initial. Valid initials either look like (ex. for Chandler Muriel Bing):</span></p><ul><li><span>C. B.</span></li><li><span>C. M. B.</span></li></ul><p><span>Rules for a </span><strong><span>valid initial</span></strong><span>:</span></p><ol><li><span>Each letter must be </span><strong><span>upper case</span></strong><span>.</span></li><li><span>Each letter must be </span><strong><span>immediately</span></strong><span> followed by a period.</span></li><li><span>There must be </span><strong><span>exactly one space</span></strong><span> separating each </span><strong><span>letter-period pair</span></strong><span>.</span></li><li><span>Leading or trailing whitespaces are </span><strong><span>valid</span></strong><span>.</span></li></ol><h3><span>Examples</span></h3><pre><code>\"C. B.\" ➞ true\n\n\"    C. B.\" ➞ true\n// Leading and trailing spaces are OK!\n\n\"C. B. k.\" ➞ false\n// One of the initials is lower cased \n\n\"C B\" ➞ false\n// Missing a dot to immediately follow. </code></pre><h3><span>Notes</span></h3><p><span>This challenge is designed to use </span><strong><span>RegEx only</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"function validate(name) {",
			"  return x.test(name)",
			"}",
			"​",
			"Test.expect(validate(\"R. T.\"), \"R. T. is a valid initial.\")",
			"Test.expect(validate(\"R. K. T.\"), \"R. K. T. is a valid initial.\")",
			"​",
			"Test.expect(validate(\" R. T.\"), \" R. T. is valid with leading spaces.\")",
			"Test.expect(validate(\" R. T.    \"), \" R. T. is valid with trailing spaces.\")",
			"Test.expect(validate(\"    R. K. T.\"), \" R. K. T. is valid with leading spaces.\")",
			"Test.expect(validate(\"R. K. T. \"), \" R. K. T. is valid with trailing spaces.\")",
			"​",
			"Test.expect(!validate(\"RT. K.\"), \"RK. T. Invalid. Initials must be one character only.\")",
			"Test.expect(!validate(\"R. K. T. B.\"), \"R. K. T. B. Invalid. Two or three names only.\")",
			"Test.expect(!validate(\"r. k.\"), \"r. k. Invalid. Initials must be uppercased.\")",
			"Test.expect(!validate(\"R.  K.\"), \"R.  K. Invalid. There must be exactly one space between characters.\")",
			"Test.expect(!validate(\"R. K\"), \"R. K Invalid. Missing a period.\")",
			"Test.expect(!validate(\"R . K.\"), \"R . K. Invalid. Dots must immediately follow initials.\")",
			"Test.expect(!validate(\".R K.\"), \".R K. Invalid. Dots should go after initials.\")",
			"Test.expect(!validate(\"3. K.\"), \"3. K. Invalid. Initials can only be composed of letters.\")",
			"Test.expect(!validate(\"R, K.\"), \"R, K. Invalid. Only periods can follow initials.\")"
		],
		"starterFn": [
			"1\nlet x = /* Fill in regular expression */"
		],
		"url": "https://edabit.com/challenge/HL2sXjjBHgKZJYQJy"
	},
	{
		"title": "Combinations",
		"description": "<p><span>Create a function that takes a variable number of groups of items, and returns the number of ways the items can be arranged, with one item from each group. Order does not matter.</span></p><h3><span>Examples</span></h3><pre><code>combinations(2, 3) ➞ 6\n\ncombinations(3, 7, 4) ➞ 84\n\ncombinations(2, 3, 4, 5) ➞ 120</code></pre><h3><span>Notes</span></h3><p><span>Don't overthink this one.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(combinations(2), 2)",
			"Test.assertEquals(combinations(2, 3), 6)",
			"Test.assertEquals(combinations(3, 5), 15)",
			"Test.assertEquals(combinations(5, 6, 7), 210)",
			"Test.assertEquals(combinations(5, 5, 5, 5), 625)",
			"Test.assertEquals(combinations(3, 6, 9), 162)",
			"Test.assertEquals(combinations(2, 3, 4, 5, 6, 7, 8, 9, 10), 3628800)",
			"Test.assertEquals(combinations(4, 5, 6), 120)",
			"Test.assertEquals(combinations(5, 6, 7, 8), 1680)",
			"Test.assertEquals(combinations(6, 7, 0), 42)"
		],
		"starterFn": [
			"1\nfunction combinations(items) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tRx22rECqK4dTJTg8"
	},
	{
		"title": "Numbers in Strings",
		"description": "<p><span>Create a function that takes an array of strings and returns an array with only the strings that have numbers in them. If there are no strings containing numbers, return an empty array.</span></p><h3><span>Examples</span></h3><pre><code>numInStr([\"1a\", \"a\", \"2b\", \"b\"]) ➞ [\"1a\", \"2b\"]\n\nnumInStr([\"abc\", \"abc10\"]) ➞ [\"abc10\"]\n\nnumInStr([\"abc\", \"ab10c\", \"a10bc\", \"bcd\"]) ➞ [\"ab10c\", \"a10bc\"]\n\nnumInStr([\"this is a test\", \"test1\"]) ➞ [\"test1\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>The strings can contain white spaces or any type of characters.</span></li><li><strong><span>Bonus:</span></strong><span> Try solving this without regex.</span></li></ul>",
		"publishedBy": "Alex Nemechek",
		"publishedByUrl": "https://edabit.com/user/tXzqHX2abH7KJQqKg",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(numInStr(['abc', 'abc10']), ['abc10'])",
			"Test.assertSimilar(numInStr(['abc', 'ab10c',  'a10bc', 'bcd']),['ab10c', 'a10bc'])",
			"Test.assertSimilar(numInStr(['1', 'a' , ' ' ,'b']), ['1'])",
			"Test.assertSimilar(numInStr(['rct', 'ABC', 'Test', 'xYz']), [])",
			"Test.assertSimilar(numInStr(['this IS','10xYZ', 'xy2K77', 'Z1K2W0', 'xYz']), ['10xYZ', 'xy2K77', 'Z1K2W0'])",
			"Test.assertSimilar(numInStr(['-/>', '10bc', 'abc ']), ['10bc'])"
		],
		"starterFn": [
			"1\nfunction numInStr(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eCPim4XcssdZdvs32"
	},
	{
		"title": "Oddly or Evenly Positioned",
		"description": "<p><span>Create a function that returns the characters from an array or string </span><code>r</code><span> on odd or even positions, depending on the specifier </span><code>s</code><span>. The specifier will be </span><strong><span>\"odd\"</span></strong><span> for items on </span><em><span>odd positions</span></em><span> (1, 3, 5, ...) and </span><strong><span>\"even\"</span></strong><span> for items on </span><em><span>even positions</span></em><span> (2, 4, 6, ...).</span></p><h3><span>Examples</span></h3><pre><code>charAtPos([2, 4, 6, 8, 10], \"even\") ➞ [4, 8]\n// 4 &amp; 8 occupy the 2nd &amp; 4th positions\n\ncharAtPos(\"EDABIT\", \"odd\") ➞ \"EAI\"\n// \"E\", \"A\" and \"I\" occupy the 1st, 3rd and 5th positions\n\ncharAtPos([\"A\", \"R\", \"B\", \"I\", \"T\", \"R\", \"A\", \"R\", \"I\", \"L\", \"Y\"], \"odd\") ➞ [\"A\", \"B\", \"T\", \"A\", \"I\", \"Y\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Arrays are zero-indexed, so, index+1 = position or position-1 = index.</span></li><li><span>A slightly different version of this challenge is found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/WZMZEQoaNuhXovauT\"><span>here</span></a><span>.</span></li><li><span>A recursive version of this challenge is found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/Fby397fv37HCNHZy8\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(charAtPos([2,4,6,8,10],\"even\"), [4,8])",
			"Test.assertSimilar(charAtPos([1,2,3,4,5,6,7,8,9,10],\"odd\"), [1,3,5,7,9])",
			"Test.assertEquals(charAtPos(\"EDABIT\",\"even\"), \"DBT\")",
			"Test.assertEquals(charAtPos(\"EDABIT\",\"odd\"),  \"EAI\")",
			"Test.assertEquals(charAtPos(\"QWERTYUIOP\",\"even\"), \"WRYIP\")",
			"Test.assertEquals(charAtPos(\"POIUYTREWQ\",\"odd\"), \"PIYRW\")",
			"Test.assertEquals(charAtPos(\"ASDFGHJKLZ\",\"odd\"), \"ADGJL\")",
			"Test.assertEquals(charAtPos(\"ASDFGHJKLZ\",\"even\"), \"SFHKZ\")",
			"Test.assertSimilar(charAtPos([\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\"],\"odd\"), [\"!\",\"#\",\"%\",\"&\",\"(\"])",
			"Test.assertSimilar(charAtPos([\")\",\"(\",\"*\",\"&\",\"^\",\"%\",\"$\",\"#\",\"@\",\"!\"],\"odd\"), [\")\",\"*\",\"^\",\"$\",\"@\"])",
			"Test.assertSimilar(charAtPos([\"A\",\"R\",\"B\",\"I\",\"T\",\"R\",\"A\",\"R\",\"I\",\"L\",\"Y\"],\"odd\"), [\"A\",\"B\",\"T\",\"A\",\"I\",\"Y\"])"
		],
		"starterFn": [
			"1\nfunction charAtPos(r, s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fWkrdJb6EJrHsP7Sm"
	},
	{
		"title": "LCM of Two Numbers",
		"description": "<p><span>Write a function that returns the </span><strong><span>least common multiple (LCM)</span></strong><span> of two integers.</span></p><h3><span>Examples</span></h3><pre><code>lcm(9, 18) ➞ 18\n\nlcm(8, 5) ➞ 40\n\nlcm(17, 11) ➞ 187</code></pre><h3><span>Notes</span></h3><ul><li><span>Both values will be positive.</span></li><li><span>The </span><strong><span>LCM</span></strong><span> is the smallest integer that divides both numbers such that the remainder is zero.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(lcm(9, 18), 18)",
			"Test.assertEquals(lcm(8, 5), 40)",
			"Test.assertEquals(lcm(17, 11), 187)",
			"Test.assertEquals(lcm(17, 5), 85)",
			"Test.assertEquals(lcm(3, 12), 12)",
			"Test.assertEquals(lcm(9, 9), 9)"
		],
		"starterFn": [
			"1\nfunction lcm(n1, n2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ERmrS3QrK7sEt4PAt"
	},
	{
		"title": "Positive Dominant",
		"description": "<p><span>An array is </span><strong><span>positive dominant</span></strong><span> if it contains </span><strong><span>strictly more</span></strong><span> </span><strong><span>unique</span></strong><span> positive values than </span><strong><span>unique</span></strong><span> negative values.</span></p><p><span>Write a function that returns </span><code>true</code><span> if an array is </span><strong><span>positive dominant</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>[1, 1, 1, 1, -3, -4] ➞ false\n// there is only 1 unique positive value (1)\n// there are 2 unique negative values (-3, -4)\n\n[5, 99, 832, -3, -4] ➞ true\n\n[5, 0] ➞ true\n\n[0, -4, -1] ➞ false</code></pre><h3><span>Notes</span></h3><p><strong><span>0</span></strong><span> neither counts as a positive nor a negative value.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPositiveDominant([1, 1, 1, 1, -3, -4]), false)",
			"Test.assertEquals(isPositiveDominant([5, 99, 832, -3, -4]), true)",
			"Test.assertEquals(isPositiveDominant([5, 0]), true)",
			"Test.assertEquals(isPositiveDominant([0, -4, -1]), false)",
			"Test.assertEquals(isPositiveDominant([1, 2, 3, -1]), true)",
			"Test.assertEquals(isPositiveDominant([1, 0, 0, -1]), false)",
			"Test.assertEquals(isPositiveDominant([5, 4, 3, 0, 0, -1, -1, -2, -2]), true)",
			"Test.assertEquals(isPositiveDominant([52, 52, 52, -3, 2, 2, 2, -4]), false)",
			"Test.assertEquals(isPositiveDominant([3, 3, 3, 3, -1, -1, -1]), false)"
		],
		"starterFn": [
			"1\nfunction isPositiveDominant(a) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7pkKPYtTJzpxRMckZ"
	},
	{
		"title": "Promises VI: Catch",
		"description": "<p><span>We handle </span><strong><span>resolve</span></strong><span> callbacks with </span><strong><span>then</span></strong><span>, but what about </span><strong><span>reject</span></strong><span> callbacks?  We have a </span><strong><span>catch</span></strong><span> function that we can use to handle </span><strong><span>errors</span></strong><span> or </span><strong><span>rejected</span></strong><span> promises.   It is generally a good idea to have an error handler at the end of your promises.</span></p><h3><span>Challenge</span></h3><ul><li><span>Write an error handler for the provided promise. Re-assign </span><code>errorLog</code><span> to the error inside your error handler.  </span></li><li><span>The error handler must be added to the original promise.  So you can't do \n</span><code>promise.catch(/error handling/)</code><span>.  See the </span><strong><span>Comments</span></strong><span> for more details.</span></li></ul><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on promises.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"function promiseState(p) {",
			"  const t = {};",
			"  return Promise.race([p, t]).then(v => (v === t)? \"pending\" : \"fulfilled\", () => \"rejected\");",
			"}",
			"​",
			"Test.assertSimilar(errorLog, {}, \"You are only allowed to reassign 'errorLog' inside of the 'catch' method.\")",
			"promiseState(promise).then(state => Test.assertEquals(state, \"pending\", \"ignore this test\"))",
			"promise.then(x => Test.assertEquals(x.message, \"Something failed\"))",
			"promise.then(x => Test.assertEquals(errorLog.message, \"Something failed\"))"
		],
		"starterFn": [
			"1\nlet errorLog = {}",
			"2\n​",
			"3\nlet promise = new Promise((resolve, reject) => {",
			"4\n    throw new Error('Something failed');",
			"5\n})"
		],
		"url": "https://edabit.com/challenge/CstPAznqLdPSPYyAC"
	},
	{
		"title": "C*ns*r*d Str*ngs",
		"description": "<p><span>Someone has attempted to censor my strings by replacing every vowel with a </span><code>*</code><span>, </span><code>l*k* th*s</code><span>. Luckily, I've been able to find the vowels that were removed.</span></p><p><span>Given a censored string and a string of the censored vowels, return the original uncensored string.</span></p><h3><span>Example</span></h3><pre><code>uncensor(\"Wh*r* d*d my v*w*ls g*?\", \"eeioeo\") ➞ \"Where did my vowels go?\"\n\nuncensor(\"abcd\", \"\") ➞ \"abcd\"\n\nuncensor(\"*PP*RC*S*\", \"UEAE\") ➞ \"UPPERCASE\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The vowels are given in the correct order.</span></li><li><span>The number of vowels will match the number of </span><code>*</code><span> characters in the censored string.</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(uncensor('Wh*r* d*d my v*w*ls g*?', 'eeioeo'), 'Where did my vowels go?')",
			"Test.assertEquals(uncensor('abcd', ''), 'abcd', 'Works with no vowels.')",
			"Test.assertEquals(uncensor('*PP*RC*S*', 'UEAE'), 'UPPERCASE', 'Works with uppercase')",
			"Test.assertEquals(uncensor('Ch**s*, Gr*mm*t -- ch**s*', 'eeeoieee'), 'Cheese, Grommit -- cheese', 'Works with * at the end')",
			"Test.assertEquals(uncensor('*l*ph*nt', 'Eea'), 'Elephant', 'Works with * at the start')"
		],
		"starterFn": [
			"1\nfunction uncensor(str, vowels) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5S5HBQW6zZp8eH3eL"
	},
	{
		"title": "Bitwise Operator to Check Odd, Regular Expression to Check Even",
		"description": "<p><span>Create two functions:</span></p><ol><li><span>The first is </span><code>isOdd()</code><span> to check if a given number is odd using </span><strong><span>bitwise operator</span></strong><span>.</span></li><li><span>The second is </span><code>isEven()</code><span> to check if a given input is even using </span><strong><span>regular expressions</span></strong><span>.</span></li></ol><p><span>Use of  </span><code>%</code><span> operator is disallowed.</span></p><h3><span>Examples</span></h3><pre><code>isOdd(3) ➞ \"Yes\" // Use Bitwise Operator\n\nisOdd(58) ➞ \"No\" // Use Bitwise Operator\n\nisEven(\"0\") ➞ \"Yes\" // Use Regular Expression\n\nisEven(\"-99\") ➞ \"No\" // Use Regular Expression</code></pre><h3><span>Notes</span></h3><ul><li><span>Input will only be integers (positive/negative/zero).</span></li><li><span>For the second function, input will be numbers in string.</span></li><li><span>For more info on regular expressions, check the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"conditions",
			"regex"
		],
		"tests": [
			"Test.assertEquals(isOdd(-7), \"Yes\")",
			"Test.assertEquals(isOdd(-5), \"Yes\")",
			"Test.assertEquals(isOdd(17), \"Yes\")",
			"Test.assertEquals(isOdd(-6), \"No\")",
			"Test.assertEquals(isOdd(0), \"No\")",
			"Test.assertEquals(isEven(\"-7\"), \"No\")",
			"Test.assertEquals(isEven(\"111\"), \"No\")",
			"Test.assertEquals(isEven(\"0\"), \"Yes\")",
			"Test.assertEquals(isEven(\"-12\"), \"Yes\")",
			"Test.assertEquals(isEven(\"40\"), \"Yes\")"
		],
		"starterFn": [
			"1\n// Use Bitwise Operator (% operator disallowed.)",
			"2\nfunction isOdd(number) {",
			"3\n  ",
			"4\n}",
			"5\n​",
			"6\n​",
			"7\n// Use Regular Expression (% operator disallowed.)",
			"8\nfunction isEven(number) {",
			"9\n  ",
			"10\n}"
		],
		"url": "https://edabit.com/challenge/uroPr8CNouxobtShi"
	},
	{
		"title": "Pandigital Numbers",
		"description": "<p><span>A </span><strong><span>pandigital</span></strong><span> number contains all digits (0-9) at least once. Write a function that takes an integer, returning </span><code>true</code><span> if the integer is pandigital, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isPandigital(98140723568910) ➞ true\n\nisPandigital(90864523148909) ➞ false\n// 7 is missing.\n\nisPandigital(112233445566778899) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Think about the properties of a pandigital number when all duplicates are removed.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPandigital(84847473937), false)",
			"Test.assertEquals(isPandigital(546732965015), false)",
			"Test.assertEquals(isPandigital(6781235184590), true)",
			"Test.assertEquals(isPandigital(9432821089765), true)",
			"Test.assertEquals(isPandigital(629764), false)",
			"Test.assertEquals(isPandigital(90864523148909), false)",
			"Test.assertEquals(isPandigital(7296012), false)",
			"Test.assertEquals(isPandigital(647380265483206), false)",
			"Test.assertEquals(isPandigital(38165975424790), true)",
			"Test.assertEquals(isPandigital(8146327815320), false)",
			"Test.assertEquals(isPandigital(768431605430), false)",
			"Test.assertEquals(isPandigital(4920124852367763), true)",
			"Test.assertEquals(isPandigital(60543981597247), true)",
			"Test.assertEquals(isPandigital(10282343456789), true)"
		],
		"starterFn": [
			"1\nfunction isPandigital(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NXTrfGBXTKg3Z9jkz"
	},
	{
		"title": "Calculate the Total Price of Groceries",
		"description": "<p><span>Create a function that takes an array of objects (groceries) which calculates the total price and returns it as a number. A grocery object has a product, a quantity and a price, for example:</span></p><pre><code>{\n  \"product\": \"Milk\",\n  \"quantity\": 1,\n  \"price\": 1.50\n}</code></pre><h3><span>Examples</span></h3><pre><code>// 1 bottle of milk:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 1, price: 1.50 }\n]) ➞ 1.5\n\n// 1 bottle of milk &amp; 1 box of cereals:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 1, price: 1.50 },\n  { product: \"Cereals\", quantity: 1, price: 2.50 }\n]) ➞ 4\n\n// 3 bottles of milk:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 3, price: 1.50 }\n]) ➞ 4.5\n\n// Several groceries:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 1, price: 1.50 },\n  { product: \"Eggs\", quantity: 12, price: 0.10 },\n  { product: \"Bread\", quantity: 2, price: 1.60 },\n  { product: \"Cheese\", quantity: 1, price: 4.50 }\n]) ➞ 10.4\n\n// Some cheap candy:\ngetTotalPrice([\n  { product: \"Chocolate\", quantity: 1, price: 0.10 },\n  { product: \"Lollipop\", quantity: 1, price: 0.20 }\n]) ➞ 0.3</code></pre><h3><span>Notes</span></h3><p><span>There might be a floating point precision problem in here...</span></p>",
		"publishedBy": "Allard",
		"publishedByUrl": "https://edabit.com/user/d2oMpeLcNGNtnab8n",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"math",
			"objects"
		],
		"tests": [
			"Test.assertEquals(getTotalPrice([",
			"  { product: \"Milk\", quantity: 1, price: 1.50 }",
			"]), 1.5)",
			"​",
			"Test.assertEquals(getTotalPrice([",
			"  { product: \"Milk\", quantity: 1, price: 1.50 },",
			"  { product: \"Cereals\", quantity: 1, price: 2.50 }",
			"]), 4)",
			"​",
			"Test.assertEquals(getTotalPrice([",
			"  { product: \"Milk\", quantity: 3, price: 1.50 }",
			"]), 4.5)",
			"​",
			"Test.assertEquals(getTotalPrice([",
			"  { product: \"Milk\", quantity: 1, price: 1.50 },",
			"  { product: \"Eggs\", quantity: 12, price: 0.10 },",
			"  { product: \"Bread\", quantity: 2, price: 1.60 },",
			"  { product: \"Cheese\", quantity: 1, price: 4.50 }",
			"]), 10.4)",
			"​",
			"Test.assertEquals(getTotalPrice([",
			"  { product: \"Chocolate\", quantity: 1, price: 0.10 },",
			"  { product: \"Lollipop\", quantity: 1, price: 0.20 }",
			"]), 0.3)"
		],
		"starterFn": [
			"1\nfunction getTotalPrice(groceries) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jRSST87NjECBzbwzL"
	},
	{
		"title": "Finding Common Elements",
		"description": "<p><span>Create a function that takes two \"sorted\" arrays of numbers and returns an array of numbers which are common to both the input arrays.</span></p><h3><span>Examples</span></h3><pre><code>commonElements([-1, 3, 4, 6, 7, 9], [1, 3]) ➞ [3]\n\ncommonElements([1, 3, 4, 6, 7, 9], [1, 2, 3, 4, 7, 10]) ➞ [1, 3, 4, 7]\n\ncommonElements([1, 2, 2, 2, 3, 4, 5], [1, 2, 4, 5]) ➞ [1, 2, 4, 5]\n\ncommonElements([1, 2, 3, 4, 5], [10, 12, 13, 15]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Arrays are Sorted!! Try doing this problem with O(n + m) time complexity</span></p>",
		"publishedBy": "Shreeansh",
		"publishedByUrl": "https://edabit.com/user/Fhwnime223hGiaHaA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(commonElements([-1, 3, 4, 6, 7, 9], [1, 3]), [3])",
			"Test.assertSimilar(commonElements([1, 3, 4, 6, 7, 9], [1, 2, 3, 4, 7, 10]), [1, 3, 4, 7])",
			"Test.assertSimilar(commonElements([-1, 3, 4, 6, 7, 9], []), [])",
			"Test.assertSimilar(commonElements([1, 2, 2, 2, 3, 4, 5], [1, 2, 4, 5]), [1, 2, 4, 5])",
			"Test.assertSimilar(commonElements([-1, 3, 4, 6, 7, 9], [100, 300, 900]), [])",
			"Test.assertSimilar(commonElements([18, 30, 60, 77, 89, 103, 107, 139, 149, 150, 201, 204, 233, 248, 250, 264, 273, 297, 308, 310, 319, 320, 348, 349, 353, 362, 365, 368, 376, 381, 395, 401, 405, 416, 421, 424, 434, 444, 452, 454, 464, 478, 497, 511, 513, 523, 533, 551, 562, 565, 593, 602, 604, 609, 610, 614, 620, 624, 643, 645, 654, 660, 674, 674, 685, 686, 700, 704, 712, 723, 728, 735, 741, 760, 765, 775, 776, 781, 787, 788, 791, 806, 823, 842, 848, 849, 901, 904, 909, 911, 916, 931, 932, 932, 940, 950, 951, 959, 973, 993], [3, 13, 25, 25, 27, 32, 39, 40, 45, 53, 55, 57, 60, 67, 78, 80, 81, 86, 114, 116, 125, 130, 146, 159, 164, 174, 192, 193, 209, 211, 265, 275, 279, 298, 303, 303, 314, 327, 330, 337, 355, 356, 375, 386, 405, 449, 452, 454, 457, 470, 476, 496, 499, 500, 501, 504, 516, 547, 577, 603, 604, 613, 618, 628, 638, 652, 659, 677, 683, 685, 700, 701, 710, 713, 727, 728, 734, 740, 774, 780, 790, 797, 833, 834, 837, 863, 869, 875, 885, 910, 911, 928, 930, 938, 943, 959, 964, 969, 987, 994]), [60, 405, 452, 454, 604, 685, 700, 728, 911, 959])"
		],
		"starterFn": [
			"1\nfunction commonElements(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jtAvQyyDpFA2EaCcj"
	},
	{
		"title": "Calculate an Earned Run Average",
		"description": "<p><span>Create a function that returns an </span><em><span>Earned Run Average</span></em><span> (ERA). An ERA is calculated by multiplying </span><strong><span>9</span></strong><span> by the quotient of </span><em><span>Earned Runs Allowed</span></em><span> </span><code>er</code><span> divided by </span><code>ip</code><span> </span><em><span>Innings Pitched</span></em><span>.</span></p><p><span>In baseball statistics, </span><em><span>innings</span></em><span> are represented with a fractional part of </span><strong><span>.1</span></strong><span> (1/3) or </span><strong><span>.2</span></strong><span> (2/3) to represent the number of </span><em><span>outs</span></em><span> in an inning. A whole number or a number with a fractional part of </span><strong><span>.0</span></strong><span> represents a full inning with three </span><em><span>outs</span></em><span>. Check the </span><strong><span>Resources</span></strong><span> tab for a deeper explanation.</span></p><h3><span>Examples</span></h3><pre><code>era(22, 99) ➞ 2.00\n\nera(23, 99.1) ➞ 2.08\n\nera(24, 99.2) ➞ 2.17</code></pre><h3><span>Notes</span></h3><ul><li><span>ERA is represented with a scale of </span><em><span>2</span></em><span>: </span><strong><span>2.08</span></strong></li><li><span>For 1/3 and 2/3, use a scale of </span><em><span>2</span></em><span>.</span></li></ul>",
		"publishedBy": "Joel Palmer",
		"publishedByUrl": "https://edabit.com/user/46EqDiLEdJPtDFujt",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(era(22, 99), \"2.00\")",
			"Test.assertEquals(era(23, 99.1), \"2.08\")",
			"Test.assertEquals(era(24, 99.2), \"2.17\")"
		],
		"starterFn": [
			"1\nfunction era(er, ip) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/94RHwrv6PfaqEGYtr"
	},
	{
		"title": "Is the Sequence Linear, Quadratic or Cubic?",
		"description": "<p><span>Create a function that determines if a given sequence is </span><em><span>linear</span></em><span>, </span><em><span>quadratic</span></em><span> or </span><em><span>cubic</span></em><span>. The input will be an array of numbers of varying lengths. The function should return </span><code>\"Linear\"</code><span>, </span><code>\"Quadratic\"</code><span> or </span><code>\"Cubic\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>seqLevel([1, 2, 3, 4, 5]) ➞ \"Linear\"\n\nseqLevel([3, 6, 10, 15, 21]) ➞ \"Quadratic\"\n\nseqLevel([4, 14, 40, 88, 164]) ➞ \"Cubic\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(seqLevel([1, 2, 3, 4, 5]), \"Linear\")",
			"Test.assertEquals(seqLevel([2, 1, 0, -1, -2]), \"Linear\")",
			"Test.assertEquals(seqLevel([3, 6, 10, 15, 21]), \"Quadratic\")",
			"Test.assertEquals(seqLevel([4, 9, 16, 25, 36]), \"Quadratic\")",
			"Test.assertEquals(seqLevel([7, 17, 31, 49, 71]), \"Quadratic\")",
			"Test.assertEquals(seqLevel([2, 10, 26, 50, 82]), \"Quadratic\")",
			"Test.assertEquals(seqLevel([-6, -4, 10, 42, 98, 184]), \"Cubic\")",
			"Test.assertEquals(seqLevel([17, 59, 143, 287, 509, 827]), \"Cubic\")"
		],
		"starterFn": [
			"1\nfunction seqLevel(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/N7p2XeHgkXejEgoap"
	},
	{
		"title": "Reverse the Odd Length Words",
		"description": "<p><span>Given a string, reverse all the words which have odd length. The even length words are not changed.</span></p><h3><span>Examples</span></h3><pre><code>reverseOdd(\"Bananas\") ➞ \"sananaB\"\n\nreverseOdd(\"One two three four\") ➞ \"enO owt eerht four\"\n\nreverseOdd(\"Make sure uoy only esrever sdrow of ddo length\")\n➞ \"Make sure you only reverse words of odd length\"</code></pre><h3><span>Notes</span></h3><p><span>There is exactly one space between each word and no punctuation is used.</span></p>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverseOdd(\"One two three four\"),'enO owt eerht four')",
			"Test.assertEquals(reverseOdd('Make sure uoy only esrever sdrow of ddo length'),'Make sure you only reverse words of odd length')",
			"Test.assertEquals(reverseOdd(''),'','Should work with empty string.')",
			"Test.assertEquals(reverseOdd('Bananas'),'sananaB','Should work with only one word.')",
			"Test.assertEquals(reverseOdd('Even even even even even even even even even'),'Even even even even even even even even even')",
			"Test.assertEquals(reverseOdd('Odd odd odd odd odd odd odd odd odd odd odd'),'ddO ddo ddo ddo ddo ddo ddo ddo ddo ddo ddo')"
		],
		"starterFn": [
			"1\nfunction reverseOdd(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yYfQoo6rkMezauG77"
	},
	{
		"title": "Double Character Swap",
		"description": "<p><span>Write a function to replace all instances of character </span><code>c1</code><span> with character </span><code>c2</code><span> and vice versa.</span></p><h3><span>Examples</span></h3><pre><code>doubleSwap( \"aabbccc\", \"a\", \"b\") ➞ \"bbaaccc\"\n\ndoubleSwap(\"random w#rds writt&amp;n h&amp;r&amp;\", \"#\", \"&amp;\")\n➞ \"random w&amp;rds writt#n h#r#\"\n\ndoubleSwap(\"128 895 556 788 999\", \"8\", \"9\")\n➞ \"129 985 556 799 888\"</code></pre><h3><span>Notes</span></h3><p><span>Both characters will show up at least once in the string.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(doubleSwap(\"aabbccc\", \"a\", \"b\"), \"bbaaccc\")",
			"Test.assertEquals(doubleSwap(\"random w#rds writt&n h&r&\", \"#\", \"&\"), \"random w&rds writt#n h#r#\")",
			"Test.assertEquals(doubleSwap(\"128 895 556 788 999\", \"8\", \"9\"), \"129 985 556 799 888\")",
			"Test.assertEquals(doubleSwap(\"mamma mia\", \"m\", \"a\"), \"amaam aim\")",
			"Test.assertEquals(doubleSwap(\"**##**\", \"*\", \"#\"), \"##**##\")",
			"Test.assertEquals(doubleSwap(\"123456789\", \"4\", \"5\"), \"123546789\")",
			"Test.assertEquals(doubleSwap(\"445566&&\", \"4\", \"&\"), \"&&556644\")",
			"Test.assertEquals(doubleSwap(\"!?@,.\", \",\", \".\"), \"!?@.,\")",
			"Test.assertEquals(doubleSwap(\"Q_Q T_T =.= >.<\", \"Q\", \"T\"), \"T_T Q_Q =.= >.<\")",
			"Test.assertEquals(doubleSwap(\"(Q_Q) (T_T) (=.=) (>.<)\", \")\", \"(\"), \")Q_Q( )T_T( )=.=( )>.<(\")",
			"Test.assertEquals(doubleSwap(\"<>\", \">\", \"<\"), \"><\")",
			"Test.assertEquals(doubleSwap(\"001101\", \"1\", \"0\"), \"110010\")",
			"Test.assertEquals(doubleSwap(\"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\", \"a\", \"b\"), \"!\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`bacdefghijklmnopqrstuvwxyz{|}~\")"
		],
		"starterFn": [
			"1\nfunction doubleSwap(str, c1, c2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NfBqxaDu4KoxAysWF"
	},
	{
		"title": "Reversing a Binary String",
		"description": "<p><span>Write a function that takes an integer </span><code>n</code><span>, reverses the binary representation of that integer, and returns the new integer from the reversed binary.</span></p><h3><span>Examples</span></h3><pre><code>reversedBinaryInteger(10) ➞ 5\n// 10 = 1010 -&gt; 0101 = 5\n\nreversedBinaryInteger(12) ➞ 3\n// 12 = 1100 -&gt; 0011 = 3\n\nreversedBinaryInteger(25) ➞ 19\n// 25 = 11001 -&gt; 10011 = 19\n\nreversedBinaryInteger(45) ➞ 45\n// 45 = 101101 -&gt; 101101 = 45</code></pre><h3><span>Notes</span></h3><p><span>All values of </span><code>n</code><span> will be positive.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(reversedBinaryInteger(1), 1)",
			"Test.assertEquals(reversedBinaryInteger(4), 1)",
			"Test.assertEquals(reversedBinaryInteger(5), 5)",
			"Test.assertEquals(reversedBinaryInteger(31), 31)",
			"Test.assertEquals(reversedBinaryInteger(82), 37)",
			"Test.assertEquals(reversedBinaryInteger(90), 45)",
			"Test.assertEquals(reversedBinaryInteger(255), 255)",
			"Test.assertEquals(reversedBinaryInteger(446), 251)",
			"Test.assertEquals(reversedBinaryInteger(451), 391)",
			"Test.assertEquals(reversedBinaryInteger(634), 377)",
			"Test.assertEquals(reversedBinaryInteger(776), 67)",
			"Test.assertEquals(reversedBinaryInteger(898), 263)",
			"Test.assertEquals(reversedBinaryInteger(1103), 1937)",
			"Test.assertEquals(reversedBinaryInteger(3801), 2487)",
			"Test.assertEquals(reversedBinaryInteger(4096), 1)",
			"Test.assertEquals(reversedBinaryInteger(8505), 10017)",
			"Test.assertEquals(reversedBinaryInteger(428293), 328843)",
			"Test.assertEquals(reversedBinaryInteger(547643), 904609)",
			"Test.assertEquals(reversedBinaryInteger(612965), 681385)",
			"Test.assertEquals(reversedBinaryInteger(999999), 1033263)"
		],
		"starterFn": [
			"1\nfunction reversedBinaryInteger(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4s93F8ZiEdHjmMnMv"
	},
	{
		"title": "Do All Bigrams Exist?",
		"description": "<p><span>You are given an input array of bigrams, and an array of words.</span></p><p><span>Write a function that returns </span><code>true</code><span> if you can find </span><strong><span>every single bigram</span></strong><span> from this array can be found at least </span><strong><span>once</span></strong><span> in an array of words.</span></p><h3><span>Examples</span></h3><pre><code>canFind([\"at\", \"be\", \"th\", \"au\"], [\"beautiful\", \"the\", \"hat\"]) ➞ true\n\ncanFind([\"ay\", \"be\", \"ta\", \"cu\"], [\"maybe\", \"beta\", \"abet\", \"course\"]) ➞ false\n# \"cu\" does not exist in any of the words\n\ncanFind([\"th\", \"fo\", \"ma\", \"or\"], [\"the\", \"many\", \"for\", \"forest\"]) ➞ true\n\ncanFind([\"oo\", \"mi\", \"ki\", \"la\"], [\"milk\", \"chocolate\", \"cooks\"]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>A </span><strong><span>bigram</span></strong><span> is string of </span><strong><span>two consecutive characters</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canFind([\"at\", \"be\", \"th\", \"au\"], [\"beautiful\", \"the\", \"hat\"]), true)",
			"Test.assertEquals(canFind([\"bo\", \"ta\", \"el\", \"st\", \"ca\"], [\"books\", \"table\", \"cap\", \"hostel\"]), true)",
			"Test.assertEquals(canFind([\"la\", \"te\"], [\"latte\"]), true)",
			"Test.assertEquals(canFind([\"th\", \"fo\", \"ma\", \"or\"], [\"the\", \"many\", \"for\", \"forest\"]), true)",
			"Test.assertEquals(canFind([\"ay\", \"be\", \"ta\", \"cu\"], [\"maybe\", \"beta\", \"abet\", \"course\"]), false)",
			"Test.assertEquals(canFind([\"oo\", \"mi\", \"ki\", \"la\"], [\"milk\", \"chocolate\", \"cooks\"]), false)",
			"Test.assertEquals(canFind([\"la\"], []), false)",
			"Test.assertEquals(canFind([\"la\", \"at\", \"te\", \"ea\"], [\"latte\"]), false)"
		],
		"starterFn": [
			"1\nfunction canFind(bigrams, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wQGGp6Qce6phDCvW9"
	},
	{
		"title": "Concatenate to Form Target Array",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if smaller arrays can concatenate to form the target array and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>canConcatenate([[1, 2, 3, 4], [5, 6], [7]], [1, 2, 3, 4, 5, 6, 7]) ➞ true\n\ncanConcatenate([[2, 1, 3], [5, 4, 7, 6]], [7, 6, 5, 4, 3, 2, 1]) ➞ true\n\ncanConcatenate([[2, 1, 3], [5, 4, 7, 6, 7]], [1, 2, 3, 4, 5, 6, 7]) ➞ false\n// Duplicate 7s not found in target array.\n\ncanConcatenate([[2, 1, 3], [5, 4, 7]], [1, 2, 3, 4, 5, 6, 7]) ➞ false\n// Missing 6 from target array.</code></pre><h3><span>Notes</span></h3><ul><li><span>Arrays do not have to be sorted (see example #2).</span></li><li><span>Arrays should concatenate to create the final array exactly (see examples #3 and #4).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canConcatenate([[1, 2, 3, 4], [5, 6], [7]], [1, 2, 3, 4, 5, 6, 7]), true)",
			"Test.assertEquals(canConcatenate([[2, 1, 3], [5, 4, 7, 6]], [1, 2, 3, 4, 5, 6, 7]), true)",
			"Test.assertEquals(canConcatenate([[2, 1, 3], [5, 4, 7, 6]], [7, 6, 5, 4, 3, 2, 1]), true)",
			"Test.assertEquals(canConcatenate([[2, 1, 3], [5, 4, 7, 6, 7]], [1, 2, 3, 4, 5, 6, 7]), false)",
			"Test.assertEquals(canConcatenate([[2, 1, 3], [5, 4, 7]], [1, 2, 3, 4, 5, 6, 7]), false)",
			"Test.assertEquals(canConcatenate([[1, 4], [3]], [1, 3, 4]), true)",
			"Test.assertEquals(canConcatenate([[1, 4], [3]], [1, 2, 3, 4]), false)",
			"Test.assertEquals(canConcatenate([[1, 4], [3]], [4, 3, 1]), true)",
			"Test.assertEquals(canConcatenate([[1, 4], [2, 3]], [4, 3, 1, 2]), true)",
			"Test.assertEquals(canConcatenate([[1], [2], [3, 4]], [4, 3, 1, 2]), true)",
			"Test.assertEquals(canConcatenate([[1], [2], [3], [4]], [4, 3, 1, 2]), true)"
		],
		"starterFn": [
			"1\nfunction canConcatenate(arr, target) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/f3Lc7Z5dK3p8dahoz"
	},
	{
		"title": "Broken Keyboard",
		"description": "<p><span>Given what is supposed to be typed and what is actually typed, write a function that returns the broken key(s). The function looks like:</span></p><pre><code>findBrokenKeys(correct phrase, what you actually typed)</code></pre><h3><span>Examples</span></h3><pre><code>findBrokenKeys(\"happy birthday\", \"hawwy birthday\") ➞ [\"p\"]\n\nfindBrokenKeys(\"starry night\", \"starrq light\") ➞ [\"y\", \"n\"]\n\nfindBrokenKeys(\"beethoven\", \"affthoif5\") ➞ [\"b\", \"e\", \"v\", \"n\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Broken keys should be ordered by when they first appear in the sentence.</span></li><li><span>Only one broken key per letter should be listed.</span></li><li><span>Letters will all be in lower case.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(findBrokenKeys(\"happy birthday\", \"hawwy birthday\"), [\"p\"])",
			"Test.assertSimilar(findBrokenKeys(\"starry night\", \"starrq light\"), [\"y\", \"n\"])",
			"Test.assertSimilar(findBrokenKeys(\"beethoven\", \"affthoif5\"), [\"b\", \"e\", \"v\", \"n\"])",
			"Test.assertSimilar(findBrokenKeys(\"mozart\", \"aiwgvx\"), [\"m\", \"o\", \"z\", \"a\", \"r\", \"t\"])",
			"Test.assertSimilar(findBrokenKeys(\"5678\", \"4678\"), [\"5\"], \"It should work for numbers.\")",
			"Test.assertSimilar(findBrokenKeys(\"!!??$$\", \"$$!!??\"), [\"!\", \"?\", \"$\"], \"It should work for punctuation.\")"
		],
		"starterFn": [
			"1\nfunction findBrokenKeys(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pbK3wzLDvdwfEKgMt"
	},
	{
		"title": "Layers in a Rug",
		"description": "<p><span>Write a function that counts how many concentric layers a rug.</span></p><h3><span>Examples</span></h3><pre><code>countLayers([\n  \"AAAA\",\n  \"ABBA\",\n  \"AAAA\"\n]) ➞ 2\n\ncountLayers([\n  \"AAAAAAAAA\",\n  \"ABBBBBBBA\",\n  \"ABBAAABBA\",\n  \"ABBBBBBBA\",\n  \"AAAAAAAAA\"\n]) ➞ 3\n\ncountLayers([\n  \"AAAAAAAAAAA\",\n  \"AABBBBBBBAA\",\n  \"AABCCCCCBAA\",\n  \"AABCAAACBAA\",\n  \"AABCADACBAA\",\n  \"AABCAAACBAA\",\n  \"AABCCCCCBAA\",\n  \"AABBBBBBBAA\",\n  \"AAAAAAAAAAA\"\n]) ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>Multiple layers can share the </span><strong><span>same component</span></strong><span> so count them separately (example #2).</span></li><li><span>Layers will be horizontally and vertically symmetric.</span></li><li><span>There will be at least one layer for each rug.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countLayers([",
			"\"AAA\"]), 1)",
			"​",
			"Test.assertEquals(countLayers([",
			"\"AAAA\", ",
			"\"AAAA\", ",
			"\"AAAA\"]), 1)",
			"​",
			"Test.assertEquals(countLayers([",
			"\"AAAA\", ",
			"\"ABBA\", ",
			"\"AAAA\"]), 2)",
			"​",
			"Test.assertEquals(countLayers([",
			"\"AAAAAAAAA\", ",
			"\"ABBBBBBBA\", ",
			"\"ABBBBBBBA\", ",
			"\"ABBBBBBBA\", ",
			"\"AAAAAAAAA\"]), 2)",
			"​",
			"Test.assertEquals(countLayers([",
			"\"AAAAAAAAA\", ",
			"\"ABBBBBBBA\", ",
			"\"ABBAAABBA\", ",
			"\"ABBBBBBBA\", ",
			"\"AAAAAAAAA\"]), 3)"
		],
		"starterFn": [
			"1\nfunction countLayers(rug) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8khL2WEhZ6M9onHL4"
	},
	{
		"title": "Imaginary Coding Interview",
		"description": "<p><span>Create a function to check if a candidate is qualified in an imaginary coding interview of an imaginary tech startup.</span></p><p><span>The criteria for a candidate to be qualified in the coding interview is:</span></p><ol><li><span>The candidate should have complete all the questions.</span></li><li><span>The maximum time given to complete the interview is 120 minutes.</span></li><li><span>The maximum time given for very easy questions is 5 minutes each.</span></li><li><span>The maximum time given for easy questions is 10 minutes each.</span></li><li><span>The maximum time given for medium questions is 15 minutes each.</span></li><li><span>The maximum time given for hard questions is 20 minutes each.</span></li></ol><p><span>If all the above conditions are satisfied, return </span><code>\"qualified\"</code><span>, else return </span><code>\"disqualified\"</code><span>.</span></p><p><span>You will be given an array of time taken by a candidate to solve a particular question and the total time taken by the candidate to complete the interview.</span></p><p><span>Given an array, in a true condition will always be in the format </span><code>[very easy, very easy, easy, easy, medium, medium, hard, hard]</code><span>.</span></p><p><span>The maximum time to complete the interview includes a buffer time of 20 minutes.</span></p><h3><span>Examples</span></h3><pre><code>interview([5, 5, 10, 10, 15, 15, 20, 20], 120) ➞ \"qualified\"\n\ninterview([2, 3, 8, 6, 5, 12, 10, 18], 64) ➞  \"qualified\"\n\ninterview([5, 5, 10, 10, 25, 15, 20, 20], 120) ➞ \"disqualified\"\n// Exceeded the time limit for a medium question.\n\ninterview([5, 5, 10, 10, 15, 15, 20], 120) ➞ \"disqualified\"\n// Did not complete all the questions.\n\ninterview([5, 5, 10, 10, 15, 15, 20, 20], 130) ➞ \"disqualified\"\n// Solved all the questions in their respected time limits but exceeded the total time limit of the interview.</code></pre><h3><span>Notes</span></h3><p><span>Try to solve the problem using only array methods.</span></p>",
		"publishedBy": "tejaakula2010",
		"publishedByUrl": "https://edabit.com/user/QNnRGeEwhJHDsdvFd",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions"
		],
		"tests": [
			"Test.assertEquals(interview([5, 5, 10, 10, 15, 15, 20, 20], 120), 'qualified')",
			"Test.assertSimilar(interview([2, 3, 8, 6, 5, 12, 10, 18], 120), 'qualified')",
			"Test.assertSimilar(interview([2, 3, 8, 6, 5, 12, 10, 18], 64), 'qualified')",
			"Test.assertSimilar(interview([5, 5, 10, 10, 25, 15, 20, 20], 120), 'disqualified')",
			"Test.assertSimilar(interview([5, 5, 10, 10, 15, 15, 20], 120), 'disqualified')",
			"Test.assertSimilar(interview([5, 5, 10, 10, 15, 15, 20, 20], 130), 'disqualified')",
			"Test.assertSimilar(interview([5, 5, 10, 10, 15, 20, 50], 160), 'disqualified')",
			"Test.assertSimilar(interview([5, 5, 10, 10, 15, 15, 40], 120), 'disqualified')",
			"Test.assertSimilar(interview([10, 10, 15, 15, 20, 20], 150), 'disqualified')",
			"Test.assertSimilar(interview([5, 5, 10, 20, 15, 15, 20, 20], 140), 'disqualified')"
		],
		"starterFn": [
			"1\nfunction interview(arr, tot) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QfYTCdtcZ4TST4JTx"
	},
	{
		"title": "RegEx: Character Classes X ⁠- \\W",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>HTML elements are everything from the start tag to the end tag. An example of one </span><code>div</code><span> element would be: </span><code>&lt;div&gt;edabit&lt;/div&gt;</code><span>.</span></p><p><span>Find out how many </span><code>&lt;div&gt;</code><span> elements are used in a string. Use the character class </span><code>\\W</code><span> in your expression.</span></p><h3><span>Example</span></h3><pre><code>const str = \"&lt;div&gt;Hello.&lt;/div&gt;&lt;div&gt;My name is &lt;b&gt;George&lt;/b&gt;.&lt;/div&gt;\"\n// 2 times\n\nconst str = \"&lt;div&gt;&lt;h1&gt;The Word for Today&lt;/h1&gt;&lt;div&gt;aardvark&lt;/div&gt;&lt;/div&gt;\"\n// 2 times\n\nconst str = \"&lt;div&gt;&lt;/div&gt;\"\n// 1 time</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span>  tab for details on character classes if you're stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const str1 = \"<div>Hello.</div><div>My name is <b>George</b>.</div>\"",
			"const str2 = \"<div><h1>The Word for Today</h1><div>aardvark</div></div>\"",
			"const str3 = \"<div><div><div></div></div></div>\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\W/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP).length",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"required\", \"You are required to use a \\W character class in your expression.\")",
			"Test.assertSimilar(testExp(str1), 2)",
			"Test.assertSimilar(testExp(str2), 2)",
			"Test.assertSimilar(testExp(str3), 3)"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you expression here */g"
		],
		"url": "https://edabit.com/challenge/YxsH3nB9Z5n5Tbupd"
	},
	{
		"title": "Fret Frequencies on the Guitar",
		"description": "<p><span>Create a function that takes a number of a guitar string and the number of the fret and returns the corresponding frequency of the note.</span></p><ul><li><span>Check the </span><strong><span>Resources Tab</span></strong><span>, for the correct frequencies per string.</span></li><li><span>The formula to calculate the frequency is: </span><code>String Frequency * 2^(fret/12)</code><span>.</span></li><li><span>Round the frequency to the nearest hundreth.</span></li><li><span>For this challenge, we use \"Standard Tuning\".</span></li></ul><p><span>So, one fret = a semitone = a half step. From D to D♯ for instance.</span></p><h3><span>Examples</span></h3><pre><code>fretFreq(5, 12) ➞ 220\n\nfretFreq(4, 6) ➞ 207.65\n\nfretFreq(2, 23) ➞ 932.32</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(fretFreq(3, 21), 659.26)",
			"Test.assertEquals(fretFreq(3, 15), 466.17)",
			"Test.assertEquals(fretFreq(6, 17), 220.01)",
			"Test.assertEquals(fretFreq(5, 12), 220)",
			"Test.assertEquals(fretFreq(2, 5), 329.63)",
			"Test.assertEquals(fretFreq(3, 9), 329.63)",
			"Test.assertEquals(fretFreq(1, 16), 830.62)",
			"Test.assertEquals(fretFreq(1, 4), 415.31)",
			"Test.assertEquals(fretFreq(3, 16), 493.89)",
			"Test.assertEquals(fretFreq(4, 6), 207.65)",
			"Test.assertEquals(fretFreq(2, 13), 523.25)",
			"Test.assertEquals(fretFreq(6, 12), 164.82)",
			"Test.assertEquals(fretFreq(5, 16), 277.18)",
			"Test.assertEquals(fretFreq(5, 19), 329.63)",
			"Test.assertEquals(fretFreq(4, 0), 146.83)",
			"Test.assertEquals(fretFreq(2, 6), 349.23)",
			"Test.assertEquals(fretFreq(3, 9), 329.63)",
			"Test.assertEquals(fretFreq(3, 5), 261.63)",
			"Test.assertEquals(fretFreq(5, 18), 311.13)",
			"Test.assertEquals(fretFreq(2, 23), 932.32)",
			"Test.assertEquals(fretFreq(2, 16), 622.25)",
			"Test.assertEquals(fretFreq(4, 6), 207.65)",
			"Test.assertEquals(fretFreq(4, 9), 246.94)",
			"Test.assertEquals(fretFreq(5, 8), 174.61)",
			"Test.assertEquals(fretFreq(3, 1), 207.65)",
			"Test.assertEquals(fretFreq(5, 17), 293.66)"
		],
		"starterFn": [
			"1\nfunction fretFreq(gStr, fret) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4qimb3QisL8wNbSCd"
	},
	{
		"title": "Unfair Hurdles",
		"description": "<p><span>Unfair hurdles are hurdles which are either </span><em><span>too high</span></em><span>, or way </span><em><span>too close together</span></em><span>.</span></p><p><span>Create a function which takes in an array of strings, representing hurdles, and returns whether or not  they are unfair. For the purposes of this challenge, unfair hurdles are:</span></p><ul><li><span>At least </span><strong><span>4 characters tall</span></strong><span>.</span></li><li><span>Strictly less than </span><strong><span>4 spaces</span></strong><span> apart.</span></li></ul><h3><span>Examples</span></h3><pre><code>// Hurdle are good distance apart but are way too tall.\n\nisUnfairHurdle([\n  \"#    #    #    #\",\n  \"#    #    #    #\",\n  \"#    #    #    #\",\n  \"#    #    #    #\"\n]) ➞ true\n\n\n// Hurdles are a fine height but are way too close together.\n\nisUnfairHurdle([\n  \"#  #  #  #\",\n  \"#  #  #  #\",\n  \"#  #  #  #\"\n]) ➞ true\n\n\n// These hurdles are mighty splendid.\n\nisUnfairHurdle([\n  \"#      #      #      #\",\n  \"#      #      #      #\"\n]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Hurdles will be represented with a hashtag </span><code>\"#\"</code><span>.</span></li><li><span>There will be the same spacing between hurdles.</span></li><li><span>Hurdles are always as high as the length of the array.</span></li><li><span>Hurdles are always evenly spaced.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isUnfairHurdle([",
			"'#    #    #    #',",
			"'#    #    #    #',",
			"'#    #    #    #',",
			"'#    #    #    #'",
			"]), true)",
			"​",
			"Test.assertEquals(isUnfairHurdle([",
			"'#  #  #  #',",
			"'#  #  #  #',",
			"'#  #  #  #'",
			"]), true)",
			"​",
			"Test.assertEquals(isUnfairHurdle([",
			"'#    #    #    #',",
			"'#    #    #    #',",
			"'#    #    #    #'",
			"]), false)",
			"​",
			"Test.assertEquals(isUnfairHurdle([",
			"'#    #    #    #',",
			"'#    #    #    #'",
			"]), false)",
			"​",
			"Test.assertEquals(isUnfairHurdle([",
			"'#      #      #      #',"
		],
		"starterFn": [
			"1\nfunction isUnfairHurdle(hurdles) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2qdzg4MMysjzCsAQr"
	},
	{
		"title": "White Spaces Between Lower and Uppercase Letters",
		"description": "<p><span>Write a function that inserts a white space between every instance of a lower character followed immediately by an upper character.</span></p><h3><span>Examples</span></h3><pre><code>insertWhitespace(\"SheWalksToTheBeach\") ➞ \"She Walks To The Beach\"\n\ninsertWhitespace(\"MarvinTalksTooMuch\") ➞ \"Marvin Talks Too Much\"\n\ninsertWhitespace(\"TheGreatestUpsetInHistory\") ➞ \"The Greatest Upset In History\"</code></pre><h3><span>Notes</span></h3><p><span>Each word in the phrase will be at least two characters long.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(insertWhitespace(\"SheWalksToTheBeach\"), \"She Walks To The Beach\")",
			"Test.assertEquals(insertWhitespace(\"MarvinTalksTooMuch\"), \"Marvin Talks Too Much\")",
			"Test.assertEquals(insertWhitespace(\"HopelesslyDevotedToYou\"), \"Hopelessly Devoted To You\")",
			"Test.assertEquals(insertWhitespace(\"EvenTheBestFallDownSometimes\"), \"Even The Best Fall Down Sometimes\")",
			"Test.assertEquals(insertWhitespace(\"TheGreatestUpsetInHistory\"), \"The Greatest Upset In History\")"
		],
		"starterFn": [
			"1\nfunction insertWhitespace(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ew9dry9RzoaeiTzwX"
	},
	{
		"title": "Primes Below a Given Number",
		"description": "<p><span>Create a function that will find all primes below a given number. Return the result as an array.</span></p><h3><span>Examples</span></h3><pre><code>primesBelowNum(5) ➞ [2, 3, 5]\n\nprimesBelowNum(10) ➞ [2, 3, 5, 7]\n\nprimesBelowNum(20) ➞ [2, 3, 5, 7, 11, 13, 17, 19]</code></pre><h3><span>Notes</span></h3><p><span>If </span><code>n</code><span> is a prime, it is included in the array.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(primesBelowNum(5), [2, 3, 5])",
			"Test.assertSimilar(primesBelowNum(10), [2, 3, 5, 7])",
			"Test.assertSimilar(primesBelowNum(20), [2, 3, 5, 7, 11, 13, 17, 19])",
			"Test.assertSimilar(primesBelowNum(6), [2, 3, 5])",
			"Test.assertSimilar(primesBelowNum(11), [2, 3, 5, 7, 11])",
			"Test.assertSimilar(primesBelowNum(21), [2, 3, 5, 7, 11, 13, 17, 19])",
			"Test.assertSimilar(primesBelowNum(7), [2, 3, 5, 7])",
			"Test.assertSimilar(primesBelowNum(12), [2, 3, 5, 7, 11])",
			"Test.assertSimilar(primesBelowNum(22), [2, 3, 5, 7, 11, 13, 17, 19])",
			"Test.assertSimilar(primesBelowNum(8), [2, 3, 5, 7])",
			"Test.assertSimilar(primesBelowNum(13), [2, 3, 5, 7, 11, 13])",
			"Test.assertSimilar(primesBelowNum(23), [2, 3, 5, 7, 11, 13, 17, 19, 23])"
		],
		"starterFn": [
			"1\nfunction primesBelowNum(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Rgr2cba4Hp7kt47BW"
	},
	{
		"title": "RegEx XVI : Quantifiers - x*, x+, x?",
		"description": "<p><strong><span>Quantifiers</span></strong><span> indicate numbers of characters or expressions to match.</span></p><p><code>x*</code><span> matches the preceding item \"x\" 0 or more times.</span></p><pre><code>\"A ghost booooed\".match(/bo*/) ➞ \"boooo\"</code></pre><p><code>x+</code><span> matches the preceding item \"x\" 1 or more times. Equivalent to {1,}.</span></p><pre><code>\"caaaaaaandy\".match(/a+/) ➞ \"aaaaaa\"</code></pre><p><code>x?</code><span> matches the preceding item \"x\" 0 or 1 times.  If used immediately after any of the quantifiers </span><span>*</span><span>, +, ?, or {}, makes the quantifier non-greedy (matching the minimum number of times), as opposed to the default, which is greedy (matching the maximum number of times).</span></p><pre><code>\"angle.\".match(/e?le?/) ➞ \"le\"\n\"angel.\".match(/e?le?/) ➞ \"el\"</code></pre><ul><li><span>Write the regex to match only the street.</span></li><li><span>Use a quantifier in your expression.</span></li></ul><h3><span>Example</span></h3><pre><code>let address = \"Harry Potter, 4 Privet Drive, Little Whinging, Surrey\"\naddress.match(REGEXP) ➞ \"4 Privet Drive\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const address1 = \"Harry Potter, 4 Privet Drive, Little Whinging, Surrey\"",
			"const address2 = \"Sherlock Holmes, 221B Baker St, Marylebone London NW1 6XE, UK\"",
			"const address3 = \"The White House, 1600 Pennsylvania Avenue, Washington, DC\"",
			"​",
			"Test.assertEquals(address1.match(REGEXP)[0], \"4 Privet Drive\")",
			"Test.assertEquals(address2.match(REGEXP)[0], \"221B Baker St\")",
			"Test.assertEquals(address3.match(REGEXP)[0], \"1600 Pennsylvania Avenue\")"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */"
		],
		"url": "https://edabit.com/challenge/u4xcCumCfmK92nf2K"
	},
	{
		"title": "Get Students with Names and Top Notes",
		"description": "<p><span>Create a function that takes an array of objects like </span><code>{ name: 'John', notes: [3, 5, 4]}</code><span> and returns an array of objects like </span><code>{ name: \"John\", topNote: 5 }</code><span>.</span></p><p><span>If student has no notes (an empty array) then let's assume </span><code>topNote: 0</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>[\n  { name: \"John\", notes: [3, 5, 4]}\n] ➞ [\n  { name: \"John\", topNote: 5}\n]</code></pre><h3><span>Notes</span></h3><p><span>Try doing it with an arrow function.</span></p>",
		"publishedBy": "Bartosz Cytrowski",
		"publishedByUrl": "https://edabit.com/user/QCchMDx3z8NcqT8QJ",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects"
		],
		"tests": [
			"const objectsAreEqual = (actual, expected) => Object.keys(expected).every(",
			"  key => actual[key] === expected[key]",
			")",
			"const areEqual = (actual, expected, compare) => expected.every(",
			"  (item, index) => compare(actual[index], item)",
			")",
			"const sets = [",
			"  [['Jacek', [5, 4, 3]], ['Ewa', [3, 3, 3]], ['Zygmunt', [1, 2, 3]]],",
			"  [['Jacek', []], ['Ewa', []], ['Zygmunt', [1, 2, 3]]],",
			"  []",
			"].map(",
			"  set => ({ ",
			"    actual: getStudentsWithNamesAndTopNotes(",
			"      set.map(([name, notes]) => ({ name, notes }))",
			"    ), ",
			"    expected: set.map(([name, notes]) => ({ name, topNote: Math.max(...notes, 0) }))",
			"  })   ",
			").forEach(",
			"  ({ actual, expected }) => {",
			"    Test.expectNoError('Result should be an array', () => {",
			"      Test.assertEquals(areEqual(actual, expected, objectsAreEqual), true, JSON.stringify(actual))",
			"    })",
			"  }",
			")"
		],
		"starterFn": [
			"1\nfunction getStudentsWithNamesAndTopNotes(students) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GJD5x54NaFZwbtxQW"
	},
	{
		"title": "The Karaca's Encryption Algorithm",
		"description": "<p><span>Make a function that encrypts a given input with these steps:</span></p><p><span>Input: </span><code>\"apple\"</code></p><p><span>Step 1: Reverse the input: </span><code>\"elppa\"</code></p><p><span>Step 2: Replace all vowels using the following chart:</span></p><pre><code>a =&gt; 0\ne =&gt; 1\ni =&gt; 2\no =&gt; 2\nu =&gt; 3\n\n// \"1lpp0\"</code></pre><p><span>Step 3: Add \"aca\" to the end of the word: </span><code>\"1lpp0aca\"</code></p><p><span>Output: </span><code>\"1lpp0aca\"</code></p><h3><span>Examples</span></h3><pre><code>encrypt(\"banana\") ➞ \"0n0n0baca\"\n\nencrypt(\"karaca\") ➞ \"0c0r0kaca\"\n\nencrypt(\"burak\") ➞ \"k0r3baca\"\n\nencrypt(\"alpaca\") ➞ \"0c0pl0aca\"</code></pre><h3><span>Notes</span></h3><p><span>All inputs are strings, no uppercases and all output must be strings.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"cryptography",
			"formatting",
			"math"
		],
		"tests": [
			"Test.assertEquals(encrypt(\"karaca\"), \"0c0r0kaca\")",
			"Test.assertEquals(encrypt(\"burak\"), \"k0r3baca\")",
			"Test.assertEquals(encrypt(\"banana\"), \"0n0n0baca\")",
			"Test.assertEquals(encrypt(\"alpaca\"), \"0c0pl0aca\")",
			"Test.assertEquals(encrypt(\"hello\"), \"2ll1haca\")"
		],
		"starterFn": [
			"1\nfunction encrypt(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ccZBsRp6pX869gyqx"
	},
	{
		"title": "Frequency Distribution",
		"description": "<p><span>Create a function that returns the frequency distribution of an array. This function should return an object, where the keys are the unique elements and the values are the frequency in which those elements occur.</span></p><h3><span>Examples</span></h3><pre><code>getFrequencies([\"A\", \"B\", \"A\", \"A\", \"A\"]) ➞ { A: 4, B: 1 }\n\ngetFrequencies([1, 2, 3, 3, 2]) ➞ { \"1\": 1, \"2\": 2, \"3\": 2 }\n\ngetFrequencies([true, false, true, false, false]) ➞ { true: 2, false: 3 }\n\ngetFrequencies([]) ➞ {}</code></pre><h3><span>Notes</span></h3><ul><li><span>If given an empty array, return an empty object (see example #4).</span></li><li><span>The object should be in the same order as in the input array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(getFrequencies(['A', 'A']), {A: 2})",
			"Test.assertSimilar(getFrequencies(['A', 'B', 'A', 'A', 'A']), {A: 4, B: 1})",
			"Test.assertSimilar(getFrequencies(['A', 'B', 'C', 'A', 'A']), {A: 3, B: 1, C: 1})",
			"Test.assertSimilar(getFrequencies([true, false, true, false, false]), {'true': 2, 'false': 3})",
			"Test.assertSimilar(getFrequencies([1, 2, 3, 3, 2]), {'1': 1, '2': 2, '3': 2})",
			"Test.assertSimilar(getFrequencies([]), {})"
		],
		"starterFn": [
			"1\nfunction getFrequencies(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uScx6aGXmNu27NYWz"
	},
	{
		"title": "Proper Modulo Operator",
		"description": "<p><span>In JavaScript, the modulo operator is very bad. For example, </span><code>-13 % 64 = -13</code><span>, when the actual answer is 51. Create a function to fix this. It should also work for positive numbers.</span></p><h3><span>Examples</span></h3><pre><code>mod(-13, 64) ➞ 51\n\nmod(50, 25) ➞ 0\n\nmod(-6, 3) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>All test cases contain valid numbers.</span></p>",
		"publishedBy": "VFDan",
		"publishedByUrl": "https://edabit.com/user/jbH5tDYmskk7BpqtL",
		"language": "JavaScript",
		"tags": [
			"bugs",
			"math"
		],
		"tests": [
			"Test.assertEquals(mod(-13, 64), 51);",
			"Test.assertEquals(mod(50, 25), 0);",
			"Test.assertEquals(mod(-6, 3), 0);",
			"Test.assertNotEquals(mod(-45, 2), -1);"
		],
		"starterFn": [
			"1\n// Should return m mod n",
			"2\nfunction mod(m, n) {",
			"3\n  ",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/2eiEBoMFJZhE2SjHz"
	},
	{
		"title": "Filter Primes from an Array",
		"description": "<p><span>Create a function that takes an array and returns a new array containing only prime numbers.</span></p><h3><span>Examples</span></h3><pre><code>filterPrimes([7, 9, 3, 9, 10, 11, 27]) ➞ [7, 3, 11]\n\nfilterPrimes([10007, 1009, 1007, 27, 147, 77, 1001, 70]) ➞ [10007, 1009]\n\nfilterPrimes([1009, 10, 10, 10, 3, 33, 9, 4, 1, 61, 63, 69, 1087, 1091, 1093, 1097]) ➞ [1009, 3, 61, 1087, 1091, 1093, 1097]</code></pre><h3><span>Notes</span></h3><ul><li><span>New array must maintain the order of primes as they first appear in the original array.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for help.</span></li></ul>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(filterPrimes([7, 9, 3, 9, 10, 11, 27]), [7, 3, 11])",
			"Test.assertSimilar(filterPrimes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]), [2, 3, 5, 7, 11, 13, 17, 19, 23])",
			"Test.assertSimilar(filterPrimes([1009, 10, 10, 10, 3, 33, 9, 4, 1, 61, 63, 69, 1087, 1091, 1093, 1097]), [1009, 3, 61, 1087, 1091, 1093, 1097])",
			"Test.assertSimilar(filterPrimes([10007, 1009, 1007, 27, 147, 77, 1001, 70]), [10007, 1009])"
		],
		"starterFn": [
			"1\nfunction filterPrimes(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sPdaYSjgqpupa2B7q"
	},
	{
		"title": "Positives and Negatives",
		"description": "<p><span>Create a function which validates whether a given array </span><strong><span>alternates</span></strong><span> between </span><em><span>positive</span></em><span> and </span><em><span>negative</span></em><span> numbers.</span></p><h3><span>Examples</span></h3><pre><code>alternatePosNeg([3, -2, 5, -5, 2, -8]) ➞ true\n\nalternatePosNeg([-6, 1, -1, 4, -3]) ➞ true\n\nalternatePosNeg([4, 4, -2, 3, -6, 10]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>It doesn't matter if an array begins/ends with a positive or negative, as long as it alternates.</span></li><li><span>If an array contains 0, return </span><code>false</code><span> (as it is neither positive nor negative).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(alternatePosNeg([3, -2, 5, -5, 2, -8]), true)",
			"Test.assertEquals(alternatePosNeg([-6, 1, -1, 4, -3]), true)",
			"Test.assertEquals(alternatePosNeg([4, 4, -2, 3, -6, 10]), false)",
			"Test.assertEquals(alternatePosNeg([34, 49, 33, 17, -47]), false)",
			"Test.assertEquals(alternatePosNeg([22]), true)",
			"Test.assertEquals(alternatePosNeg([41, 11, 37, -30, -29, 39, -45, 15, -41, 7]), false)",
			"Test.assertEquals(alternatePosNeg([3, -7, 15, 18]), false)",
			"Test.assertEquals(alternatePosNeg([40]), true)",
			"Test.assertEquals(alternatePosNeg([40, 27, -44, -13, -31]), false)",
			"Test.assertEquals(alternatePosNeg([40, 50, -7, 45, -7]), false)",
			"Test.assertEquals(alternatePosNeg([-23, -16, -9, -15, 16]), false)",
			"Test.assertEquals(alternatePosNeg([0, 0, 0, 0]), false)",
			"Test.assertEquals(alternatePosNeg([50, 28, -5, 25, -14, -2, 20, 26, -32]), false)",
			"Test.assertEquals(alternatePosNeg([24, -10]), true)",
			"Test.assertEquals(alternatePosNeg([-2, 4, 16, -15, 24, 2]), false)",
			"Test.assertEquals(alternatePosNeg([19, -12, -37, 44, -43, 44, 47]), false)",
			"Test.assertEquals(alternatePosNeg([-21, 42, -11, 27, -16, 36, 37]), false)",
			"Test.assertEquals(alternatePosNeg([30]), true)",
			"Test.assertEquals(alternatePosNeg([3, -7, 15, -18]), true)",
			"Test.assertEquals(alternatePosNeg([9, -4, 8, -16]), true)",
			"Test.assertEquals(alternatePosNeg([3, -7, 15, -18, 0]), false)",
			"Test.assertEquals(alternatePosNeg([0]), false)",
			"Test.assertEquals(alternatePosNeg([0, 2, -5, 8, -12]), false)"
		],
		"starterFn": [
			"1\nfunction alternatePosNeg(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SZnDZpQeBwhGXMBPW"
	},
	{
		"title": "Alternate Sort",
		"description": "<p><span>Write a function that sorts a given array in an alternative fashion. The result should be a array sorted in ascending order (number then letter). Array will contain equal amounts of integer numbers and single characters.</span></p><h3><span>Examples</span></h3><pre><code>alternateSort([\"a\", \"b\", \"c\", 1, 2, 3]) ➞ [1, \"a\", 2, \"b\", 3, \"c\"]\n\nalternateSort([-2, \"f\", \"A\", 0, 100, \"z\"]) ➞ [-2, \"A\", 0, \"f\", 100, \"z\"]\n\nalternateSort([\"X\", 15, 12, 18, \"Y\", \"Z\"]) ➞ [12, \"X\", 15, \"Y\", 18, \"Z\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(alternateSort([5, 1, \"a\", \"c\", 2, 1, 3, \"c\", \"b\", \"e\"]), [1, \"a\", 1, \"b\", 2, \"c\", 3, \"c\", 5, \"e\"])",
			"Test.assertSimilar(alternateSort([-2, \"f\", \"A\", 0, 100, \"z\"]), [-2, \"A\", 0, \"f\", 100, \"z\"])",
			"Test.assertSimilar(alternateSort([\"a\", \"b\", \"c\", 1, 2, 3]), [1, \"a\", 2, \"b\", 3, \"c\"])",
			"Test.assertSimilar(alternateSort([\"e\", \"d\", \"a\", \"b\", \"i\", \"t\", 1, 10, 100, 2, 20, 200]), [1, \"a\", 2, \"b\", 10, \"d\", 20, \"e\", 100, \"i\", 200, \"t\"])",
			"Test.assertSimilar(alternateSort([\"X\", 15, 12, 18, \"Y\", \"Z\"]), [12, \"X\", 15, \"Y\", 18, \"Z\"])",
			"// The problem was originally published by skrzyniarzp.(Python)"
		],
		"starterFn": [
			"1\nfunction alternateSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kqvtyGZPNPvBbkGg3"
	},
	{
		"title": "RegEx: Character Classes VIII ⁠- \\d",
		"description": "<p><span>You can think of character classes as characters with special meaning. They are recognized as special when you place the </span><code>\\</code><span> before the character.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><p><span>Extract the addresses from this string:</span></p><pre><code>const str = \"123 Redding Dr. 1560 Knoxville Ave. 3030 Norwalk Dr. 5 South St.\"\n\n// [\"123 Redding Dr.\", \"1560 Knoxville Ave\", \"3030 Norwalk Dr.\", \"5 South St.\"]</code></pre><p><span>Write the </span><strong><span>regular expression</span></strong><span> that matches all street addresses. All street addresses begin with a number. Use the character class </span><code>\\d</code><span> in your expression.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on character classes if you're stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"const str = \"123 Redding Dr. 1560 Knoxville Ave. 3030 Norwalk Dr. 5 South St.\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\\\d/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"console.log(testExp(str))",
			"​",
			"Test.assertNotEquals(testExp(str), \"required\", \"You are required to use a \\d character class in your expression.\")",
			"Test.assertSimilar(testExp(str), [\"123 Redding Dr.\", \"1560 Knoxville Ave.\", \"3030 Norwalk Dr.\", \"5 South St.\"])"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you expression here */g"
		],
		"url": "https://edabit.com/challenge/RkjYq6Bnr24ucHtay"
	},
	{
		"title": "Parseltongue",
		"description": "<p><span>Hermione has come up with a precise formula for determining whether or not a phrase was ssspoken by a parssseltongue (</span><em><span>a reference from the Harry Potter universe; the language of ssserpents and those who can converse with them</span></em><span>).</span></p><p><span>Each word in a sssentence must contain either:</span></p><ol><li><span>At least 2 instances of the letter \"s\" (i.e. must be together </span><code>ss</code><span>), or...</span></li><li><span>Zero instances of the letter \"s\".</span></li></ol><h3><span>Examples</span></h3><pre><code>isParselTongue(\"Sshe ssselects to eat that apple. \") ➞ true\n\nisParselTongue(\"She ssselects to eat that apple. \") ➞ false\n// \"She\" only contains one \"s\".\n\nisParselTongue(\"Beatrice samples lemonade\") ➞ false\n// While \"samples\" has 2 instances of \"s\", they are not together.\n\nisParselTongue(\"You ssseldom sssspeak sso boldly, ssso messmerizingly.\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>There should be no words with only one instance of the letter \"s\" (see example #2).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isParselTongue(\"Sshe ssselects to eat that apple.\"), true)",
			"Test.assertEquals(isParselTongue(\"She ssselects to eat that apple.\"), false)",
			"Test.assertEquals(isParselTongue(\"You ssseldom sssspeak sso boldly, ssso messmerizingly.\"), true)",
			"Test.assertEquals(isParselTongue(\"Steve likes to eat pancakes\"), false)",
			"Test.assertEquals(isParselTongue(\"Sssteve likess to eat pancakess\"), true)",
			"Test.assertEquals(isParselTongue(\"Beatrice samples lemonade\"), false)",
			"Test.assertEquals(isParselTongue(\"Beatrice enjoysss lemonade\"), true)"
		],
		"starterFn": [
			"1\nfunction isParselTongue(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5Jeq8Cf59KnLLg4Go"
	},
	{
		"title": "Count Number of Identical Arrays",
		"description": "<p><span>Create a function that takes four arrays as arguments and returns a count of the total number of identical arrays.</span></p><h3><span>Examples</span></h3><pre><code>countIdenticalArrays([0, 0, 0], [0, 1, 2], [0, 0, 0], [2, 1, 0]) ➞ 2\n\ncountIdenticalArrays([0, 1, 0], [0, 1, 2], [0, 2, 0], [2, 1, 0]) ➞ 0\n\ncountIdenticalArrays([0, 1, 2], [0, 1, 2], [0, 1, 2], [2, 1, 0]) ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't forget to </span><code>return</code><span> the result.</span></li><li><span>If you get stuck on a challenge, find help in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>If you're really stuck, unlock solutions in the </span><strong><span>Solutions</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays"
		],
		"tests": [
			"Test.assertEquals(countIdenticalArrays([0, 0, 0], [0, 1, 2], [0, 0, 0], [2, 1, 0]), 2)",
			"Test.assertEquals(countIdenticalArrays([0, 1, 0], [0, 1, 2], [0, 2, 0], [2, 1, 0]), 0)",
			"Test.assertEquals(countIdenticalArrays([0, 1, 2], [0, 1, 2], [0, 1, 2], [2, 1, 0]), 3)"
		],
		"starterFn": [
			"1\nfunction countIdenticalArrays(arr1, arr2, arr3, arr4) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/adJw7Rq3dnDGSZkX5"
	},
	{
		"title": "Power Ranger",
		"description": "<p><span>Create a function that takes in </span><strong><span>n</span></strong><span>,  </span><strong><span>a</span></strong><span>, </span><strong><span>b</span></strong><span> and returns the number of values raised to the </span><strong><span>nth</span></strong><span> power that lie in the range </span><code>[a, b]</code><span>, </span><strong><span>inclusive</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>powerRanger(2, 49, 65) ➞ 2\n// 2 squares (n^2) lie between 49 and 65, 49 (7^2) and 64 (8^2)\n\npowerRanger(3, 1, 27) ➞ 3\n// 3 cubes (n^3) lie between 1 and 27, 1 (1^3), 8 (2^3) and 27 (3^3)\n\npowerRanger(10, 1, 5) ➞ 1\n// 1 value raised to the 10th power lies between 1 and 5, 1 (1^10)\n\npowerRanger(5, 31, 33) ➞ 1\n\npowerRanger(4, 250, 1300) ➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember that the range is inclusive.</span></li><li><strong><span>a</span></strong><span> &lt; </span><strong><span>b</span></strong><span> will always be true.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(powerRanger(5, 31, 33), 1)",
			"Test.assertEquals(powerRanger(4, 250, 1300), 3)",
			"Test.assertEquals(powerRanger(2, 49, 65), 2)",
			"Test.assertEquals(powerRanger(3, 1, 27), 3)",
			"Test.assertEquals(powerRanger(10, 1, 5), 1)",
			"Test.assertEquals(powerRanger(1, 1, 5), 5)",
			"Test.assertEquals(powerRanger(2, 1, 100), 10)"
		],
		"starterFn": [
			"1\nfunction powerRanger(power, min, max) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Rr3TMAJvNiA4YDpB4"
	},
	{
		"title": "Circular Shift",
		"description": "<p><span>Write a function that takes two arrays (</span><code>arr1</code><span> and </span><code>arr2</code><span>) and an int </span><code>n</code><span>, and returns </span><code>true</code><span> if the second array is equal to the first array shifted by </span><code>n</code><span> positions. Otherwise, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>circularShift([1, 2, 3, 4], [3, 4, 1, 2], 2) ➞ true\n\ncircularShift([1, 1], [1, 1], 6) ➞ true\n\ncircularShift([0, 1, 2, 3, 4, 5], [3, 4, 5, 2, 1, 0], 3) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The two arrays will be of the same length.</span></li><li><code>n</code><span> can be a negative value.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(circularShift(",
			"  [1, 2, 3, 4],",
			"  [3, 4, 1, 2],",
			"  2",
			"), true)",
			"​",
			"Test.assertSimilar(circularShift(",
			"  [1, 1],",
			"  [1, 1],",
			"  6",
			"), true)",
			"​",
			"Test.assertSimilar(circularShift(",
			"  [0, 1, 2, 3, 4, 5],",
			"  [3, 4, 5, 2, 1, 0],",
			"  3",
			"), false)",
			"​",
			"Test.assertSimilar(circularShift(",
			"  [0, 1, 2, 3],",
			"  [1, 2, 3, 1],",
			"  1",
			"), false)",
			"​",
			"Test.assertSimilar(circularShift(",
			"  Array.from({length:32}),"
		],
		"starterFn": [
			"1\nfunction circularShift(arr1, arr2, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JBXaZsweHvB4qkksJ"
	},
	{
		"title": "How Many Unique Styles?",
		"description": "<p><span>There are many different styles of music and many albums exhibit multiple styles. Create a function that takes an </span><strong><span>array</span></strong><span> of musical styles from albums and returns how many styles are </span><strong><span>unique</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>uniqueStyles([\n  \"Dub, Dancehall\",\n  \"Industrial, Heavy Metal\",\n  \"Techno, Dubstep\",\n  \"Synth-pop, Euro-Disco\",\n  \"Industrial, Techno, Minimal\"\n]) ➞ 9\n\nuniqueStyles([\n  \"Soul\",\n  \"House, Folk\",\n  \"Trance, Downtempo, Big Beat, House\",\n  \"Deep House\",\n  \"Soul\"\n]) ➞ 7</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "MeanBoyCousin",
		"publishedByUrl": "https://edabit.com/user/sW78rbapvsS3AnuJe",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"loops"
		],
		"tests": [
			"Test.assertEquals(uniqueStyles([",
			"  \"Dub,Dancehall\",",
			"  \"Industrial,Heavy Metal\",",
			"  \"Techno,Dubstep\",",
			"  \"Synth-pop,Euro-Disco\",",
			"  \"Industrial,Techno,Minimal\"",
			"]), 9)",
			"​",
			"Test.assertEquals(uniqueStyles([",
			"  \"Soul\",",
			"  \"House,Folk\",",
			"  \"Trance,Downtempo,Big Beat,House\",",
			"  \"Deep House\",",
			"  \"Soul\"",
			"]), 7)",
			"​",
			"Test.assertEquals(uniqueStyles([",
			"  \"Black Metal,Avantgarde\",",
			"  \"Funk\",",
			"  \"Deep House,House\",",
			"  \"Big Band\",",
			"  \"Punk\"",
			"]), 7)",
			"​",
			"Test.assertEquals(uniqueStyles([",
			"  \"Funk\","
		],
		"starterFn": [
			"1\nfunction uniqueStyles(albums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XcfmvhpRp4t3tQWG2"
	},
	{
		"title": "Unmix My Strings",
		"description": "<p><em><span>lPaeesh le pemu mnxit ehess rtnisg!</span></em><span> Oh, sorry, that was supposed to say: </span><em><span>Please help me unmix these strings!</span></em></p><p><span>Somehow my strings have all become mixed up; every pair of characters has been swapped. Help me undo this so I can understand my strings again.</span></p><h3><span>Examples</span></h3><pre><code>unmix(\"123456\") ➞ \"214365\"\n\nunmix(\"hTsii  s aimex dpus rtni.g\") ➞ \"This is a mixed up string.\"\n\nunmix(\"badce\") ➞ \"abcde\"</code></pre><h3><span>Notes</span></h3><p><span>The length of a string can be odd — in this case the last character is not altered (as there's nothing to swap it with).</span></p>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(unmix('123456'), '214365')",
			"Test.assertEquals(unmix('hTsii  s aimex dpus rtni.g'),'This is a mixed up string.')",
			"Test.assertEquals(unmix('badce'),'abcde')",
			"Test.assertEquals(unmix(' Imaf eeilgna l tilt eidzz!y'),'I am feeling a little dizzy!')",
			"Test.assertEquals(unmix(''), '', 'Should work with empty strings as well.')"
		],
		"starterFn": [
			"1\nfunction unmix(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JCs8xAksBjF2M6kjf"
	},
	{
		"title": "Recomposing Strings",
		"description": "<p><span>In this challenge, the goal is recomposing scrambled strings made of two or more words.</span></p><p><span>Every string has to be reversed not in its totality, but by vowels or consonants clusters in the order they are found; after splitting the string in groups, and reversing every group with more than a letter, you'll obtain the correct sequence:</span></p><pre><code>String = \"KiKdaola\"\n\nSeparation vowels/consonants = K  i  Kd  ao  l  a\n\nReversing the groups = K  i  dK  oa  l  a\n\nNew string = KidKoala</code></pre><p><span>Now, you have to insert a space between the words. A word starts with a capital letter:</span></p><pre><code>String = \"KidKoala\"\n\nResult = \"Kid Koala\"</code></pre><p><span>Given a </span><code>string</code><span>, implement a function that returns, in turn, a new correct string, following the above instructions.</span></p><h3><span>Examples</span></h3><pre><code>recompose(\"KiKdaola\") ➞ \"Kid Koala\"\n\nrecompose(\"BaosdrOCfanada\") ➞ \"Boards Of Canada\"\n// B  ao  sdr  O  Cf  a  n  a  d  a\n// B  oa  rds  O  fC  a  n  a  d  a\n\nrecompose(\"hCemicarBlohtesr\") ➞ \"Chemical Brothers\"\n// hC  e  m  i  c  a  rBl  o  ht  e  sr\n// Ch  e  m  i  c  a  lBr  o  th  e  rs</code></pre><h3><span>Notes</span></h3><ul><li><span>Every given string will be valid, containing only letters and at least two words (identified by the capital letters).</span></li><li><span>Remember to reverse the clusters of letters and not the entire string.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(recompose(\"KiKdaola\"), \"Kid Koala\", \"Example in Instructions\")",
			"Test.assertEquals(recompose(\"BaosdrOCfanada\"), \"Boards Of Canada\", \"Example #2\")",
			"Test.assertEquals(recompose(\"hCemicarBlohtesr\"), \"Chemical Brothers\", \"Example #3\")",
			"Test.assertEquals(recompose(\"MuosOeMnasr\"), \"Mouse On Mars\")",
			"Test.assertEquals(recompose(\"AhpewTxin\"), \"Aphex Twin\")",
			"Test.assertEquals(recompose(\"MassivAettakc\"), \"Massive Attack\")",
			"Test.assertEquals(recompose(\"DeosItOffeYdnuoYaeh\"), \"Does It Offend You Yeah\")"
		],
		"starterFn": [
			"1\nfunction recompose(string) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nLRGjd2LeAECKykZz"
	},
	{
		"title": "The Recamán Sequence",
		"description": "<p><span>The Recamán Sequence is a numeric sequence that starts always with 0. The position of a positive integer in the sequence, or Recamán Index, can be established with the following algorithm:</span></p><ul><li><span>For every number to find, two variables are considered: the value of the last element of the sequence (last element from now on), and the actual sequence length (length from now on).</span></li><li><span>If the subtraction of the length from the last element returns a number  </span><strong><span>greater than 0 and not already present in the sequence</span></strong><span>, it is added to the sequence.</span></li><li><span>When the conditions of the above statement are not met, will be added always the sum of the last element plus the length (even if it is a number already present in the sequence).</span></li><li><span>Repeat until the number of interest is found.</span></li></ul><p><span>Look at example below for the steps to do for to establish the Recamán Index of number 2:</span></p><pre><code>Sequence = [0]\n\nLast - Length = 0 - 1 = -1 (lower than zero)\nLast + Length = 0 + 1 = 1\n\nSequence = [0, 1]\n\nLast - Length = 1 - 2 = -1 (lower than 0)\nLast + Length = 1 + 2 = 3\n\nSequence = [0, 1, 3]\n\nLast - Length = 3 - 3 = 0 (already present in sequence)\nLast + Length = 3 + 3 = 6\n\nSequence = [0, 1, 3, 6]\n\nLast - Length = 6 - 4 = 2 (greater than 0 and not already in sequence)\n\nSequence = [0, 1, 3, 6, 2]\n\n// The Recaman Index of 2 is: 4</code></pre><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns its Recamán Index.</span></p><h3><span>Examples</span></h3><pre><code>recamanIndex(2) ➞ 4\n\nrecamanIndex(3) ➞ 2\n\nrecamanIndex(7) ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>The sequence starts always with 0.</span></li><li><span>The step with the subtraction Last Element - Sequence Length (verifying that is not already present in the sequence) has the precedence over the second step.</span></li><li><span>Remember: if the number to add is the result of a subtraction it can't be already in the sequence (</span><em><span>first step</span></em><span>), if it is the result of an addition it can be already present (</span><em><span>second step</span></em><span>).</span></li><li><span>Curiosity: the first number to repeat in the sequence is 42...</span></li><li><span>Curiosity: the first number with a </span><em><span>BIG</span></em><span> delay in the sequence is 19.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(recamanIndex(2), 4, \"Example explained in Instructions\")",
			"Test.assertEquals(recamanIndex(3), 2)",
			"Test.assertEquals(recamanIndex(7), 5)",
			"Test.assertEquals(recamanIndex(20), 7)",
			"Test.assertEquals(recamanIndex(56), 204)",
			"Test.assertEquals(recamanIndex(100), 387)",
			"Test.assertEquals(recamanIndex(666), 2292)",
			"Test.assertEquals(recamanIndex(1000), 4419)",
			"Test.assertEquals(recamanIndex(10000), 7215)"
		],
		"starterFn": [
			"1\nfunction recamanIndex(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jDtwBwYhaMD2HftdX"
	},
	{
		"title": "Sum of Missing Numbers",
		"description": "<p><span>Create a function that returns the sum of missing numbers.</span></p><h3><span>Examples</span></h3><pre><code>sumMissingNumbers([1, 3, 5, 7, 10]) ➞ 29\n// 2 + 4 + 6 + 8 + 9\n\nsumMissingNumbers([10, 7, 5, 3, 1]) ➞ 29\n\nsumMissingNumbers([10, 20, 30, 40, 50, 60]) ➞ 1575</code></pre><h3><span>Notes</span></h3><p><span>The minimum and maximum value of the given array are the inclusive bounds of the numeric range to consider when searching for missing numbers.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(sumMissingNumbers([1, 3, 5, 7, 10]), 29)",
			"Test.assertEquals(sumMissingNumbers([10, 20, 30, 40, 50, 60]), 1575)",
			"Test.assertEquals(sumMissingNumbers([7, 3, 8, 5, 12]), 40)",
			"Test.assertEquals(sumMissingNumbers([99, 2, 45, 4, 17]), 4782)",
			"Test.assertEquals(sumMissingNumbers([10, 7, 5, 3, 1]), 29)",
			"Test.assertEquals(sumMissingNumbers([7, 8, 9, 10]), 0)"
		],
		"starterFn": [
			"1\nfunction sumMissingNumbers(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8a2J9T4FM5fgSwn4w"
	},
	{
		"title": "Message Screen Glitch",
		"description": "<p><span>Your open-plan office building has a scrolling message screen on the far wall. One day, you notice that the messages are starting to glitch. Some of the lower case letters are being replaced by their position in the alphabet (\"a\" = 1, \"b\" = 2, ..., \"z\" = 26). Given the glitched text, return the corrected message.</span></p><h3><span>Examples</span></h3><pre><code>messageGlitch(\"T21e19d1y's m1r11e20i14g m5e20i14g w9l12 14o23 2e i14 20h5 3o14f5r5n3e r15o13.\")\n➞ \"Tuesday's marketing meeting will now be in the conference room.\"\n\nmessageGlitch(\"A s9l22e18 Pr9u19 9s d15u2l5-16a18k5d o21t19i4e. Wi12l t8e o23n5r p12e1s5 13o22e i20.\")\n➞ \"A silver Prius is double-parked outside. Will the owner please move it.\"\n\nmessageGlitch(\"P12e1s5 4o14'20 13i3r15w1v5 6i19h i14 20h5 20h9r4 6l15o18 11i20c8e14!\")\n➞ \"Please don't microwave fish in the third floor kitchen!\"</code></pre><h3><span>Notes</span></h3><p><span>Each group of numbers will always refer to one letter only (e.g. 14 = \"n\", not \"ad\").</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(messageGlitch(\"T8e c1f5 23i12l b5 3l15s9n7 5a18l25 15n T8u18s4a25. L1s20 6o15d o18d5r19 1t n15o14.\"), \"The cafe will be closing early on Thursday. Last food orders at noon.\")",
			"Test.assertEquals(messageGlitch(\"H5a22y s14o23 6o18e3a19t f15r t8i19 5v5n9n7. B5 3a18e6u12 15n t8e r15a4s!\"), \"Heavy snow forecast for this evening. Be careful on the roads!\")",
			"Test.assertEquals(messageGlitch(\"T8r5e n5w c1r p1r11i14g p1s19e19 1r5 1v1i12a2l5. S16e1k t15 19e3u18i20y i6 9n20e18e19t5d.\"), \"Three new car parking passes are available. Speak to security if interested.\")",
			"Test.assertEquals(messageGlitch(\"V15l21n20e5r19 18e17u9r5d t15 15r7a14i19e t8e C8r9s20m1s p1r20y.\"), \"Volunteers required to organise the Christmas party.\")",
			"Test.assertEquals(messageGlitch(\"A b12a3k w1l12e20 8a19 2e5n f15u14d o21t19i4e. Pl5a19e c15n20a3t HR 20o r5c12a9m.\"), \"A black wallet has been found outside. Please contact HR to reclaim.\")",
			"Test.assertEquals(messageGlitch(\"C12i5n20s w9l12 2e v9s9t9n7 20h5 6i6t8 6l15o18 20h9s a6t5r14o15n. Re13o22e a14y c15n6i4e14t9a12 4o3u13e14t19 6r15m v9e23.\"), \"Clients will be visiting the fifth floor this afternoon. Remove any confidential documents from view.\")",
			"Test.assertEquals(messageGlitch(\"T8e18e a18e l5f20-15v5r d15u7h14u20s a20 18e3e16t9o14. F9r19t-c15m5, f9r19t-s5r22e.\"), \"There are left-over doughnuts at reception. First-come, first-serve.\")",
			"Test.assertEquals(messageGlitch(\"R5m5m2e18 20o w1s8 1n25 13u7s l5f20 9n t8e k9t3h5n19.\"), \"Remember to wash any mugs left in the kitchens.\")",
			"Test.assertEquals(messageGlitch(\"T8e w5e11l25 6i18e a12a18m t5s20 23i12l n15w b5 15n W5d14e19d1y m15r14i14g19.\"), \"The weekly fire alarm test will now be on Wednesday mornings.\")",
			"Test.assertEquals(messageGlitch(\"N5w p18o4u3t l1u14c8 14e24t m15n20h! De20a9l19 20o f15l12o23.\"), \"New product launch next month! Details to follow.\")",
			"Test.assertEquals(messageGlitch(\"S5c15n4 18e13i14d5r: 4o14'20 13i3r15w1v5 6i19h i14 20h5 20h9r4 6l15o18 11i20c8e14. S5r9o21s12y, 13y c21b9c12e i19 18i7h20 14e24t d15o18.\"), \"Second reminder: don't microwave fish in the third floor kitchen. Seriously, my cubicle is right next door.\")",
			"Test.assertEquals(messageGlitch(\"N5w b21s9n5s19 3a18d19 1r5 1v1i12a2l5. P12e1s5 3o14t1c20 25o21r l9n5 13a14a7e18 6o18 4e20a9l19.\"), \"New business cards are available. Please contact your line manager for details.\")",
			"Test.assertEquals(messageGlitch(\"D21e t15 20h5 9n3i4e14t l1s20 13o14t8, d18e19s-d15w14 Fr9d1y h1s b5e14 20e13p15r1r9l25 3a14c5l12e4.\"), \"Due to the incident last month, dress-down Friday has been temporarily cancelled.\")",
			"Test.assertEquals(messageGlitch(\"T8e s5c15n4 6l15o18 16h15t15c15p9e18 9s o21t o6 19e18v9c5 (a7a9n). A14 5n7i14e5r h1s b5e14 3a12l5d.\"), \"The second floor photocopier is out of service (again). An engineer has been called.\")",
			"Test.assertEquals(messageGlitch(\"A f18i5n4l25 18e13i14d5r t8a20 16h15t15c15p25i14g a14y n15n-p1p5r i20e13s i19 19t18i3t12y p18o8i2i20e4.\"), \"A friendly reminder that photocopying any non-paper items is strictly prohibited.\")",
			"Test.assertEquals(messageGlitch(\"I n15w k14o23 20h5 16e18s15n t8a20'19 2e5n m9c18o23a22i14g t8e f9s8. I'l12 8u14t y15u d15w14 1n4 5n4 25o21 9f i20 8a16p5n19 1g1i14. I r5t9r5 14e24t w5e11, s15 I'22e n15t8i14g t15 12o19e a14d a12l t8e t9m5 9n t8e w15r12d.\"), \"I now know the person that's been microwaving the fish. I'll hunt you down and end you if it happens again. I retire next week, so I've nothing to lose and all the time in the world.\")"
		],
		"starterFn": [
			"1\nfunction messageGlitch(txt) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eqAbW3AJz7de6gTjr"
	},
	{
		"title": "Apocalyptic Numbers",
		"description": "<p><span>A number </span><code>n</code><span> is </span><strong><span>apocalyptic</span></strong><span> if 2^n contains a string of 3 consecutive 6s (666 being the presumptive \"number of the beast\").</span></p><p><span>Create a function that takes a number </span><code>n</code><span> as input. If the number is apocalyptic, find the index of 666 in 2^n, and return </span><code>\"Repent! X days until the Apocalypse!\"</code><span> (X being the index). If not, return </span><code>\"Crisis averted. Resume sinning.\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>apocalyptic(109) ➞ \"Crisis averted. Resume sinning.\"\n\napocalyptic(157) ➞ \"Repent! 9 days until the Apocalypse!\"\n// 2^157 -&gt; 182687704666362864775460604089535377456991567872\n// 666 at 10th position (index 9)\n\napocalyptic(175) ➞ \"Crisis averted. Resume sinning.\"\n\napocalyptic(220) ➞ \"Repent! 6 days until the Apocalypse!\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Kavin Umasankar",
		"publishedByUrl": "https://edabit.com/user/td7qPZ7Lv4pEWT2Ya",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(apocalyptic(157), \"Repent! 9 days until the Apocalypse!\")",
			"Test.assertEquals(apocalyptic(175), \"Crisis averted. Resume sinning.\")",
			"Test.assertEquals(apocalyptic(220), \"Repent! 6 days until the Apocalypse!\")",
			"Test.assertEquals(apocalyptic(333), \"Crisis averted. Resume sinning.\")",
			"Test.assertEquals(apocalyptic(499), \"Repent! 138 days until the Apocalypse!\")",
			"Test.assertEquals(apocalyptic(666), \"Repent! 49 days until the Apocalypse!\")",
			"Test.assertEquals(apocalyptic(1003), \"Crisis averted. Resume sinning.\")"
		],
		"starterFn": [
			"1\nfunction apocalyptic(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dNRax8eQSxov984Xx"
	},
	{
		"title": "Phone Number Word Decoder",
		"description": "<p><span>Create a program that converts a phone number with letters to one with only numbers.</span></p><table><thead><tr><th><span>Number</span></th><th><span>Letter</span></th></tr></thead><tbody><tr><td><span>0</span></td><td><span>none</span></td></tr><tr><td><span>1</span></td><td><span>none</span></td></tr><tr><td><span>2</span></td><td><span>ABC</span></td></tr><tr><td><span>3</span></td><td><span>DEF</span></td></tr><tr><td><span>4</span></td><td><span>GHI</span></td></tr><tr><td><span>5</span></td><td><span>JKL</span></td></tr><tr><td><span>6</span></td><td><span>MNO</span></td></tr><tr><td><span>7</span></td><td><span>PQRS</span></td></tr><tr><td><span>8</span></td><td><span>TUV</span></td></tr><tr><td><span>9</span></td><td><span>WXYZ</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>textToNum(\"123-647-EYES\") ➞ \"123-647-3937\"\n\ntextToNum(\"(325)444-TEST\") ➞ \"(325)444-8378\"\n\ntextToNum(\"653-TRY-THIS\") ➞ \"653-879-8447\"\n\ntextToNum(\"435-224-7613\") ➞ \"435-224-7613\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs will be formatted as a string representing a proper phone number in the format </span><code>XXX-XXX-XXXX</code><span> or </span><code>(XXX)XXX-XXXX</code><span>, using numbers and capital letters.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on telephone keypads.</span></li></ul>",
		"publishedBy": "shahednasser",
		"publishedByUrl": "https://edabit.com/user/qfZTGo3mgRsbyKka7",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"Test.assertEquals(textToNum(\"123-647-EYES\"), \"123-647-3937\")",
			"Test.assertEquals(textToNum(\"(325)444-TEST\"), \"(325)444-8378\")",
			"Test.assertEquals(textToNum(\"653-TRY-THIS\"), \"653-879-8447\")",
			"Test.assertEquals(textToNum(\"435-224-7613\"), \"435-224-7613\")",
			"Test.assertEquals(textToNum(\"(33D)ONT-FAIL\"), \"(333)668-3245\")",
			"Test.assertEquals(textToNum(\"(025)445-6741\"), \"(025)445-6741\")"
		],
		"starterFn": [
			"1\nfunction textToNum(phone) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LhMQuGstm7EENosjw"
	},
	{
		"title": "Pentagonal Number",
		"description": "<p><span>Write a function that takes a positive integer and calculates how many dots exist in a pentagonal shape around the center dot on the </span><em><span>Nth</span></em><span> iteration.</span></p><p><span>In the image below you can see the first iteration is only a single dot. On the second, there are 6 dots. On the third, there are 16 dots, and on the fourth there are 31 dots.</span></p><p><img alt=\"alt text\" title=\"Pentagonal Number\" src=\"https://edabit-challenges.s3.amazonaws.com/pentagonal_number.png\"></p><p><span>Return the number of dots that exist in the whole pentagon on the </span><em><span>Nth</span></em><span> iteration.</span></p><h3><span>Examples</span></h3><pre><code>pentagonal(1) ➞ 1\n\npentagonal(2) ➞ 6\n\npentagonal(3) ➞ 16\n\npentagonal(8) ➞ 141</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Вања",
		"publishedByUrl": "https://edabit.com/user/puF7tgr34fjsLXiDT",
		"language": "JavaScript",
		"tags": [
			"logic",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(pentagonal(1), 1)",
			"Test.assertEquals(pentagonal(3), 16)",
			"Test.assertEquals(pentagonal(8), 141)",
			"Test.assertEquals(pentagonal(10), 226)",
			"Test.assertEquals(pentagonal(15), 526)",
			"Test.assertEquals(pentagonal(33), 2641)",
			"Test.assertEquals(pentagonal(43), 4516)",
			"Test.assertEquals(pentagonal(13), 391)",
			"Test.assertEquals(pentagonal(50), 6126)",
			"Test.assertEquals(pentagonal(62), 9456)",
			"Test.assertEquals(pentagonal(21), 1051)"
		],
		"starterFn": [
			"1\nfunction pentagonal(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wmdanmJkaT9waTg3y"
	},
	{
		"title": "How Many \"Prime Numbers\" Are There?",
		"description": "<p><span>Create a function that finds how many prime numbers there are, up to the given integer.</span></p><h3><span>Examples</span></h3><pre><code>primeNumbers(10) ➞ 4\n// 2, 3, 5 and 7\n\nprimeNumbers(20) ➞ 8\n// 2, 3, 5, 7, 11, 13, 17 and 19\n\nprimeNumbers(30) ➞ 10\n// 2, 3, 5, 7, 11, 13, 17, 19, 23 and 29</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "hiroimono",
		"publishedByUrl": "https://edabit.com/user/neNZBuqetyra2TTzr",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"conditions",
			"math"
		],
		"tests": [
			"Test.assertEquals(primeNumbers(20), 8)",
			"Test.assertEquals(primeNumbers(30), 10)",
			"Test.assertEquals(primeNumbers(100), 25)",
			"Test.assertEquals(primeNumbers(200), 46)",
			"Test.assertEquals(primeNumbers(1000), 168)",
			"Test.assertEquals(primeNumbers(-5), 0)",
			"Test.assertEquals(primeNumbers(66), 18)",
			"Test.assertEquals(primeNumbers(133), 32)",
			"Test.assertEquals(primeNumbers(99), 25)"
		],
		"starterFn": [
			"1\nfunction primeNumbers(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aHHyBptSxSfyzbWaX"
	},
	{
		"title": "Building a Staircase",
		"description": "<p><span>Create a function that builds a staircase given the height and the type of building block.</span></p><h3><span>Examples</span></h3><pre><code>buildStaircase(3, \"#\") ➞ [\n  [\"#\", \"_\", \"_\"],\n  [\"#\", \"#\", \"_\"],\n  [\"#\", \"#\", \"#\"]\n]\n\nbuildStaircase(4, \"#\") ➞ [\n  [\"#\", \"_\", \"_\", \"_\"],\n  [\"#\", \"#\", \"_\", \"_\"],\n  [\"#\", \"#\", \"#\", \"_\"],\n  [\"#\", \"#\", \"#\", \"#\"]\n]\n\nbuildStaircase(3, \"A\") ➞ [\n  [\"A\", \"_\", \"_\"],\n  [\"A\", \"A\", \"_\"],\n  [\"A\", \"A\", \"A\"]\n]\n\n// height = 3 and building block = \"A\"\n\nbuildStaircase(4, \"$\") ➞ [\n  [\"$\", \"_\", \"_\", \"_\"],\n  [\"$\", \"$\", \"_\", \"_\"],\n  [\"$\", \"$\", \"$\", \"_\"],\n  [\"$\", \"$\", \"$\", \"$\"]\n]\n\n// height = 4 and building block = \"$\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If the height is 0, return an empty array </span><code>[]</code><span>.</span></li><li><span>See </span><strong><span>Comments</span></strong><span> or </span><strong><span>Resources</span></strong><span> for help.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(buildStaircase(0, '#'), ",
			"[])",
			"​",
			"Test.assertSimilar(buildStaircase(1, '#'), ",
			"[['#']])",
			"​",
			"Test.assertSimilar(buildStaircase(2, '#'), ",
			"[['#', '_'], ",
			"['#', '#']])",
			"​",
			"Test.assertSimilar(buildStaircase(3, '#'), ",
			"[['#', '_', '_'], ",
			"['#', '#', '_'], ",
			"['#', '#', '#']])",
			"​",
			"Test.assertSimilar(buildStaircase(4, '#'), ",
			"[['#', '_', '_', '_'], ",
			"['#', '#', '_', '_'], ",
			"['#', '#', '#', '_'], ",
			"['#', '#', '#', '#']])",
			"​",
			"Test.assertSimilar(buildStaircase(3, 'A'), ",
			"[['A', '_', '_'], ",
			"['A', 'A', '_'], ",
			"['A', 'A', 'A']])",
			"​"
		],
		"starterFn": [
			"1\nfunction buildStaircase(height, block) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7HiitQLp9CQGQNWJr"
	},
	{
		"title": "Get Real Type",
		"description": "<p><span>Create a function that takes a value as an argument and returns the type of this value. You should get the real type of a value (JavaScript </span><code>typeof</code><span> doesn't return the real object type of values and you need to fix that).</span></p><h3><span>Examples</span></h3><pre><code>realType(1) ➞ \"number\"\n\nrealType(\"a\") ➞ \"string\"\n\nrealType(true) ➞ \"boolean\"\n\nrealType([]) ➞ \"array\"\n\nrealType(null) ➞ \"null\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"const values = [[],{},\"\",1,function(){},new RegExp(),true,null,undefined,Date, new Date(),NaN, Infinity,Error, new Error(), new String(), new Number(),0xFF];",
			"const answers = [\"array\",\"object\",\"string\",\"number\",\"function\",\"regexp\",\"boolean\",\"null\",\"undefined\",\"function\",\"date\",\"number\",\"number\",\"function\",\"error\",\"string\",\"number\",\"number\"];",
			"​",
			"for (var i = 0; i < values.length;i++){",
			"  Test.assertEquals(realType(values[i]), answers[i]);",
			"}"
		],
		"starterFn": [
			"1\nfunction realType(value){",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yfRLRFYF8sdr7kRRq"
	},
	{
		"title": "RegEx: Character Classes VIII ⁠— Wildcard .",
		"description": "<p><span>You can think of character classes as characters with special meaning.  They are recognized as special when you place the </span><code>\\</code><span> before the character.  The </span><code>.</code><span> is the only exception.  It requires no </span><code>\\</code><span> and it is a wildcard character.  It matches any character except for line terminators.</span></p><p><span>ES2018 added the s \"dotAll\" flag, which allows the dot to also match line terminators.</span></p><p><span>Here are a list of the characters classes in JavaScript:</span></p><pre><code>., \\cX, \\d, \\D, \\f, \\n, \\r, \\s, \\S, \\t, \\v, \\w, \\W, \\0, \\xhh, \\uhhhh, \\uhhhhh, [\\b]</code></pre><pre><code>const str = \"eta, edu, etc, ele, epa, eye, exe, emf, ete, eon, era\"\n\n// Instead of a string we want an array like this:\n// [\"eta\", \"edu\", \"etc\", \"ele\", \"epa\", \"eye\", \"exe\", \"emf\", \"ete\", \"eon\", \"era\"]\n\n// You could use the split() method but let's try with a regular expression.</code></pre><p><span>Write the regular expression that returns an array of all words. Use the character class </span><code>.</code><span> in your expression.</span></p><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for details on </span><strong><span>character</span></strong><span> classes if you're stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"regex"
		],
		"tests": [
			"const str = \"eta, edu, etc, ele, epa, eye, exe, emf, ete, eon, era\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/[.]/.test(String(REGEXP))) return () => \"required\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"console.log(testExp(str))",
			"​",
			"Test.assertNotEquals(testExp(str), \"required\", \"You are required to use a . character class in your expression.\")",
			"Test.assertSimilar(testExp(str), [\"eta\", \"edu\", \"etc\", \"ele\", \"epa\", \"eye\", \"exe\", \"emf\", \"ete\", \"eon\", \"era\"])"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write you expression here */g"
		],
		"url": "https://edabit.com/challenge/bX8wn3XQ2WTkDDZht"
	},
	{
		"title": "toString Hooking",
		"description": "<p><span>You have one job and one job only, to ruin the day of any unsuspecting victim using the </span><code>toString</code><span> function. Hook the String prototype </span><code>toString</code><span> to instead return a string that is in reverse.</span></p><h3><span>Examples</span></h3><pre><code>(\"Hello World!\").toString() ➞ \"!dlroW olleH\"\n\n(\"My hooking function! :3\").toString() ➞ \"3: !noitcnuf gnikooh yM\"\n\n(\"RaceCar\")toString() ➞ \"raCecaR\"</code></pre><h3><span>Notes</span></h3><p><span>Remember that </span><code>this</code><span> is an object!</span></p>",
		"publishedBy": "MWO",
		"publishedByUrl": "https://edabit.com/user/Tu22KsScr9mykuy8N",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals((\"Hello World!\").toString(), \"!dlroW olleH\")",
			"Test.assertEquals((\"My hooking function! :3\").toString(), \"3: !noitcnuf gnikooh yM\")",
			"Test.assertEquals((\"RaceCar\").toString(), \"raCecaR\")",
			"Test.assertEquals((\"Level\").toString(), \"leveL\")",
			"Test.assertEquals((\"live\").toString(), \"evil\")",
			"Test.assertEquals((\"penut butter\").toString(), \"rettub tunep\")"
		],
		"starterFn": [
			"1\nString.prototype.toString = function() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/P8eaoczqtnNAkm7Gs"
	},
	{
		"title": "RGB to Hex Color Converter",
		"description": "<p><span>Create a function that  converts color in RGB format to Hex format.</span></p><h3><span>Examples</span></h3><pre><code>rgbToHex(\"rgb(0, 128, 192)\") ➞ \"#0080c0\"\n\nrgbToHex(\"rgb(45, 255, 192)\") ➞ \"#2dffc0\"\n\nrgbToHex(\"rgb(0, 0, 0)\") ➞ \"#000000\"</code></pre><h3><span>Notes</span></h3><p><span>The Hex format should be displayed in lowercase.</span></p>",
		"publishedBy": "Halina Balys",
		"publishedByUrl": "https://edabit.com/user/njrwhZgtPbcn9F9nm",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertEquals(rgbToHex(\"rgb(0, 128, 192)\"), \"#0080c0\")",
			"Test.assertEquals(rgbToHex(\"rgb(45, 255, 192)\"), \"#2dffc0\")",
			"Test.assertEquals(rgbToHex(\"rgb(255, 255, 255)\"), \"#ffffff\")",
			"Test.assertEquals(rgbToHex(\"rgb(192, 192, 192)\"), \"#c0c0c0\")",
			"Test.assertEquals(rgbToHex(\"rgb(255, 0, 0)\"), \"#ff0000\")",
			"Test.assertEquals(rgbToHex(\"rgb(0, 0, 255)\"), \"#0000ff\")",
			"Test.assertEquals(rgbToHex(\"rgb(0, 0, 0)\"), \"#000000\")",
			"Test.assertEquals(rgbToHex(\"rgb(11, 12, 13)\"), \"#0b0c0d\")"
		],
		"starterFn": [
			"1\nfunction rgbToHex(col) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dLfz4nn5GYL8cLsGM"
	},
	{
		"title": "No Good Numbers",
		"description": "<p><span>A positive number's population is the number of 1s in its binary representation. An </span><em><span>evil</span></em><span> number has an even numbered population, whereas an </span><em><span>odious</span></em><span> number has an odd numbered population. Moreover, a number is </span><em><span>pernicious</span></em><span> if its population is a prime number.</span></p><p><span>Create a function that takes a number as an argument and returns a sorted array of all its descriptors (\"Evil\", \"Odious\", or \"Pernicious\").</span></p><h3><span>Examples</span></h3><pre><code>howBad(7) ➞ [\"Odious\", \"Pernicious\"]\n// binary = 111\n\nhowBad(17) ➞ [\"Evil\", \"Pernicious\"]\n// binary = 10001\n\nhowBad(23) ➞ [\"Evil\"]\n// binary = 10111</code></pre><h3><span>Notes</span></h3><p><span>Notice how the example \"111\" is shown as a prime but in base-10, \"111\" isn't prime (37 * 3). Convert it back to a \"7\", and it is.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(howBad(7), ['Odious','Pernicious'])",
			"Test.assertSimilar(howBad(97), ['Odious','Pernicious'])",
			"Test.assertSimilar(howBad(66), ['Evil','Pernicious'])",
			"Test.assertSimilar(howBad(77), ['Evil'])",
			"Test.assertSimilar(howBad(128), ['Odious'])",
			"Test.assertSimilar(howBad(666), ['Odious','Pernicious'], \"666 is not evil after all!\")",
			"Test.assertSimilar(howBad(987654321), ['Odious','Pernicious'])",
			"Test.assertSimilar(howBad(98765), ['Evil'])"
		],
		"starterFn": [
			"1\nfunction howBad(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eaf8EaFRPwKNGqwZF"
	},
	{
		"title": "Letter Occurrences Per Word",
		"description": "<p><span>Create a function that takes in a </span><strong><span>sentence</span></strong><span> and a </span><strong><span>character</span></strong><span> to find. Return an object of each word in the sentence, with the count of the specified character as the value.</span></p><h3><span>Examples</span></h3><pre><code>findOccurrences(\"Hello World\", \"o\") ➞ {\n  \"hello\" : 1,\n  \"world\" : 1\n}\n\nfindOccurrences(\"Create a nice JUICY function\", \"c\") ➞  {\n  \"create\" : 1,\n  \"a\" : 0,\n  \"nice\" : 1,\n  \"juicy\" : 1,\n  \"function\" : 1\n}\n\nfindOccurrences(\"An APPLE a day keeps an Archeologist AWAY...\", \"A\") ➞ {\n  \"an\" : 1,\n  \"apple\" : 1,\n  \"a\" : 1,\n  \"day\" : 1,\n  \"keeps\" : 0,\n  \"archeologist\" : 1,\n  \"away...\" : 2\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>The function shouldn't be case sensitive.</span></li><li><span>Words in the dictionary should be in lowercase.</span></li><li><span>You may be required to find punctuation.</span></li><li><span>Duplicate words should be ignored (see example </span><span>#</span><span>3 for the word \"an\").</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(findOccurrences(\"Hello World\", \"o\"), {",
			"  \"hello\" : 1,",
			"  \"world\" : 1",
			"})",
			"​",
			"Test.assertSimilar(findOccurrences(\"Create a nice JUICY function\", \"c\"),  {",
			"  \"create\" : 1,",
			"  \"a\" : 0,",
			"  \"nice\" : 1,",
			"  \"juicy\" : 1,",
			"  \"function\" : 1",
			"})",
			"​",
			"Test.assertSimilar(findOccurrences(\"An APPLE a day keeps an Archeologist AWAY...\", \"a\"), {",
			"  \"an\" : 1,",
			"  \"apple\" : 1,",
			"  \"a\" : 1,",
			"  \"day\" : 1,",
			"  \"keeps\" : 0,",
			"  \"archeologist\" : 1,",
			"  \"away...\" : 2",
			"})",
			"​",
			"Test.assertSimilar(findOccurrences(\"hello people of the planet Earth\", \"g\"), {\"hello\": 0, \"people\": 0, \"of\": 0, \"the\": 0, \"planet\": 0, \"earth\": 0})",
			"Test.assertSimilar(findOccurrences(\"Reference site about Lorem Ipsum, giving information on its origins, as well as a random Lipsum generator.\", \"R\"), {\"reference\": 2, \"site\": 0, \"about\": 0, \"lorem\": 1, \"ipsum,\": 0, \"giving\": 0, \"information\": 1, \"on\": 0, \"its\": 0, \"origins,\": 1, \"as\": 0, \"well\": 0, \"a\": 0, \"random\": 1, \"lipsum\": 0, \"generator.\": 2})",
			"Test.assertSimilar(findOccurrences(\"Lift your spirits with funny jokes, trending memes, entertaining gifs, inspiring stories,\", \"l\"), {\"lift\": 1, \"your\": 0, \"spirits\": 0, \"with\": 0, \"funny\": 0, \"jokes,\": 0, \"trending\": 0, \"memes,\": 0, \"entertaining\": 0, \"gifs,\": 0, \"inspiring\": 0, \"stories,\": 0})"
		],
		"starterFn": [
			"1\nfunction findOccurrences(str, char) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gA9dpoanWY6StiKR9"
	},
	{
		"title": "Ones and Zeroes",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if every consecutive sequence of </span><strong><span>ones</span></strong><span> is followed by a consecutive sequence of </span><strong><span>zeroes</span></strong><span> of the same length.</span></p><h3><span>Examples</span></h3><pre><code>sameLength(\"110011100010\") ➞ true\n\nsameLength(\"101010110\") ➞ false\n\nsameLength(\"111100001100\") ➞ true\n\nsameLength(\"111\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sameLength('10'), true)",
			"Test.assertEquals(sameLength('1010'), true)",
			"Test.assertEquals(sameLength('1100'), true)",
			"Test.assertEquals(sameLength('10101110001100'), true)",
			"Test.assertEquals(sameLength('1111000010101100'), true)",
			"​",
			"Test.assertEquals(sameLength('1001'), false)",
			"Test.assertEquals(sameLength('101001'), false)",
			"Test.assertEquals(sameLength('101'), false)",
			"Test.assertEquals(sameLength('10010'), false)",
			"Test.assertEquals(sameLength('110'), false)",
			"Test.assertEquals(sameLength('11001'), false)",
			"Test.assertEquals(sameLength('11100011000'), false)"
		],
		"starterFn": [
			"1\nfunction sameLength(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sasbE2MCNAtmEWeeq"
	},
	{
		"title": "Arrow Pattern",
		"description": "<p><span>Create a function that creates a pattern as a 2D array for a given number.</span></p><h3><span>Examples</span></h3><pre><code> &gt;\n &gt;&gt;\n &gt;&gt;&gt;\n &gt;&gt;\n &gt;\n\narrow(3) ➞ [\"&gt;\", \"&gt;&gt;\", \"&gt;&gt;&gt;\", \"&gt;&gt;\", \"&gt;\"]\n\n &gt;\n &gt;&gt;\n &gt;&gt;&gt;\n &gt;&gt;&gt;&gt;\n &gt;&gt;&gt;&gt;\n &gt;&gt;&gt;\n &gt;&gt;\n &gt;\n\narrow(4) ➞ [\"&gt;\", \"&gt;&gt;\", \"&gt;&gt;&gt;\", \"&gt;&gt;&gt;&gt;\", \"&gt;&gt;&gt;&gt;\", \"&gt;&gt;&gt;\", \"&gt;&gt;\", \"&gt;\"]</code></pre><h3><span>Notes</span></h3><p><span>Function argument will always be a number greater than 0.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays"
		],
		"tests": [
			"Test.assertSimilar(arrow(3), ['>', '>>', '>>>', '>>', '>'])",
			"Test.assertSimilar(arrow(4), ['>', '>>', '>>>', '>>>>', '>>>>', '>>>', '>>', '>'])",
			"Test.assertSimilar(arrow(7), ['>', '>>', '>>>', '>>>>', '>>>>>', '>>>>>>', '>>>>>>>', '>>>>>>', '>>>>>', '>>>>', '>>>', '>>', '>'])",
			"Test.assertSimilar(arrow(8), ['>', '>>', '>>>', '>>>>', '>>>>>', '>>>>>>', '>>>>>>>', '>>>>>>>>', '>>>>>>>>', '>>>>>>>', '>>>>>>', '>>>>>', '>>>>', '>>>', '>>', '>'])",
			"Test.assertSimilar(arrow(9), ['>', '>>', '>>>', '>>>>', '>>>>>', '>>>>>>', '>>>>>>>', '>>>>>>>>', '>>>>>>>>>', '>>>>>>>>', '>>>>>>>', '>>>>>>', '>>>>>', '>>>>', '>>>', '>>', '>'])",
			"Test.assertSimilar(arrow(10), ['>', '>>', '>>>', '>>>>', '>>>>>', '>>>>>>', '>>>>>>>', '>>>>>>>>', '>>>>>>>>>', '>>>>>>>>>>', '>>>>>>>>>>', '>>>>>>>>>', '>>>>>>>>', '>>>>>>>', '>>>>>>', '>>>>>', '>>>>', '>>>', '>>', '>'])"
		],
		"starterFn": [
			"1\nfunction arrow(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cEcDMjnmdnYYosHzQ"
	},
	{
		"title": "Round to Closest N",
		"description": "<p><span>Creates a function that takes two integers, </span><code>num</code><span> and </span><code>n</code><span>, and returns an integer which is divisible by </span><code>n</code><span> and is the closest to </span><code>num</code><span>. If there are two numbers equidistant from </span><code>num</code><span> and divisible by </span><code>n</code><span>, select the larger one.</span></p><h3><span>Examples</span></h3><pre><code>roundNumber(33, 25) ➞ 25\n\nroundNumber(46, 7) ➞ 49\n\nroundNumber(133, 14) ➞ 140</code></pre><h3><span>Notes</span></h3><p><code>n</code><span> will always be a positive number.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(roundNumber(34, 25), 25)",
			"Test.assertEquals(roundNumber(54, 8), 56)",
			"Test.assertEquals(roundNumber(65, 10), 70)",
			"Test.assertEquals(roundNumber(6247, 163), 6194)",
			"Test.assertEquals(roundNumber(532, 12), 528)",
			"Test.assertEquals(roundNumber(642234, 1523), 642706)",
			"Test.assertEquals(roundNumber(5123, 10), 5120)",
			"Test.assertEquals(roundNumber(96623443, 7650), 96627150)",
			"Test.assertEquals(roundNumber(125123, 520), 125320)",
			"Test.assertEquals(roundNumber(12121212, 144), 12121200)"
		],
		"starterFn": [
			"1\nfunction roundNumber(num, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CwRXhTncGii8dupn9"
	},
	{
		"title": "Digits Sum Root",
		"description": "<p><span>Create a function that takes a number and returns one digit that is the result of summing all the digits of the input number. When the sum of the digits consists of more than one digit, repeat summing until you get one digit.</span></p><h3><span>Examples</span></h3><pre><code>rootDigit(123) ➞ 6\n// 1 + 2 + 3 = 6\n\nrootDigit(999888777) ➞ 9\n\nrootDigit(1238763636555555555555) ➞ 6</code></pre><h3><span>Notes</span></h3><p><span>Recursion is allowed.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(rootDigit(999888777), 9)",
			"Test.assertEquals(rootDigit(1111177999888777999888777999888777n), 1)",
			"Test.assertEquals(rootDigit(1238763636555555555555n), 6)",
			"Test.assertEquals(rootDigit(1238222222222222222263612387636361238763636n), 7)",
			"Test.assertEquals(rootDigit(0), 0)"
		],
		"starterFn": [
			"1\nfunction rootDigit(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4aiWPfNZfpJTZDPSX"
	},
	{
		"title": "Magic Sigil Generator",
		"description": "<p><span>A magic sigil is a glyph which represents a desire one wishes to manifest in their lives. There are many ways to create a sigil, but the most common is to write out a specific desire (e.g. \"</span><em><span>I HAVE WONDERFUL FRIENDS WHO LOVE ME</span></em><span>\"), remove all vowels, remove any duplicate letters and then design a glyph from what remains.</span></p><p><span>Using the sentence above as an example, we would remove duplicate letters:</span></p><pre><code>AUFRINDSWHLOVME</code></pre><p><span>And then remove all vowels, leaving us with:</span></p><pre><code>FRNDSWHLVM</code></pre><p><span>Create a function that takes a string and removes its vowels and duplicate letters. The returned string should not contain any spaces and be in uppercase.</span></p><h3><span>Examples</span></h3><pre><code>sigilize(\"i am healthy\") ➞ \"MLTHY\"\n\nsigilize(\"I FOUND MY SOULMATE\") ➞ \"FNDYSLMT\"\n\nsigilize(\"I have a job I enjoy and it pays well\") ➞ \"HVBJNDTPYSWL\"</code></pre><h3><span>Notes</span></h3><ul><li><span>For duplicate letters the </span><strong><span>last one</span></strong><span> is kept.</span></li><li><span>When performing actual sigil magic, you </span><strong><span>must</span></strong><span> make your sigils </span><strong><span>manually</span></strong><span>.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on sigils if you're interested in the concept.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sigilize(\"I HAVE WONDERFUL FRIENDS WHO LOVE ME\"), \"FRNDSWHLVM\")",
			"Test.assertEquals(sigilize(\"My business is financially successful\"), \"MBNYCSFL\")",
			"Test.assertEquals(sigilize(\"I have a job I enjoy and it pays well\"), \"HVBJNDTPYSWL\")",
			"Test.assertEquals(sigilize(\"I heard the song closing time playing on the radio\"), \"CSMPLYGNTHRD\")",
			"Test.assertEquals(sigilize(\"i am healthy\"), \"MLTHY\")",
			"Test.assertEquals(sigilize(\"I FOUND MY SOULMATE\"), \"FNDYSLMT\")"
		],
		"starterFn": [
			"1\nfunction sigilize(desire) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kqup45hRWqWQ7LqDm"
	},
	{
		"title": "Find First Character That Repeats",
		"description": "<p><span>Create a function that takes a string and returns the first character that repeats. If there is no repeat of a character, return </span><code>\"-1\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>firstRepeat(\"legolas\") ➞ \"l\"\n\nfirstRepeat(\"Gandalf\") ➞ \"a\"\n\nfirstRepeat(\"Balrog\") ➞ \"-1\"\n\nfirstRepeat(\"Isildur\") ➞ \"-1\"\n// Case sensitive \"I\" not equal to \"i\"</code></pre><h3><span>Notes</span></h3><p><span>Tests are case sensitive.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"logic",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(firstRepeat(\"legolas\"), \"l\")",
			"Test.assertEquals(firstRepeat(\"Balrog\"), \"-1\")",
			"Test.assertEquals(firstRepeat(\"Isildur\"), \"-1\")",
			"Test.assertEquals(firstRepeat(\"Gollum\"), \"l\")",
			"Test.assertEquals(firstRepeat(\"Galadriel\"), \"a\")",
			"Test.assertEquals(firstRepeat(\"pippin\"), \"p\")",
			"Test.assertEquals(firstRepeat(\"Saruman\"), \"a\")"
		],
		"starterFn": [
			"1\nfunction firstRepeat(chars) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aMyRSjKakeDauFfkX"
	},
	{
		"title": "Needle in a Hex String",
		"description": "<p><span>Find the index of a string within a hex encoded string.</span></p><p><span>You will be given a string which needs to be found in another string which has previously been translated into hex. You will need to return the first index of the needle within the hex encoded string.</span></p><h3><span>Examples</span></h3><pre><code>firstIndex(\"68 65 6c 6c 6f 20 77 6f 72 6c 64\", \"world\") ➞ 6\n\nfirstIndex(\"47 6f 6f 64 62 79 65 20 77 6f 72 6c 64\", \"world\") ➞ 8\n\nfirstIndex(\"42 6f 72 65 64 20 77 6f 72 6c 64\", \"Bored\") ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"functional_programming"
		],
		"tests": [
			"Test.assertEquals(firstIndex(\"68 65 6c 6c 6f 20 77 6f 72 6c 64\", \"world\"), 6)",
			"Test.assertEquals(firstIndex(\"47 6f 6f 64 62 79 65 20 77 6f 72 6c 64\", \"world\"), 8)",
			"Test.assertEquals(firstIndex(\"74 68 65 20 6e 65 65 64 6c 65 20 69 73 20 74 6f 20 62 65 20 66 6f 75 6e 64\", \"needle\"), 4)",
			"Test.assertEquals(firstIndex(\"a3 24 25 2d 2d 2d a3 24 20 77 6f 72 6c 64 2d 2d 2d\", \"world\"), 9)",
			"Test.assertEquals(firstIndex(\"42 6f 72 65 64 20 77 6f 72 6c 64\", \"Bored\"), 0)"
		],
		"starterFn": [
			"1\nfunction firstIndex(hex, needle) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Fev8jkLtDunP9wexv"
	},
	{
		"title": "Anonymous Name",
		"description": "<p><span>You are in the process of creating a chat application and want to add an </span><strong><span>anonymous name</span></strong><span> feature. This anonymous name feature will create an alias that consists of two capitalized words beginning with the same letter as the users first name.</span></p><p><span>Create a function that determines if the array of users is mapped to an array of anonymous names correctly.</span></p><h3><span>Examples</span></h3><pre><code>isCorrectAliases([\"Adrian M.\", \"Harriet S.\", \"Mandy T.\"], [\"Amazing Artichoke\", \"Hopeful Hedgehog\", \"Marvelous Mouse\"]) ➞ true\n\nisCorrectAliases([\"Rachel F.\", \"Pam G.\", \"Fred Z.\", \"Nancy K.\"]) ➞ [\"Reassuring Rat\", \"Peaceful Panda\", \"Fantastic Frog\", \"Notable Nickel\"] ➞ true\n\nisCorrectAliases([\"Beth T.\"]), [\"Brandishing Mimosa\"]) ➞ false\n// Both words in \"Brandishing Mimosa\" should begin with a \"B\" - \"Brandishing Beaver\" would do the trick.</code></pre><h3><span>Notes</span></h3><p><span>Both words in the alias should be capitalized.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(isCorrectAliases(['Adrian M.', 'Harriet S.', 'Mandy T.'], ['Amazing Artichoke', 'Hopeful Hedgehog', 'Marvelous Mouse']), true)",
			"Test.assertEquals(isCorrectAliases(['Rachel F.', 'Pam G.', 'Fred Z.', 'Nancy K.'], ['Reassuring Rat', 'Peaceful Panda', 'Fantastic Frog', 'Notable Nickel']), true)",
			"Test.assertEquals(isCorrectAliases(['Beth T.'], ['Brandishing Mimosa']), false)",
			"Test.assertEquals(isCorrectAliases(['Mick S.', 'Sam R.', 'Val W.'], ['Magnificent Mint', 'Sly Serpent', 'Victorious Viceroy']), true)",
			"Test.assertEquals(isCorrectAliases(['Bella T.', 'Tom H.', 'Ben C.'], ['Beautiful Barn', 'Talented Tapestry', 'Cool Bamboo']), false)",
			"Test.assertEquals(isCorrectAliases(['Bella T.', 'Tom H.', 'Ben C.'], ['Beautiful Barn', 'Talented Tapestry', 'Bountiful Bamboo']), true)"
		],
		"starterFn": [
			"1\nfunction isCorrectAliases(names, aliases) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mDtrDtY3JCPmEv9jt"
	},
	{
		"title": "RegEx XIX : Group Ranges - Capturing groups (x)",
		"description": "<p><strong><span>Groups and ranges</span></strong><span> indicate groups and ranges of expression characters. </span><strong><span>Capturing groups</span></strong><span> matches x in (x) and remembers the match.</span></p><pre><code>\"foo bar\".match(/(foo)/) ➞ matches and remembers \"foo\"</code></pre><p><span>Capturing groups often are used along with quantifiers.  Quantifiers will use the capturing group as a whole.</span></p><pre><code>\"Gogogo now!\".match(/(go)+/i) ➞ \"Gogogo\"</code></pre><p><strong><span>Caveat:</span></strong><span> Capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer non-capturing parentheses.</span></p><p><span>MAC-address of a network interface consists of 6 two-digit hex numbers separated by a colon (e.g. </span><strong><span>01:32:54:67:89:AB</span></strong><span>). Write a RegExp that checks whether a string is MAC-address.</span></p><pre><code>let regexp = /your regexp/\n\nregexp.test(\"01:32:54:67:89:AB\") ➞ true\nregexp.test(\"0132546789AB\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"const str1 = '01:32:54:67:89:AB'",
			"const str2 = '0132546789AB'",
			"const str3 = '01:32:54:67:89'",
			"const str4 = '01:32:54:67:89:ZZ'",
			"​",
			"const validate = (REGEXP) => {",
			" return function testReg(str) {",
			"    return REGEXP.test(str);",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertSimilar(testExp(str1), true)",
			"Test.assertSimilar(testExp(str2), false, \"no colons\")",
			"Test.assertSimilar(testExp(str3), false, \"5 numbers, need 6\")",
			"Test.assertSimilar(testExp(str4), false, \"ZZ at the end\")",
			"​",
			"// credits to https://javascript.info/regexp-groups"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */i"
		],
		"url": "https://edabit.com/challenge/2xLmzBEjBzg4LSygs"
	},
	{
		"title": "Average Date",
		"description": "<p><span>Create a function that given an array of dates returns the average date in string form.</span></p><h3><span>Examples</span></h3><pre><code>averageDate([]) ➞ null\n\naverageDate([\n  new Date(Date.UTC(1970, 0, 1))\n]) ➞ \"1970-01-01T00:00:00.000Z\"\n\naverageDate([\n  new Date(Date.UTC(1970, 0, 1)),\n  new Date(Date.UTC(1971, 0, 1))\n]) ➞ \"1970-07-02T12:00:00.000Z\"</code></pre><h3><span>Notes</span></h3><ul><li><span>For the return value you can use the </span><code>.toISOString()</code><span> method.</span></li><li><span>If </span><code>dates</code><span> is an empty array return </span><code>null</code><span>.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates",
			"math"
		],
		"tests": [
			"Test.assertEquals(averageDate([]), null)",
			"​",
			"Test.assertEquals(",
			"  averageDate([new Date(Date.UTC(1970, 0, 1))]),",
			"  '1970-01-01T00:00:00.000Z'",
			")",
			"​",
			"Test.assertEquals(",
			"  averageDate([new Date(Date.UTC(1970, 0, 1)), new Date(Date.UTC(1971, 0, 1))]),",
			"  '1970-07-02T12:00:00.000Z'",
			")",
			"​",
			"Test.assertEquals(",
			"  averageDate([new Date(Date.UTC(1970, 0, 1)), new Date(Date.UTC(1970, 0, 1))]),",
			"  '1970-01-01T00:00:00.000Z'",
			")",
			"​",
			"Test.assertEquals(",
			"  averageDate([",
			"    new Date(Date.UTC(1970, 0, 1)),",
			"    new Date(Date.UTC(1971, 0, 1)),",
			"    new Date(Date.UTC(1972, 0, 1)),",
			"  ]),",
			"  '1971-01-01T00:00:00.000Z'",
			")",
			"​"
		],
		"starterFn": [
			"1\nfunction averageDate(dates) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kBDrADkw28RHim74Q"
	},
	{
		"title": "Abbreviations Unique?",
		"description": "<p><span>You are given two inputs:</span></p><ol><li><span>An array of abbreviations.</span></li><li><span>An array of words.</span></li></ol><p><span>Write a function that returns </span><code>true</code><span> if each abbreviation </span><strong><span>uniquely identifies</span></strong><span> a word, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>uniqueAbbrev([\"ho\", \"h\", \"ha\"], [\"house\", \"hope\", \"happy\"]) ➞ false\n// \"ho\" and \"h\" are ambiguous and can identify either \"house\" or \"hope\"\n\nuniqueAbbrev([\"s\", \"t\", \"v\"], [\"stamina\", \"television\", \"vindaloo\"]) ➞ true\n\nuniqueAbbrev([\"bi\", \"ba\", \"bat\"], [\"big\", \"bard\", \"battery\"]) ➞ false\n\nuniqueAbbrev([\"mo\", \"ma\", \"me\"], [\"moment\", \"many\", \"mean\"]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Abbreviations will be a substring from </span><code>[0, n]</code><span> from the original string.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(uniqueAbbrev([\"s\", \"t\", \"v\"], [\"stamina\", \"television\", \"vindaloo\"]), true)",
			"Test.assertEquals(uniqueAbbrev([\"mo\", \"ma\", \"me\"], [\"moment\", \"many\", \"mean\"]), true)",
			"Test.assertEquals(uniqueAbbrev([\"at\", \"o\", \"abe\"], [\"atom\", \"original\", \"abet\"]), true)",
			"Test.assertEquals(uniqueAbbrev([\"rh\", \"par\", \"re\"], [\"rhino\", \"parry\", \"residue\"]), true)",
			"Test.assertEquals(uniqueAbbrev([\"ho\", \"h\", \"ha\"], [\"house\", \"hope\", \"happy\"]), false)",
			"Test.assertEquals(uniqueAbbrev([\"bi\", \"ba\", \"bat\"], [\"big\", \"bard\", \"battery\"]), false)",
			"Test.assertEquals(uniqueAbbrev([\"b\", \"c\", \"ch\"], [\"broth\", \"chap\", \"cardigan\"]), false)",
			"Test.assertEquals(uniqueAbbrev([\"to\", \"too\", \"t\"], [\"topology\", \"took\", \"torrent\"]), false)"
		],
		"starterFn": [
			"1\nfunction uniqueAbbrev(abbs, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/H8JABWQfYFN4ZSAxE"
	},
	{
		"title": "Circle Constructor",
		"description": "<p><span>Create a </span><code>Circle()</code><span> constructor that takes the radius as a single argument and has the following properties and methods:</span></p><ol><li><code>.radius</code></li><li><code>.diameter</code></li><li><code>.getC()</code><span> (get circumference)</span></li><li><code>.getA()</code><span> (get area)</span></li></ol><p><span>Instantiate this constructor with two circles:</span></p><ol><li><span>c1 has radius 3</span></li><li><span>c2 has radius 5</span></li></ol><p><span>For example, if I used the Circle constructor to instantiate a new instance called </span><code>c0</code><span> with a radius of </span><code>1</code><span>, I would have:</span></p><h3><span>Examples</span></h3><pre><code>c0.radius ➞ 1\n\nc0.diameter ➞ 2\n\nc0.getC() ➞ 6.28\n\nc0.getA() ➞ 3.14</code></pre><h3><span>Notes</span></h3><ul><li><span>Circumference: </span><code>2πr</code><span>. Area: </span><code>πr^2</code><span>.</span></li><li><span>Use Math.PI for calculating circumference and area.</span></li><li><span>Round the </span><code>perimeter</code><span> and </span><code>area</code><span> results to the nearest hundredths place.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertEquals(c1.radius, 3)",
			"Test.assertEquals(c1.diameter, 6)",
			"Test.assertEquals(c1.getC(), 18.85)",
			"Test.assertEquals(c1.getA(), 28.27)",
			"Test.assertEquals(c2.radius, 5)",
			"Test.assertEquals(c2.diameter, 10)",
			"Test.assertEquals(c2.getC(), 31.42)",
			"Test.assertEquals(c2.getA(), 78.54)"
		],
		"starterFn": [
			"1\nfunction Circle(radius) {",
			"2\n  // Write your properties and methods here",
			"3\n  ",
			"4\n}",
			"5\n​",
			"6\n// Instantiate your constructor class here",
			"7\n​"
		],
		"url": "https://edabit.com/challenge/75SZTpeP3xKPu8Gx4"
	},
	{
		"title": "Italian Grammar: Present Tense of First Conjugation Verbs",
		"description": "<p><span>In this challenge, you must build a function that inflects an infinitive regular Italian verb of the first conjugation form to the present tense, including the personal subjective pronoun.</span></p><p><span>All first conjugation Italian verbs share the same suffix: </span><strong><span>ARE</span></strong><span>. The first thing to do is separate the verb root from the suffix.</span></p><ul><li><span>Root of \"programmare\" (</span><em><span>to code</span></em><span>) = \"programm\".</span></li><li><span>Root of \"giocare\" (</span><em><span>to play</span></em><span>) = \"gioc\".</span></li></ul><p><span>For each subjective pronoun the root is combined with a new suffix: see table below (pronouns are numbered for coding ease, in real grammar they are grouped in singular and plural, both from first to third):</span></p><table><thead><tr><th><span>#</span></th><th><span>Pronoun</span></th><th><span>Suffix</span></th></tr></thead><tbody><tr><td><span>1</span></td><td><span>Io (</span><em><span>I</span></em><span>)</span></td><td><span>o</span></td></tr><tr><td><span>2</span></td><td><span>Tu (</span><em><span>You</span></em><span>)</span></td><td><span>i</span></td></tr><tr><td><span>3</span></td><td><span>Egli (</span><em><span>He</span></em><span>)</span></td><td><span>a</span></td></tr><tr><td><span>4</span></td><td><span>Noi (</span><em><span>We</span></em><span>)</span></td><td><span>iamo</span></td></tr><tr><td><span>5</span></td><td><span>Voi (</span><em><span>You</span></em><span>)</span></td><td><span>ate</span></td></tr><tr><td><span>6</span></td><td><span>Essi (</span><em><span>They</span></em><span>)</span></td><td><span>ano</span></td></tr></tbody></table><ul><li><span>Present tense of verb \"parlare\" (</span><em><span>to speak</span></em><span>) for third pronoun:</span><ul><li><span>Pronoun (\"Egli\") + Root (\"parl\") + Suffix (\"a\") = \"Egli parla\".</span></li></ul></li><li><span>Present tense of verb \"lavorare\" (</span><em><span>to work</span></em><span>) for fourth pronoun:</span><ul><li><span>Pronoun (\"Noi\") + Root (\"lavor\") + Suffix (\"iamo\") = \"Noi lavoriamo\".</span></li></ul></li></ul><p><span>There are two exceptions for present tense inflection:</span></p><ul><li><span>If root ends with \"</span><strong><span>c</span></strong><span>\" or \"</span><strong><span>g</span></strong><span>\" the second and fourth pronoun suffixes add a \"</span><strong><span>h</span></strong><span>\" at the start:</span><ul><li><span>\"Attaccare\" (</span><em><span>to attack</span></em><span>) = \"Tu attacchi\" (instead of </span><em><span>\"Tu attacci\"</span></em><span>)</span></li><li><span>\"Legare\" (</span><em><span>to tie</span></em><span>) = \"Noi leghiamo\" (instead of </span><em><span>\"Noi legiamo\"</span></em><span>)</span></li></ul></li><li><span>If root ends with \"</span><strong><span>i</span></strong><span>\" the second and fourth pronoun suffixes lose the starting \"</span><strong><span>i</span></strong><span>\" (so that second pronoun suffix  disappears):</span><ul><li><span>\"Inviare\" (</span><em><span>to send</span></em><span>) = \"Noi inviamo\" (instead of </span><em><span>\"Noi inviiamo\"</span></em><span>)</span></li><li><span>\"Tagliare\" (</span><em><span>to cut</span></em><span>) = \"Tu tagli\" (instead of </span><em><span>\"Tu taglii\"</span></em><span>)</span></li><li><span>\"Mangiare\" (</span><em><span>to eat</span></em><span>) = \"Noi mangiamo\" (instead of </span><em><span>\"Noi mangiiamo\"</span></em><span>)</span></li><li><span>\"Cacciare\" (</span><em><span>to hunt</span></em><span>) = \"Tu cacci\" (instead of </span><em><span>\"Tu caccii\"</span></em><span>)</span></li></ul></li></ul><p><span>Given a string </span><code>verb</code><span> being the infinitive form of the first conjugation Italian regular verb, and an integer </span><code>pronoun</code><span> being the subjective personal pronoun, implement a function that returns the inflected form as a string.</span></p><h3><span>Examples</span></h3><pre><code>conjugate(\"programmare\", 5) ➞ \"Voi programmate\"\n\nconjugate(\"iniziare\", 2) ➞ \"Tu inizi\"\n\nconjugate(\"mancare\", 4) ➞ \"Noi manchiamo\"</code></pre><h3><span>Notes</span></h3><ul><li><span>In the returned string, pronouns must be capitalized and verbs must be in lowercase, separated by a space between them.</span></li><li><span>Curious fact: first conjugation (verbs ending in \"are\") is also called \"the living conjugation\", because every new verb that enters the Italian dictionary is assigned to this category as a new regular verb; it often happens for verbs \"borrowed\" from English and for informatical neologisms: </span><em><span>chattare</span></em><span>, </span><em><span>twittare</span></em><span>, </span><em><span>postare</span></em><span>, </span><em><span>spammare</span></em><span>... will </span><em><span>edabittare</span></em><span> be the next?</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(conjugate(\"edabittare\", 4), \"Noi edabittiamo\", \"We edabit :-)\")",
			"Test.assertEquals(conjugate(\"programmare\", 5), \"Voi programmate\", \"You code\")",
			"Test.assertEquals(conjugate(\"iniziare\", 2), \"Tu inizi\", \"You start\")",
			"Test.assertEquals(conjugate(\"mancare\", 4), \"Noi manchiamo\", \"We miss\")",
			"Test.assertEquals(conjugate(\"parlare\", 1), \"Io parlo\", \"I speak\")",
			"Test.assertEquals(conjugate(\"sognare\", 3), \"Egli sogna\", \"He dreams\")",
			"Test.assertEquals(conjugate(\"negare\", 2), \"Tu neghi\", \"You deny\")",
			"Test.assertEquals(conjugate(\"insegnare\", 5), \"Voi insegnate\", \"You teach\")",
			"Test.assertEquals(conjugate(\"tagliare\", 4), \"Noi tagliamo\", \"We cut\")",
			"Test.assertEquals(conjugate(\"nuotare\", 1), \"Io nuoto\", \"I swim\")",
			"Test.assertEquals(conjugate(\"cambiare\", 3), \"Egli cambia\", \"He changes\")",
			"// Thanks to @Francesco Di Viesto for these two more tests (see the Comments tab)",
			"Test.assertEquals(conjugate(\"negare\", 3), \"Egli nega\", \"He denies\")",
			"Test.assertEquals(conjugate(\"pareggiare\", 2), \"Tu pareggi\", \"You draw\")"
		],
		"starterFn": [
			"1\nfunction conjugate(verb, pronoun) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CZhyvQg3KDhcYRJD7"
	},
	{
		"title": "Average Word Length",
		"description": "<p><span>Create a function that takes in a sentence and returns the average length of each word in that sentence. Round your result to two decimal places.</span></p><h3><span>Examples</span></h3><pre><code>averageWordLength(\"A B C.\") ➞ 1.00\n\naverageWordLength(\"What a gorgeous day.\") ➞ 4.00\n\naverageWordLength(\"Dude, this is so awesome!\") ➞ 3.80</code></pre><h3><span>Notes</span></h3><p><span>Ignore punctuation when counting the length of a word.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(averageWordLength('A B C.'), 1.00)",
			"Test.assertEquals(averageWordLength('What a gorgeous day.'), 4.00)",
			"Test.assertEquals(averageWordLength('Dude, this is so awesome!'), 3.80)",
			"Test.assertEquals(averageWordLength('Working on my tan right now.'), 3.67)",
			"Test.assertEquals(averageWordLength('Having a blast partying in Las Vegas.'), 4.29)",
			"Test.assertEquals(averageWordLength('Have you ever wondered what Saturn looks like?'), 4.75)",
			"Test.assertEquals(averageWordLength('I just planted a young oak tree, wonder how tall it will grow in a few years?'), 3.47)"
		],
		"starterFn": [
			"1\nfunction averageWordLength(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ACeSvyhYe7Qrtsk5R"
	},
	{
		"title": "AlTeRnAtInG cApS",
		"description": "<p><span>Create a function that alternates the case of the letters in a string (known as </span><strong><span>Spongecase</span></strong><span>).</span></p><h3><span>Examples</span></h3><pre><code>alternatingCaps(\"Hello\") ➞ \"HeLlO\"\n\nalternatingCaps(\"How are you?\") ➞ \"HoW aRe YoU?\"\n\nalternatingCaps(\"OMG this website is awesome!\") ➞ \"OmG tHiS wEbSiTe Is AwEsOmE!\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The first character should always be UPPERCASE.</span></li><li><span>Ignore spaces.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(alternatingCaps('alternating caps'), 'AlTeRnAtInG cApS')",
			"Test.assertEquals(alternatingCaps(\"What is your name?\"), \"WhAt Is YoUr NaMe?\")",
			"Test.assertEquals(alternatingCaps('Lorem ipsum dolor sit amet consectetur adipisicing elit.'), 'LoReM iPsUm DoLoR sIt AmEt CoNsEcTeTuR aDiPiSiCiNg ElIt.')",
			"Test.assertEquals(alternatingCaps('OMG this website is awesome!'), 'OmG tHiS wEbSiTe Is AwEsOmE!')",
			"Test.assertEquals(alternatingCaps('The quick brown fox jumps over the lazy dog'), 'ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG')",
			"Test.assertEquals(alternatingCaps('The intent is to provide players with a sense of pride and accomplishment for unlocking different heroes.'), 'ThE iNtEnT iS tO pRoViDe PlAyErS wItH a SeNsE oF pRiDe AnD aCcOmPlIsHmEnT fOr UnLoCkInG dIfFeReNt HeRoEs.')"
		],
		"starterFn": [
			"1\nfunction alternatingCaps(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fzuGQP9Cmzi3ujj4r"
	},
	{
		"title": "Return the Sum of Two Numbers (on the Moon)",
		"description": "<p><span>When two numbers are added together, the strange Lunar arithmetic is used on the Moon. The Lunar sum of two numbers is not determined by the sum of their individual digits, but by the highest digit of the two taken into account at each step, in columnar form.</span></p><pre><code>2  4  6  +\n3  1  7  =\n--------\n3  4  7\n\n// 3 &gt; 2 | 4 &gt; 1 | 7 &gt; 6\n\n1  3  4  +\n   5  4  =\n--------\n1  5  4\n\n//  1 &gt; 0 | 5 &gt; 3 | 4 == 4\n// Blank spots in the columnar form are equals to 0\n\n   2  0  +\n1  4  0  =\n-------\n1  4  0\n\n// 1 &gt; 0 | 4 &gt; 2 | 0 == 0</code></pre><p><span>Given two positive integers </span><code>number1</code><span> and </span><code>number2</code><span>, implement a function that returns their sum as a new integer.</span></p><h3><span>Examples</span></h3><pre><code>lunarSum(246, 317) ➞ 347\n\nlunarSum(134, 54) ➞ 154\n\nlunarSum(20, 140) ➞ 140</code></pre><h3><span>Notes</span></h3><p><span>The given numbers will be always positive integers: no exceptions to handle.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(lunarSum(246, 317), 347, \"Example #1\")",
			"Test.assertEquals(lunarSum(134, 54), 154, \"Example #2\")",
			"Test.assertEquals(lunarSum(20, 140), 140, \"Example #3\")",
			"Test.assertEquals(lunarSum(1, 1), 1)",
			"Test.assertEquals(lunarSum(198, 44), 198)",
			"Test.assertEquals(lunarSum(36602, 696), 36696)",
			"Test.assertEquals(lunarSum(91, 8823), 8893)",
			"Test.assertEquals(lunarSum(123, 8), 128)",
			"Test.assertEquals(lunarSum(2289, 98211285), 98212289)",
			"Test.assertEquals(lunarSum(9, 11), 19)",
			"Test.assertEquals(lunarSum(11, 22), 22)"
		],
		"starterFn": [
			"1\nfunction lunarSum(number1, number2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ev6brd7JHWzMufJ9w"
	},
	{
		"title": "Staircase of Recursion",
		"description": "<p><span>Write a function that returns the number of ways a person can climb </span><strong><span>n stairs</span></strong><span>, where the person may only climb </span><strong><span>1</span></strong><span> or </span><strong><span>2</span></strong><span> steps at a time.</span></p><p><span>To illustrate, if </span><strong><span>n = 4</span></strong><span> there are </span><strong><span>5</span></strong><span> ways to climb:</span></p><pre><code>[1, 1, 1, 1]\n[2, 1, 1]\n[1, 2, 1]\n[1, 1, 2]\n[2, 2]</code></pre><h3><span>Examples</span></h3><pre><code>waysToClimb(1) ➞ 1\n\nwaysToClimb(2) ➞ 2\n\nwaysToClimb(5) ➞ 8</code></pre><h3><span>Notes</span></h3><p><span>A staircase of height </span><code>0</code><span> should return </span><code>1</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(waysToClimb(0), 1)",
			"Test.assertEquals(waysToClimb(1), 1)",
			"Test.assertEquals(waysToClimb(2), 2)",
			"Test.assertEquals(waysToClimb(3), 3)",
			"Test.assertEquals(waysToClimb(4), 5)",
			"Test.assertEquals(waysToClimb(5), 8)",
			"Test.assertEquals(waysToClimb(6), 13)",
			"Test.assertEquals(waysToClimb(7), 21)",
			"Test.assertEquals(waysToClimb(15), 987)",
			"Test.assertEquals(waysToClimb(23), 46368)"
		],
		"starterFn": [
			"1\nfunction waysToClimb(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/APCAgm5FRnnC7ar87"
	},
	{
		"title": "Extend the global Array object with an `isEqual()` method",
		"description": "<p><span>Extend the global Array object to have an instance method called </span><code>isEqual()</code><span>. The method should accept an array as the first argument, and a second optional argument that is a flag to ignore the order of the arrays. This second argument should default to </span><code>false</code></p><h3><span>Examples</span></h3><pre><code>[1, 2, 3].isEqual([1, 2, 3]) ➞ true\n\n[1, 2, 3].isEqual([1, 3, 2]) ➞ false\n\n[1, 2, 3].isEqual([1, 3, 2], true) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>This method does not need to compare Arrays, Objects, and non-primitives. It just needs to consider numbers, booleans, and strings.</span></p>",
		"publishedBy": "Cory Crook",
		"publishedByUrl": "https://edabit.com/user/fMGp72XG7rQYcdFqt",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar([1, 2, 3].isEqual([1, 2, 3]), true, \"Test #1 - Same order\")",
			"Test.assertSimilar([1, 2, 3].isEqual([1, 3, 2]), false, \"Test #2 - Different order, ignoreOrder = false\")",
			"Test.assertSimilar([7, 45, \"hello\"].isEqual([\"hello\", 45, 7], true), true, \"Test #3 - Different order, ignoreOrder = true\")"
		],
		"starterFn": [
			"1\nArray.prototype.isEqual = function() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ngX9LEmCvRq7ud7J5"
	},
	{
		"title": "Product of Remaining Elements",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if you can partition an array into </span><strong><span>one element and the rest</span></strong><span>, such that this element is equal to the </span><strong><span>product</span></strong><span> of all other elements </span><strong><span>excluding itself</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>canPartition([2, 8, 4, 1]) ➞ true\n// 8 = 2 x 4 x 1\n\ncanPartition([-1, -10, 1, -2, 20]) ➞ false\n\ncanPartition([-1, -20, 5, -1, -2, 2]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>The array may contain duplicates.</span></li><li><span>Multiple solutions can exist, any solution is sufficient to return </span><code>true</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(canPartition([-1, -10, 1, -2, 20]), false)",
			"Test.assertEquals(canPartition([-1, -20, 5, -1, -2, 2]), true)",
			"Test.assertEquals(canPartition([2, 8, 4, 1]), true)",
			"Test.assertEquals(canPartition([1, 1, -1, 1]), false)",
			"Test.assertEquals(canPartition([-1, -1, 1, 1]), true)",
			"Test.assertEquals(canPartition([0, 5, 1, -1]), false)",
			"Test.assertEquals(canPartition([0, 1, 1, -1]), false)",
			"Test.assertEquals(canPartition([0, 1, 1, 1]), false)",
			"Test.assertEquals(canPartition([0, 0, 1, 1]), true)",
			"Test.assertEquals(canPartition([0, 0, 1]), true)",
			"Test.assertEquals(canPartition([0, 0, 0]), true)",
			"Test.assertEquals(canPartition([5, 5, 25, 100]), false)",
			"Test.assertEquals(canPartition([-1, 5, 20, 100]), false)",
			"Test.assertEquals(canPartition([1, 1, 1, 1]), true)",
			"Test.assertEquals(canPartition([-1, 1, -1]), true)",
			"Test.assertEquals(canPartition([-1, 1, 1]), false)"
		],
		"starterFn": [
			"1\nfunction canPartition(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WuoMiJRr69hPRQJYx"
	},
	{
		"title": "Scoring a Field Goal",
		"description": "<p><span>In (American) Football, a team can score if they manage to kick a ball through the goal (i.e. above the crossbar and between the uprights).</span></p><p><span>Create a function that returns </span><code>true</code><span> if the ball </span><code>0</code><span> goes through the goal. You will be given an array of arrays.</span></p><h3><span>Examples</span></h3><pre><code>isGoalScored([\n  [\"  #     #  \"],\n  [\"  #  0  #  \"],\n  [\"  #     #  \"],\n  [\"  #######  \"],\n  [\"     #     \"],\n  [\"     #     \"],\n  [\"     #     \"]\n]) ➞ true\n\nisGoalScored([\n  [\"  #0    #  \"],\n  [\"  #     #  \"],\n  [\"  #     #  \"],\n  [\"  #######  \"],\n  [\"     #     \"],\n  [\"     #     \"],\n  [\"     #     \"]\n]) ➞ true\n\nisGoalScored([\n  [\"  #     #  \"],\n  [\"  #     #  \"],\n  [\"  #     # 0\"],\n  [\"  #######  \"],\n  [\"     #     \"],\n  [\"     #     \"],\n  [\"     #     \"]\n]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>All goals will be of the same size.</span></li><li><span>All arrays will be of equal length (11).</span></li><li><span>A team can never score if it hits the crossbar or goes underneath it.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isGoalScored([",
			"  [\"  #     #  \"],",
			"  [\"  #  0  #  \"],",
			"  [\"  #     #  \"],",
			"  [\"  #######  \"],",
			"  [\"     #     \"],",
			"  [\"     #     \"],",
			"  [\"     #     \"]",
			"]), true)",
			"​",
			"Test.assertEquals(isGoalScored([",
			"  [\"  #     #  \"],",
			"  [\"  #     #  \"],",
			"  [\"  #   0 #  \"],",
			"  [\"  #######  \"],",
			"  [\"     #     \"],",
			"  [\"     #     \"],",
			"  [\"     #     \"]",
			"]), true)",
			"​",
			"Test.assertEquals(isGoalScored([",
			"  [\"  #0    #  \"],",
			"  [\"  #     #  \"],",
			"  [\"  #     #  \"],",
			"  [\"  #######  \"],",
			"  [\"     #     \"],"
		],
		"starterFn": [
			"1\nfunction isGoalScored(goal) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uauDJo55B8nYc9mLZ"
	},
	{
		"title": "The Snake — Area Filling",
		"description": "<p><span>Assuming that you know the popular game \"Snake\", you have an area of x</span><span>*</span><span>x, the snake length is 1 (only the head) and is positioned in the top left corner of the area at the beginning which means if your area is 7</span><span>*</span><span>7 it will look something like this:</span></p><p><span> </span><img src=\"https://i.imgur.com/glbiwtu.png\"></p><p><span>Knowing that each time the snake eats the food his length will be 2 times longer (so if the length of the snake is 4, after eating it will be 8), you have to create a function that takes a number as an argument and returns how many times the snake needs to eat to fill the entire area.</span></p><h3><span>Examples</span></h3><pre><code>snakefill(3) ➞ 3\n\nsnakefill(6) ➞ 5\n\nsnakefill(24) ➞ 9</code></pre><h3><span>Notes</span></h3><ul><li><span>The argument is the length of a side of the area which mean that if the given number is 6 your area will be of 6*6.</span></li><li><span>The snake can exceed the borders</span></li><li><span>The given number can't be a float.</span></li><li><span>The given number is always positive.</span></li></ul>",
		"publishedBy": "Blackomodo",
		"publishedByUrl": "https://edabit.com/user/7QcY3CLdo8PehxXwd",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(snakefill(8), 6)",
			"Test.assertEquals(snakefill(18), 8)",
			"Test.assertEquals(snakefill(555), 18)",
			"Test.assertEquals(snakefill(2), 2)",
			"Test.assertEquals(snakefill(1), 0)",
			"Test.assertEquals(snakefill(900), 19)"
		],
		"starterFn": [
			"1\nfunction snakefill(x) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gQuex4Ldsohmzscb3"
	},
	{
		"title": "Grocery Store Prices",
		"description": "<p><span>You are given an array of strings consisting of grocery items, with prices in parentheses. Return an array of prices in float format.</span></p><h3><span>Examples</span></h3><pre><code>getPrices([\"ice cream ($5.99)\", \"banana ($0.20)\", \"sandwich ($8.50)\", \"soup ($1.99)\"]) ➞ [5.99, 0.2, 8.50, 1.99]\n\ngetPrices([\"salad ($4.99)\"]) ➞ [4.99]</code></pre><h3><span>Notes</span></h3><p><span>See if you can use RegExp to solve (but it's not necessary).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(getPrices(['ice cream ($5.99)', 'banana ($0.20)', 'sandwich ($8.50)', 'soup ($1.99)']), [5.99, 0.2, 8.50, 1.99])",
			"Test.assertSimilar(getPrices(['salad ($4.99)']), [4.99])",
			"Test.assertSimilar(getPrices(['artichokes ($1.99)', 'rotiserrie chicken ($5.99)', 'gum ($0.75)']), [1.99, 5.99, 0.75])",
			"Test.assertSimilar(getPrices(['pizza ($2.99)', 'shampoo ($15.75)', 'trash bags ($15.00)']), [2.99, 15.75, 15])"
		],
		"starterFn": [
			"1\nfunction getPrices(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fbTF9EksvFpq3wZaX"
	},
	{
		"title": "Does the Cargo Fit? (Part 1)",
		"description": "<p><span>A ship has to transport cargo from one place to another, while picking up cargo along the way. Given the total amount of cargo and the types of cargo holds in the ship as arrays, create a function that returns </span><code>true</code><span> if all the cargo can fit on the ship, and </span><code>false</code><span> if it can't.</span></p><ul><li><span>\"S\" means 50 cargo space.</span></li><li><span>\"M\" means 100 cargo space.</span></li><li><span>\"L\" means 200 cargo space.</span></li></ul><h3><span>Examples</span></h3><pre><code>willFit([\"M\", \"L\", \"L\", \"M\"], [56, 62, 84, 90]) ➞ true\n\nwillFit([\"S\", \"S\", \"S\", \"S\", \"L\"], [40, 50, 60, 70 , 80, 90, 200]) ➞ false\n\nwillFit([\"L\", \"L\", \"M\"], [56, 62, 84, 90]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Calculate the cargo as a whole, and not for each seperate cargo hold (see example #2).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(willFit([\"M\", \"L\", \"L\", \"M\"], [56, 62, 84, 90]), true)",
			"Test.assertEquals(willFit([\"L\", \"L\", \"M\"], [56, 62, 84, 90]), true)",
			"Test.assertEquals(willFit([\"S\", \"S\", \"S\", \"S\", \"L\"], [40, 50, 60, 70 , 80, 90, 200]), false)",
			"Test.assertEquals(willFit([\"S\", \"L\"], [73 , 87, 95, 229]), false)"
		],
		"starterFn": [
			"1\nfunction willFit(holds, cargo) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7W8aPMTicPy6jbYr3"
	},
	{
		"title": "Format Date String",
		"description": "<p><span>Create a function that takes a date object and return string in the following format:</span></p><pre><code>YYYYMMDDHHmmSS</code></pre><p><span>The format should contain a 4 digit year, 2 digit month, 2 digit day, 2 digit hour(00-23), 2 digit minute and 2 digit second. If any of the value has only signle digit, you must use zero prefix, so that the result string length is always same.</span></p><h3><span>Examples</span></h3><pre><code>formatDate(new Date(2020, 6, 4, 8, 0, 0)) ➞ \"20200704080000\"\n\nformatDate(new Date(2019, 11, 31, 23, 59, 59)) ➞ \"20191231235959\"\n\nformatDate(new Date(2020, 6, 4)) ➞ \"20200704000000\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume Date year input will always be greater than 1970.</span></li><li><span>Try not to rely on default </span><code>Date.toString()</code><span> output in your impelementation.</span></li><li><span>Be aware that the </span><code>Date</code><span>'s month field is zero based (0 is January and 11 is December).</span></li></ul>",
		"publishedBy": "Zemian",
		"publishedByUrl": "https://edabit.com/user/6NamRMKM2yDS4bKsL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting"
		],
		"tests": [
			"Test.assertEquals(formatDate(new Date(2020, 6, 4, 8, 0, 0)), \"20200704080000\")",
			"Test.assertEquals(formatDate(new Date(2019, 11, 31, 23, 59, 59)), \"20191231235959\")",
			"Test.assertEquals(formatDate(new Date(1970, 0, 1, 00, 00, 00)), \"19700101000000\")",
			"Test.assertEquals(formatDate(new Date(2020, 6, 4)), \"20200704000000\")"
		],
		"starterFn": [
			"1\nfunction formatDate(date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mti3rGTDLyk4woxCi"
	},
	{
		"title": "Return the Date from Three Days Prior",
		"description": "<p><span>Given a </span><code>Date()</code><span> object, return the date from three days prior as a string: </span><code>\"2016-01-19\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code class=\"language-:\">threeDaysAgo(new Date(2018, 0, 1)) ➞ \"2017-12-29\"\n\nthreeDaysAgo(new Date(2015, 5, 17)) ➞ \"2015-06-14\"\n\nthreeDaysAgo(new Date(1965, 3, 15))➞ \"1965-04-12\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Your function must work in the past, present and future.</span></li><li><span>JavaScript months are zero based.</span></li><li><span>Your output should NOT be zero based: </span><code>2016, 0, 19</code><span> == </span><code>\"2016-01-19\"</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting"
		],
		"tests": [
			"Test.assertSimilar(threeDaysAgo(new Date(2017, 1, 1)), \"2017-01-29\");",
			"Test.assertSimilar(threeDaysAgo(new Date(1950, 6, 8)), \"1950-07-05\");",
			"Test.assertSimilar(threeDaysAgo(new Date(1965, 3, 15)), \"1965-04-12\");",
			"Test.assertSimilar(threeDaysAgo(new Date(2025, 4, 24)), \"2025-05-21\");",
			"Test.assertSimilar(threeDaysAgo(new Date(1965, 3, 15)), \"1965-04-12\");",
			"Test.assertSimilar(threeDaysAgo(new Date(2015, 5, 17)), \"2015-06-14\");"
		],
		"starterFn": [
			"1\nfunction threeDaysAgo(date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LvhSTYCbRDS4XTNmx"
	},
	{
		"title": "Sum of Positive Integers",
		"description": "<p><span>Create a function that takes a string containing integers as well as other characters and return the sum of the positive integers only.</span></p><h3><span>Examples</span></h3><pre><code>positiveSum(\"-12#-33 13%14&amp;-11\") ➞ 27\n// 13 + 14 = 27\n\npositiveSum(\"22 13%14&amp;-11-22 13 12 0\") ➞ 74\n// 22 + 13 + 14 + 13 + 12 = -33</code></pre><h3><span>Notes</span></h3><ul><li><span>There is at least one positive integer.</span></li><li><span>Each integer is separated by a space, #, %, &amp;, etc.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(positiveSum(\"-12#-33 13%14&-11\"), 27)",
			"Test.assertEquals(positiveSum(\"22 13%14&-11-22 13 12 0\"), 74)",
			"Test.assertEquals(positiveSum(\"3%4&-1 13 a 20 -2 b c\"), 40)",
			"Test.assertEquals(positiveSum(\"2 3%-144&-1123 -2122\"), 5)",
			"Test.assertEquals(positiveSum(\"-123 -8 1\"), 1)",
			"Test.assertEquals(positiveSum(\"-122 2\"), 2)",
			"Test.assertEquals(positiveSum(\"-121 0 3\"), 3)",
			"Test.assertEquals(positiveSum(\"0 12 12 2\"), 26)"
		],
		"starterFn": [
			"1\nfunction positiveSum(chars) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xjv7kk6Q7tDhyZTtZ"
	},
	{
		"title": "Split and Delimit",
		"description": "<p><span>Write a function that splits a string into substrings of size n, adding a specified delimiter between each of the pieces.</span></p><h3><span>Examples</span></h3><pre><code>splitAndDelimit(\"bellow\", 2, \"&amp;\") ➞ \"be&amp;ll&amp;ow\"\n\nsplitAndDelimit(\"magnify\", 3, \":\") ➞ \"mag:nif:y\"\n\nsplitAndDelimit(\"poisonous\", 2, \"~\") ➞ \"po~is~on~ou~s\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(splitAndDelimit(\"bellow\", 2, '&'), \"be&ll&ow\")",
			"Test.assertEquals(splitAndDelimit(\"magnify\", 3, ':'), \"mag:nif:y\")",
			"Test.assertEquals(splitAndDelimit(\"poisonous\", 2, '~'), \"po~is~on~ou~s\")",
			"Test.assertEquals(splitAndDelimit(\"shape-shifting\", 5, '^'), \"shape^-shif^ting\")",
			"Test.assertEquals(splitAndDelimit(\"nebulous\", 1, '#'), \"n#e#b#u#l#o#u#s\")"
		],
		"starterFn": [
			"1\nfunction splitAndDelimit(str, num, del) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/D7wauJQRRCnCqroEZ"
	},
	{
		"title": "Zygodromes",
		"description": "<p><span>A number is Zygodrome if can be partitioned into clusters of repeating digits with a length equals or greater than two (as to say that repeating digits need to be placed as  an adjacent pair or a greater group, and that no single digits are allowed).</span></p><p><span>Given a non-negative integer </span><code>num</code><span>, implement a function that returns </span><code>true</code><span> if </span><code>num</code><span> is a Zygodrome number, or </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isZygodrome(11) ➞ true\n// 11 is a pair of repeated digits\n\nisZygodrome(33322) ➞ true\n// 333 is a triplet of repeated digits, and 22 is a pair\n\nisZygodrome(5) ➞ false\n// 5 is a single digit, it doesn't form a pair\n\nisZygodrome(1001) ➞ false\n// 00 is a pair, but the two 1's are not adjacent</code></pre><h3><span>Notes</span></h3><ul><li><span>Trivia: the number </span><code>9997777</code><span> is the only known Zygodrome prime whose index in the Zygodromes sequence (</span><code>664444</code><span>) is a prime in turn.</span></li><li><span>You can expect only non-negative integers as given input, without exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isZygodrome(11), true)",
			"Test.assertEquals(isZygodrome(222), true)",
			"Test.assertEquals(isZygodrome(223), false)",
			"Test.assertEquals(isZygodrome(1001), false)",
			"Test.assertEquals(isZygodrome(1100), true)",
			"Test.assertEquals(isZygodrome(11122), true)",
			"Test.assertEquals(isZygodrome(3344466777), true)",
			"Test.assertEquals(isZygodrome(33444667778), false)",
			"Test.assertEquals(isZygodrome(8866611229999), true)",
			"Test.assertEquals(isZygodrome(9977866655522), false)",
			"Test.assertEquals(isZygodrome(99999999), true)",
			"Test.assertEquals(isZygodrome(0), false)"
		],
		"starterFn": [
			"1\nfunction isZygodrome(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7bJApSrKyv72yWa2d"
	},
	{
		"title": "Sort by Answer",
		"description": "<p><span>Given an array of </span><em><span>math expressions</span></em><span>, create a function which </span><strong><span>sorts</span></strong><span> the array by </span><strong><span>their answer</span></strong><span>. It should be sorted in </span><strong><span>ascending</span></strong><span> order.</span></p><h3><span>Examples</span></h3><pre><code>sortByAnswer([\"1 + 1\", \"1 + 7\", \"1 + 5\", \"1 + 4\"]) ➞ [\"1 + 1\", \"1 + 4\", \"1 + 5\", \"1 + 7\"]\n\nsortByAnswer([\"4 - 4\", \"2 - 2\", \"5 - 5\", \"10 - 10\"]) ➞ [\"4 - 4\", \"2 - 2\", \"5 - 5\", \"10 - 10\"]\n\nsortByAnswer([\"2 + 2\", \"2 - 2\", \"2 * 1\"]) ➞ [\"2 - 2\", \"2 * 1\", \"2 + 2\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>If multiple expressions have the </span><em><span>same answer</span></em><span>, put them in the order of which they appear (see example #2).</span></li><li><span>You won't need to worry about </span><em><span>divisions by zero</span></em><span>.</span></li><li><span>The symbol used for multiplication is </span><code>x</code><span> instead of </span><code>*</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertSimilar(sortByAnswer([\"1 + 1\", \"1 + 7\", \"1 + 5\", \"1 + 4\"]), [\"1 + 1\", \"1 + 4\", \"1 + 5\", \"1 + 7\"])",
			"Test.assertSimilar(sortByAnswer([\"2 + 2\", \"2 - 2\", \"2 x 2\", \"2 / 2\"]), [\"2 - 2\", \"2 / 2\", \"2 + 2\", \"2 x 2\"])",
			"Test.assertSimilar(sortByAnswer([\"1 x 1\", \"3 x 3\", \"-1 x -1\", \"-3 x -3\"]), [\"1 x 1\", \"-1 x -1\", \"3 x 3\", \"-3 x -3\"])",
			"Test.assertSimilar(sortByAnswer([\"4 - 4\", \"2 - 2\", \"5 - 5\", \"10 - 10\"]), [\"4 - 4\", \"2 - 2\", \"5 - 5\", \"10 - 10\"], \"The answers are all the same, so return the elements in the order they came\")",
			"Test.assertSimilar(sortByAnswer([\"2 + 2\", \"2 - 2\", \"2 x 1\"]), [\"2 - 2\", \"2 x 1\", \"2 + 2\"])",
			"Test.assertSimilar(sortByAnswer([\"4 - 4\", \"2 - 2\", \"5 + 5\", \"10 - 10\"]), [\"4 - 4\", \"2 - 2\", \"10 - 10\", \"5 + 5\"])",
			"Test.assertSimilar(sortByAnswer([\"49 x -6\", \"21 - 25\", \"-11 / 26\", \"6 + -37\", \"1 / 49\", \"22 x -46\", \"-7 / 10\", \"16 + -34\", \"-37 x -27\", \"23 / -41\"]), [\"22 x -46\", \"49 x -6\", \"6 + -37\", \"16 + -34\", \"21 - 25\", \"-7 / 10\", \"23 / -41\", \"-11 / 26\", \"1 / 49\", \"-37 x -27\"])",
			"Test.assertSimilar(sortByAnswer([\"18 / -13\", \"41 + -14\", \"6 x 19\", \"-7 x 3\", \"44 + 37\", \"-13 + -32\", \"47 + -15\"]), [\"-13 + -32\", \"-7 x 3\", \"18 / -13\", \"41 + -14\", \"47 + -15\", \"44 + 37\", \"6 x 19\"])",
			"Test.assertSimilar(sortByAnswer([\"-45 - 30\", \"-6 / 21\", \"-31 x 40\"]), [\"-31 x 40\", \"-45 - 30\", \"-6 / 21\"])",
			"Test.assertSimilar(sortByAnswer([\"4 + 13\", \"14 + 42\", \"-25 / 39\", \"-18 / 49\", \"34 + 41\", \"21 / -32\", \"3 / -17\", \"-38 + 38\", \"22 + 15\", \"-11 x 33\", \"-20 x -25\", \"3 / -28\", \"44 - 15\", \"26 / -29\", \"-23 - 43\", \"4 / 26\", \"8 + -45\", \"-4 + 28\", \"0 / 46\", \"8 x -9\"]), [\"-11 x 33\", \"8 x -9\", \"-23 - 43\", \"8 + -45\", \"26 / -29\", \"21 / -32\", \"-25 / 39\", \"-18 / 49\", \"3 / -17\", \"3 / -28\", \"-38 + 38\", \"0 / 46\", \"4 / 26\", \"4 + 13\", \"-4 + 28\", \"44 - 15\", \"22 + 15\", \"14 + 42\", \"34 + 41\", \"-20 x -25\"])",
			"Test.assertSimilar(sortByAnswer([\"-42 - 47\", \"7 x 17\", \"-36 + -30\"]), [\"-42 - 47\", \"-36 + -30\", \"7 x 17\"])",
			"Test.assertSimilar(sortByAnswer([\"-45 / 7\", \"44 - 49\", \"-17 x 49\", \"-22 + -40\"]), [\"-17 x 49\", \"-22 + -40\", \"-45 / 7\", \"44 - 49\"])",
			"Test.assertSimilar(sortByAnswer([\"2 + -18\", \"-22 + 11\", \"-49 + -31\", \"32 / -20\", \"-10 x 5\", \"35 x -3\"]), [\"35 x -3\", \"-49 + -31\", \"-10 x 5\", \"2 + -18\", \"-22 + 11\", \"32 / -20\"])",
			"Test.assertSimilar(sortByAnswer([\"-35 - 27\", \"38 - 41\", \"47 x -44\", \"-6 x -38\"]), [\"47 x -44\", \"-35 - 27\", \"38 - 41\", \"-6 x -38\"])",
			"Test.assertSimilar(sortByAnswer([\"23 / 33\", \"-5 / 26\", \"36 + -1\", \"-35 / 26\", \"3 / 4\", \"-44 - 42\", \"-30 - 20\", \"-12 - 9\", \"33 - 23\", \"14 + 12\", \"-28 + 10\", \"14 + -24\", \"48 x -47\", \"35 x 47\", \"-28 x 9\", \"-26 + 2\"]), [\"48 x -47\", \"-28 x 9\", \"-44 - 42\", \"-30 - 20\", \"-26 + 2\", \"-12 - 9\", \"-28 + 10\", \"14 + -24\", \"-35 / 26\", \"-5 / 26\", \"23 / 33\", \"3 / 4\", \"33 - 23\", \"14 + 12\", \"36 + -1\", \"35 x 47\"])",
			"Test.assertSimilar(sortByAnswer([\"-26 / -27\", \"31 / -5\", \"-20 / -39\", \"-41 x 37\", \"14 x 6\", \"-2 - 13\", \"-5 - 14\", \"22 + 45\", \"4 + 2\", \"35 + 43\", \"46 + -11\", \"19 / 45\", \"-27 + -43\", \"-30 + -10\", \"-6 x -36\", \"-2 - 37\", \"4 - 41\", \"27 / -30\"]), [\"-41 x 37\", \"-27 + -43\", \"-30 + -10\", \"-2 - 37\", \"4 - 41\", \"-5 - 14\", \"-2 - 13\", \"31 / -5\", \"27 / -30\", \"19 / 45\", \"-20 / -39\", \"-26 / -27\", \"4 + 2\", \"46 + -11\", \"22 + 45\", \"35 + 43\", \"14 x 6\", \"-6 x -36\"])",
			"Test.assertSimilar(sortByAnswer([\"-5 / 25\", \"0 / 24\", \"-17 x 28\", \"-22 x 49\"]), [\"-22 x 49\", \"-17 x 28\", \"-5 / 25\", \"0 / 24\"])",
			"Test.assertSimilar(sortByAnswer([\"-37 / -24\", \"-21 - 34\", \"40 x -7\", \"19 x 40\", \"-40 / -5\"]), [\"40 x -7\", \"-21 - 34\", \"-37 / -24\", \"-40 / -5\", \"19 x 40\"])",
			"Test.assertSimilar(sortByAnswer([\"13 / 47\", \"31 - 27\", \"-47 - 46\", \"-1 / -1\", \"28 + -23\", \"-23 + 15\", \"34 / -8\", \"-36 + 25\", \"-24 x -26\", \"-12 + 33\", \"2 + 17\", \"-36 + 12\"]), [\"-47 - 46\", \"-36 + 12\", \"-36 + 25\", \"-23 + 15\", \"34 / -8\", \"13 / 47\", \"-1 / -1\", \"31 - 27\", \"28 + -23\", \"2 + 17\", \"-12 + 33\", \"-24 x -26\"])",
			"Test.assertSimilar(sortByAnswer([\"31 x 21\", \"-31 x 4\", \"-48 x -20\", \"-26 x -36\", \"-38 - 18\", \"-42 / -42\", \"42 - 38\"]), [\"-31 x 4\", \"-38 - 18\", \"-42 / -42\", \"42 - 38\", \"31 x 21\", \"-26 x -36\", \"-48 x -20\"])",
			"Test.assertSimilar(sortByAnswer([\"30 - 0\", \"23 x -31\", \"25 + 33\", \"42 + 5\", \"38 x 36\", \"22 / -23\", \"12 - 13\", \"47 x -48\", \"16 + -31\"]), [\"47 x -48\", \"23 x -31\", \"16 + -31\", \"12 - 13\", \"22 / -23\", \"30 - 0\", \"42 + 5\", \"25 + 33\", \"38 x 36\"])",
			"Test.assertSimilar(sortByAnswer([\"33 / -38\", \"50 x 0\", \"-50 x -43\", \"-34 x -15\", \"-26 - 11\", \"2 / 26\", \"-17 x -47\", \"-34 x -36\", \"-14 / -46\", \"10 - 10\", \"25 + 4\"]), [\"-26 - 11\", \"33 / -38\", \"50 x 0\", \"10 - 10\", \"2 / 26\", \"-14 / -46\", \"25 + 4\", \"-34 x -15\", \"-17 x -47\", \"-34 x -36\", \"-50 x -43\"])",
			"Test.assertSimilar(sortByAnswer([\"-24 / 27\"]), [\"-24 / 27\"])",
			"Test.assertSimilar(sortByAnswer([\"41 - 41\", \"31 x -22\", \"-25 + -1\", \"-47 - 23\", \"-41 x 0\"]), [\"31 x -22\", \"-47 - 23\", \"-25 + -1\", \"41 - 41\", \"-41 x 0\"])",
			"Test.assertSimilar(sortByAnswer([\"-19 + -6\", \"-44 + -20\", \"2 / 5\", \"39 - 5\", \"-43 x 23\"]), [\"-43 x 23\", \"-44 + -20\", \"-19 + -6\", \"2 / 5\", \"39 - 5\"])",
			"Test.assertSimilar(sortByAnswer([\"1 + 6\", \"-11 + 31\", \"-15 - 32\", \"39 / -42\", \"38 / 6\", \"15 - 41\"]), [\"-15 - 32\", \"15 - 41\", \"39 / -42\", \"38 / 6\", \"1 + 6\", \"-11 + 31\"])"
		],
		"starterFn": [
			"1\nfunction sortByAnswer(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9BgTpRsJYhX4T4ZXk"
	},
	{
		"title": "Ready, Set... Get!",
		"description": "<p><span>You have to build a rudimentary architecture that will simulate a system of XP points distribution among two students that solve a series of given challenges on Edabit.</span></p><p><strong><span>Step 1: Build a class</span></strong><span> </span><code>Challenge</code></p><p><span>The constructor parameters are </span><code>id</code><span> and </span><code>level</code><span>. The </span><code>id</code><span> will be the numerical identifier of the challenge, and </span><code>level</code><span> will be a code made of two uppercased letters:</span></p><ul><li><code>\"VE\"</code><span> = \"Very Easy\"</span></li><li><code>\"EA\"</code><span> = \"Easy\"</span></li><li><code>\"ME\"</code><span> = \"Medium\"</span></li><li><code>\"HA\"</code><span> = \"Hard\"</span></li><li><code>\"VH\"</code><span> = \"Very Hard\"</span></li><li><code>\"EX\"</code><span> = \"Expert\"</span></li></ul><p><strong><span>Step 2: Build a method for class</span></strong><span> </span><code>Challenge</code></p><p><span>The name of the method inside class </span><code>Challenge</code><span> is </span><code>points()</code><span>.</span></p><p><span>The method must return the amount of points earned solving a challenge, based on the level of the challenge:</span></p><ul><li><code>VE</code><span> = 5 XP</span></li><li><code>EA</code><span> = 10 XP</span></li><li><code>ME</code><span>= 20 XP</span></li><li><code>HA</code><span>= 40 XP</span></li><li><code>VH</code><span> = 80 XP</span></li><li><code>EX</code><span> = 120 XP</span></li></ul><p><strong><span>Step 3: Build a class</span></strong><span> </span><code>User</code></p><p><span>The constructor parameters are </span><code>name</code><span>, </span><code>xp</code><span> and </span><code>log</code><span>. The </span><code>name</code><span> will be, trivially, the username.  The </span><code>xp</code><span> is the accumulator that stores the XP points earned. The </span><code>log</code><span> is a sort of </span><em><span>diary</span></em><span> of the user: is an array that will store the </span><code>id</code><span> of the challenges solved by the user.</span></p><p><strong><span>Step 4: Build a method for the class</span></strong><span> </span><code>User</code></p><p><span>The name of the method to implement inside the class </span><code>User</code><span> is </span><code>newSolvedChallenge()</code><span> and as a parameter, it will accept an object of the </span><code>Challenge</code><span> class.</span></p><p><span>The method must increment the </span><code>xp</code><span> of the user and store the challenge </span><code>id</code><span> into the array </span><code>log</code><span>.</span></p><p><strong><span>Step 5: Declare the instances needed for the tests</span></strong></p><p><span>Now that everything is ready, you have to set the exercise and declare the instances of the created classes, for sustaining the tests that are made. Start with the users declarations, they are two:</span></p><ul><li><code>user1</code><span> ➞ </span><code>name</code><span> = \"Madam\" | </span><code>xp</code><span> = 0 | </span><code>log</code><span> = </span><span>[</span><span>]</span></li><li><code>user2</code><span> ➞ </span><code>name</code><span> = \"Steve\" | </span><code>xp</code><span> = 0 | </span><code>log</code><span> = </span><span>[</span><span>]</span></li></ul><p><span>Now, declare the challenges, they are six:</span></p><ul><li><code>challenge1</code><span> ➞ </span><code>id</code><span> = 1 | </span><code>level</code><span> = \"VE\";</span></li><li><code>challenge2</code><span> ➞ </span><code>id</code><span> = 2 | </span><code>level</code><span> = \"EA\";</span></li><li><code>challenge3</code><span> ➞ </span><code>id</code><span> = 3 | </span><code>level</code><span> = \"ME\";</span></li><li><code>challenge4</code><span> ➞ </span><code>id</code><span> = 4 | </span><code>level</code><span> = \"HA\";</span></li><li><code>challenge5</code><span> ➞ </span><code>id</code><span> = 5 | </span><code>level</code><span> = \"VH\";</span></li><li><code>challenge6</code><span> ➞ </span><code>id</code><span> = 6 | </span><code>level</code><span> = \"EX\";</span></li></ul><p><span>Finally, you have to declare which are the challenges solved by the users, using the </span><em><span>setter</span></em><span> that you have implemented before:</span></p><ul><li><p><span>Madam solves the following challenges, in the order:</span></p><ul><li><code>challenge1</code><span> , </span><code>challenge4</code><span> , </span><code>challenge6</code></li></ul></li><li><p><span>Steve solves the,following challenges, in the order:</span></p><ul><li><code>challenge5</code><span> , </span><code>challenge3</code><span>, </span><code>challenge2</code></li></ul></li></ul><p><strong><span>Step 6: The testing mechanics</span></strong></p><p><span>Tests will verify if after calling the properties and methods of the instance created by you, an expected result is returned. So, </span><strong><span>you don't have to return a result</span></strong><span>, but just being sure that everything is set according to Instructions.</span></p><h3><span>Examples</span></h3><pre><code>user1.name ➞ \"Madam\"\n\nuser2.xp ➞ 110\n// Steve has solved challenges 5, 3 and 2 (80 + 20 + 10 points)\n\nuser1.log ➞ [1, 4, 6]\n// Remember to respect the order given in Instructions for to store data into the log\n\nchallenge4.level ➞ \"HA\"\n\nchallenge3.id ➞ 3\n\nchallenge1.points ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>When implementing methods you can use normal functions, or a </span><em><span>set/get</span></em><span> combination. See the </span><strong><span>Resources</span></strong><span> to get an overall idea about the difference between these two procedures, and if you wish to leave your opinion, the </span><strong><span>Comments</span></strong><span> tab.</span></li><li><span>If you want to go deeper, see </span><a target=\"_blank\" href=\"https://nemisj.com/why-getterssetters-is-a-bad-idea-in-javascript/\"><span>a negative point of view</span></a><span> about </span><em><span>setters &amp; getters</span></em><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"data_structures",
			"functional_programming"
		],
		"tests": [
			"// Test user1",
			"Test.assertEquals(user1.name, \"Madam\")",
			"Test.assertEquals(user1.xp, 165)",
			"Test.assertSimilar(user1.log, [1, 4, 6])",
			"// Test user2",
			"Test.assertEquals(user2.name, \"Steve\")",
			"Test.assertEquals(user2.xp, 110)",
			"Test.assertSimilar(user2.log, [5, 3, 2])",
			"// Test challenges",
			"Test.assertEquals(challenge1.id, 1);",
			"Test.assertEquals(challenge2.level, \"EA\")",
			"Test.assertEquals(challenge3.points, 20)",
			"Test.assertEquals(challenge4.id, 4)",
			"Test.assertEquals(challenge5.level, \"VH\")",
			"Test.assertEquals(challenge6.points, 120)",
			"// Trivial tests",
			"Test.assertEquals(user1.xp > user2.xp, true)",
			"Test.assertEquals(challenge6.points < challenge1.points, false)"
		],
		"starterFn": [
			"1\nclass Challenge {",
			"2\n  // Build class Challenge: constructor + getter",
			"3\n}",
			"4\n​",
			"5\nclass User {",
			"6\n  // Build class User: constructor + setter",
			"7\n}",
			"8\n​",
			"9\n// 1. Declare the class instances (two users and six challenges)",
			"10\n// 2. Set the challenges solved by the users"
		],
		"url": "https://edabit.com/challenge/2FF7RKw9RLwc3EBY9"
	},
	{
		"title": "Minimum Removals to Make Two Strings Anagrams",
		"description": "<p><span>Create a function that returns the </span><strong><span>smallest number of letter removals</span></strong><span> so that two strings are </span><strong><span>anagrams</span></strong><span> of each other.</span></p><h3><span>Examples</span></h3><pre><code>minRemovals(\"abcde\", \"cab\") ➞ 2\n// Remove \"d\", \"e\" to make \"abc\" and \"cab\".\n\nminRemovals(\"deafk\", \"kfeap\") ➞ 2\n// Remove \"d\" and \"p\" from the first and second word, respectively.\n\nminRemovals(\"acb\", \"ghi\") ➞ 6\n// Remove all letters from both words to get \"\" and \"\".</code></pre><h3><span>Notes</span></h3><ul><li><span>An anagram is any string that can be formed by shuffling the characters of the original string. For example: </span><code>baedc</code><span> is an anagram of </span><code>abcde</code><span>.</span></li><li><span>An empty string can be considered an anagram of itself.</span></li><li><span>Characters won't be used more than once per string.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertEquals(minRemovals(\"abcde\", \"cab\"), 2)",
			"Test.assertEquals(minRemovals(\"deafk\", \"kfeap\"), 2)",
			"Test.assertEquals(minRemovals(\"abc\", \"ghi\"), 6)",
			"Test.assertEquals(minRemovals(\"abcxyz\", \"ghixytz\"), 7)"
		],
		"starterFn": [
			"1\nfunction minRemovals(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MAAWsTiLs6s4xbLLW"
	},
	{
		"title": "Repeat the Shorter String",
		"description": "<p><span>Write a function that repeats the shorter string until it is equal to the length of the longer string.</span></p><h3><span>Examples</span></h3><pre><code>lengthen(\"abcdefg\", \"ab\") ➞ \"abababa\"\n\nlengthen(\"ingenius\", \"forest\") ➞ \"forestfo\"\n\nlengthen(\"clap\", \"skipping\") ➞ \"clapclap\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Both strings will differ in length.</span></li><li><span>Both strings will contain at least one character.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(lengthen(\"abcdefg\", \"ab\"), \"abababa\")",
			"Test.assertEquals(lengthen(\"ingenius\", \"forest\"), \"forestfo\")",
			"Test.assertEquals(lengthen(\"skipping\", \"clap\"), \"clapclap\")",
			"Test.assertEquals(lengthen(\"k\", \"champagne\"), \"kkkkkkkkk\")",
			"Test.assertEquals(lengthen(\"DUH\", \"champagne\"), \"DUHDUHDUH\")"
		],
		"starterFn": [
			"1\nfunction lengthen(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/i5ZanfQWsJ8EGheW8"
	},
	{
		"title": "Determine if Three Points are on a Line",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if three points belong to the same line, and </span><code>false</code><span> otherwise. Each point is represented by an array consisting of an x- and y-coordinate.</span></p><h3><span>Examples</span></h3><pre><code>sameLine([[0, 0], [1, 1], [3, 3]]) ➞ true\n\nsameLine([[-2, -1], [2, 1], [0, 0]]) ➞ true\n\nsameLine([[-2, 0], [-10, 0], [-8, 0]]) ➞ true\n\nsameLine([[0, 0], [1, 1], [1, 2]]) ➞ false\n\nsameLine([[3, 4], [3, 5], [6, 6]]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Note the special case of a vertical line.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sameLine([[0, 0], [1, 1], [3, 3]]), true)",
			"Test.assertEquals(sameLine([[-2, -1], [2, 1], [0, 0]]), true)",
			"Test.assertEquals(sameLine([[-2, 0], [-10, 0], [-8, 0]]), true)",
			"Test.assertEquals(sameLine([[0, 0], [0, 5], [0, 7]]), true)",
			"Test.assertEquals(sameLine([[9, 9], [8, 8], [6, 6]]), true)",
			"Test.assertEquals(sameLine([[0, 0], [1, 1], [1, 2]]), false)",
			"Test.assertEquals(sameLine([[3, 4], [3, 5], [6, 6]]), false)",
			"Test.assertEquals(sameLine([[9, 8], [8, 8], [6, 6]]), false)"
		],
		"starterFn": [
			"1\nfunction sameLine(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Mzd9ZxakCh36XCTGf"
	},
	{
		"title": "RegEx XXI : Group Ranges - Non-capturing group (?:x)",
		"description": "<p><strong><span>Groups and ranges</span></strong><span> indicate groups and ranges of expression characters.  </span><strong><span>Non-capturing groups</span></strong><span> matches \"x\" and behaves like capturing groups, but it </span><strong><span>does not</span></strong><span> remember the match.</span></p><p><span>Keep in mind that capturing groups have a performance penalty. If you don't need the matched substring to be recalled, prefer </span><strong><span>non-capturing groups</span></strong><span>.</span></p><p><span>Write a RegEx that matches colors in the format #abc or #abcdef. That is: # followed by 3 or 6 hexadecimal digits. Use a </span><strong><span>non capturing group</span></strong><span> in your expression.</span></p><pre><code>let REGEXP = /your regexp/g\nlet str = \"color: #3f3; background-color: #AA00ef; and: #abcd\"\nstr.match(REGEXP) ; ➞  #3f3 #AA00ef</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex"
		],
		"tests": [
			"let str1 = \"color: #3f3; background-color: #AA00ef; and: #abcd\"",
			"​",
			"const validate = (REGEXP) => {",
			"   if(!/\\(\\?\\:/.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"Test.assertNotEquals(testExp(str1), \"invalid\", \"You are required to use a non-capturing group in your expression\")",
			"Test.assertSimilar(testExp(str1), [\"#3f3\",\"#AA00ef\"])",
			"​",
			"// credits to https://javascript.info/regexp-groups"
		],
		"starterFn": [
			"1\nlet REGEXP = /* Write your expression here */gi"
		],
		"url": "https://edabit.com/challenge/yjAes6mGHe9DJpRgh"
	},
	{
		"title": "Decimal and Binary Palindromes",
		"description": "<p><span>A number/string is a </span><em><span>palindrome</span></em><span> if the digits/characters are the same when read both forward and backward. Examples include \"racecar\" and 12321.  Given a positive number </span><code>n</code><span>, check if </span><code>n</code><span> or the binary representation of </span><code>n</code><span> is palindromic. Return the following:</span></p><ul><li><code>\"Decimal only.\"</code><span> if only </span><code>n</code><span> is a palindrome.</span></li><li><code>\"Binary only.\"</code><span> if only the binary representation of </span><code>n</code><span> is a palindrome.</span></li><li><code>\"Decimal and binary.\"</code><span> if both are palindromes.</span></li><li><code>\"Neither!\"</code><span> if neither are palindromes.</span></li></ul><h3><span>Examples</span></h3><pre><code>palindromeType(1306031) ➞ \"Decimal only.\"\n// decimal = 1306031\n// binary  = \"100111110110110101111\"\n\npalindromeType(427787) ➞ \"Binary only.\"\n// decimal = 427787\n// binary  = \"1101000011100001011\"\n\npalindromeType(313) ➞ \"Decimal and binary.\"\n// decimal = 313\n// binary  = 100111001\n\npalindromeType(934) ➞ \"Neither!\"\n// decimal = 934\n// binary  = \"1110100110\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for ways to convert to binary.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(palindromeType(1934391), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(9994521), \"Binary only.\")",
			"Test.assertEquals(palindromeType(5841485), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(8337738), \"Neither!\")",
			"Test.assertEquals(palindromeType(7447), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(18985), \"Binary only.\")",
			"Test.assertEquals(palindromeType(7), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(1306031), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(1), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(1903127), \"Binary only.\")",
			"Test.assertEquals(palindromeType(4), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(48084), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(427787), \"Binary only.\")",
			"Test.assertEquals(palindromeType(456), \"Neither!\")",
			"Test.assertEquals(palindromeType(313), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(3664663), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(585585), \"Decimal and binary.\")",
			"Test.assertEquals(palindromeType(14441), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(8494948), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(932), \"Neither!\")",
			"Test.assertEquals(palindromeType(7115931), \"Binary only.\")",
			"Test.assertEquals(palindromeType(101), \"Decimal only.\")",
			"Test.assertEquals(palindromeType(6286333), \"Binary only.\")"
		],
		"starterFn": [
			"1\nfunction palindromeType(n) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/P5aEB9rvFibg4rRBg"
	},
	{
		"title": "Truncate String at a Given Length",
		"description": "<p><span>Create a function that takes a string (the string to truncate) and a number (the </span><em><span>maximum</span></em><span> length of the truncated string) as arguments and returns the truncated string at the given length.</span></p><h3><span>Examples</span></h3><pre><code>truncate(\"Lorem ipsum dolor sit amet.\", 11) ➞ \"Lorem ipsum\"\n\ntruncate(\"Lorem ipsum dolor sit amet.\", 16) ➞ \"Lorem ipsum\"\n\ntruncate(\"Lorem ipsum dolor sit amet.\", 17) ➞ \"Lorem ipsum dolor\"</code></pre><h3><span>Notes</span></h3><ul><li><span>To \"truncate\" means </span><em><span>\"to shorten by cutting off the top or end\"</span></em><span>.</span></li><li><span>If a word is trucated in the middle, discard it in the output (see 2nd example above).</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"// \"Clean cut\".",
			"Test.assertEquals(truncate(\"Lorem ipsum dolor sit amet.\", 11), \"Lorem ipsum\")",
			"​",
			"// \"Dirty cut\", you have to discard the last word.",
			"Test.assertEquals(truncate(\"Lorem ipsum dolor sit amet.\", 16), \"Lorem ipsum\", \"You have to discard the last word.\")",
			"​",
			"// If length is greater than the strings length.",
			"Test.assertEquals(truncate(\"Lorem ipsum\", 20), \"Lorem ipsum\", \"If length is greater than the strings length.\")",
			"​",
			"// Some extra tests.",
			"Test.assertEquals(truncate(\"Lorem ipsum\", 4), \"\")",
			"Test.assertEquals(truncate(\"Lorem ipsum\", 0), \"\")",
			"Test.assertEquals(truncate(\"\", 30), \"\")"
		],
		"starterFn": [
			"1\nfunction truncate(string, length) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pYSX8duMGhQCM3mWZ"
	},
	{
		"title": "Valid JavaScript Comments",
		"description": "<p><span>In JavaScript, there are two types of comments:</span></p><ol><li><span>Single-line comments start with </span><code>//</code></li><li><span>Multi-line or inline comments start with </span><code>/*</code><span> and end with </span><code>*/</code></li></ol><p><span>The input will be a sequence of </span><code>//</code><span>, </span><code>/*</code><span> and </span><code>*/</code><span>. </span><strong><span>Every </span><code>/*</code><span> must have a </span><code>*/</code><span> that immediately follows it</span></strong><span>. To add, there can be </span><strong><span>no single-line comments in between multi-line comments</span></strong><span> in between the </span><code>/*</code><span> and </span><code>*/</code><span>.</span></p><p><span>Create a function that returns </span><code>true</code><span> if comments are properly formatted, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>commentsCorrect(\"//////\") ➞ true\n// 3 single-line comments: [\"//\", \"//\", \"//\"]\n\ncommentsCorrect(\"/**//**////**/\") ➞ true\n// 3 multi-line comments + 1 single-line comment:\n// [\"/*\", \"*/\", \"/*\", \"*/\", \"//\", \"/*\", \"*/\"]\n\ncommentsCorrect(\"///*/**/\") ➞ false\n// The first /* is missing a */\n\ncommentsCorrect(\"/////\") ➞ false\n// The 5th / is single, not a double //</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(commentsCorrect(\"//////\"), true)",
			"Test.assertEquals(commentsCorrect(\"/**//**////**/\"), true)",
			"Test.assertEquals(commentsCorrect(\"/**//**//**//**/\"), true)",
			"Test.assertEquals(commentsCorrect(\"///**///\"), true)",
			"Test.assertEquals(commentsCorrect(\"/**//////**//**////**/////\"), true)",
			"Test.assertEquals(commentsCorrect(\"//\"), true)",
			"Test.assertEquals(commentsCorrect(\"/**/\"), true)",
			"Test.assertEquals(commentsCorrect(\"///*/**/\"), false)",
			"Test.assertEquals(commentsCorrect(\"//*/**/\"), false)",
			"Test.assertEquals(commentsCorrect(\"/////\"), false)",
			"Test.assertEquals(commentsCorrect(\"///\"), false)",
			"Test.assertEquals(commentsCorrect(\"/**///**/\"), false)",
			"Test.assertEquals(commentsCorrect(\"/**/////**/\"), false)"
		],
		"starterFn": [
			"1\nfunction commentsCorrect(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rQj7JcXSnG5sy33rr"
	},
	{
		"title": "Deep Array Count",
		"description": "<p><span>Create a function that takes an array and returns the number of ALL elements within it (including those within the inner-level array(s)).</span></p><h3><span>Examples</span></h3><pre><code>deepCount([1, 2, 3]) ➞ 3\n\ndeepCount([[1], [2], [3]]) ➞ 6\n\ndeepCount([\"x\", \"y\", [\"z\"]]) ➞ 4\n\ndeepCount([\"a\", \"b\", [\"c\", \"d\", [\"e\"]]]) ➞ 7</code></pre><h3><span>Notes</span></h3><p><span>In the examples above, notice how the sub-arrays within the main array count as an element </span><em><span>as well as</span></em><span> the elements within that sub-array.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(deepCount([1, 2, 3]), 3);",
			"Test.assertEquals(deepCount([\"x\", \"y\", [\"z\"]]), 4);",
			"Test.assertEquals(deepCount([\"a\", \"b\", [\"c\", \"d\", [\"e\"]]]), 7);",
			"Test.assertEquals(deepCount([[1], [2], [3]]), 6);",
			"Test.assertEquals(deepCount([[[[[[[[[]]]]]]]]]), 8);",
			"Test.assertEquals(deepCount([null]), 1);",
			"Test.assertEquals(deepCount([[]]), 1);",
			"Test.assertEquals(deepCount([[undefined], [null, [\"edabit\"]], [0]]), 8);"
		],
		"starterFn": [
			"1\nfunction deepCount(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Aq9mrJ9FWyxWCpgLq"
	},
	{
		"title": "Map the Letters in a String",
		"description": "<p><span>Given a word, create an object that stores the indexes of each letter in an array.</span></p><ul><li><span>Make sure the letters are the keys.</span></li><li><span>Make sure the letters are symbols.</span></li><li><span>Make sure the indexes are stored in an array and those arrays are values.</span></li></ul><h3><span>Examples</span></h3><pre><code>mapLetters(\"dodo\") ➞ { d: [0, 2], o: [1, 3] }\n\nmapLetters(\"froggy\") ➞ { f: [0], r: [1], o: [2], g: [3, 4], y: [5] }\n\nmapLetters(\"grapes\") ➞ { g: [0], r: [1], a: [2], p: [3], e: [4], s: [5] }</code></pre><h3><span>Notes</span></h3><p><span>All strings given will be lowercase.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(mapLetters(\"\"), {})",
			"Test.assertSimilar(mapLetters(\"a\"), { a: [0] })",
			"Test.assertSimilar(mapLetters(\"abcdefg\"), { a: [0], b: [1], c: [2], d: [3], e: [4], f: [5], g: [6] })",
			"Test.assertSimilar(mapLetters(\"balloon\"), { b: [0], a: [1], l: [2, 3], o: [4, 5], n: [6] })",
			"Test.assertSimilar(mapLetters(\"imagining\"), { i: [0, 4, 6], m: [1], a: [2], g: [3, 8], n: [5, 7] })",
			"Test.assertSimilar(mapLetters(\"mummy\"), { m: [0, 2, 3], u: [1], y: [4] })",
			"Test.assertSimilar(mapLetters(\"aaaaaaabaaabaaabbb\"), { a: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14], b: [7, 11, 15, 16, 17] })"
		],
		"starterFn": [
			"1\nfunction mapLetters(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Bd2jQS9xA6QecB34h"
	},
	{
		"title": "Convert String to camelCase",
		"description": "<p><span>Create a function that converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized only if the original word was capitalized.</span></p><h3><span>Examples</span></h3><pre><code>toCamelCase(\"A-B-C\") ➞ \"ABC\"\n\ntoCamelCase(\"the-stealth-warrior\") ➞ \"theStealthWarrior\"\n\ntoCamelCase(\"The_Stealth_Warrior\") ➞ \"TheStealthWarrior\"</code></pre><h3><span>Notes</span></h3><p><span>An empty string as input </span><code>\"\"</code><span> should return an empty string.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(toCamelCase(\"the_stealth_warrior\"), \"theStealthWarrior\", \"Did not return correct value\")",
			"Test.assertEquals(toCamelCase(\"The-Stealth-Warrior\"), \"TheStealthWarrior\", \"Did not return correct value\")",
			"Test.assertEquals(toCamelCase(\"A-B-C\"), \"ABC\", \"Did not return correct value.\")",
			"Test.assertEquals(toCamelCase(''), '', \"An empty string was provided but not returned.\")"
		],
		"starterFn": [
			"1\nfunction toCamelCase(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xt4CMLpfFRuDTsJgC"
	},
	{
		"title": "Find the Missing Letter",
		"description": "<p><span>Create a function that takes an array of increasing letters and return the missing letter.</span></p><h3><span>Examples</span></h3><pre><code>missingLetter([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"]) ➞ \"d\"\n\nmissingLetter([\"O\", \"Q\", \"R\", \"S\"]) ➞ \"P\"\n\nmissingLetter([\"t\", \"u\", \"v\", \"w\", \"x\", \"z\"]) ➞ \"y\"\n\nmissingLetter([\"m\", \"o\"]) ➞ \"n\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Tests will always have exactly one letter missing.</span></li><li><span>The length of the test array will always be at least two.</span></li><li><span>Tests will be in one particular case (upper or lower but never both).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(missingLetter([\"a\", \"b\", \"c\", \"e\", \"f\", \"g\"]), \"d\");",
			"Test.assertEquals(missingLetter([\"O\", \"Q\", \"R\", \"S\"]), \"P\");",
			"Test.assertEquals(missingLetter([\"t\", \"u\", \"v\", \"w\", \"x\", \"z\"]), \"y\");",
			"Test.assertEquals(missingLetter([\"m\", \"o\"]), \"n\");",
			"Test.assertEquals(missingLetter([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]), \"i\");",
			"Test.assertEquals(missingLetter([\"q\", \"s\", \"t\"]), \"r\");",
			"Test.assertEquals(missingLetter([\"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"k\", \"l\", \"m\", \"n\"]), \"j\");",
			"Test.assertEquals(missingLetter([\"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"m\", \"n\", \"o\", \"p\"]), \"l\");",
			"Test.assertEquals(missingLetter([\"t\", \"u\", \"w\", \"x\"]), \"v\");",
			"Test.assertEquals(missingLetter([\"B\", \"D\"]), \"C\");"
		],
		"starterFn": [
			"1\nfunction missingLetter(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/g4dFuspeWuXLLu65B"
	},
	{
		"title": "Union and Intersection of Arrays",
		"description": "<p><span>Create a function takes in two arrays and returns an </span><strong><span>intersection array</span></strong><span> and a </span><strong><span>union array</span></strong><span>.</span></p><ol><li><strong><span>Intersection Array:</span></strong><span> Elements shared by both.</span></li><li><strong><span>Union Array:</span></strong><span> Elements that exist in first or second array, or both (not exclusive OR).</span></li></ol><p><span>While the input arrays may have duplicate numbers, the returned </span><strong><span>intersection</span></strong><span> and </span><strong><span>union</span></strong><span> arrays should be </span><em><span>set-ified</span></em><span> - that is, contain no duplicates. Returned arrays should be sorted in </span><strong><span>ascending</span></strong><span> order.</span></p><pre><code>Array 1: [5, 6, 6, 6, 8, 9]\nArray 2: [3, 3, 4, 4, 5, 5, 8]\n\nIntersection: [5, 8]\n// 5 and 8 are the only 2 numbers that exist in both arrays.\n\nUnion: [3, 4, 5, 6, 8, 9]\n// Each number exists in at least one array.</code></pre><h3><span>Examples</span></h3><pre><code>intersectionUnion([1, 2, 3, 4, 4], [4, 5, 9]) ➞ [[4], [1, 2, 3, 4, 5, 9]]\n\nintersectionUnion([1, 2, 3], [4, 5, 6]) ➞ [[], [1, 2, 3, 4, 5, 6]]\n\nintersectionUnion([1, 1], [1, 1, 1, 1]) ➞ [[1], [1]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Order of output should be: </span><code>[Intersection], [Union]</code><span>.</span></li><li><span>Remember both output arrays should be in </span><strong><span>ascending order</span></strong><span>.</span></li><li><span>Each input array will have at least one element.</span></li><li><span>If both arrays are disjoint (share nothing in common), return an empty array </span><code>[]</code><span> for the intersection.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming"
		],
		"tests": [
			"Test.assertSimilar(intersectionUnion([1, 2, 3, 4, 4], [4, 5, 9]), [[4], [1, 2, 3, 4, 5, 9]])",
			"Test.assertSimilar(intersectionUnion([1, 2, 3], [4, 5, 6]), [[], [1, 2, 3, 4, 5, 6]])",
			"Test.assertSimilar(intersectionUnion([1, 1], [1, 1, 1, 1]), [[1], [1]])",
			"Test.assertSimilar(intersectionUnion([5, 5], [5, 6]), [[5], [5, 6]])",
			"Test.assertSimilar(intersectionUnion([7, 8, 9, 6], [9, 7, 6, 8]), [[6, 7, 8, 9], [6, 7, 8, 9]])",
			"Test.assertSimilar(intersectionUnion([4, 1, 1, 2], [1, 4, 4, 4, 4, 4, 4]), [[1, 4], [1, 2, 4]])"
		],
		"starterFn": [
			"1\nfunction intersectionUnion(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MfAkm7CkWqepAZTBM"
	},
	{
		"title": "Standard Deviation",
		"description": "<p><span>The </span><em><span>central tendency measures</span></em><span> (</span><em><span>mean</span></em><span>, </span><em><span>mode</span></em><span> and </span><em><span>median</span></em><span>) sometimes aren't enough descriptives in a data set analysis. For example, given two arrays </span><code>A=[15, 15, 15, 14, 16]</code><span> and </span><code>B=[2, 7, 14, 22, 30]</code><span> the mean is </span><code>μ=15</code><span> in both cases, however the values of second array are clearly more spread out from the average value. The </span><strong><span>standard deviation</span></strong><span> (also called </span><em><strong><span>sigma</span></strong></em><span>, the greek lowercase letter </span><em><strong><span>σ</span></strong></em><span>) </span><strong><span>measures the spread of the values in a data set</span></strong><span> and transform the </span><em><span>\"clearly more spread out than\"</span></em><span> assertion in a proofed statistical assertion. You can find more information in the </span><strong><span>Resources</span></strong><span> tab.</span></p><p><span>The standard deviation is calculated following five steps:</span></p><ol><li><span>Obtain the mean of the data set.</span></li><li><span>For each value in the set calculate the absolute difference between the value and the mean.</span></li><li><span>Square each value obtained and sum them cumulatively.</span></li><li><span>Divide the result by the data set length.</span></li><li><span>Get the square root of the value obtained.</span></li></ol><p><span>Given an array of values return the standard deviation rounded to the nearest hundredth.</span></p><h3><span>Examples</span></h3><pre><code>standardDeviation([3, 5, 7]) ➞ 1.63\n// |(3-5)|+|(5-5)|+|(7-5)| = 2² + 0 + 2² = 8 / 3 = square root of 2.66 = 1.63\n\nstandardDevition([5, 5, 5]) ➞ 0\n// Values aren't deviating from the mean.\n\nstandardDeviation([-3, -5, -7]) ➞ 1.63\n// Remember: absolute differences!</code></pre><h3><span>Notes</span></h3><ul><li><span>All given arrays are valid, no exceptions to handle.</span></li><li><span>Arrays can contain either positive or negative integers.</span></li><li><span>Remember to round to the nearest hundredth at the end.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(standardDeviation([15, 15, 15, 14, 16]), 0.63)",
			"Test.assertEquals(standardDeviation([1, 2, 3, 4, 5]), 1.41)",
			"Test.assertEquals(standardDeviation([-24, 3, -15, 131, 8, 42, 11, -70, 12, 0, 33, 48, 20, 20, 20]), 41.43)",
			"Test.assertEquals(standardDeviation([-10, -1, -100]), 44.70)",
			"Test.assertEquals(standardDeviation([18, 18, 18]), 0)",
			"Test.assertEquals(standardDeviation([2, 7, 14, 22, 30]), 10.08)"
		],
		"starterFn": [
			"1\nfunction standardDeviation(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/viGn9gKzCLTJLKkjA"
	},
	{
		"title": "Don't Be in Such a Curry",
		"description": "<p><span>One of the pratical use cases for </span><strong><span>currying</span></strong><span> a function in JavaScript is to reduce duplication:</span></p><pre><code>function add5(num) {\n  return num + 5\n}\n\nfunction add6(num) {\n  return num + 6\n}\n\nadd5(2) // 7\nadd6(3) // 9</code></pre><p><span>Instead of having to create a new function for every new number we can just create a function that </span><strong><span>returns</span></strong><span> a new function and pass in the any number we want to add.</span></p><pre><code>function add(add) {\n  return function(num) {\n    return num + add\n  }\n}\n\nconst add5 = add(5)\nadd5(2) // 7\nconst add6 = add(6)\nadd6(3) // 9</code></pre><p><span>Create a function using </span><strong><span>currying</span></strong><span> that will add a car maker name as a property to the carLot object if it doesn't have one.  Then have the function add up the number we pass in when we call the </span><strong><span>curried</span></strong><span> function.</span></p><pre><code>function toyotaCars(\"Toyota\")\nfunction hyundaiCars(\"Hyundai\")\n\nkiaCars(3)\nkiaCars(4)\nhyundaiCars(2)\nhyundaiCars(1)\n\nconsole.log(carLot) // { Kia: 7, Hyundai: 3}</code></pre><h3><span>Notes</span></h3><ul><li><span>You only have to create the </span><code>carMaker()</code><span> function, not the </span><strong><span>curried</span></strong><span> function.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> for more info on currying.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"carLot = {}",
			"​",
			"const toyotaCars = carMaker(\"Toyota\")",
			"const fordCars = carMaker(\"Ford\")",
			"​",
			"toyotaCars(5)",
			"toyotaCars(3)",
			"toyotaCars(13)",
			"fordCars(3)",
			"fordCars(8)",
			"fordCars(9)",
			"​",
			"Test.assertSimilar(carLot, { Toyota: 21, Ford: 20})"
		],
		"starterFn": [
			"1\nlet carLot = {}",
			"2\n​",
			"3\nconst carMaker = (make) => {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/tG8feBkvmQtsv7s6m"
	},
	{
		"title": "Look and Say Numbers",
		"description": "<p><span>Given a number with </span><em><span>an even number of digits</span></em><span>, return a new number according to the rules below:</span></p><ul><li><span>Split the number into groups of two digit numbers. If the number has an </span><em><span>odd</span></em><span> number of digits, return </span><code>\"invalid\"</code><span>.</span></li><li><span>For each group of two digit numbers, concatenate the </span><em><span>last digit</span></em><span> to a string to the same number of times as the value of the </span><em><span>first digit</span></em><span>.</span></li><li><span>Return the result as an </span><em><span>integer</span></em><span>.</span></li></ul><pre><code>lookAndSay(3132) ➞ 111222\n\n// By reading the number digit by digit, you get three \"1\" and three \"2\".\n// Therefore, you put three ones and three two's together.\n// Remember to return an integer.</code></pre><h3><span>Examples</span></h3><pre><code>lookAndSay(95) ➞ 555555555\n\nlookAndSay(1213141516171819) ➞ 23456789\n\nlookAndSay(120520) ➞ 200\n\nlookAndSay(231) ➞ \"invalid\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Note that the number </span><strong><span>0</span></strong><span> can be included (see example #3).</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for a TED-Ed video for extra clarity.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(lookAndSay(95), 555555555)",
			"Test.assertEquals(lookAndSay(1213141516171819), 23456789)",
			"Test.assertEquals(lookAndSay(231), 'invalid')",
			"Test.assertEquals(lookAndSay(3132), 111222)",
			"Test.assertEquals(lookAndSay(313317), 1113337)",
			"Test.assertEquals(lookAndSay(786497), 8888888444444777777777)",
			"Test.assertEquals(lookAndSay(591173), 9999913333333)",
			"Test.assertEquals(lookAndSay(404094), 444444444)",
			"Test.assertEquals(lookAndSay(473536), 7777555666)",
			"Test.assertEquals(lookAndSay(880440), 888888880000)",
			"Test.assertEquals(lookAndSay(724767), 22222227777777777)",
			"Test.assertEquals(lookAndSay(830926), 3333333366)",
			"Test.assertEquals(lookAndSay(665956), 6666669999966666)",
			"Test.assertEquals(lookAndSay(441746), 444476666)",
			"Test.assertEquals(lookAndSay(888322), 888888883333333322)",
			"Test.assertEquals(lookAndSay(614193), 1111111111333333333)",
			"Test.assertEquals(lookAndSay(733257), 333333322277777)",
			"Test.assertEquals(lookAndSay(689301), 888888333333333)",
			"Test.assertEquals(lookAndSay(614318), 11111133338)",
			"Test.assertEquals(lookAndSay(936667), 333333333666666777777)",
			"Test.assertEquals(lookAndSay(890917), 999999997)",
			"Test.assertEquals(lookAndSay(417528), 1111555555588)",
			"Test.assertEquals(lookAndSay(830756), 3333333366666)",
			"Test.assertEquals(lookAndSay(297807), 998888888)",
			"Test.assertEquals(lookAndSay(285728), 887777788)",
			"Test.assertEquals(lookAndSay(664940), 66666699990000)"
		],
		"starterFn": [
			"1\nfunction lookAndSay(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iKdJfMrxkWsBcEKEL"
	},
	{
		"title": "Rhyme Time",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if two lines </span><strong><span>rhyme</span></strong><span> and </span><code>false</code><span> otherwise. For the purposes of this exercise, two lines rhyme if the </span><strong><span>last word</span></strong><span> from each sentence contains the </span><strong><span>same vowels</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>doesRhyme(\"Sam I am!\", \"Green eggs and ham.\") ➞ true\n\ndoesRhyme(\"Sam I am!\", \"Green eggs and HAM.\") ➞ true\n// Capitalization and punctuation should not matter.\n\ndoesRhyme(\"You are off to the races\", \"a splendid day.\") ➞ false\n\ndoesRhyme(\"and frequently do?\", \"you gotta move.\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Case insensitive.</span></li><li><span>Here we are disregarding cases like </span><em><span>\"thyme\"</span></em><span> and </span><em><span>\"lime\"</span></em><span>.</span></li><li><span>We are also disregarding cases like </span><em><span>\"away\"</span></em><span> and </span><em><span>\"today\"</span></em><span> (which technically rhyme, even though they contain different vowels).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(doesRhyme('Sam I am!', 'Green eggs and ham.'), true, 'Should work with punctuation.')",
			"Test.assertEquals(doesRhyme('Sam I am!', 'Green eggs and HAM.'), true, 'Should work with uppercase/punctuation.')",
			"Test.assertEquals(doesRhyme('head straight to town', 'give me not a frown'), true)",
			"Test.assertEquals(doesRhyme('with an unpleasant bump', 'in a slump'), true)",
			"Test.assertEquals(doesRhyme('your elbow and chin!', 'how much can you win?'), true, 'Should work with punctuation.')",
			"Test.assertEquals(doesRhyme('you will start to race', 'the waiting Place'), true, 'Should work with upper case letters.')",
			"Test.assertEquals(doesRhyme('All that waiting and staying.', 'where the band are playing.'), true, 'Should work with punctuation.')",
			"Test.assertEquals(doesRhyme('You are off to the races', 'a splendid day.'), false)",
			"Test.assertEquals(doesRhyme('and frequently do?', 'you gotta move.'), false)",
			"Test.assertEquals(doesRhyme('down by the bay', 'where the watermelons grow'), false)",
			"Test.assertEquals(doesRhyme('back to my home', 'i dare not go'), false)"
		],
		"starterFn": [
			"1\nfunction doesRhyme(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/p3LHPrDSwr4kYE9ov"
	},
	{
		"title": "Flatten an Array",
		"description": "<p><span>Create a function that takes an array. This array can have all kinds of items, even other arrays. The function should return a single, flat, one-dimensional, array with all elements. Here are the conditions:</span></p><ol><li><span>If the item is an </span><em><span>Array</span></em><span>, include each item in it and the following still apply:</span></li><li><span>If the item is a </span><em><span>Function</span></em><span>, include the function's output, not the function itself.</span></li><li><span>If the item is a plain </span><em><span>Object</span></em><span> or a </span><em><span>Primitive</span></em><span>, include it as is.</span></li></ol><h3><span>Examples</span></h3><pre><code>flattenArray([1, \"2\", [3, function () { return 4; }, [ \"five\" ], \"six\", true, { prop: \"val\" }]])\n➞ [1, \"2\", 3, 4, \"five\", \"six\", true, { prop: \"val\" }]\n\nflattenArray([1, 2, [3, [4, 5], 6], 7, 8]) ➞ [1, 2, 3, 4, 5, 6, 7, 8]\n\nflattenArray() ➞ []</code></pre><h3><span>Notes</span></h3><p><span>If no input is given it should return an empty array: </span><code>[]</code><span>.</span></p>",
		"publishedBy": "faqofff",
		"publishedByUrl": "https://edabit.com/user/NnJhaSQJGXmv9Tqse",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"recursion"
		],
		"tests": [
			"Test.assertSimilar(flattenArray([1, '2', [3, [4], function () { return 'five'; }]]), [1, '2', 3, 4, 'five'])",
			"Test.assertSimilar(flattenArray([1]), [1])",
			"Test.assertSimilar(flattenArray(), [])",
			"Test.assertSimilar(flattenArray([]), [])",
			"Test.assertSimilar(flattenArray([[1, '2', [3, function () { return 4; }, [ 'five' ], 'six', true, { prop: 'val' }]]]),[1, \"2\", 3, 4, \"five\", \"six\", true, { prop: 'val' }])"
		],
		"starterFn": [
			"1\nfunction flattenArray(array) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DkLjrHfry9xgTedG2"
	},
	{
		"title": "Poker Full House",
		"description": "<p><span>Create a function that determines whether or not a player is holding a </span><strong><span>Full House</span></strong><span> in their hand. A hand is represented as an array of 5 cards. A full house is defined as a pair of cards and a three-of-a-kind.</span></p><p><span>To illustrate: </span><code>[\"A\", \"A\", \"A\", \"K\", \"K\"]</code><span> would be a </span><strong><span>Full House</span></strong><span>, since the player holds 3 aces and 2 kings.</span></p><h3><span>Examples</span></h3><pre><code>isFullHouse([\"A\", \"A\", \"A\", \"K\", \"K\"]) ➞ true\n\nisFullHouse([\"3\", \"J\", \"J\", \"3\", \"3\"]) ➞ true\n\nisFullHouse([\"10\", \"J\", \"10\", \"10\", \"10\"]) ➞ false\n\nisFullHouse([\"7\", \"J\", \"3\", \"4\", \"2\"]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isFullHouse(['A', 'A', 'A', 'K', 'K']), true);",
			"Test.assertEquals(isFullHouse(['3', 'J', 'J', '3', '3']), true);",
			"Test.assertEquals(isFullHouse(['10', 'J', '10', 'J', '10']), true);",
			"Test.assertEquals(isFullHouse(['10', 'J', '10', '10', '10']), false);",
			"Test.assertEquals(isFullHouse(['10', 'J', 'J', '2', '2']), false);",
			"Test.assertEquals(isFullHouse(['7', 'J', '3', '4', '2']), false);"
		],
		"starterFn": [
			"1\nfunction isFullHouse(hand) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eJtRrrpRZEoaaYgvw"
	},
	{
		"title": "Greater Than the Sum?",
		"description": "<p><span>For each number in an array, check if that number is </span><em><span>greater than</span></em><span> the </span><em><span>sum</span></em><span> of all numbers that appear </span><em><span>before</span></em><span> it in the array. If </span><em><span>all</span></em><span> numbers in the array pass this test, return </span><code>true</code><span>. Return </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>greaterThanSum([2, 3, 7, 13, 28]) ➞ true\n\n// 3 &gt; 2 = true\n// 7 &gt; 2 + 3 = true\n// 13 &gt; 2 + 3 + 7 = true\n// 28 &gt; 2 + 3 + 7 + 13 = true\n\ngreaterThanSum([1, 2, 4, 6, 13]) ➞ false\n\n// 2 &gt; 1 = true\n// 4 &gt; 1 + 2 = true\n// 6 &gt; 1 + 2 + 4 = false\n// 13 &gt; 1 + 2 + 4 + 6 = false</code></pre><h3><span>Notes</span></h3><p><span>The first number in any array will always pass the test.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(greaterThanSum([1, -2, 11, 26]), false)",
			"Test.assertEquals(greaterThanSum([5, 8, 18, 32, 67, 131, 265, 529, 1056, 2115]), true)",
			"Test.assertEquals(greaterThanSum([8, 29, 62, 115, 232]), true)",
			"Test.assertEquals(greaterThanSum([5, 7, 15, 52, 88, 173, 346, 686, 1393, 2765]), false)",
			"Test.assertEquals(greaterThanSum([1, 25, 35, 74, 159, 305, 623]), true)",
			"Test.assertEquals(greaterThanSum([21, 40, 58, 134, 250]), false)",
			"Test.assertEquals(greaterThanSum([9, 32, 60, 107, 223, 442, 894, 1782, 3564]), true)",
			"Test.assertEquals(greaterThanSum([4, 26, 51, 103, 204, 412, 821, 1638, 3257]), false)",
			"Test.assertEquals(greaterThanSum([16, 35, 51, 120]), false)",
			"Test.assertEquals(greaterThanSum([-4, 1, 2, 14, 9, 44, 67, 131, 286]), false)",
			"Test.assertEquals(greaterThanSum([1, 4, 6, 14, 26, 56, 112]), true)",
			"Test.assertEquals(greaterThanSum([1, 18, 25, 42, 82, 188]), false)",
			"Test.assertEquals(greaterThanSum([13, 23, 36, 97, 186, 369, 728]), false)",
			"Test.assertEquals(greaterThanSum([8, 30, 44, 97]), true)",
			"Test.assertEquals(greaterThanSum([8, 31, 39, 102, 176, 363, 732, 1455, 2917, 5840]), false)",
			"Test.assertEquals(greaterThanSum([9, 10, 20, 43]), true)",
			"Test.assertEquals(greaterThanSum([25, 34, 68, 128, 262]), true)",
			"Test.assertEquals(greaterThanSum([18, 34, 77, 129, 270, 544, 1075, -2148]), false)",
			"Test.assertEquals(greaterThanSum([14, 34, 70, 123, 263, 506]), true)",
			"Test.assertEquals(greaterThanSum([24, 29, 58, 115, 236, 468, 950, 1905, 3787, 7575]), true)"
		],
		"starterFn": [
			"1\nfunction greaterThanSum(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Q6f6SKcnc922g95s5"
	},
	{
		"title": "Mexican Wave Simulator",
		"description": "<p><img alt=\"Mexican Wave Simulator\" src=\"https://s3.amazonaws.com/edabit-images/mex.gif\"></p><p><em><span>The wave (known as a Mexican wave in the English-speaking world outside North America) is an example of metachronal rhythm achieved in a packed stadium when successive groups of spectators briefly stand, yell, and raise their arms.</span></em></p><p><span>Create a function that takes a string and turns it into a Mexican Wave.</span></p><h3><span>Examples</span></h3><pre><code>wave(\"edabit\") ➞ [\"Edabit\", \"eDabit\", \"edAbit\", \"edaBit\", \"edabIt\", \"edabiT\"]\n\nwave(\"just do it\") ➞ [\"Just do it\", \"jUst do it\", \"juSt do it\", \"jusT do it\", \"just Do it\", \"just dO it\", \"just do It\", \"just do iT\"]\n\nwave(\" \") ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>All test cases will be lowercase strings.</span></li><li><span>Ignore spaces (they are considered empty seats).</span></li><li><span>An empty string should return an empty array.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(wave(\"edabit\"), [\"Edabit\", \"eDabit\", \"edAbit\", \"edaBit\", \"edabIt\", \"edabiT\"]);",
			"Test.assertSimilar(wave(\"dogs cats pigs\"), [\"Dogs cats pigs\", \"dOgs cats pigs\", \"doGs cats pigs\", \"dogS cats pigs\", \"dogs Cats pigs\", \"dogs cAts pigs\", \"dogs caTs pigs\", \"dogs catS pigs\", \"dogs cats Pigs\", \"dogs cats pIgs\", \"dogs cats piGs\", \"dogs cats pigS\"], \"Ignore spaces.\");",
			"Test.assertSimilar(wave(\" \"), [], \"Ignore spaces.\");",
			"Test.assertSimilar(wave(\"\"), [], \"An empty string should return an empty array.\");",
			"Test.assertSimilar(wave(\"g\"), [\"G\"]);",
			"Test.assertSimilar(wave(\" blue\"), [\" Blue\", \" bLue\", \" blUe\", \" bluE\"], \"Space at the beginning.\");",
			"Test.assertSimilar(wave(\"green \"), [\"Green \", \"gReen \", \"grEen \", \"greEn \", \"greeN \"], \"Space at the end.\");"
		],
		"starterFn": [
			"1\nfunction wave(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Jqp5E7SNY3gYFBNRL"
	},
	{
		"title": "Changing a String into camelCase",
		"description": "<p><span>Using Camel Case (or camelCase) is where the first word is in lower case, and all words after it have their first letter capitalised. Note that there are no spaces in between words!</span></p><p><span>Create a function that takes a string and returns it back in camelCase.</span></p><h3><span>Examples</span></h3><pre><code>camelCasing(\"Hello World\") ➞ \"helloWorld\"\n\ncamelCasing(\"snake_case\") ➞ \"snakeCase\"\n\ncamelCasing(\"low high_HIGH\") ➞ \"lowHighHigh\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You need to remove all spaces and underscores.</span></li><li><span>There will be no numbers in inputs.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(camelCasing(\"Hello World\"), \"helloWorld\")",
			"Test.assertEquals(camelCasing(\"snake_case\"), \"snakeCase\")",
			"Test.assertEquals(camelCasing(\"low high_HIGH\"), \"lowHighHigh\")",
			"Test.assertEquals(camelCasing(\"unEcEsSARilY_loNG_vArIablE_NaME\"), \"unecessarilyLongVariableName\")",
			"Test.assertEquals(camelCasing(\"camel casing\"), \"camelCasing\")"
		],
		"starterFn": [
			"1\nfunction camelCasing(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bZJLPjJL4BuyeeB6j"
	},
	{
		"title": "Straight Digital Numbers",
		"description": "<p><span>In this challenge, you have to establish if the digits of a given number form a straight arithmetic sequence (either increasing or decreasing). A straight sequence has an equal step between every pair of digits.</span></p><p><span>Given an integer </span><code>n</code><span>, implement a function that returns:</span></p><ul><li><code>\"Not Straight\"</code><span> if </span><code>n</code><span> is lower than 100 or if its digits are not an arithmetic sequence.</span></li><li><code>\"Trivial Straight\"</code><span> if </span><code>n</code><span> has a single repeating digit.</span></li><li><span>An integer being the step of the sequence if the </span><code>n</code><span> digits are a straight arithmetic sequence.</span></li></ul><h3><span>Examples</span></h3><pre><code>straightDigital(123) ➞ 1\n// 2 - 1 = 1 | 3 - 2 = 1\n\nstraightDigital(753) ➞ -2\n// 5 - 7 = -2 | 3 - 5 = -2\n\nstraightDigital(666) ➞ \"Trivial Straight\"\n// There's a single repeating digit (step = 0).\n\nstraightDigital(124) ➞ \"Not Straight\"\n// 2 - 1 = 1 | 4 - 2 = 2\n// A valid sequence has always the same step between its digits.\n\nstraightDigital(99) ➞ \"Not Straight\"\n// The number is lower than 100.</code></pre><h3><span>Notes</span></h3><ul><li><span>The step of the sequence can be either positive or negative (see example #2).</span></li><li><span>Trivia: there are infinite straight digital numbers, but only 96 of them are made of at least two different digits.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(straightDigital(123), 1, \"Example #1\")",
			"Test.assertEquals(straightDigital(753), -2, \"Example #2\")",
			"Test.assertEquals(straightDigital(666), \"Trivial Straight\", \"Example #3\")",
			"Test.assertEquals(straightDigital(124), \"Not Straight\", \"Example #4\")",
			"Test.assertEquals(straightDigital(99), \"Not Straight\", \"Example #5\")",
			"Test.assertEquals(straightDigital(13579), 2)",
			"Test.assertEquals(straightDigital(111111), \"Trivial Straight\")",
			"Test.assertEquals(straightDigital(9630), -3)",
			"Test.assertEquals(straightDigital(-123456789), \"Not Straight\")",
			"Test.assertEquals(straightDigital(951), -4)",
			"Test.assertEquals(straightDigital(24642), \"Not Straight\")",
			"Test.assertEquals(straightDigital(147), 3)",
			"Test.assertEquals(straightDigital(13579), 2)",
			"Test.assertEquals(straightDigital(9876543210), -1)",
			"Test.assertEquals(straightDigital(1313), \"Not Straight\")"
		],
		"starterFn": [
			"1\nfunction straightDigital(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WMorR7e2z3AkoesJC"
	},
	{
		"title": "Adding a Function to the String Prototype",
		"description": "<p><span>One of the fun parts of JavaScript is that you can extend all the standard types by extending their </span><strong><span>prototype</span></strong><span>. In this challenge, you need to give JavaScript Strings a </span><code>swapCase()</code><span> function, which will return a new string with all upper case characters swapped for lower case characters, and vice versa. Any non-alphabetic characters should be kept as they are.</span></p><h3><span>Examples</span></h3><pre><code>\"Hello\".swapCase() ➞ \"hELLO\"\n\n\"2 4 6 8 WHO DO WE APPRECIATE?\".swapCase() ➞ \"2 4 6 8 who do we appreciate?\"\n\n\"aBcD\".swapCase().swapCase() ➞ \"aBcD\"</code></pre><h3><span>Notes</span></h3><ul><li><code>swapCase()</code><span> should not alter the original string.</span></li><li><span>Although you </span><em><span>can</span></em><span> add new functions to the standard data types, it's not generally a good idea in large projects!</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertEquals(\"Hello\".swapCase(), \"hELLO\")",
			"Test.assertEquals(\"2 4 6 8 WHO DO WE APPRECIATE?\".swapCase(),'2 4 6 8 who do we appreciate?')",
			"Test.assertEquals(\"aBcD\".swapCase().swapCase(), \"aBcD\")",
			"Test.assertEquals(\"\".swapCase(), \"\")",
			"Test.assertEquals('!\"£$%^&*()'.swapCase(), '!\"£$%^&*()')",
			"Test.assertEquals(\"I once saw an Octopus attempt to devour a whole TUNA.\".swapCase(), 'i ONCE SAW AN oCTOPUS ATTEMPT TO DEVOUR A WHOLE tuna.')"
		],
		"starterFn": [
			"1\nString.prototype.swapCase = function () {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2buQEWggGkx7RQYD7"
	},
	{
		"title": "Sum of an Array of Times",
		"description": "<p><span>Create a function that takes an array of strings representing times (</span><code>'hours:minutes:seconds'</code><span>) and returns their sum as an array of integers (</span><code>[hours, minutes, seconds]</code><span>).</span></p><h3><span>Examples</span></h3><pre><code>timeSum([\"1:23:45\"]) ➞ [1, 23, 45]\n\ntimeSum([\"1:03:45\", \"1:23:05\"]) ➞ [2, 26, 50]\n\ntimeSum([\"5:39:42\", \"10:02:08\", \"8:26:33\"]) ➞ [24, 8, 23]</code></pre><h3><span>Notes</span></h3><p><span>If the input is an empty array, return </span><code>[0, 0, 0]</code><span>.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(",
			"  timeSum([]),",
			"  [0, 0, 0],",
			"  'Should work with an empty array'",
			");",
			"Test.assertSimilar(",
			"  timeSum(['1:23:45']),",
			"  [1, 23, 45],",
			"  'Should work with a single time'",
			");",
			"Test.assertSimilar(",
			"  timeSum(['1:03:45', '1:23:05']),",
			"  [2, 26, 50],",
			"  'Should work with leading zeroes in minutes/seconds'",
			");",
			"Test.assertSimilar(",
			"  timeSum(['1:23:45', '0:00:00']),",
			"  [1, 23, 45],",
			"  'Should not break if a value is 0:00:00'",
			");",
			"Test.assertSimilar(",
			"  timeSum(['18:54:02', '0:26:28', '11:48:22', '22:26:16', '7:17:05', '8:01:44', '0:35:24', '16:25:11', '9:11:24', '18:30:46', '3:31:51', '16:55:32', '17:59:00', '11:29:30', '3:19:58', '9:12:27', '22:03:34', '1:06:12', '0:44:07', '4:47:46', '10:38:00', '14:26:51', '10:09:07', '5:08:29', '5:29:57', '22:15:03', '20:52:28', '8:42:20', '17:36:32', '9:36:17']),",
			"  [329, 41, 43],",
			"  'Should work with large arrays totaling more than 60 hours'",
			");",
			"Test.assertSimilar("
		],
		"starterFn": [
			"1\nfunction timeSum(times) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BP82XMfoRoREMRxLw"
	},
	{
		"title": "Find the Shared Letters between Two Strings",
		"description": "<p><span>Given two strings, return a </span><code>string</code><span> containing only the letters shared between the two.</span></p><h3><span>Examples</span></h3><pre><code>sharedLetters(\"house\", \"home\") ➞ \"eho\"\n\nsharedLetters(\"Micky\", \"mouse\") ➞ \"m\"\n\nsharedLetters(\"house\", \"villa\") ➞ \"\"</code></pre><h3><span>NotessharedLetters</span></h3><ul><li><span>If none of the letters are shared, return an empty string.</span></li><li><span>The function should be </span><strong><span>case insensitive</span></strong><span> (e.g. comparing </span><code>A</code><span> and </span><code>a</code><span> should return </span><code>a</code><span>).</span></li><li><span>Sort the resulting string alphabetically before returning it.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sharedLetters('house', 'home'), 'eho');",
			"Test.assertEquals(sharedLetters('Micky', 'mouse'), 'm');",
			"Test.assertEquals(sharedLetters('house', 'villa'), '');",
			"Test.assertEquals(sharedLetters('Aa', 'aA'), 'a');",
			"Test.assertEquals(sharedLetters('https://www.example.com', 'https://www.canada.ca'), './:achpstw');",
			"Test.assertEquals(sharedLetters('Edabit', 'Matt'), 'at');",
			"Test.assertEquals(sharedLetters('🙂😀😄😁', '🙂😞😔😣'), '🙂');",
			"Test.assertEquals(sharedLetters('Javascript', 'Swift'), 'ist');",
			"Test.assertEquals(sharedLetters('Functional programming', 'Object oriented programming'), ' acgimnoprt');",
			"Test.assertEquals(sharedLetters('My dog is a GOOD BOY 🐶', 'Do you like ice cream? 🍦'), ' adimoy');"
		],
		"starterFn": [
			"1\nfunction sharedLetters(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/33EsK9mQzGGzRkXQT"
	},
	{
		"title": "IPv4 Validation",
		"description": "<p><span>Create a function that takes a string (IPv4 address in standard dot-decimal format) and returns </span><code>true</code><span> if the IP is valid or </span><code>false</code><span> if it's not. For information on IPv4 formatting, please refer to the resources in the </span><strong><span>Resources</span></strong><span> tab.</span></p><h3><span>Examples</span></h3><pre><code>isValidIP(\"1.2.3.4\") ➞ true\n\nisValidIP(\"1.2.3\") ➞ false\n\nisValidIP(\"1.2.3.4.5\") ➞ false\n\nisValidIP(\"123.45.67.89\") ➞ true\n\nisValidIP(\"123.456.78.90\") ➞ false\n\nisValidIP(\"123.045.067.089\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>IPv6 addresses are not valid.</span></li><li><span>Leading zeros are not valid (</span><code>\"123.045.067.089\"</code><span> should return </span><code>false</code><span>).</span></li><li><span>You can expect a single string for every test case.</span></li><li><span>Numbers may only be between 1 and 255.</span></li><li><span>The last digit may not be zero, but any other might.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isValidIP(\"12.255.56.1\"), true, \"This is a valid IPv4\");",
			"Test.assertEquals(isValidIP(\"1.2.3.4\"), true, \"This is a valid IPv4\");",
			"Test.assertEquals(isValidIP(\"1.2.3\"), false, \"IPv4 contain exactly four octets.\");",
			"Test.assertEquals(isValidIP(\"1.2.3.4.5\"), false, \"IPv4 contain exactly four octets.\");",
			"Test.assertEquals(isValidIP(\"123.45.67.89\"), true, \"This is a valid IPv4\");",
			"Test.assertEquals(isValidIP(\"123.456.78.90\"), false, \"Each octet must be a decimal value between 0 and 255.\");",
			"Test.assertEquals(isValidIP(\"123.045.067.089\"), false, \"Each octet must be a decimal value between 0 and 255.\");",
			"Test.assertEquals(isValidIP(\"\"), false, \"An empty string is invalid.\");",
			"Test.assertEquals(isValidIP(\"abc.def.ghi.jkl\"), false, \"This is not in dot decimal format.\");",
			"Test.assertEquals(isValidIP(\"123.456.789.0\"), false, \"Each octet must be a decimal value between 0 and 255.\");",
			"Test.assertEquals(isValidIP(\"12.34.56\"), false, \"IPv4 contain exactly four octets.\");",
			"Test.assertEquals(isValidIP(\"12.34.56 .1\"), false, \"Check for spaces.\");",
			"Test.assertEquals(isValidIP(\"12.34.56.-1\"), false, \"Check for invalid characters.\");",
			"Test.assertEquals(isValidIP(\"123.045.067.089\"), false, \"Each octet must be a decimal value between 0 and 255.\");",
			"Test.assertEquals(isValidIP(\"192.168.1.1\"), true, \"This is a valid IPv4\");",
			"Test.assertEquals(isValidIP(\"192.168.1.1  \"), false, \"IPs with trailing spaces are invalid.\");",
			"Test.assertEquals(isValidIP(\"  192.168.1.1\"), false, \"IPs with leading spaces are invalid.\");",
			"Test.assertEquals(isValidIP(\"0.232.47.227\"), true, \"This is a valid IPv4\");",
			"Test.assertEquals(isValidIP(\"1e0.1e0.1e0.1e0\"), false, \"Each octet must be a decimal value between 0 and 255.\");"
		],
		"starterFn": [
			"1\nfunction isValidIP(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/S5nPFF44x7JceXPBn"
	},
	{
		"title": "Promises VII: Chaining",
		"description": "<p><code>then()</code><span> functions return a new promise, different from the original. Since </span><strong><span>catch</span></strong><span> functions are actually </span><code>then()</code><span> functions behind the scenes, they also return new promises. So if that's true then you could do something like this:</span></p><pre><code>new Promise((resolve, reject) =&gt; {\n    console.log(\"Initial\");\n    resolve();\n})\n.then(() =&gt; {\n    throw new Error(\"Something failed\");\n    console.log(\"Do this\");\n})\n.catch(() =&gt; {\n    console.error(\"Do that\");\n})\n.then(() =&gt; {\n    console.log(\"Do this, no matter what happened before\");\n});\n\n// logs\nInitial\nDo that\nDo this, no matter what happened before</code></pre><p><span>The text \"Do this\" is not displayed because the \"Something failed\" error caused a rejection.</span></p><p><span>The last </span><code>then()</code><span> call in the function </span><code>doSomething()</code><span> should log </span><code>in my main call something</code><span> but logs </span><code>undefined</code><span> instead. Find out what's wrong with the code and fix it. You will see two logs </span><code>in my function something</code><span>, this is not an error. This is from the test. Do not remove any </span><code>then()</code><span> or </span><code>catch()</code><span> functions</span></p><h3><span>Notes</span></h3><ul><li><span>Do not overthink this!</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"let answer = \"\" ",
			"​",
			"let promise = doSomething().then(response => {",
			"  return answer = response",
			"})",
			"​",
			"promise.then(x => Test.assertEquals(answer, \"something\"))",
			"​",
			"// Credits to Hammerbot for the challenge and Martin Adamek for the solution on SO."
		],
		"starterFn": [
			"1\nfunction doSomething (isGoingToResolve = true) {",
			"2\n    return new Promise((resolve, reject) => {",
			"3\n    if (isGoingToResolve) {",
			"4\n        resolve(\"something\")",
			"5\n    } else {",
			"6\n        reject(\"something else\")",
			"7\n    }",
			"8\n  }).then(response => {",
			"9\n    console.log(\"in my function\",response)",
			"10\n  }).catch(error => {",
			"11\n    console.log(\"in my function\",error)",
			"12\n  })",
			"13\n}",
			"14\n​",
			"15\ndoSomething().then(response => {",
			"16\n    console.log(\"in my main call\", response)",
			"17\n})"
		],
		"url": "https://edabit.com/challenge/9kB7LsxejgoAeFrSB"
	},
	{
		"title": "Calculate Next Position of One Point Moving Towards Another",
		"description": "<p><span>A point on the screen (pt1) wants to move a certain distance (dist) closer to another point on the screen (pt2) The function  has three arguments, two of which are objects with x &amp; y values, and the third being the distance, e.g. </span><code>{x:50, y:60}, {x: 100, y: 100}, 10</code><span>. The expected result is a similar object with the new co-ordinate.</span></p><h3><span>Examples</span></h3><pre><code>getNextPosition({x: 50, y: 60}, {x: 100, y: 100}, 10) ➞ {x: 58, y: 66}\n\ngetNextPosition({x: 0, y: 0}, {x: 100, y: 0}, 10) ➞ {x: 10, y: 0}\n\ngetNextPosition({x: 0, y: 0}, {x: 100, y: 100}, 10) ➞ {x: 7, y: 7}\n\ngetNextPosition({x: 250, y: 10}, {x: -20, y: 35}, 55) ➞ {x: 195, y: 15}</code></pre><h3><span>Notes</span></h3><ul><li><span>The returned x &amp; y values should be rounded to the closest integer</span></li><li><span>If the distance between the two points is less than distance wanting to be traveled, then the returned co-ordinate should overshoot the mark, e.g. </span><code>{x: 50, y: 0}, {x: 70, y: 0}, 30) ➞ {x: 80, y: 0}</code><span>.</span></li></ul>",
		"publishedBy": "Jacob",
		"publishedByUrl": "https://edabit.com/user/MJodRpziHHB8SwZ99",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"games",
			"math",
			"objects"
		],
		"tests": [
			"Test.assertEquals(Test.inspect(getNextPosition({x: 0, y: 0}, {x: 100, y: 0}, 10)), Test.inspect({x: 10, y: 0}))",
			"Test.assertEquals(Test.inspect(getNextPosition({x: 50, y: 60}, {x: 100, y: 100}, 10)), Test.inspect({x: 58, y: 66}))",
			"Test.assertEquals(Test.inspect(getNextPosition({x: 0, y: 0}, {x: 100, y: 100}, 10)), Test.inspect({x: 7, y: 7}))",
			"Test.assertEquals(Test.inspect(getNextPosition({x: 250, y: 10}, {x: -20, y: 35}, 55)), Test.inspect({x: 195, y: 15}))",
			"Test.assertEquals(Test.inspect(getNextPosition({x: 50, y: 0}, {x: 70, y: 0}, 30)), Test.inspect({x: 80, y: 0}))"
		],
		"starterFn": [
			"1\nfunction getNextPosition(pt1, pt2, dist) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BxiBhscoP5SSzQpGG"
	},
	{
		"title": "Replace Every Nth Instance of a Character",
		"description": "<p><span>Create a function that takes a string and replaces every </span><code>nth</code><span> instance of </span><code>oldChar</code><span> with </span><code>newChar</code><span>. Your function will have four parameters:</span></p><ul><li><strong><span>str</span></strong><span> — The original input text to be processed.</span></li><li><strong><span>nth</span></strong><span> — The </span><code>nth</code><span> instance to be replaced.</span></li><li><strong><span>oldChar</span></strong><span> — The character being replaced.</span></li><li><strong><span>newChar</span></strong><span> — The character replacing </span><code>oldChar</code><span>.</span></li></ul><p><span>In other words, if </span><code>str</code><span> is \"abababa\", </span><code>nth</code><span> is 3, </span><code>oldChar</code><span> is \"a\" and </span><code>newChar</code><span> is \"Z\", you would replace the 3rd insrtance of \"a\" with \"Z\", returning \"ababZba\".</span></p><h3><span>Examples</span></h3><pre><code>replaceNth(\"A glittering gem is not enough.\", 0, \"o\", \"-\")\n➞ \"A glittering gem is not enough.\"\n\nreplaceNth(\"Vader said: No, I am your father!\", 2, \"a\", \"o\")\n➞ \"Vader soid: No, I am your fother!\"\n\nreplaceNth(\"Writing a list of random sentences is harder than I initially thought it would be.\", 2, \"i\", \"3\")\n➞ \"Writ3ng a list of random sentences 3s harder than I in3tially thought 3t would be.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If </span><code>nth</code><span> is 0, negative or larger than instances of </span><code>oldChar</code><span>, return the original string.</span></li><li><span>Tests are case sensitive.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(replaceNth(\"Sometimes it is better to just walk away from things and go back to them later when you’re in a better frame of mind.\", 3, \"e\", \"_\"), \"Sometimes it is b_tter to just walk away from things and go back to them lat_r when you’re in a b_tter frame of mind.\")",
			"Test.assertEquals(replaceNth(\"The clock within this blog and the clock on my laptop are 1 hour different from each other.\", 1, \"o\", \"@\"), \"The cl@ck within this bl@g and the cl@ck @n my lapt@p are 1 h@ur different fr@m each @ther.\")",
			"Test.assertEquals(replaceNth(\"Lets all be unique together until we realise we are all the same.\", 4, \"l\", \"#\"), \"Lets all be unique together until we rea#ise we are all the same.\")",
			"Test.assertEquals(replaceNth(\"Sometimes, all you NEED to do is completely make an ass of yourself and laugh it off to realise that LIFE isn’t so bad AFTER all.\", 2, \"E\", \"x\"), \"Sometimes, all you NExD to do is completely make an ass of yourself and laugh it off to realise that LIFE isn’t so bad AFTxR all.\", \"Tests are case sensative.\")",
			"Test.assertEquals(replaceNth(\"Is it free?\", 100, \"e\", \"Y\"), \"Is it free?\")",
			"Test.assertEquals(replaceNth(\"A glittering gem is not enough.\", 0, \"o\", \"-\"), \"A glittering gem is not enough.\")",
			"Test.assertEquals(replaceNth(\"Please wait outside of the house.\", -3, \"s\", \"s\"), \"Please wait outside of the house.\")",
			"Test.assertEquals(replaceNth(\"Joe made the sugar cookies; Susan decorated them.\", 5, \"e\", \"*\"), \"Joe made the sugar cookies; Susan d*corated them.\")",
			"Test.assertEquals(replaceNth(\"Writing a list of random sentences is harder than I initially thought it would be.\", 2, \"i\", \"3\"), \"Writ3ng a list of random sentences 3s harder than I in3tially thought 3t would be.\")",
			"Test.assertEquals(replaceNth(\"The book is in front of the table.\", 3, \"f\", \"K\"), \"The book is in front of the table.\")"
		],
		"starterFn": [
			"1\nfunction replaceNth(str, nth, oldChar, newChar) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FSJcckvq4rry72xCw"
	},
	{
		"title": "Creating a Picture Frame",
		"description": "<p><span>Create a function that takes the </span><strong><span>width</span></strong><span>, </span><strong><span>height</span></strong><span> and </span><strong><span>character</span></strong><span> and returns a picture frame as a matrix.</span></p><h3><span>Examples</span></h3><pre><code>getFrame(4, 5, \"#\") ➞ [\n  [\"####\"],\n  [\"#  #\"],\n  [\"#  #\"],\n  [\"#  #\"],\n  [\"####\"]\n]\n// Frame is 4 characters wide and 5 characters tall.\n\ngetFrame(10, 3, \"*\") ➞ [\n  [\"**********\"],\n  [\"*        *\"],\n  [\"**********\"]\n]\n// Frame is 10 characters and wide and 3 characters tall.\n\ngetFrame(2, 5, \"0\") ➞ \"invalid\"\n// Frame\"s width is not more than 2.</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember the gap.</span></li><li><span>Return </span><code>\"invalid\"</code><span> if </span><strong><span>width</span></strong><span> and </span><strong><span>height</span></strong><span> is </span><em><span>2 or less</span></em><span> (can't put anything inside).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(getFrame(3, 3, \"0\"), [",
			"  [\"000\"],",
			"  [\"0 0\"],",
			"  [\"000\"]",
			"])",
			"​",
			"Test.assertSimilar(getFrame(4, 5, \"#\"), [",
			"  [\"####\"],",
			"  [\"#  #\"],",
			"  [\"#  #\"],",
			"  [\"#  #\"],",
			"  [\"####\"]",
			"])",
			"​",
			"Test.assertSimilar(getFrame(10, 3, \"*\"), [",
			"  [\"**********\"],",
			"  [\"*        *\"],",
			"  [\"**********\"]",
			"])",
			"​",
			"Test.assertSimilar(getFrame(2, 5, \"0\"), \"invalid\")",
			"Test.assertSimilar(getFrame(1, 6, \"[\"), \"invalid\")",
			"Test.assertSimilar(getFrame(5, 4, \"z\"), [[\"zzzzz\"], [\"z   z\"], [\"z   z\"], [\"zzzzz\"]])",
			"Test.assertSimilar(getFrame(3, 4, \"A\"), [[\"AAA\"], [\"A A\"], [\"A A\"], [\"AAA\"]])",
			"Test.assertSimilar(getFrame(10, 2, \"`\"), \"invalid\")",
			"Test.assertSimilar(getFrame(10, 4, \"l\"), [[\"llllllllll\"], [\"l        l\"], [\"l        l\"], [\"llllllllll\"]])"
		],
		"starterFn": [
			"1\nfunction getFrame(w, h, ch) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tu5oTshmsjJQcJjmZ"
	},
	{
		"title": "Swapping Two by Two",
		"description": "<p><span>Write a function that swaps the first </span><strong><span>pair</span></strong><span> (1st and 2nd characters) with the second </span><strong><span>pair</span></strong><span> (3rd and 4th characters) for every quadruplet substring.</span></p><h3><span>Examples</span></h3><pre><code>swapTwo(\"ABCDEFGH\") ➞ \"CDABGHEF\"\n\nswapTwo(\"AABBCCDDEEFF\") ➞ \"BBAADDCCFFEE\"\n\nswapTwo(\"munchkins\") ➞ \"ncmuinhks\"\n\nswapTwo(\"FFGGHHI\") ➞ \"GGFFHHI\"</code></pre><h3><span>Notes</span></h3><p><span>Keep </span><strong><span>leftover strings</span></strong><span> in the same order.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(swapTwo(\"ABCDEFGH\"), \"CDABGHEF\")",
			"Test.assertEquals(swapTwo(\"AABBCCDDEEFF\"), \"BBAADDCCFFEE\")",
			"Test.assertEquals(swapTwo(\"oompaloompa\"), \"mpooooalmpa\")",
			"Test.assertEquals(swapTwo(\"munchkins\"), \"ncmuinhks\")",
			"Test.assertEquals(swapTwo(\"FFGGHHI\"), \"GGFFHHI\")",
			"Test.assertEquals(swapTwo(\"FFG\"), \"FFG\")",
			"Test.assertEquals(swapTwo(\"\"), \"\")"
		],
		"starterFn": [
			"1\nfunction swapTwo(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RdHCBE4GXzdAEFQug"
	},
	{
		"title": "Reorder Digits",
		"description": "<p><span>Create a function that reorders the digits of each numerical element in an array based on ascending (</span><code>asc</code><span>) or descending (</span><code>desc</code><span>) order.</span></p><h3><span>Examples</span></h3><pre><code>reorderDigits([515, 341, 98, 44, 211], \"asc\") ➞ [155, 134, 89, 44, 112]\n\nreorderDigits([515, 341, 98, 44, 211], \"desc\") ➞ [551, 431, 98, 44, 211]\n\nreorderDigits([63251, 78221], \"asc\") ➞ [12356, 12278]\n\nreorderDigits([63251, 78221], \"desc\") ➞ [65321, 87221]\n\nreorderDigits([1, 2, 3, 4], \"asc\")  ➞ [1, 2, 3, 4]\n\nreorderDigits([1, 2, 3, 4], \"desc\") ➞ [1, 2, 3, 4]</code></pre><h3><span>Notes</span></h3><ul><li><span>Single-digit numbers should be ordered the same regardless of direction.</span></li><li><span>Numbers in the array should be kept the same order.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"higher_order_functions",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(reorderDigits([515, 341, 98, 44, 211], 'asc'), [155, 134, 89, 44, 112])",
			"Test.assertSimilar(reorderDigits([515, 341, 98, 44, 211], 'desc'), [551, 431, 98, 44, 211])",
			"​",
			"Test.assertSimilar(reorderDigits([63251, 78221], 'asc'), [12356, 12278])",
			"Test.assertSimilar(reorderDigits([63251, 78221], 'desc'), [65321, 87221])",
			"​",
			"Test.assertSimilar(reorderDigits([1, 2, 3, 4], 'asc'), [1, 2, 3, 4])",
			"Test.assertSimilar(reorderDigits([1, 2, 3, 4], 'desc'), [1, 2, 3, 4])",
			"​",
			"Test.assertSimilar(reorderDigits([12, 21, 15, 51], 'asc'), [12, 12, 15, 15])",
			"Test.assertSimilar(reorderDigits([12, 21, 15, 51], 'desc'), [21, 21, 51, 51])"
		],
		"starterFn": [
			"1\nfunction reorderDigits(arr, direction) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4zCJaqJvEcAmqcb7y"
	},
	{
		"title": "Loves Me, Loves Me Not...",
		"description": "<p><em><span>\"Loves me, loves me not\"</span></em><span> is a traditional game in which a person plucks off all the petals of a flower </span><em><span>one by one</span></em><span>, saying the phrase </span><em><span>\"Loves me\"</span></em><span> and </span><em><span>\"Loves me not\"</span></em><span> when determining whether the one that they love, loves them back.</span></p><p><span>Given a number of petals, return a string which repeats the phrases </span><em><span>\"Loves me\"</span></em><span> and </span><em><span>\"Loves me not\"</span></em><span> for every alternating petal, and return the </span><em><span>last phrase</span></em><span> in </span><strong><span>all caps</span></strong><span>.\nRemember to put a </span><em><span>comma</span></em><span> and </span><em><span>space</span></em><span> between phrases.</span></p><h3><span>Examples</span></h3><pre><code>lovesMe(3) ➞ \"Loves me, Loves me not, LOVES ME\"\n\nlovesMe(6) ➞ \"Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\"\n\nlovesMe(1) ➞ \"LOVES ME\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to return a </span><em><span>string</span></em><span>.</span></li><li><span>The first phrase is always </span><em><span>\"Loves me\"</span></em><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(lovesMe(1), \"LOVES ME\")",
			"Test.assertEquals(lovesMe(2), \"Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(3), \"Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(4), \"Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(5), \"Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(6), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(7), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(8), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(9), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(10), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(11), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(12), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(13), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(14), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(15), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(16), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(17), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(18), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(19), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(20), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(21), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(22), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(23), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(24), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")",
			"Test.assertEquals(lovesMe(25), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, LOVES ME\")",
			"Test.assertEquals(lovesMe(26), \"Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, Loves me not, Loves me, LOVES ME NOT\")"
		],
		"starterFn": [
			"1\nfunction lovesMe(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wNfRFhnAefjJcXwQ4"
	},
	{
		"title": "Next Prime",
		"description": "<p><span>Given an integer, create a function that returns the next prime. If the number is prime, return the number itself.</span></p><h3><span>Examples</span></h3><pre><code>nextPrime(12) ➞ 13\n\nnextPrime(24) ➞ 29\n\nnextPrime(11) ➞ 11\n// 11 is a prime, so we return the number itself.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(nextPrime(12), 13)",
			"Test.assertEquals(nextPrime(24), 29)",
			"Test.assertEquals(nextPrime(11), 11)",
			"Test.assertEquals(nextPrime(13), 13)",
			"Test.assertEquals(nextPrime(14), 17)",
			"Test.assertEquals(nextPrime(33), 37)"
		],
		"starterFn": [
			"1\nfunction nextPrime(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WYHgoTtdQHjjSvD7G"
	},
	{
		"title": "Basic Arithmetic Operations on a String Number",
		"description": "<p><span>Create a function to perform basic arithmetic operations that includes </span><strong><span>addition</span></strong><span>, </span><strong><span>subtraction</span></strong><span>, </span><strong><span>multiplication</span></strong><span> and </span><strong><span>division</span></strong><span> on a string number (e.g. \"12 + 24\" or \"23 - 21\" or \"12 / 12\" or \"12 * 21\").</span></p><p><span>Here, we have </span><code>1</code><span> followed by a space, operator followed by another space and </span><code>2</code><span>. For the challenge, we are going to have only two numbers between 1 valid operator. The return value should be a number.</span></p><p><code>eval()</code><span> is not allowed. In case of division, whenever the second number equals \"0\" return </span><code>-1</code><span>.</span></p><p><span>For example:</span></p><pre><code>\"15 / 0\"  ➞ -1</code></pre><h3><span>Examples</span></h3><pre><code>arithmeticOperation(\"12 + 12\") ➞ 24 // 12 + 12 = 24\n\narithmeticOperation(\"12 - 12\") ➞ 24 // 12 - 12 = 0\n\narithmeticOperation(\"12 * 12\") ➞ 144 // 12 * 12 = 144\n\narithmeticOperation(\"12 / 0\") ➞ -1 // 12 / 0 = -1</code></pre><h3><span>Notes</span></h3><ul><li><span>All the inputs are only integers.</span></li><li><span>The operators are </span><code>*</code><span> </span><code>-</code><span> </span><code>+</code><span> and </span><code>/</code><span>.</span></li><li><span>Hint: Think about the single space that appears before and after the arithmetic operator.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"strings"
		],
		"tests": [
			"Test.assertEquals(arithmeticOperation(\"12 + 12\"), 24)",
			"Test.assertEquals(arithmeticOperation(\"22 - 12\"), 10)",
			"Test.assertEquals(arithmeticOperation(\"100 * 12\"), 1200)",
			"Test.assertEquals(arithmeticOperation(\"120 / 10\"), 12)",
			"Test.assertEquals(arithmeticOperation(\"122 / 0\"), -1)",
			"Test.assertEquals(arithmeticOperation(\"10 * 20\"), 200)",
			"Test.assertEquals(arithmeticOperation(\"10 - 10\"), 0)",
			"Test.assertEquals(arithmeticOperation(\"10 - 12\"), -2)"
		],
		"starterFn": [
			"1\nfunction arithmeticOperation(n) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/T5MRvCGsZgk5QzCcZ"
	},
	{
		"title": "Almost Palindrome",
		"description": "<p><span>A string is an </span><strong><span>almost-palindrome</span></strong><span> if, by changing </span><strong><span>only one character</span></strong><span>, you can make it a palindrome. Create a function that returns </span><code>true</code><span> if a string is an </span><strong><span>almost-palindrome</span></strong><span> and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>almostPalindrome(\"abcdcbg\") ➞ true\n// Transformed to \"abcdcba\" by changing \"g\" to \"a\".\n\nalmostPalindrome(\"abccia\") ➞ true\n// Transformed to \"abccba\" by changing \"i\" to \"b\".\n\nalmostPalindrome(\"abcdaaa\") ➞ false\n// Can't be transformed to a palindrome in exactly 1 turn.\n\nalmostPalindrome(\"1234312\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>false</code><span> if the string is already a palindrome.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(almostPalindrome(\"abcdcbg\"), true)",
			"Test.assertEquals(almostPalindrome(\"abccia\"), true)",
			"Test.assertEquals(almostPalindrome(\"abcdaaa\"), false)",
			"Test.assertEquals(almostPalindrome(\"gggfgig\"), true)",
			"Test.assertEquals(almostPalindrome(\"gggffff\"), false)",
			"Test.assertEquals(almostPalindrome(\"GIGGG\"), true)",
			"Test.assertEquals(almostPalindrome(\"ggggi\"), true)",
			"Test.assertEquals(almostPalindrome(\"ggggg\"), false, 'Should return false if already palindrome.')",
			"Test.assertEquals(almostPalindrome(\"gggfggg\"), false, 'Should return false if already palindrome.')",
			"Test.assertEquals(almostPalindrome(\"1234312\"), false)"
		],
		"starterFn": [
			"1\nfunction almostPalindrome(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rm5MSuzTPGr4t3X7h"
	},
	{
		"title": "Farthest Hamming Anagrams",
		"description": "<p><span>An </span><strong><span>anagram</span></strong><span> is a word, x, formed by rearranging the letters that make up another word, y, and using up all the letters in y at the same frequency. For example, </span><em><span>\"dear\"</span></em><span> is an anagram of </span><em><span>\"read\"</span></em><span> and </span><em><span>\"plead\"</span></em><span> is an anagram of </span><em><span>\"paled\"</span></em><span>.</span></p><p><span>The </span><strong><span>Hamming distance</span></strong><span> between two strings is the number of positions at which they differ. Hamming distances can only be calculated for strings of equal length.</span></p><pre><code>let s1 = \"eleven\"\n\nlet s2 = \"twelve\"</code></pre><p><span>They only have the third position (index 2) in common, giving them a Hamming distance of 5.</span></p><p><span>As anagrams are of identical length, the Hamming distance between them can be calculated.</span></p><pre><code>let s1 = \"read\"\n\nlet s2 = \"dear\"</code></pre><p><span>These strings differ at the first and last positions, giving them a Hamming distance of 2. </span><em><span>\"Plead\"</span></em><span> and </span><em><span>\"paled\"</span></em><span> have a Hamming distance of 3.</span></p><p><span>Create a function that takes two strings, and returns:</span></p><ul><li><code>true</code><span> if they are anagrams of each other and their Hamming distance is equal to their length (i.e. no letters in the same positions).</span></li><li><code>false</code><span> if they aren't anagrams, or</span></li><li><span>Their Hamming distance if they are anagrams with &gt;=1 letter at the same index.</span></li></ul><h3><span>Examples</span></h3><pre><code>maxHam(\"dear\", \"read\") ➞ 2\n\nmaxHam(\"dare\", \"read\") ➞ true\n\nmaxHam(\"solemn\", \"molest\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(maxHam('dare','read'), true)",
			"Test.assertEquals(maxHam('dear','read'), 2)",
			"Test.assertEquals(maxHam('naive','ravine'), false)",
			"Test.assertEquals(maxHam('observe','verbose'), 6)",
			"Test.assertEquals(maxHam('mister','remits'), true)",
			"Test.assertEquals(maxHam('pirates','traipse'), true)",
			"Test.assertEquals(maxHam('petal','leapt'), 4)",
			"Test.assertEquals(maxHam('solemn','molest'), false)",
			"Test.assertEquals(maxHam('solemn','melons'), 5)",
			"Test.assertEquals(maxHam('solemn','lemons'), true)",
			"Test.assertEquals(maxHam('emigrants','streaming'), true)",
			"Test.assertEquals(maxHam('teardrop','predated'), false)"
		],
		"starterFn": [
			"1\nfunction maxHam(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/exX3Y9T68wGvLEPHL"
	},
	{
		"title": "The Nearest Element",
		"description": "<p><span>Given an array of integers </span><code>arr</code><span>, implement a function that returns the index of the number nearest to the given value </span><code>n</code><span>. If two numbers equally distant from </span><code>n</code><span> are found, the function will return the greatest of them.</span></p><h3><span>Examples</span></h3><pre><code>nearestElement(10, [1, 100, 1000]) ➞ 0\n// 1 is the number nearest to 10.\n\nnearestElement(50, [100, 49, 51]) ➞ 2\n// 49 and 51 are equally distant from 50, with 51 being the greatest.\n\nnearestElement(-20, [-50, -10, -30]) ➞ 1\n// -10 and -30 are equally distant from -20, with -10 being the greatest.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(nearestElement(10, [1, 100, 1000]), 0, \"Example #1\")",
			"Test.assertEquals(nearestElement(50, [100, 49, 51]), 2, \"Example #2\")",
			"Test.assertEquals(nearestElement(-20, [-50, -10, -30]), 1, \"Example #3\")",
			"Test.assertEquals(nearestElement(100, [80, 60, 40]), 0)",
			"Test.assertEquals(nearestElement(48, [47, 49, 73, 51, 44, 41]), 1)",
			"Test.assertEquals(nearestElement(1, [0, -2, 3, 2, -1]), 3)",
			"Test.assertEquals(nearestElement(100, [88, 99, 101, 108, 97, 98, 36]), 2)",
			"Test.assertEquals(nearestElement(-50, [13, 86, -49, -51, 8, 0]), 2)"
		],
		"starterFn": [
			"1\nfunction nearestElement(n, arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YE4GQfR9wRbpcPrgE"
	},
	{
		"title": "ABA Integers: the Undulating Numbers",
		"description": "<p><span>In this challenge, you have to establish if a given number is undulating. A number </span><code>n</code><span> is undulating when the following conditions are </span><strong><span>all true</span></strong><span>:</span></p><ul><li><code>n</code><span> has at least three digits.</span></li><li><code>n</code><span> has exactly two different digits.</span></li><li><span>the two digits of </span><code>n</code><span> are alternating without repeating groups.</span></li></ul><p><span>If we think at the first digit of an undulating number as an \"A\", and to its  second digit as a \"B\", we can notice a sequence of the form \"ABA\", that can repeat infinite times and ends either with an \"A\" or with a \"B\", but without clusters of \"AA\" or \"BB\" into it.</span></p><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns </span><code>true</code><span> if </span><code>n</code><span> is an Undulating number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isUndulating(121) ➞ true\n// A = 1, B = 2\n// The sequence ABA is valid\n\nisUndulating(373737) ➞ true\n// A = 3, B = 7\n// The sequence ABABABAB is valid\n\nisUndulating(12) ➞ false\n// Less than three digits\n\nisUndulating(12122) ➞ false\n// The sequence ABABB is not valid\n\nisUndulating(85856) ➞ false\n// More than two different digits</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"numbers",
			"regex",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isUndulating(121), true, \"Example #1\")",
			"Test.assertEquals(isUndulating(373737), true, \"Example #2\")",
			"Test.assertEquals(isUndulating(12), false, \"Example #3\")",
			"Test.assertEquals(isUndulating(12122), false, \"Example #4\")",
			"Test.assertEquals(isUndulating(85856), false, \"Example #5\")",
			"Test.assertEquals(isUndulating(949494), true)",
			"Test.assertEquals(isUndulating(494), true)",
			"Test.assertEquals(isUndulating(363738), false)",
			"Test.assertEquals(isUndulating(3663), false)",
			"Test.assertEquals(isUndulating(81818181), true)"
		],
		"starterFn": [
			"1\nfunction isUndulating(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sysGYNhR6ZhKBFt9D"
	},
	{
		"title": "Mayan Long Count",
		"description": "<p><span>Ever heard about  </span><em><span>13.0.0.0.0</span></em><span> and the end of the world? The Maya civilization used to record the passed days from their mythological creation date (11 August 3114BC in the proleptic Gregorian calendar is the most accredited date) with a system that nowadays is called \"The Long Count\".</span></p><p><span>Days were recorded in a 5-place counter with a mixed </span><em><span>base20</span></em><span> and </span><em><span>base18</span></em><span> system. Starting from the left the names and values of the counter-places are:</span></p><ul><li><strong><span>Baktun</span></strong><span> = 20 Katun = 144000 days (from 1 to 13)</span></li><li><strong><span>Katun</span></strong><span> = 20 Tun = 7200 days (from 0 to 19)</span></li><li><strong><span>Tun</span></strong><span> = 18 Uinal = 360 days (from 0 to 19)</span></li><li><strong><span>Uinal</span></strong><span> = 20 Kin = 20 days (from 0 to 17)</span></li><li><strong><span>Kin</span></strong><span> = 1 day (from 0 to 19)</span></li></ul><p><span>A complete calendar cycle is equal to 1872000 days (13 Baktun).</span></p><p><span>The initial total Kin number is equal to the passed days from starting point to the date of interest less 365. Then, for every counter place, the  value is obtained </span><strong><span>dividing the Kin by the corresponding counter-place days value</span></strong><span> (144000 for Baktun, 7200 for Katun, and so on) with </span><strong><span>the Kin that at every step becomes the remainder of the division</span></strong><span>.</span></p><p><span>Given a date as a string you must return a string representing the Mayan Long Count Date, joining the values of Baktun, Katun, Tun, Uinal and Kin with a dot between them.</span></p><h3><span>Examples</span></h3><pre><code>getMayanDate(\"2012, 12, 21\") ➞ \"13.0.0.0.0\"\n// Whole part of 1872000 passed days / Baktun = 13, Kin (remainder) is 0\n\ngetMayanDate(\"1776, 7, 4\") ➞ \"12.8.0.1.13\"\n// Whole part of 1785633 passed days / Baktun = 12, Kin (remainder) is 57633\n// Whole part of Kin / Katun = 8, Kin is now 33.\n// Whole part of Kin / Tun = 0, Kin is  33.\n// Whole part of Kin / Uinal = 1, Kin is 13.\n\ngetMayanDate(\"1200, 1, 1\") ➞ \"10.18.15.3.8\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The starting date is already in the </span><strong><span>Code</span></strong><span> tab.</span></li><li><span>Remember to subtract 365 days from the total passed days before starting calculations.</span></li><li><span>Kin is </span><em><span>literally</span></em><span> a variable that changes at every step.</span></li><li><span>Given dates are in the \"YYYY, MM, DD\" format.</span></li><li><span>In the </span><strong><span>Resources</span></strong><span> tab you can find more info about the Mayan Long Count and a tool for calculate it given any date.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting",
			"math"
		],
		"tests": [
			"Test.assertEquals(getMayanDate(\"2012, 12, 21\"), \"13.0.0.0.0\", \"Example #1\")",
			"Test.assertEquals(getMayanDate(\"1776, 7, 4\"), \"12.8.0.1.13\", \"Example #2\")",
			"Test.assertEquals(getMayanDate(\"1200, 1, 1\"), \"10.18.15.3.8\", \"Example #3\")",
			"Test.assertEquals(getMayanDate(\"1985, 8, 20\"), \"12.18.12.4.15\")",
			"Test.assertEquals(getMayanDate(\"1945, 6, 12\"), \"12.16.11.8.16\")",
			"Test.assertEquals(getMayanDate(\"348, 3, 8\"), \"8.15.10.17.8\")",
			"Test.assertEquals(getMayanDate(\"2407, 3, 25\"), \"13.19.19.17.19\")"
		],
		"starterFn": [
			"1\nconst point0 = new Date(-3114, 7, 11)",
			"2\n​",
			"3\nfunction getMayanDate(date) {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/7d9iv4QuC7egSzqQG"
	},
	{
		"title": "Algorithms: Binary Search",
		"description": "<p><span>Create a function that finds a target number in a list of prime numbers. Implement a </span><strong><span>binary search algorithm</span></strong><span> in your function. The target number will be from 2 through 97. If the target is prime then return </span><code>\"yes\"</code><span> else return </span><code>\"no\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n\nisPrime(primes, 3) ➞ \"yes\"\n\nisPrime(primes, 4) ➞ \"no\"\n\nisPrime(primes, 67) ➞ \"yes\"\n\nisPrime(primes, 36) ➞ \"no\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You could use built-in functions to solve this, but the point of this challenge is to see if you understand the </span><strong><span>binary search algorithm</span></strong><span>.</span></li><li><span>The solution is in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"validation"
		],
		"tests": [
			"const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]",
			"​",
			"Test.assertEquals(isPrime(primes, 3), \"yes\")",
			"Test.assertEquals(isPrime(primes, 4), \"no\")",
			"Test.assertEquals(isPrime(primes, 67), \"yes\")",
			"Test.assertEquals(isPrime(primes, 36), \"no\")",
			"​",
			"// credits to KhanAcademy for this challenge"
		],
		"starterFn": [
			"1\nfunction isPrime(primes, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5puuiuvW48dEsjkzW"
	},
	{
		"title": "Sum of Missing Numbers",
		"description": "<p><span>Create a function that takes an array of \"mostly\" numbers and returns the total amount of missing numbers, given that the array is sorted in ascending order. Watch out for strings!</span></p><h3><span>Examples</span></h3><pre><code>sumOfMissingNums([\"1\", \"3\", \"5\", \"7\", \"9\"]) ➞ 4\n// 1+1+1+1\n\nsumOfMissingNums([\"7\", \"3\", \"1\", \"9\", \"5\"]) ➞ 4\n\nsumOfMissingNums([\"1\", \"5\", \"B\", \"9\", \"z\"]) ➞ 6</code></pre><h3><span>Notes</span></h3><p><span>The data might be dirty! Clean out any filthy strings.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sumOfMissingNums(['1', '3', '5', '7', '9']), 4)",
			"Test.assertEquals(sumOfMissingNums(['7', '3', '1', '9', '5']), 4)",
			"Test.assertEquals(sumOfMissingNums(['10', '20', '30', '40', '50']), 36)",
			"Test.assertEquals(sumOfMissingNums(['1', '78', 'B', '9', 'z']), 75)",
			"Test.assertEquals(sumOfMissingNums(['95', '96', '97', '98', '99']), 0)",
			"Test.assertEquals(sumOfMissingNums(['45', 'EDABIT', '56']), 10)"
		],
		"starterFn": [
			"1\nfunction sumOfMissingNums(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5X9SgidXaNf7pikbp"
	},
	{
		"title": "Junction or Self?",
		"description": "<p><span>In this challenge, you have to separate integers into two families, establishing if they are Junction Numbers or Self Numbers. Given a number </span><code>n</code><span>:</span></p><ul><li><p><span>If exists at least a single number which added to the sum of its digits is equal to </span><code>n</code><span>, then </span><code>n</code><span> is a Junction Number.</span></p></li><li><p><span>If there are not numbers which added to the sum of their digits are equal to </span><code>n</code><span>, then </span><code>n</code><span> is a Self Number.</span></p></li></ul><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns:</span></p><ul><li><span>The string </span><code>\"Self\"</code><span> if </span><code>n</code><span> is a Self Number.</span></li><li><span>If </span><code>n</code><span> is a Junction Number an array, ordered descendingly, containing the numbers which generate </span><code>n</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>junctionOrSelf(25) ➞ [17]\n// If we add 17 to the sum of its digits...\n// ...17 + 1 + 7 = 25\n// 25 is a Junction Number\n\njunctionOrSelf(818) ➞ [805, 796]\n// If we add 805 to the sum of its digits...\n// ...805 + 8 + 0 + 5 = 818\n// If we add 796 to the sum of its digits...\n// ...796 + 7 + 9 + 6 = 818\n// 818 is a Junction Number\n\njunctionOrSelf(7) ➞ \"Self\"\n// 1 + 1 = 2\n// 2 + 2 = 4\n// 3 + 3 = 6\n// No number added to its own digits is equal to 7\n// 7 is a Self Number</code></pre><h3><span>Notes</span></h3><ul><li><span>As in example #3, the sum of the digits of a positive integer lower than 10 is equal to that same integer.</span></li><li><span>By the formal definition, a Junction number must have at least two other numbers that generate it, so that the Instructions are to be considered valid only for this specific challenge.</span></li><li><span>You can expect only valid data as input.</span></li><li><em><span>Trivia</span></em><span>: the first Junction Number that can be generated by three different numbers is </span><code>10000000000001</code><span>, while the first generated by four different numbers is </span><code>1000000000000000000000102</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(junctionOrSelf(25), [17], \"Example #1\")",
			"Test.assertSimilar(junctionOrSelf(818), [805, 796], \"Example #2\")",
			"Test.assertSimilar(junctionOrSelf(7), \"Self\", \"Example #3\")",
			"Test.assertSimilar(junctionOrSelf(309), [303, 294])",
			"Test.assertSimilar(junctionOrSelf(406), [401, 392])",
			"Test.assertSimilar(junctionOrSelf(188), [175])",
			"Test.assertSimilar(junctionOrSelf(20), \"Self\")",
			"Test.assertSimilar(junctionOrSelf(1), \"Self\")",
			"Test.assertSimilar(junctionOrSelf(2), [1])",
			"Test.assertSimilar(junctionOrSelf(11), [10])",
			"Test.assertSimilar(junctionOrSelf(117), [108, 99])",
			"Test.assertSimilar(junctionOrSelf(165), \"Self\")"
		],
		"starterFn": [
			"1\nfunction junctionOrSelf(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dpc8d3knJRf2aBkif"
	},
	{
		"title": "Balanced Brackets",
		"description": "<p><span>Write a function that takes a string of brackets and checks whether they're balanced or not.</span></p><p><span>The sequence is balanced if:</span></p><ul><li><span>It contains no unmatched brackets.</span></li><li><span>The subset of brackets enclosed within the confines of a matched pair of brackets is also balanced.</span></li></ul><h3><span>Examples</span></h3><pre><code>isBalanced(\"{[()]}\") ➞ true\n\nisBalanced(\"[()]{}\") ➞ true\n\nisBalanced(\"{[([)]]}\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>undefined</code><span> if no input is given.</span></p>",
		"publishedBy": "faqofff",
		"publishedByUrl": "https://edabit.com/user/NnJhaSQJGXmv9Tqse",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isBalanced('()'), true)",
			"Test.assertEquals(isBalanced('{[()]}'), true)",
			"Test.assertEquals(isBalanced('{{[[(())]]}}'), true)",
			"Test.assertEquals(isBalanced('{{[[(())[]]]}}'), true)",
			"Test.assertEquals(isBalanced('[()]{}{[()()]()}'), true)",
			"Test.assertEquals(isBalanced('{[([)]]}'), false)",
			"Test.assertEquals(isBalanced('{[('), false)",
			"Test.assertEquals(isBalanced('])}'), false)",
			"Test.assertEquals(isBalanced('[[]'), false)",
			"Test.assertEquals(isBalanced('{)(}'), false)",
			"Test.assertEquals(isBalanced('{{[[([())]]]}}'), false)",
			"Test.assertEquals(isBalanced(), undefined)"
		],
		"starterFn": [
			"1\nfunction isBalanced(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6NSvSLWWix84rRqpD"
	},
	{
		"title": "Imgur URL Parser",
		"description": "<p><span>Create a function that takes an imgur link (as a string) and extracts the unique </span><strong><span>id</span></strong><span> and </span><strong><span>type</span></strong><span>. Return an object containing the unique </span><em><span>id</span></em><span>, and a string indicating what </span><em><span>type</span></em><span> of link it is.</span></p><p><span>The link could be pointing to:</span></p><ul><li><span>An album (e.g. </span><code>http://imgur.com/a/cjh4E</code><span>)</span></li><li><span>A gallery (e.g. </span><code>http://imgur.com/gallery/59npG</code><span>)</span></li><li><span>An image (e.g. </span><code>http://imgur.com/OzZUNMM</code><span>)</span></li><li><span>An image (direct link) (e.g. </span><code>http://i.imgur.com/altd8Ld.png</code><span>)</span></li></ul><h3><span>Examples</span></h3><pre><code>imgurUrlParser(\"http://imgur.com/a/cjh4E\") ➞ { id: \"cjh4E\", type: \"album\" }\n\nimgurUrlParser(\"http://imgur.com/gallery/59npG\") ➞ { id: \"59npG\", type: \"gallery\" }\n\nimgurUrlParser(\"http://i.imgur.com/altd8Ld.png\") ➞ { id: \"altd8Ld\", type: \"image\" }</code></pre><h3><span>Notes</span></h3><p><span>There are a few cases where the link has some changes. Look at the additional tests in the </span><strong><span>Tests</span></strong><span> tab to know more.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"objects",
			"regex"
		],
		"tests": [
			"const results = {",
			"    album: { id: 'cjh4E', type: 'album' },",
			"    gallery: { id: '59npG', type: 'gallery' },",
			"    directImage: { id: 'altd8Ld', type: 'image' },",
			"    image: { id: 'OzZUNMM', type: 'image' }",
			"};",
			"​",
			"// Base tests",
			"Test.assertSimilar(",
			"    imgurUrlParser('http://imgur.com/a/cjh4E'),",
			"    results.album,",
			"    'Should work with an album'",
			");",
			"Test.assertSimilar(",
			"    imgurUrlParser('http://imgur.com/gallery/59npG'),",
			"    results.gallery,",
			"    'Should work with a gallery'",
			");",
			"Test.assertSimilar(",
			"    imgurUrlParser('http://imgur.com/OzZUNMM'),",
			"    results.image,",
			"    'Should work with a single image'",
			");",
			"Test.assertSimilar(",
			"    imgurUrlParser('http://i.imgur.com/altd8Ld.png'),",
			"    results.directImage,"
		],
		"starterFn": [
			"1\nconst imgurUrlParser = url => {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iEDvqagg62roh5q3K"
	},
	{
		"title": "Do You Like Chicken Curry?",
		"description": "<p><span>Create a function that takes three collections of arguments and returns the product of numbers.</span></p><h3><span>Examples</span></h3><pre><code>product(1,2)(1,1)(2,3) ➞ 8\n// 1 * 1 * 2 + 2 * 1 * 3\n\nproduct(10,2)(5,0)(2,3) ➞ 100\n// 10 * 5 * 2 + 2 * 0 * 3\n\nproduct(1,2)(2,3)(3,4) ➞ 30\n// 1 * 2 * 3 + 2 * 3 * 4\n\nproduct(1,2)(0,3)(3,0) ➞ 0\n// 1 * 0 * 3 + 2 * 3 * 0</code></pre><h3><span>Notes</span></h3><p><span>All test input is valid.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"language_fundamentals",
			"scope"
		],
		"tests": [
			"Test.assertEquals(product(1,2)(1,1)(2,3), 8)",
			"Test.assertEquals(product(10,2)(5,0)(2,3), 100)",
			"Test.assertEquals(product(1,2)(2,3)(3,4), 30)",
			"Test.assertEquals(product(1,2)(0,3)(3,0), 0)"
		],
		"starterFn": [
			"1\nfunction product() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/95YiRnBSnfzSQWAuu"
	},
	{
		"title": "Look-And-Say Sequence",
		"description": "<p><span>The look-and-say sequence is generated by </span><em><span>describing</span></em><span> each group of identical digits in the previous term. If we start at \"1\", the first five terms in the sequence are:</span></p><pre><code>\"1\" = \"one 1\" = \"11\"\n\"11\" = \"two 1's\" = \"21\"\n\"21\" = \"one 2, one 1\" = \"1211\"\n\"1211\" = \"one 1, one 2, two 1's\" = \"111221\"\n\"111221\" = \"three 1's, two 2's, one 1\" = \"312211\"</code></pre><p><span>Given a term (as a string), return the </span><em><span>next term</span></em><span> in the sequence.</span></p><h3><span>Examples</span></h3><pre><code>lookAndSay(\"1211\") ➞ \"111221\"\n\nlookAndSay(\"111221\") ➞ \"312211\"\n\nlookAndSay(\"31131211131221\") ➞ \"13211311123113112211\"</code></pre><h3><span>Notes</span></h3><p><span>Terms will only include the digits 1, 2, and 3.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(lookAndSay(\"13112221\"), \"1113213211\")",
			"Test.assertEquals(lookAndSay(\"1113213211\"), \"31131211131221\")",
			"Test.assertEquals(lookAndSay(\"31131211131221\"), \"13211311123113112211\")",
			"Test.assertEquals(lookAndSay(\"13211311123113112211\"), \"11131221133112132113212221\")",
			"Test.assertEquals(lookAndSay(\"11131221133112132113212221\"), \"3113112221232112111312211312113211\")",
			"Test.assertEquals(lookAndSay(\"3113112221232112111312211312113211\"), \"1321132132111213122112311311222113111221131221\")",
			"Test.assertEquals(lookAndSay(\"1321132132111213122112311311222113111221131221\"), \"11131221131211131231121113112221121321132132211331222113112211\")",
			"Test.assertEquals(lookAndSay(\"11131221131211131231121113112221121321132132211331222113112211\"), \"311311222113111231131112132112311321322112111312211312111322212311322113212221\")",
			"Test.assertEquals(lookAndSay(\"311311222113111231131112132112311321322112111312211312111322212311322113212221\"), \"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\")",
			"Test.assertEquals(lookAndSay(\"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211\"), \"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221\")"
		],
		"starterFn": [
			"1\nfunction lookAndSay(term) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TCfRGQMcwYuCFq3nA"
	},
	{
		"title": "Beginning and End Pairs",
		"description": "<p><span>Write a function that pairs the first number in an array with the last, the second number with the second to last, etc.</span></p><h3><span>Examples</span></h3><pre><code>pairs([1, 2, 3, 4, 5, 6, 7]) ➞ [[1, 7], [2, 6], [3, 5], [4, 4]]\n\npairs([1, 2, 3, 4, 5, 6]) ➞ [[1, 6], [2, 5], [3, 4]]\n\npairs([5, 9, 8, 1, 2]) ➞ [[5, 2], [9, 1], [8, 8]]\n\npairs([]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If the array has an </span><strong><span>odd length</span></strong><span>, repeat the middle element twice for the last pair.</span></li><li><span>Return an empty array if the input is an empty array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(pairs([1, 2, 3, 4, 5, 6, 7]), [[1, 7], [2, 6], [3, 5], [4, 4]])",
			"Test.assertSimilar(pairs([1, 2, 3, 4, 5, 6]), [[1, 6], [2, 5], [3, 4]])",
			"Test.assertSimilar(pairs([5, 9, 8, 1, 2]), [[5, 2], [9, 1], [8, 8]])",
			"Test.assertSimilar(pairs([5, 6, 7]), [[5, 7], [6, 6]])",
			"Test.assertSimilar(pairs([1, 1, 4, 4, 5, 5]), [[1, 5], [1, 5], [4, 4]])",
			"Test.assertSimilar(pairs([9, 9, 9, 9, 3, 3, 9]), [[9, 9], [9, 3], [9, 3], [9, 9]])",
			"Test.assertSimilar(pairs([5, 6]), [[5, 6]])",
			"Test.assertSimilar(pairs([5]), [[5, 5]])",
			"Test.assertSimilar(pairs([]), [])"
		],
		"starterFn": [
			"1\nfunction pairs(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yoRh3uocRGRYgmqHJ"
	},
	{
		"title": "Uno (Part 2)",
		"description": "<p><span>This problem is a continuation of Uno Part 1 (although you don't need to complete that problem to complete this one).</span></p><p><span>It's your turn to play again. Create a function that takes as its arguments (1) your hand (an array of cards), and (2) the face-up card. In Uno, you are able to play a card from your hand if either:</span></p><ul><li><span>One of the card colors in your hand matches the face-up card's color.</span></li><li><span>One of the card numbers in your hand matches the face-up card's number.</span></li></ul><p><span>Write a function that will return:</span></p><ol><li><span>\"Uno!\" if </span><strong><span>after</span></strong><span> playing your card, you are left with a single card.</span></li><li><span>\"You won!\" if </span><strong><span>after</span></strong><span> playing your card, you are left with zero cards (an empty array).</span></li><li><span>\"Keep going...\" otherwise.</span></li></ol><h3><span>Examples</span></h3><pre><code>decision([\"yellow 3\", \"red 3\"], \"red 10\") ➞ \"Uno!\"\n\ndecision([\"blue 1\"], \"blue 5\") ➞ \"You won!\"\n\ndecision([\"blue 1\", \"green 2\", \"yellow 4\", \"red 2\"], \"blue 5\") ➞ \"Keep going...\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertEquals(decision(['yellow 3', 'red 3'], 'red 10'), \"Uno!\");",
			"Test.assertEquals(decision(['blue 1'], 'blue 5'), \"You won!\");",
			"Test.assertEquals(decision(['red 1'], 'blue 5'), \"Uno!\");",
			"Test.assertEquals(decision(['red 1', 'blue 10'], 'blue 5'), \"Uno!\");",
			"Test.assertEquals(decision(['red 1', 'blue 10', 'green 7'], 'blue 5'), \"Keep going...\");",
			"Test.assertEquals(decision(['red 1', 'green 7'], 'green 2'), \"Uno!\");",
			"Test.assertEquals(decision(['green 7'], 'green 2'), \"You won!\");",
			"Test.assertEquals(decision(['blue 7'], 'green 7'), \"You won!\");",
			"Test.assertEquals(decision(['blue 1', 'green 2', 'yellow 4', 'red 2'], 'blue 5'), \"Keep going...\");"
		],
		"starterFn": [
			"1\nfunction decision(hand, face) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TGCRiLbcdoTK9uwdZ"
	},
	{
		"title": "Two Distinct Elements",
		"description": "<p><span>In each input array, every number </span><strong><span>repeats at least once</span></strong><span>, except for </span><strong><span>two</span></strong><span>. Write a function that returns the </span><strong><span>two unique numbers</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>returnUnique([1, 9, 8, 8, 7, 6, 1, 6]) ➞ [9, 7]\n\nreturnUnique([5, 5, 2, 4, 4, 4, 9, 9, 9, 1]) ➞ [2, 1]\n\nreturnUnique([9, 5, 6, 8, 7, 7, 1, 1, 1, 1, 1, 9, 8]) ➞ [5, 6]</code></pre><h3><span>Notes</span></h3><p><span>Keep the same ordering in the output.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(returnUnique([1, 9, 8, 8, 7, 6, 1, 6]), [9, 7])",
			"Test.assertSimilar(returnUnique([5, 5, 2, 4, 4, 4, 9, 9, 9, 1]), [2, 1])",
			"Test.assertSimilar(returnUnique([9, 5, 6, 8, 7, 7, 1, 1, 1, 1, 1, 9, 8]), [5, 6])",
			"Test.assertSimilar(returnUnique([4, 3, 9, 9, 1, 1, 6, 1, 6, 2, 4]), [3, 2])",
			"Test.assertSimilar(returnUnique([44, 44, 44, 2, 55, 55, 55, 0, 66, 66, 66]), [2, 0])",
			"Test.assertSimilar(returnUnique([-9, -9, -9, 7, -9, -9, 1]), [7, 1])",
			"Test.assertSimilar(returnUnique([2, 2, -19, 2, 7, 7, 4, 9, 9, 0, 0, 3, 3, 3]), [-19, 4])"
		],
		"starterFn": [
			"1\nfunction returnUnique(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TyX7xfsAPfJZxfaZq"
	},
	{
		"title": "The Zodiac Symbols",
		"description": "<p><span>In Western astrology, there are twelve possible date intervals for establishing the zodiac sign of a person, with each sign having its own symbol.</span></p><table><thead><tr><th><span>Sign</span></th><th><span>Symbol</span></th><th><span>Interval</span></th></tr></thead><tbody><tr><td><span>Aries</span></td><td><strong><span>♈</span></strong></td><td><span>March 21 – April 20</span></td></tr><tr><td><span>Taurus</span></td><td><strong><span>♉</span></strong></td><td><span>April 21 – May 21</span></td></tr><tr><td><span>Gemini</span></td><td><strong><span>♊</span></strong></td><td><span>May 22 – June 21</span></td></tr><tr><td><span>Cancer</span></td><td><strong><span>♋</span></strong></td><td><span>June 22 – July 22</span></td></tr><tr><td><span>Leo</span></td><td><strong><span>♌</span></strong></td><td><span>July 23 – August 22</span></td></tr><tr><td><span>Virgo</span></td><td><strong><span>♍</span></strong></td><td><span>August 23 – September 23</span></td></tr><tr><td><span>Libra</span></td><td><strong><span>♎</span></strong></td><td><span>September 24 – October 23</span></td></tr><tr><td><span>Scorpio</span></td><td><strong><span>♏</span></strong></td><td><span>October 24 – November 22</span></td></tr><tr><td><span>Sagittarius</span></td><td><strong><span>♐</span></strong></td><td><span>November 23 – December 21</span></td></tr><tr><td><span>Capricorn</span></td><td><strong><span>♑</span></strong></td><td><span>December 22 – January 20</span></td></tr><tr><td><span>Aquarius</span></td><td><strong><span>♒</span></strong></td><td><span>January 21 – February 19</span></td></tr><tr><td><span>Pisces</span></td><td><strong><span>♓</span></strong></td><td><span>February 20 – March 20</span></td></tr></tbody></table><p><span>Given a string </span><code>dob</code><span> being a date of birth in the U.S. full format, implement a function that returns the related zodiac </span><strong><span>symbol</span></strong><span> accordingly to the table above.</span></p><h3><span>Examples</span></h3><pre><code>zodiacSymbol(\"May 9, 1951\") ➞ \"♉\"\n// Taurus\n\nzodiacSymbol(\"October 31, 1977\") ➞ \"♏\"\n// Scorpio\n\nzodiacSymbol(\"January 19, 1985\") ➞ \"♑\"\n// Capricorn</code></pre><h3><span>Notes</span></h3><ul><li><span>A list of the Unicode characters to return is already given in the </span><strong><span>Code</span></strong><span> tab.</span></li><li><span>In each date interval listed into the table, the starting date and the end date are the inclusive bounds of the range to consider.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates"
		],
		"tests": [
			"Test.assertEquals(zodiacSymbol(\"May 9, 1951\"), \"♉\", \"Example #1\")",
			"Test.assertEquals(zodiacSymbol(\"October 31, 1977\"), \"♏\", \"Example #2\")",
			"Test.assertEquals(zodiacSymbol(\"January 19, 1985\"), \"♑\", \"Example #3\")",
			"Test.assertEquals(zodiacSymbol(\"February 3, 1943\"), \"♒\")",
			"Test.assertEquals(zodiacSymbol(\"August 28, 1990\"), \"♍\")",
			"Test.assertEquals(zodiacSymbol(\"April 18, 1929\"), \"♈\")",
			"Test.assertEquals(zodiacSymbol(\"September 24, 1985\"), \"♎\")",
			"Test.assertEquals(zodiacSymbol(\"May 29, 1988\"), \"♊\")",
			"Test.assertEquals(zodiacSymbol(\"June 30, 1998\"), \"♋\")",
			"Test.assertEquals(zodiacSymbol(\"July 23, 1983\"), \"♌\")",
			"Test.assertEquals(zodiacSymbol(\"March 20, 1970\"),\"♓\")",
			"Test.assertEquals(zodiacSymbol(\"November 26, 2000\"), \"♐\")"
		],
		"starterFn": [
			"1\nconst SYMBOLS = [\"♈\", \"♉\", \"♊\", \"♋\", \"♌\", \"♍\",",
			"2\n                 \"♎\", \"♏\", \"♐\", \"♑\", \"♒\", \"♓\"];",
			"3\n​",
			"4\nfunction zodiacSymbol(dob) {",
			"5\n  ",
			"6\n}"
		],
		"url": "https://edabit.com/challenge/zfFDATiTLm6CgmGzf"
	},
	{
		"title": "Morse Code Decoded",
		"description": "<p><span>Create a function that takes a string (morse code) as an argument and returns an unencrypted string.</span></p><h3><span>Examples</span></h3><pre><code>decodeMorse(\".... . .-.. .--.   -- .   -.-.--\") ➞ \"HELP ME !\"\n\ndecodeMorse(\"-.-. .... .- .-.. .-.. . -. --. .\") ➞ \"CHALLENGE\"\n\ndecodeMorse(\". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\") ➞ \"EDABBIT CHALLENGE\"</code></pre><p><span>The following object can be used for coding:</span></p><pre><code>morseToDots = {\n  \".-\":\"A\", \"-...\":\"B\", \"-.-.\":\"C\", \"-..\":\"D\", \".\":\"E\", \"..-.\":\"F\",\n  \"--.\":\"G\", \"....\":\"H\", \"..\":\"I\", \".---\":\"J\", \"-.-\":\"K\", \".-..\":\"L\",\n  \"--\":\"M\", \"-.\":\"N\", \"---\":\"O\", \".--.\":\"P\", \"--.-\":\"Q\", \".-.\":\"R\",\n  \"...\":\"S\", \"-\":\"T\", \"..-\":\"U\", \"...-\":\"V\", \".--\":\"W\", \"-..-\":\"X\",\n  \"-.--\":\"Y\", \"--..\":\"Z\", \"-----\":\"0\", \".----\":\"1\", \"..---\":\"2\",\n  \"...--\":\"3\", \"....-\":\"4\", \".....\":\"5\", \"-....\":\"6\", \"--...\":\"7\",\n  \"---..\":\"8\", \"----.\":\"9\", \"-.-.--\":\"!\", \"   \":\" \", \"..--..\":\"?\",\n  \".-.-.-\":\".\", \".----.\":\"\"\", \"---...\":\":\", \"--..--\":\", \", \" \":\"\"\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>Return values are all uppercase.</span></li><li><span>Input string can have digits.</span></li><li><span>Input string can have some special chararacters (e.g. comma, colon, apostrophe, period, question mark, exclamation mark).</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops"
		],
		"tests": [
			"Test.assertEquals(decodeMorse(\". -.. .- -... -... .. -   -.-. .... .- .-.. .-.. . -. --. .\"), \"EDABBIT CHALLENGE\")",
			"Test.assertEquals(decodeMorse(\".... . .-.. .--.   -- .   -.-.--\"), \"HELP ME !\")",
			"Test.assertEquals(decodeMorse(\"-.-. .... .- .-.. .-.. . -. --. .\"), \"CHALLENGE\")",
			"Test.assertEquals(decodeMorse(\".----   .- .--. .--. .-.. .   .- -. -..   .....   -.-. .... . .-. .-. -.-- --..--   --...   ... .- -. -.. .-- .. -.-. .... . ... --..--   ..---   - .- -... .-.. . ... --..--   ----.   .. -. ...- .. - . -..   --. ..- -.-- ...   -.-.--   - .... .- - .----. ...   ... ---   -.-. --- --- .-.. .-.-.- .-.-.- .-.-.-\"), \"1 APPLE AND 5 CHERRY, 7 SANDWICHES, 2 TABLES, 9 INVITED GUYS ! THAT'S SO COOL...\")",
			"Test.assertEquals(decodeMorse(\"-.. .. -..   -.-- --- ..-   --. --- -   -- -.--   -- .- .. .-..   ..--..\"), \"DID YOU GOT MY MAIL ?\")",
			"Test.assertEquals(decodeMorse(\"- .-- ---   - .... .. -. --. ...   - ---   -.- -. --- .--   ---...   ..   ..-. --- .-. --. . -   - .... . --   ---... -.-.\"), \"TWO THINGS TO KNOW : I FORGET THEM :C\")"
		],
		"starterFn": [
			"1\nfunction decodeMorse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/i94xogDsjvsKep64Q"
	},
	{
		"title": "Sort the Dates",
		"description": "<p><span>In this challenge, sort an array containing a series of dates given as strings. Each date is given in the format </span><code>DD-MM-YYYY_HH:MM</code><span>:</span></p><pre><code>\"12-02-2012_13:44\"</code></pre><p><span>The priority of criteria used for sorting will be:</span></p><ul><li><span>Year</span></li><li><span>Month</span></li><li><span>Day</span></li><li><span>Hours</span></li><li><span>Minutes</span></li></ul><p><span>Given an array </span><code>arr</code><span> and a string </span><code>type</code><span>, implement a function that returns:</span></p><ul><li><span>if </span><code>type</code><span> is equal to </span><code>\"ASC\"</code><span>, the array </span><code>arr</code><span> sorted in ascending order.</span></li><li><span>if </span><code>type</code><span> is equal to </span><code>\"DSC\"</code><span>, the array </span><code>arr</code><span> sorted in descending order.</span></li></ul><h3><span>Examples</span></h3><pre><code>sortDates([\"10-02-2018_12:30\", \"10-02-2016_12:30\", \"10-02-2018_12:15\"], \"ASC\") ➞ [\n  \"10-02-2016_12:30\", \"10-02-2018_12:15\", \"10-02-2018_12:30\"\n]\n\nsortDates([\"10-02-2018_12:30\", \"10-02-2016_12:30\", \"10-02-2018_12:15\"], \"DSC\") ➞ [\n  \"10-02-2018_12:30\", \"10-02-2018_12:15\", \"10-02-2016_12:30\"\n]\n\nsortDates([\"09-02-2000_10:03\", \"10-02-2000_18:29\", \"01-01-1999_00:55\"], \"ASC\") ➞ [\n  \"01-01-1999_00:55\", \"09-02-2000_10:03\", \"10-02-2000_18:29\"\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember: the date is in the format </span><code>DD-MM-YYYY_HH:MM</code><span>.</span></li><li><span>You can expect only valid formatted dates, without exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"sorting",
			"strings"
		],
		"tests": [
			"const dates1 = [",
			"  \"18-10-2016_12:09\", \"01-12-2017_20:32\", \"18-10-2016_12:04\",",
			"  \"19-10-2017_16:20\", \"18-10-2017_16:19\", \"18-10-2016_16:19\"",
			"];",
			"​",
			"Test.assertSimilar(sortDates(dates1, \"ASC\"), [",
			"  \"18-10-2016_12:04\",",
			"  \"18-10-2016_12:09\",",
			"  \"18-10-2016_16:19\",",
			"  \"18-10-2017_16:19\",",
			"  \"19-10-2017_16:20\",",
			"  \"01-12-2017_20:32\",",
			"]);",
			"​",
			"Test.assertSimilar(sortDates(dates1, \"DSC\"), [",
			"  \"01-12-2017_20:32\",",
			"  \"19-10-2017_16:20\",",
			"  \"18-10-2017_16:19\",",
			"  \"18-10-2016_16:19\",",
			"  \"18-10-2016_12:09\",",
			"  \"18-10-2016_12:04\"",
			"]);",
			"​",
			"const dates2 = [",
			"  \"11-02-2011_00:01\", \"21-04-2013_11:43\", \"02-09-2018_11:00\",",
			"  \"02-09-2018_10:00\", \"02-09-2018_10:30\", \"11-02-2011_00:00\""
		],
		"starterFn": [
			"1\nfunction sortDates(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KWNt5yhvxtEJRMwJZ"
	},
	{
		"title": "Extending the Array Prototype",
		"description": "<p><span>Write the following functions to extend the array prototype, by adding the methods:</span></p><ol><li><span>square()</span></li><li><span>cube()</span></li><li><span>divisible_by(x)</span></li><li><span>strictly_above(x)</span></li><li><span>strictly_below(x)</span></li></ol><h3><span>Examples</span></h3><pre><code>[1, 2, 3].square ➞ [1, 4, 9]\n\n[1, 2, 3].cube ➞ [1, 8, 27]\n\n[1, 2, 3, 4].divisible_by(2) ➞ [2, 4]\n\n[1, 2, 3, 4].strictly_above(1) ➞ [2, 3, 4]\n\n[1, 2, 3, 4].strictly_below(2) ➞ [1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertSimilar([1, 2, 3].square(), [1, 4, 9])",
			"Test.assertSimilar([1, 2, 3].cube(), [1, 8, 27])",
			"Test.assertSimilar([1, 2, 3, 4].divisible_by(2), [2, 4])",
			"Test.assertSimilar([1, 2, 3, 4].strictly_above(1), [2, 3, 4])",
			"Test.assertSimilar([1, 2, 3, 4].strictly_below(2), [1])",
			"​",
			"Test.assertSimilar([-2, -1, 0, 1].square(), [4, 1, 0, 1])",
			"Test.assertSimilar([-2, -1, 0, 1].cube(), [-8, -1, 0, 1])",
			"Test.assertSimilar([-2, -1, 0, 1].divisible_by(4), [0])",
			"Test.assertSimilar([-2, -1, 0, 1].strictly_above(-1), [0, 1])",
			"Test.assertSimilar([-2, -1, 0, 1].strictly_below(1), [-2, -1, 0])"
		],
		"starterFn": [
			"1\n/* Fill in 5 array prototype methods below:",
			"2\n  1. square()",
			"3\n  2. cube()",
			"4\n  3. divisible_by()",
			"5\n  4. strictly_above()",
			"6\n  5. strictly_below()",
			"7\n*/",
			"8\n​",
			"9\n/* Fill in */ = function() {",
			"10\n  ",
			"11\n}",
			"12\n​",
			"13\n/* Fill in */ = function() {",
			"14\n  ",
			"15\n}",
			"16\n​",
			"17\n/* Fill in */ = function(x) {",
			"18\n  ",
			"19\n}",
			"20\n​",
			"21\n/* Fill in */ = function(x) {",
			"22\n  ",
			"23\n}",
			"24\n​",
			"25\n/* Fill in */ = function(x) {",
			"26\n  "
		],
		"url": "https://edabit.com/challenge/NDRSf8SFHz3rHS4Qm"
	},
	{
		"title": "Express Number in Expanded Notation",
		"description": "<p><span>Create a function that takes a </span><em><span>number</span></em><span> and return a </span><em><span>string</span></em><span> with the number in expanded notation (AKA expanded form). See the resources tab for details on expanded notation.</span></p><h3><span>Examples</span></h3><pre><code>expand(13) ➞ \"10 + 3\"\n\nexpand(86) ➞ \"80 + 6\"\n\nexpand(17000000) ➞ \"10000000 + 7000000\"\n\nexpand(5325) ➞ \"5000 + 300 + 20 + 5\"</code></pre><h3><span>Notes</span></h3><p><span>You can expect only whole numbers greater than 0 as test input.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(expand(13), \"10 + 3\")",
			"Test.assertEquals(expand(86), \"80 + 6\")",
			"Test.assertEquals(expand(17000000), \"10000000 + 7000000\")",
			"Test.assertEquals(expand(420370022), \"400000000 + 20000000 + 300000 + 70000 + 20 + 2\")",
			"Test.assertEquals(expand(70304), \"70000 + 300 + 4\")",
			"Test.assertEquals(expand(9000000), \"9000000\")",
			"Test.assertEquals(expand(5325), \"5000 + 300 + 20 + 5\")",
			"Test.assertEquals(expand(2096039485293), \"2000000000000 + 90000000000 + 6000000000 + 30000000 + 9000000 + 400000 + 80000 + 5000 + 200 + 90 + 3\")",
			"Test.assertEquals(expand(92093403034573), \"90000000000000 + 2000000000000 + 90000000000 + 3000000000 + 400000000 + 3000000 + 30000 + 4000 + 500 + 70 + 3\")"
		],
		"starterFn": [
			"1\nfunction expand(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fiXLsemkYTK9oKuDC"
	},
	{
		"title": "Star Shorthand",
		"description": "<p><span>Write a function that converts a string into </span><strong><span>star shorthand</span></strong><span>. If a character is repeated </span><code>n</code><span> times, convert it into </span><code>character*n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>toStarShorthand(\"abbccc\") ➞ \"ab*2c*3\"\n\ntoStarShorthand(\"77777geff\") ➞ \"7*5gef*2\"\n\ntoStarShorthand(\"abc\") ➞ \"abc\"\n\ntoStarShorthand(\"\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Leave lone occurrences of a character as is.</span></li><li><span>Return an empty string if given an empty string input.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(toStarShorthand(\"abbccc\"), \"ab*2c*3\")",
			"Test.assertEquals(toStarShorthand(\"haaaappyyyyy\"), \"ha*4p*2y*5\")",
			"Test.assertEquals(toStarShorthand(\"77777geff\"), \"7*5gef*2\")",
			"Test.assertEquals(toStarShorthand(\"11223344\"), \"1*22*23*24*2\")",
			"Test.assertEquals(toStarShorthand(\"abc\"), \"abc\")",
			"Test.assertEquals(toStarShorthand(\"\"), \"\")"
		],
		"starterFn": [
			"1\nfunction toStarShorthand(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/skaEqSDppmQqApNQu"
	},
	{
		"title": "Get Students with Names and Notes Average",
		"description": "<p><span>Create a function that takes an array of objects like </span><code>{ name: \"John\", notes: [3, 5, 4]}</code><span> and returns an array of objects like </span><code>{ name: \"John\", avgNote: 4 }</code><span>. If student has no notes (an empty array) then let's assume </span><code>avgNote: 0</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>[\n  { name: \"John\", notes: [3, 5, 4]}\n] ➞ [\n  { name: \"John\", avgNote: 4 }\n]</code></pre><h3><span>Notes</span></h3><p><span>Try doing it with an arrow function.</span></p>",
		"publishedBy": "Bartosz Cytrowski",
		"publishedByUrl": "https://edabit.com/user/QCchMDx3z8NcqT8QJ",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects"
		],
		"tests": [
			"const objectsAreEqual = (actual, expected) => Object.keys(expected).every(",
			"  key => actual[key] === expected[key]",
			")",
			"const areEqual = (actual, expected, compare) => expected.every(",
			"  (item, index) => compare(actual[index], item)",
			")",
			"const sets = [",
			"  [['Jacek', [5, 4, 3]], ['Ewa', [3, 3, 3]], ['Zygmunt', [1, 2, 3]]],",
			"  [['Jacek', []], ['Ewa', []], ['Zygmunt', [1, 2, 3]]],",
			"  []",
			"].map(",
			"  set => ({ ",
			"    actual: getStudentsWithNamesAndAvgNote(",
			"      set.map(([name, notes]) => ({ name, notes }))",
			"    ), ",
			"    expected: set.map(",
			"      ([name, notes]) => ({ ",
			"      name, ",
			"      avgNote: notes.reduce(",
			"       (total, next) => total + next, ",
			"       0",
			"      ) / (notes.length || 1) ",
			"    }))",
			"  })   ",
			").forEach(",
			"  ({ actual, expected }) => {"
		],
		"starterFn": [
			"1\nfunction getStudentsWithNamesAndAvgNote(students) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aZiwEFEdFvWoBvDWS"
	},
	{
		"title": "Gold Distribution",
		"description": "<p><span>A group of pirates each have a distribution of gold coins, which can be represented as an array:</span></p><pre><code>[3, 9, 4, 5, 5]\n// Pirate 1 has 3 gold, Pirate 2 has 9 gold, etc.</code></pre><p><span>The difference between each pirate's share of gold and that of the richest pirate is represented as:</span></p><pre><code>[6, 0, 5, 4, 4]\n// Since 6 = 9 - 3, 0 = 9 - 9, 4 = 9 - 5, etc.</code></pre><p><span>Pirates have a keen sense of fairness, and a pirate will kill the others if he deems his share to be too little. Each pirate has a </span><strong><span>unique inequality threshold</span></strong><span> - the maximum difference he is willing to tolerate before he kills his comrades.</span></p><p><span>Using the above gold distribution:</span></p><pre><code>[5, 0, 5, 5, 5]\n// Pirates killed, since 5 &lt; 6.\n// 5 is Pirate 1's inequality distribution and 6 is his gold difference.\n\n[7, 0, 5, 5, 5]\n// Pirate 1 is satisfied, since 7 &gt; 6.\n// All other pirates are satisfied as well.</code></pre><p><span>Given a distribution of coins and an array of inequality thresholds, create a function that returns </span><code>true</code><span> if any pirates are killed, or </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>piratesKilled([3, 5, 8, 3, 4], [10, 4, 2, 5, 5]) ➞ false\n\npiratesKilled([3, 5, 8, 3, 4], [10, 4, 2, 5, 1]) ➞ true\n\npiratesKilled([3, 3, 10], [7, 7, 0]) ➞ false\n\npiratesKilled([3, 3, 10], [6, 6, 0]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>A pirate kills if the difference in his share of gold from the riches pirate is </span><strong><span>strictly greater</span></strong><span> than his </span><strong><span>inequality threshold</span></strong><span>.</span></li><li><span>Gold and inequality distribution arrays are both ordered the same. (e.g. Pirate 1 is index 0 for both arrays, Pirate 2 is index 1 for both arrays, etc).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(piratesKilled([3, 5, 8, 3, 4], [10, 4, 2, 5, 5]), false)",
			"Test.assertEquals(piratesKilled([3, 5, 8, 3, 4], [10, 4, 2, 5, 1]), true)",
			"Test.assertEquals(piratesKilled([3, 3, 10], [7, 7, 0]), false)",
			"Test.assertEquals(piratesKilled([3, 3, 10], [6, 6, 0]), true)",
			"Test.assertEquals(piratesKilled([3, 3, 3], [0, 0, 0]), false)",
			"Test.assertEquals(piratesKilled([3, 3, 4, 4], [0, 0, 1, 1]), true)",
			"Test.assertEquals(piratesKilled([3, 3, 4, 4], [1, 1, 0, 0]), false)",
			"Test.assertEquals(piratesKilled([3, 3, 4, 4], [0, 0, 0, 1]), true)",
			"Test.assertEquals(piratesKilled([3, 3, 4, 4, 5], [0, 0, 0, 1, 1]), true)"
		],
		"starterFn": [
			"1\nfunction piratesKilled(gold, tolerance) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KNjaveTsz3PQiHa8w"
	},
	{
		"title": "Find the Shortest Word(s) in a Sentence",
		"description": "<p><span>Create a function that accepts a string as an argument. Find its shortest word(s) and return them as an array sorted alphabetically (if there are multiple shortest words).</span></p><h3><span>Examples</span></h3><pre><code>findShortestWords(\"I think the solution is fairly obvious.\") ➞ [\"i\"]\n\nfindShortestWords(\"Chase two rabbits, catch none.\") ➞ [\"two\"]\n\nfindShortestWords(\"We become what we think about.\") ➞ [\"we\", \"we\"]\n\nfindShortestWords(\"The quick brown fox jumped over the lazy dogs back.\") ➞ [\"fox\", \"the\", \"the\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Periods, commas and other special characters don't count as part of a word's length.</span></li><li><span>Remember to sort the array of words alphabetically before returning your result.</span></li><li><span>Return words in lowercase only.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(findShortestWords(\"Strive not to be a success, but rather to be of value.\"), ['a'])",
			"Test.assertSimilar(findShortestWords(\"You miss 100% of the shots you don’t take.\"), ['of'])",
			"Test.assertSimilar(findShortestWords(\"Life is what happens to you while you’re busy making other plans.\"), ['is', 'to'])",
			"Test.assertSimilar(findShortestWords(\"We become what we think about.\"), ['we', 'we'])",
			"Test.assertSimilar(findShortestWords(\"The most common way people give up their power is by thinking they don’t have any.\"), ['by', 'is', 'up'])",
			"Test.assertSimilar(findShortestWords(\"The best time to plant the tree was 20 years ago. The second best time is now.\"), ['is', 'to'])",
			"Test.assertSimilar(findShortestWords(\"Your time is limited, so don’t waste it living someone else’s life.\"), ['is', 'it', 'so'])",
			"Test.assertSimilar(findShortestWords(\"You can never cross the ocean until you have the courage to lose sight of the shore.\"), ['of', 'to'])",
			"Test.assertSimilar(findShortestWords(\"There is only one way to avoid criticism: do nothing, say nothing, and be nothing.\"), ['be', 'do', 'is', 'to' ])",
			"Test.assertSimilar(findShortestWords(\"The only person you are destined to become is the person you decide to be.\"), ['be', 'is', 'to', 'to'])",
			"Test.assertSimilar(findShortestWords(\"What lies behind us and what lies before us are tiny matters compared to what lies within us.\"), ['to', 'us', 'us', 'us'])",
			"Test.assertSimilar(findShortestWords(\"If you are depressed you are living in the past. If you are anxious you are living in the future. If you are at peace you are living in the present.\"), ['at', 'if', 'if', 'if', 'in', 'in', 'in'])",
			"Test.assertSimilar(findShortestWords(\"Happiness depends upon ourselves.\"), ['upon'])",
			"Test.assertSimilar(findShortestWords(\"Chase two rabbits, catch none.\"), ['two'])",
			"Test.assertSimilar(findShortestWords(\"Only the truth of who you are, if realized, will set you free.\"), ['if', 'of'])",
			"Test.assertSimilar(findShortestWords(\"If you end up with a boring miserable life because you listened to your parents, your teacher, your priest, or some guy on television, then you deserve it.\"), ['a'])",
			"Test.assertSimilar(findShortestWords(\"To accomplish great things, we must not only act, but also dream; not only plan, but also believe.\"), ['to', 'we'])",
			"Test.assertSimilar(findShortestWords(\"A tiger doesn’t lose sleep over the opinion of sheep.\"), ['a'])",
			"Test.assertSimilar(findShortestWords(\"Kindness is a language that the deaf can hear and the blind can see.\"), ['a'])",
			"Test.assertSimilar(findShortestWords(\"Being realistic is the most common path to mediocrity.\"), ['is', 'to'])",
			"Test.assertSimilar(findShortestWords(\"Bravery means finding something more important than fear.\"), ['fear', 'more', 'than'])",
			"Test.assertSimilar(findShortestWords(\"Can you imagine what I would do if I could do all I can?\"), ['i', 'i', 'i'])",
			"Test.assertSimilar(findShortestWords(\"Believe you can and you’re halfway there.\"), ['and', 'can', 'you'])",
			"Test.assertSimilar(findShortestWords(\"Remember that happiness is a way of travel, not a destination.\"), ['a', 'a'])",
			"Test.assertSimilar(findShortestWords(\"May the best day of your past be the worst day of your future.\"), ['be', 'of', 'of'])"
		],
		"starterFn": [
			"1\nfunction findShortestWords(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mYJPkSLLxWthSffR6"
	},
	{
		"title": "The Twins Paradox",
		"description": "<p><span>Jack and Jill are twins.  When they are 10 years of age, Jack leaves earth in his spaceship bound for Altair IV, some 17 light-years distant. Though not equipped with warp drive, Jack's ship is still capable of attaining near light speed.  When he returns to earth he finds that Jill has grown to adulthood while he, Jack, remains a young boy.</span></p><p><span>Albert Einstein had predicted this strange quirk of time in his 1905 paper \"On the Electrodynamics of Moving Bodies\" aka The Theory of Special Relativity. It has been verified experimentally many times.</span></p><p><span>Implement a function that has as its arguments: The twins' age at the time of Jack's departure, the distance in light-years to the destination star, and the speed of Jack's ship as a fraction of the speed of light. The function will return Jack's age and Jill's age at the time of Jack's return to earth, rounded to the nearest tenth of a year.  The math is simple enough for 10-year-old Jack to understand.  See </span><strong><span>Resources</span></strong><span> for help.</span></p><h3><span>Examples</span></h3><pre><code>twins(20, 10, 0.4) ➞ \"Jack's age is 65.8, Jill's age is 70.0\"\n\ntwins(20, 10, 0.8) ➞ \"Jack's age is 35.0, Jill's age is 45.0\"\n\ntwins(10, 16. 73, 0.999) ➞ \"Jack's age is 11.5, Jill's age is 43.5\"\n// The Altair IV trip.</code></pre><h3><span>Notes</span></h3><p><span>We are assuming for the sake of simplicity that Jack's periods of acceleration and deceleration are negligibly brief. That is a huge assumption but, nevertheless, it doesn't invalidate the age calculations.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(twins(20, 10, 0.4), \"Jack's age is 65.8, Jill's age is 70.0\")",
			"Test.assertEquals(twins(20, 10, 0.8), \"Jack's age is 35.0, Jill's age is 45.0\")",
			"Test.assertEquals(twins(10, 16.73, 0.999), \"Jack's age is 11.5, Jill's age is 43.5\")",
			"Test.assertEquals(twins(1, 5, 0.1), \"Jack's age is 100.5, Jill's age is 101.0\")",
			"Test.assertEquals(twins(25, 30, 0.99999), \"Jack's age is 25.3, Jill's age is 85.0\")"
		],
		"starterFn": [
			"1\nfunction twins(age, distance, velocity) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/B4GHBsZTGffz2ySGL"
	},
	{
		"title": "Bird Names to Four Letter Bird Codes",
		"description": "<p><span>In the world of birding there are four-letter codes for the common names of birds. These codes are created by some simple rules:</span></p><ul><li><span>If the bird's name has only one word, the code takes the first four letters of that word.</span></li><li><span>If the name is made up of two words, the code takes the first two letters of each word.</span></li><li><span>If the name is made up of three words, the code is created by taking the first letter from the first two words and the first two letters from the third word.</span></li><li><span>If the name is four words long, the code uses the first letter from all the words.</span></li></ul><p><span>There are other ways codes are created, but this challenge will only use the four rules listed above.</span></p><p><span>In this challenge you will write a function that takes an array of strings of common bird names and create the codes for those names based on the rules above. The function will return an array of codes in the same order in which the input names were presented.</span></p><h3><span>Examples:</span></h3><pre><code>birdCode([\"Black-Capped Chickadee\", \"Common Tern\"]) ➞ [\"BCCH\", \"COTE\"]\n\nbirdCode([\"American Redstart\", \"Northern Cardinal\"]) ➞ [\"AMRE\",\"NOCA\"]\n\nbirdCode([\"Bobolink\", \"American White Pelican\"]) ➞ [\"BOBO\",\"AWPE\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>The four-letter codes  in the returned array should be in UPPER CASE.</span></li><li><span>If a common name has a hyphen/dash, it should be considered a space.</span></li></ul>",
		"publishedBy": "sharkbait",
		"publishedByUrl": "https://edabit.com/user/Hz8mnq7xFJZKLymTh",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(birdCode([\"Common Tern\", \"Black-Capped Chickadee\"]), [\"COTE\",\"BCCH\"])",
			"Test.assertSimilar(birdCode([\"American Redstart\", \"Northern Cardinal\", \"Pine Grosbeak\", \"Barred Owl\", \"Starling\", \"Cooper's Hawk\", \"Pigeon\"]), [\"AMRE\",\"NOCA\",\"PIGR\",\"BAOW\",\"STAR\",\"COHA\",\"PIGE\"])",
			"Test.assertSimilar(birdCode([\"Great Crested Flycatcher\", \"Bobolink\", \"American White Pelican\", \"Red-Tailed Hawk\", \"Eastern Screech Owl\", \"Blue Jay\"]), [\"GCFL\",\"BOBO\",\"AWPE\",\"RTHA\",\"ESOW\",\"BLJA\"])",
			"Test.assertSimilar(birdCode([\"Black-Crowned Night Heron\", \"Northern Mockingbird\", \"Eastern Meadowlark\", \"Dark-Eyed Junco\", \"Red-Bellied Woodpecker\"]), [\"BCNH\",\"NOMO\",\"EAME\",\"DEJU\",\"RBWO\"])",
			"Test.assertSimilar(birdCode([\"Scarlet Tanager\", \"Great Blue Heron\", \"Eastern Phoebe\", \"American Black Duck\", \"Mallard\", \"Canvasback\", \"Merlin\", \"Ovenbird\"]), [\"SCTA\",\"GBHE\",\"EAPH\",\"ABDU\",\"MALL\",\"CANV\",\"MERL\",\"OVEN\"])",
			"Test.assertSimilar(birdCode([\"Fox Sparrow\", \"White-Winged Crossbill\", \"Veery\", \"American Coot\", \"Sora\", \"Northern Rough-Winged Swallow\", \"Purple Martin\"]), [\"FOSP\",\"WWCR\",\"VEER\",\"AMCO\",\"SORA\",\"NRWS\",\"PUMA\"])"
		],
		"starterFn": [
			"1\nfunction birdCode(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MDixWSYxH5JZX3xo3"
	},
	{
		"title": "Promises VIII: Old Callback API",
		"description": "<p><span>You may run into some old asynchronous API that requires you to pass in a callback. Take the </span><code>setTimeout()</code><span> function for example:</span></p><pre><code>setTimeout(() =&gt; saySomething(\"1 second passed\"), 1000)</code></pre><p><span>What if an error occured in the </span><code>saySomething()</code><span> function. How could you handle it? Wrap it with a Promise!</span></p><p><span>There are some elements missing in the </span><strong><span>wait</span></strong><span> function, it should return a </span><strong><span>promise</span></strong><span>. Create an error handler and assign the error to </span><strong><span>ERR</span></strong><span> inside the handler.</span></p><h3><span>Notes</span></h3><ul><li><span>Do not change the function </span><code>saySomething()</code><span>.</span></li><li><span>You should not have to erase any of the existing code.</span></li><li><span>Check </span><strong><span>Resources</span></strong><span> if you get stuck.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"function promiseState(p) {",
			"  const t = {};",
			"  return Promise.race([p, t]).then(v => (v === t)? \"pending\" : \"fulfilled\", () => \"rejected\");",
			"}",
			"​",
			"Test.assertEquals(ERR, \"\", \"You are only allowed to reassign 'ERR' in the error handler.\")",
			"promiseState(wait).then(state => Test.assertEquals(state, \"fulfilled\"))",
			"wait().then(x => Test.assertEquals(ERR, \"what the heck\"))"
		],
		"starterFn": [
			"1\nfunction saySomething(str) {",
			"2\n  throw \"what the heck\"",
			"3\n}",
			"4\n​",
			"5\nlet ERR = \"\"",
			"6\n​",
			"7\nconst wait = () => new (   => setTimeout(  , 1000))",
			"8\n​",
			"9\nwait().then(() => saySomething(\"1 second has passed\"))"
		],
		"url": "https://edabit.com/challenge/R8atdhgsG4B69AZzR"
	},
	{
		"title": "Number of Times a Character Appears",
		"description": "<p><span>Create a function that returns the number of times a character appears in each word in a sentence. Treat upper and lower case characters of the same letter as being identical (e.g. </span><code>a</code><span> exists in </span><code>Anna</code><span> twice, not once).</span></p><h3><span>Examples</span></h3><pre><code>charAppears(\"She sells sea shells by the seashore.\", \"s\")\n➞ [1, 2, 1, 2, 0, 0, 2]\n// \"s\" shows up once in \"She\", twice in \"sells\", once in \"sea\", twice in \"shells\", etc.\n\ncharAppears(\"Peter Piper picked a peck of pickled peppers.\", \"P\")\n➞ [1, 2, 1, 0, 1, 0, 1, 3]\n// \"p\" shows up once in \"Peter\", ... 3 times in \"peppers\".\n\ncharAppears(\"She hiked in the morning, then swam in the river.\", \"t\")\n➞ [0, 0, 0, 1, 0, 1, 0, 0, 1, 0]</code></pre><h3><span>Notes</span></h3><p><span>Ignore case (note that capitalization, in both the sentence and character itself, in examples #1 &amp; #2).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(charAppears(\"She sells sea shells by the seashore.\", \"s\"), [1, 2, 1, 2, 0, 0, 2])",
			"Test.assertSimilar(charAppears(\"Peter Piper picked a peck of pickled peppers.\", \"p\"), [1, 2, 1, 0, 1, 0, 1, 3])",
			"Test.assertSimilar(charAppears(\"She hiked in the morning, then swam in the river.\", \"t\"), [0, 0, 0, 1, 0, 1, 0, 0, 1, 0])",
			"Test.assertSimilar(charAppears(\"I scream, you scream, we all scream for ice cream.\", \"f\"), [0, 0, 0, 0, 0, 0, 0, 1, 0, 0])",
			"Test.assertSimilar(charAppears(\"Snap, crackle, pop!\", \"p\"), [1, 0, 2])",
			"Test.assertSimilar(charAppears(\"What a wonderful world.\", \"w\"), [1, 0, 1, 1])"
		],
		"starterFn": [
			"1\nfunction charAppears(sentence, char) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Mbmyf5Q2bXJvdtaiv"
	},
	{
		"title": "Pricey Products",
		"description": "<p><span>You will be given an object with various consumer products and thier respective prices. Return a list of the products with a minimum price of 500 in descending order.</span></p><h3><span>Examples</span></h3><pre><code>products({\"Computer\" : 600, \"TV\" : 800, \"Radio\" : 50}) ➞ [\"TV\",\"Computer\"]\n\nproducts({\"Bike1\" : 510, \"Bike2\" : 401, \"Bike3\" : 501}) ➞ [\"Bike1\", \"Bike3\"]) \n\nproducts({\"Loafers\" : 50, \"Vans\" : 10, \"Crocs\" : 20}) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "DreamArdor",
		"publishedByUrl": "https://edabit.com/user/PAzNgJF54C2mYPkR9",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"objects",
			"sorting"
		],
		"tests": [
			"Test.assertDeepEquals(products({\"Computer\" : 600, \"TV\" : 800, \"Radio\" : 100}), [\"TV\",\"Computer\"])",
			"Test.assertDeepEquals(products({\"Bike1\" : 510, \"Bike2\" : 401, \"Bike3\" : 501}), [\"Bike1\", \"Bike3\"])",
			"Test.assertDeepEquals(products({\"Calvin Klein\" : 500, \"Armani\" : 5000, \"Dolce & Gabbana\" : 2000}), [\"Armani\", \"Dolce & Gabbana\", \"Calvin Klein\"])",
			"Test.assertDeepEquals(products({\"Loafers\" : 50, \"Vans\" : 10, \"Crocs\" : 20}), [])",
			"Test.assertDeepEquals(products({\"Dell\" : 400, \"HP\" : 300, \"Apple\" : 1200}), ['Apple'])"
		],
		"starterFn": [
			"1\nfunction products(r) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/neWTApTYread9ZNdP"
	},
	{
		"title": "Delete Occurrences of Extra Elements in an Array",
		"description": "<p><span>Create a function that takes two arguments: an array and a number. In the array (the first argument), if an element occurs more than N times (the second argument), remove the extra occurrence(s) and return the result.</span></p><h3><span>Examples</span></h3><pre><code>deleteOccurrences([1, 1, 1, 1], 2) ➞ [1, 1]\n\ndeleteOccurrences([13, true, 13, null], 1) ➞ [13, true, null]\n\ndeleteOccurrences([true, true, true], 3) ➞ [true, true, true]</code></pre><h3><span>Notes</span></h3><p><span>Do not alter the order of the original array.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures"
		],
		"tests": [
			"Test.assertSimilar(deleteOccurrences([1, 1, 1, 1], 2), [1, 1]);",
			"Test.assertSimilar(deleteOccurrences([true, true, true], 3), [true, true, true]);",
			"Test.assertSimilar(deleteOccurrences([13, true, 13, null], 1), [13, true, null]);",
			"Test.assertSimilar(deleteOccurrences([], 100), []);",
			"Test.assertSimilar(deleteOccurrences([\"John\", \"John\", \"Marry\", \"Marry\"], 1), [\"John\", \"Marry\"]);",
			"Test.assertSimilar(deleteOccurrences([\"Marry\", \"John\", null, \"John\", false, \"John\", 0, \"John\", \"Marry\", \"Marry\", \"John\"], 3), [\"Marry\", \"John\", null, \"John\", false, \"John\", 0, \"Marry\", \"Marry\"]);",
			"Test.assertSimilar(deleteOccurrences([20, 37, 20, 21], 1), [20, 37, 21]);",
			"Test.assertSimilar(deleteOccurrences([1, 1, 3, 3, 7, 2, 2, 2, 2], 3), [1, 1, 3, 3, 7, 2, 2, 2]);",
			"Test.assertSimilar(deleteOccurrences([1, 2, 3, 1, 1, 2, 1, 2, 3, 3, 2, 4, 5, 3, 1],3), [1, 2, 3, 1, 1, 2, 2, 3, 3, 4, 5]);"
		],
		"starterFn": [
			"1\nfunction deleteOccurrences(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sRuLYeBet7XE2wpRL"
	},
	{
		"title": "Swimming Pool",
		"description": "<p><span>Suppose a swimming pool blueprint can be represented as a 2D array, where </span><code>1</code><span>s represent the pool and </span><code>0</code><span>s represent the rest of the backyard.</span></p><pre><code>[[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0]]\n// Legitimate</code></pre><p><span>Suppose a pool is considered </span><strong><span>legitimate</span></strong><span> if it does not touch any of the four borders in this 2D array.</span></p><pre><code>[[1, 1, 0, 0, 0, 0, 0, 0],\n[1, 1, 1, 1, 1, 1, 0, 0],\n[0, 1, 1, 1, 1, 1, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0]]\n// Illegitimate! \n// The 1s are touching both the left \"fence\" and the upper \"fence\".</code></pre><p><span>Create a function that returns </span><code>true</code><span> if the pool plan is legitimate, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isLegitimate([\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0]\n]) ➞ true\n\nisLegitimate([\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 0, 1, 1, 1, 0, 0, 0]\n]) ➞ false\n\nisLegitimate([\n  [0, 0, 0, 0, 0],\n  [0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 0],\n  [0, 0, 0, 0, 0]\n]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isLegitimate([",
			"  [0, 0, 0, 0, 0, 0, 0, 0],",
			"  [0, 0, 1, 1, 1, 0, 0, 0],",
			"  [0, 1, 1, 1, 1, 1, 0, 0],",
			"  [0, 0, 0, 0, 0, 0, 0, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(isLegitimate([",
			"  [0, 0, 0, 0, 0, 0, 0, 0],",
			"  [0, 0, 1, 1, 1, 0, 0, 0],",
			"  [0, 1, 1, 1, 1, 1, 0, 0],",
			"  [0, 0, 1, 1, 1, 0, 0, 0]",
			"]), false)",
			"​",
			"Test.assertEquals(isLegitimate([",
			"  [0, 0, 0, 0, 0],",
			"  [0, 1, 1, 1, 0],",
			"  [0, 1, 1, 1, 0],",
			"  [0, 0, 0, 0, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(isLegitimate([",
			"  [0, 0, 0, 0, 0],",
			"  [0, 1, 1, 1, 1],",
			"  [0, 1, 1, 1, 0],",
			"  [0, 0, 0, 0, 0]"
		],
		"starterFn": [
			"1\nfunction isLegitimate(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gqkan7642aHfjk5GF"
	},
	{
		"title": "Reverse Coding Challenge #5",
		"description": "<p><span>This is a </span><strong><span>reverse coding challenge</span></strong><span>. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.</span></p><p><span>Your task is to create a function that, when fed the inputs below, produce the sample outputs shown.</span></p><h3><span>Examples</span></h3><pre><code>832 ➞ 594\n\n51 ➞ 36\n\n7977 ➞ 198\n\n1 ➞ 0\n\n665 ➞ 99\n\n149 ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>If you get stuck, see </span><strong><span>Comments</span></strong><span> for a hint.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(mysteryFunc(832), 594)",
			"Test.assertEquals(mysteryFunc(51), 36)",
			"Test.assertEquals(mysteryFunc(7977), 198)",
			"Test.assertEquals(mysteryFunc(1), 0)",
			"Test.assertEquals(mysteryFunc(665), 99)",
			"Test.assertEquals(mysteryFunc(149), 0)"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Mq6LeA75xJjzvdthh"
	},
	{
		"title": "Array Chunking",
		"description": "<p><span>Given an array and chunk size \"n\", Create a function such that it divides  the array into many subarrays where each subarray is of length size \"n\".</span></p><h3><span>Examples</span></h3><pre><code>chunk([1, 2, 3, 4], 2) ➞ [\n  [1, 2], [3, 4]\n]\n\nchunk([1, 2, 3, 4, 5, 6, 7], 3) ➞ [\n  [1, 2, 3], [4, 5, 6], [7]\n]\n\nchunk([1, 2, 3, 4 ,5], 10) ➞ [\n  [1, 2, 3, 4, 5]\n]</code></pre><h3><span>Notes</span></h3><p><span>Remember that number of subarrays may not be equal to chunk size.</span></p>",
		"publishedBy": "Shreeansh",
		"publishedByUrl": "https://edabit.com/user/Fhwnime223hGiaHaA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(chunk([1, 2, 3, 4], 2), [[1, 2], [3, 4]])",
			"Test.assertSimilar(chunk([1, 2, 3, 4, 5], 2), [[ 1, 2], [3, 4], [5]])",
			"Test.assertSimilar(chunk([1, 2, 3, 4, 5, 6, 7, 8], 3), [[ 1, 2, 3], [4, 5, 6], [7, 8]])",
			"Test.assertSimilar(chunk([1, 2, 3, 4, 5], 4), [[ 1, 2, 3, 4], [5]])",
			"Test.assertSimilar(chunk([1, 2, 3, 4, 5], 10), [[ 1, 2, 3, 4, 5]])"
		],
		"starterFn": [
			"1\nfunction chunk(array, size) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AWEX2eYNWGEsig4Fc"
	},
	{
		"title": "Clear Brackets",
		"description": "<p><span>Create a function </span><code>brackets()</code><span> that takes a </span><strong><span>string</span></strong><span> and checks that the brackets in the math expression are correct. The function should return </span><code>true</code><span> or </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>brackets(\"(a*(b-c)..... )\") ➞ true\n\nbrackets(\")(a-b-45/7*(a-34))\") ➞ false\n\nbrackets(\"sin(90...)+.............cos1)\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The string may </span><strong><span>not contain brackets</span></strong><span>, then return </span><code>true</code><span>.</span></li><li><span>String may contain </span><strong><span>spaces</span></strong><span>.</span></li><li><span>The string may be </span><strong><span>empty</span></strong><span>.</span></li></ul>",
		"publishedBy": "BlackJack007",
		"publishedByUrl": "https://edabit.com/user/3qfdbT7qWZLXAZe5W",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(brackets(\"(a*(b-c)     )\"), true);",
			"Test.assertEquals(brackets(\" ) (a-b-45/7*(a-34))\"), false);",
			"Test.assertEquals(brackets(\"sin(90       )+      cos1)\"), false);",
			"Test.assertEquals(brackets(\" (...). .%_.(.... )\"), true);",
			"Test.assertEquals(brackets(\" (...)...(..(...).... )  \"), true);",
			"Test.assertEquals(brackets(\") .. .() (        ).. . (\"), false);",
			"Test.assertEquals(brackets(\")))(((\"), false);",
			"Test.assertEquals(brackets(\"  (...).!.)...(\"), false);",
			"Test.assertEquals(brackets(\"a+b\"), true);",
			"Test.assertEquals(brackets(\"\"), true);",
			"Test.assertEquals(brackets(\"(a+f).`!£=.)...) \"), false);"
		],
		"starterFn": [
			"1\nfunction brackets(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AcN98uNF2MmQ7jJJH"
	},
	{
		"title": "Selective Array Reversal",
		"description": "<p><span>Create a function that takes an array and a number and </span><em><span>selectively</span></em><span> reverse the order of the array based on the number you're given (second argument). If you're given the arguments </span><code>[1,2,3,4,5,6]</code><span> and </span><code>2</code><span>, you would return the array </span><code>[2,1, 4,3, 6,5]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>selReverse([1,2,3,4,5,6], 2) ➞ [2,1, 4,3, 6,5]\n\nselReverse([2,4,6,8,10,12,14,16], 3) ➞ [6,4,2, 12,10,8, 16,14]\n\nselReverse([5,7,2,6,0,4,6], 100) ➞ [6,4,0,6,2,7,5]</code></pre><h3><span>Notes</span></h3><ul><li><span>If the array you're given can't be broken up into equal parts, just reverse the remaining numbers (see 2nd expample).</span></li><li><span>If  </span><code>len</code><span> exceeds the array length, reverse everything.</span></li><li><span>If  </span><code>len</code><span> is zero, return the original array.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(selReverse([1, 2, 3, 4, 5, 6], 2), [2, 1, 4, 3, 6, 5]);",
			"Test.assertSimilar(selReverse([2, 4, 6, 8, 10, 12, 14, 16], 3), [6, 4, 2, 12, 10, 8, 16, 14]);",
			"Test.assertSimilar(selReverse([5, 7, 2, 6, 0, 4, 6], 100), [6, 4, 0, 6, 2, 7, 5]);",
			"Test.assertSimilar(selReverse([6, 0, 0, 0, 3, 8, 9, 7, 1], 9), [1, 7, 9, 8, 3, 0, 0, 0, 6]);",
			"Test.assertSimilar(selReverse([12, 54, 67, 34, 65, 34, 33], 0), [12, 54, 67, 34, 65, 34, 33]);",
			"Test.assertSimilar(selReverse([12, 54, 67, 34, 65, 34, 33], 1), [12, 54, 67, 34, 65, 34, 33]);",
			"Test.assertSimilar(selReverse([22, 13, 22, 13, 13, 22, 22, 13], 5), [13, 13, 22, 13, 22, 13, 22, 22]);",
			"Test.assertSimilar(selReverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2), [2, 1, 4, 3, 6, 5, 8, 7, 10, 9]);",
			"Test.assertSimilar(selReverse([1], 2), [1]);",
			"Test.assertSimilar(selReverse([1, 2], 2), [2, 1]);"
		],
		"starterFn": [
			"1\nfunction selReverse(arr, len) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LMRMELZHhzvdqaQE8"
	},
	{
		"title": "Casting Out Nines",
		"description": "<p><span>This is a method commonly taught in primary schools, used to verify the correctness of an operation; usually (as in this exercise) the multiplication.</span></p><p><span>Every number involved in the multiplication is replaced by its </span><strong><span>digital root</span></strong><span> (reiterated sum of its digits until a single-digit number is obtained). After this, the digital roots of factors are multiplied, and again this result is reduced to the digital root. If the digit obtained is different from the result's digital root the operation is surely wrong, if it is equal the operation can be correct with a possibility out of nine to be a false positive.</span></p><p><span>Given two factors and a result, implement a function that returns a string in the format:</span></p><ul><li><span>\"</span><strong><span>x, x, x, x = Result!</span></strong><span>\", with </span><em><span>x</span></em><span> being the digital roots (a, b, r, and a</span><span>*</span><span>b in the order).</span></li><li><em><span>Result!</span></em><span> being \"</span><strong><span>Correct!</span></strong><span>\" if the last two digits are the same and the result is correct.</span></li><li><span>\"</span><strong><span>False Positive!</span></strong><span>\" if the last two digits are the same but the result is wrong.</span></li><li><span>\"</span><strong><span>Wrong!</span></strong><span>\" if the last two digits are different.</span></li></ul><h3><span>Examples</span></h3><pre><code>// D.R. is for Digital Root\n\ncastOutNines(467, 78, 36426) ➞ \"8,6,3,3 = Correct!\"\n// D.R. 467 = 4 + 6 + 7 = 17 = 1 + 7 = 8\n// D.R. 78 = 7 + 8 = 15 = 1 + 5 = 6\n// D.R. 36426 = 3 + 6 + 4 + 2 + 6 = 21 = 2 + 1 = 3\n// D.R. 8 * 6 = D.R. 48 = 4 + 8 = 12 = 1 + 2 = 3\n// Last two digits are the same and result is correct: Correct! \n\ncastOutNines(467, 78, 36425) ➞ \"8,6,2,3 = Wrong!\"\n// D.R. 467 = 8\n// D.R. 78 = 6\n// D.R. 36425 = 3 + 6 + 4 + 2 + 5 = 20 = 2 + 0 = 2\n// D.R. 8 * 6 = 3\n// Last two digits are different and result is wrong: Wrong!\n\ncastOutNines(467, 78, 129) ➞ \"8,6,3,3 = False Positive!\"\n// D.R. 467 = 8\n// D.R. 78 = 6\n// D.R. 129 = 1 + 2 + 9 = 12 = 1 + 2 = 3\n// D.R. 8 * 6 = 3\n// Last two digits are equals but result is wrong: False Positive!</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(castOutNines(467, 78, 36426), \"8,6,3,3 = Correct!\", \"Example #1\")",
			"Test.assertEquals(castOutNines(467, 78, 36425), \"8,6,2,3 = Wrong!\", \"Example #2\")",
			"Test.assertEquals(castOutNines(467, 78, 129), \"8,6,3,3 = False positive!\", \"Example #3\")",
			"Test.assertEquals(castOutNines(9, 9, 81), \"9,9,9,9 = Correct!\")",
			"Test.assertEquals(castOutNines(9, 9, 666), \"9,9,9,9 = False positive!\")",
			"Test.assertEquals(castOutNines(9, 9, 51), \"9,9,6,9 = Wrong!\")",
			"Test.assertEquals(castOutNines(59714, 24339, 1453379046), \"8,3,6,6 = Correct!\")",
			"Test.assertEquals(castOutNines(59714, 24339, 153379046), \"8,3,2,6 = Wrong!\")",
			"Test.assertEquals(castOutNines(1902, 1964,  3735519), \"3,2,6,6 = False positive!\")",
			"Test.assertEquals(castOutNines(12986, 4320, 56099520), \"8,9,9,9 = Correct!\")",
			"Test.assertEquals(castOutNines(12986, 4320, 56099529), \"8,9,9,9 = False positive!\")",
			"Test.assertEquals(castOutNines(12986, 4320, 56099521), \"8,9,1,9 = Wrong!\")",
			"Test.assertEquals(castOutNines(123, 456, 789), \"6,6,6,9 = Wrong!\")",
			"Test.assertEquals(castOutNines(123, 456, 999), \"6,6,9,9 = False positive!\")"
		],
		"starterFn": [
			"1\nfunction castOutNines(a, b, r) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/srfpEfnmYdWwMcqv4"
	},
	{
		"title": "Backspace Attack",
		"description": "<p><span>Suppose a hash </span><strong><span>#</span></strong><span> represents the backspace key being pressed. Write a function that transforms a string containing </span><strong><span>#</span></strong><span> into a string without any </span><strong><span>#</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>erase(\"he##l#hel#llo\") ➞ \"hello\"\n\nerase(\"major# spar##ks\") ➞ \"majo spks\"\n\nerase(\"si###t boy\") ➞ \"t boy\"\n\nerase(\"####\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>In addition to characters, backspaces can also remove whitespaces.</span></li><li><span>If the number of hashes exceeds the previous characters, remove those previous characters entirely (see example #3).</span></li><li><span>If there only exist backspaces, return an empty string (see example #4).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(erase(\"he##l#hel#llo\"), \"hello\")",
			"Test.assertEquals(erase(\"major# spar##ks\"), \"majo spks\" )",
			"Test.assertEquals(erase(\"si###t boy\"), \"t boy\")",
			"Test.assertEquals(erase(\"motion #sick\"), \"motionsick\")",
			"Test.assertEquals(erase(\"m#oti#o#n sick##ne#ss##\"), \"otn sin\")",
			"Test.assertEquals(erase(\"courz#i#age\"), \"courage\")",
			"Test.assertEquals(erase(\"aris##### c#r#ti#c\"), \" tc\")",
			"Test.assertEquals(erase(\"beauty##\"), \"beau\")",
			"Test.assertEquals(erase(\"beauty#\"), \"beaut\")",
			"Test.assertEquals(erase(\"b#\"), \"\")",
			"Test.assertEquals(erase(\"####\"), \"\")"
		],
		"starterFn": [
			"1\nfunction erase(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Gfed7xePtBzXLQewA"
	},
	{
		"title": "Sieve of Eratosthenes",
		"description": "<p><span>Given N as input, return an array with all primes up to N included.</span></p><h3><span>Examples</span></h3><pre><code>eratosthenes(1) ➞ []\n\neratosthenes(10) ➞ [2, 3, 5, 7]\n\neratosthenes(20) ➞ [2, 3, 5, 7, 11, 13, 17, 19]\n\neratosthenes(0) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Check the resources tab to learn more about the meaning of \"Eratosthenes\".</span></p>",
		"publishedBy": "Michele Bini",
		"publishedByUrl": "https://edabit.com/user/zPC7i4c7J5CiQuosx",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(eratosthenes(10), [2,3,5,7])",
			"Test.assertSimilar(eratosthenes(0), [])",
			"Test.assertSimilar(eratosthenes(1), [])",
			"Test.assertSimilar(eratosthenes(20), [2,3,5,7,11,13,17,19])",
			"Test.assertSimilar(eratosthenes(1000), [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997])"
		],
		"starterFn": [
			"1\nfunction eratosthenes(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/r4ZHGRs8uoK2HpEFo"
	},
	{
		"title": "Find Number of Repetitions of Substring",
		"description": "<p><span>Create a function that takes a string as an argument and tells the number of repitions of a substring. It is exactly vice versa to repeating a string function (i.e. if a string \"k\" is given and asked to make a larger string \"z\" such that \"k\" is repated \"n' times).</span></p><p><span>In this scenario, we do the opposite. Given the final string, and ask the number of times the substring is repeated.</span></p><h3><span>Examples</span></h3><pre><code>numberOfRepeats(\"abcabcabcabc\" ) ➞ 4\n\nnumberOfRepeats(\"bcbcbc\") ➞ 3\n\nnumberOfRepeats(\"llbllbllbllbllbllb\") ➞ 6\n\nnumberOfRepeats(\"kc\") ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume that the substring length is always greater than 1.</span></li><li><span>Assume that the string length is always greater than 1.</span></li><li><span>Assume that the substring is not always the same.</span></li></ul>",
		"publishedBy": "Prasada",
		"publishedByUrl": "https://edabit.com/user/S47iwvGMEBQAKHWfd",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"strings"
		],
		"tests": [
			"Test.assertEquals(numberOfRepeats(\"abc\"), 1)",
			"Test.assertEquals(numberOfRepeats(\"abcabcabc\"), 3)",
			"Test.assertEquals(numberOfRepeats(\"abab\"), 2)",
			"Test.assertEquals(numberOfRepeats(\"LVLVLVLV\"), 4)",
			"Test.assertEquals(numberOfRepeats(\"inkinkinkinkinkink\"), 6)",
			"Test.assertEquals(numberOfRepeats(\"abcdabcdabcdabcdabcdabcdabcd\"), 7)"
		],
		"starterFn": [
			"1\nfunction numberOfRepeats(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QcdRmZvuxCxWKdEZk"
	},
	{
		"title": "RegEx Exercise 4: Insert After Head",
		"description": "<p><span>Write a regular expression that inserts </span><code>&lt;h1&gt;Hello&lt;/h1&gt;</code><span> immediately after the </span><code>&lt;body&gt;</code><span> tag. The tag may have attributes. You only have to come up with the </span><strong><span>regular expression</span></strong><span>. The </span><strong><span>replace</span></strong><span> function is already done (see the </span><strong><span>Tests</span></strong><span> tab).</span></p><h3><span>Examples</span></h3><pre><code>const REGEXP = /your regular expression/\n\nlet str = \"\\&lt;html&gt;&lt;body style=\"height: 200px\"&gt; ... &lt;/body&gt;&lt;/html&gt;\"\n\nstr = str.replace(REGEXP, `&lt;h1&gt;Hello&lt;/h1&gt;`)\n\nconsole.log(str) ➞ &lt;html&gt; &lt;body style=\"height: 200px\"&gt;&lt;h1&gt;Hello&lt;/h1&gt; ... &lt;/body&gt; &lt;/html&gt;</code></pre><h3><span>Notes</span></h3><p><span>You can find the solution in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex"
		],
		"tests": [
			"let str = '...<body style=\"...\">...'",
			"​",
			"const validate = (REGEXP) => {",
			"   // if(!//.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"      return str.replace(REGEXP, `<h1>Hello</h1>`)",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"// Test.assertNotEquals(testExp(str), \"invalid\", \"Nothing new here\")",
			"Test.assertSimilar(testExp(str), '...<body style=\"...\"><h1>Hello</h1>...')",
			"​",
			"// credits to https://javascript.info/regexp-lookahead-lookbehind"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */"
		],
		"url": "https://edabit.com/challenge/WCTdefNxDmZaYDmbr"
	},
	{
		"title": "Bridge Shuffle",
		"description": "<p><span>Create a function to </span><strong><span>bridge shuffle</span></strong><span> two arrays. To </span><strong><span>bridge shuffle</span></strong><span>, you interleave the elements from both arrays in an alternating fashion, like so:</span></p><pre><code>Array 1 = [\"A\", \"A\", \"A\"]\nArray 2 = [\"B\", \"B\", \"B\"]\n\nShuffled Array = [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"]</code></pre><p><span>This can still work with two arrays of uneven length. We simply tack on the extra elements from the longer array, like so:</span></p><pre><code>Array 1 = [\"C\", \"C\", \"C\", \"C\"]\nArray 2 = [\"D\"]\n\nShuffled Array = [\"C\", \"D\", \"C\", \"C\", \"C\"]</code></pre><p><span>Create a function that takes in two arrays and returns the bridge-shuffled array.</span></p><h3><span>Examples</span></h3><pre><code>bridgeShuffle([\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"]) ➞ [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"]\n\nbridgeShuffle([\"C\", \"C\", \"C\", \"C\"], [\"D\"]) ➞ [\"C\", \"D\", \"C\", \"C\", \"C\"]\n\nbridgeShuffle([1, 3, 5, 7], [2, 4, 6]) ➞ [1, 2, 3, 4, 5, 6, 7]</code></pre><h3><span>Notes</span></h3><ul><li><span>Elements in both arrays can be strings or integers.</span></li><li><span>If two arrays are of unequal length, add the additional elements of the longer array to the end of the shuffled array.</span></li><li><span>Always start your shuffle with the first element of Array 1.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(bridgeShuffle(['A', 'A', 'A'], ['B', 'B', 'B']), ['A', 'B', 'A', 'B', 'A', 'B'])",
			"Test.assertSimilar(bridgeShuffle(['C', 'C', 'C', 'C'], ['D']), ['C', 'D', 'C', 'C', 'C'])",
			"Test.assertSimilar(bridgeShuffle([1, 3, 5, 7], [2, 4, 6]), [1, 2, 3, 4, 5, 6, 7])",
			"Test.assertSimilar(bridgeShuffle([10, 9, 8], [1, 2, 3, 4]), [10, 1, 9, 2, 8, 3, 4])",
			"Test.assertSimilar(bridgeShuffle(['h', 'h', 'h'], ['a', 'a', 'a']), ['h', 'a', 'h', 'a', 'h', 'a'])"
		],
		"starterFn": [
			"1\nfunction bridgeShuffle(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8ZkrgupsQxf6f9xXR"
	},
	{
		"title": "Multiplicity of Numbers",
		"description": "<p><span>Write a function that returns an array of elements </span><code>[number, multiplicity]</code><span>. The </span><code>multiplicity</code><span> of a number refers to the number of times it occurs in the array.</span></p><p><span>To illustrate:</span></p><pre><code>[5, 5, 1, 1, 5, 5, 3]\n[[5, 4], [1, 2], [3, 1]]\n\n// Since 5 appears 4 times, 1 appears twice, and 3 appears once.</code></pre><p><span>The final array should only include unique elements, and the elements should be ordered by when they first appeared in the original array.</span></p><h3><span>Examples</span></h3><pre><code>multiplicity([1, 1, 1, 2, 2, 3]) ➞ [[1, 3], [2, 2], [3, 1]]\n\nmultiplicity([1, 1, 1, 1, 1]) ➞ [[1, 5]]\n\nmultiplicity([1, 5, 4, 3, 2]) ➞ [[1, 1], [5, 1], [4, 1], [3, 1], [2, 1]]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(multiplicity([1, 1, 1, 2, 2, 3]), [[1, 3], [2, 2], [3, 1]])",
			"Test.assertSimilar(multiplicity([1, 1, 1, 1, 1]), [[1, 5]])",
			"Test.assertSimilar(multiplicity([1, 5, 4, 3, 2]), [[1, 1], [5, 1], [4, 1], [3, 1], [2, 1]])",
			"Test.assertSimilar(multiplicity([5, 5, 5, 5, 8]), [[5, 4], [8, 1]])",
			"Test.assertSimilar(multiplicity([3, 3, 3, 0]), [[3, 3], [0, 1]])",
			"Test.assertSimilar(multiplicity([1, 1, 2, 2, 3, 3, 4, 4]), [[1, 2], [2, 2], [3, 2], [4, 2]])",
			"Test.assertSimilar(multiplicity([4, 4, 3, 3, 2, 2, 1, 1]), [[4, 2], [3, 2], [2, 2], [1, 2]])"
		],
		"starterFn": [
			"1\nfunction multiplicity(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PgNvoxjjy7Gx6zDni"
	},
	{
		"title": "Get Student with Best Test Avg.",
		"description": "<p><span>Given an object with students and the grades that they made on the tests that they took, determine which student has the best Test Average. The </span><code>key</code><span> will be the student's name and the </span><code>value</code><span> will be an array of their grades. You will only have to </span><strong><span>return the student's name</span></strong><span>. You do not need to return their Test Average.</span></p><h3><span>Examples</span></h3><pre><code>getBestStudent({\n  John: [100, 90, 80],\n  Bob: [100, 70, 80]\n}) ➞ \"John\"\n\n// John's avg = 90\n// Bob's avg = 83.33\n\ngetBestStudent({\n  Susan: [67, 84, 75, 63],\n  Mike: [87, 98, 64, 71],\n  Jim: [90, 58, 73, 86]\n}) ➞ \"Mike\"</code></pre><h3><span>Notes</span></h3><p><span>All students in an object will have the same amount of test scores. So no student will have taken more tests than another.</span></p>",
		"publishedBy": "jmichael12",
		"publishedByUrl": "https://edabit.com/user/CJnuSjyCBMTbTiibD",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"objects",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(getBestStudent({",
			"  John: [100, 90, 80],",
			"  Bob: [100, 70, 80]",
			"}), \"John\", \"Example #1\")",
			"​",
			"Test.assertSimilar(getBestStudent({",
			"  Susan: [67, 84, 75, 63],",
			"  Mike: [87, 98, 64, 71],",
			"  Jim: [90, 58, 73, 86]",
			"}), \"Mike\", \"Example #2\")",
			"​",
			"Test.assertSimilar(getBestStudent({",
			"  Tim: [93, 84, 49, 71, 76, 83],",
			"  Nick: [88, 91, 74, 72, 63, 68],",
			"  Brad: [100, 94, 72, 64, 58, 81],",
			"  Annie: [79, 93, 82, 82, 63, 87]",
			"}), \"Annie\")",
			"​",
			"Test.assertSimilar(getBestStudent({",
			"  Eddie: [65, 85, 72, 76],",
			"  Brock: [55, 97, 82, 91],",
			"  Jessica: [78, 62, 79, 99]",
			"}), \"Brock\")"
		],
		"starterFn": [
			"1\nfunction getBestStudent(grades) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nSg24HbusyCQKn9xk"
	},
	{
		"title": "Shorthand for Key Signatures",
		"description": "<p><span>Given a string containing a </span><em><span>key signature</span></em><span> </span><strong><span>written in shorthand</span></strong><span>, create a function which replaces the </span><em><span>shorthand</span></em><span> with its </span><strong><span>full written name</span></strong><span>.</span></p><ul><li><span>A </span><strong><span>lowercase</span></strong><span> letter denotes a </span><strong><span>minor key</span></strong><span>.</span></li><li><span>An </span><strong><span>uppercase</span></strong><span> letter denotes a </span><strong><span>major key</span></strong><span>.</span></li></ul><p><span>See the examples below for a more helpful guide!</span></p><h3><span>Examples</span></h3><pre><code>fullKeyName(\"Prelude in C\") ➞ \"Prelude in C major\"\n\nfullKeyName(\"Fugue in c\") ➞ \"Fugue in C minor\"\n\nfullKeyName(\"Toccata and Fugue in d\") ➞ \"Toccata and Fugue in D minor\"\n\nfullKeyName(\"Sonata in eb\") ➞ \"Sonata in Eb minor\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Write the </span><em><span>letter</span></em><span> name in </span><strong><span>uppercase</span></strong><span> (ignore </span><strong><span>b</span></strong><span> and </span><strong><span>#</span></strong><span>).</span></li><li><span>Write </span><code>\"major\"</code><span> or </span><code>\"minor\"</code><span> in all </span><strong><span>lowercase</span></strong><span> (rather than </span><code>\"Major\"</code><span> or </span><code>\"Minor\"</code><span>).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fullKeyName(\"Prelude in C\"), \"Prelude in C major\")",
			"Test.assertEquals(fullKeyName(\"Fugue in c\"), \"Fugue in C minor\")",
			"Test.assertEquals(fullKeyName(\"Toccata and Fugue in d\"), \"Toccata and Fugue in D minor\")",
			"Test.assertEquals(fullKeyName(\"a Fugue in c\"), \"a Fugue in C minor\")",
			"Test.assertEquals(fullKeyName(\"Sonata in D\"), \"Sonata in D major\")",
			"Test.assertEquals(fullKeyName(\"Opera in eb\"), \"Opera in Eb minor\")",
			"Test.assertEquals(fullKeyName(\"Toccata in ab\"), \"Toccata in Ab minor\")",
			"Test.assertEquals(fullKeyName(\"Toccata in f\"), \"Toccata in F minor\")",
			"Test.assertEquals(fullKeyName(\"Symphony in C#\"), \"Symphony in C# major\")",
			"Test.assertEquals(fullKeyName(\"Mass in c\"), \"Mass in C minor\")",
			"Test.assertEquals(fullKeyName(\"Toccata in c\"), \"Toccata in C minor\")",
			"Test.assertEquals(fullKeyName(\"Prelude in Ab\"), \"Prelude in Ab major\")",
			"Test.assertEquals(fullKeyName(\"Concerto in f#\"), \"Concerto in F# minor\")",
			"Test.assertEquals(fullKeyName(\"Symphony in eb\"), \"Symphony in Eb minor\")",
			"Test.assertEquals(fullKeyName(\"Sonata in a\"), \"Sonata in A minor\")",
			"Test.assertEquals(fullKeyName(\"Sonata in e\"), \"Sonata in E minor\")",
			"Test.assertEquals(fullKeyName(\"Concerto in c#\"), \"Concerto in C# minor\")",
			"Test.assertEquals(fullKeyName(\"Opera in f\"), \"Opera in F minor\")",
			"Test.assertEquals(fullKeyName(\"Mass in c\"), \"Mass in C minor\")",
			"Test.assertEquals(fullKeyName(\"Symphony in D\"), \"Symphony in D major\")",
			"Test.assertEquals(fullKeyName(\"Fugue in d\"), \"Fugue in D minor\")",
			"Test.assertEquals(fullKeyName(\"Fugue in eb\"), \"Fugue in Eb minor\")",
			"Test.assertEquals(fullKeyName(\"Fugue in F\"), \"Fugue in F major\")",
			"Test.assertEquals(fullKeyName(\"Mass in c#\"), \"Mass in C# minor\")",
			"Test.assertEquals(fullKeyName(\"Requiem in C\"), \"Requiem in C major\")",
			"Test.assertEquals(fullKeyName(\"Prelude in Eb\"), \"Prelude in Eb major\")"
		],
		"starterFn": [
			"1\nfunction fullKeyName(piece) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mTT8M47D6EuEdTXLv"
	},
	{
		"title": "YouTube Video ID Extractor",
		"description": "<p><span>Given a YouTube URL, extract the video ID and return it as a string.</span></p><h2><span>Examples</span></h2><pre><code>youtubeId(\"https://www.youtube.com/watch?v=XPEr1cArWRg\") ➞ \"XPEr1cArWRg\"\n\nyoutubeId(\"https://youtu.be/BCDEDi5gDPo\") ➞ \"BCDEDi5gDPo\"\n\nyoutubeId(\"https://youtube.com/watch?t=4m40s&amp;v=vxP3bY-XxY4\") ➞ \"vxP3bY-XxY4\"</code></pre><h2><span>Notes</span></h2><p><span>All input are valid YouTube links.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(youtubeId(\"https://www.youtube.com/watch?v=XPEr1cArWRg\"), \"XPEr1cArWRg\")",
			"Test.assertEquals(youtubeId(\"http://www.youtube.com/watch?v=-SNQGyVW_YI&t=8871\"), \"-SNQGyVW_YI\")",
			"Test.assertEquals(youtubeId(\"https://youtube.com/watch?t=4m40s&v=vxP3bY-XxY4\"), \"vxP3bY-XxY4\")",
			"Test.assertEquals(youtubeId(\"www.youtube.com/watch?list=PL3QZUm48uWnsdFakp3A2fI-NzmfH1jyQe&v=yv56ncTdTmU&index=8\"), \"yv56ncTdTmU\")",
			"Test.assertEquals(youtubeId(\"https://youtu.be/BCDEDi5gDPo\"), \"BCDEDi5gDPo\")",
			"Test.assertEquals(youtubeId(\"https://www.youtube.com/watch?feature=youtu.be&v=jOxnoDi9IYg&t=3311s\"), \"jOxnoDi9IYg\")",
			"Test.assertEquals(youtubeId(\"https://www.youtube-nocookie.com/embed/2w9SQjdn9U4\"), \"2w9SQjdn9U4\")"
		],
		"starterFn": [
			"1\nfunction youtubeId(link) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AK85Q669ArEKstGjT"
	},
	{
		"title": "Combined Consecutive Sequence",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if two arrays, when combined, form a consecutive sequence.</span></p><h3><span>Examples</span></h3><pre><code>consecutiveCombo([7, 4, 5, 1], [2, 3, 6]) ➞ true\n\nconsecutiveCombo([1, 4, 6, 5], [2, 7, 8, 9]) ➞ false\n\nconsecutiveCombo([1, 4, 5, 6], [2, 3, 7, 8, 10]) ➞ false\n\nconsecutiveCombo([44, 46], [45]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>The input arrays will have unique values.</span></li><li><span>The input arrays can be in any order.</span></li><li><span>A </span><strong><span>consecutive sequence</span></strong><span> is a sequence without any gaps in the integers, e.g. </span><code>1, 2, 3, 4, 5</code><span> is a </span><strong><span>consecutive sequence</span></strong><span>, but </span><code>1, 2, 4, 5</code><span> is not.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(consecutiveCombo([1, 4, 5, 7], [2, 3, 6]), true)",
			"Test.assertEquals(consecutiveCombo([1, 4, 5, 6], [2, 7, 8, 9]), false)",
			"Test.assertEquals(consecutiveCombo([1, 4, 5, 6], [2, 3, 7, 8, 10]), false)",
			"Test.assertEquals(consecutiveCombo([7, 5, 4, 1], [2, 3, 6, 8]), true)",
			"Test.assertEquals(consecutiveCombo([33, 34, 40], [39, 38, 37, 36, 35, 32, 31, 30]), true)",
			"Test.assertEquals(consecutiveCombo([1, 4, 5, 6], [2, 3, 7, 8, 10]), false)",
			"Test.assertEquals(consecutiveCombo([44, 46], [45]), true)",
			"Test.assertEquals(consecutiveCombo([4, 3, 1], [2, 5]), true)",
			"Test.assertEquals(consecutiveCombo([4, 3, 1], [2, 5, 7, 6]), true)",
			"Test.assertEquals(consecutiveCombo([4, 3, 1], [7, 6, 5]), false)",
			"Test.assertEquals(consecutiveCombo([4, 3, 1], [0, 7, 6, 5]), false)",
			"Test.assertEquals(consecutiveCombo([44, 46], [45]), true)"
		],
		"starterFn": [
			"1\nfunction consecutiveCombo(a1, a2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HqWmsX885jpZqMkdL"
	},
	{
		"title": "Persistent Little Bugger",
		"description": "<p><span>Create a function that takes a number and returns its </span><strong><span>multiplicative persistence</span></strong><span>, which is the number of times you must multiply the digits in </span><code>num</code><span> until you reach a single digit.</span></p><h3><span>Examples</span></h3><pre><code>bugger(39) ➞ 3\n// Because 3 * 9 = 27, 2 * 7 = 14, 1 * 4 = 4 and 4 has only one digit.\n\nbugger(999) ➞ 4\n// Because 9 * 9 * 9 = 729, 7 * 2 * 9 = 126, 1 * 2 * 6 = 12, and finally 1 * 2 = 2.\n\nbugger(4) ➞ 0\n// Because 4 is already a one-digit number.</code></pre><h3><span>Notes</span></h3><p><span> N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(bugger(39),3)",
			"Test.assertEquals(bugger(4),0)",
			"Test.assertEquals(bugger(25),2)",
			"Test.assertEquals(bugger(999),4)",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​"
		],
		"starterFn": [
			"1\nfunction bugger(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/p74GFxJkNQRRbLTwG"
	},
	{
		"title": "Check If the Brick Fits through the Hole",
		"description": "<p><span>Write the function that takes three dimensions of a brick: height(a), width(b) and depth(c) and returns </span><code>true</code><span> if this brick can fit into a hole with the width(w) and height(h).</span></p><h3><span>Examples</span></h3><pre><code>doesBrickFit(1, 1, 1, 1, 1) ➞ true\n\ndoesBrickFit(1, 2, 1, 1, 1) ➞ true\n\ndoesBrickFit(1, 2, 2, 1, 1) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>You can turn the brick with any side towards the hole.</span></li><li><span>We assume that the brick fits if its sizes equal the ones of the hole (i.e. brick size should be less than or equal to the size of the hole, not strickly less).</span></li><li><span>You </span><strong><span>can't</span></strong><span> put a brick in at a non-orthogonal angle.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(doesBrickFit(1,1,1, 1,1), true, \"cube into square\")",
			"Test.assertEquals(doesBrickFit(1,2,1, 1,1), true)",
			"Test.assertEquals(doesBrickFit(1,2,2, 1,1), false)",
			"Test.assertEquals(doesBrickFit(1,2,2, 1,2), true)",
			"Test.assertEquals(doesBrickFit(1,2,2, 2,1), true)",
			"Test.assertEquals(doesBrickFit(2,2,2, 1,2), false)"
		],
		"starterFn": [
			"1\n// (a,b,c) -- dimensions of the brick",
			"2\n// (w,h) -- dimensions of the hole",
			"3\nfunction doesBrickFit(a,b,c, w,h) {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/ixdXLyopP7c4aPXqx"
	},
	{
		"title": "Wiggled Strings",
		"description": "<p><span>Create a function that returns an array of </span><em><span>the given string</span></em><span> but </span><strong><span>offset by spaces</span></strong><span>. Here are some more precise instructions:</span></p><ul><li><span>Keep </span><em><span>adding spaces</span></em><span> on the </span><strong><span>left</span></strong><span> until you have the </span><em><span>same number of spaces</span></em><span> as the </span><strong><span>word length</span></strong><span>.</span></li><li><span>Then keep </span><em><span>removing spaces</span></em><span> until you reach the </span><strong><span>original word</span></strong><span>.</span></li></ul><p><span>Below are some helpful examples!</span></p><h3><span>Examples</span></h3><pre><code>wiggleString(\"hello\") ➞ [\n  \"hello\",\n  \" hello\",\n  \"  hello\",\n  \"   hello\",\n  \"    hello\",\n  \"     hello\"\n  \"    hello\",\n  \"   hello\",\n  \"  hello\",\n  \" hello\",\n  \"hello\"\n]\n\nwiggleString(\"EDABIT\") ➞ [\n  \"EDABIT\",\n  \" EDABIT\",\n  \"  EDABIT\",\n  \"   EDABIT\",\n  \"    EDABIT\",\n  \"     EDABIT\",\n  \"      EDABIT\",\n  \"     EDABIT\",\n  \"    EDABIT\",\n  \"   EDABIT\",\n  \"  EDABIT\",\n  \" EDABIT\",\n  \"EDABIT\"\n]\n\nwiggleString(\"Wiggle Time\") ➞ [\n  \"Wiggle Time\",\n  \" Wiggle Time\",\n  \"  Wiggle Time\",\n  \"   Wiggle Time\",\n  \"    Wiggle Time\",\n  \"     Wiggle Time\",\n  \"      Wiggle Time\",\n  \"       Wiggle Time\",\n  \"        Wiggle Time\",\n  \"         Wiggle Time\",\n  \"          Wiggle Time\",\n  \"           Wiggle Time\",\n  \"          Wiggle Time\",\n  \"         Wiggle Time\",\n  \"        Wiggle Time\",\n  \"       Wiggle Time\",\n  \"      Wiggle Time\",\n  \"     Wiggle Time\",\n  \"    Wiggle Time\",\n  \"   Wiggle Time\",\n  \"  Wiggle Time\",\n  \" Wiggle Time\",\n  \"Wiggle Time\"\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(wiggleString(\"hello\"), [",
			"  \"hello\",",
			"  \" hello\",",
			"  \"  hello\",",
			"  \"   hello\",",
			"  \"    hello\",",
			"  \"     hello\",",
			"  \"    hello\",",
			"  \"   hello\",",
			"  \"  hello\",",
			"  \" hello\",",
			"  \"hello\"",
			"])",
			"​",
			"Test.assertSimilar(wiggleString(\"EDABIT\"), [",
			"  \"EDABIT\",",
			"  \" EDABIT\",",
			"  \"  EDABIT\",",
			"  \"   EDABIT\",",
			"  \"    EDABIT\",",
			"  \"     EDABIT\",",
			"  \"      EDABIT\",",
			"  \"     EDABIT\",",
			"  \"    EDABIT\",",
			"  \"   EDABIT\",",
			"  \"  EDABIT\","
		],
		"starterFn": [
			"1\nfunction wiggleString(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jNanQ3zKkCdA9ANJw"
	},
	{
		"title": "Reverse Coding Challenge #4",
		"description": "<p><span>This is a </span><strong><span>reverse coding challenge</span></strong><span>. Normally you're given explicit directions with how to create a function. Here, you must generate your own function to satisfy the relationship between the inputs and outputs.</span></p><p><span>Your task is to create a function that, when fed the inputs below, produce the sample outputs shown.</span></p><h3><span>Examples</span></h3><pre><code>\"hello\" ➞ [4, 1, 3, 3, 1]\n\n\"maybe\" ➞ [4, 2, 1, 3, 1]\n\n\"hopeless\" ➞ [0, 7, 0, 5, 4, 5, 3, 3]\n\n\"higher\" ➞ [2, 3, 1, 2, 5, 0]\n\n\"movement\" ➞ [5, 7, 6, 5, 5, 5, 6, 4]</code></pre><h3><span>Notes</span></h3><p><span>If you get stuck, see </span><strong><span>Comments</span></strong><span> for a hint.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(mysteryFunc(\"hello\"), [4, 1, 3, 3, 1])",
			"Test.assertSimilar(mysteryFunc(\"maybe\"), [4, 2, 1, 3, 1])",
			"Test.assertSimilar(mysteryFunc(\"hopeless\"), [0, 7, 0, 5, 4, 5, 3, 3])",
			"Test.assertSimilar(mysteryFunc(\"higher\"), [2, 3, 1, 2, 5, 0])",
			"Test.assertSimilar(mysteryFunc(\"movement\"), [5, 7, 6, 5, 5, 5, 6, 4])"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/s6ZMJPDH4woN3d3Gc"
	},
	{
		"title": "The Alternating Numbers",
		"description": "<p><span>In this challenge, you have to establish if an integer </span><code>num</code><span> is Alternating. To be Alternating, </span><code>num</code><span> must be </span><strong><span>positive</span></strong><span> and every digit in its sequence must have a different parity than its next and its previous digit.</span></p><p><span>Given an integer </span><code>num</code><span>, implement a function that returns </span><code>true</code><span> is </span><code>num</code><span> is an Alternating number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isAlternating(123) ➞ true\n// 1 is odd, 2 is even, 3 is odd\n\nisAlternating(67) ➞ true\n// 6 is even, 7 is odd\n\nisAlternating(2380) ➞ false\n// 2 is even, 3 is odd, 8 is even, 0 is even\n\nisAlternating(75) ➞ false\n// 7 is odd, 5 is odd</code></pre><h3><span>Notes</span></h3><ul><li><span>A single-digit number is trivially considered Alternating, given the absence of neighboring digits.</span></li><li><span>The first digit has to be compared only to its next neighbor, and the last digit has to be compared only to its previous neighbor.</span></li><li><span>Every non-positive integer must be treated as </span><code>false</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isAlternating(123), true, \"Example #1\")",
			"Test.assertEquals(isAlternating(67), true, \"Example #2\")",
			"Test.assertEquals(isAlternating(2380), false, \"Example #3\")",
			"Test.assertEquals(isAlternating(75), false, \"Example #4\")",
			"Test.assertEquals(isAlternating(3), true, \"Trivially Alternating\")",
			"Test.assertEquals(isAlternating(903), true)",
			"Test.assertEquals(isAlternating(444), false)",
			"Test.assertEquals(isAlternating(0), false, \"Must be positive\")",
			"Test.assertEquals(isAlternating(14589), true)",
			"Test.assertEquals(isAlternating(1234566789), false)",
			"Test.assertEquals(isAlternating(-12), false, \"Must be positive\")",
			"Test.assertEquals(isAlternating(10), true)"
		],
		"starterFn": [
			"1\nfunction isAlternating(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eo6ThEtkDxYFipQew"
	},
	{
		"title": "Digital Vowel Ban",
		"description": "<p><span>In this challenge, it's time to ban some impenitent digit!</span></p><p><span>Your job is to delete the digits of a given number that, within their name written in English, contain a given vowel.</span></p><p><span>Given an integer </span><code>n</code><span>, and a string </span><code>ban</code><span> being the vowel to search, implement a function that returns:</span></p><ul><li><span>If the given vowel is not present in the name of any of the digits of </span><code>n</code><span>, the same </span><code>n</code><span>.</span></li><li><span>If </span><code>n</code><span> has at least a digit that contains the given vowel in its name, the new integer obtained after the elimination of banned digits (as a natural number without leading zeros).</span></li><li><span>If all digits of  </span><code>n</code><span> are banned, a string  </span><code>\"Banned Number\"</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>digitalVowelBan(143, \"o\") ➞ 3\n// 1 = \"One\" contains \"o\" (banned).\n// 4 = \"Four\" contains \"o\" (banned).\n// 3 = \"Three\" is safe.\n\ndigitalVowelBan(14266330, \"e\") ➞ 4266\n// \"One\" contains \"e\" (banned).\n// \"Four\", \"Two\" and \"Six\" are safe.\n// \"Three\" and \"Zero\" contain \"e\" (banned).\n\ndigitalVowelBan(4020, \"u\") ➞ 20\n// \"Four\" contains \"u\" (banned).\n// Leading zeros are not considered.\n\ndigitalVowelBan(586, \"i\") ➞ \"Banned Number\"\n// All digits (\"Five, \"Eight\", \"Six\") contain \"i\".</code></pre><h3><span>Notes</span></h3><p><span>Every given number will be a positive integer greater than 0.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(digitalVowelBan(143, \"o\"), 3, \"Example #1\")",
			"Test.assertEquals(digitalVowelBan(14266330, \"e\"), 4266, \"Example #2\")",
			"Test.assertEquals(digitalVowelBan(4020, \"u\"), 20, \"Example #3\")",
			"Test.assertEquals(digitalVowelBan(586, \"i\"), \"Banned Number\", \"Example #4\")",
			"Test.assertEquals(digitalVowelBan(123456789, \"i\"), 12347)",
			"Test.assertEquals(digitalVowelBan(20442, \"o\"), \"Banned Number\")",
			"Test.assertEquals(digitalVowelBan(1100, \"u\"), 1100)",
			"Test.assertEquals(digitalVowelBan(1993, \"e\"), \"Banned Number\")",
			"Test.assertEquals(digitalVowelBan(90160350102, \"e\"), 62)",
			"Test.assertEquals(digitalVowelBan(79284426, \"o\"), 7986)",
			"Test.assertEquals(digitalVowelBan(123456789, \"a\"), 123456789, \"triviAl test\")"
		],
		"starterFn": [
			"1\nfunction digitalVowelBan(n, ban) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xE7TGwocj5YvnftCH"
	},
	{
		"title": "The Array Twins",
		"description": "<p><span>Create a function that given an array, it returns the index where if splited in two-subarrays (last element of the first array has index of (foundIndex-1)), the sum of them are equal.</span></p><h3><span>Examples</span></h3><pre><code>twins([10, 20, 30, 5, 40, 50, 40, 15]) ➞ 5\n// foundIndex 5 : [10+20+30+5+40]=[50+40+15]\n\ntwins([1, 2, 3, 4, 5, 5]) ➞ 4\n// [1, 2, 3, 4] [5, 5]\n\ntwins([3, 3]) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>Return only the foundIndex, not the divided arrays!</span></p>",
		"publishedBy": "Ciontu",
		"publishedByUrl": "https://edabit.com/user/FQogKMipZRXBA58XG",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"data_structures"
		],
		"tests": [
			"Test.assertEquals(twins([1, 2, 3, 4, 5, 5]), 4)",
			"Test.assertEquals(twins([3, 3]), 1)",
			"Test.assertEquals(twins([10, 20, 30, 5, 40, 50, 40, 15]), 5)",
			"Test.assertEquals(twins([3, 4, 6, 7, 6]), 3)"
		],
		"starterFn": [
			"1\nfunction twins(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/W9TyA4At3HNYn4B5u"
	},
	{
		"title": "Zipping Up an Array",
		"description": "<p><span>Two arrays are part of the same </span><strong><span>zipper</span></strong><span> if the ending is identical. The identical section can be thought of as being \"zipped-up\". Below, </span><code>[2, 2, 4]</code><span> is \"zipped-up\".</span></p><pre><code>Array 1: [3, 5, 8, 9, 2, 2, 4]\nArray 2: [1, 7, 2, 2, 4]</code></pre><p><span>Create a function that takes in two arrays. Return </span><code>false</code><span> if none of the array is \"zipped.\" Return </span><code>true</code><span> if the arrays are identical. Otherwise, return an array with the first index in each array where the zipper diverges.</span></p><p><span>To illustrate:</span></p><pre><code>zipper([3, 5, 8, 9, 2, 2, 4], [1, 7, 2, 2, 4]) ➞ [3, 1]\n// Zipper 1: 9 (index-3) is first element to diverge.\n// Zipper 2: 7 (index-1) is first element to diverge.</code></pre><h3><span>Examples</span></h3><pre><code>zipper([5, 5, 7, 8, 9, 1, 2], [3, 2, 1, 1, 6, 6, 6, 6, 1, 2]) ➞ [4, 7]\n\nzipper([5, 4, 3, 2, 6], [6, 4, 3, 2, 6]) ➞ [0, 0]\n\nzipper([5, 4, 3, 2, 7], [6, 4, 3, 2, 6]) ➞ false\n\nzipper([5, 4, 3, 2, 6], [5, 4, 3, 2, 6]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Use zero-indexing for the arrays.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow"
		],
		"tests": [
			"Test.assertSimilar(zipper([5, 5, 7, 8, 9, 1, 2], [3, 2, 1, 1, 6, 6, 6, 6, 1, 2]), [4, 7])",
			"Test.assertSimilar(zipper([5, 4, 3, 2, 6], [6, 4, 3, 2, 6]), [0, 0])",
			"Test.assertSimilar(zipper([5, 4, 3, 2, 7], [6, 4, 3, 2, 6]), false)",
			"Test.assertSimilar(zipper([1, 5, 4, 3], [9, 8, 7, 5, 4, 3]), [0, 2])",
			"Test.assertSimilar(zipper([7, 8, 9, 9, 9], [8, 8, 9, 9, 9, 9, 9]), [1, 3])",
			"Test.assertSimilar(zipper([7, 8, 5, 1, 5], [6, 6, 5, 1, 5]), [1, 1])",
			"Test.assertSimilar(zipper([6, 6, 5, 1, 5], [6, 6, 5, 1, 5]), true)",
			"Test.assertSimilar(zipper([1, 1, 2, 6, 6, 5, 1, 5], [7, 8, 9, 4, 4, 6, 6, 5, 1, 5]), [2, 4])"
		],
		"starterFn": [
			"1\nfunction zipper(arr1, arr2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KJDD2N2putddr5vp3"
	},
	{
		"title": "Sock Pairs",
		"description": "<p><span>Joseph is in the middle of packing for a vacation. He's having a bit of trouble finding all of his socks, though.</span></p><p><span>Write a function that returns the number of sock pairs he has. A sock pair consists of two of the same letter, such as </span><code>\"AA\"</code><span>. The socks are represented as an unordered sequence.</span></p><h3><span>Examples</span></h3><pre><code>sockPairs(\"AA\") ➞ 1\n\nsockPairs(\"ABABC\") ➞ 2\n\nsockPairs(\"CABBACCC\") ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>If given an empty string (no socks in the drawer), return 0.</span></li><li><span>There can be multiple pairs of the same type of sock, such as two pairs of </span><code>CC</code><span> for the last example.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sockPairs(\"AA\"), 1);",
			"Test.assertEquals(sockPairs(\"ABABC\"), 2);",
			"Test.assertEquals(sockPairs(\"CABBACCC\"), 4);",
			"Test.assertEquals(sockPairs(\"AACDE\"), 1);",
			"Test.assertEquals(sockPairs(\"ACDBE\"), 0);",
			"Test.assertEquals(sockPairs(\"\"), 0);",
			"Test.assertEquals(sockPairs(\"ABABAB\"), 2);",
			"Test.assertEquals(sockPairs(\"AAAAA\"), 2);",
			"Test.assertEquals(sockPairs(\"AAACCBB\"), 3);"
		],
		"starterFn": [
			"1\nfunction sockPairs(socks) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AkSERJZ9pTEZfFMNE"
	},
	{
		"title": "Bound Sort",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if an input array can be completely sorted by only sorting within the bounds </span><code>[0, n]</code><span> (inclusive), where </span><code>n</code><span> is smaller than or equal to the array's length, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>boundSort([1, 6, 5, 3, 8, 9], [0, 3]) ➞ true\n// If [1, 6, 5, 3] is sorted to [1, 3, 5, 6], the array is completely sorted.\n\nboundSort([1, 6, 5, 3, 8, 9], [0, 2]) ➞ false\n// Even if [1, 6, 5] is sorted to [1, 5, 6], the array is still not completely sorted.\n\nboundSort([1, 9, 2, 5, 7], [0, 4]) ➞ true\n\nboundSort([1, 9, 2, 5, 7], [0, 3]) ➞ false\n// Sorting from [0, 3] gives us [1, 2, 5, 9, 7], array still not completely sorted.</code></pre><h3><span>Notes</span></h3><ul><li><span>Numbers in array will be unique.</span></li><li><span>The lower index of the bound will always be </span><code>0</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting",
			"validation"
		],
		"tests": [
			"Test.assertEquals(boundSort([1, 6, 5, 3, 8, 9], [0, 3]), true)",
			"Test.assertEquals(boundSort([1, 6, 5, 3, 8, 9], [0, 2]), false)",
			"Test.assertEquals(boundSort([1, 9, 2, 5, 7], [0, 4]), true)",
			"Test.assertEquals(boundSort([1, 9, 2, 5, 7], [0, 3]), false)",
			"Test.assertEquals(boundSort([1, 2, 3, 4, 5, 8, 9], [0, 1]), true)",
			"Test.assertEquals(boundSort([1, 2, 3, 5, 4, 8, 9], [0, 4]), true)",
			"Test.assertEquals(boundSort([1, 2, 3, 5, 4, 8, 9], [0, 3]), false)"
		],
		"starterFn": [
			"1\nfunction boundSort(arr, bounds) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/riBaZGcbdEwBKmqzr"
	},
	{
		"title": "Where's Waldo?",
		"description": "<p><span>Return the coordinates (</span><code>[row, col]</code><span>) of the element that differs from the rest.</span></p><h3><span>Examples</span></h3><pre><code>whereIsWaldo([\n  [\"A\", \"A\", \"A\"],\n  [\"A\", \"A\", \"A\"],\n  [\"A\", \"B\", \"A\"]\n]) ➞ [3, 2]\n\nwhereIsWaldo([\n  [\"c\", \"c\", \"c\", \"c\"],\n  [\"c\", \"c\", \"c\", \"d\"]\n]) ➞ [2, 4]\n\nwhereIsWaldo([\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"],\n  [\"P\", \"O\", \"O\", \"O\"],\n  [\"O\", \"O\", \"O\", \"O\"]\n]) ➞ [5, 1]</code></pre><h3><span>Notes</span></h3><p><span>Rows and columns are 1-indexed (</span><strong><span>not zero-indexed</span></strong><span>).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming"
		],
		"tests": [
			"Test.assertSimilar(whereIsWaldo([",
			"  [\"A\", \"A\", \"A\"], ",
			"  [\"A\", \"A\", \"A\"], ",
			"  [\"A\", \"B\", \"A\"]",
			"]), [3, 2])",
			"​",
			"Test.assertSimilar(whereIsWaldo([",
			"  [\"c\", \"c\", \"c\", \"c\"], ",
			"  [\"c\", \"c\", \"c\", \"d\"]",
			"]), [2, 4])",
			"​",
			"Test.assertSimilar(whereIsWaldo([",
			"  [\"O\", \"O\", \"O\", \"O\"], ",
			"  [\"O\", \"O\", \"O\", \"O\"], ",
			"  [\"O\", \"O\", \"O\", \"O\"], ",
			"  [\"O\", \"O\", \"O\", \"O\"], ",
			"  [\"P\", \"O\", \"O\", \"O\"], ",
			"  [\"O\", \"O\", \"O\", \"O\"]",
			"]), [5, 1])",
			"​",
			"Test.assertSimilar(whereIsWaldo([",
			"  [\"X\", \"X\", \"Y\", \"X\"], ",
			"  [\"X\", \"X\", \"X\", \"X\"], ",
			"  [\"X\", \"X\", \"X\", \"X\"]",
			"]), [1, 3])"
		],
		"starterFn": [
			"1\nfunction whereIsWaldo(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pNNvNZQCz2DmvT59d"
	},
	{
		"title": "Password Validation",
		"description": "<p><span>Create a function that validates a password to conform to the following rules:</span></p><ul><li><span>Length between 6 and 24 characters.</span></li><li><span>At least one uppercase letter (A-Z).</span></li><li><span>At least one lowercase letter (a-z).</span></li><li><span>At least one digit (0-9).</span></li><li><span>Maximum of 2 repeated characters.</span><ul><li><span>\"aa\" is OK 👍</span></li><li><span>\"aaa\" is NOT OK 👎</span></li></ul></li><li><span>Supported special characters:</span><ul><li><code>! @ # $ % ^ &amp; * ( ) + = _ - { } [ ] : ; \" ' ? &lt; &gt; , .</code></li></ul></li></ul><h3><span>Examples</span></h3><pre><code>validatePassword(\"P1zz@\") ➞ false\n// Too short.\n\nvalidatePassword(\"iLoveYou\") ➞ false\n// Missing a number.\n\nvalidatePassword(\"Fhg93@\") ➞ true\n// OK!</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"regex",
			"validation"
		],
		"tests": [
			"// INVALID PASSWORDS",
			"Test.assertEquals(validatePassword(\"P1zz@\"), false, \"Too short.\")",
			"Test.assertEquals(validatePassword(\"P1zz@P1zz@P1zz@P1zz@P1zz@\"), false, \"Too long.\")",
			"Test.assertEquals(validatePassword(\"mypassword11\"), false, \"Missing uppercase letter.\")",
			"Test.assertEquals(validatePassword(\"MYPASSWORD11\"), false, \"Missing lowercase letter.\")",
			"Test.assertEquals(validatePassword(\"iLoveYou\"), false, \"Missing number.\")",
			"Test.assertEquals(validatePassword(\"Pè7$areLove\"), false, 'Special character \"è\" disallowed.')",
			"Test.assertEquals(validatePassword(\"Repeeea7!\"), false, 'Repeated character \"eee\" disallowed.')",
			"// VALID PASSWORDS",
			"Test.assertEquals(validatePassword(\"H4(k+x0\"), true)",
			"Test.assertEquals(validatePassword(\"Fhg93@\"), true)",
			"Test.assertEquals(validatePassword(\"aA0!@#$%^&*()+=_-{}[]:;\\\"\"), true)",
			"Test.assertEquals(validatePassword(\"zZ9'?<>,.\"), true)"
		],
		"starterFn": [
			"1\nfunction validatePassword(password) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JYyXdP5WBmDiL8LvT"
	},
	{
		"title": "Write a Simple Console Object",
		"description": "<p><span>The objective of this challenge is to create a console </span><code>Object</code><span>. You should write three working functions inside to complete this challenge:</span></p><ul><li><span>Create a </span><code>log</code><span> function that takes user arguments and returns them as a string.</span></li><li><span>Create a </span><code>history</code><span> function that takes an optional range as an argument.</span></li><li><span>Create a </span><code>clearHistory</code><span> function to remove the history memory.</span></li></ul><h3><span>Examples</span></h3><pre><code>myConsole.log([0,1,2,3]) ➞ \"[0,1,2,3]\"\n\nmyConsole.log(\"ok : \",function(){ return \"hello world !\"}) ➞ \"ok : function(){ return \\\"hello world !\\\"}\"\n\nmyConsole.history() ➞ \"[0,1,2,3]\\nok : function(){ return \\\"hello world !\\\"}''\n\nmyConsole.clearHistory() ➞ true\n\nmyConsole.history() ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The range of history function:</span><ul><li><span>Should be an </span><code>Array</code><span>.</span></li><li><span>Cannot have negative numbers as range. e.g. If start number is negative set it to 0, if end number is negative ignore it and set it to max history length.</span></li><li><span>The end range can't be lower than the start range, else set it to start at value + 1.</span></li><li><span>The start range can't be greater than history length even he need to be set to length -1.</span></li><li><span>The start range does not start at 0.</span></li><li><span>If the range of history is not set then all history will be show.</span></li><li><span>Each history lines (with and without range) have newline at the end except last line.</span></li><li><span>If no argument was passed to history function all history will be showed.</span></li></ul></li><li><span>The log function has no limit of arguments.</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"classes",
			"objects"
		],
		"tests": [
			"var argList = [",
			"  [\"first test\",1],",
			"  [\"second test\", [2]],",
			"  [\"object test ! \", {myObjectIsHere : true}],",
			"  [\"and my function ? \", function(){ return \"hello challengers\" }],",
			"  [\" alll ??? \", [1,2,3,4], {here : true}, function(){return 1}],",
			"  [null]",
			"]",
			"var answerList = [",
			"  \"first test1\",",
			"  \"second test[2]\",",
			"  \"object test ! {\\\"myObjectIsHere\\\":true}\",",
			"  \"and my function ? function (){ return \\\"hello challengers\\\" }\",",
			"  \" alll ??? [1,2,3,4]{\\\"here\\\":true}function (){return 1}\",",
			"  \"null\"",
			"]",
			"​",
			"var myConsole = new Console();",
			"​",
			"for (var i = 0; i < argList.length; i++){",
			"  Test.assertEquals(myConsole.log.apply(myConsole,argList[i]), answerList[i])",
			"}",
			"Test.assertEquals(myConsole.history([1,2]), \"first test1\\nsecond test[2]\");",
			"Test.assertEquals(myConsole.history([2,3]), \"second test[2]\\nobject test ! {\\\"myObjectIsHere\\\":true}\");",
			"Test.assertEquals(myConsole.history([3,2]), \"object test ! {\\\"myObjectIsHere\\\":true}\");",
			"Test.assertEquals(myConsole.history([-1]), \"first test1\\nsecond test[2]\\nobject test ! {\\\"myObjectIsHere\\\":true}\\nand my function ? function (){ return \\\"hello challengers\\\" }\\n alll ??? [1,2,3,4]{\\\"here\\\":true}function (){return 1}\\nnull\");"
		],
		"starterFn": [
			"1\nclass Console {",
			"2\n    constructor() {",
			"3\n    }",
			"4\n​",
			"5\n    log(args) {",
			"6\n    }",
			"7\n​",
			"8\n    history(range) {",
			"9\n    }",
			"10\n​",
			"11\n    clearHistory() {",
			"12\n    }",
			"13\n}"
		],
		"url": "https://edabit.com/challenge/o7fs6wQvjfu9iZE2j"
	},
	{
		"title": "Ice Cream Stand",
		"description": "<p><span>For this question, treat people as existing only on integers.</span></p><p><span>Two ice cream stands: </span><code>A</code><span> and </span><code>B</code><span> each occupy a spot on the beach, from </span><code>[0, 100]</code><span>. Their positions are represented with coordinates </span><code>(A, B)</code><span>. One position could be:</span></p><pre><code>[32, 69]</code></pre><p><span>People are distributed equally from </span><code>[0, 100]</code><span>, and will purchase ice cream  from the stand closest to them.</span></p><p><span>For </span><code>(A, B)</code><span> above, we have that  everyone from</span><code>[0, 50]</code><span> goes to </span><code>A</code><span> and everyone from </span><code>[51, 100]</code><span> goes to </span><code>B</code><span>. People on 50 will go to </span><code>A</code><span> because </span><strong><span>|50 - 32| = 18 &lt; 19 = |50 - 69|</span></strong><span>, and people on 51 will go to </span><code>B</code><span> because </span><strong><span>|51 - 69| = 18 &lt; 19 = |51 - 32| </span></strong><span>.</span></p><pre><code>profit = total number of integers claimed by the ice cream stand</code></pre><p><span>Write a function that calculates the profit for each ice cream stand based on their position. For the example above,  </span><code>profit(32, 69) = [51, 50]</code><span>.</span></p><p><span>Disregard ties. For instance, if </span><code>(A, B) = (49, 51)</code><span>, disregard the person on </span><code>50</code><span>. Profit is equally distributed in this case, with </span><code>profit(49, 51) = [50, 50]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>profit(32, 69) ➞ [51, 50]\n\nprofit(49, 51) ➞ [50, 50]\n\nprofit(0, 1) ➞ [1, 100]</code></pre><h3><span>Notes</span></h3><ul><li><code>A</code><span> &lt; </span><code>B</code><span> will always be true.</span></li><li><code>A</code><span> and </span><code>B</code><span> will never occupy the same spot.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(profit(32, 69), [51, 50])",
			"Test.assertSimilar(profit(49, 51), [50, 50])",
			"Test.assertSimilar(profit(25, 26), [26, 75])",
			"Test.assertSimilar(profit(24, 26), [25, 75])",
			"Test.assertSimilar(profit(0, 1), [1, 100])",
			"Test.assertSimilar(profit(3, 6), [5, 96])",
			"Test.assertSimilar(profit(55, 65), [60, 40])",
			"Test.assertSimilar(profit(25, 75), [50, 50])"
		],
		"starterFn": [
			"1\nfunction profit(A, B) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aJHPftoXzexJMcoPf"
	},
	{
		"title": "Format Blog Posts in Markdown",
		"description": "<p><span>You are tasked with grabbing some blog posts from an API and formatting them using markdown, so that your coworker (who has no idea what markdown is) can publish them with ease on your company's website.</span></p><p><span>You already figured out how to get the posts and the associated users from the API, now you just need to write a function that takes that data and formats it in a markdown string. The rules are as follows:</span></p><ul><li><span>The </span><code>title</code><span> should start with an uppercase character and be displayed as an </span><strong><span>H1</span></strong><span>.</span></li><li><span>Add 2 newlines after the </span><code>title</code><span>.</span></li><li><p><span>The </span><code>metadata</code><span> of the post has the following format:\n  </span><code>Written by &lt;author&gt; on &lt;date&gt;</code></p><ul><li><span>The </span><code>&lt;author&gt;</code><span> part is a </span><strong><span>link</span></strong><span> where the </span><strong><span>text</span></strong><span> is the author's </span><code>firstName</code><span> and </span><code>lastName</code><span> (separated by a space), while the </span><strong><span>href</span></strong><span> is a </span><code>mailto:&lt;author email&gt;</code><span>.</span></li><li><span>The </span><code>&lt;date&gt;</code><span> part is the date of the post and the format is the following:\n  </span><code>&lt;weekday&gt;, &lt;month&gt; &lt;date&gt;, &lt;year&gt;</code><ul><li><span>Weekday is in short form (</span><code>Thu</code><span>, </span><code>Sun</code><span>, …)</span></li><li><span>Month is in long form (</span><code>April</code><span>, </span><code>December</code><span>, …)</span></li><li><span>Date is in 2 digits form (</span><code>01 - 31</code><span>)</span></li><li><span>Year is always in extended form (</span><code>2018</code><span>)</span></li></ul></li></ul></li><li><p><span>Add 2 newlines after the </span><code>metadata</code><span>.</span></p></li><li><span>The </span><code>separator</code><span> is an horizontal line, in markdown it's written like this: </span><code>---</code><span>.</span></li><li><span>Add 2 newlines after the </span><code>separator</code><span>.</span></li><li><span>The </span><code>body</code><span> of the post is already properly formatted and is the last thing you must add.</span></li></ul><h3><span>Data structure</span></h3><h4><span>Post</span></h4><table><thead><tr><th><span>Property</span></th><th><span>Type</span></th><th><span>Description</span></th></tr></thead><tbody><tr><td><code>id</code></td><td><code>number</code></td><td><span>id of the post</span></td></tr><tr><td><code>userId</code></td><td><code>number</code></td><td><span>id of the user that authored the post</span></td></tr><tr><td><code>timestamp</code></td><td><code>number</code></td><td><span>timestamp of the post (in milliseconds)</span></td></tr><tr><td><code>title</code></td><td><code>string</code></td><td><span>title of the post</span></td></tr><tr><td><code>body</code></td><td><code>string</code></td><td><span>body (content) of the post</span></td></tr></tbody></table><h4><span>User</span></h4><table><thead><tr><th><span>Property</span></th><th><span>Type</span></th><th><span>Description</span></th></tr></thead><tbody><tr><td><code>id</code></td><td><code>number</code></td><td><span>id of the user</span></td></tr><tr><td><code>firstName</code></td><td><code>string</code></td><td><span>first name of the user</span></td></tr><tr><td><code>lastName</code></td><td><code>string</code></td><td><span>last name of the user</span></td></tr><tr><td><code>email</code></td><td><code>string</code></td><td><span>email of the user</span></td></tr></tbody></table><h3><span>Examples</span></h3><p><span>Input:</span></p><pre><code class=\"language-js\">formatBlogPost(\n  {\n    id: 1,\n    userId: 10,\n    timestamp: 1536581919628,\n    title: 'varius ut blandit non interdum in ante',\n    body:\n      'Nullam sit amet turpis elementum ligula vehicula consequat. Morbi a ipsum. Integer a nibh.\\n\\nIn quis justo. Maecenas rhoncus aliquam lacus. Morbi quis tortor id nulla ultrices aliquet.',\n  },\n  users, // Array of objects, see structure above\n);</code></pre><p><span>Output (as a string):</span></p><pre><code># Varius ut blandit non interdum in ante\n\nWritten by [Sigismond Reavell](mailto:sreavell9@cargocollective.com) on Mon, September 10, 2018\n\n---\n\nNullam sit amet turpis elementum ligula vehicula consequat. Morbi a ipsum. Integer a nibh.\n\nIn quis justo. Maecenas rhoncus aliquam lacus. Morbi quis tortor id nulla ultrices aliquet.</code></pre><h3><span>Notes</span></h3><ul><li><span>Feel like formatting the dates is tedious? It doesn't have to be! Check out the </span><strong><span>Resources</span></strong><span> tab for a painless way to format them.</span></li><li><span>If you're new to markdown or you don't remember something, check out the </span><strong><span>Resources</span></strong><span> tab for a refresher. Some elements can be written in multiple styles, so be careful to use the correct one for this challenge.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates",
			"formatting",
			"objects"
		],
		"tests": [
			"const posts = [",
			"  {",
			"    id: 1,",
			"    userId: 10,",
			"    timestamp: 1536581919628,",
			"    title: 'varius ut blandit non interdum in ante',",
			"    body:",
			"      'Nullam sit amet turpis elementum ligula vehicula consequat. Morbi a ipsum. Integer a nibh.\\n\\nIn quis justo. Maecenas rhoncus aliquam lacus. Morbi quis tortor id nulla ultrices aliquet.',",
			"  },",
			"  {",
			"    id: 2,",
			"    userId: 1,",
			"    timestamp: 1516722015166,",
			"    title: 'sapien sapien non mi integer ac neque duis',",
			"    body:",
			"      'Nulla ut erat id mauris vulputate elementum. Nullam varius. Nulla facilisi.\\n\\nCras non velit nec nisi vulputate nonummy. Maecenas tincidunt lacus at velit. Vivamus vel nulla eget eros elementum pellentesque.',",
			"  },",
			"  {",
			"    id: 3,",
			"    userId: 8,",
			"    timestamp: 1522497310076,",
			"    title: 'diam erat fermentum justo nec',",
			"    body:",
			"      'Proin eu mi. Nulla ac enim. In tempor, turpis nec euismod scelerisque, quam turpis adipiscing lorem, vitae mattis nibh ligula nec sem.\\n\\nDuis aliquam convallis nunc. Proin at turpis a pede posuere nonummy. Integer non velit.',",
			"  },",
			"  {"
		],
		"starterFn": [
			"1\nfunction formatBlogPost(post, users) {",
			"2\n  ",
			"3\n};",
			"4\n​"
		],
		"url": "https://edabit.com/challenge/MASwNDXR7dSii2QuS"
	},
	{
		"title": "Ice Cream Sandwich",
		"description": "<p><span>An </span><strong><span>ice cream sandwich</span></strong><span> is a string that is formed by two identical ends and a different middle.</span></p><h4><span>Some examples of ice cream sandwiches:</span></h4><pre><code>\"AABBBAA\"\n\n\"3&amp;&amp;3\"\n\n\"yyyyymmmmmmmmyyyyy\"\n\n\"hhhhhhhhmhhhhhhhh\"</code></pre><p><span>Notice how </span><strong><span>left</span></strong><span> and </span><strong><span>right</span></strong><span> ends of the sandwich are identical in both </span><strong><span>length</span></strong><span> and in </span><strong><span>repeating character</span></strong><span>. The </span><strong><span>middle</span></strong><span> section is distinctly different.</span></p><h4><span>Not ice cream sandwiches:</span></h4><pre><code>\"BBBBB\"\n// You can't have just plain icecream.\n\n\"AAACCCAA\"\n// You can't have unequal sandwich ends.\n\n\"AACDCAA\"\n// You can't have more than one filling.\n\n\"A\"\n// You can't have fewer than 3 characters.</code></pre><p><span>Write a function that returns </span><code>true</code><span> if a string is an </span><strong><span>ice cream sandwich</span></strong><span> and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isIcecreamSandwich(\"CDC\") ➞ true\n\nisIcecreamSandwich(\"AAABB\") ➞ false\n\nisIcecreamSandwich(\"AA\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>An ice cream sandwich must have a </span><strong><span>minimum length of 3 characters</span></strong><span>, and at least </span><strong><span>two of these characters must be distinct</span></strong><span> (you can't only have the filling!).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isIcecreamSandwich(\"AABBBAA\"), true)",
			"Test.assertEquals(isIcecreamSandwich(\"3&&3\"), true)",
			"Test.assertEquals(isIcecreamSandwich(\"yyyyymmmmmmmmyyyyy\"), true)",
			"Test.assertEquals(isIcecreamSandwich(\"hhhhhhhhmhhhhhhhh\"), true)",
			"Test.assertEquals(isIcecreamSandwich(\"CDC\"), true)",
			"Test.assertEquals(isIcecreamSandwich(\"BBBBB\"), false, \"only filling\")",
			"Test.assertEquals(isIcecreamSandwich(\"AAACCCAA\"), false, \"ends are unbalanced\")",
			"Test.assertEquals(isIcecreamSandwich(\"AACDCAA\"), false, \"can only have one type of filling\")",
			"Test.assertEquals(isIcecreamSandwich(\"AAABB\"), false, \"only one end\")",
			"Test.assertEquals(isIcecreamSandwich(\"AA\"), false, \"too short\")",
			"Test.assertEquals(isIcecreamSandwich(\"A\"), false, \"too short\")",
			"Test.assertEquals(isIcecreamSandwich(\"\"), false, \"too short\")"
		],
		"starterFn": [
			"1\nfunction isIcecreamSandwich(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/euDed7qoDzgvcHwdS"
	},
	{
		"title": "Uban Numbers",
		"description": "<p><span>A number </span><code>n</code><span> is called uban if its name (in English) does not contain the letter \"u\". In particular, it cannot contain the terms \"four\", \"hundred\", and \"thousand\", so the uban number following 99 is 1,000,000.</span></p><h3><span>Examples</span></h3><pre><code>isUban(456) ➞ false\n\nisUban(25) ➞ true\n\nisUban(1098) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isUban(0), true)",
			"Test.assertEquals(isUban(24), false)",
			"Test.assertEquals(isUban(223), false)",
			"Test.assertEquals(isUban(2051), false)",
			"Test.assertEquals(isUban(627), false)",
			"Test.assertEquals(isUban(6258), false)",
			"Test.assertEquals(isUban(12), true)",
			"Test.assertEquals(isUban(202), false)",
			"Test.assertEquals(isUban(98), true)",
			"Test.assertEquals(isUban(6592), false)",
			"Test.assertEquals(isUban(393), false)",
			"Test.assertEquals(isUban(1000096), true)",
			"Test.assertEquals(isUban(40), true)",
			"​",
			"// By Harith Shah"
		],
		"starterFn": [
			"1\nfunction isUban(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GZkdz9WEeHSBy2ScE"
	},
	{
		"title": "Pizza Points™ 🍕",
		"description": "<p><img alt=\"Pizza Points\" src=\"https://s3.amazonaws.com/edabit-images/pizza-points.gif\"></p><p><span>Google is launching a network of autonomous pizza delivery drones and wants you to create a flexible rewards system (Pizza Points™) that can be tweaked in the future. The rules are simple: if a customer has made at least </span><em><span>N</span></em><span> orders of at least </span><em><span>Y</span></em><span> price, they get a FREE pizza!</span></p><p><span>Create a function that takes an object of customers, a minimum number of orders and a minimum order price. Return an array of customers that are eligible for a free pizza.</span></p><h3><span>Examples</span></h3><pre><code> let customersObj = {\n    \"Batman\": [22, 30, 11, 17, 15, 52, 27, 12],\n    \"Spider-Man\": [5, 17, 30, 33, 40, 22, 26, 10, 11, 45]\n  }\n\n  pizzaPoints(customersObj, 5, 20) ➞ [\"Spider-Man\"]\n\n  pizzaPoints(customersObj, 3, 10) ➞ [\"Batman\", \"Spider-Man\"]\n\n  pizzaPoints(customersObj, 5, 100) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>⚠️Sort the returned array of customer names in alphabetical order.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"games",
			"objects"
		],
		"tests": [
			"let obj1 = {",
			"  'Batman': [22, 30, 11, 17, 15, 52, 27, 12],",
			"  'Spider-Man': [5, 17, 30, 33, 40, 22, 26, 10, 11, 45]",
			"}",
			"​",
			"let obj2 = {",
			"  'Captain America': [10, 10, 54, 14, 51, 33, 42, 73, 66, 33, 55, 42, 47],",
			"  'Iron Man': [30, 56, 38, 14, 17],",
			"  'Hulk': [53, 25, 13, 7, 61, 16, 17, 29, 64, 8],",
			"  'Superman': [27, 28]",
			"}",
			"​",
			"let obj3 = {",
			"  'Zorro': [13, 53, 10, 51],",
			"  'Wolverine': [16],",
			"  'Elon Musk': [26, 61, 23, 61, 39, 50, 53, 54, 45, 46, 42, 49, 18, 75, 11, 73, 42, 61, 15, 60, 70, 67, 8, 9, 63, 55, 55, 35, 24, 59, 13, 49, 46, 26, 7, 8, 8, 34, 73, 60, 27, 28, 28, 48, 10]",
			"}",
			"​",
			"Test.assertSimilar(pizzaPoints(obj1, 5, 20), [\"Spider-Man\"]);",
			"Test.assertSimilar(pizzaPoints(obj2, 1, 5), [\"Captain America\", \"Hulk\", \"Iron Man\", \"Superman\"]);",
			"Test.assertSimilar(pizzaPoints(obj3, 7, 15), [\"Elon Musk\"]);",
			"Test.assertSimilar(pizzaPoints(obj1, 10, 5), [\"Spider-Man\"]);",
			"Test.assertSimilar(pizzaPoints(obj2, 2, 35), [\"Captain America\", \"Hulk\", \"Iron Man\"]);",
			"Test.assertSimilar(pizzaPoints(obj3, 3, 25), [\"Elon Musk\"]);",
			"Test.assertSimilar(pizzaPoints(obj3, 4, 12), [\"Elon Musk\"]);",
			"Test.assertSimilar(pizzaPoints(obj2, 1, 75), []);"
		],
		"starterFn": [
			"1\nfunction pizzaPoints(customers, minOrders, minPrice) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/raWPf5nZyRKEEH6ZQ"
	},
	{
		"title": "Longest Streak",
		"description": "<p><span>Create a function that takes an array of date objects and return the \"longest streak\" (i.e. number of consecutive days in a row).</span></p><h3><span>Example</span></h3><pre><code>longestStreak([\n  {\n    \"date\": \"2019-09-18\"\n  },\n  {\n    \"date\": \"2019-09-19\"\n  },\n  {\n    \"date\": \"2019-09-20\"\n  },\n  {\n    \"date\": \"2019-09-26\"\n  },\n  {\n    \"date\": \"2019-09-27\"\n  },\n  {\n    \"date\": \"2019-09-30\"\n  }\n]) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>An empty array should return </span><code>0</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"games",
			"loops",
			"objects"
		],
		"tests": [
			"Test.assertEquals(longestStreak([",
			"  {",
			"    \"date\": \"1985-03-19\"",
			"  }",
			"]), 1)",
			"​",
			"Test.assertEquals(longestStreak([",
			"  {",
			"    \"date\": \"2019-09-18\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-19\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-20\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-26\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-27\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-30\"",
			"  }",
			"]), 3)"
		],
		"starterFn": [
			"1\nfunction longestStreak(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xvKFpQ6vzuY8dH9fn"
	},
	{
		"title": "Sort by Digit Length, then By Number Itself",
		"description": "<p><span>Write a function that sorts an array of integers by their digit length in </span><strong><span>descending order</span></strong><span>, then settles ties by sorting numbers with the same digit length in </span><strong><span>ascending order</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>digitSort([77, 23, 5, 7, 101])\n➞ [101, 23, 77, 5, 7]\n\ndigitSort([1, 5, 9, 2, 789, 563, 444])\n➞ [444, 563, 789, 1, 2, 5, 9]\n\ndigitSort([53219, 3772, 564, 32, 1])\n➞ [53219, 3772, 564, 32, 1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(digitSort([77, 23, 5, 7, 101]), [101, 23, 77, 5, 7])",
			"Test.assertSimilar(digitSort([1, 5, 9, 2, 789, 563, 444]), [444, 563, 789, 1, 2, 5, 9])",
			"Test.assertSimilar(digitSort([53219, 3772, 564, 32, 1]), [53219, 3772, 564, 32, 1])",
			"Test.assertSimilar(digitSort([9, 667, 87, 56, 3023, 5555, 111]), [3023, 5555, 111, 667, 56, 87, 9])"
		],
		"starterFn": [
			"1\nfunction digitSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/S3sM8FkrWDrfjWeJ6"
	},
	{
		"title": "Number of Even or Odd Digits",
		"description": "<p><span>Create a function that takes in an array of integers returns the number of even or odd digits for each number, depending on the parameter.</span></p><h3><span>Examples</span></h3><pre><code>countDigits([22, 53, 99, 61, 777, 8], \"odd\") ➞ [0, 2, 2, 1, 3, 0]\n\ncountDigits([22, 53, 99, 61, 777, 8], \"even\") ➞ [2, 0, 0, 1, 0, 1]\n\ncountDigits([54, 113, 89, 10], \"odd\") ➞ [1, 3, 1, 1]\n\ncountDigits([54, 113, 89, 10], \"even\") ➞ [1, 0, 1, 1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(countDigits([22, 53, 99, 61, 777, 8], \"odd\"), [0, 2, 2, 1, 3, 0])",
			"Test.assertSimilar(countDigits([54, 113, 89, 10], \"odd\"), [1, 3, 1, 1])",
			"Test.assertSimilar(countDigits([17, 19, 21], \"odd\"), [2, 2, 1])",
			"Test.assertSimilar(countDigits([1, 2, 3, 4], \"odd\"), [1, 0, 1, 0])",
			"Test.assertSimilar(countDigits([22, 53, 99, 61, 777, 8], \"even\"), [2, 0, 0, 1, 0, 1])",
			"Test.assertSimilar(countDigits([54, 113, 89, 10], \"even\"), [1, 0, 1, 1])",
			"Test.assertSimilar(countDigits([5, 8, 9, 12], \"even\"), [0, 1, 0, 1])",
			"Test.assertSimilar(countDigits([1, 2, 3], \"even\"), [0, 1, 0])"
		],
		"starterFn": [
			"1\nfunction countDigits(arr, type) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fZxhP7ZSFEhLGvjME"
	},
	{
		"title": "Distinct Digit in a Number",
		"description": "<p><span>Write a regular expression that matches numbers whose digits are not repeated (i.e. digits are distinct).</span></p><h3><span>Examples</span></h3><pre><code>regularExpression.test(\"123\") ➞ true\n\nregularExpression.test(\"112233\") ➞ false\n\nregularExpression.test(\"1025\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Input is a number as a string.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(regularExpression.test(\"123\"), true)",
			"Test.assertEquals(regularExpression.test(\"112233\"), false)",
			"Test.assertEquals(regularExpression.test(\"1025\"), true)",
			"Test.assertEquals(regularExpression.test(\"11\"), false)",
			"Test.assertEquals(regularExpression.test(\"108\"), true)",
			"Test.assertEquals(regularExpression.test(\"2314412221234\"), false)",
			"Test.assertEquals(regularExpression.test(\"725\"), true)"
		],
		"starterFn": [
			"1\nconst regularExpression = /*Regular Expression*/"
		],
		"url": "https://edabit.com/challenge/3saLXYSqR2tQkszXe"
	},
	{
		"title": "Body Mass Index",
		"description": "<p><span>Body Mass Index (BMI) is found by taking your weight in kilograms and dividing by the square of your height in meters. The BMI categories are:</span></p><ul><li><span>Underweight: &lt;18.5</span></li><li><span>Normal weight: 18.5–24.9</span></li><li><span>Overweight: 25–29.9</span></li><li><span>Obesity: BMI of 30 or greater</span></li></ul><p><span>Create a function that will accept weight and height (in kilos, pounds, meters, or inches) and return the BMI and the associated category. Round the BMI to nearest tenth.</span></p><h3><span>Examples</span></h3><pre><code>BMI(\"205 pounds\", \"73 inches\") ➞ \"27.0 Overweight\"\n\nBMI(\"55 kilos\", \"1.65 meters\") ➞ \"20.2 Normal weight\"\n\nBMI(\"154 pounds\", \"2 meters\") ➞ \"17.5 Underweight\"</code></pre><h3><span>Notes</span></h3><ul><li><span>1 inch = 0.0254 meter</span></li><li><span>1 pound = 0.453592 kilo</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(BMI(\"53.3 kilos\",\"1.7 meters\"), \"18.4 Underweight\")",
			"Test.assertEquals(BMI(\"76.8 kilos\",\"1.6 meters\"), \"30.0 Obesity\")",
			"Test.assertEquals(BMI(\"53.5 kilos\",\"1.7 meters\"), \"18.5 Normal weight\")",
			"Test.assertEquals(BMI(\"155 pounds\",\"73 inches\"), \"20.4 Normal weight\")",
			"Test.assertEquals(BMI(\"175 pounds\",\"70 inches\"), \"25.1 Overweight\")"
		],
		"starterFn": [
			"1\nfunction BMI(weight, height) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rfjyk42gRWu2RBHhm"
	},
	{
		"title": "Minimum Difference Pair",
		"description": "<p><span>Given an array of numbers, return the </span><em><span>pair</span></em><span> of numbers that give the minimum absolute </span><em><span>difference</span></em><span>. Return the pair as an </span><em><span>array</span></em><span>, sorted in </span><em><span>ascending</span></em><span> order. If multiple pairs have the same difference, return the pair with the smallest sum.</span></p><h3><span>Examples</span></h3><pre><code>minDifferencePair([40, 16, 8, 17, 15]) ➞ [15, 16]\n// [15, 16] has smaller sum than [16, 17]\n\nminDifferencePair([1, -31, -27, -18, -48, -15, -11, -34]) ➞ [-34, -31]\n\nminDifferencePair([0, 2, 35, 42, 45, 14, -6, -1]) ➞ [-1, 0]\n\nminDifferencePair([32, 33, 4, 6, 48, 18, 20, -7, -4, 31]) ➞ [31, 32]</code></pre><h3><span>Notes</span></h3><p><span>There will be no duplicate numbers in the array.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(minDifferencePair([27, 49, 28, 13, -9, -2, 50]), [27, 28])",
			"Test.assertSimilar(minDifferencePair([32, -2, 25, -5, 20, 48, 38, 36, 7, 0]), [-2, 0])",
			"Test.assertSimilar(minDifferencePair([34, 50, 7, 2, -3, 17, -10, 26]), [-3, 2])",
			"Test.assertSimilar(minDifferencePair([-1, 10, -2, 3, -6, -10]), [-2, -1])",
			"Test.assertSimilar(minDifferencePair([15, 2, 17, 19, 5, -4]), [15, 17])",
			"Test.assertSimilar(minDifferencePair([18, -3, -10, 4, 19, -6, 15, 20, 14, 6]), [14, 15])",
			"Test.assertSimilar(minDifferencePair([11, 16, 9, 5, 15, -6, 2]), [15, 16])",
			"Test.assertSimilar(minDifferencePair([-17, 27, -3, 17, -29, 11, 40, 48]), [11, 17])",
			"Test.assertSimilar(minDifferencePair([43, -8, -17, -19, -9]), [-9, -8])",
			"Test.assertSimilar(minDifferencePair([27, 11, 22, 42, 1, 43, 21]), [21, 22])",
			"Test.assertSimilar(minDifferencePair([41, 42, 20, 6, 32, 49, -5, 28, 39, 40, 37]), [39, 40])",
			"Test.assertSimilar(minDifferencePair([22, -3, 4, 1, 46, 21, 0, 29]), [0, 1])",
			"Test.assertSimilar(minDifferencePair([35, 41, 48, 30, 24, 46, -2, -4, 34, 11]), [34, 35])",
			"Test.assertSimilar(minDifferencePair([9, 26, 5, 11, 34, -1, 4, 22, 40, 13, 25]), [4, 5])",
			"Test.assertSimilar(minDifferencePair([28, 19, 29, 35, 24, 3, 23, 30]), [23, 24])",
			"Test.assertSimilar(minDifferencePair([32, 33, 0, 39, 38, 29, 23]), [32, 33])",
			"Test.assertSimilar(minDifferencePair([13, 7, 39, 30, 17, 6, 38, 14]), [6, 7])",
			"Test.assertSimilar(minDifferencePair([2, 26, 1, 30, 29, 11, 12]), [1, 2])",
			"Test.assertSimilar(minDifferencePair([38, 0, 21, -1, 40, 8, 22, 32, 27]), [-1, 0])",
			"Test.assertSimilar(minDifferencePair([9, 8, 7, 6, 5, 4, 3, 2, 1]), [1, 2])"
		],
		"starterFn": [
			"1\nfunction minDifferencePair(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/czFD8Y3E253eNCy8v"
	},
	{
		"title": "Tweaking Letters",
		"description": "<p><span>Create a function that tweaks letters by one forward (+1) or backwards (-1) according to an array.</span></p><h3><span>Examples</span></h3><pre><code>tweakLetters(\"apple\", [0, 1, -1, 0, -1]) ➞ \"aqold\"\n// \"p\" + 1 =&gt; \"q\"; \"p\" - 1 =&gt; \"o\"; \"e\" - 1 =&gt; \"d\"\n\ntweakLetters(\"many\", [0, 0, 0, -1]) ➞ \"manx\"\n\ntweakLetters(\"rhino\", [1, 1, 1, 1, 1]) ➞ \"sijop\"</code></pre><h3><span>Notes</span></h3><p><span>Don't worry about capital letters.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(tweakLetters(\"apple\", [0, 1, -1, 0, -1]), \"aqold\")",
			"Test.assertEquals(tweakLetters(\"many\", [0, 0, 0, -1]), \"manx\")",
			"Test.assertEquals(tweakLetters(\"rhino\", [1, 1, 1, 1, 1]), \"sijop\")",
			"Test.assertEquals(tweakLetters('xyz', [1, 1, 1]), 'yza')",
			"Test.assertEquals(tweakLetters('abc', [-1, -1, -1]), 'zab')"
		],
		"starterFn": [
			"1\nfunction tweakLetters(str, arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9bLHfb3wB8QCvtqWK"
	},
	{
		"title": "Sort Words by a String",
		"description": "<p><span>Create a function that sorts words by a given string.</span></p><h3><span>Examples</span></h3><pre><code>sortByString([\"apple\", \"banana\", \"cherry\", \"date\"], \"dbca\")\n➞ [\"date\", \"banana\", \"cherry\", \"apple\"]\n\nsortByString([\"small\", \"big\", \"medium\"], \"sazymtb\")\n➞ [\"small\", \"medium\", \"big\"]\n\nsortByString([\"poof\", \"floof\", \"loop\"], \"flatp\")\n➞ [\"floof\", \"loop\", \"poof\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>The string may have excess letters (see examples #1 and #2).</span></li><li><span>There will be unique starting letters in each array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(sortByString([\"apple\", \"banana\", \"cherry\", \"date\"], \"dbca\"),",
			"[\"date\", \"banana\", \"cherry\", \"apple\"])",
			"​",
			"Test.assertSimilar(sortByString([\"small\", \"big\", \"medium\"], \"sazymtb\"),",
			"[\"small\", \"medium\", \"big\"])",
			"​",
			"Test.assertSimilar(sortByString([\"poof\", \"floof\", \"loop\"], \"flatp\"),",
			"[\"floof\", \"loop\", \"poof\"])",
			"​",
			"Test.assertSimilar(sortByString([\"yellow\", \"phone\", \"book\"], \"abcdpy\"),",
			"[\"book\", \"phone\", \"yellow\"])"
		],
		"starterFn": [
			"1\nfunction sortByString(arr, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ScrNCxkxyWEBAvfck"
	},
	{
		"title": "Stems and Leaves",
		"description": "<p><span>In statistics a stem-and-leaf plot is a graphical representation of values distribution in a dataset,  usually implemented for a small set of values. In this exercise we'll build a simple plot for positive integer values following the steps below.</span></p><p><span>1) You must separate each value in two parts: the </span><strong><span>stem, equal to all number digits but last</span></strong><span> and the </span><strong><span>leaf, equal to the last digit</span></strong><span>. For numbers in range 0-9 you must add  a \"0\" at the start.\n</span><em><span>Examples</span></em><span>:</span></p><ul><li><span>4872: stem is \"487\", leaf is \"2\".</span></li><li><span>429: stem is \"42\",  leaf is \"9\".</span></li><li><span>85: stem is \"8\", leaf is \"5\".</span></li><li><span>1: stem is \"0\", leaf is \"1\".</span></li></ul><p><span>2) Insert in the plot the </span><strong><span>stems without duplicate values in ascending order</span></strong><span>, and for every stem </span><strong><span>every proper leaf in ascending order</span></strong><span>.\n</span><em><span>Examples for a dataset containing 22, 22, 13, 11, 11</span></em><span>:</span></p><ul><li><span>Stems are 1 and 2 (no duplicates in ascending order).</span></li><li><span>Leaves for stem 1 are 1, 1 and 3 (every leaf in ascending order), leaves for stem 2 are 2 and 2.</span></li></ul><p><span>Given an array of positive integers you must return the stem-and-leaf plot as an array of strings, one for each stem: strings have to be formatted with </span><strong><span>stem and leaves separated by \" I \" (spaces included)</span></strong><span> and </span><strong><span>leaves in ascending order separated by a space between them</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>stemPlot([111, 11, 1]) ➞ [\"0 | 1\", \"1 | 1\", \"11 | 1\"]\n\nstemPlot([4, 8, 75]) ➞ [\"0 | 4 8\", \"7 | 5\"]\n\nstemPlot([22, 22, 38, 22, 19]) ➞ [\"1 | 9\", \"2 | 2 2 2\", \"3 | 8\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Every given array is valid, containing only positive integers (no exceptions to handle).</span></li><li><span>Pay attention to leading and trailing zeroes.</span></li><li><span>You can find more info about stem-and-leaf plots in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"formatting",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(stemPlot([111, 11, 1]), [\"0 | 1\", \"1 | 1\", \"11 | 1\"], \"Example #1\")",
			"Test.assertSimilar(stemPlot([4, 8, 75]), [\"0 | 4 8\", \"7 | 5\"], \"Example #2\")",
			"Test.assertSimilar(stemPlot([22, 22, 38, 22, 19]), [\"1 | 9\", \"2 | 2 2 2\", \"3 | 8\"], \"Example #3\")",
			"Test.assertSimilar(stemPlot([1062, 310, 89, 9, 16]), [\"0 | 9\", \"1 | 6\", \"8 | 9\", \"31 | 0\", \"106 | 2\"])",
			"Test.assertSimilar(stemPlot([48, 125, 48, 48, 20, 21, 22, 125, 48, 20]), [\"2 | 0 0 1 2\", \"4 | 8 8 8 8\", \"12 | 5 5\"])",
			"Test.assertSimilar(stemPlot([36, 12, 2, 4, 1062, 1062, 2, 36, 234]), [\"0 | 2 2 4\", \"1 | 2\", \"3 | 6 6\", \"23 | 4\", \"106 | 2 2\"])",
			"Test.assertSimilar(stemPlot([555, 555, 555, 555]), [\"55 | 5 5 5 5\"])",
			"Test.assertSimilar(stemPlot([10, 20, 30, 1, 2, 3]), [\"0 | 1 2 3\", \"1 | 0\", \"2 | 0\", \"3 | 0\"])"
		],
		"starterFn": [
			"1\nfunction stemPlot(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZAGhB6otwk54JB8FA"
	},
	{
		"title": "Find Repeating",
		"description": "<p><span>Create a function that accepts a string and groups repeated values. The groups should have the following structure: </span><code>[[value, first_index, last_index, times_repeated],  ...,  [value, first_index, last_index, times_repeated]]</code><span>.</span></p><ul><li><strong><span>value:</span></strong><span> Character being assessed.</span></li><li><strong><span>first_index:</span></strong><span> Index of characters first appearance.</span></li><li><strong><span>last_index:</span></strong><span> Index of characters last appearance.</span></li><li><strong><span>times_repeated:</span></strong><span> Number of consecutive times character repeats.</span></li></ul><h3><span>Examples</span></h3><pre><code>findRepeating(\"a\") ➞ [[\"a\", 0, 0, 1]]\n\nfindRepeating(\"aabbb\") ➞ [[\"a\", 0, 1, 2], [\"b\", 2, 4, 3]]\n\nfindRepeating(\"1337\") ➞ [[\"1\", 0, 0, 1], [\"3\", 1, 2, 2], [\"7\", 3, 3, 1]]\n\nfindRepeating(\"aabbbaabbb\") ➞ [[\"a\", 0, 1, 2], [\"b\", 2, 4, 3], [\"a\", 5, 6, 2], [\"b\", 7, 9, 3]]</code></pre><h3><span>Notes</span></h3><ul><li><span>An empty string should return an empty array: </span><code>\"\" ➞ []</code></li><li><span>Non-repeated values should start and end on the same index.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(findRepeating(''), [])",
			"Test.assertSimilar(findRepeating('a'), [['a', 0, 0, 1]])",
			"Test.assertSimilar(findRepeating('1337'), [['1', 0, 0, 1], ['3', 1, 2, 2], ['7', 3, 3, 1]])",
			"Test.assertSimilar(findRepeating('aabbb'), [['a', 0, 1, 2], ['b', 2, 4, 3]])",
			"Test.assertSimilar(findRepeating('addressee'), [['a', 0, 0, 1], ['d', 1, 2, 2], ['r', 3, 3, 1], ['e', 4, 4, 1], ['s', 5, 6, 2], ['e', 7, 8, 2]])",
			"Test.assertSimilar(findRepeating('aabbbaabbb'), [['a', 0, 1, 2], ['b', 2, 4, 3], ['a', 5, 6, 2], ['b', 7, 9, 3]])",
			"Test.assertSimilar(findRepeating('1111222233334444'), [['1', 0, 3, 4], ['2', 4, 7, 4], ['3', 8, 11, 4], ['4', 12, 15, 4]])",
			"Test.assertSimilar(findRepeating('1000000000000066600000000000001'), [['1', 0, 0, 1], ['0', 1, 13, 13], ['6', 14, 16, 3], ['0', 17, 29, 13], ['1', 30, 30, 1]])",
			"​"
		],
		"starterFn": [
			"1\nfunction findRepeating(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AtNMAGcwKDad5rC69"
	},
	{
		"title": "Letter Distance",
		"description": "<p><span>Given two words, the </span><strong><span>letter distance</span></strong><span> is calculated by taking the absolute value of the difference in character codes and summing up the difference.</span></p><p><span>If one word is longer than another, add the difference in lengths towards the score.</span></p><p><span>To illustrate:</span></p><pre><code>letterDistance(\"house\", \"fly\") = dist(\"h\", \"f\") + dist(\"o\", \"l\") + dist(\"u\", \"y\") + dist(house.length, fly.length)\n\n= |104 - 102| + |111 - 108| + |117 - 121| + |5 - 3|\n= 2 + 3 + 4 + 2\n= 11</code></pre><h3><span>Examples</span></h3><pre><code>letterDistance(\"sharp\", \"sharq\") ➞ 1\n\nletterDistance(\"abcde\", \"Abcde\") ➞ 32\n\nletterDistance(\"abcde\", \"bcdef\") ➞ 5</code></pre><h3><span>Notes</span></h3><ul><li><span>Always start comparing the two strings from their first letter.</span></li><li><span>Excess letters are not counted towards distance.</span></li><li><span>Capital letters are included.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(letterDistance(\"house\", \"fly\"), 11)",
			"Test.assertEquals(letterDistance(\"sharp\", \"sharq\"), 1)",
			"Test.assertEquals(letterDistance(\"abcde\", \"bcdef\"), 5)",
			"Test.assertEquals(letterDistance(\"abcde\", \"a\"), 4)",
			"Test.assertEquals(letterDistance(\"abcde\", \"e\"), 8)",
			"Test.assertEquals(letterDistance(\"abcde\", \"Abcde\"), 32)",
			"Test.assertEquals(letterDistance(\"abcde\", \"A\"), 36)",
			"Test.assertEquals(letterDistance(\"very\", \"fragile\"), 67)"
		],
		"starterFn": [
			"1\nfunction letterDistance(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SgmaKy8e8X7ibaGYM"
	},
	{
		"title": "Promises IX: Composition Introduction",
		"description": "<p><span>The </span><strong><span>built-in</span></strong><span> javascript Promise object has several methods you can use to compose your </span><strong><span>asynchronous</span></strong><span> operations.  The </span><code>Promise.resolve()</code><span> function takes either a value or a promise.</span></p><pre><code>var original = Promise.resolve(33)\nvar cast = Promise.resolve(original)\ncast.then(function(value) {\n  console.log('value: ' + value)\n})</code></pre><p><span>So what is going on here?</span></p><ol><li><strong><span>original</span></strong><span> is assigned a promise that is passed the value 33.</span></li><li><strong><span>cast</span></strong><span> is passed the promise original.</span></li><li><span>The </span><strong><span>then</span></strong><span> function is passed original and </span><strong><span>becomes</span></strong><span> the then function for original.</span></li><li><span>Then it takes original's value(33) and logs it to the console.</span></li></ol><p><span>One other thing </span><code>Promise.resolve()</code><span> does is that it will </span><strong><span>cast</span></strong><span> anything that might be a promise(ie. thenables) to a native Javascript Promise.  This is generally the use case for it.</span></p><p><span>Use a </span><strong><span>Promise method</span></strong><span> to turn the </span><strong><span>thenable</span></strong><span> object into a </span><strong><span>native</span></strong><span> promise and assign it to the </span><strong><span>promise</span></strong><span> variable. Assign the </span><strong><span>fulfilled</span></strong><span> value to the </span><strong><span>result</span></strong><span> variable.</span></p><h3><span>Notes</span></h3><p><span>Check out the </span><strong><span>Resources</span></strong><span> tab if you get stuck.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"functional_programming"
		],
		"tests": [
			"function promiseState(p) {",
			"  const t = {};",
			"  return Promise.race([p, t]).then(v => (v === t)? \"pending\" : \"fulfilled\", () => \"rejected\");",
			"}",
			"​",
			"Test.assertEquals(result, \"\", \"You are only allowed to reassign 'result' in the onFufilled handler.\")",
			"promiseState(promise).then(state => Test.assertEquals(state, \"pending\"))",
			"promise.then(x => Test.assertEquals(x, \"edabit!\")).then(() => Test.assertEquals(result, \"edabit!\"))"
		],
		"starterFn": [
			"1\nvar result = \"\"",
			"2\nvar thenable = { then: function(onFulfill, onReject) { onFulfill(\"edabit!\") }}",
			"3\nvar promise = "
		],
		"url": "https://edabit.com/challenge/Z5EwpzWB37HpbvmsG"
	},
	{
		"title": "Seven Ate Nine",
		"description": "<p><span>A number can </span><strong><span>eat</span></strong><span> the number to the right of it if it's </span><strong><span>smaller</span></strong><span> than itself. After eating that number, it becomes the sum of itself and that number. Your job is to create a function that returns the final array after the leftmost element has finished \"eating\".</span></p><h3><span>Examples</span></h3><pre><code>[5, 3, 7] ➞ [8, 7] ➞ [15]\n\n// 5 eats 3 to become 8\n// 8 eats 7 to become 15</code></pre><pre><code>[5, 3, 9] ➞ [8, 9]\n\n// 5 eats 3 to become 8\n// 8 cannot eat 9, since 8 &lt; 9</code></pre><pre><code>nomNom([1, 2, 3]) ➞ [1, 2, 3]\n\nnomNom([2, 1, 3]) ➞ [3, 3]\n\nnomNom([8, 5, 9]) ➞ [22]</code></pre><h3><span>Notes</span></h3><p><span>Test input contains only an array of numbers.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertSimilar(nomNom([1, 2, 3]), [1, 2, 3], \"1 cannot eat 2, so numbers remain uneaten.\")",
			"Test.assertSimilar(nomNom([2, 1, 3]), [3, 3], \"2 can eat 1 to become 3. 3 cannot eat 3.\")",
			"Test.assertSimilar(nomNom([8, 5, 9]), [22], \"8 eats 5 to become 13, 13 eats 9 to become 22.\")",
			"Test.assertSimilar(nomNom([5, 3, 7]), [15], \"5 eats 3 to become 8. 8 eats 7 to become 15.\")",
			"Test.assertSimilar(nomNom([5, 3, 9]), [8, 9], \"5 eats 3 to become 8. 8 cannot eat 9.\")",
			"Test.assertSimilar(nomNom([6, 5, 6, 100]), [17, 100], \"6 eats 5 to become 11. 11 eats 7 to become 17. 17 cannot eat 100.\")"
		],
		"starterFn": [
			"1\nfunction nomNom(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dHAk8zPwacSev6Hmv"
	},
	{
		"title": "Extend the Array Prototype with a `compact()` Method",
		"description": "<p><span>Extend the global Array object to have an instance method named </span><code>compact()</code><span> which returns a copy of the array without duplicate entries, and falsey values (with the exception of </span><code>0</code><span> and </span><code>false</code><span>).</span></p><h3><span>Examples</span></h3><pre><code>[1, 2, 2, 3, 4, 4, 5].compact() ➞ [1, 2, 3, 4, 5]\n\n[true, false, true, false].compact() ➞ [true, false]\n\n[0, \"hello\", undefined, 17.2].compact() ➞ [0, \"hello\", 17.2]\n\n[null, 0, undefined, 1, \"h\", \"\", 892].compact() ➞ [0, 1, \"h\", 892]</code></pre><h3><span>Notes</span></h3><p><span>This does not need to consider / work with objects, arrays, or non-primitive types as entries. Bonus if it does though!</span></p>",
		"publishedBy": "Cory Crook",
		"publishedByUrl": "https://edabit.com/user/fMGp72XG7rQYcdFqt",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar([9, 9, 9, 8, 0, undefined].compact(), [9, 8, 0], \"Test #1\")",
			"Test.assertSimilar([\"\", \"hello\", null, null, \"hello\"].compact(), [\"hello\"], \"Test #2\")",
			"Test.assertSimilar([1, 2, 2, 3, null, 0, \"\", undefined, \"another\"].compact(), [1, 2, 3, 0, \"another\"], \"Test #3\")",
			"Test.assertSimilar([true, true, false, 0, null].compact(), [true, false, 0], \"Test #4\")"
		],
		"starterFn": [
			"1\nArray.prototype.compact = function() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SNornDmdQ7ZJngoTn"
	},
	{
		"title": "Complete Prime Factorization",
		"description": "<p><span>Create a function that decomposes an integer into its prime factors, ordered from smallest to largest.</span></p><p><span>For instance:</span></p><pre><code>completeFactorization(24) = [2, 2, 2, 3]\n// Since 24 = 8 x 3 = 2^3 x 3 = 2 x 2 x 2 x 3</code></pre><h3><span>Examples</span></h3><pre><code>completeFactorization(10) ➞ [2, 5]\n\ncompleteFactorization(9) ➞ [3, 3]\n\ncompleteFactorization(72) ➞ [2, 2, 2, 3, 3]</code></pre><h3><span>Notes</span></h3><p><code>1</code><span> is not considered a prime number, so omit it in your final array of prime factors.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(completeFactorization(30), [2, 3, 5])",
			"Test.assertSimilar(completeFactorization(12), [2, 2, 3])",
			"Test.assertSimilar(completeFactorization(15), [3, 5])",
			"Test.assertSimilar(completeFactorization(48), [2, 2, 2, 2, 3])",
			"Test.assertSimilar(completeFactorization(311), [311])",
			"Test.assertSimilar(completeFactorization(17), [17])",
			"Test.assertSimilar(completeFactorization(44), [2, 2, 11])",
			"Test.assertSimilar(completeFactorization(10), [2, 5])",
			"Test.assertSimilar(completeFactorization(9), [3, 3])",
			"Test.assertSimilar(completeFactorization(72), [2, 2, 2, 3, 3])"
		],
		"starterFn": [
			"1\nfunction completeFactorization(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/a78cwfLkCepCmCkQ2"
	},
	{
		"title": "Correct Inequality Signs",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if a given inequality expression is correct and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>correctSigns(\"3 &lt; 7 &lt; 11\") ➞ true\n\ncorrectSigns(\"13 &gt; 44 &gt; 33 &gt; 1\") ➞ false\n\ncorrectSigns(\"1 &lt; 2 &lt; 6 &lt; 9 &gt; 3\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(correctSigns(\"3 < 7 < 11\"), true)",
			"Test.assertEquals(correctSigns(\"13 > 44 > 33 > 1\"), false)",
			"Test.assertEquals(correctSigns(\"1 < 2 < 6 < 9 > 3\"), true)",
			"Test.assertEquals(correctSigns(\"4 > 3 > 2 > 1\"), true)",
			"Test.assertEquals(correctSigns(\"5 < 7 > 1\"), true)",
			"Test.assertEquals(correctSigns(\"5 > 7 > 1\"), false)",
			"Test.assertEquals(correctSigns(\"9 < 9\"), false)"
		],
		"starterFn": [
			"1\nfunction correctSigns(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Y2H2aDQhfeE9bHg6m"
	},
	{
		"title": "Smallest Transform",
		"description": "<p><span>Create a function that returns the smallest number of changes it takes to transform one number into one with identical digits. A step is incrementing or decrementing a digit by one.</span></p><h3><span>Examples</span></h3><pre><code>smallestTransform(399) ➞ 6\n// 399 transformed to 999 in 6 steps.\n\nsmallestTransform(1234) ➞ 4\n// 1234 can be transformed to either 2222 or 3333 using 4 steps.\n\nsmallestTransform(153) ➞ 4\n\nsmallestTransform(33338) ➞ 5\n\nsmallestTransform(7777) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>If a number already has identical digits, return </span><code>0</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"scope"
		],
		"tests": [
			"Test.assertEquals(smallestTransform(399), 6)",
			"Test.assertEquals(smallestTransform(1234), 4)",
			"Test.assertEquals(smallestTransform(153), 4)",
			"Test.assertEquals(smallestTransform(33338), 5)",
			"Test.assertEquals(smallestTransform(7777), 0)",
			"Test.assertEquals(smallestTransform(977), 2)",
			"Test.assertEquals(smallestTransform(589), 4)"
		],
		"starterFn": [
			"1\nfunction smallestTransform(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ejzLBYvAtAiKk9HnP"
	},
	{
		"title": "Snail Crawl out of the Bucket",
		"description": "<p><span>A snail fell into a bucket and wanted to crawl out. Assuming we already know the snail can climb 5cm per minute, the snail can crawl for 30 minutes continuously and then need to rest for 10 minutes. When it is resting it will slide down 30cm.</span></p><p><span>How many minutes will it take for a snail to crawl out at different depths? Create a function that takes a number of the bucket depth (the unit is cm) as an argument and returns the minutes.</span></p><pre><code>if depth = 270\nthe snail crawling process\nprocess: (150 - 30) +  150\nminutes: (30+10) + 150 / 5\nit will take 70 minutes\nthe last 150cm, the snail doesn't need a rest</code></pre><h3><span>Examples</span></h3><pre><code>cal(31) ➞ 7\n\ncal(150) ➞ 30\n\ncal(200) ➞ 56</code></pre><h3><span>Notes</span></h3><ul><li><span>The depth is a positive integer.</span></li><li><span>If the time is less than one minute it still counts as one minute.</span></li></ul>",
		"publishedBy": "xiongerya",
		"publishedByUrl": "https://edabit.com/user/EWn8w8P3nNh7knatY",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math"
		],
		"tests": [
			"Test.assertEquals(cal(31), 7, \"Examples 1\")",
			"Test.assertEquals(cal(150), 30, \"Examples 2\")",
			"Test.assertEquals(cal(200), 56, \"Examples 3\")",
			"Test.assertEquals(cal(15), 3)",
			"Test.assertEquals(cal(151), 47)",
			"Test.assertEquals(cal(160), 48)",
			"Test.assertEquals(cal(300), 92)"
		],
		"starterFn": [
			"1\nfunction cal(depth) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JDKfDGtFxb92dj4SQ"
	},
	{
		"title": "Mystery Challenge",
		"description": "<p><span>Write a function that takes an integer </span><code>n</code><span> and turns it into the ouput. No further instructions.</span></p><h3><span>Examples</span></h3><pre><code>mysteryFunc(521) ➞ \"151211\"\n\nmysteryFunc(5211255) ➞ \"1512211225\"\n\nmysteryFunc(513515) ➞ \"151113151115\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The result has to do with counting something.</span></li><li><span>Check the </span><strong><span>Tests</span></strong><span> tab for some extra hints.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"bugs",
			"loops"
		],
		"tests": [
			"// count digits, and then for each digit, add \"the amount of the digit ",
			"// in a row (and the) digit\"",
			"// 15 = 1*1 1*5(1115)",
			"​",
			"Test.assertEquals(mysteryFunc(15), \"1115\")",
			"Test.assertEquals(mysteryFunc(15212), \"1115121112\")",
			"Test.assertEquals(mysteryFunc(111111422), \"611422\")",
			"Test.assertEquals(mysteryFunc(1), \"11\")",
			"Test.assertEquals(mysteryFunc(513515), \"151113151115\")",
			"Test.assertEquals(mysteryFunc(666), \"36\")",
			"Test.assertEquals(mysteryFunc(69), \"1619\")"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rbop9mHNAdCLwHK6n"
	},
	{
		"title": "Math Marking",
		"description": "<p><span>Given an array of </span><em><span>math equations</span></em><span> (given as strings), return the </span><strong><span>percentage of correct answers</span></strong><span> </span><em><span>as a string</span></em><span>. Round to the nearest </span><em><span>whole number</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>markMaths([\"2+2=4\", \"3+2=5\", \"10-3=3\", \"5+5=10\"]) ➞ \"75%\"\n\nmarkMaths([\"1-2=-2\"]), \"0%\"\n\nmarkMaths([\"2+3=5\", \"4+4=9\", \"3-1=2\"]) ➞ \"67%\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You can expect only </span><em><span>addition</span></em><span> and </span><em><span>subtraction</span></em><span>.</span></li><li><span>Note how there aren't any spaces in any given equation.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(markMaths([\"2+2=4\", \"3+2=5\", \"10-3=3\", \"5+5=10\"]), \"75%\")",
			"Test.assertEquals(markMaths([\"2+3=5\", \"4+4=9\", \"3-1=2\"]), \"67%\")",
			"Test.assertEquals(markMaths([\"2+1=1\", \"2-1=2\", \"1+2=-2\", \"2-1=0\", \"1-2=0\", \"2+1=2\", \"2-1=1\", \"1-2=0\", \"2+1=1\", \"1+2=-1\", \"1+2=1\", \"1+2=-1\", \"1-2=-2\", \"1-1=2\", \"1+2=-1\", \"1-1=2\", \"2-1=0\", \"1-2=-2\", \"2+1=-2\", \"1-1=-1\", \"1-1=1\", \"1+2=1\", \"1-1=2\"]), \"4%\")",
			"Test.assertEquals(markMaths([\"1+1=-1\", \"2+1=-2\", \"2+1=-2\", \"1-1=-2\", \"1-2=1\", \"1-1=-1\", \"2-2=-2\", \"2+2=1\", \"2+1=-2\", \"1-2=0\", \"2+1=-2\", \"2-1=1\", \"2+2=-1\", \"1-2=-1\", \"1-2=0\", \"1-2=2\"]), \"12%\")",
			"Test.assertEquals(markMaths([\"1+2=0\", \"2+2=-2\", \"1+2=1\", \"1-1=-2\", \"2+2=-2\", \"1+1=-1\", \"1+2=-1\", \"1-2=0\", \"1+1=1\", \"1-1=1\"]), \"0%\")",
			"Test.assertEquals(markMaths([\"2-2=1\", \"1-2=-2\", \"1+1=1\", \"1+1=-1\", \"2-2=2\", \"1-2=-2\", \"1+1=-1\", \"2+2=2\"]), \"0%\")",
			"Test.assertEquals(markMaths([\"1-2=1\", \"1-1=0\", \"1-1=1\", \"1-2=1\", \"1-1=2\", \"2-2=-2\", \"1+1=-2\", \"2+1=-2\", \"2+1=-1\", \"2+2=-1\", \"1-1=1\", \"1-1=-1\", \"2-1=2\", \"1-1=2\", \"1-1=-2\", \"2-1=-2\", \"1-1=-1\", \"1+1=-2\", \"1-1=0\", \"1+2=2\", \"2+2=0\", \"1+2=-2\", \"2-1=2\", \"1+2=-1\", \"2+2=-2\", \"2+2=0\", \"2+1=0\", \"1-1=-1\", \"2-2=2\", \"1+2=2\", \"2-1=-1\", \"2+2=1\", \"1-1=-1\", \"2-2=-1\", \"1-2=2\", \"1-2=2\", \"2+2=-1\", \"2-2=0\", \"1+1=2\", \"2+1=0\", \"1+2=0\", \"1+1=1\", \"2+2=-1\", \"1-2=0\", \"1-2=-1\", \"2-1=1\"]), \"13%\")",
			"Test.assertEquals(markMaths([\"2+2=1\", \"2-1=-2\", \"1-1=2\", \"1+2=-1\", \"2-1=-2\", \"1+1=1\", \"2-1=-2\", \"2+1=1\", \"2-1=-1\", \"1-2=2\", \"2+2=2\", \"2-1=0\", \"1-2=1\", \"2+2=0\", \"1-2=-1\", \"2-1=-2\", \"2-1=2\", \"2+2=2\", \"2-1=-1\", \"2-1=-1\", \"1-1=2\", \"1+2=-2\", \"2-2=0\", \"2-1=-1\", \"2-2=-1\", \"1-1=0\", \"1-2=-2\", \"2-2=2\", \"1+2=-1\", \"1+2=1\", \"1-2=-2\", \"2-1=-2\", \"1-1=-2\", \"1+1=-1\", \"1-2=0\", \"1-1=0\", \"1-2=1\", \"1-1=-2\", \"1+1=1\", \"2+2=-2\", \"2+1=-2\", \"1+1=2\", \"1+2=1\", \"1+2=2\", \"2-1=2\", \"2+1=1\", \"1-2=1\", \"2+1=-1\", \"2+2=-1\", \"2-1=1\", \"2-1=-2\", \"2-1=2\", \"2-1=0\", \"2-1=1\", \"1-1=-1\"]), \"13%\")",
			"Test.assertEquals(markMaths([\"1+1=-2\", \"1+2=1\", \"2-2=0\", \"1-1=0\", \"1-2=-1\", \"2+2=-1\", \"1-2=2\", \"2-1=0\", \"2+1=-2\", \"1-2=2\", \"2+1=0\", \"2-2=-1\"]), \"25%\")",
			"Test.assertEquals(markMaths([\"1-2=2\", \"1+1=-2\", \"1-1=0\", \"2+1=2\", \"1+1=1\", \"2-1=2\", \"1-1=-2\", \"2-1=0\", \"2-2=2\", \"1+2=1\", \"1+2=-1\", \"2+2=2\", \"1+2=0\", \"2+2=2\", \"2+2=-1\", \"2-1=-2\", \"2-1=1\", \"2+1=1\", \"1+1=-1\", \"1-1=2\", \"2-2=0\", \"1-1=0\", \"2-1=2\", \"2-2=0\", \"2-1=0\", \"1-2=1\", \"2+2=1\", \"1-1=-1\", \"2+1=0\", \"2-1=0\", \"1-1=0\", \"2-1=-1\", \"1-2=-2\", \"2-2=-1\", \"2-1=2\", \"1-2=0\", \"2+1=2\", \"2-2=0\", \"2+1=-2\", \"1+1=-1\", \"1+1=-2\"]), \"17%\")",
			"Test.assertEquals(markMaths([\"1-2=-2\", \"1+2=2\", \"2+1=-2\", \"1+1=2\", \"1-2=0\", \"2+1=-1\", \"2+1=1\", \"2+1=0\", \"1+2=1\", \"2-1=-2\", \"2+1=2\", \"1-1=2\", \"2-2=-1\", \"1-2=1\", \"1-2=0\", \"2+2=-2\", \"1-2=-1\", \"2-2=1\", \"1+2=2\", \"2-2=-2\", \"1+1=0\", \"2+1=2\", \"2-2=0\", \"1+2=-1\", \"1+1=-1\", \"1-1=-2\", \"1+1=1\", \"2-2=-1\", \"2+1=0\", \"1-2=0\", \"2+2=0\", \"1-1=2\", \"1+1=1\", \"1+2=1\", \"2+1=-2\", \"2+2=-2\", \"1+2=0\", \"2-2=-2\", \"2-1=0\", \"2+2=1\", \"1-1=2\", \"2+2=1\", \"1-1=0\", \"1-2=-1\", \"1+2=1\", \"2-2=0\", \"1-2=-1\", \"1+1=2\", \"2-2=0\", \"2+2=0\", \"1-1=-1\", \"1+2=0\", \"2-1=1\", \"2-1=2\", \"1+2=0\", \"1-1=0\", \"2-1=0\", \"2+1=0\", \"2-2=1\", \"1+1=1\", \"1-1=-2\", \"1+2=2\", \"2+2=2\", \"2+1=0\", \"2-1=1\"]), \"18%\")",
			"Test.assertEquals(markMaths([\"1-2=-1\", \"1+1=0\", \"2+1=-2\", \"1-1=2\", \"1-2=-2\", \"2-1=-1\", \"1-2=2\", \"1+2=2\", \"1+1=2\", \"2+1=0\", \"2-1=0\", \"2-1=2\", \"2-1=-1\", \"2-1=-2\", \"1-1=-1\", \"1+2=2\", \"1-1=-1\", \"2+1=-2\", \"2+1=0\", \"2+1=1\", \"2+1=2\", \"2-2=1\", \"2+1=2\", \"2-2=1\", \"2+2=2\", \"1+2=1\", \"1+1=-1\", \"2+2=1\", \"1+1=0\", \"2+1=-1\", \"2+2=2\", \"2+2=-2\", \"1+2=1\", \"2+2=1\", \"1+2=-2\", \"2-1=-1\", \"1-1=-1\", \"2-1=1\", \"2+1=1\", \"1-1=1\", \"2-1=1\", \"2-2=1\", \"2-1=1\", \"1-2=-2\", \"1-1=0\", \"1-2=-2\", \"2+1=-2\", \"2-1=-2\", \"1-1=-2\", \"2-2=2\", \"1+1=2\", \"1-1=-2\", \"2+2=-2\", \"2+1=1\", \"1+2=-1\", \"1+2=2\", \"2-1=0\", \"1+1=-2\", \"1+1=0\", \"2-2=0\", \"1-1=0\", \"2+1=-2\", \"2-2=0\", \"1-1=2\", \"1+2=0\"]), \"15%\")",
			"Test.assertEquals(markMaths([\"1+2=0\", \"1+1=2\", \"2-1=-2\", \"1-1=-1\", \"1-1=-1\", \"2-2=0\", \"2+1=0\", \"2-2=2\", \"1-1=1\", \"1+1=-1\", \"2+1=1\", \"2+2=2\", \"1+1=0\", \"1-1=0\", \"2-2=2\", \"1+1=0\", \"1-2=1\", \"1+1=-1\", \"1-1=1\", \"1-1=0\", \"2-2=-2\", \"2+2=-1\", \"2-1=-1\", \"1-2=1\", \"1-1=-1\", \"1+2=-1\", \"2-1=2\", \"2-1=-1\", \"2-1=-2\", \"1+1=-2\", \"1-2=0\", \"1+1=1\", \"1+2=2\", \"1+2=1\", \"1-1=-1\", \"1-2=2\", \"1+1=1\", \"1+1=1\", \"2-1=-2\", \"2+1=-2\", \"1+2=2\", \"2+2=1\", \"1-2=2\", \"1+2=2\", \"2+1=-1\"]), \"9%\")",
			"Test.assertEquals(markMaths([\"2-2=-2\", \"1-1=2\", \"1-1=1\", \"2-1=0\", \"1+1=-1\", \"2-1=-1\", \"1+1=1\", \"1-1=-1\", \"1+1=0\", \"1-1=1\", \"1-2=0\", \"2+2=-2\", \"2+2=-2\", \"1+1=1\", \"2-2=0\", \"2-2=0\", \"2+2=-1\", \"1-1=2\", \"2-2=2\", \"1+1=1\", \"1-1=-2\", \"2+1=-1\", \"1+1=-1\", \"2+1=1\", \"1+1=-1\", \"1+2=-1\", \"2-1=0\", \"1-1=2\"]), \"7%\")",
			"Test.assertEquals(markMaths([\"1-1=2\", \"2+2=0\", \"1-1=1\", \"2+1=1\", \"2+1=2\", \"2-1=-1\", \"1-2=-1\", \"1-1=-1\", \"1+2=0\", \"2-1=-2\", \"1-1=1\", \"1-1=2\", \"2-1=2\", \"1-1=2\", \"1+2=-1\", \"2-1=0\", \"2+2=-2\", \"1+2=2\", \"2+2=-2\", \"1-2=1\", \"1-1=-1\", \"2-1=0\", \"2-1=-2\", \"1+1=-1\", \"1+2=-1\", \"2-2=1\", \"1+2=0\", \"2-2=-1\", \"2-2=-2\", \"2+1=1\", \"2+2=-1\", \"1+2=-2\", \"2+2=-1\", \"2-2=-1\", \"2+2=1\", \"2-1=-1\", \"1-2=1\", \"1+2=1\", \"1-2=0\", \"1-2=1\", \"1-2=0\", \"2-2=2\", \"2+2=1\", \"2-1=2\", \"1-2=-1\", \"1-2=2\", \"2-1=-1\", \"2+1=-1\", \"2-2=1\", \"1+1=-1\", \"1+1=-1\", \"2-2=2\", \"1+2=-2\", \"1-1=1\", \"2+2=2\", \"2-1=-2\", \"1+2=2\", \"1-1=0\", \"1+1=-1\"]), \"5%\")",
			"Test.assertEquals(markMaths([\"2-2=1\", \"2+2=2\", \"1+1=0\", \"1+1=0\", \"1-2=-2\", \"2-1=-2\", \"1+1=-2\", \"1+1=-1\", \"1-2=1\", \"2-1=1\", \"2-2=-1\", \"1-2=-2\", \"1+2=2\", \"2-1=-1\", \"1-1=0\", \"1+1=1\", \"1+2=2\", \"1+2=-2\", \"2+2=-2\", \"1+2=0\", \"1-2=-1\", \"1+2=-1\", \"1-1=0\", \"1+2=1\", \"1+1=2\", \"1+1=-1\", \"1+2=2\", \"1+1=-2\", \"1-2=2\", \"2+2=-2\", \"2+2=2\", \"2+2=0\", \"1-1=0\"]), \"18%\")",
			"Test.assertEquals(markMaths([\"2+2=-1\", \"2+2=0\", \"2-2=-1\", \"2+2=2\", \"2+1=1\", \"2-2=-1\", \"2+2=-2\", \"2-2=1\", \"2-2=2\", \"2-2=-1\", \"2-1=1\", \"1-1=2\", \"2-1=-2\", \"1+2=1\", \"2-2=-2\", \"1+2=2\", \"1+2=-2\", \"1-2=-1\", \"2+1=-1\", \"1-1=1\", \"2+2=1\", \"1-1=1\", \"1-1=0\", \"2-1=0\", \"1-2=1\", \"1+1=-2\", \"1-1=-2\", \"2-2=0\", \"2+1=0\", \"1+1=-1\", \"1+1=-2\", \"1-2=-2\", \"1+2=1\", \"2+1=0\", \"2-1=0\", \"2-1=2\", \"2+2=1\", \"2-2=-1\", \"2+1=0\", \"1+1=-1\", \"2-2=0\", \"1-1=1\", \"2+1=-1\", \"1+1=2\", \"1-2=-2\", \"2-2=1\", \"2-1=-2\", \"1+2=2\", \"2-2=1\", \"2+1=0\", \"1+1=-1\", \"2-1=1\"]), \"13%\")",
			"Test.assertEquals(markMaths([\"2-2=-2\", \"2+2=-1\", \"1+1=-2\", \"1-2=-1\", \"1-2=-1\", \"2+2=-2\", \"1-2=2\", \"2+1=-1\", \"1-1=0\", \"1+2=-1\", \"2-2=0\", \"1+1=2\", \"1+1=1\", \"2-1=-1\", \"1+2=0\", \"2-1=-1\", \"1+2=-1\", \"1-2=-2\", \"1+1=-1\", \"2-2=2\", \"1-1=0\", \"1-1=2\", \"1-2=1\", \"1-2=0\", \"1-2=-2\", \"2+2=2\", \"1+2=1\", \"1+1=-1\", \"1-1=0\", \"2-1=1\", \"2-2=1\", \"2-2=1\", \"2+2=1\", \"2+2=-1\", \"1-1=2\", \"1-1=-2\", \"1-2=2\", \"1+2=0\", \"2-2=2\", \"2+2=-1\", \"1-2=-2\", \"2-2=-2\", \"2+1=1\", \"1-2=-2\", \"2-2=0\", \"2+2=0\", \"1-1=2\", \"2-2=-2\", \"2-1=-2\", \"2+1=2\", \"2-1=-1\", \"1-1=0\", \"1-2=-2\", \"2-1=0\", \"2-1=0\", \"1-1=2\", \"1+1=-1\", \"1-2=1\", \"1-1=-1\", \"1-1=-2\", \"2+2=-2\", \"2+2=0\", \"1+2=1\", \"1+2=0\", \"2+2=0\", \"1-1=-2\", \"2-2=-1\", \"2+2=1\", \"1+1=0\", \"2-1=2\"]), \"14%\")",
			"Test.assertEquals(markMaths([\"1-1=2\", \"2-1=2\", \"2-2=-2\", \"1-1=-2\", \"2-2=1\", \"2+1=-1\", \"1+2=-1\", \"1+1=0\", \"2-2=-1\", \"1-1=-2\", \"1-2=-1\", \"1+2=-2\", \"2-1=-1\", \"2-1=0\", \"2+1=2\", \"1-1=-1\", \"2-1=-2\", \"2-1=1\", \"2-2=-1\", \"1-2=0\", \"1+2=-1\", \"2+1=2\"]), \"9%\")",
			"Test.assertEquals(markMaths([\"1-1=-1\", \"1-2=-2\", \"1-2=0\", \"2-2=-1\", \"2+1=0\", \"2+2=0\", \"2+1=-1\", \"2-1=0\", \"1+1=0\", \"2-1=2\", \"2-1=2\", \"1-1=-2\", \"2-1=-2\", \"2+2=-1\", \"2+1=2\", \"2-2=-1\", \"2+2=-2\", \"2+1=-1\", \"2+2=2\", \"2-1=2\", \"1+2=1\", \"2+1=1\", \"1+2=2\", \"1+1=2\", \"2+1=-2\", \"1-1=1\", \"2+2=0\"]), \"4%\")",
			"Test.assertEquals(markMaths([\"1-1=2\", \"1-2=-1\", \"1-1=1\", \"1+2=-1\", \"1-2=-1\", \"2+1=1\", \"2-1=-1\", \"1-1=-2\", \"2+1=-2\", \"2-1=1\", \"2+2=1\", \"2-1=-2\", \"2-2=1\"]), \"23%\")",
			"Test.assertEquals(markMaths([\"1+2=2\", \"1+2=1\", \"1-1=2\", \"1+1=-2\", \"2+1=-1\", \"2-1=0\", \"2-1=1\", \"1+1=2\", \"2-2=1\", \"2-1=0\", \"2+1=-1\", \"2+2=-2\", \"2-2=2\", \"2-2=0\", \"1+1=1\", \"1-1=-2\", \"1-2=1\", \"2+2=-1\", \"2+2=-2\", \"2-2=2\", \"1-2=2\", \"2+1=0\", \"2-1=-1\", \"1-2=0\", \"2-2=0\", \"1+2=-1\", \"1-2=2\", \"1+1=1\", \"2-1=-1\"]), \"14%\")",
			"Test.assertEquals(markMaths([\"2-2=2\", \"2+2=-1\", \"2-1=0\", \"1+2=2\", \"1+2=2\", \"2+1=2\", \"2+2=2\", \"2+2=2\", \"1-1=1\", \"2-2=0\", \"1+1=1\", \"2-2=1\", \"2+2=2\", \"2-2=1\", \"2-2=-2\", \"2-1=-1\", \"1-2=1\", \"1-2=1\", \"1-2=0\", \"2+1=2\", \"2-1=0\", \"2+1=-1\", \"2+1=-1\", \"2-2=2\", \"1+2=0\", \"2-2=2\", \"2-1=-2\", \"2+2=0\", \"2-2=-1\", \"2-2=0\", \"2+1=-2\", \"1+2=2\", \"1-2=-1\", \"1+2=0\"]), \"9%\")",
			"Test.assertEquals(markMaths([\"1+1=2\", \"1-1=1\", \"1-2=-1\", \"2-1=-1\", \"2+1=2\", \"2-1=-2\", \"1-1=-1\", \"2+1=0\", \"2+1=1\", \"2+2=1\", \"2+2=1\", \"2-1=-1\", \"2+2=-2\", \"2-1=1\", \"2+2=-2\", \"1-1=2\", \"2-1=1\", \"1-2=-1\", \"1+1=-2\", \"2+1=0\", \"2-1=1\", \"2+2=-2\", \"1+2=2\", \"1-1=1\", \"1-1=0\", \"1+1=-2\", \"2+1=-2\", \"2-2=-1\", \"2+1=-2\", \"2-2=2\", \"1+1=0\", \"2-2=-1\", \"1-1=0\", \"2-1=2\", \"2-1=-2\", \"1+1=-1\", \"2-1=2\", \"2+1=-2\", \"2+2=0\", \"1-2=1\", \"1+1=1\", \"1+2=1\", \"1+1=0\", \"2+2=0\", \"1+2=-2\", \"1-2=-1\", \"2-1=-1\", \"1+2=1\", \"2-2=-1\", \"2-2=-2\", \"2+2=-2\", \"1+1=-2\", \"1+1=-1\", \"1+1=0\", \"2-1=1\", \"2-1=1\", \"1+2=-1\", \"2+2=2\", \"2-1=-2\", \"2-2=-1\", \"1+2=-1\", \"1-2=2\"]), \"18%\")",
			"Test.assertEquals(markMaths([\"1+2=2\", \"1-2=0\", \"2+1=1\", \"2+2=-2\", \"2-2=2\", \"1-2=2\"]), \"0%\")",
			"Test.assertEquals(markMaths([\"1+1=2\", \"2-2=-1\", \"2+2=0\", \"2-1=-1\", \"1-1=-2\", \"2+2=1\", \"1+2=-2\", \"1-1=-2\", \"2+1=2\", \"1+1=0\", \"2-1=-1\", \"2+1=-2\", \"2+2=-2\", \"2-1=0\", \"1-1=0\", \"2+2=1\", \"2-2=0\", \"1+2=-1\", \"2-2=1\", \"1+1=0\", \"2+1=1\", \"1-2=-2\", \"1-2=0\", \"1-1=1\", \"2+2=0\", \"1+2=-1\", \"1+2=-1\", \"1+1=-1\", \"2-1=-2\", \"2-2=-1\", \"1+2=-1\", \"1-1=0\", \"1-2=2\", \"2-1=1\", \"1+2=0\", \"1+1=-2\", \"2+1=-2\", \"1+2=1\", \"1-2=2\", \"1+2=-1\"]), \"12%\")"
		],
		"starterFn": [
			"1\nfunction markMaths(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/azBrZcE6Fhw2QFn7b"
	},
	{
		"title": "Return the Most Frequent Character",
		"description": "<p><span>Write a function that returns the most frequent character in an array of words.</span></p><h3><span>Examples</span></h3><pre><code>mostFrequentChar([\"apple\", \"bandage\", \"yodel\", \"make\"])\n➞ [\"a\", \"e\"]\n\nmostFrequentChar([\"music\", \"madness\", \"maniac\", \"motion\"])\n➞ [\"m\"]\n\nmostFrequentChar([\"the\", \"hills\", \"are\", \"alive\", \"with\", \"the\", \"sound\", \"of\", \"music\"])\n➞ [\"e\", \"h\", \"i\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>If multiple characters tie for most frequent, list all of them in alphabetical order.</span></li><li><span>Words will be in lower case.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(mostFrequentChar([\"apple\", \"bandage\", \"yodel\", \"make\"]), ['a', 'e'])",
			"Test.assertSimilar(mostFrequentChar([\"music\", \"madness\", \"maniac\", \"motion\"]), ['m'])",
			"Test.assertSimilar(mostFrequentChar([\"the\", \"hills\", \"are\", \"alive\", \"with\", \"the\", \"sound\", \"of\", \"music\"]), ['e', 'h', 'i'])",
			"Test.assertSimilar(mostFrequentChar([\"let\", \"them\", \"eat\", \"cake\"]), ['e'])",
			"Test.assertSimilar(mostFrequentChar([\"potion\", \"master\", \"professor\", \"snape\"]), ['o', 's'])"
		],
		"starterFn": [
			"1\nfunction mostFrequentChar(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2qZPtgxSvvktKMcrc"
	},
	{
		"title": "What's the Length of the Missing Array?",
		"description": "<p><span>Create a function that takes an array of arrays and return the length of the missing array.</span></p><h3><span>Examples</span></h3><pre><code>findMissing([[1], [1, 2], [4, 5, 1, 1], [5, 6, 7, 8, 9]]) ➞ 3\n\nfindMissing([[5, 6, 7, 8, 9], [1, 2], [4, 5, 1, 1], [1]]) ➞ 3\n\nfindMissing([[4, 4, 4, 4], [1], [3, 3, 3]]) ➞ 2</code></pre><h3><span>Notes</span></h3><ul><li><span>Test input arrays won't always be sorted in order of length.</span></li><li><span>If the array of arrays is </span><code>null</code><span> or empty, your function should return </span><code>false</code><span>.</span></li><li><span>If an array within the parent array is </span><code>null</code><span> or empty, return </span><code>false</code><span>.</span></li><li><span>There will always be a missing element and its length will be between the given arrays.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays"
		],
		"tests": [
			"Test.assertEquals(findMissing([[1], [1, 2], [4, 5, 1, 1], [5, 6, 7, 8, 9]]), 3);",
			"Test.assertEquals(findMissing([[5, 6, 7, 8, 9], [1, 2], [4, 5, 1, 1], [1] ]), 3);",
			"Test.assertEquals(findMissing([[4, 4, 4, 4], [1], [3, 3, 3]]), 2);",
			"Test.assertEquals(findMissing([[false], [false, false, false]]), 2);",
			"Test.assertEquals(findMissing([[\"f\", \"r\", \"s\"], [\"d\", \"e\"], [\"a\", \"f\", \"b\", \"n\"], [\"z\"], [\"fg\", \"gty\", \"d\", \"dfr\", \"dr\", \"q\"]]), 5);",
			"Test.assertEquals(findMissing([[5, 2, 9], [4, 5, 1, 1, 5, 6], [1, 1], [5, 6, 7, 8, 9]]), 4);",
			"Test.assertEquals(findMissing([]), false, \"When the main array is empty, return false.\");",
			"Test.assertEquals(findMissing(null), false, \"Return false if you are given null as an argument.\");",
			"Test.assertEquals(findMissing([[], [1, 2, 2]]), false, \"If an array within the parent array is empty, return false.\");"
		],
		"starterFn": [
			"1\nfunction findMissing(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ufzPhQEbECxfvmSAu"
	},
	{
		"title": "Digits Battle!",
		"description": "<p><span>Starting from the left side of an integer, adjacent digits pair up in \"battle\" and the larger digit wins. If two digits are the same, they both lose. A lone digit automatically wins.</span></p><p><span>Create a function that returns the victorious digits.</span></p><p><span>To illustrate:</span></p><pre><code>battleOutcome(578921445) ➞ 7925\n// [57]: 7 wins; [89] 9 wins; [21] 2 wins;\n// [44] neither wins; 5 (automatically) wins</code></pre><h3><span>Examples</span></h3><pre><code>battleOutcome(32531) ➞ 351\n// 3 deffeats 2, 5 defeats 3, 1 is a single.\n\nbattleOutcome(111) ➞ 1\n// 1 and 1 tie, so neither move on, last 1 is a single.\n\nbattleOutcome(78925) ➞ 895</code></pre><h3><span>Notes</span></h3><ul><li><span>There are no winners in a battle with equal digits (neither should be printed).</span></li><li><span>If the length of the number is odd, the lone digit should be printed at the end of the number.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"games",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(battleOutcome(32531), 351)",
			"Test.assertEquals(battleOutcome(111), 1)",
			"Test.assertEquals(battleOutcome(5289), 59)",
			"Test.assertEquals(battleOutcome(76811), 781)",
			"Test.assertEquals(battleOutcome(3245196), 3596)",
			"Test.assertEquals(battleOutcome(93552129), 929)"
		],
		"starterFn": [
			"1\nfunction battleOutcome(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nG3NSjoK4BTi9jxBS"
	},
	{
		"title": "Checkerboard Pattern",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if the two-dimensional </span><code>n x n</code><span> input array has a </span><strong><span>checker-board pattern</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>isCheckerboard([\n  [1, 1],\n  [0, 1]\n]) ➞ false\n\nisCheckerboard([\n  [0, 1],\n  [1, 0]\n]) ➞ true\n\nisCheckerboard([\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1]\n]) ➞ false\n\nisCheckerboard([\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1]\n]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>An element in the array adheres to the checker-board pattern if the elements directly to the left, right, top and below are of a different type, and the elements on the diagonal direction are of the same type.</span></li><li><span>The element in the upper-left corner can be either </span><code>0</code><span> or </span><code>1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isCheckerboard([",
			"  [1, 0, 1, 0, 1],",
			"  [0, 1, 0, 1, 0],",
			"  [1, 0, 1, 0, 1],",
			"  [0, 1, 0, 1, 0],",
			"  [1, 0, 1, 0, 1]",
			"]), true)",
			"​",
			"Test.assertEquals(isCheckerboard([",
			"  [0, 1, 0, 1, 0],",
			"  [1, 0, 1, 0, 1],",
			"  [0, 1, 0, 1, 0],",
			"  [1, 0, 1, 0, 1],",
			"  [0, 1, 0, 1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(isCheckerboard([",
			"  [0, 1, 0, 1, 0],",
			"  [1, 0, 1, 0, 1],",
			"  [0, 1, 0, 1, 0],",
			"  [1, 0, 1, 1, 1],",
			"  [0, 1, 0, 1, 0]",
			"]), false)",
			"​",
			"Test.assertEquals(isCheckerboard([",
			"  [0, 1, 0, 1, 0],"
		],
		"starterFn": [
			"1\nfunction isCheckerboard(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qNTiqHJ6cDi6Tccny"
	},
	{
		"title": "Dice Gambling",
		"description": "<p><span>Create a function that takes an array consisting of dice rolls from 1-6. Return the sum of your rolls with the following conditions:</span></p><ol><li><span>If a 1 is rolled, that is bad luck. The next roll counts as 0.</span></li><li><span>If a 6 is rolled, that is good luck. The next roll is multiplied by 2.</span></li><li><span>The array length will always be 3 or higher.</span></li></ol><h3><span>Examples</span></h3><pre><code>rolls([1, 2, 3]) ➞ 4\n// The second roll, 2, counts as 0 as a result of rolling 1.\n\nrolls([2, 6, 2, 5]) ➞ 17\n// The 2 following the 6 was multiplied by 2.\n\nrolls([6, 1, 1]) ➞ 8\n// The first roll makes the second roll worth 2, but the\n// second roll was still 1 so the third roll doesn't count.</code></pre><h3><span>Notes</span></h3><p><span>Even if a 6 is rolled after a 1, 6 isn't summed but the 6's \"effect\" still takes place.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"conditions",
			"games",
			"math"
		],
		"tests": [
			"Test.assertEquals(rolls([1,2,3]), 4)",
			"Test.assertEquals(rolls([2,6,2,5]), 17)",
			"Test.assertEquals(rolls([6,1,1]), 8)",
			"Test.assertEquals(rolls([5,1,6,1,6]), 8)",
			"Test.assertEquals(rolls([1,1,1]), 1)",
			"Test.assertEquals(rolls([1,1,3,1,1]), 2)",
			"Test.assertEquals(rolls([1,1,1,1,1]), 1)",
			"Test.assertEquals(rolls([6,6,6]), 30)"
		],
		"starterFn": [
			"1\nfunction rolls(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QuhNPjLubRNh2McfX"
	},
	{
		"title": "LCM of More Than Three Numbers",
		"description": "<p><span>Create a function that takes an array of more than three numbers as an argument and returns the </span><strong><span>Least Common Multiple</span></strong><span> (LCM).</span></p><h3><span>Examples</span></h3><pre><code>lcmOfArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 2550\n\nlcmOfArray([13, 6, 17, 18, 19, 20, 37]) ➞ 27965340\n\nlcmOfArray([44, 64, 12, 17, 65]) ➞ 2333760</code></pre><h3><span>Notes</span></h3><p><span>In math, the LCM is the smallest positive number that is a multiple of two or more numbers.</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(lcmOfArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2520)",
			"Test.assertSimilar(lcmOfArray([13, 6, 17, 18, 19,20, 37]), 27965340)",
			"Test.assertSimilar(lcmOfArray([44, 64, 12, 17, 65]), 2333760)",
			"Test.assertSimilar(lcmOfArray([200, 30, 18, 11, 8, 64, 34]), 2692800)"
		],
		"starterFn": [
			"1\nfunction lcmOfArray (numbers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qmQ9kRz6ZbkL4hi5F"
	},
	{
		"title": "Sample Points from a Curve",
		"description": "<p><span>Create a function that given a type of </span><code>curve</code><span> will generate an array containing a </span><code>samples</code><span> amount of numbers calculated from said </span><code>curve</code><span>.</span></p><p><span>It's easier to see with a visual representation:</span></p><p><img alt=\"graph of the 3 curves\" src=\"https://edabit-challenges.s3.amazonaws.com/sample_points_from_a_curve.png\"></p><p><span>If </span><code>samples = 3</code><span> and </span><code>curve = \"pow\"</code><span>, we would sample 3 points along the </span><strong><span>x axis</span></strong><span> </span><code>[0, 0.5, 1]</code><span> and figure out the value of </span><code>y</code><span>, in the case of the </span><code>pow</code><span> curve the values are </span><code>[0, 0.25, 1]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>samplesFromCurve(3, \"linear\") ➞ [0, 0.5, 1]\n\nsamplesFromCurve(3, \"pow\") ➞ [0, 0.25, 1]\n\nsamplesFromCurve(3, \"sqrt\") ➞ [0, 0.71, 1]\n\nsamplesFromCurve(5, \"linear\") ➞ [0, 0.25, 0.5, 0.75, 1]</code></pre><h3><span>Notes</span></h3><ul><li><span>The available curves are </span><code>linear</code><span>, </span><code>pow</code><span>, </span><code>sqrt</code><span> as shown in the picture.</span></li><li><span>All values returned must have a </span><strong><span>maximum of 2 decimals</span></strong><span> to avoid floating point problems in the tests.</span></li><li><span>All values returned must be between </span><code>0</code><span> and </span><code>1</code><span> (inclusive).</span></li><li><span>The </span><code>samples</code><span> parameter will always be ≥ </span><code>2</code><span>.</span></li><li><span>The samples are </span><strong><span>evenly distributed</span></strong><span> along the </span><strong><span>x axis</span></strong><span>.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"arrays",
			"math"
		],
		"tests": [
			"// Linear",
			"Test.assertSimilar(samplesFromCurve(2, 'linear'), [0, 1])",
			"Test.assertSimilar(samplesFromCurve(3, 'linear'), [0, 0.5, 1])",
			"Test.assertSimilar(samplesFromCurve(11, 'linear'), [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1])",
			"​",
			"// Pow",
			"Test.assertSimilar(samplesFromCurve(4, 'pow'), [0, 0.11, 0.44, 1])",
			"Test.assertSimilar(samplesFromCurve(5, 'pow'), [0, 0.06, 0.25, 0.56, 1])",
			"Test.assertSimilar(samplesFromCurve(11, 'pow'), [0, 0.01, 0.04, 0.09, 0.16, 0.25, 0.36, 0.49, 0.64, 0.81, 1])",
			"​",
			"// Sqrt",
			"Test.assertSimilar(samplesFromCurve(6, 'sqrt'), [0, 0.45, 0.63, 0.77, 0.89, 1])",
			"Test.assertSimilar(samplesFromCurve(7, 'sqrt'), [0, 0.41, 0.58, 0.71, 0.82, 0.91, 1])",
			"Test.assertSimilar(samplesFromCurve(11, 'sqrt'), [0, 0.32, 0.45, 0.55, 0.63, 0.71, 0.77, 0.84, 0.89, 0.95, 1])"
		],
		"starterFn": [
			"1\nfunction samplesFromCurve(samples, curve) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9se2zfxxSrLPKpyH9"
	},
	{
		"title": "Super Strict Grading",
		"description": "<p><span>Given an object literal of </span><em><span>student names</span></em><span> and an array of their </span><em><span>test scores over the semester</span></em><span>, return a list of all the students who passed the course (</span><em><span>in alphabetical order</span></em><span>).\nHowever, there is one more thing to mention: </span><strong><span>the pass mark is 100% in everything!</span></strong></p><h3><span>Examples</span></h3><pre><code>whoPassed({\n  \"John\" : [\"5/5\", \"50/50\", \"10/10\", \"10/10\"],\n  \"Sarah\" : [\"4/8\", \"50/57\", \"7/10\", \"10/18\"],\n  \"Adam\" : [\"8/10\", \"22/25\", \"3/5\", \"5/5\"],\n  \"Barry\" : [\"3/3\", \"20/20\"]\n}) ➞ [\"Barry\", \"John\"]\n\nwhoPassed({\n  \"Zara\" : [\"10/10\"],\n  \"Kris\" : [\"30/30\"],\n  \"Charlie\" : [\"100/100\"],\n  \"Alex\" : [\"1/1\"]\n}) ➞ [\"Alex\", \"Charlie\", \"Kris\", \"Zara\"]\n\nwhoPassed({\n  \"Zach\" : [\"10/10\", \"2/4\"],\n  \"Fred\" : [\"7/9\", \"2/3\"]\n}) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><strong><span>All</span></strong><span> of a student's test scores must be </span><em><span>100%</span></em><span> to pass.</span></li><li><span>Remember to return an array of student names sorted </span><em><span>alphabetically</span></em><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"objects",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(whoPassed({",
			"  \"John\" : [\"5/5\", \"50/50\", \"10/10\", \"10/10\"],",
			"  \"Sarah\" : [\"4/5\", \"50/50\", \"10/10\", \"10/10\"],",
			"  \"Adam\" : [\"3/5\", \"46/50\", \"9/10\", \"10/10\"],",
			"  \"Barry\" : [\"5/5\", \"50/50\", \"10/10\", \"10/10\"]",
			"}), [\"Barry\", \"John\"])",
			"​",
			"Test.assertSimilar(whoPassed({",
			"  \"Zara\" : [\"10/10\"],",
			"  \"Kris\" : [\"10/10\"],",
			"  \"Charlie\" : [\"10/10\"],",
			"  \"Alex\" : [\"10/10\"]",
			"}), [\"Alex\", \"Charlie\", \"Kris\", \"Zara\"])",
			"​",
			"Test.assertSimilar(whoPassed({",
			"  \"Zach\" : [\"10/10\", \"2/4\"],",
			"  \"Fred\" : [\"10/10\", \"3/4\"]",
			"}), [])",
			"​",
			"Test.assertSimilar(whoPassed({",
			"  \"John\" : [\"5/5\", \"50/50\", \"10/10\", \"10/10\"],",
			"  \"Sarah\" : [\"4/8\", \"50/57\", \"7/10\", \"10/18\"],",
			"  \"Adam\" : [\"8/10\", \"22/25\", \"3/5\", \"5/5\"],",
			"  \"Barry\" : [\"3/3\", \"20/20\", \"5/5\", \"2/2\"]",
			"}), [\"Barry\", \"John\"])",
			"​"
		],
		"starterFn": [
			"1\nfunction whoPassed(students) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jq6Ra5ms4hPTk9GNi"
	},
	{
		"title": "Euler's Phi Function",
		"description": "<p><span>The </span><strong><span>Euler's phi function</span></strong><span> (from the Greek letter </span><strong><span>φ</span></strong><span>, also called </span><em><span>Euler's totient function</span></em><span>) counts the positive integers that are coprime of a given number </span><code>n</code><span>, from 1 to </span><code>n</code><span> - 1. Two numbers are coprime when their greater common divisor is equal to 1. Look at the example below.</span></p><pre><code>divisors of 6 ➞ [1, 2, 3, 6]\n\ndivisors of 5 ➞ [1, 5] ➞ g.c.d. = 1\ndivisors of 4 ➞ [1, 2, 4] ➞ g.c.d. = 2\ndivisors of 3 ➞ [1, 3] ➞ g.c.d. = 3\ndivisors of 2 ➞ [1, 2] ➞ g.c.d. = 2\ndivisors of 1 ➞ [1] ➞ g.c.d. = 1\n\n1 and 5 are coprime of 6 ➞ phi(6) = 2</code></pre><p><span>Implement a phi function that returns the count of coprime integers of a given positive integer </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>phi(1) ➞ 1\n\nphi(3) ➞ 2\n\nphi(8) ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>1 is trivially coprime of every number.</span></li><li><span>You can also proceed to obtain prime factors of an integer instead of all its positive divisors, just remember that 1 is present in any case despite is not prime.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"higher_order_functions",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(phi(1), 1)",
			"Test.assertEquals(phi(3), 2)",
			"Test.assertEquals(phi(9), 6)",
			"Test.assertEquals(phi(19), 18)",
			"Test.assertEquals(phi(33), 20)",
			"Test.assertEquals(phi(51), 32)",
			"Test.assertEquals(phi(54), 18)",
			"Test.assertEquals(phi(86), 42)",
			"Test.assertEquals(phi(144), 48)",
			"Test.assertEquals(phi(209), 180)",
			"Test.assertEquals(phi(666), 216)",
			"Test.assertEquals(phi(1000), 400)"
		],
		"starterFn": [
			"1\nfunction phi(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JDgeyZ9gxNty7Y5re"
	},
	{
		"title": "Rotate a 2D Array 90 Degrees Clockwise",
		"description": "<p><span>Create a function that returns an 2D array where the elements have been rotated 90 degrees. The provided array will contain three elements, each being an array with three elements as unique integers.</span></p><p><span>The desired output would return a new 2D array where the contents of the original array have been rotated 90 degrees clockwise. So row 1 from the original array becomes column 3 for the returned array, row 2 becomes column 2 and row 3 becomes column 1.</span></p><h3><span>Examples</span></h3><pre><code>rotate([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]) ➞ [\n  [7, 4, 1],\n  [8, 5, 2],\n  [9, 6, 3]\n]\n\nrotate([\n  [\"a\", \"b\", \"c\"],\n  [\"d\", \"e\", \"f\"],\n  [\"g\", \"h\", \"i\"]\n]) ➞ [\n  [\"g\", \"d\", \"a\"],\n  [\"h\", \"e\", \"b\"],\n  [\"i\", \"f\", \"c\"]\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Jacob Afuvai",
		"publishedByUrl": "https://edabit.com/user/xKoMMhNyqWdbomgdJ",
		"language": "JavaScript",
		"tags": [
			"arrays"
		],
		"tests": [
			"Test.assertSimilar(rotate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[7, 4, 1], [8, 5, 2], [9, 6, 3]])",
			"Test.assertSimilar(rotate([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"]]), [[\"g\", \"d\", \"a\"], [\"h\", \"e\", \"b\"], [\"i\", \"f\", \"c\"]])"
		],
		"starterFn": [
			"1\nfunction rotate(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8wBCSpjjEre5uksXT"
	},
	{
		"title": "Alphabetically Sorted",
		"description": "<p><span>A word is alphabetically sorted if all of the letters in it are in consecutive alphabetical order. Some examples of alphabetically sorted words: </span><em><span>abhors</span></em><span> (</span><em><span>a</span></em><span> is before </span><em><span>b</span></em><span>, </span><em><span>b</span></em><span> is before </span><em><span>h</span></em><span>, </span><em><span>h</span></em><span> is before </span><em><span>o</span></em><span>, etc.), </span><em><span>ghost</span></em><span>, </span><em><span>accent</span></em><span>, </span><em><span>hoop</span></em><span>.</span></p><p><span>Create a function that takes in a sentence as input and returns </span><code>true</code><span> if there is </span><strong><span>at least one</span></strong><span> alphabetically sorted word inside that has a </span><strong><span>minimum length of 3</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>isAlphabeticallySorted(\"Paula has a French accent.\") ➞ true\n// \"accent\" is alphabetically sorted.\n\nisAlphabeticallySorted(\"The biopsy returned negative results.\") ➞ true\n// \"biopsy\" is alphabetically sorted.\n\nisAlphabeticallySorted(\"She sells sea shells by the sea shore.\") ➞ false\n// Although \"by\" is alphabetically sorted, it is only 2 letters long.</code></pre><h3><span>Notes</span></h3><ul><li><span>Do not count words with 2 or fewer characters.</span></li><li><span>Ignore punctuation (periods, commas, etc).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"sorting",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isAlphabeticallySorted(\"Paula has a French accent.\"), true)",
			"Test.assertEquals(isAlphabeticallySorted(\"The biopsy returned negative results.\"), true)",
			"Test.assertEquals(isAlphabeticallySorted(\"She sells sea shells by the sea shore.\"), false)",
			"Test.assertEquals(isAlphabeticallySorted(\"She almost reached the top of Mt. Everest.\"), true)",
			"Test.assertEquals(isAlphabeticallySorted(\"She was happy with how her earring hoops looked.\"), true)",
			"Test.assertEquals(isAlphabeticallySorted(\"Beth dislikes eating starfruit but enjoys cherries.\"), false)",
			"Test.assertEquals(isAlphabeticallySorted(\"Elinor is inside on a rainy day sipping hot chocolate.\"), true)",
			"Test.assertEquals(isAlphabeticallySorted(\"Mara took a photograph.\"), false)"
		],
		"starterFn": [
			"1\nfunction isAlphabeticallySorted(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/od9GF2tQKyLAvre8Z"
	},
	{
		"title": "Repeating Cycle",
		"description": "<p><span>Below is an example of a </span><strong><span>repeating cycle</span></strong><span>.</span></p><pre><code>isRepeatingCycle([1, 2, 3, 1, 2], 3) =&gt; true\n// Since the first two elements of [1, 2, 3] equals [1, 2]</code></pre><p><span>Below is an example of a </span><strong><span>non-repeating cycle</span></strong><span>.</span></p><pre><code>isRepeatingCycle([1, 2, 3, 1, 3], 3) =&gt; false\n// Since [1, 2, 3] != [1, 3]</code></pre><p><span>You are tasked with writing a function that takes in two inputs: (1) an array of integers; (2) the length of each cycle. Return the boolean value </span><code>true</code><span> if the array is a repeating cycle, and </span><code>false</code><span> if the array is a non-repeating cycle.</span></p><h3><span>Examples</span></h3><pre><code>isRepeatingCycle([1, 2, 3, 1, 2, 3, 1], 3) ➞ true\n\nisRepeatingCycle([1, 2, 3, 4, 2, 3, 1], 4) ➞ false\n\nisRepeatingCycle([1, 2, 1, 2, 2], 2) ➞ false\n\nisRepeatingCycle([1, 1, 1, 1], 3) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>All cycles begin with the first element of the array.</span></li><li><span>Return </span><code>true</code><span> if the cycle length is greater than the array length.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isRepeatingCycle([1, 2, 3, 1, 2, 3, 1], 3), true);",
			"Test.assertEquals(isRepeatingCycle([1, 2, 3, 4, 2, 3, 1], 4), false);",
			"Test.assertEquals(isRepeatingCycle([1, 2, 1, 2, 2], 2), false);",
			"Test.assertEquals(isRepeatingCycle([1, 1, 1, 1], 3), true, \"Trivially repeating, since array is identical.\");",
			"Test.assertEquals(isRepeatingCycle([1, 2, 1, 9], 4), true, \"Trivially repeating, since the cycle length = length of the array.\");",
			"Test.assertEquals(isRepeatingCycle([1, 1, 3, 1, 1], 7), true, \"Cycle length exceeds array length, so trivially true.\");",
			"Test.assertEquals(isRepeatingCycle([1, 2, 1, 2, 1, 2, 1], 3), false);",
			"Test.assertEquals(isRepeatingCycle([1, 2, 1, 2, 1, 2, 1], 2), true);",
			"Test.assertEquals(isRepeatingCycle([1, 2, 1, 2, 1, 2, 1], 4), true);"
		],
		"starterFn": [
			"1\nfunction isRepeatingCycle(arr, length) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9opuZaXyTKcwKMb6C"
	},
	{
		"title": "Matrix Transpose",
		"description": "<p><span>Create a function that transposes a 2D matrix.</span></p><h3><span>Examples</span></h3><pre><code>transposeMatrix([\n  [1, 1, 1],\n  [2, 2, 2],\n  [3, 3, 3]\n]) ➞ [\n  [1, 2, 3],\n  [1, 2, 3],\n  [1, 2, 3]\n]\n\ntransposeMatrix([\n  [5, 5],\n  [6, 7],\n  [9, 1]\n]) ➞ [\n  [5, 6, 9],\n  [5, 7, 1]\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(transposeMatrix([",
			"    [1, 1, 1], ",
			"    [2, 2, 2], ",
			"    [3, 3, 3]",
			"  ]),  ([",
			"    [1, 2, 3], ",
			"    [1, 2, 3], ",
			"    [1, 2, 3]",
			"  ]))",
			"  ",
			"Test.assertSimilar(transposeMatrix([",
			"    [1, 1, 1], ",
			"    [2, 2, 2]",
			"  ]),  ([",
			"    [1, 2],",
			"    [1, 2],",
			"    [1, 2]",
			"  ]))",
			"  ",
			"Test.assertSimilar(transposeMatrix([",
			"    [1, 2, 3, 4], ",
			"    [5, 6, 7, 8], ",
			"    [9, 10, 11, 12]",
			"  ]),  ([",
			"    [1, 5, 9],",
			"    [2, 6, 10],"
		],
		"starterFn": [
			"1\nfunction transposeMatrix(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6xWP2WqWrhjbu2ZyG"
	},
	{
		"title": "Cartesian Matrix",
		"description": "<p><span>In this challenge, create a matrix that simulates how a series of points are placed on a portion of the cartesian plane.</span></p><p><span>You are given two objects as parameters:</span></p><ul><li><p><code>dim</code><span> contains the dimension of the regular matrix to build:</span></p><ul><li><span>The property </span><code>h</code><span> is the </span><strong><span>h</span></strong><span>eight, or the total number of rows.</span></li><li><span>The property </span><code>w</code><span> is the </span><strong><span>w</span></strong><span>idth, or the total number of columns.</span></li></ul></li><li><p><code>cnt</code><span> contains the coordinates of the cartesian plane center:</span></p><ul><li><span>The property </span><code>r</code><span> is the </span><strong><span>r</span></strong><span>ow (0-indexed).</span></li><li><span>The property </span><code>c</code><span> is the </span><strong><span>c</span></strong><span>olumn (0-indexed).</span></li></ul></li></ul><p><span>You have to implement a function that returns a matrix (sized accordingly to </span><code>dim</code><span>), with each \"cell\" being an array containing the </span><code>[x, y]</code><span> coordinates from the given central point (treating so the cells as points on the cartesian plane).</span></p><h3><span>Examples</span></h3><pre><code>cartesianMatrix({h: 3, w: 4}, {r: 1, c: 1}) ➞ [\n  [[-1, 1], [0, 1], [1, 1], [2, 1]],\n  [[-1, 0], [0, 0], [1, 0], [2, 0]],\n  [[-1, -1], [0, -1], [1, -1], [2, -1]]\n]\n\ncartesianMatrix({h: 4, w: 3}, {r: 0, c: 1}) ➞ [\n  [[-1, 0], [0, 0], [1, 0]],\n  [[-1, -1], [0, -1], [1, -1]],\n  [[-1, -2], [0, -2], [1, -2]],\n  [[-1, -3], [0, -3], [1, -3]]\n]\n\ncartesianMatrix({h: 2, w: 4}, {r: 0, c: 0}) ➞ [\n  [[0, 0], [1, 0], [2, 0], [3, 0]],\n  [[0, -1], [1, -1], [2, -1], [3, -1]]\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>The coordinates must be returned in the order </span><code>[x-axis, y-axis]</code><span>.</span></li><li><span>The coordinates of the central point (or </span><em><span>origin</span></em><span>), are always </span><code>[0, 0]</code><span>. The origin will be always be included in the matrix.</span></li><li><span>Points placed to the right or up from the origin have positive values (i.e. </span><code>[1, 2]</code><span> means </span><code>1</code><span> cell to the </span><strong><span>right</span></strong><span> and </span><code>2</code><span> cells </span><strong><span>up</span></strong><span> from the origin).</span></li><li><span>Points placed to the left or down from the origin have negative values (i.e. </span><code>[-2, -1]</code><span> means </span><code>2</code><span> cells to the </span><strong><span>left</span></strong><span> and </span><code>1</code><span> cell </span><strong><span>down</span></strong><span> from the origin).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(cartesianMatrix({h: 3, w: 4}, {r: 1, c: 1}), [",
			"  [ [ -1, 1 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ] ],",
			"  [ [ -1, 0 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],",
			"  [ [ -1, -1 ], [ 0, -1 ], [ 1, -1 ], [ 2, -1 ] ]",
			"])",
			"​",
			"Test.assertSimilar(cartesianMatrix({h: 4, w: 3}, {r: 0, c: 1}), [",
			"  [ [ -1, 0 ], [ 0, 0 ], [ 1, 0 ] ],",
			"  [ [ -1, -1 ], [ 0, -1 ], [ 1, -1 ] ],",
			"  [ [ -1, -2 ], [ 0, -2 ], [ 1, -2 ] ],",
			"  [ [ -1, -3 ], [ 0, -3 ], [ 1, -3 ] ]",
			"])",
			"​",
			"Test.assertSimilar(cartesianMatrix({h: 5, w: 5}, {r: 2, c: 2}), [",
			"  [ [ -2, 2 ], [ -1, 2 ], [ 0, 2 ], [ 1, 2 ], [ 2, 2 ] ],",
			"  [ [ -2, 1 ], [ -1, 1 ], [ 0, 1 ], [ 1, 1 ], [ 2, 1 ] ],",
			"  [ [ -2, 0 ], [ -1, 0 ], [ 0, 0 ], [ 1, 0 ], [ 2, 0 ] ],",
			"  [ [ -2, -1 ], [ -1, -1 ], [ 0, -1 ], [ 1, -1 ], [ 2, -1 ] ],",
			"  [ [ -2, -2 ], [ -1, -2 ], [ 0, -2 ], [ 1, -2 ], [ 2, -2 ] ]",
			"])",
			"​",
			"Test.assertSimilar(cartesianMatrix({h: 6, w: 2}, {r: 4, c: 1}), [",
			"  [ [ -1, 4 ], [ 0, 4 ] ],",
			"  [ [ -1, 3 ], [ 0, 3 ] ],",
			"  [ [ -1, 2 ], [ 0, 2 ] ],",
			"  [ [ -1, 1 ], [ 0, 1 ] ],"
		],
		"starterFn": [
			"1\nfunction cartesianMatrix(dim, cnt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uJTFvuYDRD5cEsfdL"
	},
	{
		"title": "Magic Function",
		"description": "<p><span>Create a function that calls an object property with procedural like style.</span></p><h3><span>Examples</span></h3><pre><code>magic.replace(\"azerty\", \"a\", \"A\") ➞ \"Azerty\"\n\nmagic.length(\"hello word\") ➞ 10\n\nmagic.trim(\"  javascript is awesome  \") ➞ \"javascript is awesome\"\n\nmagic.normalize(\"éèê\", \"NFD\") ➞ e ́  e ̀  e ̂\n\nmagic.slice([1, 2, 3, 4, 5], 2, 4) ➞ [ 3, 4 ]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Moussa",
		"publishedByUrl": "https://edabit.com/user/WdXRpEBFzd2N29mNX",
		"language": "JavaScript",
		"tags": [
			"closures",
			"functional_programming",
			"higher_order_functions",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(magic.trim(\"  javascript is awesome  \"), \"javascript is awesome\");",
			"Test.assertEquals(magic.length(\"hello word\"), 10);",
			"Test.assertEquals(magic.slice([1, 2, 3, 4, 5], 2, 4)[0], 3);",
			"Test.assertEquals(magic.slice([1, 2, 3, 4, 5], 2, 4)[1], 4);",
			"Test.assertEquals(magic.replace(\"azerty\", \"a\",\"A\"), \"Azerty\");"
		],
		"starterFn": [
			"1\nlet magic = (() => {",
			"2\n  ",
			"3\n})();"
		],
		"url": "https://edabit.com/challenge/nhW7dXvLWrQoepyFs"
	},
	{
		"title": "Tic Tac Toe",
		"description": "<p><span>Given a tic-tac-toe board, create a function that determines whether X won, O won, or there's a tie.</span></p><p><span>The board is represented as a 2-dimensional array. A board does not have to be completely filled. Blank squares are represented with the letter \"B\". For each board, X begins and O goes second.</span></p><h3><span>Examples</span></h3><pre><code>whoWon([\n  [\"X\", \"O\", \"B\"],\n  [\"B\", \"X\", \"O\"],\n  [\"B\", \"B\", \"X\"]\n]) ➞ \"X\"\n\nwhoWon([\n  [\"X\", \"O\", \"X\"],\n  [\"O\", \"X\", \"B\"],\n  [\"X\", \"B\", \"O\"]\n]) ➞ \"X\"\n\nwhoWon([\n  [\"X\", \"X\", \"O\"],\n  [\"O\", \"O\", \"X\"],\n  [\"X\", \"X\", \"O\"]\n]) ➞ \"Tie\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games"
		],
		"tests": [
			"Test.assertEquals(whoWon([",
			"['X', 'O', 'B'], ",
			"['B', 'X', 'O'],",
			"['B', 'B', 'X']",
			"]), \"X\");",
			"​",
			"Test.assertEquals(whoWon([",
			"['X', 'O', 'X'], ",
			"['O', 'X', 'B'],",
			"['X', 'B', 'O']",
			"]), \"X\");",
			"​",
			"Test.assertEquals(whoWon([",
			"['X', 'X', 'O'], ",
			"['O', 'O', 'X'],",
			"['X', 'X', 'O']",
			"]), \"Tie\");",
			"​",
			"Test.assertEquals(whoWon([",
			"['X', 'X', 'B'], ",
			"['O', 'X', 'X'],",
			"['O', 'O', 'O']",
			"]), \"O\");",
			"​",
			"Test.assertEquals(whoWon([",
			"['X', 'X', 'B'], "
		],
		"starterFn": [
			"1\nfunction whoWon(board) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RN3LvGdsfsyruoBtt"
	},
	{
		"title": "Two Product Problem",
		"description": "<p><span>Create a function that takes an array </span><code>arr</code><span> and a number </span><code>n</code><span> and returns an array of two integers whose product is that of the number </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>twoProduct([1, 2, -1, 4, 5], 20) ➞ [4, 5]\n\ntwoProduct([1, 2, 3, 4, 5], 10) ➞ [2, 5]\n\ntwoProduct([100, 12, 4, 1, 2], 15) ➞ undefined</code></pre><h3><span>Note:</span></h3><ul><li><span>Try doing this with 0(N) time complexity.</span></li><li><span>No duplicates.</span></li><li><span>The array can have multiple solutions, so return the first match that you have found.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"data_structures",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(twoProduct([1, 2, -1, 4, 5], 110), undefined)",
			"Test.assertSimilar(twoProduct([1, 2, -1, 4, 5], 20),[4, 5])",
			"Test.assertSimilar(twoProduct([4677, 5091, 7086, 7328, 9813, 5190, 1188, 844, 9461, 8611, 9352, 3787, 1007, 9166, 3050, 6125, 4085, 5938, 5795, 5476, 5616, 4161, 3319, 2870, 9517, 8250, 985, 1809, 540, 1956, 3443, 960, 2203, 6127, 2187, 2729, 2183, 2779, 7505, 5858, 1351, 2929, 5870, 936, 3917, 5663, 4284, 6922, 8938, 1301, 6281, 8160, 5910, 4802, 43, 8697, 4657, 4088, 602, 2332, 4093, 1036, 4439, 8832, 30, 562, 6155, 6900, 3672, 2348, 1636, 5164, 2019, 4274, 3686, 6679, 5483, 6407, 7778, 2320, 4201, 7144, 653, 5160, 8489, 7740, 6596, 6712, 7442, 6005, 3244, 2026, 1939, 1824, 2341, 9172, 2716, 2490, 6747, 2015, 7448, 7950, 1697, 6313, 4679, 2775, 6219, 5907, 2684, 3433, 5947, 4270, 7267, 9464, 9077, 6230, 4976, 7497, 7090, 8328, 6517, 2025, 898, 3168, 7977, 3828, 367, 8260, 333, 4819, 6668, 3816, 564, 232, 9667, 2630, 6903, 1647, 309, 6795, 5402, 2146, 8184, 483, 8917, 3352, 8964, 8517, 2646, 97, 5929, 4772, 9235, 1181, 5772, 5898, 7105, 5873, 5967, 7353, 8647, 3610, 5424, 9632, 1173, 8608, 9148, 3567, 4924, 2059, 8822, 8139, 7383, 9704, 2097, 7339, 5635, 8787, 2216, 4572, 7802, 5615, 6724, 8333, 9322, 6767, 1270, 4827, 1487, 5661, 6507, 7579, 3275, 5863, 7035, 5143, 4016, 7780, 6436, 3108, 6935, 707, 3027, 3803, 7545, 4854, 4332, 194, 7808, 3603, 6390, 7584, 4466, 8500, 2330, 72, 6699, 3517, 4055, 2166, 9428, 5141, 6428, 7173, 2321, 9663, 4400, 6855, 3011, 2466, 8439, 1145, 425, 3846, 6850, 2207, 4463, 6820, 3609, 1404, 2042, 8530, 4585, 5536, 1983, 8537, 1836, 3648, 4957, 8048, 4358, 23, 5357, 1615, 8955, 1910, 8320, 5148, 743, 491, 3403, 5621, 5173, 8975, 6122, 5295, 7663, 1812, 2425, 8835, 8962, 8230, 4312, 8134, 810, 7631, 8087, 7358, 4760, 7673, 5268, 5218, 6858, 409, 1900, 3743, 3166, 9922, 9722, 7043, 6746, 9245, 8531, 2997, 3417, 5637, 2360, 2020, 6241, 9196], 16200), [540, 30])",
			"Test.assertSimilar(twoProduct([5645, 2705, 2948, 2571, 8756, 938, 4007, 6914, 9741, 1702, 470, 873, 8953, 2657, 3080, 5571, 281, 7640, 5633, 9899, 3446, 4267, 2752, 7643, 2212, 7304, 1439, 7960, 715, 3129, 5909, 1887, 4383, 7486, 7107, 5639, 5285, 5120, 6423, 6932, 4438, 9645, 23, ",
			"8109, 5158, 980, 151, 2845, 1152, 7426, 3593, 1081, 4708, 511, 5038, 2775, 8733, 7505, 1259, 6296, 6763, 7708, 545, 9258, 2134, 6437, 9093, 5354, 4179, 3379, 3353, 3105, 5318, 5124, 6273, 7855, 3781, 6019, 5125, 9783, 5668, 8674, 168, 4195, 4763, 7800, 6409, 8496, 1113, 2348, 3937, 5096, 1688, 6331, 495, 4641, 6235, 7511, 6199, 6424, 953, 9122, 7270, 6004, 5951, 6181, 2648, 6592, 3006, 8238, 6765, 7465, 7136, 8691, 3969, 7997, 8219, 1643, 189, 4039, 3705, 9548, 7279, 4729, 6176, 603, 7891, 3101, 3934, 1997, 5341, 367, 2578, 3823, 8142, 906, 9516, 9553, 7187, 960, 3706, 5766, 7291, 7932, 2313, 3462, 5262, 3232, 371, 5938, 8698, 9705, 4904, 5203, 1648, 803, 7957, 1900, 6611, 6207, 3275, 305, 579, 4084, 8387, 4806, 9740, 8207, 9844, 2640, 8569, 7094, 8754, 4587, 7329, 8305, 5542, 8530, 2883, 5066, 9124, 8898, 2687, 7778, 1317, 3002, 2298, 5721, 456, 4543, 840, 2153, 8511, ",
			"7807, 8659, 1084, 8746, 4993, 2418, 247, 3030, 1468, 7920, 17, 6559, 1183, 1034, 739, 9177, 1626, 2768, 3039, 9208, 1449, 5470, 7444, 6260, 3541, 8942, 1368, 198, 5112, 7826, 1835, 689, 5581, 1813, 5259, 9965, 3037, 8790, 7939, 5228, 8748, 454, 1086, 8708, 6068, 9060, 6928, 3966, 957, 8527, 2256, 9408, 834, 6961, 6778, 4204, 7682, 8156, 3584, 4944, 4213, 5006, 8369, 8171, 6747, 3451, 1852, 8891, 405, 7942, 8802, 7795, 54, 1512, 7659, 5657, 7358, 8434, 8540, 9967, 9574, 4582, 2309, 534, 563, 9311, 1746, 8792, 6882, 1644, 5060, 1897, 9612, 985, 3023, 3262, 1022, 2834, 2575, 902, 1013, 1392, 6455, 4818, 3985, 1238, 990, 1670, 8886, 1473, 472, 1486, 5081, 9962, 5168, 4093, 4643, 1405, 3797, 8544, 7011, 4696, 5286, 7694, 4349, 5253, 5880, 3176, 1055, ",
			"3747, 34, 4772, 3821, 8209, 6250, 9388, 2662, 4553, 2607, 8989, 1494, 4135, 584, 9807, 7085, 3444, 8213, 1434, 7846, 6453, 2843, 2303, 5500, 2453, 2886, 43, 4611, 7256, 3548, 3166, 8580, 2702, 4929, 5840, 428, 5053, 2325, 5711, 2336, 1756, 6712, 6270, ",
			"6122, 3533, 6622, 2788, 2032, 3071, 542, 4579, 8878, 5663, 4627, 3259, 9456, 1125, 4114, 5390, 3748, 7036, 3719, 5323, 8978, 5025, 8896, 3276, 2509, 8263, 80, 8613, 5899, 8223, 9507, 3691, 3215, 9437, 2547, 98, 2599, 7116, 4593, 1818, 2802, 5235, 2277, 8609, 4324, 153, 9108, 7687, 8524, 8587, 2965, 9119, 3059, 4226, 5965, 6469, 5712, 9762, 6940, 224, 7335, 4044, 3465, 4063, 4398, 212, 72, 6154, 4967, 2797, 355, 8686, 171, 4781, 5150, 6206, 5728, 3307, 5099, 3744, 8912, 1096, 7362, 2063, 6801, 8356, ",
			"9587, 3312, 9835, 7352, 6581, 3099, 7374, 9896, 1158, 9329, 3756, 6026, 5806, 6950, 4663, 1517, 741, 1769, 585, 9090, 7641, 2924, 2052, 2157, 2014, 2034, 6896, 3332, 1788, 1102, 8286, 544, 7670, 7617, 583, 8327, 1181, 5314, 7719, 7236, 4369, 3895, 4109, 1463, 1725, 7216, 633, 7130, 7586, 4691, 9800, 5480, 2533, 1768, 4675, 3231, 5108, 6770, 8682, 4146, 7985, 3112, 4312, 2840, 2626, 4170, 6749, 3740, 8985, 2502, 3862, 9411, 5940, 7257, 1253, 5539, 9680, 4064, 301, 2047, 7837, 7714, 4172, 9949, 3551, ",
			"5782, 6383, 4994, 1305, 7850, 1365, 888, 5132, 2736, 837, 1153, 779, 5429, 5441, 4446, 1052, 2726, 7073, 4687, 9728, 6771, 4788, 2417, 1360, 3510, 9996, 4499, 1243, 6930, 473, 903, 161, 8570, 5582, 9032, 8799, 1987, 196, 7998, 4506, 7476, 4481, 8836, 316, 1804, 2956, 2730, 1273, 3429, 4616, 6709, 9334, 5327, 3804, 4558, 4069, 1920, 7764, 6677, 3088, 7501, 2819, 1173, 6837, 1613, 5162, 9867, 1426, 180, 9983, 8663, 6664, 5065, 9753, 5601, 9797, 4133, 178, 4652, 2954, 1176, 6617, 239, 5058, 7086, 9425, 513, 3167, 4803, 3699, 6894, 2181, 5617, 8628, 641, 5846, 1625, 8336, 514, 2520, 7408, 3034, 2170, 5530, 6380, 701, 3665, 6111, 9467, 6509, 4947, 720, 6288, 5366, 8818, 2437, 2022, 3739, 1021, 7922, 6196, 7271, 5825, 8837, 82, 5535, 6366, 2569, 858, 2140, 449, 4590, 3760, 8258, 5705, 8338, 2630, 2814, 6016, 4242, 3847, 4479, 1211, 975, 9633, 7248, 6243, 6345, 2816, 1622, 575, 6009, 1511, 8666, 6391, 4494, 6538, 5534, 174, 7494, 4639, 895, 9591, 6857, 8841, 3676, 9344, 3069, 526, 5701, 6727, 1693, 3151, 1131, 3070, 2588, 8303, 6058, 1098, 9036, 2053, 2131, 7090, 5812, 518, 1298, 8844, 883, 9632, 7635, 7050, 3192, 919, 6480, 7069, 6846, 6229, 204, 880, 8665, 5618, 2023, 1544, 4631, 8593, 4900, 8773, 4449, 8326, 629, 7224, 7160, 565, 7732, 4342, 9044, 8990, 587, 1467, 9606, 4459, 4424, 1077, 7907, 6005, 4871, 928, 3570, 6177, 2988, 3052, 2893, 3547, 2570, 1738, 7220, 4950, 391, 1165, 9735, 8461, 3320, 8991, 2790, 8433, 5295, 2628, 3834, 9084, 493, 3633, 4769, 5935, 8620, 5906, 9417, 4858, 1726, ",
			"4715, 1393, 9141, 9111, 5970, 7132, 9214, 6481, 2398, 3905, 4528, 9539, 100, 5017, 7557, 4808, 8442, 3568, 3403, 6434, 9446, 9522, 5669, 5100, 7492, 132, 5784, 9901, 7522, 6949, 6416, 9077, 704, 5774, 9339, 2039, 6153, 8290, 8045, 7429, 1283, 5819, 4751, 5625, 2379, 6227, 969, 1190, 7401, 8420, 7938, 10, 2492, 4723, 757, 1757, 3050, 1161, 9995, 7995, 2177, 9696, 3046, 8769, 8084, 3803, 669, 4067, 8793, 512, 3979, 9470, 1216, 2035, 8424, 5115, 8512, 6190, 5799, 1866, 4527, 7767, 5169, 3323, 7724, 8714, 8150, 7868, 9428, 4859, 5998, 3581, 7626, 1736, 1555, 270, 467, 7440, 7515, 292, 737, 5394, 9168, 4732, 5257, 6033, 4524, 5861, 5506, 5508, 5807, 9412, 3024, 1409, 1504, 6278, 3915, 6836, 5482, 8066, 7082, 2658, 7035, 2369, 6785, 4621, 8579, 6644, 8961, 2513, 6279, 8933, 1872, 8222, 5962, 7765, 7402, 3114, 789, 1598, 9155, 8203, 1110, 1721, 6915, 9812, 1106, 1400, 2258, 958, 4074, 4451, 8850, 4937, 943, 7651, 4471, 7645, 1007, 4762, 4697, 9167, 14, 1252, 1873, 8003, 2829, 3346, 5768, 1787, 8110, ",
			"5296, 8250, 4214, 4247, 5477, 1182, 7787, 1590, 3942, 9803, 7390, 5898, 4282, 4775, 4870, 73, 8030, 6775, 6565, 7762, 6274, 8407, 886, 9584, 1136, 8234, 4496, 9070, 9654, 8979, 7354, 6810, 5121, 6114, 1056, 6558, 3696, 2899, 9538, 3938, 1457, 6648, 6043, 124, 2541, 2787, 9830, 5531, 3130, 4578, 3959, 788, 2853, 466, 202, 1671, 3697, 9454, 8479, 4362, 5076, 3931, 3596, 9599, 2832, 8870, 4893, 5329, 9392, 7539, 7736, 5652, 4985, 6171, 6456, 6237, 1575, 8044, 2596, 4341, 6992, 8279, 9850, 5452, 9957, 5776, 4983, 3891, 7301, 2538, 2387, 7495, 3826, 262, 8368, 147, 7963, 3338, 7473, 7775, 9067, 5243, 3930, 1762, 8786, 2518, 3840, 6169, 7589, 3460, 2302, 3923, 9283, 9834, 7852, 8313, 4881, 9498, 8949, 4948, 9181, 7251, 208, 1672, 8057, 5201, 1737, 5367, 940, 1838, 2915, 2049, 6066, 2284, 4029, 9833, 4360, 9916, 2644, 1915, 6597, 3660, 7059, 6989, 5127, 8632, 9870, 9438, 6943, 6685, 9829, 7387, 2780, 7129, 2613, 937, 5888, 5393, 8019, 9396, 3865, 725, 1082, 1558, 4437, 9743, 2280, 181, 723, 7206, 5105, 6170, 4642, 4793, 645, 870, 413, 7321, 4108, 5204, 1775, 278, 7953, 4203, 1724, 6454, 5553, 9702, 5554, 4938, 7815, 6064, 8359, 3768, 2839, 3022, 1864, 4298, 6353, 7858, 1524, 5563, 8228, 6542, 5580, 138, 5167, 5504, 7443, 8097, 2750, 9259, 5788, 5592, 663, 7975, 211, 5543, 8284, 8101, 4941, 9774, 9224, 4791, 6912, 8463, 5217, 5057, 9641, 9178, 8381, 9006, 8249, 1675, 3493, 714, 5939, 8635, 2686, 1823, 2639, 1910, 6516, 1074, 1339, 1660, 935, 510, 8311, 1271, 6745, 7570, 2553, 9621, 733, 1966, 4031, 4144, 7665, 7541, 4648, 4035, 6828, 2461, 6843, 8146, 7923, 7163, 1224, 3608, 2805, 3673, 4701, 7965, 6628, 3947, 7287, 1151, 8310, 4957, 3190, 48, 2937, 5839, 2283, 2652, 3588, 9804, 2747, 3173, 5064, 2903, 4271, 8095, 9849, 4161, 967, 7564, 2275, 1519, 7067, 7851, 385, 6816, 483, 7159, 7366, 9047, 610, 3374, 1719, 246, 747, 3273, 186, 5488, 144, 341, 6891, 8838, 667, 2515, 5916, 7720, 9878, 671, 3648, 7704, 8853, 7333, 8753, 6635, 1205, 1003, 5976, 6148, 7102, 2618, 6985, 9793, 2872, 2552, 9737, 8669, 5897, 3172, 9685, 1846, 9073, 2991, 8063, 8466, 6902, 2608, 1534, 748, 8715, 8739, 1902, 5131, 7857, 2386, 3702, 6792, 4644, 27, 8107, 9682, 8483, 8928, 4297, 7303, 1442, 2279, 8652, 5698, 5233, 8918, 4249, 2473, 8594, 8545, 4795, 8696, 7403, ",
			"8515, 2413, 3871, 7203, 5968, 9400, 7353, 992, 8812, 8298, 2836, 4798, 2996, 6483, 434, 949, 2828, 407, 6307, 2962, 9273, 4897, 4585, 1577, 1564, 612, 4895, 2591, 272, 3355, 4659, 8937, 7243, 3717, 8825, 6098, 8675, 3339, 373, 9966, 1285, 6092, 9910, 5343, 1242, 4071, 9031, 9863, 9376, 3094, 8832, 2224, 6821, 5561, 3187, 8379, 2499, 4679, 6548, 7144, 6814, 4670, 9930, 7614, 5160, 6988, 774, 8676, 8324, 2207, 1272, 3876, 4829, 5891, 2245, 38, 7294, 5075, 1090, 3253, 2107, 637, 8681, 5198, 5413, 4537, 2051, 1958, 5291, 6316, 265, 7574, 5490, 1124, 6794, 8551, 3875, 8385, 4480, 4774, 5917, 1218, 4194, 8959, 6927, 8210, 5087, ",
			"1827, 9618, 6428, 5744, 64, 7482, 2339, 640, 6944, 7120, 2643, 7999, 5221, 8194, 6513, 8995, 2714, 4033, 5718, 474, 9827, 1293, 2276, 1068, 5798, 3327, 5248, 2352, 8419, 7816, 3811, 5674, 7389, 4945, 6673, 5629, 4367, 7388, 2693, 8851, 8907, 8367, 3643, 7412, 3303, 5443, 3306, 2160, 9988, 2460, 3141, 7192, 9982, 7025, 5745, 6433, 6117, 4736, 2412, 2796, 8855, 9277, 4354, 2777, 6827, 905, 7307, 465, 761, 4276, 251, 7044, 5759, 7906, 866, 4816, 9839, 6060, 4949, 2076, 4561, 9126, 8175, 3184, 4086, 8413, 3562, 2653, 9689, 8608, 4012, 5959, 7538, 9313, 6922, 1104, 2902, 4536, 6448, 7623, 4239, 6021, 7558, 3932, 8938, 1731, 2476, 9332, 2286, 4062, 4722, 8650, 6725, 5694, 6422, 4413, 2931, 9271, 359, 8948, 3575, 7546, 5307, 1288, 8032, 9707, 5061, 3615, 9727, 8897, 7554, 6563, 5283, 4580, 1863, 2534, 294, 3497, 5074, 5716, 348, 5923, 7249, 8617, 1375, 6518, 5793, 9136, 9831, ",
			"8971, 6636, 2364, 4183, 8015, 6680, 6637, 9505, 4863, 9128, 3629, 7372, 3538, 2041, 8798, 1199, 8936, 3590, 4936, 6671, 3148, ",
			"167, 8007, 6883, 5135, 1646, 4318, 7347, 5533, 5377, 9038, 8469, 6568, 8800, 8361, 5986, 4998, 4266, 6215, 2602, 8641, 6626, 3784, 4805, 1570, 2359, 2895, 2977, 8835, 458, 8218, 2650, 9757, 5110, 7213, 8400, 3604, 5682, 2507, 6812, 5123, 6145, 6974, 1934, 7683, 2139, 8817, 2798, 1134, 5890, 9625, 2221, 5862, 2766, 7182, 2757, 7951, 9301, 4535, 5928, 5732, 7123, 2126, 5494, 6670, 7328, 9372, 4576, 6735, 2092, 4049, 9173, 6613, 8858, 9922, 4357, 7215, 2749, 8160, 6519, 4397, 5015, 7178, 4577, 6406, 838, 1447, 4361, 4835, 2801, 7441, 7689, 333, 7701, 7793, 2013, 5779, 7169, 611, 3234, 9444, 9723, 8224, 9192, 8915, 6262, 7114, 4542, 6890, 9407, 3894, 3704, 8405, 7063, 7382, 460, 9501, 5818, 8386, 1676, 6349, 4550, 9027, 227, 9159, 8660, 1282, 3523, 2266, 4250, 4125, 8730, 3815, 7786, 9760, 5446, 8391, 9455, 9169, 2966, 3524, 9020, 131, 1705, 8764, 4258, 9882, 1961, 681, 7927, 6087, 469, 1553, 7371, 2590, 8010, 6308, 155, 4335, 7122, 3334, 7026, 209, 5114, 4887, 508, 6083, 5225, 9810, 9555, 2795, 1226, 4292, 5218, 2842, 1332, 8743, 4053, 5741, 9987, 3014, 6555, 3899, 2189, 8596, 0, 7133, 1435, 3188, 6099, 4345, 9678, 5689, 9001, 2194, 1924, 6271, 93, 9477, 1968, 1354, 2624, 4122, 8011, 3774, 9174, 2028, 4142, 4384, 2186, 1891, 8189, 8373, 1597, ",
			"4006, 7642, 1109, 5929, 5772, 9926, 7613, 8459, 6054, 84, 1566, 1842, 3119, 7436, 327, 3661, 3308, 9911, 8821, 1800, 4197, 2751, 8680, 5247, 8123, 29, 5517, 8747, 2913, 3866, 4563, 3340, 2347, 9848, 1904, 9495, 2556, 8550, 582, 6998, 5321, 1452, 5467, ",
			"2444, 7725, 3554, 7037, 6991, 6119, 6372, 162, 1319, 5085, 9765, 5016, 1556, 6562, 2452, 3564, 3047, 2833, 7384, 2405, 2504, 3888, 4456, 4008, 5320, 8278, 1240, 728, 5703, 7596, 8399, 4619, 1423, 7575, 3073, 3159, 4609, 2614, 9860, 7378, 5142, 4248, 7247, 6247, 1819, 9387, 8957, 1412, 7405, 694, 9460, 2548, 5453, 7089, 1175, 2328, 1607, 5297, 7530, 9374, 1256, 1407, 6325, 7749, 9972, 7980, 6948, 1951, 8262, 416, 9096, 580, 8291, 5584, 463, 4371, 3975, 735, 6946, 7174, 3499, 2475, 5693, 7739, 6351, 6195, 8004, 3859, 3427, 499, 8348, 9934, 8740, 7956, 4508, 9298, 8939, 5544, 8627, 3557, 1025, 9034, 7051, 3087, 4939, 2290, 7314, 8114, 1492, 6669, 9755, 4337, 3685, 4997, 7799, 4229, 415, 2928, 3703, 976, 7377, 9699, 8687, 3761, 206, 6596, 5944, 8013, 2180, 7031, 5927, 296, 1230, 9, 2831, 9061, 1403, 8508, 2963, 9232, 2414, 8965, 869, 5856, 8468, 5887, 9287, 5226, 2830, 4738, 4645, 1884, 7244, 366, 7573, 6876, 8302, 3682, 4706, 3496, 914, 79, 6595, 8295, 3354, 8080, 8383, 5636, 4059, 8343, 1215, 2233, 2691, 6107, 2454, 7967, 2259, 313, 9005, 5070, 6905, 8883, 2604, 1614, 7433, 8012, 438, 7699, 5026, 8775, 380, 4789, 2154, 74, 5579, 2310, 3206, 3755, 8398, 5126, 7151, 7430, 4329, 7189, 6615, 397, 4002, 1080, 7386, 104, 7061, 8242, 7662, 9105, 3657, 821, 8879, 2399, 4268, 6688, 677, 1347, 4845, 3216, 1231, 1432, 9385, 9817, 4534, 3152, 6926, 5950, 7987, 2916, 6025, 7690, 684, 5356, 3264, 5622, 3617, 2385, 4478, 5762, 5777, 8447, 5364, 3832, 6522, 4914, 9734, 9004, 7970, 4710, 7198, 3632, 9336, ",
			"9355, 5706, 7232, 3163, 3935, 6743, 9366, 8408, 8149, 4942, 7349, 3793, 2345, 797, 7989, 9345, 8514, 7585, 7600, 2465, 8028, 1000, 5809, 5646, 2240, 7808, 4395, 4926, 2694, 5214, 9117, 7528, 3097, 5641, 1518, 67, 5885, 8049, 4030, 7217, 6091, 4728, 6657, 918, 4634, 9731, 795, 4977, 3062, 3920, 2735, 4103, 744, 2372, 8565, 8365, 58, 1750, 6517, 4137, 4394, 3509, 3426, 6287, 6439, 8254, 2671, 5274, 7625, 3042, 1163, 1384, 6877, 5628, 6676, 7356, 9708, 6878, 2357, 1674, 1931, 4289, 338, 9672, 830, 5552, 9310, 427, 2898, 5869, 8849, 5808, 7204, 3545, 1349, 2791, 5032, 1401, 2600, 2209, 2783, 431, 9649, 7254, 2813, 7380, 5095, ",
			"2955, 4707, 5450, 6402, 7768, 7898, 4629, 5675, 1030, 3495, 4023, 3595, 1531, 7100, 1836, 8309, 2669, 3120, 6703, 6017, 9286, ",
			"981, 1929, 6958, 8822, 1105, 9306, 7186, 1500, 8633, 4281, 2166, 1430, 5357, 7058, 4709, 7028, 326, 4700, 3447, 6214, 5011, 9095, 6067, 3450, 9243, 915, 2442, 6874, 6015, 7555, 5567, 9050, 7424, 4218, 2543, 577, 1945, 28, 2458, 3679, 8427, 7753, 1417, ",
			"6061, 3514, 8711, 7876, 114, 7948, 9439, 849, 241, 2508, 5980, 2172, 5238, 9320, 3820, 8863, 2270, 6625, 7497, 4375, 1551, 5707, 1730, 3939, 8454, 5287, 1352, 5033, 245, 3824, 7275, 8267, 3281, 3010, 8446, 7872, 6850, 7675, 2929, 7709, 4792, 1953, 4255, 8498, 6267, 3256, 4958, 7785, 4786, 2040, 7284, 8909, 5572, 8236, 8967, 9640, 1348, 1087, 362, 2381, 2046, 1928, 8921, 9998, 1049, 3111, 5266, 9974, 7606, 598, 1410, 5116, 116, 5763, 825, 4251, 8428, 764, 3766, 183, 9207, 2252, 1350, 4005, 9419, 1523, 4406, 1448, 7840, 9585, 8169, 899, 1345, 7862, 231, 2311, 9566, 3578, 5586, 5599, 6027, 5134, 5496, 4552, 5128, 9384, 9215, ",
			"3366, 285, 9894, 4745, 6268, 4057, 8588, 5222, 1324, 7423, 4482, 7022, 1024, 8649, 3809, 5355, 7343, 5505, 713, 6413, 106, 8488, 7135, 3160, 8287, 4091, 9798, 1773, 2997, 1330, 6069, 1168, 9403, 8505, 7706, 703, 3171, 4882, 2651, 5183, 9139, 5431, 7141, 4647, 6815, 9015, 2135, 875, 2973, 4821, 826, 860, 6310, 3012, 125, 1680, 6188, 6365, 3325, 839, 5930, 1686, 4695, 9233, 5691, 7315, 4045, 6152, 1655, 7258, 8211, 794, 8522, 2008, 1255, 3842, 3204, 9575, 8200, 5781, 8215, 6410, 507, 4724, 6158, 8621, 9238, 4961, 1064, 6624, 5069, 6320, 5342, 2789, 2670, 9187, 3357, 1909, 2947, 1450, 3600, 4101, 1657, 9323, 6925, 7202, 4766, 922, 6805, 666, 6511, 8600, 3360, 4450, 1487, 5030, 4279, 2623, 9429, 933, 7928, 8052, 7002, 7455, 6834, 9240, 5841, 7166, 7766, 1994, 8970, 4794, 6173, 5043, 2064, 9862, 3622, 972, 916, 3850, 852, 7008, 2238, 9307, 3652, 5855, 6984, 1779, 5631, 6139, 8930, 408, 4532, 6438, 1456, 299, 2696, 7884, 4175, 8022, 8248, 6211, 790, 3494, 3580, 7048, 8610, 8848, 5994, 983, 8444, 6337, 5369, 547, 7712, 3390, 9157, 4990, 4704, 6471, 4907, 9058, 4358, 6976, 6556, 2514, 9730, 1475, 7195, 8741, 1645, 5310, 4148, 3201, 9790, 6143, 3041, 1204, 3735, 6762, 1557, 3411, 6774, 2081, 1127, 5792, 6978, 271, 6222, 9662, 4714, 2341, 602, 2241, ",
			"9109, 9406, 698, 2337, 2885, 5042, 4256, 3955, 9367, 4872, 8868, 3452, 5163, 3810, 1162, 9595, 7435, 2523, 5313, 560, 7823, 6553, 4429, 5607, 8577, 2111, 7919, 4164, 5080, 7479, 9365, 9739, 539, 409, 2550, 8525, 9895, 9569, 7188, 2776, 3438, 8173, 3304, 2191, 2573, 1957, 3091, 4080, 2563, 3851, 2261, 4981, 5410, 2987, 753, 2943, 9132, 8869, 5237, 4269, 3769, 7649, 6359, 884, ",
			"2190, 7988, 8645, 6893, 817, 6488, 5000, 6407, 8133, 3700, 8590, 952, 210, 2122, 9799, 8112, 1856, 6302, 3672, 6097, 8186, 1037, 1917, 4182, 2528, 9975, 707, 8265, 5860, 2099, 5801, 8755, 9655, 6106, 5997, 7913, 8152, 6525, 2984, 6187, 4230, 4838, 1376, 9836, 1692, 1851, 1868, 7633, 9019, 9897, 516, 4355, 630, 9198, 3618, 8246, 3709, 2215, 4946, 1837, 5449, 7259, 6127, 7565, ",
			"4015, 9121, 2486, 297, 2371, 9089, 2410, 1043, 4046, 5044, 6295, 3974, 9393, 879, 7969, 2753, 6135, 2103, 9051, 8535, 7950, 9057, 6656, 7668, 1985, 8656, 5418, 5331, 506, 5796, 3818, 4857, 3531, 2082, 4668, 250, 6284, 1801, 6311, 2595, 5746, 8856, 4656, 676, 6491, 6505, 9658, 8328, 5717, 3254, 3733, 4978, 706, 6150, 5005, 1618, 3301, 6504, 3255, 2889, 5720, 2684, 7064, 7663, "
		],
		"starterFn": [
			"1\nfunction twoProduct(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/muXiqFTyE23uknv4o"
	},
	{
		"title": "Flip the Array",
		"description": "<p><span>Create a function that flips a horizontal array into a vertical array, and a vertical array into a horizontal array.</span></p><p><span>In other words, take an </span><code>1 x n</code><span> array (1 row + n columns) and flip it into a </span><code>n x 1</code><span> array (n rows and 1 column), and vice versa.</span></p><h3><span>Examples</span></h3><pre><code>flipArray([1, 2, 3, 4]) ➞ [[1], [2], [3], [4]]\n// Take a horizontal array and flip it vertical.\n\nflipArray([[5], [6], [9]]) ➞ [5, 6, 9]\n// Take a vertical array and flip it horizontal.\n\nflipArray([]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>If given an empty array </span><code>[]</code><span>, return an empty array </span><code>[]</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(flipArray([1, 2, 3, 4]), [[1], [2], [3], [4]])",
			"Test.assertSimilar(flipArray([[5], [6], [9]]), [5, 6, 9])",
			"Test.assertSimilar(flipArray([[7], [8], [9], [55]]), [7, 8, 9, 55])",
			"Test.assertSimilar(flipArray([7, 8, 9, 55]),[[7], [8], [9], [55]])",
			"Test.assertSimilar(flipArray([[1], [2]]), [1, 2])",
			"Test.assertSimilar(flipArray([5, 8]), [[5], [8]])",
			"Test.assertSimilar(flipArray([2]), [[2]])",
			"Test.assertSimilar(flipArray([]), [])"
		],
		"starterFn": [
			"1\nfunction flipArray(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wytnq5RFKdMaD9GGM"
	},
	{
		"title": "Word Chain",
		"description": "<p><span>A </span><strong><span>word-chain</span></strong><span> is an array of words, where the next word is formed by changing </span><strong><span>exactly one letter</span></strong><span> from the previous word. We do not add or subtract letters from words, only change them.</span></p><p><span>Create a function that returns </span><code>true</code><span> if an array is a </span><strong><span>word-chain</span></strong><span> and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isWordChain([\"meal\", \"seal\", \"seat\", \"beat\", \"beet\"]) ➞ true\n// Change \"m\" in \"meal\" to get \"seal\", \"l\" to get \"seat\", etc.\n\nisWordChain([\"red\", \"bed\", \"bet\", \"bat\", \"sat\"]) ➞ true\n\nisWordChain([\"red\", \"bat\", \"cat\", \"sat\"]) ➞ false\n// Do not change more than one letter (\"red\" and \"bat\").\n\nisWordChain([\"read\", \"red\", \"led\", \"lad\", \"lady\"]) ➞ false\n// Do not add or subtract letters.</code></pre><h3><span>Notes</span></h3><ul><li><span>Each word in a </span><strong><span>word chain</span></strong><span> has equal length.</span></li><li><span>All words will be in lower case.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isWordChain(['meal', 'seal', 'seat', 'beat', 'beet']), true)",
			"Test.assertEquals(isWordChain(['red', 'bed', 'bet', 'bat', 'sat']), true)",
			"Test.assertEquals(isWordChain(['heady', 'ready', 'beady', 'beads', 'meads', 'meats', 'seats', 'feats']), true)",
			"Test.assertEquals(isWordChain(['score', 'scare', 'stare', 'spare', 'spire']), true)",
			"Test.assertEquals(isWordChain(['more', 'mire', 'dire', 'dare', 'date']), true)",
			"Test.assertEquals(isWordChain(['read', 'red', 'led', 'lad', 'lady']), false)",
			"Test.assertEquals(isWordChain(['red', 'bat', 'cat', 'sat']), false)",
			"Test.assertEquals(isWordChain(['candy', 'candies', 'fat', 'rat']), false)"
		],
		"starterFn": [
			"1\nfunction isWordChain(words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EfC7rRKdAt8ugcCCT"
	},
	{
		"title": "Unashamed Primes: Sexy Triplets",
		"description": "<p><span>A sexy (from </span><em><span>sex</span></em><span>, the Latin word for six) prime triplet is a group of three primes that differ by each other by 6, with the sum of the smallest prime plus 18 being a composite number.</span></p><p><span>You must implement a function that returns an array of triplets (triplets being arrays in turn) found in a range, which included bounds are the two given integers </span><code>low</code><span> and </span><code>high</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>sexyTriplets(1, 19) ➞ [ [7, 13, 19] ]\n// 7 + 6 = 13 + 6 = 19 and 7 + 18 = 25 (composite)\n\nsexyTriplets(5, 17) ➞ []\n// Despite [5, 11, 17] can seem a triplet, 5 + 18 = 23 (not composite)\n\nsexyTriplets(64, 88) ➞ [ [67, 73, 79] ]\n// 67 + 6 = 73 + 6 = 79 and 67 + 18 = 85 (composite)</code></pre><h3><span>Notes</span></h3><ul><li><span>If no triplets are found in the range, return an empty array (see example #2).</span></li><li><span>A composite number is trivially a </span><strong><span>not</span></strong><span> prime number.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(sexyTriplets(1, 19), [[7, 13, 19]], \"Example #1\")",
			"Test.assertSimilar(sexyTriplets(1, 17), [], \"Example #2\")",
			"Test.assertSimilar(sexyTriplets(64, 88), [[67, 73, 79]], \"Example #3\")",
			"Test.assertSimilar(sexyTriplets(11, 59), [[17, 23, 29], [31, 37, 43], [47, 53, 59]])",
			"Test.assertSimilar(sexyTriplets(17, 29), [[17, 23, 29]])",
			"Test.assertSimilar(sexyTriplets(109, 275), [[151, 157, 163], [167, 173, 179], [227, 233, 239], [257, 263, 269]])",
			"Test.assertSimilar(sexyTriplets(1000, 1080), [])",
			"Test.assertSimilar(sexyTriplets(5842, 6333), [[6067, 6073, 6079], [6257, 6263, 6269], [6317, 6323, 6329]])",
			"Test.assertSimilar(sexyTriplets(45000, 45777), [[45427, 45433, 45439], [45491, 45497, 45503], [45751, 45757, 45763]])"
		],
		"starterFn": [
			"1\nfunction sexyTriplets(low, high) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gn6kggvxAFfuMDsDJ"
	},
	{
		"title": "Sort by the Letters",
		"description": "<p><span>Write a function that sort each string in an array by the letter in alphabetic ascending order (</span><code>a-z</code><span>).</span></p><h3><span>Examples</span></h3><pre><code>sortByLetter([\"932c\", \"832u32\", \"2344b\"])\n➞ [\"2344b\", \"932c\", \"832u32\"]\n\nsortByLetter([\"99a\", \"78b\", \"c2345\", \"11d\"])\n➞ [\"99a\", \"78b\", \"c2345\", \"11d\"]\n\nsortByLetter([\"572z\", \"5y5\", \"304q2\"])\n➞ [\"304q2\", \"5y5\", \"572z\"]\n\nsortByLetter([])\n➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>Each string will only have one (lowercase) letter.</span></li><li><span>If given an empty array, return an empty array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(sortByLetter([\"932c\", \"832u32\", \"2344b\"]), [\"2344b\", \"932c\", \"832u32\"])",
			"Test.assertSimilar(sortByLetter([\"99a\", \"78b\", \"c2345\", \"11d\"]), [\"99a\", \"78b\", \"c2345\", \"11d\"])",
			"Test.assertSimilar(sortByLetter([\"572z\", \"5y5\", \"304q2\"]), [\"304q2\", \"5y5\", \"572z\"])",
			"Test.assertSimilar(sortByLetter([]), [])"
		],
		"starterFn": [
			"1\nfunction sortByLetter(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HwC7ryWNW6qvc5cN7"
	},
	{
		"title": "Poker Flush?",
		"description": "<p><span>Create a function that takes in two arrays and determines whether there exists a flush. </span></p><ul><li><span>The first array represents the 5 cards dealt on the table. </span></li><li><span>The second array represents the 2 cards in your hand. </span></li></ul><p><span>Notation: card number and suit (abbreviated as S = Spades, H = Hearts, D = Diamonds, C = Clubs) separated by an underscore. </span></p><h3><span>Examples</span></h3><pre><code>checkFlush([\"A_S\", \"J_H\", \"7_D\", \"8_D\", \"10_D\"], [\"J_D\", \"3_D\"]) ➞ true // diamond flush\n\ncheckFlush([\"10_S\", \"7_S\", \"9_H\", \"4_S\", \"3_S\"], [\"K_S\", \"Q_S\"]) ➞ true // spade flush\n\ncheckFlush([\"3_S\", \"10_H\", \"10_D\", \"10_C\", \"10_S\"], [\"3_S\", \"4_D\"]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Hint: If there aren't at least 3 cards of the same suit on the table, there is zero chance of there being a flush.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"control_flow",
			"games"
		],
		"tests": [
			"Test.assertEquals(checkFlush(['A_S', 'J_H', '7_D', '8_D', '10_D'], ['J_D', '3_D']), true);",
			"Test.assertEquals(checkFlush(['10_S', '7_S', '9_H', '4_S', '3_S'], ['K_S', 'Q_S']), true);",
			"Test.assertEquals(checkFlush(['3_S', '10_H', '10_D', '10_C', '10_S'], ['3_S', '4_D']), false);",
			"Test.assertEquals(checkFlush(['8_H', '10_H', '10_D', 'J_H', '10_S'], ['5_D', 'Q_H']), false);"
		],
		"starterFn": [
			"1\nfunction checkFlush(table, hand) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/StoCYdQvX2i7zaNLY"
	},
	{
		"title": "3D Visual Block Sequence",
		"description": "<p><span>A block sequence in three dimensions. We can write a formula for this one:</span></p><p><img alt=\"Sequence Step 1 - 5\" title=\"Sequence Step 1 - 5\" src=\"https://edabit-challenges.s3.amazonaws.com/3d_blocks.png\"></p><p><span>Create a function that takes a number (step) as an argument and returns the amount of blocks in that step.</span></p><h3><span>Examples</span></h3><pre><code>blocks(1) ➞ 5\n\nblocks(5) ➞ 39\n\nblocks(2) ➞ 12</code></pre><h3><span>Notes</span></h3><ul><li><span>Step 0 obviously has to return </span><code>0</code><span>.</span></li><li><span>The input is always a positive integer.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for a video on finding quadratic sequences.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(blocks(77), 3387)",
			"Test.assertEquals(blocks(33), 725)",
			"Test.assertEquals(blocks(50), 1524)",
			"Test.assertEquals(blocks(21), 335)",
			"Test.assertEquals(blocks(12), 137)",
			"Test.assertEquals(blocks(30), 614)",
			"Test.assertEquals(blocks(93), 4835)",
			"Test.assertEquals(blocks(53), 1695)",
			"Test.assertEquals(blocks(71), 2910)",
			"Test.assertEquals(blocks(36), 845)",
			"Test.assertEquals(blocks(8), 75)",
			"Test.assertEquals(blocks(100), 5549)",
			"Test.assertEquals(blocks(95), 5034)",
			"Test.assertEquals(blocks(46), 1310)",
			"Test.assertEquals(blocks(63), 2330)",
			"Test.assertEquals(blocks(54), 1754)",
			"Test.assertEquals(blocks(15), 194)",
			"Test.assertEquals(blocks(45), 1259)",
			"Test.assertEquals(blocks(64), 2399)",
			"Test.assertEquals(blocks(46), 1310)",
			"Test.assertEquals(blocks(68), 2685)",
			"Test.assertEquals(blocks(46), 1310)",
			"Test.assertEquals(blocks(23), 390)",
			"Test.assertEquals(blocks(62), 2262)",
			"Test.assertEquals(blocks(55), 1814)",
			"Test.assertEquals(blocks(95), 5034)"
		],
		"starterFn": [
			"1\nfunction blocks(step) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MevNu8jwsPC8ghS7B"
	},
	{
		"title": "Building up a Word",
		"description": "<p><span>You are given an input array of strings, ordered by ascending length.</span></p><p><span>Write a function that returns </span><code>true</code><span> if, for each pair of consecutive strings, the second string can be formed from the first by adding a </span><strong><span>single letter</span></strong><span> either at the </span><strong><span>beginning or end</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>canBuild([\"a\", \"at\", \"ate\", \"late\", \"plate\", \"plates\"]) ➞ true\n\ncanBuild([\"a\", \"at\", \"ate\", \"late\", \"plate\", \"plater\", \"platter\"]) ➞ false\n// \"platter\" is formed by adding \"t\" in the middle of \"plater\"\n\ncanBuild([\"it\", \"bit\", \"bite\", \"biters\"]) ➞ false\n// \"biters\" is formed by adding two letters - we can only add one\n\ncanBuild([\"mean\", \"meany\"]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Return </span><code>false</code><span> a word is </span><strong><span>NOT</span></strong><span> formed by adding </span><strong><span>only one letter</span></strong><span>.</span></li><li><span>Return </span><code>false</code><span> if the letter is added to the </span><strong><span>middle</span></strong><span> of the previous word.</span></li><li><span>Letters in tests will all be </span><strong><span>lower case</span></strong><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canBuild(['a', 'at', 'ate', 'late', 'plate', 'plates']), true)",
			"Test.assertEquals(canBuild(['u', 'ut', 'but', 'butt', 'butte', 'butter', 'buttery']), true)",
			"Test.assertEquals(canBuild(['a', 'ka', 'ika', 'pika', 'pikac', 'pikach', 'pikachu']), true)",
			"Test.assertEquals(canBuild(['a', 'at', 'tat', 'stat', 'state', 'estate', 'estates']), true)",
			"Test.assertEquals(canBuild(['o', 'ol', 'old', 'bold', 'bolde', 'mbolde', 'embolde', 'embolden']), true)",
			"Test.assertEquals(canBuild(['mean', 'meany']), true)",
			"Test.assertEquals(canBuild(['at', 'cat', 'cate', 'cater', 'caters']), true)",
			"Test.assertEquals(canBuild(['a', 'at', 'ate', 'late', 'plate', 'plater', 'platter']), false)",
			"Test.assertEquals(canBuild(['i', 'it', 'bit', 'bite', 'biters']), false)",
			"Test.assertEquals(canBuild(['e', 'tea', 'teac', 'teach', 'teache', 'teacher', 'teachers']), false)",
			"Test.assertEquals(canBuild(['m', 'ma', 'man', 'many', 'meany']), false)",
			"Test.assertEquals(canBuild(['o', 'op', 'top', 'stop', 'stops', 'stoops']), false)",
			"Test.assertEquals(canBuild(['air', 'air', 'airy', 'fairy']), false)",
			"Test.assertEquals(canBuild(['men', 'mean', 'meany']), false)"
		],
		"starterFn": [
			"1\nfunction canBuild(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/P7SoyRXhQrhdZTFak"
	},
	{
		"title": "Swap X and Y Coordinates",
		"description": "<p><span>Write a function that swaps the X and Y coordinates in a string.</span></p><h3><span>Examples</span></h3><pre><code>swapXY(\"(1, 2), (3, 4)\") ➞ \"(2, 1), (4, 3)\"\n\nswapXY(\"(11, 23), (43, 99)\") ➞ \"(23, 11), (99, 43)\"\n\nswapXY(\"(-5, -3), (7, 4)\") ➞ \"(-3, -5), (4, 7)\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Some numbers have multiple digits.</span></li><li><span>Some numbers will be negative.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(swapXY(\"(1, 2), (3, 4)\"), \"(2, 1), (4, 3)\")",
			"Test.assertEquals(swapXY(\"(11, 23), (43, 99)\"), \"(23, 11), (99, 43)\")",
			"Test.assertEquals(swapXY(\"(-5, -3), (7, 4)\"), \"(-3, -5), (4, 7)\")",
			"Test.assertEquals(swapXY(\"(-1095, -321), (0, -88)\"), \"(-321, -1095), (-88, 0)\")"
		],
		"starterFn": [
			"1\nfunction swapXY(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tu8YN5dpi56vWozDS"
	},
	{
		"title": "Sort Positives, Keep Negatives",
		"description": "<p><span>Write a function that sorts the </span><strong><span>positive numbers</span></strong><span> in </span><strong><span>ascending order</span></strong><span>, and keeps the </span><strong><span>negative numbers</span></strong><span> untouched.</span></p><h3><span>Examples</span></h3><pre><code>posNegSort([6, 3, -2, 5, -8, 2, -2]) ➞ [2, 3, -2, 5, -8, 6, -2]\n\nposNegSort([6, 5, 4, -1, 3, 2, -1, 1]) ➞ [1, 2, 3, -1, 4, 5, -1, 6]\n\nposNegSort([-5, -5, -5, -5, 7, -5]) ➞ [-5, -5, -5, -5, 7, -5]\n\nposNegSort([]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If given an empty array, you should return an empty array.</span></li><li><span>Integers will always be either positive or negative (0 isn't included in the tests).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"control_flow",
			"loops",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(posNegSort([6, 3, -2, 5, -8, 2, -2]), [2, 3, -2, 5, -8, 6, -2])",
			"Test.assertSimilar(posNegSort([6, 5, 4, -1, 3, 2, -1, 1]), [1, 2, 3, -1, 4, 5, -1, 6])",
			"Test.assertSimilar(posNegSort([-5, -5, -5, -5, 7, -5]), [-5, -5, -5, -5, 7, -5])",
			"Test.assertSimilar(posNegSort([-5, -5, -5, -5, -4, -5]), [-5, -5, -5, -5, -4, -5])",
			"Test.assertSimilar(posNegSort([-5, 4, -8, 3, -1, 2, 1, -7]), [-5, 1, -8, 2, -1, 3, 4, -7])",
			"Test.assertSimilar(posNegSort([-5, 4, 3]), [-5, 3, 4])",
			"Test.assertSimilar(posNegSort([]), [])"
		],
		"starterFn": [
			"1\nfunction posNegSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PXdBA2Qoahd2xhNT5"
	},
	{
		"title": "Reverse Letters, Keep Numbers in Place",
		"description": "<p><span>Create a function that reverses letters in a string but keeps digits in their current order.</span></p><h3><span>Examples</span></h3><pre><code>reverse(\"ab89c\") ➞ \"cb89a\"\n\nreverse(\"jkl5mn923o\") ➞ \"onm5lk923j\"\n\nreverse(\"123a45\") ➞ \"123a45\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverse(\"ab89c\"), \"cb89a\")",
			"Test.assertEquals(reverse(\"jkl5mn923o\"), \"onm5lk923j\")",
			"Test.assertEquals(reverse(\"123a45\"), \"123a45\")",
			"Test.assertEquals(reverse(\"a1b1c\"), \"c1b1a\")"
		],
		"starterFn": [
			"1\nfunction reverse(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ps7nX3XdCLDN4Z33y"
	},
	{
		"title": "Longest Common Ending",
		"description": "<p><span>Write a function that returns the </span><strong><span>longest common ending</span></strong><span> between two strings.</span></p><h3><span>Examples</span></h3><pre><code>longestCommonEnding(\"multiplication\", \"ration\") ➞ \"ation\"\n\nlongestCommonEnding(\"potent\", \"tent\") ➞ \"tent\"\n\nlongestCommonEnding(\"skyscraper\", \"carnivore\") ➞ \"\"</code></pre><h3><span>Notes</span></h3><p><span>Return an empty string if there exists no common ending.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(longestCommonEnding(\"pitiful\", \"beautiful\"), \"tiful\")",
			"Test.assertEquals(longestCommonEnding(\"truck\", \"trick\"), \"ck\")",
			"Test.assertEquals(longestCommonEnding(\"vote\", \"asymptote\"), \"ote\")",
			"Test.assertEquals(longestCommonEnding(\"multiplication\", \"ration\"), \"ation\")",
			"Test.assertEquals(longestCommonEnding(\"potent\", \"tent\"), \"tent\")",
			"Test.assertEquals(longestCommonEnding(\"skyscraper\", \"carnivore\"), \"\")"
		],
		"starterFn": [
			"1\nfunction longestCommonEnding(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FGuBhmmvXgkvvTQHc"
	},
	{
		"title": "Persistence",
		"description": "<p><span>If you take an integer and form the product of it's individual digits, you get a smaller number. Keep doing this and eventually you end up with a single digit.</span></p><p><span>The number of steps it takes to reach this point is the integer's multiplicative persistence. For example, 347 has a persistence of 3: </span><code>3*4*7 = 84, 8*4 = 32, 3*2 = 6</code><span>.</span></p><p><span>Devise a function that returns the persistence of an integer.</span></p><h3><span>Examples</span></h3><pre><code>persistence(9) ➞ 0\n\npersistence(12) ➞ 1\n\npersistence(6788) ➞ 6\n\npersistence(678852) ➞ 2</code></pre><h3><span>Notes</span></h3><ul><li><span>The smallest number with persistence 11 is 277777788888899.</span></li><li><span>A number has never been found, no matter how large, that has a persistence greater than 11.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(persistence(0), 0)",
			"Test.assertEquals(persistence(10), 1)",
			"Test.assertEquals(persistence(25), 2)",
			"Test.assertEquals(persistence(39), 3)",
			"Test.assertEquals(persistence(77), 4)",
			"Test.assertEquals(persistence(679), 5)",
			"Test.assertEquals(persistence(6788), 6)",
			"Test.assertEquals(persistence(68889), 7)",
			"Test.assertEquals(persistence(2677889), 8)",
			"Test.assertEquals(persistence(26888999), 9)",
			"Test.assertEquals(persistence(3778888999), 10)",
			"Test.assertEquals(persistence(277777788888899), 11)"
		],
		"starterFn": [
			"1\nfunction persistence(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hLZPoBBa745aWAsnm"
	},
	{
		"title": "Prime Factorization of an Integer",
		"description": "<p><span>Create a function that returns an array containing the prime factors of whatever integer is passed to it.</span></p><h3><span>Examples</span></h3><pre><code>primeFactors(20) ➞ [2, 2, 5]\n\nprimeFactors(100) ➞ [2, 2, 5, 5]\n\nprimeFactors(8912234) ➞ [2, 47, 94811]</code></pre><h3><span>Notes</span></h3><ul><li><span>Implement your solution using trial division.</span></li><li><span>Your solution should not require recursion.</span></li></ul>",
		"publishedBy": "rthom2178",
		"publishedByUrl": "https://edabit.com/user/PHnPzYBDCCrBf8ytQ",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(primeFactors(20), [2, 2, 5])",
			"Test.assertSimilar(primeFactors(100), [2, 2, 5, 5])",
			"Test.assertSimilar(primeFactors(8912234), [2, 47, 94811])"
		],
		"starterFn": [
			"1\nfunction primeFactors(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/azvHrxCsbn7GrRu8y"
	},
	{
		"title": "Checkerboard Generator",
		"description": "<p><span>Create a </span><strong><span>checker board generator</span></strong><span>, which takes as inputs </span><code>n</code><span> and </span><code>2 elements</code><span> to generate an </span><code>n x n</code><span> checkerboard with those two elements as alternating squares.</span></p><h3><span>Examples</span></h3><pre><code>checkerBoard(2, 7, 6) ➞ [\n  [7, 6],\n  [6, 7]\n]\n\ncheckerBoard(3, \"A\", \"B\") ➞ [\n  [\"A\", \"B\", \"A\"],\n  [\"B\", \"A\", \"B\"],\n  [\"A\", \"B\", \"A\"]\n]\n\ncheckerBoard(4, \"c\", \"d\") ➞ [\n  [\"c\", \"d\", \"c\", \"d\"],\n  [\"d\", \"c\", \"d\", \"c\"],\n  [\"c\", \"d\", \"c\", \"d\"],\n  [\"d\", \"c\", \"d\", \"c\"]\n]\n\ncheckerBoard(4, \"c\", \"c\") ➞ \"invalid\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Both elements can be either strings or integers.</span></li><li><span>The first element should be on the upper left corner of the checker board. e.g. \"c\", not \"d\" should be element </span><code>[0][0]</code><span>  for example 3.</span></li><li><span>Return \"invalid\" if both inputs are identical (see example 4).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(checkerBoard(3, 'A', 'B'), [",
			"  ['A', 'B', 'A'],",
			"  ['B', 'A', 'B'],",
			"  ['A', 'B', 'A']",
			"])",
			"​",
			"Test.assertSimilar(checkerBoard(2, 7, 6), [",
			"  [7, 6],",
			"  [6, 7]",
			"])",
			"​",
			"Test.assertSimilar(checkerBoard(3, 1, 0), [",
			"  [1, 0, 1],",
			"  [0, 1, 0],",
			"  [1, 0, 1]",
			"])",
			"​",
			"Test.assertSimilar(checkerBoard(3, 0, 1), [",
			"  [0, 1, 0],",
			"  [1, 0, 1],",
			"  [0, 1, 0]",
			"])",
			"​",
			"Test.assertSimilar(checkerBoard(4, 'c', 'd'), [",
			"  ['c', 'd', 'c', 'd'],",
			"  ['d', 'c', 'd', 'c'],"
		],
		"starterFn": [
			"1\nfunction checkerBoard(n, el1, el2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TaH2g7iSJBHgqJemi"
	},
	{
		"title": "Add Dollar Bills",
		"description": "<p><span>Create a function that takes a string containing money in dollar and pound sterling seperated by comma and returns the sum of </span><strong><span>$ bills only</span></strong><span>. The return value should be a </span><strong><span>number</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>addBill(\"$20, £40, £60, $50\") ➞ 70\n// 20 + 50 = 70\n\naddBill(\"£30, $20, £60, $150, £360\") ➞ 170\n// 20  + 150 = 170\n\naddBill(\"£30, $2k, £60, $200, £360\") ➞ 2200\n// 2 * 1000 + 200 = 2200</code></pre><h3><span>Notes</span></h3><ul><li><span>There is at least a dollar bill in string.</span></li><li><span>1k = 1000</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(addBill(\"$200, £40, £60, $1k\"), 1200)",
			"Test.assertEquals(addBill(\"$10, $40, £60, $200\"), 250)",
			"Test.assertEquals(addBill(\"$10k\"), 10000)",
			"Test.assertEquals(addBill(\"£400, $200, £40, £60\"), 200)",
			"Test.assertEquals(addBill(\"$20k, $100, £40\"), 20100)",
			"Test.assertEquals(addBill(\"$100\"), 100)",
			"Test.assertEquals(addBill(\"$100k\"), 100000)"
		],
		"starterFn": [
			"1\nfunction addBill(money) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/74z6ajLYX4oLAF5zb"
	},
	{
		"title": "Words With Duplicate Letters",
		"description": "<p><span>Given a common phrase, return </span><code>false</code><span> if </span><em><span>any</span></em><span> individual word in the phrase contains </span><em><span>duplicate</span></em><span> letters. Return </span><code>true</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>noDuplicateLetters(\"Fortune favours the bold.\") ➞ true\n\nnoDuplicateLetters(\"You can lead a horse to water, but you can't make him drink.\") ➞ true\n\nnoDuplicateLetters(\"Look before you leap.\") ➞ false\n// Duplicate letters in \"Look\" and \"before\".\n\nnoDuplicateLetters(\"An apple a day keeps the doctor away.\") ➞ false\n// Duplicate letters in \"apple\", \"keeps\", \"doctor\", and \"away\".</code></pre><h3><span>Notes</span></h3><p><span>Letter matches are case-insensitive.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(noDuplicateLetters(\"Easy does it.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"So far, so good.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"Better late than never.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"Beat around the bush.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"Give them the benefit of the doubt.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"Your guess is as good as mine.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"Make a long story short.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"Go back to the drawing board.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"Wrap your head around something.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"Get your act together.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"To make matters worse.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"No pain, no gain.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"We'll cross that bridge when we come to it.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"Call it a day.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"It's not rocket science.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"A blessing in disguise.\"), false)",
			"Test.assertEquals(noDuplicateLetters(\"Get out of hand.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"A dime a dozen.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"Time flies when you're having fun.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"The best of both worlds.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"Speak of the devil.\"), true)",
			"Test.assertEquals(noDuplicateLetters(\"You can say that again.\"), false)"
		],
		"starterFn": [
			"1\nfunction noDuplicateLetters(phrase) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ztJZiCZeXATC9KDHX"
	},
	{
		"title": "Briefcase Lock",
		"description": "<p><span>A briefcase has a 4-digit </span><strong><span>rolling-lock</span></strong><span>. Each digit is a number from </span><code>0-9</code><span> that can be rolled either forwards or backwards.</span></p><p><span>Create a function that returns the smallest number of turns it takes to transform the lock from the current combination to the target combination. One turn is equivalent to rolling a number forwards or backwards by one.</span></p><p><span>To illustrate:</span></p><ul><li><strong><span>current-lock</span></strong><span>: 4089</span></li><li><strong><span>target-lock</span></strong><span>: 5672</span></li></ul><p><span>What is the minimum number of turns it takes to transform </span><code>4089</code><span> to </span><code>5672</code><span>? </span></p><pre><code>4 ➞ 5\n4 ➞ 5  // Forward Turns: 1 &lt;- Min\n4 ➞ 3 ➞ 2 ➞ 1 ➞ 0 ➞ 9 ➞ 8 ➞ 7 ➞ 6 ➞ 5  // Backward Turns: 9\n\n0 ➞ 6\n0 ➞ 1 ➞ 2 ➞ 3 ➞ 4 ➞ 5 ➞ 6  // Forward Turns: 6\n0 ➞ 9 ➞ 8 ➞ 7 ➞ 6  // Backward Turns: 4  &lt;- Min\n\n8 ➞ 7\n8 ➞ 9 ➞ 0 ➞ 1 ➞ 2 ➞ 3 ➞ 4 ➞ 5 ➞ 6 ➞ 7  // Forward Turns: 9\n8 ➞ 7  // Backward Turns: 1  &lt;- Min\n\n9 ➞ 2\n9 ➞ 0 ➞ 1 ➞ 2  // Forward Turns: 3  &lt;- Min\n9 ➞ 8 ➞ 7 ➞ 6 ➞ 5 ➞ 4 ➞ 3 ➞ 2  // Backward Turns: 7</code></pre><p><span>It takes </span><code>1 + 4 + 1 + 3 = 9</code><span> minimum turns to change the lock from </span><code>4089</code><span> to </span><code>5672</code><span>. </span></p><h3><span>Examples</span></h3><pre><code>minTurns(\"4089\", \"5672\") ➞ 9\n\nminTurns(\"1111\", \"1100\") ➞ 2\n\nminTurns(\"2391\", \"4984\") ➞ 10</code></pre><h3><span>Notes</span></h3><ul><li><span>Both locks are in string format.</span></li><li><span>A </span><code>9</code><span> rolls forward to </span><code>0</code><span>, and a </span><code>0</code><span> rolls backwards to a </span><code>9</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertEquals(minTurns(\"4089\", \"5672\"), 9)",
			"Test.assertEquals(minTurns(\"1732\", \"4444\"), 9)",
			"Test.assertEquals(minTurns(\"7109\", \"2332\"), 13)",
			"Test.assertEquals(minTurns(\"2391\", \"4984\"), 10)",
			"Test.assertEquals(minTurns(\"1234\", \"3456\"), 8)",
			"Test.assertEquals(minTurns(\"1111\", \"1100\"), 2)",
			"Test.assertEquals(minTurns(\"1111\", \"0000\"), 4)",
			"Test.assertEquals(minTurns(\"0000\", \"9999\"), 4)"
		],
		"starterFn": [
			"1\nfunction minTurns(current, target) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sWo3y2WgtGDDtRtrB"
	},
	{
		"title": "Histogram Function",
		"description": "<p><span>Build a function that creates histograms. Every bar needs to be on a new line and its length corresponds to the numbers in the array passed as an argument. The  second argument of the function represents the character to be used for the </span><em><span>bar</span></em><span>.</span></p><pre><code>histogram(arr, char) ➞ str</code></pre><h3><span>Examples</span></h3><pre><code>histogram([1, 3, 4], \"#\") ➞ \"#\\n###\\n####\"\n\n#\n###\n####\n\nhistogram([6, 2, 15, 3], \"=\") ➞ \"======\\n==\\n===============\\n===\"\n\n======\n==\n===============\n===\n\nhistogram([1, 10], \"+\") ➞ \"+\\n++++++++++\"\n\n+\n++++++++++</code></pre><h3><span>Notes</span></h3><p><span>For better understanding try printing out the result.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(histogram([2,4,5,6], \"o\"), 'oo\\noooo\\nooooo\\noooooo')",
			"Test.assertEquals(histogram([4,2], \"*\"), '****\\n**')",
			"Test.assertEquals(histogram([20,1,12], \"H\"), 'HHHHHHHHHHHHHHHHHHHH\\nH\\nHHHHHHHHHHHH')",
			"Test.assertEquals(histogram([2,1,2,4,5,2,3], \"#\"), '##\\n#\\n##\\n####\\n#####\\n##\\n###')"
		],
		"starterFn": [
			"1\nfunction histogram(arr, char) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/st8SZGoa3WE8Xrhf7"
	},
	{
		"title": "Array of Prime Factors",
		"description": "<p><span>Write a function that returns the extended form of the prime factorization of a number. Return in the format </span><code>[a, b, c, d, ...]</code><span>, where each element of the array is an integer.</span></p><h3><span>Examples</span></h3><pre><code>primeFactorization(216) ➞ [2, 2, 2, 3, 3, 3]\n\nprimeFactorization(64) ➞ [2, 2, 2, 2, 2, 2]\n\nprimeFactorization(23) ➞ [23]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(primeFactorization(8), [2, 2, 2])",
			"Test.assertSimilar(primeFactorization(99), [3, 3, 11])",
			"Test.assertSimilar(primeFactorization(1), [])",
			"Test.assertSimilar(primeFactorization(57), [3, 19])",
			"Test.assertSimilar(primeFactorization(100), [2, 2, 5, 5])"
		],
		"starterFn": [
			"1\nfunction primeFactorization(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kHaeYQkdSmcmr8eZM"
	},
	{
		"title": "Binary To Text",
		"description": "<p><span>Create a function that takes a binary string and returns the text. The eight bits on the binary string represent 1 character on the ASCII table. For further info, check out the resource tab.</span></p><h3><span>Examples</span></h3><pre><code>binaryText(\"01101110011011110110010001100101\") ➞ \"node\"\n\nbinaryText('0111001001100101011000010110001101110100') ➞ \"react\"\n\nbinaryText(\"011100000111100101110100011010000110111101101110\") ➞ \"python\"</code></pre><h3><span>Notes</span></h3><p><span>Inputs are all valid strings.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(binaryText(\"01110100011110010111000001100101011100110110001101110010011010010111000001110100\"), \"typescript\")",
			"Test.assertEquals(binaryText(\"01101110011011110110010001100101\"), \"node\")",
			"Test.assertEquals(binaryText(\"0111001001100101011000010110001101110100\"), \"react\")",
			"Test.assertEquals(binaryText(\"01101010011000010111011001100001\"), \"java\")",
			"Test.assertEquals(binaryText(\"011010110110111101110100011011000110100101101110\"), \"kotlin\")",
			"Test.assertEquals(binaryText(\"011100000111100101110100011010000110111101101110\"), \"python\")",
			"Test.assertEquals(binaryText(\"01101000011000010111001101101011011001010110110001101100\"), \"haskell\")"
		],
		"starterFn": [
			"1\nfunction binaryText(n){",
			"2\n   ",
			"3\n}",
			"4\n  "
		],
		"url": "https://edabit.com/challenge/qEAaAxNa9v2WZMrEv"
	},
	{
		"title": "Current Streak",
		"description": "<p><span>Create a function that takes the current day (e.g. </span><code>\"2019-09-30\"</code><span>), an array of date objects and returns the \"current streak\" (i.e. number of consecutive days in a row).</span></p><h3><span>Examples</span></h3><pre><code>currentStreak(\"2019-09-23\", [\n  {\n    \"date\": \"2019-09-18\"\n  },\n  {\n    \"date\": \"2019-09-19\"\n  },\n  {\n    \"date\": \"2019-09-21\"\n  },\n  {\n    \"date\": \"2019-09-22\"\n  },\n  {\n    \"date\": \"2019-09-23\"\n  }\n]) ➞ 3\n\ncurrentStreak(\"2019-09-25\", [\n  {\n    \"date\": \"2019-09-16\"\n  },\n  {\n    \"date\": \"2019-09-17\"\n  },\n  {\n    \"date\": \"2019-09-21\"\n  },\n  {\n    \"date\": \"2019-09-22\"\n  },\n  {\n    \"date\": \"2019-09-23\"\n  }\n]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>The array of dates is sorted chronologically.</span></li><li><span>The </span><code>today</code><span> parameter will always be greater than or equal to the last date in the array.</span></li><li><span>An empty array should return </span><code>0</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"games",
			"loops",
			"objects"
		],
		"tests": [
			"Test.assertEquals(currentStreak(\"1985-03-19\", [",
			"  {",
			"    \"date\": \"1985-03-19\"",
			"  }",
			"]), 1)",
			"​",
			"Test.assertEquals(currentStreak(\"2019-09-23\", [",
			"  {",
			"    \"date\": \"2019-09-18\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-19\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-21\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-22\"",
			"  },",
			"  {",
			"    \"date\": \"2019-09-23\"",
			"  }",
			"]), 3)",
			"​",
			"Test.assertEquals(currentStreak(\"2019-09-30\", [",
			"  {"
		],
		"starterFn": [
			"1\nfunction currentStreak(today, arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QxdWqug8d8vkMtobH"
	},
	{
		"title": "Tally Marks",
		"description": "<p><span>Create a function that can convert from </span><strong><span>normal notation</span></strong><span> to </span><strong><span>tally-mark notation</span></strong><span> and vice versa. In tally-mark notation, a number can be decomposed as the sum of </span><code>5</code><span>s + </span><code>remainder</code><span>.</span></p><p><span>The function will look like this: </span><code>switchNotation([current scores], desired notation)</code></p><pre><code>Ex.1 Normal: 3, 24, 4, 9\nEx.1 Tally: 3, 55554, 4, 54\n\nEx.2 Normal: 2, 12, 2, 4\nEx.2 Tally: 2, 552, 2, 4</code></pre><h3><span>Examples</span></h3><pre><code>switchNotation([51], \"normal\") ➞ [6]\n\nswitchNotation([3, 55, 55551], \"normal\") ➞ [3, 10, 21]\n\nswitchNotation([15, 29, 5, 3], \"tally\") ➞ [555, 555554, 5, 3]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(switchNotation([3, 55, 55551], 'normal'), [3, 10, 21])",
			"Test.assertSimilar(switchNotation([553, 55, 51], 'normal'), [13, 10, 6])",
			"Test.assertSimilar(switchNotation([51], 'normal'), [6])",
			"Test.assertSimilar(switchNotation([555, 55, 5], 'normal'), [15, 10, 5])",
			"Test.assertSimilar(switchNotation([15, 29, 5, 3], 'tally'), [555, 555554, 5, 3])",
			"Test.assertSimilar(switchNotation([3, 8, 8, 6], 'tally'), [3, 53, 53, 51])",
			"Test.assertSimilar(switchNotation([3, 44, 8, 21], 'tally'), [3, 555555554, 53, 55551])"
		],
		"starterFn": [
			"1\nfunction switchNotation(scores, desired_notation) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ufYYJX5CsmSbXazcr"
	},
	{
		"title": "Reverse Coding Challenge #2",
		"description": "<p><span>This is a </span><strong><span>reverse coding challenge</span></strong><span>.</span></p><p><span>Your task is to create a function that, when fed the inputs below, produce the sample outputs shown.</span></p><h3><span>Examples</span></h3><pre><code>3 ➞ 21\n\n9 ➞ 2221\n\n17 ➞ 22221\n\n24 ➞ 22228</code></pre><h3><span>Notes</span></h3><p><span>If you get stuck, check the </span><strong><span>Comments</span></strong><span> for help.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(mysteryFunc(3), 21)",
			"Test.assertEquals(mysteryFunc(9), 2221)",
			"Test.assertEquals(mysteryFunc(15), 2227)",
			"Test.assertEquals(mysteryFunc(17), 22221)",
			"Test.assertEquals(mysteryFunc(19), 22223)",
			"Test.assertEquals(mysteryFunc(24), 22228)",
			"Test.assertEquals(mysteryFunc(35), 222223)"
		],
		"starterFn": [
			"1\nfunction mysteryFunc(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YxtBN5uCTSCqoZofd"
	},
	{
		"title": "Lychrel Numbers",
		"description": "<p><span>The following is the Lychrel test.</span></p><p><span>Start with any positive number. Add the number with the number formed by reversing its digits. Is the sum a palindrome? If not, repeat the process.</span></p><p><span>For most numbers, a palindrome is produced after a few iterations (7 or fewer) of the process above. Numbers that never reach a palindrome are called </span><strong><em><span>Lychrel</span></em></strong><span> numbers. No number in base 10 has been </span><em><span>proven</span></em><span> to be a Lychrel number, but numbers that don't produce palindromes after an unusually high number of iterations of the reverse-and-add process are said to be </span><strong><em><span>Lychrel candidates</span></em></strong></p><p><span>Create a function that takes a number and returns </span><code>true</code><span> if it is a Lychrel candidate. If it isn't, return the number of reverse-and-add iterations it takes to produce a palindrome. For this challenge, the threshold for a Lychrel candidate is </span><strong><span>&gt;=500</span></strong><span> iterations.</span></p><h3><span>Examples</span></h3><pre><code>lychrel(33) ➞ 0\n// Already a palindrome.\n\nlychrel(65) ➞ 1\n// 65+56 -&gt; 121\n\nlychrel(348) ➞ 3\n// 348+843 -&gt; 1191+1911 -&gt; 3102+2013 -&gt; 5115\n\nlychrel(295) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(lychrel(33), 0)",
			"Test.assertEquals(lychrel(65), 1)",
			"Test.assertEquals(lychrel(348), 3)",
			"Test.assertEquals(lychrel(196), true)",
			"Test.assertEquals(lychrel(89), 24)",
			"Test.assertEquals(lychrel(7582), 4)",
			"Test.assertEquals(lychrel(1945), true)",
			"Test.assertEquals(lychrel(3673), true)",
			"Test.assertEquals(lychrel(9485367), 2)",
			"Test.assertEquals(lychrel(695), 3)"
		],
		"starterFn": [
			"1\nfunction lychrel(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/d8gGWEAJuxaPrGoiT"
	},
	{
		"title": "Re-Map a Number from One Range to Another",
		"description": "<p><span>Create a function similar to Processings \"map\" function (check the </span><strong><span>Resources</span></strong><span> tab), in which a value and it's range is taken and remapped to a new range.</span></p><p><span>The function takes 5 numbers:</span></p><ul><li><span>Value: </span><code>value</code></li><li><span>Range: </span><code>low1</code><span> and </span><code>high1</code></li><li><span>Range: </span><code>low2</code><span> and </span><code>high2</code></li></ul><h3><span>Examples</span></h3><pre><code>remap(7, 2, 12, 0, 100) ➞ 50\n\nremap(17, 5, 55, 100, 30) ➞ 83.2\n\nremap(50, 1, 51, 0, 100) ➞ 98</code></pre><h3><span>Notes</span></h3><ul><li><span>Your test input will always be numbers.</span></li><li><span>If the input range is </span><code>0</code><span>, return </span><code>0</code><span>.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(remap(7, 2, 12, 0, 100), 50)",
			"Test.assertEquals(remap(17, 5, 55, 100, 30), 83.2)",
			"Test.assertEquals(remap(2.5, 2, 3, -80, 80), 0)",
			"Test.assertEquals(remap(50, 1, 51, 0, 100), 98)",
			"Test.assertEquals(remap(0, 0, 0, 0, 0), 0, 'The input range is 0.')",
			"Test.assertEquals(remap(20, 10, 50, 50, 10), 40)",
			"Test.assertEquals(remap(0, 5, -20, 60, 1000), 248)",
			"Test.assertEquals(remap(17, 17, 17, 519, 1085), 0, 'The input range is 0.')"
		],
		"starterFn": [
			"1\nfunction remap(value, low1, high1, low2, high2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/roCH4n2xnBjLoXfjv"
	},
	{
		"title": "Validate Credit Card Number",
		"description": "<p><span>Create a function that takes a number as an argument and returns </span><code>true</code><span> if the number is a valid credit card number, </span><code>false</code><span> otherwise.</span></p><p><span>Credit card numbers must be between 14-19 digits in length, and pass the Luhn test, described below:</span></p><ol><li><span>Remove the last digit (this is the \"check digit\").</span></li><li><span>Reverse the number.</span></li><li><span>Double the value of each digit in odd-numbered positions. If the doubled value has more than 1 digit, add the digits together (e.g. 8 x 2 = 16  ➞ 1 + 6 = 7).</span></li><li><span>Add all digits.</span></li><li><span>Subtract the last digit of the sum (from step 4) from 10. The result should be equal to the check digit from step 1.</span></li></ol><h3><span>Examples</span></h3><pre><code>validateCard(1234567890123456) ➞ false\n\n// Step 1: check digit = 6, num = 123456789012345\n// Step 2: num reversed = 543210987654321\n// Step 3: digit array after selective doubling: [1, 4, 6, 2, 2, 0, 9, 8, 5, 6, 1, 4, 6, 2, 2]\n// Step 4: sum = 58\n// Step 5: 10 - 8 = 2 (not equal to 6) ➞ false\n\nvalidateCard(1234567890123452) ➞ true\n\n// Same as above, but check digit checks out.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validateCard(79927398714), false)",
			"Test.assertEquals(validateCard(79927398713), false, 'Passes Luhn test, but too short.')",
			"Test.assertEquals(validateCard(709092739800713), true)",
			"Test.assertEquals(validateCard(1234567890123456), false)",
			"Test.assertEquals(validateCard(12345678901237), true)",
			"Test.assertEquals(validateCard(5496683867445267), true)",
			"Test.assertEquals(validateCard(4508793361140566), false)",
			"Test.assertEquals(validateCard(376785877526048), true)",
			"Test.assertEquals(validateCard(36717601781975), false)"
		],
		"starterFn": [
			"1\nfunction validateCard(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ceEEZioNmxuMJFMxi"
	},
	{
		"title": "Mona's Sort",
		"description": "<p><span>Mona has created a method to sort an array in ascending order.</span></p><p><span>Starting from the left of the array, she compares numbers by pairs. If the first pair is ordered </span><code>[smaller number, larger number]</code><span>, she moves on. If the first pair is ordered </span><code>[larger number, smaller number]</code><span>, she swaps the two integers before moving on to the next pair. She repeats this process until she reaches the end of the array.</span></p><p><span>Then, she moves back to the beginning of the array and repeats this process until the entire array is sorted.</span></p><p><span>If the unsorted array is: </span><code>[3, 9, 7, 4]</code><span>, she will perform the following steps (note </span><em><span>Swaps</span></em><span> here refers to cumulative swaps):</span></p><ol><li><span>She starts with the first pair.</span></li><li><code>[3, 9]</code><span> is in order, move on. Array: </span><code>[3, 9, 7, 4]</code><span>. Swaps: </span><code>0</code><span>.</span></li><li><code>[9, 7]</code><span> is not. Swap. Array: </span><code>[3, 7, 9, 4]</code><span>. Swaps: </span><code>1</code></li><li><code>[9, 4]</code><span> is not. Swap. Array: </span><code>[3, 7, 4, 9]</code><span>. Swaps: </span><code>2</code></li><li><span>Check if array is sorted. It is not, so start over at first pair.</span></li><li><code>[3, 7]</code><span> is in order, move on. Array: </span><code>[3, 7, 4, 9]</code><span>. Swaps: </span><code>2</code></li><li><code>[7, 4]</code><span> is not. Swap. Array: </span><code>[3, 4, 7, 9]</code><span>. Swaps: </span><code>3</code><span>.</span></li><li><code>[7, 9]</code><span> is in order, move on. Array: </span><code>[3, 4, 7, 9]</code><span>. Swaps: </span><code>3</code><span>.</span></li><li><span>Check if array is sorted. It is. End.</span></li></ol><p><span>Sorting the array </span><code>[3, 9, 7, 4]</code><span> takes her </span><em><span>3 swaps</span></em><span>. Write a function that takes in an unsorted array and returns the number of swaps it takes for the array to be sorted according to Mona's algorithm.</span></p><h3><span>Examples</span></h3><pre><code>numberOfSwaps([5, 4, 3]) ➞ 3\n\nnumberOfSwaps([1, 3, 4, 5]) ➞ 0\n\nnumberOfSwaps([5, 4, 3, 2]) ➞ 6</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"scope",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(numberOfSwaps([3, 9, 7, 4]), 3)",
			"Test.assertEquals(numberOfSwaps([5, 4, 3]), 3)",
			"Test.assertEquals(numberOfSwaps([5, 4, 3, 2]), 6)",
			"Test.assertEquals(numberOfSwaps([1, 2, 4, 3]), 1)",
			"Test.assertEquals(numberOfSwaps([1, 2, 5, 4, 3]), 3)",
			"Test.assertEquals(numberOfSwaps([1, 3, 4, 5]), 0)",
			"Test.assertEquals(numberOfSwaps([1, 2]), 0)"
		],
		"starterFn": [
			"1\nfunction numberOfSwaps(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6ALbTxgu8BZaa6YYN"
	},
	{
		"title": "Find Danny",
		"description": "<p><span>Create a function that takes a string and returns </span><code>true</code><span> if Danny is found and </span><code>false</code><span> if he's not.</span></p><h3><span>Examples</span></h3><pre><code>checkIfDannyIsHere(\"is there dan here ?\") ➞ false\n\ncheckIfDannyIsHere(\"I found you d4nny\") ➞ true\n\ncheckIfDannyIsHere(\"and here dan ny ?\") ➞ false\n\ncheckIfDannyIsHere(\"danny is here\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Danny likes to hide himself using leetspeak.</span></p><ul><li><span>D letter:  </span><code>d, D, |), [), |], 1)</code></li><li><span>A letter:  </span><code>a, A, @, 4, ^, /\\, /-\\</code></li><li><span>N letter: </span><code>n, N, |\\|, /\\/, (\\)</code></li><li><span>Y letter:  </span><code>y, Y, `/, '/, °/</code></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(checkIfDannyIsHere('is there dan here ?'), false);",
			"Test.assertEquals(checkIfDannyIsHere('and here dan ny ?'), false);",
			"Test.assertEquals(checkIfDannyIsHere('I found you d4nny '), true);",
			"Test.assertEquals(checkIfDannyIsHere('danny is here'), true);",
			"Test.assertEquals(checkIfDannyIsHere('best still sitting |\\\\|ot cut main computer mouse film cut.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('cheers ever her should child record beat [)4/\\\\/n`/ beat alive.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('mouse should are mouse tree tree character record main and.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('represent ever computer and keyboard cooking [)^n/\\\\/`/ vine mouse mouse.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('keyboard 1)/-\\\\n(\\\\)`/ cheers his best with karma |\\\\|ot beat sitting.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('[)A/\\\\/|\\\\|°/ beat film mouse cheers karma |\\\\|ot they ever none.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('alive her child you DAn/\\\\/°/ his represent his friends mouse.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('you dan keyboard best none seen chair should house his.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('and cheers love record sitting you record represent tree karma.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('love tree Da|\\\\||\\\\|y character vine mouse they computer main sitting.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('friends friends sitting record dan karma are ever they his.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('best film house we sitting we his d4(\\\\)ny |\\\\|ot seen.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('computer with friends seen vine none vine da(\\\\)n°/ karma best.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('you child dan house computer [)4n/\\\\/\\'/ mouse seen character and.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('sitting alive represent |\\\\|ot computer house computer cheers child film.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('karma main her child with is |\\\\|ot you love represent.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('cut dAn|\\\\|y keyboard vine sitting keyboard chair ever house beat.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('vine things film sitting computer tree her seen sitting keyboard.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('still represent seen record beat is film represent they alive.'), false);",
			"Test.assertEquals(checkIfDannyIsHere('best house her her mouse [)An/\\\\/`/ computer should ever tree.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('|\\\\|ot |\\\\|ot they are record computer we represent |]/\\\\|\\\\|/\\\\/°/ film.'), true);",
			"Test.assertEquals(checkIfDannyIsHere('we cut cut record best you character we cheers his.'), false);"
		],
		"starterFn": [
			"1\nfunction checkIfDannyIsHere(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mxmZby7FHAW47yTAX"
	},
	{
		"title": "Digital Egomania: the Self-Describing Numbers",
		"description": "<p><span>In this challenge, you have to establish if a given number is </span><em><span>self-describing</span></em><span>. To be </span><em><span>self-describing</span></em><span>, a positive number must have an even quantity of digits, because it has to be split into separated pairs of adjacent digits </span><code>x</code><span> and </span><code>y</code><span>, and each pair can be interpreted as a declaration: </span><strong><span>among the digits of the number, there are </span><code>x</code><span> instances of the digit equal to </span><code>y</code></strong><span>.</span></p><p><span>If we take as an example the self-describing number </span><code>10123331</code><span>, we can see how it has an even quantity of digits and it can be split into four pairs:</span></p><ul><li><code>[1, 0]</code><span> ➞ This pair declares that among the digits of the number there is </span><code>1</code><span> instance of </span><code>0</code></li><li><code>[1, 2]</code><span> ➞ This pair declares that among the digits of the number there is </span><code>1</code><span> instance of </span><code>2</code></li><li><code>[3, 3]</code><span> ➞ This pair declares that among the digits of the number there are </span><code>3</code><span> instances of </span><code>3</code></li><li><code>[3, 1]</code><span> ➞ This pair declares that among the digits of the number there are </span><code>3</code><span> instances of </span><code>1</code></li></ul><p><span>If every \"declaration\" represented by the pairs is true (as in the above example), then the number is self-describing.</span></p><p><span>Given a non-negative integer </span><code>num</code><span>, implement a function that returns </span><code>true</code><span> if </span><code>num</code><span> is a self-describing number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isSelfDescribing(10123331) ➞ true\n// See the Instructions\n\nisSelfDescribing(224444) ➞ true\n// Pair [2, 2] is true (two times 2 into num)\n// Pair [4, 4] is true (four times 4 into num)\n// Pair [4, 4] is true (same as previous)\n\nisSelfDescribing(2211) ➞ false\n// Pair [2, 2] is true (two times 2 into num)\n// Pair [1, 1] is false! It declares: one time 1 into num...\n// ...but 2211 has two instances of 1 among its digits\n\nisSelfDescribing(333) ➞ false\n// Odd quantity of digits, it can't be splitted</code></pre><h3><span>Notes</span></h3><ul><li><span>Pairs can be repeated (see example #2), but they have to be true in any case.</span></li><li><span>Remember to consider the totality of the digits of the number, when checking if a pair represents a true declaration (see example #3).</span></li><li><span>You can expect always valid non-negative integers as input.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isSelfDescribing(10123331), true, \"Example #1\")",
			"Test.assertEquals(isSelfDescribing(224444), true, \"Example #2\")",
			"Test.assertEquals(isSelfDescribing(2211), false, \"Example #3\")",
			"Test.assertEquals(isSelfDescribing(333), false, \"Example #4\")",
			"Test.assertEquals(isSelfDescribing(1), false)",
			"Test.assertEquals(isSelfDescribing(27273332), true)",
			"Test.assertEquals(isSelfDescribing(11), false)",
			"Test.assertEquals(isSelfDescribing(22), true)",
			"Test.assertEquals(isSelfDescribing(19212332), true)",
			"Test.assertEquals(isSelfDescribing(4444332231), false)",
			"Test.assertEquals(isSelfDescribing(881722888888), true)"
		],
		"starterFn": [
			"1\nfunction isSelfDescribing(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8NfwhJ4eGriwj8AYS"
	},
	{
		"title": "Shape in Shape",
		"description": "<p><span>For math class, Matt needs to find out if a shape can fit inside another shape, based solely on their area. The only problem is, HE SUCKS AT MATH! He has asked you, his older brother, to make a program that will answer all his math questions.</span></p><p><span>Write a function that takes two shapes, with different inputs, and returns </span><code>true</code><span> if the second shape has an area smaller than the first.</span></p><p><span>The inputs will be in a standardized format per shape:</span></p><ul><li><span>\"Circle, radius\"</span></li><li><span>\"Triangle, Base, Height\"</span></li><li><span>\"Rectangle, Width,  Length (if different than Width) \"</span></li><li><span>\"Pentagon, Side\"</span></li></ul><h3><span>Examples</span></h3><pre><code>shapeInShape(\"Circle, 3\", \"Rectangle, 3, 14\") ➞ false\n\nshapeInShape(\"Triangle, 10, 5\", \"Circle, 2\") ➞ true\n\nshapeInShape(\"Pentagon, 10\", \"Circle, 10\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Remember, the first item in each string will be the name of the shape, and all relevant data will be provided following said name.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(shapeInShape(\"Circle, 3\", \"Rectangle, 3, 14\"), false)",
			"Test.assertEquals(shapeInShape(\"Circle, 5\", \"Rectangle, 3, 14\"), true)",
			"Test.assertEquals(shapeInShape(\"Triangle, 5, 5\", \"Circle, 2\"), false)",
			"Test.assertEquals(shapeInShape(\"Triangle, 10, 5\", \"Circle, 2\"), true)",
			"Test.assertEquals(shapeInShape(\"Circle, 10\", \"Pentagon, 10\"), true)",
			"Test.assertEquals(shapeInShape(\"Pentagon, 10\", \"Circle, 10\"), false)"
		],
		"starterFn": [
			"1\nfunction shapeInShape(shape1, shape2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XT6AA9Dae9M2iJjuw"
	},
	{
		"title": "Roundabout",
		"description": "<p><span>You are driving in a roundabout. At the moment you enter, you don't know which one of the exits you have to take. At the moment your GPS (or the person next to you) shouts that you should leave the roundabout, there's a moment of time where you need to react, turn on your indicator light, and exit the roundabout.</span></p><p><span>Assuming the roundabouts are of equal size, the exits are equally spaced and you're driving at the same speed, you need to figure out the exit you're taking. Your function will get the amount of exits of the roundabout. You're entering the roundabout on \"Exit 0\".</span></p><p><span>The next input will be the amount of degrees where you get the command to leave the roundabout. The time you have to react will be 30 degrees on the roundabout, so you cannot exit immediately.</span></p><h3><span>Examples</span></h3><pre><code>roundabout(4, 50) ➞ \"Exit 1\"\n\nroundabout(4, 320) ➞ \"Exit 0\"\n\nroundabout(6, 60) ➞ \"Exit 2\"</code></pre><h3><span>Notes</span></h3><ul><li><span>You'll be driving clockwise within the roundabout.</span></li><li><span>Sometimes you have to take the roundabout more than once.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(roundabout(4, 50), \"Exit 1\")",
			"Test.assertEquals(roundabout(3, 180), \"Exit 2\")",
			"Test.assertEquals(roundabout(6, 360), \"Exit 1\")",
			"Test.assertEquals(roundabout(3, 100), \"Exit 2\")",
			"Test.assertEquals(roundabout(5, 100), \"Exit 2\")",
			"Test.assertEquals(roundabout(4, 320), \"Exit 0\")",
			"Test.assertEquals(roundabout(2, 180), \"Exit 0\")",
			"Test.assertEquals(roundabout(6, 250), \"Exit 5\")",
			"Test.assertEquals(roundabout(4, 61), \"Exit 2\")",
			"Test.assertEquals(roundabout(3, 0), \"Exit 1\")",
			"Test.assertEquals(roundabout(4, 500), \"Exit 2\")",
			"Test.assertEquals(roundabout(3, 68), \"Exit 1\")",
			"Test.assertEquals(roundabout(5, 40), \"Exit 1\")",
			"Test.assertEquals(roundabout(6, 60), \"Exit 2\")"
		],
		"starterFn": [
			"1\nfunction roundabout(siz, dgr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oXBcQsTa6bXoKwY6b"
	},
	{
		"title": "Generate an Array of 15 Palindrome Numbers",
		"description": "<p><span>In this challenge, you have to find the last 15 palindromes that can be found below a given limit, including the limit in the search.</span></p><p><span>Given an integer </span><code>limit</code><span> being the upper limit of the range of interest, implement a function that returns the last 15 palindromes numbers lower or equal to </span><code>limit</code><span> as an array sorted ascendingly.</span></p><h3><span>Examples</span></h3><pre><code>generatePalindromes(151) ➞ [\n  11, 22, 33, 44, 55,\n  66, 77, 88, 99, 101,\n  111, 121, 131, 141, 151\n]\n\ngeneratePalindromes(600) ➞ [\n  454, 464, 474, 484, 494,\n  505, 515, 525, 535, 545,\n  555, 565, 575, 585, 595\n]\n\ngeneratePalindromes(999999) ➞ [\n  985589, 986689, 987789, 988889, 989989,\n  990099, 991199, 992299, 993399, 994499,\n  995599, 996699, 997799, 998899, 999999\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(generatePalindromes(151), [11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151], \"Example #1\")",
			"Test.assertSimilar(generatePalindromes(600), [454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595], \"Example #2\")",
			"Test.assertSimilar(generatePalindromes(999999), [985589, 986689, 987789, 988889, 989989, 990099, 991199, 992299, 993399, 994499, 995599, 996699, 997799, 998899, 999999], \"Example #3\")",
			"Test.assertSimilar(generatePalindromes(3443), [2002, 2112, 2222, 2332, 2442, 2552, 2662, 2772, 2882, 2992, 3003, 3113, 3223, 3333, 3443])",
			"Test.assertSimilar(generatePalindromes(13000), [11511, 11611, 11711, 11811, 11911, 12021, 12121, 12221, 12321, 12421, 12521, 12621, 12721, 12821, 12921])"
		],
		"starterFn": [
			"1\nfunction generatePalindromes(limit) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ggh7GYrLKvWHqyk59"
	},
	{
		"title": "How Many Boxes?",
		"description": "<p><span>You work in a factory, and your job is to take items from a conveyor belt and pack them into boxes.  Each box can hold a maximum of 10 kgs. Given an array containing the </span><em><span>weight</span></em><span> (in kg) of each item, how many boxes would you need to pack all of the items?</span></p><h3><span>Example</span></h3><pre><code>boxes([2, 1, 2, 5, 4, 3, 6, 1, 1, 9, 3, 2]) ➞ 5\n\n// Box 1 = [2, 1, 2, 5] (10kg)\n// Box 2 = [4, 3] (7kg)\n// Box 3 = [6, 1, 1] (8kg)\n// Box 4 = [9] (9kg)\n// Box 5 = [3, 2] (5kg)</code></pre><h3><span>Notes</span></h3><p><span>There will always be a minimum of 1 item to pack. All items will weigh less than or equal to 10 kgs, and need to be packed in the order that they arrive.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(boxes([7, 1, 2, 6, 1, 2, 3, 5, 9, 2, 1, 2, 5]), 5)",
			"Test.assertEquals(boxes([2, 7, 1, 3, 3, 4, 7, 4, 1, 8, 2]), 5)",
			"Test.assertEquals(boxes([1, 3, 3, 3, 2, 1, 1, 9, 7, 10, 8, 6, 1, 2, 9]), 8)",
			"Test.assertEquals(boxes([4, 1, 2, 3, 5, 5, 1, 9]), 3)",
			"Test.assertEquals(boxes([3, 1, 2, 7, 2, 6, 1]), 3)",
			"Test.assertEquals(boxes([4, 6, 1, 9, 6, 1, 1, 9, 2, 9]), 6)",
			"Test.assertEquals(boxes([2, 2, 10, 10, 1, 5, 2]), 4)",
			"Test.assertEquals(boxes([9, 6, 2, 3, 1, 2, 4, 8, 3, 1, 3]), 5)",
			"Test.assertEquals(boxes([2, 5, 1, 6, 2, 9, 5, 2, 1, 6, 1, 6, 6, 1]), 7)",
			"Test.assertEquals(boxes([1, 2, 3, 2, 6, 4, 1]), 3)",
			"Test.assertEquals(boxes([1, 1, 2, 1, 2, 10, 2, 2, 5, 1, 5]), 4)",
			"Test.assertEquals(boxes([8, 3, 2, 1, 1, 2, 1, 3, 2, 1]), 3)",
			"Test.assertEquals(boxes([1, 5, 3, 1, 2, 3, 2, 6, 3, 1, 3, 8, 1]), 5)",
			"Test.assertEquals(boxes([8, 1, 1, 4, 7, 2, 1, 3, 1, 9, 7, 1, 5, 1, 1]), 7)",
			"Test.assertEquals(boxes([2, 3, 4, 10, 1, 2, 5, 1, 1, 1, 1, 8, 2, 1]), 5)",
			"Test.assertEquals(boxes([4, 6, 7, 3, 2, 2, 3, 1, 2, 2, 10, 3, 2]), 6)",
			"Test.assertEquals(boxes([9, 2, 3, 4, 1, 3, 1, 1, 3]), 3)",
			"Test.assertEquals(boxes([6, 2, 1, 9, 1, 8, 2, 8, 6, 6]), 6)",
			"Test.assertEquals(boxes([6, 9, 3, 8, 10, 4, 7]), 7)",
			"Test.assertEquals(boxes([4, 3, 1, 1, 1, 4, 7, 2, 1, 10, 1, 3, 8]), 6)",
			"Test.assertEquals(boxes([10]), 1)"
		],
		"starterFn": [
			"1\nfunction boxes(weights) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hmL37LGD9LRdNyvXq"
	},
	{
		"title": "The Humble Sequence of the Modest Numbers",
		"description": "<p><span>In this challenge, you have to establish if a positive integer is a Modest number, accordingly to the following algorithm:</span></p><ul><li><span>Divide the number into two left and right partitions.</span></li><li><span>For each combination of left and right parts, you have to check if a condition is true: </span><strong><span>the remainder of the number divided by the right part is equal to the left part</span></strong><span>.</span></li><li><span>If at least a combination of two parts satisfies the above condition, the number is Modest, otherwise, it's not.</span></li></ul><p><span>Given an integer </span><code>num</code><span>, implement a function that returns </span><code>true</code><span> if </span><code>num</code><span> is a Modest number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Example #1</span></h3><pre><code>isModest(2036) ➞ true\n\nCombination 1:\nLeft = 2 | Right = 036 = 36 (Leading zeros are not considered)\nNumber (2036) % Right (36) =  20 != Left (2)\n\nCombination 2:\nLeft = 20 | Right = 36\nNumber (2036) % Right (36) = 20 = Left (20)\n\n// At least a combination satisfies the condition\n// It's a Modest number</code></pre><h3><span>Example #2</span></h3><pre><code>isModest(3412) ➞ false\n\nCombination 1:\nLeft = 3 | Right = 412\n3412 % 412 = 116 != Left\n\nCombination 2:\nLeft = 34 | Right = 12\n3412 % 12 = 4 != Left\n\nCombination 3:\nLeft = 341 | Right = 2\n3412 % 2 = 0 != Left\n\n// It's not a Modest number\n// Notice how left and right parts are made:\n// They are not permutations or combinations...\n// ...but partitions of consecutive digits.</code></pre><h3><span>Example #3</span></h3><pre><code>isModest(21333) ➞ true\n\nCombination 1:\nLeft = 2 | Right = 1333\n21333 % 1333 = 5 != Left\n\nCombination 2:\nLeft = 21 | Right = 333\n21333 % 333 = 21 = Left\n\n// At least a combination satisfies the condition\n// It's a Modest number</code></pre><h3><span>Example #4</span></h3><pre><code>isModest(8) ➞ false\n// An integer with less than two digits can't be partitioned.</code></pre><h3><span>Notes</span></h3><ul><li><span>In the right part, leading zeros are not considered (see example #1).</span></li><li><span>Remember to not confuse partitions with permutations or combinations. In the Instructions, \"combination\" is related to a combination of the left and the right part containing consecutive digits (see example #2, where is reported each combination of possible partitions).</span></li><li><span>Trivially, every positive integer lower than 10 can't be partitioned into two parts and it's not a Modest number (see example #4).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isModest(2036), true, \"Example #1\")",
			"Test.assertEquals(isModest(3412), false, \"Example #2\")",
			"Test.assertEquals(isModest(21333), true, \"Example #3\")",
			"Test.assertEquals(isModest(8), false, \"Example #4\")",
			"Test.assertEquals(isModest(13), true)",
			"Test.assertEquals(isModest(329), false)",
			"Test.assertEquals(isModest(433), true)",
			"Test.assertEquals(isModest(2037), true)",
			"Test.assertEquals(isModest(2038), false)",
			"Test.assertEquals(isModest(12036), true)",
			"Test.assertEquals(isModest(20010), false)",
			"Test.assertEquals(isModest(450810), true)",
			"Test.assertEquals(isModest(4221344), false)",
			"Test.assertEquals(isModest(9111111), true)"
		],
		"starterFn": [
			"1\nfunction isModest(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Z5tC9uqQrNioT2dLm"
	},
	{
		"title": "Generating Words from Names",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if a given name can generate an array of words.</span></p><h3><span>Examples</span></h3><pre><code>anagram(\"Justin Bieber\", [\"injures\", \"ebb\", \"it\"]) ➞ true\n\nanagram(\"Natalie Portman\", [\"ornamental\", \"pita\"]) ➞ true\n\nanagram(\"Chris Pratt\", [\"chirps\", \"rat\"]) ➞ false\n// Not all letters are used \n\nanagram(\"Jeff Goldblum\", [\"jog\", \"meld\", \"bluffs\"]) ➞ false\n// \"s\" does not exist in the original name</code></pre><h3><span>Notes</span></h3><ul><li><span>Each letter in the name may only be used once.</span></li><li><span>All letters in the name must be used.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(anagram(\"Justin Bieber\", [\"injures\", \"ebb\", \"it\"]), true)",
			"Test.assertEquals(anagram(\"Natalie Portman\", [\"ornamental\", \"pita\"]), true)",
			"Test.assertEquals(anagram(\"Emma Watson\", [\"mows\", \"meant\", \"a\"]), true)",
			"Test.assertEquals(anagram(\"Daniel Radcliffe\", [\"clarified\", \"elf\", \"and\"]), true)",
			"Test.assertEquals(anagram(\"Tom Hiddleston\", [\"tenths\", \"mood\", \"lid\"]), true)",
			"Test.assertEquals(anagram(\"Blake Lively\", [\"key\", \"veal\", \"bill\"]), true)",
			"Test.assertEquals(anagram(\"Ryan Reynolds\", [\"yonder\", \"sly\", \"ran\"]), true)",
			"Test.assertEquals(anagram(\"Kristen Stewart\", [\"trinkets\", \"war\", \"set\"]), true)",
			"Test.assertEquals(anagram(\"Chris Pratt\", [\"chirps\", \"rat\"]), false)",
			"Test.assertEquals(anagram(\"Jeff Goldblum\", [\"jog\", \"meld\", \"bluffs\"]), false)",
			"Test.assertEquals(anagram(\"Taylor Swift\", [\"stratify\", \"ow\"]), false)",
			"Test.assertEquals(anagram(\"Adam Levine\", [\"medieval\", \"man\"]), false)",
			"Test.assertEquals(anagram(\"Blake Shelton\", [\"betoken\", \"all\", \"she\"]), false)",
			"Test.assertEquals(anagram(\"Miley Cyrus\", [\"lyric\", \"my\", \"suer\"]), false)",
			"Test.assertEquals(anagram(\"Matt Damon\", [\"madman\"]), false)",
			"Test.assertEquals(anagram(\"Graham Norton\", [\"graham\", \"not\", \"or\"]), false)",
			"Test.assertEquals(anagram(\"Graham Norton\", [\"graham\", \"not\", \"or\"]), false)"
		],
		"starterFn": [
			"1\nfunction anagram(name, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tGehcXPRmrepQPGQW"
	},
	{
		"title": "Possible Palindrome",
		"description": "<p><span>Create a function that determines whether it is possible to build a palindrome from the characters in a string.</span></p><h3><span>Examples</span></h3><pre><code>possiblePalindrome(\"acabbaa\") ➞ true\n// Can make the following palindrome: \"aabcbaa\"\n\npossiblePalindrome(\"aacbdbc\") ➞ true\n// Can make the following palindrome: \"abcdcba\"\n\npossiblePalindrome(\"aacbdb\") ➞ false\n\npossiblePalindrome(\"abacbb\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(possiblePalindrome(\"acabbaa\"), true)",
			"Test.assertEquals(possiblePalindrome(\"aacbdbc\"), true)",
			"Test.assertEquals(possiblePalindrome(\"aacbdb\"), false)",
			"Test.assertEquals(possiblePalindrome(\"abacbb\"), false)",
			"Test.assertEquals(possiblePalindrome(\"abb\"), true)",
			"Test.assertEquals(possiblePalindrome(\"bbb\"), true)",
			"Test.assertEquals(possiblePalindrome(\"bbaa\"), true)",
			"Test.assertEquals(possiblePalindrome(\"bbaacc\"), true)",
			"Test.assertEquals(possiblePalindrome(\"bbaaccd\"), true)",
			"Test.assertEquals(possiblePalindrome(\"bbaacd\"), false)",
			"Test.assertEquals(possiblePalindrome(\"abc\"), false)",
			"Test.assertEquals(possiblePalindrome(\"ab\"), false)",
			"Test.assertEquals(possiblePalindrome(\"aabbccddef\"), false)"
		],
		"starterFn": [
			"1\nfunction possiblePalindrome(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ej8abBJapqjz72mgF"
	},
	{
		"title": "Find the Fulcrum",
		"description": "<p><span>A </span><strong><span>fulcrum</span></strong><span> of an array is an integer such that all elements to the left of it and all elements to the right of it sum to the same value. Write a function that finds the </span><strong><span>fulcrum</span></strong><span> of an array.</span></p><p><span>To illustrate:</span></p><pre><code>findFulcrum([3, 1, 5, 2, 4, 6, -1]) ➞ 2\n// Since [3, 1, 5] and [4, 6, -1] both sum to 9</code></pre><h3><span>Examples</span></h3><pre><code>findFulcrum([1, 2, 4, 9, 10, -10, -9, 3]) ➞ 4\n\nfindFulcrum([9, 1, 9]) ➞ 1\n\nfindFulcrum([7, -1, 0, -1, 1, 1, 2, 3]) ➞ 0\n\nfindFulcrum([8, 8, 8, 8]) ➞ -1</code></pre><h3><span>Notes</span></h3><ul><li><span>If the fulcrum does not exist, return </span><code>-1</code><span> (see example #4).</span></li><li><span>Exclude the leftmost and rightmost elements when computing the fulcrum (it doesn't make sense to sum zero values).</span></li><li><span>If an array has multiple fulcrums, return the one that occurs first.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(findFulcrum([1, 2, 4, 9, 10, -10, -9, 3]), 4)",
			"Test.assertEquals(findFulcrum([9, 1, 9]), 1)",
			"Test.assertEquals(findFulcrum([7, -1, 0, -1, 1, 1, 2, 3]), 0)",
			"Test.assertEquals(findFulcrum([8, 8, 8, 8]), -1)",
			"Test.assertEquals(findFulcrum([9, 3, 4, 8, 1]), -1)",
			"Test.assertEquals(findFulcrum([1, -1, 10, 5, -4, -1]), 10)"
		],
		"starterFn": [
			"1\nfunction findFulcrum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PdgSERZzFr4LmHNdk"
	},
	{
		"title": "All or Nothing",
		"description": "<p><span>Suppose a student can earn 100% on an exam by getting the answers all correct or all incorrect. Given a </span><strong><span>potentially incomplete</span></strong><span> answer key and the student's answers, write a function that determines whether or not a student can still score 100%. Questions with missing answers are marked with an underscore, </span><code>\"_\"</code><span>.</span></p><pre><code>[\"A\", \"_\", \"C\", \"_\", \"B\"]   // answer key\n[\"A\", \"D\", \"C\", \"E\", \"B\"]   // student's solution\n\n➞ true\n\n// Possible for student to get all questions correct.\n\n[\"B\", \"_\", \"B\"]   // answer key\n[\"B\", \"D\", \"C\"]   // student's solution\n\n➞ false\n\n// First question is correct but third is wrong, so not possible to score 100%.\n\n[\"T\", \"_\", \"F\", \"F\", \"F\"]   // answer key\n[\"F\", \"F\", \"T\", \"T\", \"T\"]   // student's solution\n\n➞ true\n\n// Possible for student to get all questions incorrect.</code></pre><h3><span>Examples</span></h3><pre><code>possiblyPerfect([\"B\", \"A\", \"_\", \"_\"], [\"B\", \"A\", \"C\", \"C\"]) ➞ true\n\npossiblyPerfect([\"A\", \"B\", \"A\", \"_\"], [\"B\", \"A\", \"C\", \"C\"]) ➞ true\n\npossiblyPerfect([\"A\", \"B\", \"C\", \"_\"], [\"B\", \"A\", \"C\", \"C\"]) ➞ false\n\npossiblyPerfect([\"B\", \"_\"], [\"C\", \"A\"]) ➞ true\n\npossiblyPerfect([\"B\", \"A\"], [\"C\", \"A\"]) ➞ false\n\npossiblyPerfect([\"B\"], [\"B\"]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Test has at least one question.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(possiblyPerfect(['A', '_', 'C', '_', 'B'], ['A', 'D', 'C', 'E', 'B']), true)",
			"Test.assertEquals(possiblyPerfect(['B', '_', 'B'], ['B', 'D', 'C']), false)",
			"Test.assertEquals(possiblyPerfect(['T', '_', 'F', 'F', 'F'], ['F', 'F', 'T', 'T', 'T']), true)",
			"​",
			"Test.assertEquals(possiblyPerfect(['B', 'A', '_', '_'], ['B', 'A', 'C', 'C']), true)",
			"Test.assertEquals(possiblyPerfect(['A', 'B', 'A', '_'], ['B', 'A', 'C', 'C']), true)",
			"Test.assertEquals(possiblyPerfect(['A', 'B', 'C', '_'], ['B', 'A', 'C', 'C']), false)",
			"​",
			"Test.assertEquals(possiblyPerfect(['B', '_'], ['C', 'A']), true)",
			"Test.assertEquals(possiblyPerfect(['B', 'A'], ['C', 'A']), false)",
			"Test.assertEquals(possiblyPerfect(['B'], ['B']), true)",
			"​",
			"Test.assertEquals(possiblyPerfect(['_', 'T', '_', '_'], ['T', 'F', 'F', 'F']), true)",
			"Test.assertEquals(possiblyPerfect(['_', 'T', '_', '_'], ['T', 'T', 'F', 'T']), true)",
			"Test.assertEquals(possiblyPerfect(['_', 'T', 'T', 'T'], ['T', 'T', 'F', 'T']), false)",
			"Test.assertEquals(possiblyPerfect(['_', 'T', 'T', 'T'], ['T', 'T', 'T', 'T']), true)",
			"Test.assertEquals(possiblyPerfect(['_', 'T', 'T', 'T'], ['F', 'F', 'F', 'F']), true)"
		],
		"starterFn": [
			"1\nfunction possiblyPerfect(key, answers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZYJNYe2tKhG2kb7Sh"
	},
	{
		"title": "Conveyor Belts, Warp Tunnels",
		"description": "<p><span>In this challenge, you have to deal with a matrix that is moving from the left to the right by a given amount of times, shifting its items as in a conveyor belt. At the end of the last array inside the matrix, there's a warp tunnel. The warp tunnel made appear the elements pushed through by the shifts at the beginning of the matrix, in the same order as they were before the shift. Look at the example below:</span></p><pre><code>// Before the movement.\nmtx = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 2\n\n// After the movement (2 shifts to the right).\nmtx = [[8, 9, 1], [2, 3, 4], [5, 6, 7]]\n\n// Shifting 2 times to the right, \"8\" and \"9\" are pushed through the warp tunnel.\n// The warped elements appear at the start.</code></pre><p><span>Given a matrix </span><code>mtx</code><span> and an integer </span><code>n</code><span>, implement a function that returns the same matrix with its elements shifted </span><code>n</code><span> times.</span></p><h3><span>Examples</span></h3><pre><code>warpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) ➞ [[8, 9, 1], [2, 3, 4], [5, 6, 7]]\n\nwarpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) ➞ [[2, 3, 4], [5, 6, 7], [8, 9, 1]]\n\nwarpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9) ➞ [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nwarpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 18) ➞ [[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code></pre><h3><span>Notes</span></h3><ul><li><span>The given matrices are regular (each array shares the same number of elements contained) with variable lengths and the number of arrays contained.</span></li><li><span>The returned matrix must have the same dimensions as the original.</span></li><li><span>The given </span><code>n</code><span> can be greater than the total number of elements inside the matrix (see example #4). Each time you reach a complete shift cycle (so that every element is back in its original position, see example #3), you have to start again.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(warpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2), [[8, 9, 1], [2, 3, 4], [5, 6, 7]])",
			"Test.assertSimilar(warpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8), [[2, 3, 4], [5, 6, 7], [8, 9, 1]])",
			"Test.assertSimilar(warpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
			"Test.assertSimilar(warpTunnel([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 18), [[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
			"Test.assertSimilar(warpTunnel([[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]], 4), [['c', 'd'], ['e', 'f'], ['a', 'b']])",
			"Test.assertSimilar(warpTunnel([[1, \"x\", 3], [4, \"w\", 6], [7, \"y\", 9]], 19), [[9, 1, 'x'], [3, 4, 'w'], [6, 7, 'y']])",
			"Test.assertSimilar(warpTunnel([[12, 36], [18, 27]], 149), [[27, 12], [36, 18]])",
			"Test.assertSimilar(warpTunnel([[\"12\", 36, 24, \"j\"], [\"18\", \"!\", 27, \"9\"]], 19), [['!', 27, '9', '12'], [36, 24, 'j', '18']])",
			"Test.assertSimilar(warpTunnel([[\"t\", \"i\", \"s\"], [\"g\", \"r\", \"e\"], [\"a\", \"t\", \"!\"], [\"!\", \"e\", \"d\"], [\"a\", \"b\", \"i\"]], 5), [['e', 'd', 'a' ], ['b', 'i', 't'], ['i', 's', 'g'], ['r', 'e', 'a'], ['t', '!', '!']])"
		],
		"starterFn": [
			"1\nfunction warpTunnel(mtx, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QK4QbxN6oj4EMf5zy"
	},
	{
		"title": "RegEx: Boundary Assertions V",
		"description": "<p><span>You've just webscraped a web page and stored it in a string. In the string there is a bullet list of states that voted for President Trump's impeachment:</span></p><pre><code>const str = `\n* Texas = no\n* California = yes\n* Florida = yes\n* Michigan = no\n`</code></pre><p><span>Add a </span><strong><span>negative lookahead</span></strong><span> assertion so a regex match would output the states that voted </span><strong><span>no</span></strong><span>.  </span><strong><span>DO NOT</span></strong><span> use a positive lookahead assertion.</span></p><h3><span>Notes</span></h3><ul><li><span>You </span><strong><span>must</span></strong><span>  use a </span><strong><span>negative lookahead</span></strong><span> assertion (check the </span><strong><span>Resources</span></strong><span> tab for info).</span></li><li><span>This is fake data and used only for educational purposes.</span></li></ul>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"const validate = (REGEXP) => {",
			"   if(!/\\(\\?\\!/.test(String(REGEXP))) return () => \"need negative lookahead assertion\"",
			"   return function testReg(str) {",
			"     return str.match(REGEXP)",
			"   }",
			"} ",
			"​",
			"const str = `",
			"* Texas = no ",
			"* California = yes  ",
			"* Florida = yes ",
			"* Michigan = no ",
			"`",
			"​",
			"const testStr = validate(REGEXP) ",
			"​",
			"Test.assertNotEquals(testStr(str), \"need negative lookahead assertion\", \"You need to use a negative lookahead in your expression.\")",
			"Test.assertSimilar(testStr(str), ['Texas', 'Michigan'])"
		],
		"starterFn": [
			"1\nconst REGEXP = /(\\w{4,})/g"
		],
		"url": "https://edabit.com/challenge/kcQmoJJE8CXC5kqnP"
	},
	{
		"title": "Consonant-Vowel Coding",
		"description": "<p><span>Create a function that takes in a sentence and returns a running list of </span><strong><span>consonants per word</span></strong><span> and </span><strong><span>vowels per word</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>stringCode(\"Happy Birthday To Me!\")\n➞ [\"4 6 1 1\", \"1 2 1 1\"]\n\n// Consonants - 4 : [H, p, p, y], 6 : [B, r, t, h, d, y], 1: [T], 1 : [M]\n// Vowels - 1: [a], 2 : [i, a], 1: [o], 1: [e]\n\nstringCode(\"I'd like to drink my first glass of champagne.\")\n➞ [ \"1 2 1 4 2 4 4 1 6', '1 2 1 1 0 1 1 1 3\"]\n\nstringCode(\"The first man to walk on the moon was Neil Armstrong.\")\n➞ [ \"2 4 2 1 3 1 2 2 2 2 7\", \"1 1 1 1 1 1 1 2 1 2 2\" ]</code></pre><h3><span>Notes</span></h3><ul><li><span>Count </span><strong><span>y</span></strong><span> as a consonant.</span></li><li><span>Capitalization does not matter.</span></li><li><span>Only count letters and disregard all other characters (e.g. numbers, punctuation, etc).</span></li><li><span>A </span><strong><span>space</span></strong><span> between numbers is required (</span><code>[\"1 2 3\", \"4 5 6\"]</code><span> vs. </span><code>[\"1,2,3\", \"4,5,6\"]</code><span>).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(stringCode(\"I'd like to drink my first glass of champagne.\"), ['1 2 1 4 2 4 4 1 6', '1 2 1 1 0 1 1 1 3'])",
			"Test.assertSimilar(stringCode(\"The first man to walk on the moon was Neil Armstrong.\"), [ '2 4 2 1 3 1 2 2 2 2 7', '1 1 1 1 1 1 1 2 1 2 2'])",
			"Test.assertSimilar(stringCode(\"I've got a lovely bunch of coconuts.\"), [ '1 2 0 4 4 1 5', '2 1 1 2 1 1 3' ])",
			"Test.assertSimilar(stringCode(\"There they are a'standing in a row.\"), [ '3 3 1 6 1 0 2', '2 1 2 3 1 1 1' ])",
			"Test.assertSimilar(stringCode(\"Let them eat cake.\"), [ '2 3 1 2', '1 1 2 2' ])",
			"Test.assertSimilar(stringCode(\"It does not matter how slowly you go as long as you do not stop.\"), [ '1 2 2 4 2 5 1 1 1 3 1 1 1 2 3', '1 2 1 2 1 1 2 1 1 1 1 2 1 1 1'])",
			"Test.assertSimilar(stringCode(\"To be or not to be, that is the question.\"), [ '1 1 1 2 1 1 3 1 2 4', '1 1 1 1 1 1 1 1 1 4' ])",
			"Test.assertSimilar(stringCode(\"Believe you can and you're halfway there.\"), [ '3 1 2 2 2 5 3', '4 2 1 1 3 2 2' ])"
		],
		"starterFn": [
			"1\nfunction stringCode(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/m9pkGmuoEWsdHrNHi"
	},
	{
		"title": "Content Analyzer",
		"description": "<p><span>Create a function that takes a string and returns an object. The returned object will have a common property for all detected type content named </span><code>contentType</code><span> the possible values for this property are \"HTML\", \"CSS\", \"TEXT\".</span></p><ul><li><span>Your function should be able to detect HTML and CSS else it's just TEXT.</span></li><li><span>If you detect HTML the returned object will have a special property named \"tags\". \"tags\" is an object with all content tags name and how many times these tags were called in content (see example #3).</span></li><li><span>If you detect CSS, your returned object will have a special property named </span><code>cssTargets</code><span>. </span><code>cssTargets</code><span> is an object with all content targets name and how many times these tags were called in content (see example #2).</span></li><li><span>If you don't detect HTML or CSS, the content is detected as TEXT and object will have a special property named </span><code>lineNumber</code><span> (see example #1).</span></li></ul><h3><span>Examples</span></h3><pre><code>analyzeContent(\"this is a test\\nSeems to work\")\n➞ { contentType: \"TEXT\", lineNumber: 2 }\n\nanalyzeContent(\"body{blabla} a{color:#fff} a{ padding:0}\")\n➞ { contentType: \"CSS\", cssTargets: { body: 1, a: 2 } }\n\nanalyzeContent(\"&lt;html&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/html&gt;\")\n➞ { contentType: \"HTML\", tags: { html: 1, div: 2 } }</code></pre><h3><span>Notes</span></h3><ul><li><span>If HTML content has been detected the returned object couldn't have </span><code>cssTargets</code><span> property and </span><code>lineNumber</code><span> property and that's same for type of detection. Only the common proprety </span><code>contentType</code><span> stay inside the returned object.</span></li><li><code>&lt;!DOCTYPE html&gt;</code><span> and comments shoudn't be detected.</span></li><li><span>The content can be minified or not as needed.</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"objects",
			"regex",
			"strings"
		],
		"tests": [
			"var c1 = `<!DOCTYPE html>",
			"<html lang=\"en\">",
			"<head>",
			"​",
			"<meta charset=\"UTF-8\">",
			"<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">",
			"<meta name=\"description\" content=\"\">",
			"<meta name=\"keywords\" content=\"\">",
			"<meta name=\"author\" content=\"\">",
			"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">",
			"​",
			"<title>Magnet - Minimal Portfolio Template</title>",
			"​",
			"<link rel=\"stylesheet\" href=\"css/bootstrap.min.css\">",
			"<link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">",
			"​",
			"<!-- Main css -->",
			"<link rel=\"stylesheet\" href=\"css/style.css\">",
			"<link href=\"https://fonts.googleapis.com/css?family=Work+Sans:300,400,700\" rel=\"stylesheet\">",
			"​",
			"</head>",
			"<body>",
			"​",
			"<!-- PRE LOADER -->",
			"​",
			"<div class=\"preloader\">"
		],
		"starterFn": [
			"1\nfunction analyzeContent(content) {",
			"2\n  var result = { contentType: \"\" }",
			"3\n  return result;",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/283cCDwXgNQvkdanj"
	},
	{
		"title": "String Factoring",
		"description": "<p><span>Given the complete factorization of a number, create a function that converts this array of factors to a string.</span></p><p><span>To illustrate: 24's complete factorization is </span><code>[2, 2, 2, 3]</code><span>, which should be converted to </span><code>\"2^3 x 3\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>stringFactor([2, 2, 2, 3, 3]) ➞\"2^3 x 3^2\"\n\nstringFactor([2, 7]) ➞\"2 x 7\"\n\nstringFactor([2, 3, 3]) ➞\"2 x 3^2\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Factors should be joined with </span><code>x</code><span> (multiplication sign).</span></li><li><span>Multiple instances of the same factor should be exponentiated.</span></li><li><span>Factors raised to the 1 power should be left as is, i.e. write </span><code>7</code><span> instead of </span><code>7^1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(stringFactor([2, 2, 2, 3, 3]), \"2^3 x 3^2\")",
			"Test.assertEquals(stringFactor([2, 7]), \"2 x 7\")",
			"Test.assertEquals(stringFactor([2, 3, 3]), \"2 x 3^2\")",
			"Test.assertEquals(stringFactor([2, 2, 2, 2, 2]), \"2^5\")",
			"Test.assertEquals(stringFactor([2, 3, 7]), \"2 x 3 x 7\")",
			"Test.assertEquals(stringFactor([2, 2, 7, 11]), \"2^2 x 7 x 11\")",
			"Test.assertEquals(stringFactor([11, 11, 11]), \"11^3\")"
		],
		"starterFn": [
			"1\nfunction stringFactor(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/c59r7jg89K9vvJ9Zh"
	},
	{
		"title": "Closest Palindrome Number",
		"description": "<p><span>Write a function that returns the closest palindrome number to an integer. If two palindrome numbers tie in absolute distance, return the </span><strong><span>smaller number</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>closestPalindrome(887) ➞ 888\n\nclosestPalindrome(100) ➞ 99\n// 99 and 101 are equally distant, so we return the smaller palindrome.\n\nclosestPalindrome(888) ➞ 888\n\nclosestPalindrome(27) ➞ 22</code></pre><h3><span>Notes</span></h3><p><span>If the number itself is a palindrome, return that number.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(closestPalindrome(887), 888)",
			"Test.assertEquals(closestPalindrome(888), 888)",
			"Test.assertEquals(closestPalindrome(27), 22)",
			"Test.assertEquals(closestPalindrome(519), 515)",
			"Test.assertEquals(closestPalindrome(4892), 4884)",
			"Test.assertEquals(closestPalindrome(1), 1)",
			"Test.assertEquals(closestPalindrome(100), 99)",
			"Test.assertEquals(closestPalindrome(33344), 33333)",
			"Test.assertEquals(closestPalindrome(123456), 123321)",
			"Test.assertEquals(closestPalindrome(978215236), 978212879)"
		],
		"starterFn": [
			"1\nfunction closestPalindrome(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EoSFpRHksc3CTzox9"
	},
	{
		"title": "ASCII Capitals",
		"description": "<p><span>Each character in the English Alphabet has an ASCII Char Code.</span></p><p><span>Given a sentence, return the sentence with one change:</span></p><p><span>For a word, if the sum of its letter's char codes is above the global average sum of char codes (i.e if the sum of char codes for a word is 205) and on average, a word in the sentence has a char code sum of 189, capitalise the word.</span></p><p><span>For example:</span></p><table><thead><tr><th><span>Word</span></th><th><span>Tell</span></th><th><span>me</span></th><th><span>the</span></th><th><span>time</span></th></tr></thead><tbody><tr><td><strong><span>Sum</span></strong></td><td><span>401</span></td><td><span>210</span></td><td><span>321</span></td><td><span>431</span></td></tr></tbody></table><p><span>Since on average, a word in this sentence has a char code sum of 340.75, \"Tell\" &amp; \"time\" would be returned capitalised: </span><code>\"TELL me the TIME\"</code></p><h3><span>Examples</span></h3><pre><code>averageASCII(\"Tell me the time\") ➞ \"TELL me the TIME\"\n// Global Average for char code sum of a word is 340.75\n\naverageASCII(\"To be or not to be\") ➞ \"To be or NOT to be\"\n// Global Average for char code sum of a word is 230.33\n\naverageASCII(\"Edabit helps you learn in bitesize chunks\") ➞ \"EDABIT HELPS you learn in BITESIZE CHUNKS\"\n// Global Average for char code sum of a word is 533.43</code></pre><h3><span>Notes</span></h3><ul><li><span>Do </span><em><span>not</span></em><span> count whitespace as part of a word.</span></li><li><span>There will be no punctuation/special characters in the tests.</span></li><li><span>If a word does not meet the capitalisation citeria, don't fully lowercase it ⁠— leave it how it is (i.e. the first words of a sentence should not be fully lowercased if they don't meet the criteria).</span></li><li><span>The char code of a capital letter will be different than its lowercase counterpart.</span></li><li><span>When you find the global average, it may help to round it to 2 decimal places, </span><em><span>then</span></em><span> compare against it.</span></li></ul>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(averageASCII(\"Edabit helps you learn in bitesize chunks\"), \"EDABIT HELPS you learn in BITESIZE CHUNKS\")",
			"Test.assertEquals(averageASCII(\"To be or not to be\"), \"To be or NOT to be\")",
			"Test.assertEquals(averageASCII(\"What you egg\"), \"WHAT you egg\")",
			"Test.assertEquals(averageASCII(\"Made by Harith Shah\"), \"Made by HARITH Shah\")",
			"Test.assertEquals(averageASCII(\"Boom\"), \"Boom\")",
			"Test.assertEquals(averageASCII(\"The most addictive way to learn\"), \"The most ADDICTIVE way to LEARN\")"
		],
		"starterFn": [
			"1\nfunction averageASCII(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qfFpvDpeKb9f68x64"
	},
	{
		"title": "Moran Numbers",
		"description": "<p><span>A </span><strong><span>Harshad</span></strong><span> number is a number which is divisible by the sum of its digits. For example, 132 is divisible by 6 (1+3+2).</span></p><p><span>A subset of the Harshad numbers are the </span><strong><span>Moran</span></strong><span> numbers. Moran numbers yield a prime when divided by the sum of their digits. For example, 133 divided by 7 (1+3+3) yields 19, a prime.</span></p><p><span>Create a function that takes a number and returns </span><code>\"M\"</code><span> if the number is a Moran number, </span><code>\"H\"</code><span> if it is a (non-Moran) Harshad number, or </span><code>\"Neither\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>moran(132) ➞ \"H\"\n\nmoran(133) ➞ \"M\"\n\nmoran(134) ➞ \"Neither\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(moran(132), \"H\")",
			"Test.assertEquals(moran(133), \"M\")",
			"Test.assertEquals(moran(134), \"Neither\")",
			"Test.assertEquals(moran(3033), \"M\")",
			"Test.assertEquals(moran(3030), \"H\")",
			"Test.assertEquals(moran(491423), \"Neither\")",
			"Test.assertEquals(moran(20937), \"M\")"
		],
		"starterFn": [
			"1\nfunction moran(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tLBEdP8Kp2WSJo7bo"
	},
	{
		"title": "Factorials",
		"description": "<p><span>Write a function that filters out factorials from an array. A factorial is a number that can be represented in the following manner: </span></p><pre><code>n! = n * (n-1) * (n-2) * ... * 3 * 2 * 1</code></pre><p><span>Recursively, this can be represented as: </span></p><pre><code>n! = n * (n-1)!</code></pre><h3><span>Examples</span></h3><pre><code>filterFactorials([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 6]\n\nfilterFactorials([1, 4, 120]) ➞ [1, 120]\n\nfilterFactorials([8, 9, 10]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(filterFactorials([1, 2, 3, 4, 5, 6, 7]), [1, 2, 6]);",
			"Test.assertSimilar(filterFactorials([1, 4, 120]), [1, 120]);",
			"Test.assertSimilar(filterFactorials([8, 9, 10]), []);",
			"Test.assertSimilar(filterFactorials([1, 8, 9, 10]), [1]);"
		],
		"starterFn": [
			"1\nfunction filterFactorials(numbers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/B9TMed7zwbokv88eM"
	},
	{
		"title": "Musical Instrument Note Ranges",
		"description": "<p><span>Musical instruments have a range of notes to play, some instruments having a much larger range than others.</span></p><p><span>Given the following ranges for the instrument, create a function that returns </span><code>true</code><span> if a given note is within a given instrument's range. Otherwise, return </span><code>false</code><span>.</span></p><table><thead><tr><th><span>Instrument</span></th><th><span>Range</span></th></tr></thead><tbody><tr><td><span>Piccolo</span></td><td><span>D4-C7</span></td></tr><tr><td><span>Tuba</span></td><td><span>D1-F4</span></td></tr><tr><td><span>Guitar</span></td><td><span>E3-E6</span></td></tr><tr><td><span>Piano</span></td><td><span>A0-C8</span></td></tr><tr><td><span>Violin</span></td><td><span>G3-A7</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>instrumentRange(\"Piccolo\", \"A3\") ➞ false\n\ninstrumentRange(\"Violin\", \"G6\") ➞ true\n\ninstrumentRange(\"Piano\", \"C8\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Tests will only include natural notes (i.e. you will only deal with letters and numbers, no special characters).</span></li><li><span>The musical scale follows this pattern:  </span><code>... A1, B1, C1, D1, E1, F1, G1, A2, B2 ...</code></li><li><span>You don't need to worry about invalid inputs.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(instrumentRange(\"Piccolo\", \"A3\"), false)",
			"Test.assertEquals(instrumentRange(\"Violin\", \"G6\"), true)",
			"Test.assertEquals(instrumentRange(\"Piano\", \"C8\"), true)",
			"Test.assertEquals(instrumentRange(\"Piano\", \"C9\"), false)",
			"Test.assertEquals(instrumentRange(\"Tuba\", \"C8\"), false)",
			"Test.assertEquals(instrumentRange(\"Guitar\", \"F4\"), true)",
			"Test.assertEquals(instrumentRange(\"Guitar\", \"C4\"), true)",
			"Test.assertEquals(instrumentRange(\"Piccolo\", \"F4\"), true)",
			"Test.assertEquals(instrumentRange(\"Tuba\", \"F6\"), false)"
		],
		"starterFn": [
			"1\nfunction instrumentRange(instr, note) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iu5HNPnDHoLmSobyq"
	},
	{
		"title": "N Differences",
		"description": "<p><span>Write a function that transforms an array into an array of its differences repeatedly until there exists only one element left. A difference is </span><code>A[n+1] - A[n]</code><span>.</span></p><p><span>To illustrate:</span></p><pre><code>[5, 1, 9, 3, 4, 0]\n\n[-4, 8, -6, 1, -4] // 1 - 5 = 4; 9 - 1 = 8; 3 - 9 = -6; etc.\n\n[12, -14, 7, -5]\n\n[-26, 21, -12]\n\n[47, -33]\n\n-80</code></pre><h3><span>Examples</span></h3><pre><code>nDifferences([5, 1, 9, 3, 4, 0]) ➞ -80\n\nnDifferences([1, 1, 1, 1]) ➞ 0\n\nnDifferences([5, 8, 8]) ➞ -3</code></pre><h3><span>Notes</span></h3><p><span>Each array will have at least two elements.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(nDifferences([5, 1, 9, 3, 4, 0]), -80)",
			"Test.assertEquals(nDifferences([8, 9, 2, 5, 4, 3, 3, 1, 6]), -94)",
			"Test.assertEquals(nDifferences([5, 1, 9, 6, 1, 7, 3, 4]), 118)",
			"Test.assertEquals(nDifferences([1, 1, 1, 1]), 0)",
			"Test.assertEquals(nDifferences([5, 9, 7, 3]), 4)",
			"Test.assertEquals(nDifferences([1, 5, 3, 9, 7]), -30)",
			"Test.assertEquals(nDifferences([5, 8, 8]), -3)",
			"Test.assertEquals(nDifferences([4, 0, 0, 0, 1]), 5)",
			"Test.assertEquals(nDifferences([3, 5]), 2)"
		],
		"starterFn": [
			"1\nfunction nDifferences(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zYhCuzcXZn9PKG6ry"
	},
	{
		"title": "RegEx Exercise 5: Password Validation",
		"description": "<p><span>Create a regular expression that checks for a password:</span></p><ul><li><span>It should contain at least one uppercase letter.</span></li><li><span>It should contain at least one lowercase letter.</span></li><li><span>It should contain at least one digit.</span></li><li><span>It should contain at least one special symbol.</span></li></ul><pre><code>REGEXP.test(\"bbA234c@cy~!\")  ➞ true\n\nREGEXP.test(\"32Bl4###xxz\") ➞ true\n\nREGEXP.test(\"!abcABC9lzD\") ➞ true\n\nREGEXP.test(\"d@!2?%^&amp;ahaZbb\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>You can find the solution in the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "Isaac Pak",
		"publishedByUrl": "https://edabit.com/user/yaL57wdXmgAZTvKfX",
		"language": "JavaScript",
		"tags": [
			"regex",
			"validation"
		],
		"tests": [
			"let str1 = \"bbA234c@cy~!\" ",
			"let str2 = \"32Bl4###xxz\" ",
			"let str3 = \"!abcABC9lzD\" ",
			"let str4 = \"d@!2?%^&ahaZbb\" ",
			"​",
			"const validate = (REGEXP) => {",
			"   // if(!//.test(String(REGEXP))) return () => \"invalid\" ",
			"   return function testReg(str) {",
			"      return REGEXP.test(str)  ",
			"   }",
			"}",
			"​",
			"const testExp = validate(REGEXP)",
			"​",
			"// Test.assertNotEquals(testExp(str), \"invalid\", \"Nothing new here\")",
			"Test.assertSimilar(testExp(str1), true)",
			"Test.assertSimilar(testExp(str2), true)",
			"Test.assertSimilar(testExp(str3), true)",
			"Test.assertSimilar(testExp(str4), true)",
			"​",
			"// credits to https://levelup.gitconnected.com/extremely-useful-regular-expression-examples-for-real-world-applications-567e844a0822"
		],
		"starterFn": [
			"1\nconst REGEXP = /* Write your expression here */"
		],
		"url": "https://edabit.com/challenge/RCbczQk6jdAd5N46D"
	},
	{
		"title": "Sorting Band Names without Articles",
		"description": "<p><span>Create a function that sorts the given array of band names discounting the articles </span><strong><em><span>\"The\", \"A\", \"An\"</span></em></strong><span> if the first word of the name categorically belongs to.</span></p><h3><span>Examples</span></h3><pre><code>bandNamesSort([\"The New Yardbirds\", \"The Beatles\", \"The Square Roots\", \"On A Friday\", \"An Irony\"])\n➞ [\"The Beatles\", \"An Irony\", \"The New Yardbirds\", \"On A Friday\", \"The Square Roots\"]\n\nbandNamesSort([\"The Platters\", \"A Yard of Yarn\", \"The Everly Brothers\", \"A Monster Effect\", \"The Sex Maggots\"])\n➞ [\"The Everly Brothers\", \"A Monster Effect\", \"The Platters\", \"The Sex Maggots\", \"A Yard of Yarn\"]\n\nbandNamesSort([\"But Myth\", \"An Old Dog\", \"Def Leppard\", \"The Any Glitters\", \"The Dawn\"])\n➞ [\"The Any Glitters\", \"But Myth\", \"The Dawn\", \"Def Leppard\", \"An Old Dog\"]</code></pre><h3><span>Notes</span></h3><p><span>You have to return the sorted full band names.</span></p>",
		"publishedBy": "pela",
		"publishedByUrl": "https://edabit.com/user/9XnGoq9Tv6ut3zTtH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(bandNamesSort([\"The Plot in You\", \"The Devil Wears Prada\", \"Pierce the Veil\", \"Norma Jean\", \"The Bled\", \"Say Anything\", \"The Midway State\", \"We Came as Romans\", \"Counterparts\", \"Oh, Sleeper\", \"A Skylit Drive\", \"Anywhere But Here\", \"An Old Dog\"]),[\"Anywhere But Here\", \"The Bled\", \"Counterparts\", \"The Devil Wears Prada\", \"The Midway State\", \"Norma Jean\", \"Oh, Sleeper\", \"An Old Dog\", \"Pierce the Veil\", \"The Plot in You\", \"Say Anything\", \"A Skylit Drive\", \"We Came as Romans\"])"
		],
		"starterFn": [
			"1\nfunction bandNamesSort(bands) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8yeRTFQ32JaNfwfMg"
	},
	{
		"title": "Building a Pie Chart",
		"description": "<p><span>A pie chart is a circular graphical representation of a dataset, where each category frequency is represented by a slice (or circular sector) with an amplitude in degrees given by the single frequency percentage over the total of frequencies. You can obtain the degrees of sectors following these steps:</span></p><ul><li><span>Calculate frequencies total.</span></li><li><span>Calculate percentage of every category frequency dividing it by the frequencies total.</span></li><li><span>Transform every percentage in degrees multiplying it for 360.</span></li></ul><p><span>You are given an object </span><code>data</code><span> with keys being the data categories (represented by letters) and values being the data frequencies. Implement a function that returns a map to design a pie chart, like to say the same object with values transformed in degrees instead of frequencies. Round final values to the nearest tenth.</span></p><p><img alt=\"Pie Chart\" src=\"https://edabit-challenges.s3.amazonaws.com/drawing_a_pie_chart.jpeg\"></p><h3><span>Examples</span></h3><pre><code>pieChart({ a: 1, b: 2 }) ➞ { a: 120, b: 240 }\n\npieChart({ a: 30, b: 15, c: 55 }) ➞ { a: 108, b: 54, c: 198 }\n\npieChart({ a: 8, b: 21, c: 12, d: 5, e: 4 }) ➞ { a: 57.6, b: 151.2, c: 86.4, d: 36, e: 28.8 }</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"math",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(pieChart({a: 8, b: 21, c: 12, d: 5, e: 4}), {a: 57.6, b: 151.2, c: 86.4, d: 36, e: 28.8}, \"Example #1, Image\")",
			"Test.assertSimilar(pieChart({a: 30, b: 15, c: 55}), {a: 108, b: 54, c: 198}, \"Example #2\")",
			"Test.assertSimilar(pieChart({a: 1, b: 2}), {a: 120, b: 240}, \"Example #3\")",
			"Test.assertSimilar(pieChart({a: 10, b: 33, c: 2, d: 48, e: 9}), {a: 35.3, b: 116.5, c: 7.1, d: 169.4, e: 31.8})",
			"Test.assertSimilar(pieChart({a: 10000, b: 10000, c: 10000, d: 10000}), {a: 90, b: 90, c: 90, d: 90})",
			"Test.assertSimilar(pieChart({a: 1, b: 10, c: 100, d: 1000, e: 666}), {a: 0.2, b: 2, c: 20.3, d: 202.6, e: 134.9})",
			"Test.assertSimilar(pieChart({a: 110, b: 462, c: 0}), {a: 69.2, b: 290.8, c: 0})"
		],
		"starterFn": [
			"1\nfunction pieChart(data) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/paB6XfGf6yWZ69CBs"
	},
	{
		"title": "Heroes vs. Monsters: a Role Playing Game Battle System",
		"description": "<p><span>You are implementing a battle system for a simple role-playing game. A hero is fighting various monsters, and you have to determine the battle's outcome for each engaged skirmish. Hero and monsters share some stats:</span></p><ul><li><strong><span>HP</span></strong><span> or </span><em><span>Health Points</span></em><span>: The amount of damage the character can sustain. If it reaches 0 (or less) the character dies.</span></li><li><strong><span>ATT</span></strong><span> or </span><em><span>Attack</span></em><span>: The character offensive capacity.</span></li><li><strong><span>DEF</span></strong><span> or </span><em><span>Defense</span></em><span>: The character defensive capacity.</span></li></ul><p><span>For either hero and monster, the damage inflicted is calculated subtracting the opponent's defense score from the attacker doubled attack score.</span></p><p><span>In each round hero attacks first, and his damage rate is subtracted from the monster's HP. If the monster survives (HP &gt; 0), it is his turn to attack. If the hero survives (HP &gt; 0), a new round starts. The hero can also have some </span><strong><span>POT</span></strong><span>, or </span><em><span>Healing Potions</span></em><span>, in his backpack: only when his HP is equal to or lower than 10, a potion can (and must) be used for regaining 10 HP at the start of a new round. When the hero heals, he can't attack, but he receives only half damage from the monster's attack. Every potion can be used only once, then it must be discarded.</span></p><p><span>Given an object containing the character's stats (with </span><em><span>p</span></em><span>-prefix ones being the hero's stats and </span><em><span>m</span></em><span>-prefix ones being the monster's) you must return a string:</span></p><ul><li><span>\"</span><strong><span>Victory in </span><em><span>x</span></em><span> rounds</span></strong><span>\" if the hero wins.</span></li><li><span>\"</span><strong><span>Game Over in </span><em><span>x</span></em><span> rounds</span></strong><span>\" if the monster wins.</span></li></ul><p><span>(with </span><em><span>x</span></em><span> being the number of rounds elapsed)</span></p><h3><span>Examples</span></h3><pre><code>battle({\n  pHP: 12,\n  pATT: 10,\n  pDEF: 10,\n  pPOT: 0,\n  mHP: 20,\n  mATT: 6,\n  mDEF: 14\n}) ➞ \"Victory in 4 rounds\"\n\n// Hero's damage rate = (10 * 2) - 14 = 6\n// Monster's damage rate = (6 * 2) - 10 = 2\n// Round 1: mHP - 6 = 14, pHP - 2 = 10\n// Round 2: No potions to use! mHP - 6 = 8, pHP - 2 = 8\n// Round 3: mHP - 6 = 2, pHP - 2 = 6\n// Round 4: mHP - 6 = -4 ... monster is dead\n\nbattle({\n  pHP: 10,\n  pATT: 10,\n  pDEF: 10,\n  pPOT: 2,\n  mHP: 10,\n  mATT: 8,\n  mDEF: 14\n}) ➞ \"Victory in 3 rounds\"\n\n// Hero's damage = 6, monster's damage = 6\n// Round 1: mHp - 6 = 4, pHP - 6 = 4\n// Round 2: Player uses a potion, heals 10 HP, receive half the monster damage, pHP = 11\n// Round 3: mHP - 6 = -2 ... monster is dead\n\nbattle({\n  pHP: 12,\n  pATT: 7,\n  pDEF: 6,\n  pPOT: 2,\n  mHP: 30,\n  mATT: 8,\n  mDEF: 10\n}) ➞ \"Game Over in 5 rounds\"\n\n// Hero's damage rate = 4, Monster's damage rate = 10\n// Round 1: mHP - 4 = 26, pHP - 10 = 2\n// Round 2: Hero heals 10 hp, monster hit for 5 HP, pHP = 7\n// Round 3: Hero heals 10 hp, monster hit for 5 HP, pHP = 12\n// Round 4: mHP - 4 = 22, pHP - 10 = 2\n// Round 5: No potions to use! mHP - 4 = 18, pHP - 10 = -8 ... hero is dead</code></pre><h3><span>Notes</span></h3><ul><li><span>Hero attacks (or heals) first in each round.</span></li><li><span>A potion </span><strong><span>must</span></strong><span> be used when HP is equal to or less than 10.</span></li><li><span>When the hero uses a potion, he can't attack the monster in the same round, but he can defend from the monster's attack, receiving only half the damage.</span></li><li><span>Remember to discard the potion after using it.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"games",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(battle({pHP: 10, pATT: 10, pDEF: 10, pPOT: 0, mHP: 20, mATT: 6, mDEF: 14}), \"Victory in 4 rounds\", \"Example #1\")",
			"Test.assertEquals(battle({pHP: 10, pATT: 10, pDEF: 10, pPOT: 2, mHP: 10, mATT: 8, mDEF: 14}), \"Victory in 3 rounds\", \"Example #2\")",
			"Test.assertEquals(battle({pHP: 12, pATT: 7, pDEF: 6, pPOT: 2, mHP: 30, mATT: 8, mDEF: 10}), \"Game Over in 5 rounds\", \"Example #3\")",
			"Test.assertEquals(battle({pHP: 100, pATT: 12, pDEF: 8, pPOT: 3, mHP: 200, mATT: 14, mDEF: 8}), \"Game Over in 5 rounds\")",
			"Test.assertEquals(battle({pHP: 300, pATT: 5, pDEF: 4, pPOT: 0, mHP: 120, mATT: 10, mDEF: 6}), \"Game Over in 19 rounds\")",
			"Test.assertEquals(battle({pHP: 1480, pATT: 16, pDEF: 16, pPOT: 4, mHP: 860, mATT: 14, mDEF: 20}), \"Victory in 72 rounds\")",
			"Test.assertEquals(battle({pHP: 230, pATT: 3, pDEF: 20, pPOT: 2, mHP: 140, mATT: 12, mDEF: 4}), \"Game Over in 64 rounds\")",
			"Test.assertEquals(battle({pHP: 90, pATT: 9, pDEF: 10, pPOT: 8, mHP: 300, mATT: 8, mDEF: 4}), \"Victory in 29 rounds\")"
		],
		"starterFn": [
			"1\nfunction battle(data) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WaDov6ktofCzwcRst"
	},
	{
		"title": "Check Magic Square",
		"description": "<p><span>A \"magic square\" is a square divided into smaller squares each containing a number, such that the numbers in each vertical, horizontal, and diagonal row add up to the same value.</span></p><p><img alt=\"3x3 Magic Square\" title=\"3x3 Magic Square\" src=\"https://edabit-challenges.s3.amazonaws.com/3x3magicsquare.png\"></p><p><span>Write a function that takes a 2D array, checks if it's a magic square and returns either </span><code>true</code><span> or </span><code>false</code><span> depending on the result.</span></p><h3><span>Examples</span></h3><pre><code>isMagicSquare([\n  [8, 1, 6],\n  [3, 5, 7],\n  [4, 9, 2]\n]) ➞ true\n\nisMagicSquare([\n  [16,  3,  2, 13],\n  [ 5, 10, 11,  8],\n  [ 9,  6,  7, 12],\n  [ 4, 15, 14,  1]\n]) ➞ true\n\nisMagicSquare([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Check diagonals as well.</span></li><li><span>Test input will always be square.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for additional info on magic squares.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"data_structures",
			"loops"
		],
		"tests": [
			"Test.assertEquals(isMagicSquare([",
			"  [8, 1, 6],",
			"  [3, 5, 7],",
			"  [4, 9, 2]",
			"]), true)",
			"​",
			"Test.assertEquals(isMagicSquare([",
			"  [16, 3, 2, 13],",
			"  [5, 10, 11, 8],",
			"  [9, 6, 7, 12],",
			"  [4, 15, 14, 1]",
			"]), true)",
			"​",
			"Test.assertEquals(isMagicSquare([",
			"  [1, 2, 3],",
			"  [4, 5, 6],",
			"  [7, 8, 9]",
			"]), false)"
		],
		"starterFn": [
			"1\nfunction isMagicSquare(square) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iYcNv2tDvNgnSsG9S"
	},
	{
		"title": "Find the Primorial",
		"description": "<p><span>A </span><em><span>Primorial</span></em><span> is a product of the first </span><code>n</code><span> prime numbers (e.g. </span><code>2 x 3 x 5 = 30</code><span>). </span><code>2, 3, 5, 7, 11, 13</code><span> are prime numbers. If </span><code>n</code><span> was </span><code>3</code><span>, you'd multiply </span><code>2 x 3 x 5 = 30</code><span> or Primorial = </span><code>30</code><span>.</span></p><p><span>Create a function that returns the Primorial of a number.</span></p><h3><span>Examples</span></h3><pre><code>primorial(1) ➞ 2\n\nprimorial(2) ➞ 6\n\nprimorial(8) ➞ 9699690</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(primorial(1), 2)",
			"Test.assertEquals(primorial(2), 6)",
			"Test.assertEquals(primorial(3), 30)",
			"Test.assertEquals(primorial(8), 9699690)"
		],
		"starterFn": [
			"1\nfunction primorial(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/86Dbfov3HDpKTArwo"
	},
	{
		"title": "Fridge Poetry",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if it's possible to build a phrase </span><code>s1</code><span> using only the characters from another phrase </span><code>s2</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>canBuild(\"got 2 go\", \"gogogo 2 today\") ➞ true\n\ncanBuild(\"sit on top\", \"its a moo point\") ➞ true\n\ncanBuild(\"long high add or\", \"highway road go long\") ➞ false\n\ncanBuild(\"fill tuck mid\", \"truck falls dim\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>All letters will be in lower case.</span></li><li><span>Numbers and special characters included.</span></li><li><span>Ignore whitespaces.</span></li><li><span>Do not count white space as a character.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canBuild(\"got 2 go\", \"go go go 2 today\"), true)",
			"Test.assertEquals(canBuild(\"for an angel\", \"angel forest nymph awaken\"), true)",
			"Test.assertEquals(canBuild(\"sit on top\", \"its a moo point\"), true)",
			"Test.assertEquals(canBuild(\"solar to oven\", \"love desolate rose thorn\"), true)",
			"Test.assertEquals(canBuild(\"gate im in\", \"magnetizing\"), true)",
			"Test.assertEquals(canBuild(\"moreso\", \"mount rushmore\"), true)",
			"Test.assertEquals(canBuild(\"dool\", \"ken doll\"), false)",
			"Test.assertEquals(canBuild(\"world of make believe\", \"make believe world\"), false)",
			"Test.assertEquals(canBuild(\"long high add or\", \"highway road go long\"), false)",
			"Test.assertEquals(canBuild(\"fill tuck mid\", \"truck falls dim\"), false)",
			"Test.assertEquals(canBuild(\"skin man i\", \"man in mask\"), false)",
			"Test.assertEquals(canBuild(\"foolish prides\", \"foolish pride\"), false)"
		],
		"starterFn": [
			"1\nfunction canBuild(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aKx7FLtttZqopDo5e"
	},
	{
		"title": "Sum Consecutive Integers",
		"description": "<p><span>Create a function that takes an array of integers (positive / negative) and return the sum of the numbers that repeat consecutively (return your result as an array).</span></p><h3><span>Examples</span></h3><pre><code>sumConsecutives([0, 7, 7, 7, 5, 4, 9, 9, 0]) ➞ [0, 21, 5, 4, 18, 0]\n\nsumConsecutives([4, 4, 5, 6, 8, 8, 8]) ➞ [8, 5, 6, 24]\n\nsumConsecutives([-5, -5, 7, 7, 12, 0]) ➞ [-10, 14, 12, 0]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(sumConsecutives([0, 7, 7, 7, 5, 4, 9, 9, 0]), [0, 21, 5, 4, 18, 0]);",
			"Test.assertSimilar(sumConsecutives([4, 4, 5, 6, 8, 8, 8]), [8, 5, 6, 24]);",
			"Test.assertSimilar(sumConsecutives([-5, -5, 7, 7, 12, 0]), [-10, 14, 12, 0]);",
			"Test.assertSimilar(sumConsecutives([2, 2, 2, 2, 2, 7]), [10, 7]);",
			"Test.assertSimilar(sumConsecutives([2, 2, -4, 4, 5, 5, 6, 6, 6, 6, 6, 1]), [4, -4, 4, 10, 30, 1]);",
			"Test.assertSimilar(sumConsecutives([3, 3, 3, 3, 1]), [12, 1]);",
			"Test.assertSimilar(sumConsecutives([1, -1, -2, 2, 3, -3, 4, -4]), [1, -1, -2, 2, 3, -3, 4, -4]);"
		],
		"starterFn": [
			"1\nfunction sumConsecutives(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cJHGXaAFus9fQsZ6n"
	},
	{
		"title": "Digital Division",
		"description": "<p><span>In this challenge, you have to verify if a number is exactly divisible by a combination of its digits. There are three possible conditions to test:</span></p><ul><li><span>The given number is exactly divisible by </span><strong><span>each of its digits excluding the zeros</span></strong><span>.</span></li><li><span>The given number is exactly divisible by the </span><strong><span>sum of its digits</span></strong><span>.</span></li><li><span>The given number is exactly divisible by the </span><strong><span>product of its digits</span></strong><span>.</span></li></ul><p><span>Given an integer </span><code>n</code><span>, implement a function that returns:</span></p><ul><li><span>If every test is true, a string </span><code>\"Perfect\"</code><span>.</span></li><li><span>If some test is true, the number of true tests (</span><code>1</code><span> or </span><code>2</code><span>).</span></li><li><span>If every test is false, a string </span><code>\"Indivisible\"</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>digitalDivision(21) ➞ 1\n// Exactly divisible only by the sum of its digits (2 + 1 = 3).\n\ndigitalDivision(128) ➞ 2\n// Exactly divisible by each of its digits.\n// Exactly divisible by the product of its digits (1 * 2 * 8 = 16).\n\ndigitalDivision(100) ➞ 2\n// Exactly divisible by each of its digits (excluding zeros).\n// Exactly divisible by the sum of its digits (1 + 0 + 0 = 1).\n\ndigitalDivision(12) ➞ \"Perfect\"\n// Exactly divisible by each of its digits.\n// Exactly divisible by 3 (sum of digits = 1 + 2).\n// Exactly divisible by 2 (product of digits = 1 * 2).\n\ndigitalDivision(31) ➞ \"Indivisible\"\n// Every testing condition is false.</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to exclude any 0-digit when testing if the given </span><code>n</code><span> is divisible by each of its digits (see example #3).</span></li><li><span>A number containing at least a 0-digit can't be exactly divided by the product of its digits (division by 0).</span></li><li><span>Trivially, every single-digit positive number greater than 0 is Perfect</span></li><li><span>Any given number will be a positive integer greater than 0.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(digitalDivision(21), 1, \"Example #1\")",
			"Test.assertEquals(digitalDivision(128), 2, \"Example #2\")",
			"Test.assertEquals(digitalDivision(100), 2, \"Example #3\")",
			"Test.assertEquals(digitalDivision(12), \"Perfect\", \"Example #4\")",
			"Test.assertEquals(digitalDivision(31), \"Indivisible\", \"Example #5\")",
			"Test.assertEquals(digitalDivision(111), \"Perfect\")",
			"Test.assertEquals(digitalDivision(40), 2)",
			"Test.assertEquals(digitalDivision(35), \"Indivisible\")",
			"Test.assertEquals(digitalDivision(666), 2)",
			"Test.assertEquals(digitalDivision(735), \"Perfect\")",
			"Test.assertEquals(digitalDivision(1890), 1)",
			"Test.assertEquals(digitalDivision(444268), \"Indivisible\")",
			"Test.assertEquals(digitalDivision(123456789), \"Indivisible\")",
			"Test.assertEquals(digitalDivision(1), \"Perfect\")"
		],
		"starterFn": [
			"1\nfunction digitalDivision(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZSiHm257pcdv9QiXa"
	},
	{
		"title": "Who is Currently Winning",
		"description": "<p><span>You are given an array of scores. The even-indexed numbers are your scores at each turn. The odd-indexed numbers are your opponent's scores.</span></p><p><span>Create a function that turns this list of scores into an array of who is currently winning.</span></p><p><span>To illustrate (You - </span><code>Y</code><span>, Opponent - </span><code>O</code><span>):</span></p><pre><code>Scores: [5, 15, 17, 35, 16, 40, 66, 12, 10, 9]\n\nY scores: [5, 17, 16, 66, 10]\nO scores: [15, 35, 40, 12, 9]\n\nY cumulative scores: [5, 22, 38, 104, 114]\nO cumulative scores: [15, 50, 90, 102, 111]\n\nWho is currently winning: [\"O\", \"O\", \"O\", \"Y\", \"Y\"]</code></pre><h3><span>Examples</span></h3><pre><code>currentlyWinning([10, 10, 22, 30, 5, 40]) ➞ [\"T\", \"O\", \"O\"]\n\ncurrentlyWinning([5, 1, 2, 10]) ➞ [\"Y\", \"O\"]\n\ncurrentlyWinning([10, 10, 5, 5, 2, 2, 1, 3, 100, 5]) ➞ [\"T\", \"T\", \"T\", \"O\", \"Y\"]</code></pre><h3><span>Notes</span></h3><p><span>Write \"T\" if there is a tie at that point in the game.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(currentlyWinning([10, 10, 22, 30, 5, 40]), ['T', 'O', 'O'])",
			"Test.assertSimilar(currentlyWinning([5, 1, 2, 10]), ['Y', 'O'])",
			"Test.assertSimilar(currentlyWinning([10, 10, 5, 5, 2, 2, 1, 3, 100, 5]), ['T', 'T', 'T', 'O', 'Y'])",
			"Test.assertSimilar(currentlyWinning([5, 15, 17, 35, 16, 40, 66, 12, 10, 9]), ['O', 'O', 'O', 'Y', 'Y'])",
			"Test.assertSimilar(currentlyWinning([33, 22, 4, 9, 12, 15, 32, 7, 9, 10, 70, 100]), ['Y', 'Y', 'Y', 'Y', 'Y', 'O'])"
		],
		"starterFn": [
			"1\nfunction currentlyWinning(scores) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jiTMjanCzDrtC8T9y"
	},
	{
		"title": "Encoded String Parse",
		"description": "<p><span>Create a function which takes in an encoded string and returns an object according to the following example:</span></p><h3><span>Examples</span></h3><pre><code>parseCode(\"John000Doe000123\") ➞ {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  id: \"123\"\n}\n\nparseCode(\"michael0smith004331\") ➞ {\n  firstName: \"michael\",\n  lastName: \"smith\",\n  id: \"4331\"\n}\n\nparseCode(\"Thomas00LEE0000043\") ➞ {\n  firstName: \"Thomas\",\n  lastName: \"LEE\",\n  id: \"43\"\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>The string will always be in the same format, first name, last name and id with zeros between them.</span></li><li><code>id</code><span> numbers will not contain any zeros.</span></li><li><strong><span>Bonus:</span></strong><span> Try solving this without RegEx.</span></li></ul>",
		"publishedBy": "Alex Nemechek",
		"publishedByUrl": "https://edabit.com/user/tXzqHX2abH7KJQqKg",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"objects",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(parseCode(\"John000Doe000123\"), {firstName: \"John\", lastName: \"Doe\", id: \"123\"})",
			"Test.assertSimilar(parseCode(\"Michael0Smith004331\"), {firstName: \"Michael\", lastName: \"Smith\", id: \"4331\"})",
			"Test.assertSimilar(parseCode(\"Thomas0000Lee0000045553\"), {firstName: \"Thomas\", lastName: \"Lee\", id: \"45553\"})",
			"Test.assertSimilar(parseCode(\"a0b01\"), {firstName: \"a\", lastName: \"b\", id: \"1\"})"
		],
		"starterFn": [
			"1\nfunction parseCode(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qPK2Cz8LS2rGKYz7h"
	},
	{
		"title": "Sort Odds Keeping Evens in Place",
		"description": "<p><span>Write a function that sorts </span><strong><span>only the odd numbers</span></strong><span> in an array in </span><strong><span>ascending order</span></strong><span>, keeping the even numbers in their current place.</span></p><p><span>For example, if our input array is: </span><code>[5, 2, 6, 6, 1, 4, 9, 3]</code><span>:</span></p><pre><code>[_, 2, 6, 6, _, 4, _, _]  // keep evens in place.\n\n// Sort odds: [5, 1, 9, 3] =&gt; [1, 3, 5, 9]\n\n[1, 2, 6, 6, 3, 4, 5, 9]  // final array.</code></pre><h3><span>Examples</span></h3><pre><code>oddSort([7, 5, 2, 3, 1]) ➞ [1, 3, 2, 5, 7]\n\noddSort([3, 7, 0, 9, 3, 2, 4, 8]) ➞ [3, 3, 0, 7, 9, 2, 4, 8]\n\noddSort([2, 2, 8, 4]) ➞ [2, 2, 8, 4]\n\noddSort([7, 9, 7]) ➞ [7, 7, 9]</code></pre><h3><span>Notes</span></h3><p><span>Arrays may contain duplicate numbers.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(oddSort([1, 8, 4, 3, 2, 6, 7, 5]), [1, 8, 4, 3, 2, 6, 5, 7])",
			"Test.assertSimilar(oddSort([3, 7, 0, 9, 3, 2, 4, 8]), [3, 3, 0, 7, 9, 2, 4, 8])",
			"Test.assertSimilar(oddSort([7, 5, 2, 3, 1]), [1, 3, 2, 5, 7])",
			"Test.assertSimilar(oddSort([2, 2, 9, 7, 4, 4, 4, 9]), [2, 2, 7, 9, 4, 4, 4, 9])",
			"Test.assertSimilar(oddSort([2, 2, 4, 0, 3, 1]), [2, 2, 4, 0, 1, 3])",
			"Test.assertSimilar(oddSort([2, 2, 8, 4]), [2, 2, 8, 4])",
			"Test.assertSimilar(oddSort([1, 9, 1]), [1, 1, 9])"
		],
		"starterFn": [
			"1\nfunction oddSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NhkHhyK7hSCAdLCeZ"
	},
	{
		"title": "Replace With Next Largest Number",
		"description": "<p><span>Write a function that replaces each integer with the next largest in the array.</span></p><h3><span>Examples</span></h3><pre><code>replaceNextLargest([5, 7, 3, 2, 8]) ➞ [7, 8, 5, 3, -1]\n\nreplaceNextLargest([2, 3, 4, 5]) ➞ [3, 4, 5, -1]\n\nreplaceNextLargest([1, 0, -1, 8, -72]) ➞ [8, 1, 0, -1, -1]</code></pre><h3><span>Notes</span></h3><ul><li><span>Replace the maximum with </span><strong><span>-1</span></strong><span>.</span></li><li><span>Elements in the array will be unique.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(replaceNextLargest([5, 7, 3, 2, 8]), [7, 8, 5, 3, -1])",
			"Test.assertSimilar(replaceNextLargest([4, 1, 6, -7, -8, 2]), [6, 2, -1, 1, -7, 4])",
			"Test.assertSimilar(replaceNextLargest([2, 3, 4, 5]), [3, 4, 5, -1])",
			"Test.assertSimilar(replaceNextLargest([1, 0, -1, 8, -72]), [8, 1, 0, -1, -1])"
		],
		"starterFn": [
			"1\nfunction replaceNextLargest(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yiHtvXv97xLcw7LQh"
	},
	{
		"title": "Burrows-Wheeler Transform",
		"description": "<p><span>Burrows-Wheeler transform (BWT) is an algorithm which is used in data compression. Given a string </span><code>text</code><span>, BWT of </span><code>text</code><span> is a modified version of the string with same length as </span><code>text</code><span>. It can then be used to efficiently find substrings of </span><code>text</code><span> (which won't be covered here). We will just find the BWT of </span><code>text</code><span>.</span></p><ol><li><span>Build Burrows-Wheeler-Matrix (BWM) containing all rotations of </span><code>text</code><span>.</span></li><li><span>Sort BWM lexicographically ($ &lt; a &lt; b &lt; ... &lt; z).</span></li><li><span>BWT is the last coloumn of BWM and gets returned.</span></li></ol><pre><code>// Example with text = \"banana$\"\n\n// BWM (all rotations of text):\nbanana$\nanana$b\nnana$ba\nana$ban\nna$bana\na$banan\n$banana\n\n// BWM sorted lexicographically:\n$banana\na$banan\nana$ban\nanana$b\nbanana$\nna$bana\nnana$ba\n\n// BWT (last coloumn of BWM):\nannb$aa</code></pre><h3><span>Examples</span></h3><pre><code>bwTransform(\"banana$\") ➞ \"annb$aa\"\n\nbwTransform(\"mississippi$\") ➞ \"ipssm$pissii\"\n\nbwTransform(\"acccgtttgtttcaatagatccatcaa$\") ➞ \"aacc$tacgttctaccatcaatatttgg\"</code></pre><h3><span>Notes</span></h3><p><span>Consider \"$\" as the terminator character at the end of every input </span><code>text</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"formatting",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(bwTransform(\"banana$\"), \"annb$aa\")",
			"Test.assertEquals(bwTransform(\"mississippi$\"), \"ipssm$pissii\")",
			"Test.assertEquals(bwTransform(\"abaaba$\"), \"abba$aa\")",
			"Test.assertEquals(bwTransform(\"acccgtttgtttcaatagatccatcaa$\"), \"aacc$tacgttctaccatcaatatttgg\")"
		],
		"starterFn": [
			"1\nfunction bwTransform(text) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Sdj4jE7tHuoiyNKFv"
	},
	{
		"title": "Digitaldrome",
		"description": "<p><span>In this challenge, you have to establish if the digits of a given number form a sequence (ascending or descending).</span></p><p><span>Given an integer </span><code>n</code><span>, implement a function that returns a string:</span></p><ul><li><code>\"Metadrome\"</code><span> if the digits of </span><code>n</code><span> form an </span><strong><span>ascending</span></strong><span> sequence </span><strong><span>without repeating digits</span></strong><span>.</span></li><li><code>\"Plaindrome\"</code><span> if the digits of </span><code>n</code><span> form an </span><strong><span>ascending</span></strong><span> sequence with </span><strong><span>repeating digits</span></strong><span>.</span></li><li><code>\"Katadrome\"</code><span> if the digits of </span><code>n</code><span> form a </span><strong><span>descending</span></strong><span> sequence </span><strong><span>without repeating digits</span></strong><span>.</span></li><li><code>\"Nialpdrome\"</code><span> if the digits of </span><code>n</code><span> form a </span><strong><span>descending</span></strong><span> sequence with </span><strong><span>repeating digits</span></strong><span>.</span></li><li><code>\"Repdrome\"</code><span> if </span><code>n</code><span> contains a </span><strong><span>single repeating digit</span></strong><span>.</span></li><li><code>\"Nondrome\"</code><span> if none of the above conditions is true.</span></li></ul><h3><span>Examples</span></h3><pre><code>digitaldrome(1357) ➞ \"Metadrome\"\n// Ascending sequence without repeating digits\n\ndigitaldrome(12344) ➞ \"Plaindrome\"\n// Ascending sequence with repeating digits\n\ndigitaldrome(7531) ➞ \"Katadrome\"\n// Descending sequence without repeating digits\n\ndigitaldrome(9874441) ➞ \"Nialpdrome\"\n// Descending sequence with  repeating digits\n\ndigitaldrome(666) ➞ \"Repdrome\"\n// There's only a single repeating digit\n\ndigitaldrome(1985) ➞ \"Nondrome\"\n// This is not a sequence</code></pre><h3><span>Notes</span></h3><ul><li><span>Any given </span><code>n</code><span> will be a positive integer.</span></li><li><span>The word </span><em><span>\"drome\"</span></em><span> comes from the Greek suffix for \"run\", while </span><em><span>\"kata\"</span></em><span> and </span><em><span>\"meta\"</span></em><span> are the prefixes for \"down\" (or \"into\") and \"after\" (or \"through\").</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"numbers",
			"sorting",
			"validation"
		],
		"tests": [
			"Test.assertEquals(digitaldrome(1357), \"Metadrome\", \"Example #1\");",
			"Test.assertEquals(digitaldrome(12344), \"Plaindrome\", \"Example #2\");",
			"Test.assertEquals(digitaldrome(7531), \"Katadrome\", \"Example #3\");",
			"Test.assertEquals(digitaldrome(9874441), \"Nialpdrome\", \"Example #4\");",
			"Test.assertEquals(digitaldrome(666), \"Repdrome\", \"Example #5\");",
			"Test.assertEquals(digitaldrome(1985), \"Nondrome\", \"Example #6\");",
			"Test.assertEquals(digitaldrome(33333), \"Repdrome\");",
			"Test.assertEquals(digitaldrome(1), \"Repdrome\");",
			"Test.assertEquals(digitaldrome(4899), \"Plaindrome\");",
			"Test.assertEquals(digitaldrome(7521), \"Katadrome\");",
			"Test.assertEquals(digitaldrome(23), \"Metadrome\");",
			"Test.assertEquals(digitaldrome(2340), \"Nondrome\");",
			"Test.assertEquals(digitaldrome(1000000), \"Nialpdrome\");",
			"Test.assertEquals(digitaldrome(269), \"Metadrome\");"
		],
		"starterFn": [
			"1\nfunction digitaldrome(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/84jqLSWr288Wqx5eH"
	},
	{
		"title": "Find an Anagram of a String in Another String",
		"description": "<p><span>Create a function that takes two strings and determines if an anagram of the first string is in the second string. Anagrams of \"bag\" are \"bag\", \"bga\", \"abg\", \"agb\", \"gab\", \"gba\". Since none of those anagrams are in \"grab\", the answer is false. A \"g\", \"a\", and \"b\" are in the string \"grab\", but they're split up by the \"r\".</span></p><h3><span>Examples</span></h3><pre><code>anaStrStr(\"car\", \"race\") ➞ true\n\nanaStrStr(\"nod\", \"done\") ➞ true\n\nanaStrStr(\"bag\", \"grab\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Inputs will be valid strings in all lowercase letters.</span></li><li><span>There exists a linear time algorithm for this.</span></li></ul>",
		"publishedBy": "shahednasser",
		"publishedByUrl": "https://edabit.com/user/qfZTGo3mgRsbyKka7",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(anaStrStr(\"car\", \"race\"), true)",
			"Test.assertEquals(anaStrStr(\"nod\", \"done\"), true)",
			"Test.assertEquals(anaStrStr(\"bag\", \"grab\"), false)",
			"Test.assertEquals(anaStrStr(\"sap\", \"spatula\"), true)",
			"Test.assertEquals(anaStrStr(\"sat\", \"spatula\"), false)",
			"Test.assertEquals(anaStrStr(\"vein\", \"universal\"), true)",
			"Test.assertEquals(anaStrStr(\"salt\", \"universal\"), false)",
			"Test.assertEquals(anaStrStr(\"roast\", \"pastoral\"), true)",
			"Test.assertEquals(anaStrStr(\"altar\", \"pastoral\"), false)"
		],
		"starterFn": [
			"1\nfunction anaStrStr(needle, haystack) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/q577i4KiZRFKyPLJf"
	},
	{
		"title": "Esthetic Numbers",
		"description": "<p><span>A number is Esthetic if, in any base from </span><code>base2</code><span> up to </span><code>base10</code><span>, the absolute difference between every pair of its adjacent digits is constantly equal to </span><code>1</code><span>.</span></p><pre><code>num = 441 (base10)\n// Adjacent pairs of digits:\n// |4, 4|, |4, 1|\n// The absolute difference is not constant\n// 441 is not Esthetic in base10\n\n441 in base4 = 12321\n// Adjacent pairs of digits:\n// |1, 2|, |2, 3|, |3, 2|, |2, 1|\n// The absolute difference is constant and is equal to 1\n// 441 is Esthetic in base4</code></pre><p><span>Given a positive integer </span><code>num</code><span>, implement a function that returns an array containing the bases (as integers from 2 up to 10) in which </span><code>num</code><span> results to be Esthetic, or a string </span><code>\"Anti-Esthetic\"</code><span> if no base makes </span><code>num</code><span> Esthetic.</span></p><h3><span>Examples</span></h3><pre><code>esthetic(10) ➞ [2, 3, 8, 10]\n// 10 in base2 = 1010\n// 10 in base3 = 101\n// 10 in base8 = 12\n// 10 in base10 = 10\n\nesthetic(23) ➞ [3, 5, 7, 10]\n// 23 in base3 = 212\n// 23 in base5 = 43\n// 23 in base7 = 32\n// 23 in base10 = 23\n\nesthetic(666) ➞ [8]\n// 666 in base8 = 1232</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(esthetic(10), [2, 3, 8, 10], \"Example #1\")",
			"Test.assertSimilar(esthetic(23), [3, 5, 7, 10], \"Example #2\")",
			"Test.assertSimilar(esthetic(666), [8], \"Example #3\")",
			"Test.assertSimilar(esthetic(13), [5, 6])",
			"Test.assertSimilar(esthetic(1), [2, 3, 4, 5, 6, 7, 8, 9, 10])",
			"Test.assertSimilar(esthetic(9), [4, 7, 9, 10])",
			"Test.assertSimilar(esthetic(74), \"Anti-Esthetic\")",
			"Test.assertSimilar(esthetic(740), [4, 6, 9])",
			"Test.assertSimilar(esthetic(928), \"Anti-Esthetic\")",
			"Test.assertSimilar(esthetic(259259), [9])",
			"Test.assertSimilar(esthetic(883271), \"Anti-Esthetic\")",
			"Test.assertSimilar(esthetic(1080898), [7])",
			"Test.assertSimilar(esthetic(1080899), \"Anti-Esthetic\")"
		],
		"starterFn": [
			"1\nfunction esthetic(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/geTZBEBHa6aSDLbCF"
	},
	{
		"title": "Rolling Cipher",
		"description": "<p><span>Write a function that accepts a string and an </span><code>n</code><span> and returns a cipher by rolling each character forward (</span><code>n &gt; 0</code><span>) or backward (</span><code>n &lt; 0</code><span>) </span><strong><span>n</span></strong><span> times.</span></p><p><span>Note: Think of the letters as a connected loop, so rolling </span><code>a</code><span> backwards once will yield </span><code>z</code><span>, and rolling </span><code>z</code><span> forward once will yield </span><code>a</code><span>. If you roll 26 times in either direction, you should end up back where you started.</span></p><h3><span>Examples</span></h3><pre><code>rollingCipher(\"abcd\", 1) ➞ \"bcde\"\n\nrollingCipher(\"abcd\", -1) ➞ \"zabc\"\n\nrollingCipher(\"abcd\", 3) ➞ \"defg\"\n\nrollingCipher(\"abcd\", 26) ➞ \"abcd\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All letters are lower cased.</span></li><li><span>No spacing.</span></li><li><span>Each character is rotated the same number of times.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography"
		],
		"tests": [
			"Test.assertEquals(rollingCipher('abcd', 1), 'bcde')",
			"Test.assertEquals(rollingCipher('abcd', -1), 'zabc')",
			"Test.assertEquals(rollingCipher('abcd', 3), 'defg')",
			"Test.assertEquals(rollingCipher('abcd', 25), 'zabc')",
			"Test.assertEquals(rollingCipher('abcd', 26), 'abcd')",
			"Test.assertEquals(rollingCipher('abcd', 27), 'bcde')",
			"Test.assertEquals(rollingCipher('abcd', 0), 'abcd')"
		],
		"starterFn": [
			"1\nfunction rollingCipher(str, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/38kbFLBZdtCWSKHDZ"
	},
	{
		"title": "Minimum Swaps to Alternate a Binary String",
		"description": "<p><span>Create a function that returns the minimum number of </span><strong><span>swaps</span></strong><span> it takes to transform a </span><strong><span>binary string</span></strong><span> into a string of </span><strong><span>alternating 0s and 1s</span></strong><span>. A swap is switching from a 0 to a 1 or vice versa.</span></p><h3><span>Examples</span></h3><pre><code>minSwaps(\"010010111\") ➞ 4\n\n// Two possible conversions:\n//   1. \"101010101\" (4 swaps)\n//   2. \"010101010\" (5 swaps)\n\nminSwaps(\"10101010\") ➞ 0\n\nminSwaps(\"10010\") ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(minSwaps(\"010010111\"), 4)",
			"Test.assertEquals(minSwaps(\"010101010\"), 0)",
			"Test.assertEquals(minSwaps(\"101010100\"), 1)",
			"Test.assertEquals(minSwaps(\"101010000\"), 2)",
			"Test.assertEquals(minSwaps(\"101000000\"), 3)",
			"Test.assertEquals(minSwaps(\"10001\"), 1)",
			"Test.assertEquals(minSwaps(\"10010\"), 2)"
		],
		"starterFn": [
			"1\nfunction minSwaps(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Wx5EF6o38tAY2stmh"
	},
	{
		"title": "Volume of a Spherical Shell",
		"description": "<p><span>The volume of a spherical shell is the difference between the enclosed volume of the outer sphere and the enclosed volume of the inner sphere:</span></p><p><img alt=\"Volume of Inner Sphere Formula\" title=\"Volume of Inner Sphere Formula\" src=\"https://edabit-challenges.s3.amazonaws.com/volume_of_inner_sphere.svg\"></p><p><span>Create a function that takes </span><code>r1</code><span> and </span><code>r2</code><span> as arguments and returns the volume of a spherical shell rounded to the nearest thousandth.</span></p><p><img alt=\"Spherical Shell Image\" title=\"Spherical Shell\" src=\"https://edabit-challenges.s3.amazonaws.com/kugelschale.png\"></p><h3><span>Examples</span></h3><pre><code>volShell(3, 3) ➞ 0\n\nvolShell(7, 2) ➞ 1403.245\n\nvolShell(3, 800) ➞ 2144660471.753</code></pre><h3><span>Notes</span></h3><p><span>The inputs are always positive numbers.\n</span><code>r1</code><span> could be the inner radius or the outer radius, don't return a negative number.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(volShell(17, 36), 174852.67)",
			"Test.assertEquals(volShell(3, 4), 154.985)",
			"Test.assertEquals(volShell(1, 90), 3053623.87)",
			"Test.assertEquals(volShell(12.5, 19), 20549.681)",
			"Test.assertEquals(volShell(3, 800), 2144660471.753)",
			"Test.assertEquals(volShell(16.128, 16.256), 421.719)",
			"Test.assertEquals(volShell(3, 3), 0)",
			"Test.assertEquals(volShell(4, 3), 154.985)",
			"Test.assertEquals(volShell(36, 17), 174852.67)",
			"Test.assertEquals(volShell(18, 96), 3681544.466)",
			"Test.assertEquals(volShell(1, 7), 1432.566)",
			"Test.assertEquals(volShell(7, 2), 1403.245)",
			"Test.assertEquals(volShell(100, 50), 3665191.429)",
			"Test.assertEquals(volShell(40, 36), 72650.377)"
		],
		"starterFn": [
			"1\nfunction volShell(r1, r2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oBtknCwKqmRQtFvPf"
	},
	{
		"title": "Subtract Without Subtract",
		"description": "<p><span>Create a function that subtracts one positive integer from another, without using </span><code>-</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>mySub(5, 9) ➞ 4\n\nmySub(10, 30) ➞ 20\n\nmySub(0, 0) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Do not multiply by </span><code>-1</code><span>.</span></li><li><span>Use bitwise operations.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(mySub(5, 9), 4)",
			"Test.assertEquals(mySub(10, 30), 20)",
			"Test.assertEquals(mySub(0, 0), 0)"
		],
		"starterFn": [
			"1\nfunction mySub(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/W4EAzp255xTenaYu7"
	},
	{
		"title": "Constrained Writing",
		"description": "<p><span>In this challenge, establish which type of constrained writing is applied to a sentence. There are four possible types to detect:</span></p><ul><li><strong><span>Pangram</span></strong><span>: the sentence contains all the 26 letters of the English alphabet.</span></li><li><strong><span>Heterogram</span></strong><span>: the sentence doesn't have multiple instances of its letters (as to say that every letter is unique).</span></li><li><strong><span>Tautogram</span></strong><span>: every word of the sentence starts with the same letter.</span></li><li><strong><span>Transgram</span></strong><span>: all words of the sentence share at least a common letter.</span></li></ul><p><span>Given a string </span><code>txt</code><span> being a sentence, implement a function that returns the strings </span><code>\"Pangram\"</code><span>, </span><code>\"Heterogram\"</code><span>, </span><code>\"Tautogram\"</code><span> or </span><code>\"Transgram\"</code><span> accordingly to the above definitions and following the same given order to establish the result. If no constrained writing is detected, return the string </span><code>\"Sentence\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>constraint(\"The quick brown fox jumps over the lazy dog.\") ➞ \"Pangram\"\n// The sentence contains every letter of the alphabet.\n// Repetitions are not considered.\n\nconstraint(\"The big dwarf only jumps.\") ➞ \"Heterogram\"\n// The sentence has only unique characters.\n\nconstraint(\"Todd told Tom to take the tiny turtles.\") ➞ \"Tautogram\"\n// Every word starts with the letter \"t\".\n\nconstraint(\"A cannibal alligator has attacked an unaware vegan alligator.\") ➞ \"Transgram\"\n// Every word contains the letter \"a\".\n\nconstraint(\"The unbearable lightness of coding...\") ➞ \"Sentence\"\n// No constraint is applied to the sentence.</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to respect the given order to establish the result: a </span><strong><span>Pangram</span></strong><span> has to be detected before a </span><strong><span>Heterogram</span></strong><span>, and a </span><strong><span>Tautogram</span></strong><span> has to be detected before a </span><strong><span>Transgram</span></strong><span>.</span></li><li><span>Sentences will contain letters (either uppercase or lowercase) and punctuation. Your function must be case-insensitive.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(constraint(\"The quick brown fox jumps over the lazy dog.\"), \"Pangram\")",
			"Test.assertEquals(constraint(\"The big dwarf only jumps.\"), \"Heterogram\")",
			"Test.assertEquals(constraint(\"Todd told Tom to take the tiny turtles.\"), \"Tautogram\")",
			"Test.assertEquals(constraint(\"A cannibal alligator has attacked an unaware vegan alligator.\"), \"Transgram\")",
			"Test.assertEquals(constraint(\"The unbearable lightness of coding...\"), \"Sentence\")",
			"Test.assertEquals(constraint(\"Pack my box with five dozen liquor jugs.\"), \"Pangram\")",
			"Test.assertEquals(constraint(\"The dog is crazy.\"), \"Heterogram\")",
			"Test.assertEquals(constraint(\"It is indeed included instantly!\"), \"Tautogram\")",
			"Test.assertEquals(constraint(\"Those loops could work without constants sometimes.\"), \"Transgram\")",
			"Test.assertEquals(constraint(\"Sphinx of black quartz, judge my vow.\"), \"Pangram\")",
			"Test.assertEquals(constraint(\"Mind the gap!\"), \"Heterogram\")",
			"Test.assertEquals(constraint(\"Put some more tobacco inside it next time, it's just too strong!\"), \"Sentence\")",
			"Test.assertEquals(constraint(\"Thursdays: the time to teach them the truth.\"), \"Tautogram\")",
			"Test.assertEquals(constraint(\"Would you mind pass me that axe, Eugene?\"), \"Sentence\")",
			"Test.assertEquals(constraint(\"AbCdEfGhIjKlMnOpQrStUvWxYz\"), \"Pangram\")"
		],
		"starterFn": [
			"1\nfunction constraint(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yeevEvr7SKTtbekKm"
	},
	{
		"title": "Tallest Skyscraper",
		"description": "<p><span>A city skyline can be represented as a 2-D array with </span><code>1</code><span>s representing buildings. In the example below, the height of the tallest building is </span><strong><span>4</span></strong><span> (second-most right column).</span></p><pre><code>[[0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 1, 0],\n[0, 0, 1, 0, 1, 0],\n[0, 1, 1, 1, 1, 0],\n[1, 1, 1, 1, 1, 1]]</code></pre><p><span>Create a function that takes a </span><strong><span>skyline</span></strong><span> (2-D array of 0's and 1's) and returns the height of the tallest skyscraper.</span></p><h3><span>Examples</span></h3><pre><code>tallestSkyscraper([\n  [0, 0, 0, 0],\n  [0, 1, 0, 0],\n  [0, 1, 1, 0],\n  [1, 1, 1, 1]\n]) ➞ 3\n\ntallestSkyscraper([\n  [0, 1, 0, 0],\n  [0, 1, 0, 0],\n  [0, 1, 1, 0],\n  [1, 1, 1, 1]\n]) ➞ 4\n\ntallestSkyscraper([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [1, 1, 1, 0],\n  [1, 1, 1, 1]\n]) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(tallestSkyscraper([",
			"  [0, 0, 0, 0],",
			"  [0, 1, 0, 0],",
			"  [0, 1, 1, 0],",
			"  [1, 1, 1, 1]",
			"]), 3)",
			"​",
			"Test.assertSimilar(tallestSkyscraper([",
			"  [0, 1, 0, 0],",
			"  [0, 1, 0, 0],",
			"  [0, 1, 1, 0],",
			"  [1, 1, 1, 1]",
			"]), 4)",
			"​",
			"Test.assertSimilar(tallestSkyscraper([",
			"  [0, 0, 0, 0],",
			"  [0, 0, 0, 0],",
			"  [1, 1, 1, 0],",
			"  [1, 1, 1, 1]",
			"]), 2)",
			"​",
			"Test.assertSimilar(tallestSkyscraper([",
			"  [0, 0, 0, 1],",
			"  [0, 0, 0, 1],",
			"  [1, 1, 1, 1],",
			"  [1, 1, 1, 1]"
		],
		"starterFn": [
			"1\nfunction tallestSkyscraper(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bJJTkKdyBwxWy4J3o"
	},
	{
		"title": "Stranger Strings",
		"description": "<p><span>In this challenge, every given string is made of three types of characters: blank spaces, digits, and strangers.</span></p><pre><code>The Digits ➞ 0 1 2 3 4 5 6 7 8 9\n\nThe Strangers ➞ 𝟘 𝟙 𝟚 𝟛 𝟜 𝟝 𝟞 𝟟 𝟠 𝟡</code></pre><p><span>The goal is to remove the spaces, to separate the digits from the strangers, and to apply another transform in the two separated groups </span><strong><span>without</span></strong><span> using the </span><code>.replace()</code><span> string method.</span></p><p><span>Given a string </span><code>str</code><span>, implement a function that returns an array containing two values, in the order:</span></p><ul><li><span>An </span><code>integer</code><span> being the </span><strong><span>sum of all digits</span></strong><span>. If the given string has no digits, the sum will be equal to zero.</span></li><li><span>A </span><code>string</code><span> containing the strangers, sorted in </span><strong><span>decrescent order</span></strong><span>. If the given string has no strangers, the returned string will be an empty one.</span></li></ul><p><strong><span>Try doing this without using</span></strong><span> </span><code>String.replace()</code></p><h3><span>Examples</span></h3><pre><code>strangerStrings(\"𝟚2 𝟛3 𝟘0 𝟙1\") ➞ [ 6, \"𝟛𝟚𝟙𝟘\" ]\n\nstrangerStrings(\"𝟝 𝟚003   9\") ➞ [ 12, \"𝟝𝟚\" ]\n\nstrangerStrings(\"32   000𝟜0 0 00𝟙𝟟\") ➞ [ 5, \"𝟟𝟜𝟙\" ]</code></pre><h3><span>Notes</span></h3><ul><li><span>All given strings are valid, containing only the set of characters specified in the instructions: don't worry about validation handling.</span></li><li><span>Credits: this was inspired by a comment (</span><strong><span>@aligejtor</span></strong><span>) on </span><a target=\"_blank\" href=\"https://edabit.com/challenge/nBW6ubsQCurPvhpWc\"><span>this challenge</span></a><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(strangerStrings(\"𝟚2 𝟛3 𝟘0 𝟙1\"), [6, \"𝟛𝟚𝟙𝟘\"])",
			"Test.assertSimilar(strangerStrings(\"𝟝 𝟚003   9\"), [12, \"𝟝𝟚\"])",
			"Test.assertSimilar(strangerStrings(\"32   000𝟜0 0 00𝟙𝟟\"), [5, \"𝟟𝟜𝟙\"])",
			"Test.assertSimilar(strangerStrings(\"8 𝟡4 3𝟞\"), [15, \"𝟡𝟞\"])",
			"Test.assertSimilar(strangerStrings(\"9   2 21 8\"), [22, \"\"])",
			"Test.assertSimilar(strangerStrings(\"7𝟝   16𝟞 𝟟5𝟟\"), [19, \"𝟟𝟟𝟞𝟝\"])",
			"Test.assertSimilar(strangerStrings(\"0𝟝𝟞   𝟞𝟟𝟡 𝟡\"), [0, \"𝟡𝟡𝟟𝟞𝟞𝟝\"])"
		],
		"starterFn": [
			"1\nfunction strangerStrings(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vZ64kq7i28seXgXRK"
	},
	{
		"title": "Minimum Swaps to Alternate a Binary String",
		"description": "<p><span>Write a function that returns the minimum number of </span><strong><span>swaps</span></strong><span> to create an alternating binary string. The input will have the same number of zeroes and ones.</span></p><h3><span>Examples</span></h3><pre><code>minSwaps(\"101010\") ➞ 0\n\nminSwaps(\"10001110\") ➞ 1\n// Swap the 0 at index 2 for the 1 at index 5.\n\nminSwaps(\"11110000\") ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(minSwaps(\"10\"), 0)",
			"Test.assertEquals(minSwaps(\"0101\"), 0)",
			"Test.assertEquals(minSwaps(\"101010\"), 0)",
			"Test.assertEquals(minSwaps(\"1100\"), 1)",
			"Test.assertEquals(minSwaps(\"111000\"), 1)",
			"Test.assertEquals(minSwaps(\"100101\"), 1)",
			"Test.assertEquals(minSwaps(\"100011\"), 1)",
			"Test.assertEquals(minSwaps(\"010110\"), 1)",
			"Test.assertEquals(minSwaps(\"10001110\"), 1)",
			"Test.assertEquals(minSwaps(\"11001100\"), 2)",
			"Test.assertEquals(minSwaps(\"11110000\"), 2)",
			"Test.assertEquals(minSwaps(\"1001001011\"), 2)",
			"Test.assertEquals(minSwaps(\"100100100111\"), 3)",
			"Test.assertEquals(minSwaps(\"101100000111\"), 3)",
			"Test.assertEquals(minSwaps(\"111000000111\"), 3)",
			"Test.assertEquals(minSwaps(\"111111000000\"), 3)",
			"Test.assertEquals(minSwaps(\"11000000011111\"), 3)",
			"Test.assertEquals(minSwaps(\"11111110000000\"), 3)",
			"Test.assertEquals(minSwaps(\"1111111100000000\"), 4)"
		],
		"starterFn": [
			"1\nfunction minSwaps(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zTKt7exq3R5idX4RY"
	},
	{
		"title": "Left Side, Right Side",
		"description": "<p><span>Create two functions:</span></p><ol><li><strong><span>Leftside function</span></strong><span>: Returns count of numbers </span><em><span>strictly smaller</span></em><span> than </span><code>n</code><span> on the left.</span></li><li><strong><span>Rightside function</span></strong><span>: Returns count of numbers </span><em><span>strictly smaller</span></em><span> than </span><code>n</code><span> on the right.</span></li></ol><h3><span>Examples</span></h3><pre><code>leftSide([5, 2, 1, 4, 8, 7]) ➞ [0, 0, 0, 2, 4, 4]\n\nrightSide([5, 2, 1, 4, 8, 7]) ➞ [3, 1, 0, 0, 1, 0]\n\nleftSide([1, 2, 3, -1]) ➞ [0, 1, 2, 0]\n\nrightSide([1, 2, 3, -1]) ➞ [1, 1, 1, 0]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(leftSide([5, 2, 1, 4, 8, 7]), [0, 0, 0, 2, 4, 4])",
			"Test.assertSimilar(leftSide([3, 8, 2, 5, 4]), [0, 1, 0, 2, 2])",
			"Test.assertSimilar(leftSide([1, 2, 3, 4, 5]), [0, 1, 2, 3, 4])",
			"Test.assertSimilar(rightSide([5, 2, 1, 4, 8, 7]), [3, 1, 0, 0, 1, 0])",
			"Test.assertSimilar(rightSide([3, 8, 2, 5, 4]), [1, 3, 0, 1, 0])",
			"Test.assertSimilar(rightSide([1, 2, 3, 4, 5]), [0, 0, 0, 0, 0])"
		],
		"starterFn": [
			"1\nfunction leftSide(arr) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction rightSide(arr) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/9DBRRDyxx56tSPbXt"
	},
	{
		"title": "Maya Number System",
		"description": "<p><span>Maya numeral system was </span><strong><span>vigesimal</span></strong><span> (</span><em><span>base 20</span></em><span>) and </span><strong><span>positional</span></strong><span>: units, tens, hundreds (and so on) were read as descendant progressive powers of 20, instead of 10 like we do with our decimal system. Some examples:</span></p><pre><code>- 39 =&gt; (1 x 20¹) + (19 x 20º)\n- 815 =&gt; (2 x 20²) + (0 x 20¹) + (15 x 20º)\n- 16125 =&gt; (2 x 20³) + (0 x 20²) + (6 x 20¹) + (5 x 20º)</code></pre><p><span>Every digit (as to say the number to be multiplied for the power of 20) was symbolized with a combination of pebbles (dots), woodsticks (lines) and shells (used for the number 0) following a </span><em><span>base5</span></em><span> system. See the table below:</span></p><p><img alt=\"Mayan Numbers\" src=\"https://edabit-challenges.s3.amazonaws.com/maya_numbers.jpg\"></p><p><span>You must implement a function that, given a non-negative integer, returns an array of strings, with each string representing the symbolized single digit.</span></p><p><span>Symbols to use are \"</span><strong><span>@</span></strong><span>\" for shells, \"</span><strong><span>—</span></strong><span>\" for lines and \"</span><strong><span>o</span></strong><span>\" for dots. Dots have to be placed </span><strong><span>before</span></strong><span> the lines.</span></p><h3><span>Examples</span></h3><pre><code>// Be careful, spaces between symbols are placed only for better\n// readability! Don't use spaces in returned strings.\n\nmayaNumber(39) ➞ [\"o\", \"o o o o — — —\"]\n\nmayaNumber(815) ➞ [\"o o\", \"@\", \"— — —\"]\n\nmayaNumber(16125) ➞ [\"o o\", \"@\", \"o —\", \"—\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on Maya numerals (and Maya arithmetic).</span></li><li><span>All given integers are valid, no exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(mayaNumber(39), [\"o\", \"oooo———\"], \"Example #1\")",
			"Test.assertSimilar(mayaNumber(815), [\"oo\", \"@\", \"———\"], \"Example #2\")",
			"Test.assertSimilar(mayaNumber(16125), [\"oo\", \"@\", \"o—\", \"—\"], \"Example #3\")",
			"Test.assertSimilar(mayaNumber(0), [\"@\"])",
			"Test.assertSimilar(mayaNumber(1985), [\"oooo\", \"oooo———\", \"—\"])",
			"Test.assertSimilar(mayaNumber(86420), [\"——\", \"o———\", \"o\", \"@\"])",
			"Test.assertSimilar(mayaNumber(13579), [\"o\", \"ooo——\", \"ooo———\", \"oooo———\"])",
			"Test.assertSimilar(mayaNumber(666), [\"o\", \"ooo——\", \"o—\"])"
		],
		"starterFn": [
			"1\nfunction mayaNumber(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/n6ts9wQi6Dcb6bmP7"
	},
	{
		"title": "Larger than All Numbers to Their Right",
		"description": "<p><span>Create a function that retrieves every number that is </span><strong><span>strictly larger</span></strong><span> than every number that follows it.</span></p><h3><span>Examples</span></h3><pre><code>largerThanRight([3, 13, 11, 2, 1, 9, 5]) ➞ [13, 11, 9, 5]\n// 13 is larger than all numbers to its right, etc.\n\nlargerThanRight([5, 5, 5, 5, 5, 5]) ➞ [5]\n// Must be strictly larger.\n// Always include the last number.\n\nlargerThanRight([5, 9, 8, 7]) ➞ [9, 8, 7]</code></pre><h3><span>Notes</span></h3><p><span>The last number in an array is trivially strictly larger than all numbers that follow it (no numbers follow it).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(largerThanRight([3, 13, 11, 2, 1, 9, 5]), [13, 11, 9, 5])",
			"Test.assertSimilar(largerThanRight([9, 8, 7, 6]), [9, 8, 7, 6])",
			"Test.assertSimilar(largerThanRight([1, 2, 3, 4]), [4])",
			"Test.assertSimilar(largerThanRight([5, 9, 8, 7]), [9, 8, 7])",
			"Test.assertSimilar(largerThanRight([5, 5, 5, 5, 5]),[5])"
		],
		"starterFn": [
			"1\nfunction largerThanRight(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LzmaSDaSTn7zSwe2d"
	},
	{
		"title": "Recreate C#'s String.Format",
		"description": "<p><span>Recreate C#'s </span><code>String.Format</code><span> where the first argument is the string template and all subsequent arguments are the values for the corresponding placeholders in the template.</span></p><h3><span>Examples</span></h3><pre><code>String.Format(\"{0}{1}{2}{1}{0}\",  \"k\",  \"a\", \"y\") ➞ \"kayak\"\n\nString.Format(\"Palindromes are {0}\", \"fun\") ➞ \"Palindromes are fun\"\n\nString.Format(\"Hello {0}.\\nGeneral {1}\",  \"there\",  \"Kenobi\") ➞ \"Hello there.\\nGeneral Kenobi\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Apocalypto",
		"publishedByUrl": "https://edabit.com/user/g5noFWaoRtZNcEEAW",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(String.Format(\"Hello {0}.\\nGeneral {1}\", \"there\", \"Kenobi\"), \"Hello there.\\nGeneral Kenobi\")",
			"Test.assertEquals(String.Format(\"{0}{1}{2}{3}{2}{1}{0}\", \"r\", \"a\", \"c\", \"e\"), \"racecar\")",
			"Test.assertEquals(String.Format(\"{0}{1}{2}{1}{0}\", \"k\", \"a\", \"y\"), \"kayak\")",
			"Test.assertEquals(String.Format(\"Palindromes are {0}\", \"fun\"), \"Palindromes are fun\")"
		],
		"starterFn": [
			"1\nString.Format = function (template, values) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RsagoaDZKCNZjogAF"
	},
	{
		"title": "Directionally Challenged",
		"description": "<p><span>Suppose you are directionally challenged, and get lost easily. As a result, sometimes you walk in circles or make U-turns. You might take a sub-optimal route. Create a function that returns the difference in length between </span><strong><span>your path</span></strong><span> and the </span><strong><span>optimal path</span></strong><span>. Both paths reach the same destination.</span></p><p><span>You start at </span><code>(0,0)</code><span> and reach your destination by the end of the input array.</span></p><p><span>A demonstration:</span></p><pre><code>Your route: [\"N\", \"S\", \"E\", \"W\", \"E\", \"E\", \"E\", \"N\"]  // 8\nOptimal route: [\"E\", \"E\", \"E\", \"N\"] (or [\"N\", \"E\", \"E\", \"E\"], etc.) // 4\n// Difference in length: 8 - 4 = 4\n\n// Explanation: Your \"S\" cancels out your \"N\" and your \"W\" cancels out your \"E\" leaving you back at (0,0)</code></pre><h3><span>Examples</span></h3><pre><code>routeDiff([\"N\", \"E\", \"S\", \"W\"]) ➞ 4\n// You\"ve just walked in a circle! You are back at the origin. Your optimal path was `[]`.\n\nrouteDiff([\"N\", \"N\", \"N\", \"E\", \"N\", \"E\"]) ➞ 0\n// No improvements here!\n\nrouteDiff([\"N\", \"S\", \"N\", \"S\", \"E\", \"W\", \"E\", \"E\"]) ➞ 6</code></pre><h3><span>Notes</span></h3><p><span>Remember that a </span><code>N</code><span> cancels out a </span><code>S</code><span>, and an </span><code>E</code><span> cancels out a </span><code>W</code></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow"
		],
		"tests": [
			"Test.assertEquals(routeDiff(['N', 'E', 'S', 'W']), 4)",
			"Test.assertEquals(routeDiff(['N', 'N', 'N', 'E', 'N', 'E']), 0)",
			"Test.assertEquals(routeDiff(['N', 'S', 'N', 'S', 'E', 'W', 'E', 'E']), 6)",
			"Test.assertEquals(routeDiff(['N', 'S', 'N', 'S', 'E']), 4)",
			"Test.assertEquals(routeDiff(['N', 'N', 'S', 'S', 'S', 'S', 'E']), 4)",
			"Test.assertEquals(routeDiff(['N', 'N', 'S', 'S', 'W', 'S', 'E']), 6)",
			"Test.assertEquals(routeDiff(['N', 'S', 'E']), 2)",
			"Test.assertEquals(routeDiff(['S', 'S', 'S']), 0)",
			"Test.assertEquals(routeDiff(['S', 'S', 'S', 'S', 'S', 'N']), 2)"
		],
		"starterFn": [
			"1\nfunction routeDiff(directions) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jRXxKKZh5kGojDd2H"
	},
	{
		"title": "Shared Digits",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if each pair of adjacent numbers in an array shares </span><strong><span>at least one digit</span></strong><span> and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>sharedDigits([33, 53, 6351, 12, 2242, 44]) ➞ true\n// 33 and 53 share 3, 53 and 6351 share 3 and 5, etc.\n\nsharedDigits([1, 11, 12, 13, 14, 15, 16]) ➞ true\n\nsharedDigits([33, 44, 55, 66, 77]) ➞ false\n\nsharedDigits([1, 12, 123, 1234, 1235, 6789]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sharedDigits([33, 53, 6351, 12, 2242, 44]), true)",
			"Test.assertEquals(sharedDigits([1, 11, 12, 13, 14, 15, 16]), true)",
			"Test.assertEquals(sharedDigits([33, 44, 55, 66, 77]), false)",
			"Test.assertEquals(sharedDigits([1, 12, 123, 1234, 1235, 6789]), false)",
			"Test.assertEquals(sharedDigits([5789, 798, 98, 995, 599, 699]), true)",
			"Test.assertEquals(sharedDigits([5, 4, 44, 444]), false)",
			"Test.assertEquals(sharedDigits([5, 65, 66, 76, 78]), true)",
			"Test.assertEquals(sharedDigits([5, 55, 665, 66665555, 65, 66, 76, 78, 989]), true)",
			"Test.assertEquals(sharedDigits([5, 55, 665, 4444, 65, 66, 76, 78, 989]), false)"
		],
		"starterFn": [
			"1\nfunction sharedDigits(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/B5ReG5ZDAvAdsrztL"
	},
	{
		"title": "Carrying the Digits",
		"description": "<p><span>Write a function that returns the number of times you must carry a digit when you sum together two integers.</span></p><h3><span>Examples</span></h3><pre><code>carryDigits(36, 135) ➞ 1\n// You carry the 1 when you sum 6 and 5 together.\n\ncarryDigits(671, 329) ➞ 3\n\ncarryDigits(1111, 3333) ➞ 0\n\ncarryDigits(53214, 56905) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>Count all carry operations (even those on leading digits).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(carryDigits(36, 135), 1)",
			"Test.assertEquals(carryDigits(671, 329), 3)",
			"Test.assertEquals(carryDigits(1111, 3333), 0)",
			"Test.assertEquals(carryDigits(4, 5268), 1)",
			"Test.assertEquals(carryDigits(53214, 16905), 2)",
			"Test.assertEquals(carryDigits(53214, 56905), 3)",
			"Test.assertEquals(carryDigits(515, 4), 0)",
			"Test.assertEquals(carryDigits(515, 90), 1)",
			"Test.assertEquals(carryDigits(63223, 70000), 1)"
		],
		"starterFn": [
			"1\nfunction carryDigits(n1, n2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pkfZB4AkkpyxXQvhT"
	},
	{
		"title": "Is It a Right-Angled Triangle?",
		"description": "<p><span>Find out if a right-angled triangle can be made given some facts about the shape.</span></p><ul><li><span>Given varying information about a shape, create a function that returns </span><code>true</code><span> if the shape could be a right-angle triangle and </span><code>false</code><span> if not.</span></li><li><span>You will be given an array of numbers and a string stating whether the numbers are angles or sides.</span></li><li><span>The information may indicate more than one possible shape, but we just need to know if these details could be found in a right-angled triangle.</span></li></ul><h3><span>Examples</span></h3><pre><code>isRightAngle([30, 60], \"angle\") ➞ true\n// A third angle could be 90\n\nisRightAngle([20, 20, 20, 20], \"angle\") ➞ false\n// More than 3 sides\n\nisRightAngle([4, 5, 3], \"side\") ➞ true\n// 3**2 + 4**2 = 5**2\n\nisRightAngle([4, 5], \"side\") ➞ true\n// Third side may be 3</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> for more info on right-angle triangles.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isRightAngle([30, 60], \"angle\"), true, \"Third angle may be 90\")",
			"Test.assertEquals(isRightAngle([30, 60, 90], \"angle\"), true, \"An angle is 90 and adds to 180\")",
			"Test.assertEquals(isRightAngle([90], \"angle\"), true, \"An angle is 90\")",
			"Test.assertEquals(isRightAngle([90, 90, 90], \"angle\"), false, \"More than 180\")",
			"Test.assertEquals(isRightAngle([20, 20, 20, 20], \"angle\"), false, \"More than 3 sides\")",
			"Test.assertEquals(isRightAngle([], \"angle\"), true, \"No information, so it could be a right-angled triangle\")",
			"Test.assertEquals(isRightAngle([90, 90], \"angle\"), false, \"3rd angle will go over 180\")",
			"Test.assertEquals(isRightAngle([45, 46], \"angle\"), false, \"3rd angle must be 89\")",
			"Test.assertEquals(isRightAngle([45, 46], \"side\"), true, \"3rd side could be 64.3506\")",
			"Test.assertEquals(isRightAngle([4, 5, 6], \"side\"), false, \"Does not calculate correctly\")",
			"Test.assertEquals(isRightAngle([], \"side\"), true, \"No information, so it could be a right-angled triangle\")",
			"Test.assertEquals(isRightAngle([3, 4, 5], \"side\"), true, \"Calculates correctly\")",
			"Test.assertEquals(isRightAngle([60, 60, 60], \"angle\"), false)",
			"Test.assertEquals(isRightAngle([177, 2, 1], \"angle\"), false)",
			"Test.assertEquals(isRightAngle([20, 20, 20, 20], \"side\"), false)",
			"Test.assertEquals(isRightAngle([43], \"angle\"), true)"
		],
		"starterFn": [
			"1\nfunction isRightAngle(arr, desc) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LgD9W3uCRBXow6s5e"
	},
	{
		"title": "Compass Directions",
		"description": "<p><span>You face 1 out of the 4 compass directions: </span><code>N</code><span>, </span><code>S</code><span>, </span><code>E</code><span> or </span><code>W</code><span>.</span></p><ul><li><span>A </span><strong><span>left turn</span></strong><span> is a </span><strong><span>counter-clockwise turn</span></strong><span>. e.g. </span><code>N</code><span> (left-turn) ➞ </span><code>W</code><span>.</span></li><li><span>A </span><strong><span>right turn</span></strong><span> is a </span><strong><span>clockwise turn</span></strong><span>. e.g. </span><code>N</code><span> (right-turn) ➞ </span><code>E</code><span>.</span></li></ul><p><span>Create a function that takes in a starting direction and a sequence of left and right turns, and outputs the final direction faced.</span></p><h3><span>Examples</span></h3><pre><code>finalDirection(\"N\", [\"L\", \"L\", \"L\"]) ➞ \"E\"\n\nfinalDirection(\"N\", [\"R\", \"R\", \"R\", \"L\"]) ➞ \"S\"\n\nfinalDirection(\"N\", [\"R\", \"R\", \"R\", \"R\"]) ➞ \"N\"\n\nfinalDirection(\"N\", [\"R\", \"L\"]) ➞ \"N\"</code></pre><h3><span>Notes</span></h3><p><span>You can only face 1 out of the 4 compass directions: </span><code>N</code><span>, </span><code>S</code><span>, </span><code>E</code><span> or </span><code>W</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow"
		],
		"tests": [
			"Test.assertEquals(finalDirection('N', ['L', 'L', 'L']), 'E')",
			"Test.assertEquals(finalDirection('N', ['R', 'R', 'R', 'R', 'R', 'R', 'R']), 'W')",
			"Test.assertEquals(finalDirection('N', ['R', 'R', 'R', 'L']), 'S')",
			"Test.assertEquals(finalDirection('N', ['R', 'R', 'R', 'R']), 'N')",
			"Test.assertEquals(finalDirection('N', ['R', 'L']), 'N')",
			"Test.assertEquals(finalDirection('S', ['R', 'L', 'R', 'L', 'R']), 'W')",
			"Test.assertEquals(finalDirection('S', ['R', 'L', 'R', 'L', 'R', 'L']), 'S')",
			"Test.assertEquals(finalDirection('S', ['R', 'L', 'R', 'L', 'L', 'L']), 'N')",
			"Test.assertEquals(finalDirection('S', ['R', 'R']), 'N')",
			"Test.assertEquals(finalDirection('S', ['R']), 'W')",
			"Test.assertEquals(finalDirection('S', ['L']), 'E')",
			"Test.assertEquals(finalDirection('W', ['L', 'R', 'R']), 'N')",
			"Test.assertEquals(finalDirection('W', ['R', 'L', 'L']), 'S')",
			"Test.assertEquals(finalDirection('E', ['L', 'R', 'R']), 'S')",
			"Test.assertEquals(finalDirection('E', ['R', 'L', 'L']), 'N')"
		],
		"starterFn": [
			"1\nfunction finalDirection(initial, turns) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pS3FkeSKxZe3AaWMG"
	},
	{
		"title": "Basic Pig Latin Translation",
		"description": "<p><span>Create a function that takes a string of words and moves the first letter of each word to the end of it, then adds \"ay\" to the end of the word. This is called \"Pig Latin\" and it gets more complicated than the rules in this particular challenge. I've intentionally kept things simple, otherwise this would turn into an extremely tedious challenge.</span></p><ul><li><span>Move the first letter of each word to the end of the word.</span></li><li><span>Add \"ay\" to the end of the word.</span></li><li><span>Words starting with a vowel (A, E, I, O, U) simply have \"WAY\" appended to the end.</span></li></ul><h3><span>Examples</span></h3><pre><code>pigLatin(\"Cats are great pets.\")\n➞ \"Atscay areway reatgay etspay.\"\n\npigLatin(\"Tom got a small piece of pie.\")\n➞ \"Omtay otgay away allsmay iecepay ofway iepay.\"\n\npigLatin(\"He told us a very exciting tale.\")\n➞ \"Ehay oldtay usway away eryvay excitingway aletay.\"</code></pre><h3><span>Notes</span></h3><p><span>Be sure to preserve proper capitalization and punctuation.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(pigLatin(\"Cats are great pets.\"), \"Atscay areway reatgay etspay.\")",
			"Test.assertEquals(pigLatin(\"Tom got a small piece of pie.\"), \"Omtay otgay away mallsay iecepay ofway iepay.\")",
			"Test.assertEquals(pigLatin(\"He told us a very exciting tale.\"), \"Ehay oldtay usway away eryvay excitingway aletay.\")",
			"Test.assertEquals(pigLatin(\"A diamond is not enough.\"), \"Away iamondday isway otnay enoughway.\")",
			"Test.assertEquals(pigLatin(\"Hurry!\"), \"Urryhay!\")"
		],
		"starterFn": [
			"1\nfunction pigLatin(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4rEcJErhoTRbNRnKH"
	},
	{
		"title": "Break Point",
		"description": "<p><span>A number has a </span><strong><span>breakpoint</span></strong><span> if it can be split in a way where the digits on the left side and the digits on the right side sum to the same number.</span></p><p><span>For instance, the number </span><em><span>35190</span></em><span> can be sliced between the digits </span><em><span>351</span></em><span> and </span><em><span>90</span></em><span>, since </span><em><span>3 + 5 + 1 = 9</span></em><span> and </span><em><span>9 + 0 = 9</span></em><span>. On the other hand, the number </span><em><span>555</span></em><span> does </span><strong><span>not</span></strong><span> have a </span><strong><span>breakpoint</span></strong><span> (you must split </span><strong><span>between</span></strong><span> digits).</span></p><p><span>Create a function that returns </span><code>true</code><span> if a number has a breakpoint, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>breakPoint(159780) ➞ true\n\nbreakPoint(112) ➞ true\n\nbreakPoint(1034) ➞ true\n\nbreakPoint(10) ➞ false\n\nbreakPoint(343)  ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Read each digit as only one number.</span></li><li><span>Check the resources tab for a hint.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(breakPoint(159780), true)",
			"Test.assertEquals(breakPoint(112), true)",
			"Test.assertEquals(breakPoint(10), false)",
			"Test.assertEquals(breakPoint(1034), true)",
			"Test.assertEquals(breakPoint(343), false)",
			"Test.assertEquals(breakPoint(1119444), true)",
			"Test.assertEquals(breakPoint(6666), true)",
			"Test.assertEquals(breakPoint(9777771), false)"
		],
		"starterFn": [
			"1\nfunction breakPoint(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eoFDKdjN9tFXWcEQi"
	},
	{
		"title": "Shuffled Properly?",
		"description": "<p><span>Given an array of </span><em><span>10 numbers</span></em><span>, return whether or not the array is shuffled sufficiently enough. In this case, if </span><strong><span>3 or more</span></strong><span> numbers appear </span><strong><span>consecutively</span></strong><span> (ascending or descending), return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>isShuffledWell([1, 2, 3, 5, 8, 6, 9, 10, 7, 4]) ➞ false\n// 1, 2, 3 appear consecutively\n\nisShuffledWell([3, 5, 1, 9, 8, 7, 6, 4, 2, 10]) ➞ false\n// 9, 8, 7, 6 appear consecutively\n\nisShuffledWell([1, 5, 3, 8, 10, 2, 7, 6, 4, 9]) ➞ true\n// No consecutive numbers appear\n\nisShuffledWell([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) ➞ true\n// No consecutive numbers appear</code></pre><h3><span>Notes</span></h3><ul><li><span>Only steps of 1 in either direction count as consecutive (i.e. a sequence of odd and even numbers would count as being properly shuffled (see example #4)).</span></li><li><span>You will get numbers from 1-10.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isShuffledWell([1, 2, 3, 5, 8, 6, 9, 10, 7, 4]), false, \"1, 2, 3 appear consecutively.\")",
			"Test.assertEquals(isShuffledWell([3, 5, 1, 9, 8, 7, 6, 4, 2, 10]), false, \"9, 8, 7, 6 appear consecutively.\")",
			"Test.assertEquals(isShuffledWell([1, 5, 3, 8, 10, 2, 7, 6, 4, 9]), true, \"No consecutive numbers appear.\")",
			"Test.assertEquals(isShuffledWell([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]), true, \"No consecutive numbers appear.\")",
			"Test.assertEquals(isShuffledWell([5, 6, 7, 9, 1, 10, 3, 8, 2, 4]), false)",
			"Test.assertEquals(isShuffledWell([3, 9, 7, 5, 2, 4, 10, 1, 8, 6]), true)",
			"Test.assertEquals(isShuffledWell([6, 4, 2, 1, 3, 7, 8, 10, 5, 9]), true)",
			"Test.assertEquals(isShuffledWell([2, 6, 10, 9, 8, 1, 4, 7, 3, 5]), false)",
			"Test.assertEquals(isShuffledWell([6, 10, 5, 8, 4, 2, 7, 9, 3, 1]), true)",
			"Test.assertEquals(isShuffledWell([3, 10, 5, 2, 6, 9, 8, 4, 1, 7]), true)",
			"Test.assertEquals(isShuffledWell([10, 7, 9, 5, 4, 6, 3, 8, 2, 1]), true)",
			"Test.assertEquals(isShuffledWell([3, 5, 9, 6, 10, 1, 4, 8, 7, 2]), true)",
			"Test.assertEquals(isShuffledWell([10, 7, 8, 4, 3, 9, 5, 1, 2, 6]), true)",
			"Test.assertEquals(isShuffledWell([2, 4, 8, 7, 3, 9, 1, 10, 6, 5]), true)",
			"Test.assertEquals(isShuffledWell([9, 6, 1, 3, 10, 8, 5, 4, 7, 2]), true)",
			"Test.assertEquals(isShuffledWell([2, 3, 9, 7, 10, 8, 4, 6, 1, 5]), true)",
			"Test.assertEquals(isShuffledWell([3, 8, 5, 6, 2, 7, 4, 1, 10, 9]), true)",
			"Test.assertEquals(isShuffledWell([1, 6, 4, 10, 3, 5, 7, 2, 9, 8]), true)",
			"Test.assertEquals(isShuffledWell([1, 10, 8, 9, 2, 3, 4, 7, 5, 6]), false)",
			"Test.assertEquals(isShuffledWell([5, 4, 3, 10, 9, 2, 7, 6, 8, 1]), false)",
			"Test.assertEquals(isShuffledWell([4, 7, 8, 3, 5, 9, 2, 6, 1, 10]), true)",
			"Test.assertEquals(isShuffledWell([5, 8, 6, 7, 3, 2, 4, 9, 10, 1]), true)",
			"Test.assertEquals(isShuffledWell([3, 7, 1, 4, 8, 6, 5, 9, 10, 2]), true)",
			"Test.assertEquals(isShuffledWell([10, 1, 9, 4, 3, 2, 7, 8, 6, 5]), false)",
			"Test.assertEquals(isShuffledWell([3, 2, 6, 4, 1, 5, 8, 10, 9, 7]), true)",
			"Test.assertEquals(isShuffledWell([1, 7, 8, 5, 9, 10, 4, 6, 2, 3]), true)"
		],
		"starterFn": [
			"1\nfunction isShuffledWell(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jx9hhCFHp92EpjB2J"
	},
	{
		"title": "Souvenir Shop",
		"description": "<p><em><span>On a vacation abroad, you see a souvenir shop and decide to head inside. There are snow globes, postcards, fridge magnets and all the other goodies you'd typically find.</span></em></p><p><span>Given an array of </span><em><span>prices of things in the store</span></em><span> and </span><em><span>the amount of money you have</span></em><span>, return the </span><strong><span>maximum</span></strong><span> number of items you could possibly buy.</span></p><h3><span>Examples</span></h3><pre><code>maxItems([\"$1\", \"$1\", \"$2\"], \"$3\") ➞ 2\n\nmaxItems([\"$10\", \"$7\", \"$2\", \"$60\"], \"$20\") ➞ 3\n\nmaxItems([\"$15\", \"$5\", \"$30\", \"$30\", \"$10\"], \"$2\") ➞ \"Not enough funds!\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If you cannot afford anything, return </span><code>\"Not enough funds!\"</code></li><li><span>Prices will be whole numbers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(maxItems([\"$1\", \"$1\", \"$2\"], \"$3\"), 2)",
			"Test.assertEquals(maxItems([\"$10\", \"$7\", \"$2\", \"$60\"], \"$20\"), 3)",
			"Test.assertEquals(maxItems([\"$15\", \"$5\", \"$30\", \"$30\", \"$10\"], \"$2\"), \"Not enough funds!\")",
			"Test.assertEquals(maxItems([\"$99\", \"$8\"], \"$9\"), 1)",
			"Test.assertEquals(maxItems([\"$85\", \"$88\", \"$72\", \"$77\", \"$53\"], \"$56\"), 1)",
			"Test.assertEquals(maxItems([\"$12\", \"$2\", \"$49\", \"$21\", \"$76\", \"$64\"], \"$37\"), 3)",
			"Test.assertEquals(maxItems([\"$3\", \"$17\", \"$12\", \"$98\", \"$12\", \"$91\", \"$41\", \"$73\"], \"$116\"), 5)",
			"Test.assertEquals(maxItems([\"$18\", \"$16\", \"$32\", \"$30\", \"$43\", \"$80\", \"$13\"], \"$86\"), 4)",
			"Test.assertEquals(maxItems([\"$20\", \"$11\", \"$8\", \"$59\", \"$64\", \"$36\", \"$41\", \"$99\", \"$98\"], \"$357\"), 8)",
			"Test.assertEquals(maxItems([\"$12\", \"$98\", \"$56\", \"$88\"], \"$489\"), 4)",
			"Test.assertEquals(maxItems([\"$12\"], \"$26\"), 1)",
			"Test.assertEquals(maxItems([\"$65\", \"$78\", \"$78\", \"$61\", \"$51\", \"$91\", \"$76\", \"$27\", \"$85\", \"$70\"], \"$64\"), 1)",
			"Test.assertEquals(maxItems([\"$28\", \"$64\"], \"$404\"), 2)",
			"Test.assertEquals(maxItems([\"$69\"], \"$188\"), 1)",
			"Test.assertEquals(maxItems([\"$59\", \"$99\", \"$59\", \"$90\", \"$75\", \"$19\", \"$36\", \"$56\", \"$79\", \"$5\"], \"$74\"), 3)",
			"Test.assertEquals(maxItems([\"$73\", \"$7\", \"$75\", \"$33\", \"$7\", \"$95\", \"$11\"], \"$463\"), 7)",
			"Test.assertEquals(maxItems([\"$58\", \"$64\", \"$85\", \"$21\", \"$91\", \"$1\"], \"$333\"), 6)",
			"Test.assertEquals(maxItems([\"$89\", \"$7\", \"$27\"], \"$451\"), 3)",
			"Test.assertEquals(maxItems([\"$10\", \"$63\", \"$25\", \"$2\", \"$10\", \"$59\", \"$71\", \"$60\", \"$88\"], \"$129\"), 5)",
			"Test.assertEquals(maxItems([\"$23\", \"$82\", \"$75\", \"$17\", \"$67\", \"$67\", \"$95\", \"$48\", \"$15\"], \"$185\"), 5)",
			"Test.assertEquals(maxItems([\"$86\", \"$22\", \"$92\", \"$8\", \"$44\", \"$97\"], \"$102\"), 3)",
			"Test.assertEquals(maxItems([\"$16\"], \"$136\"), 1)",
			"Test.assertEquals(maxItems([\"$37\", \"$46\", \"$68\", \"$7\", \"$75\", \"$53\", \"$79\"], \"$20\"), 1)",
			"Test.assertEquals(maxItems([\"$71\", \"$36\", \"$5\", \"$56\", \"$33\", \"$66\", \"$91\", \"$49\"], \"$120\"), 3)",
			"Test.assertEquals(maxItems([\"$43\", \"$70\", \"$25\", \"$100\", \"$47\", \"$95\", \"$8\"], \"$66\"), 2)",
			"Test.assertEquals(maxItems([\"$70\", \"$11\", \"$87\", \"$65\", \"$6\", \"$9\", \"$63\", \"$55\", \"$90\", \"$95\"], \"$177\"), 5)"
		],
		"starterFn": [
			"1\nfunction maxItems(prices, budget) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KTrcDJkkW9inXesDy"
	},
	{
		"title": "Super-d Numbers",
		"description": "<p><span>A number </span><code>n</code><span> becomes a super-</span><em><span>d</span></em><span> number when, for any digit </span><code>d</code><span> from 2 up to 9, the result of </span><code>d * nᵈ</code><span> contains </span><code>d</code><span> consecutive digits equal to </span><code>d</code><span>.</span></p><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns:</span></p><ul><li><code>\"Super-d Number\"</code><span> if </span><code>n</code><span> is a super-</span><em><span>d</span></em><span> number, replacing the letter</span><code>d</code><span> with the digit (any from 2 up to 9) that makes it super;</span></li><li><code>\"Normal Number\"</code><span> if </span><code>n</code><span> is not a super-</span><em><span>d</span></em><span> number.</span></li></ul><h3><span>Examples</span></h3><pre><code>isSuperD(19) ➞ \"Super-2 Number\"\n// when d = 2\n// 2 * 19² = 722\n// There are two (d) consecutives digits equal to 2 (d)\n\nisSuperD(753) ➞ \"Super-3 Number\"\n// when d = 3\n// 3 * 753³ = 1280873331\n// There are three (d) consecutives digits equal to 3 (d)\n\nisSuperD(1168) ➞ \"Super-4 Number\"\n// when d = 4\n// 4 * 1168⁴ = 7444428488704\n// There are four (d) consecutives digits equal to 4 (d)\n\nisSuperD(24) ➞ \"Normal Number\"\n// No cases where d * 24ᵈ (with d being any digit from 2 up to 9)...\n// ...leads to a result containing d consecutive digits equal to d</code></pre><h3><span>Notes</span></h3><ul><li><span>Any given </span><code>n</code><span> will be a positive integer greater or equal to 0.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isSuperD(19), \"Super-2 Number\", \"Example #1\");",
			"Test.assertEquals(isSuperD(753), \"Super-3 Number\", \"Example #2\");",
			"Test.assertEquals(isSuperD(1168), \"Super-4 Number\", \"Example #3\");",
			"Test.assertEquals(isSuperD(24), \"Normal Number\", \"Example #4\");",
			"Test.assertEquals(isSuperD(20379), \"Super-5 Number\");",
			"Test.assertEquals(isSuperD(185423), \"Super-8 Number\");",
			"Test.assertEquals(isSuperD(1170), \"Normal Number\");",
			"Test.assertEquals(isSuperD(118), \"Normal Number\");",
			"Test.assertEquals(isSuperD(93568867), \"Super-9 Number\");",
			"Test.assertEquals(isSuperD(333), \"Super-2 Number\");",
			"Test.assertEquals(isSuperD(107), \"Super-2 Number\");",
			"Test.assertEquals(isSuperD(1184321), \"Super-7 Number\");",
			"Test.assertEquals(isSuperD(10098023246), \"Normal Number\");",
			"Test.assertEquals(isSuperD(1045361), \"Super-6 Number\");",
			"Test.assertEquals(isSuperD(0), \"Normal Number\", \"Paradoxical Test\");"
		],
		"starterFn": [
			"1\nfunction isSuperD(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fw8qrxpz2iGWh5QcE"
	},
	{
		"title": "Reverse the String (with a catch)",
		"description": "<p><span>Create a function that takes a string and returns the reversed string. However there's a few rules to follow in order to make the challenge interesting:</span></p><ul><li><span>The UPPERCASE/lowercase positions must be kept in the same order as the original string (see example #1 and #2).</span></li><li><span>Spaces must be kept in the same order as the original string (see example #3).</span></li></ul><h3><span>Examples</span></h3><pre><code>specialReverseString(\"Edabit\") ➞ \"Tibade\"\n\nspecialReverseString(\"UPPER lower\") ➞ \"REWOL reppu\"\n\nspecialReverseString(\"1 23 456\") ➞ \"6 54 321\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(specialReverseString('Edabit'), 'Tibade')",
			"Test.assertEquals(specialReverseString('UPPER lower'), 'REWOL reppu')",
			"Test.assertEquals(specialReverseString('1 23 456'), '6 54 321')",
			"Test.assertEquals(specialReverseString('Hello World!'), '!dlro Wolleh')",
			"Test.assertEquals(specialReverseString(\"Where's your dog Daisy?\"), \"?ysiadg odru oys 'erehw\")",
			"Test.assertEquals(specialReverseString('addition(3, 2) ➞ 5'), '5➞)2,3(noit id d a')",
			"Test.assertEquals(specialReverseString(\"It's known that CSS means Cascading Style Sheets\"), \"Stee hsely tsgn IDA csacs Naemsscta Htnwo Nks'ti\")"
		],
		"starterFn": [
			"1\nfunction specialReverseString(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AcL4HiKbC9cYSHmYt"
	},
	{
		"title": "Cuban Prime",
		"description": "<p><span>Create a function to check whether a given number is </span><strong><span>Cuban Prime</span></strong><span>. A cuban prime is a prime number that is a solution to one of two different specific equations involving third powers of x and y. For this challenge we are only concerned with the cuban numbers from the </span><strong><span>first equation</span></strong><span>. We </span><strong><span>ignore</span></strong><span> the cuban numbers from the  </span><strong><span>second equation</span></strong><span>.</span></p><h3><span>Equation Form</span></h3><pre><code>p = (x^3 - y^3)/(x - y) , x  = y + 1, y &gt; 0</code></pre><p><span>...and the first few cuban primes from this equation are 7, 19, 37, 61, 127, 271.</span></p><h3><span>Examples</span></h3><pre><code>cubanPrime(7) ➞ \"7 is cuban prime\"\n\ncubanPrime(9) ➞ \"9 is not cuban prime\"\n\ncubanPrime(331) ➞ \"331 is cuban prime\"\n\ncubanPrime(40) ➞ \"40 is not cuban prime\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The inputs are positive integers only.</span></li><li><span>Check out the resource tab.</span></li><li><strong><span>Hint:</span></strong><span> Centered Hexagonal Number</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(cubanPrime(7), \"7 is cuban prime\")",
			"Test.assertEquals(cubanPrime(11), \"11 is not cuban prime\")",
			"Test.assertEquals(cubanPrime(40), \"40 is not cuban prime\")",
			"Test.assertEquals(cubanPrime(15), \"15 is not cuban prime\")",
			"Test.assertEquals(cubanPrime(271), \"271 is cuban prime\")",
			"Test.assertEquals(cubanPrime(919), \"919 is cuban prime\")",
			"Test.assertEquals(cubanPrime(1801), \"1801 is cuban prime\")",
			"Test.assertEquals(cubanPrime(30), \"30 is not cuban prime\")",
			"Test.assertEquals(cubanPrime(721), \"721 is not cuban prime\")",
			"Test.assertEquals(cubanPrime(217), \"217 is not cuban prime\")",
			"Test.assertEquals(cubanPrime(4447), \"4447 is cuban prime\")"
		],
		"starterFn": [
			"1\nfunction cubanPrime(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TrPA4gmaeFoNLnySd"
	},
	{
		"title": "Fibonacci String",
		"description": "<p><span>A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers </span><code>0</code><span> and </span><code>1</code><span> in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to the Fibonacci series.</span></p><h3><span>Examples</span></h3><pre><code>fibStr(3, [\"j\", \"h\"]) ➞ \"j, h, hj\"\n\nfibStr(5, [\"e\", \"a\"]) ➞ \"e, a, ae, aea, aeaae\"\n\nfibStr(6, [\"n\", \"k\"]) ➞ \"n, k, kn, knk, knkkn, knkknknk\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All values for </span><code>n</code><span> will be at least 2.</span></li><li><span>A recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/aEWotdg3r6eB2QLWK\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fibStr(3, [\"j\", \"h\"]), \"j, h, hj\")",
			"Test.assertEquals(fibStr(5, [\"e\", \"a\"]), \"e, a, ae, aea, aeaae\")",
			"Test.assertEquals(fibStr(6, [\"n\", \"k\"]), \"n, k, kn, knk, knkkn, knkknknk\")",
			"Test.assertEquals(fibStr(7, [\"f\", \"c\"]), \"f, c, cf, cfc, cfccf, cfccfcfc, cfccfcfccfccf\")",
			"Test.assertEquals(fibStr(9, [\"b\", \"a\"]), \"b, a, ab, aba, abaab, abaababa, abaababaabaab, abaababaabaababaababa, abaababaabaababaababaabaababaabaab\")",
			"Test.assertEquals(fibStr(11, [\"z\", \"x\"]), \"z, x, xz, xzx, xzxxz, xzxxzxzx, xzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz\")"
		],
		"starterFn": [
			"1\nfunction fibStr(n, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dZcAcu86rBtXLvXWD"
	},
	{
		"title": "The Red/Yellow Sequence",
		"description": "<p><span>Write a function that takes a number </span><code>n</code><span> and a string </span><code>s</code><span> as arguments and returns the </span><em><span>n</span></em><span>th term of the Red/Yellow sequence. </span><code>s</code><span> will ask the function what to return, all, red or yellow.</span></p><p><img alt=\"alt text\" title=\"Red/Yellow Sequence\" src=\"https://edabit-challenges.s3.amazonaws.com/red_yellow_sequence.png\"></p><h3><span>Examples</span></h3><pre><code>rySeq(2, \"all\") ➞ 5\n\nrySeq(3, \"yellow\") ➞ 8\n\nrySeq(28, \"red\") ➞ 55\n\nrySeq(1, \"blue\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>If </span><code>s</code><span> is not \"all\", \"yellow\" or \"red\", return </span><code>false</code><span>.</span></li><li><span>If </span><code>n</code><span> is 0, return </span><code>0</code><span>.</span></li><li><code>n</code><span> is always a positive integer.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(rySeq(2, \"all\"), 5)",
			"Test.assertEquals(rySeq(1, \"yellow\"), 0)",
			"Test.assertEquals(rySeq(1, \"blue\"), false)",
			"Test.assertEquals(rySeq(28, \"red\"), 55)",
			"Test.assertEquals(rySeq(6, \"all\"), 61)",
			"Test.assertEquals(rySeq(3), false)",
			"Test.assertEquals(rySeq(0, \"all\"), 0)",
			"Test.assertEquals(rySeq(22, \"all\"), 925)",
			"Test.assertEquals(rySeq(28, \"yellow\"), 1458)",
			"Test.assertEquals(rySeq(23, \"red\"), 45)",
			"Test.assertEquals(rySeq(150, \"all\"), 44701)",
			"Test.assertEquals(rySeq(30, \"yellow\"), 1682)",
			"Test.assertEquals(rySeq(1000, \"red\"), 1999)",
			"Test.assertEquals(rySeq(28, \"green\"), false)"
		],
		"starterFn": [
			"1\nfunction rySeq(n, s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RhF2wctDjwNCeS4hB"
	},
	{
		"title": "Is a String Stretched?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if the first string is the second string </span><strong><span>stretched</span></strong><span>, and </span><code>false</code><span> otherwise. A stretch is to repeat each character in a string the </span><strong><span>same number of times</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>isStretched(\"pppaaannndddaaa\", \"panda\") ➞ true\n\nisStretched(\"sssshhiipp\", \"ship\") ➞ false\n\nisStretched(\"magnet\", \"magnet\") ➞ true\n\nisStretched(\"magneto\", \"magnet\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Both strings must contain the same letters in order for the stretch to be valid.</span></li><li><span>All strings will be in lower case letters.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isStretched(\"pppaaannndddaaa\", \"panda\"), true)",
			"Test.assertEquals(isStretched(\"hheelllloo\", \"hello\"), true)",
			"Test.assertEquals(isStretched(\"magnet\", \"magnet\"), true)",
			"Test.assertEquals(isStretched(\"eeeeemmmmmoooootttttiiiiiooooonnnnn\", \"emotion\"), true)",
			"Test.assertEquals(isStretched(\"sssshhiipp\", \"ship\"), false)",
			"Test.assertEquals(isStretched(\"cccaaannnddooorrr\", \"candor\"), false)",
			"Test.assertEquals(isStretched(\"relationshiipp\", \"relationship\"), false)",
			"Test.assertEquals(isStretched(\"magneto\", \"magnet\"), false)",
			"Test.assertEquals(isStretched(\"maggnet\", \"magnet\"), false)"
		],
		"starterFn": [
			"1\nfunction isStretched(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gmpe3wEi64PmrwFMK"
	},
	{
		"title": "The Happy Function",
		"description": "<p><span>In this challenge, you have to implement an algorithm to establish if a given positive integer </span><code>num</code><span> is a Happy number, and how many steps of the algorithm are needed to establish it.</span></p><p><span>You have to repeatedly transform the given </span><code>num</code><span> into the sum of its squared digits:</span></p><ul><li><span>If after the transformation the new number is equal to </span><code>1</code><span>, </span><code>num</code><span> is a Happy number and the algorithm stops.</span></li><li><span>If after the transformation, the new number is not equal to </span><code>1</code><span>, you have to transform it again.</span></li></ul><p><img alt=\"Happy Numbers\" src=\"https://edabit-challenges.s3.amazonaws.com/happyjcnc.png\"></p><p><span>If a number can't be reduced to </span><code>1</code><span>, sooner or later the algorithm will enter into an infinitely repeating loop:</span></p><pre><code>... 20, 4, 16, 37, 58, 89, 145, 42, 20, 4 ...</code></pre><p><span>Given a positive integer </span><code>num</code><span>, implement a function that returns:</span></p><ul><li><span>If </span><code>num</code><span> is a Happy number, the string </span><code>\"HAPPY x\"</code><span> with the \"</span><strong><span>x</span></strong><span>\" being the number of steps necessary to reduce </span><code>num</code><span> to 1.</span></li><li><span>If </span><code>num</code><span> is not a Happy number, the string </span><code>\"SAD x\"</code><span> with the \"</span><strong><span>x</span></strong><span>\" being the number of steps necessary to enter into the infinite loop reaching so any number in the series </span><code>4, 16, 37, 58, 89, 145, 42, 20</code><span>, plus the number of steps necessary to obtain again that number.</span></li></ul><p><span>Look at the examples below for a better visualization.</span></p><h3><span>Examples</span></h3><pre><code>happyAlgorithm(139) ➞ \"HAPPY 5\"\n\n// Step 1: Transform 139\n// 1² + 3² + 9² = 1 + 9 + 81 = 91\n\n// Step 2: Transform 91\n// 9² + 1² = 81 + 1 = 82\n\n// Step 3: Transform 82\n// 8² + 2² = 64 + 4 = 68\n\n// Step 4: Transform 68\n// 6² + 8² = 36 + 64 = 100\n\n// Step 5: Transform 100\n// 1² + 0² + 0² = 1 + 0 + 0 = 1\n\n// The algorithm stops at step 5: 139 is a Happy number\n\nhappyAlgorithm(67) ➞ \"SAD 10\"\n\n// Step 1: Transform 67\n// 6² + 7² = 36 + 49 = 85\n\n// Step 2: Transform 85\n// 8² + 5² = 64 + 25 = 89\n// It entered into the infinite loop...\n// ...but we have to demonstrate that is a loop!\n\n// Step 3: Transform 89\n// 8² + 9² = 64 + 81 = 145\n\n// Step 4: Transform 145: result is 42\n// Step 5: Transform 42: result is 20\n// Step 6: Transform 20: result is 4\n// Step 7: Transform 4: result is 16\n// Step 8: Transform 16: result is 37\n// Step 9: Transform 37: result is 58\n// Step 10: Transform 58: result is 89\n\n// 89 was the result of step 2: it's a loop\n// The algorithm stops at step 10: 67 is not a Happy number\n\nhappyAlgorithm(1) ➞ \"HAPPY 1\"\n\n// Step 1: Transform 1\n// 1² = 1\n\n// The algorithm stops at step 1: 1 is a Happy number\n\nhappyAlgorithm(89) ➞ \"SAD 8\"\n\n// Step 1: Transform 89: result is 145\n// Step 2: Transform 145: result is 42\n// Step 3: Transform 42: result is 20\n// Step 4: Transform 20: result is 4\n// Step 5: Transform 4: result is 16\n// Step 6: Transform 16: result is 37\n// Step 7: Transform 37: result is 58\n// Step 8: Transform 58: result is 89\n\n// 89 was the original number: it's a loop\n// The algorithm stops at step 8: 89 is not a Happy number</code></pre><h3><span>Notes</span></h3><ul><li><span>The transformation of a single-digit number is, trivially, the square of the digit (see example #3).</span></li><li><span>If the given number is </span><code>1</code><span>, a step is needed to establish if it's Happy (see example #3).</span></li><li><span>To establish if a number is not happy, you have to find the number of steps necessary to obtain again a number already found (it can be a number obtained through a transformation as in example #2 or the same given number as in example #4).</span></li><li><span>You can expect only positive integers as input, without exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(happyAlgorithm(139), \"HAPPY 5\", \"Example #1\")",
			"Test.assertEquals(happyAlgorithm(67), \"SAD 10\", \"Example #2\")",
			"Test.assertEquals(happyAlgorithm(1), \"HAPPY 1\", \"Example #3\")",
			"Test.assertEquals(happyAlgorithm(44), \"HAPPY 4\")",
			"Test.assertEquals(happyAlgorithm(89), \"SAD 8\")",
			"Test.assertEquals(happyAlgorithm(10), \"HAPPY 1\")",
			"Test.assertEquals(happyAlgorithm(1327), \"SAD 17\")",
			"Test.assertEquals(happyAlgorithm(2871), \"SAD 17\")",
			"Test.assertEquals(happyAlgorithm(3970), \"HAPPY 6\")",
			"Test.assertEquals(happyAlgorithm(5209), \"SAD 11\")",
			"Test.assertEquals(happyAlgorithm(6329), \"HAPPY 3\")",
			"Test.assertEquals(happyAlgorithm(8888), \"SAD 12\")",
			"Test.assertEquals(happyAlgorithm(9331), \"HAPPY 2\")",
			"Test.assertEquals(happyAlgorithm(10000), \"HAPPY 1\")"
		],
		"starterFn": [
			"1\nfunction happyAlgorithm(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NMCc4pcDx6d7hkvcu"
	},
	{
		"title": "Increasing Word Weights",
		"description": "<p><span>The </span><em><span>weight</span></em><span> of a word can be calculated by summing the </span><code>Unicode</code><span> code point for each character in the word, </span><em><span>excluding</span></em><span> any punctuation:</span></p><pre><code>\"Wouldn't\" = 87 + 111 + 117 + 108 + 100 + 110 + 116 = 749</code></pre><p><span>Write a function that takes a sentence as a string, returning </span><code>true</code><span> if all word weights increase for each word in the sentence, and </span><code>false</code><span> if any word weight decreases or remains the same.</span></p><h3><span>Examples</span></h3><pre><code>increasingWordWeights(\"Why not try?\") ➞ true\n// 312 -&gt; 337 -&gt; 351 (weights increase)\n\nincreasingWordWeights(\"All other roads.\") ➞ false\n// 281 -&gt; 546 -&gt; 537 (537 is less than 546)</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(increasingWordWeights(\"Why not try?\"), true)",
			"Test.assertEquals(increasingWordWeights(\"Face your fears, never settle.\"), true)",
			"Test.assertEquals(increasingWordWeights(\"DON'T SHOUT!\"), true)",
			"Test.assertEquals(increasingWordWeights(\"Can you just leave?\"), true)",
			"Test.assertEquals(increasingWordWeights(\"You will push ahead, creating solutions!\"), true)",
			"Test.assertEquals(increasingWordWeights(\"All that money doesn't guarantee happiness.\"), true)",
			"Test.assertEquals(increasingWordWeights(\"Full steam ahead!\"), false)",
			"Test.assertEquals(increasingWordWeights(\"Not all those who wander are lost.\"), false)",
			"Test.assertEquals(increasingWordWeights(\"All other roads.\"), false)",
			"Test.assertEquals(increasingWordWeights(\"Whatever you are, be a good one.\"), false)",
			"Test.assertEquals(increasingWordWeights(\"Standing on the shoulders of giants.\"), false)",
			"Test.assertEquals(increasingWordWeights(\"You get what you settle for.\"), false)"
		],
		"starterFn": [
			"1\nfunction increasingWordWeights(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HCc5AiPdjjREC7jRP"
	},
	{
		"title": "Get the Excel Column",
		"description": "<p><span>Excel column names are in the following format:</span></p><pre><code>A, B, ..., Z, AA, ..., AZ, BA, ..., ZZ, AAA, AAB, ...</code></pre><p><span>Write a function that returns the </span><strong><span>column number</span></strong><span> from the row name.</span></p><h3><span>Examples</span></h3><pre><code>column(\"A\") ➞ 1\n\ncolumn(\"Z\") ➞ 26\n\ncolumn(\"AA\") ➞ 27\n\ncolumn(\"BA\") ➞ 53</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(column(\"A\"), 1)",
			"Test.assertEquals(column(\"B\"), 2)",
			"Test.assertEquals(column(\"Z\"), 26)",
			"Test.assertEquals(column(\"AA\"), 27)",
			"Test.assertEquals(column(\"BA\"), 53)",
			"Test.assertEquals(column(\"BB\"), 54)",
			"Test.assertEquals(column(\"CW\"), 101)",
			"Test.assertEquals(column(\"DD\"), 108)",
			"Test.assertEquals(column(\"PQ\"), 433)",
			"Test.assertEquals(column(\"ZZ\"), 702)",
			"Test.assertEquals(column(\"ABC\"), 731)",
			"Test.assertEquals(column(\"ZZT\"), 18272)",
			"Test.assertEquals(column(\"STVW\"), 348059)"
		],
		"starterFn": [
			"1\nfunction column(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bqJmJxZYgkRKrLq7v"
	},
	{
		"title": "Happy Numbers",
		"description": "<p><span>You are given an array of </span><code>0</code><span>s and </span><code>1</code><span>s, like the one below:</span></p><pre><code>[0, 1, 0, 0, 0, 1, 1, 1, 0, 1]\n\n// The first element, a 0, and the last element, a 1 are both unhappy.\n// The second element, a 1 is unhappy.\n// The second-to-last element, a 0 is unhappy.\n// All other numbers in this array are happy.</code></pre><p><span>A </span><code>1</code><span> is </span><strong><span>unhappy</span></strong><span> if the digit to its left and the digit to its right are both 0s. A </span><code>0</code><span> is </span><strong><span>unhappy</span></strong><span> if the digit to its left and the digit to its right are both 1s. If a number has only one neighbor, it is </span><strong><span>unhappy</span></strong><span> if its only neighbor is different. Otherwise, a number is </span><strong><span>happy</span></strong><span>.</span></p><p><span>Write a function that takes in an array of </span><code>0</code><span>s and </span><code>1</code><span>s and outputs the </span><strong><span>portion of numbers which are happy</span></strong><span>. The total portion of numbers which are happy can be represented as:</span></p><pre><code>portion of happy 0s = # happy 0s / total # 0s\nportion of happy 1s = # happy 1s / total # 1s\nportion of happy numbers = (portion of happy 0s + portion of happy 1s) / 2</code></pre><p><span>In the example above, </span><code>0.6</code><span> is the number of happy numbers.</span></p><h3><span>Examples</span></h3><pre><code>portionHappy([0, 1, 0, 1, 0]) ➞ 0\n\nportionHappy([0, 1, 1, 0]) ➞ 0.5\n\nportionHappy([0, 0, 0, 1, 1]) ➞ 1\n\nportionHappy([1, 0, 0, 1, 1]) ➞ 0.8</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember: a </span><code>0</code><span> border number is unhappy if its only neighbor is a </span><code>1</code><span> and vice versa.</span></li><li><span>An array will contain at least two elements.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(portionHappy([0, 1, 0, 1, 0]), 0)",
			"Test.assertEquals(portionHappy([0, 1, 1, 0]), 0.5)",
			"Test.assertEquals(portionHappy([0, 0, 0, 1, 1]), 1)",
			"Test.assertEquals(portionHappy([1, 0, 0, 1, 1]), 0.8)",
			"Test.assertEquals(portionHappy([1, 1, 1, 1, 1]), 1)",
			"Test.assertEquals(portionHappy([1, 1, 0, 0, 1, 1]), 1)",
			"Test.assertEquals(portionHappy([1, 1, 0, 0, 0, 1, 1]), 1)",
			"Test.assertEquals(portionHappy([1, 0, 0, 0, 1]), 0.6)",
			"Test.assertEquals(portionHappy([1, 0, 1, 0, 0, 0]), 0.5)",
			"Test.assertEquals(portionHappy([1, 1]), 1)",
			"Test.assertEquals(portionHappy([1, 0]), 0)"
		],
		"starterFn": [
			"1\nfunction portionHappy(numbers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Qoqaohvgh4Mi3bpjj"
	},
	{
		"title": "Get Groups with Students",
		"description": "<p><span>Create a function that takes two arrays: </span><code>groups</code><span> and </span><code>students</code><span>. It should return one array with </span><code>groups</code><span> merged with </span><code>students</code><span> by </span><code>id</code><span>. Students within groups should be ordered in the same way the </span><code>studentIds</code><span> were ordered.</span></p><h3><span>Examples</span></h3><pre><code>getGroupsWithStudents([\n  { \n    id: 1,\n    name: \"G1\",\n    studentIds: [2, 1]\n  }\n], [\n  { \n    id: 1,\n    name: \"John\"\n  },\n  {\n    id: 2,\n    name: \"Steve\"\n  }\n]) ➞ [\n  { \n    id: 1,\n    name: \"G1\",\n    students: [\n      {\n        id: 2,\n        name: \"Steve\"\n      },\n      { \n        id: 1, \n        name: \"John\"\n      }\n    ]\n  }\n]</code></pre><h3><span>Notes</span></h3><p><span>Try doing it with an arrow function.</span></p>",
		"publishedBy": "Bartosz Cytrowski",
		"publishedByUrl": "https://edabit.com/user/QCchMDx3z8NcqT8QJ",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"objects"
		],
		"tests": [
			"const objectsAreEqual = (actual, expected) => Object.keys(expected).every(",
			"  key => actual[key] === expected[key]",
			")",
			"const areEqual = (actual, expected, compare) => expected.every(",
			"  (item, index) => compare(actual[index], item)",
			")",
			"const sets = [",
			"  [",
			"    [",
			"      {",
			"        id: 1,",
			"        name: 'G1',",
			"        studentIds: [2, 1]",
			"      },",
			"      {",
			"        id: 2,",
			"        name: 'G2',",
			"        studentIds: [1]",
			"      }",
			"    ],",
			"    [",
			"      {",
			"        id: 1,",
			"        name: 'John'",
			"      },",
			"      {"
		],
		"starterFn": [
			"1\nfunction getGroupsWithStudents(groups, students) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2TKegjnoSQ3Xeo8CB"
	},
	{
		"title": "Summation of the First n Terms",
		"description": "<p><span>Create a function that takes an expression </span><code>exp</code><span> and an upper limit </span><code>n</code><span> as arguments and returns the sum of that expression up to the n'th term (recall sigma from math class).</span></p><h3><span>Examples</span></h3><pre><code>summation(\"n\", 10) ➞ 55\n\nsummation(\"1/n\", 50) ➞ 4.5\n\nsummation(\"n**n\", 6) ➞ 50069</code></pre><h3><span>Notes</span></h3><p><span>Assume the lower limit is  </span><code>n = 1</code><span>.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(summation('n', 10), 55)",
			"Test.assertEquals(summation('1/n', 50), 4.5)",
			"Test.assertEquals(summation('n**n', 6), 50069)",
			"Test.assertEquals(summation('2', 190), 380)",
			"Test.assertEquals(summation('19', 56), 1064)",
			"Test.assertEquals(summation('-n', 100), -5050)",
			"Test.assertEquals(summation('(2*n**2 + 5*n)/3', 30), 7078.3)",
			"Test.assertEquals(summation('n*(n+1)', 30), 9920)",
			"Test.assertEquals(summation('0', 3000), 0)"
		],
		"starterFn": [
			"1\nfunction summation(exp, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cMBB43Ps6v4RdDyP4"
	},
	{
		"title": "Maximize the First Number",
		"description": "<p><span>Write a function that makes the </span><strong><span>first number as large as possible</span></strong><span> by swapping out its digits for digits in the second number.</span></p><p><span>To illustrate:</span></p><pre><code>maxPossible(9328, 456) ➞ 9658\n// 9658 is the largest possible number built from swaps from 456.\n// 3 replaced with 6 and 2 replaced with 5.</code></pre><h3><span>Examples</span></h3><pre><code>maxPossible(523, 76) ➞ 763\n\nmaxPossible(9132, 5564) ➞ 9655\n\nmaxPossible(8732, 91255) ➞ 9755</code></pre><h3><span>Notes</span></h3><ul><li><span>Each digit in the second number can only be used once.</span></li><li><span>Zero to all digits in the second number may be used.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(maxPossible(9328, 456), 9658)",
			"Test.assertEquals(maxPossible(523, 76), 763)",
			"Test.assertEquals(maxPossible(9132, 5564), 9655)",
			"Test.assertEquals(maxPossible(8732, 91255), 9755)",
			"Test.assertEquals(maxPossible(589, 777), 789)",
			"Test.assertEquals(maxPossible(1, 0), 1)",
			"Test.assertEquals(maxPossible(8, 9), 9)",
			"Test.assertEquals(maxPossible(28, 19), 98)",
			"Test.assertEquals(maxPossible(12345, 4), 42345)"
		],
		"starterFn": [
			"1\nfunction maxPossible(n1, n2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7vowiHDR5oYksAjqQ"
	},
	{
		"title": "Highest Pair",
		"description": "<p><span>You will be given a collection of five cards (representing a player's hand in poker). If your hand contains at least one pair, return an array of two elements: </span><code>true</code><span> and the card number of the highest pair (trivial if there only exists a single pair). Else, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>highestPair([\"A\", \"A\", \"Q\", \"Q\", \"6\" ]) ➞ [true, \"A\"]\n\nhighestPair([\"J\", \"6\", \"3\", \"10\", \"8\"]) ➞ false\n\nhighestPair([\"K\", \"7\", \"3\", \"9\", \"3\"]) ➞ [true, \"3\"]\n\nhighestPair([\"K\", \"9\", \"10\", \"J\", \"Q\"]) ➞ false\n\nhighestPair([\"3\", \"5\", \"5\", \"5\", \"5\"]) ➞ [true, \"5\"]</code></pre><h3><span>Notes</span></h3><p><span>Hands with three or more of the same card still count as containing a pair (see the last example).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(highestPair(['A', 'A', 'K', 'K', '3']), [true, 'A']);",
			"Test.assertSimilar(highestPair(['A', 'K', 'Q', 'J', '10']), false);",
			"Test.assertSimilar(highestPair(['A', 'K', 'K', 'K', 'Q']), [true, 'K']);",
			"Test.assertSimilar(highestPair(['A', '3', '3', '4', '4']), [true, '4']);",
			"Test.assertSimilar(highestPair(['A', 'K', 'Q', 'Q', '5']), [true, 'Q']);"
		],
		"starterFn": [
			"1\nfunction highestPair(cards) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Joj2RJJ4WyxRmkfxv"
	},
	{
		"title": "Wild Tiles",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if it is possible to build a string with a particular scrabble hand.</span></p><h3><span>Examples</span></h3><pre><code>canBuild(\"quavers\", [\"S\", \"U\", \"Q\", \"V\", \"A\", \"#\", \"#\"]) ➞ true\n\ncanBuild(\"move\", [\"M\", \"U\", \"T\", \"V\", \"E\", \"J\", \"#\"]) ➞ true\n\ncanBuild(\"move\", [\"M\", \"U\", \"T\", \"V\", \"E\", \"J\", \"S\"]) ➞ false\n\ncanBuild(\"sharp\", [\"S\", \"K\", \"H\", \"#\", \"#\", \"F\", \"F\"]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>Hashtags </span><code>\"#\"</code><span> represent wild tiles.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"games",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canBuild(\"quavers\", [\"S\", \"U\", \"Q\", \"V\", \"A\", \"#\", \"#\"]), true)",
			"Test.assertEquals(canBuild(\"move\", [\"M\", \"U\", \"T\", \"V\", \"E\", \"J\", \"#\"]), true)",
			"Test.assertEquals(canBuild(\"banter\", [\"N\", \"E\", \"B\", \"N\", \"#\", \"A\", \"T\"]), true)",
			"Test.assertEquals(canBuild(\"snake\", [\"S\", \"K\", \"E\", \"N\", \"V\", \"J\", \"A\"]), true)",
			"Test.assertEquals(canBuild(\"move\", [\"M\", \"U\", \"T\", \"V\", \"E\", \"J\", \"S\"]), false)",
			"Test.assertEquals(canBuild(\"sharp\", [\"S\", \"K\", \"H\", \"#\", \"#\", \"F\", \"F\"]), false)",
			"Test.assertEquals(canBuild(\"more\", [\"M\", \"R\", \"I\", \"E\", \"U\", \"S\", \"F\"]), false)",
			"Test.assertEquals(canBuild(\"talker\", [\"#\", \"#\", \"Z\", \"V\", \"P\", \"A\", \"K\"]), false)",
			"Test.assertEquals(canBuild(\"talker\", [\"#\", \"#\", \"T\", \"T\", \"A\", \"A\", \"L\"]), false)",
			"Test.assertEquals(canBuild(\"brain\", [\"#\", \"S\", \"B\", \"B\", \"I\", \"I\", \"#\"]), false)"
		],
		"starterFn": [
			"1\nfunction canBuild(word, letters) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2vmA8faDorenTwLf3"
	},
	{
		"title": "Time Around the World",
		"description": "<p><span>In this challenge, the goal is to calculate what time it is in two different cities. You're given a string </span><code>cityA</code><span> and the related string </span><code>timestamp</code><span> (time in </span><code>cityA</code><span>) with the date formatted in full </span><strong><span>U.S. notation</span></strong><span>, as in this example:</span></p><pre><code>\"July 21, 1983 23:01\"</code></pre><p><span>You have to return a new timestamp with date and corresponding time in </span><code>cityB</code><span>, formatted as in this example:</span></p><pre><code>\"1983-7-21 23:01\"</code></pre><p><span>See the table below for a list of given cities and their </span><strong><span>GMT</span></strong><span> (</span><em><span>Greenwich Mean Time</span></em><span>) hours offsets.</span></p><table><thead><tr><th><span>GMT</span></th><th><span>City</span></th></tr></thead><tbody><tr><td><span>- 08:00</span></td><td><span>Los Angeles</span></td></tr><tr><td><span>- 05:00</span></td><td><span>New York</span></td></tr><tr><td><span>- 04:30</span></td><td><span>Caracas</span></td></tr><tr><td><span>- 03:00</span></td><td><span>Buenos Aires</span></td></tr><tr><td><span>00:00</span></td><td><span>London</span></td></tr><tr><td><span>+ 01:00</span></td><td><span>Rome</span></td></tr><tr><td><span>+ 03:00</span></td><td><span>Moscow</span></td></tr><tr><td><span>+ 03:30</span></td><td><span>Tehran</span></td></tr><tr><td><span>+ 05:30</span></td><td><span>New Delhi</span></td></tr><tr><td><span>+ 08:00</span></td><td><span>Beijing</span></td></tr><tr><td><span>+ 10:00</span></td><td><span>Canberra</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>timeDifference(\"Los Angeles\", \"April 1, 2011 23:23\", \"Canberra\") ➞ \"2011-4-2 17:23\"\n// Can be a new day.\n\ntimeDifference(\"London\", \"July 31, 1983 23:01\", \"Rome\") ➞ \"1983-8-1 00:01\"\n// Can be a new month.\n\ntimeDifference(\"New York\", \"December 31, 1970 13:40\", \"Beijing\") ➞ \"1971-1-1 02:40\"\n// Can be a new year.</code></pre><h3><span>Notes</span></h3><ul><li><span>Pay attention to hours and minutes, a leading </span><code>0</code><span> is needed in the returned timestamp when they're a single digit (see examples #2 and #3).</span></li><li><span>Pay attention to cities with half hours offsets.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting"
		],
		"tests": [
			"Test.assertEquals(timeDifference(\"Los Angeles\", \"April 1, 2011 23:23\", \"Canberra\"), \"2011-4-2 17:23\", \"Example #1\")",
			"Test.assertEquals(timeDifference(\"London\", \"July 31, 1983 23:01\", \"Rome\"), \"1983-8-1 00:01\", \"Example #2\")",
			"Test.assertEquals(timeDifference(\"New York\", \"December 31, 1970 13:40\", \"Beijing\"), \"1971-1-1 02:40\", \"Example #3\")",
			"Test.assertEquals(timeDifference(\"London\", \"August 20, 1985 12:23\", \"Buenos Aires\"), \"1985-8-20 09:23\")",
			"Test.assertEquals(timeDifference(\"Rome\", \"December 21, 1987 15:11\", \"New Delhi\"), \"1987-12-21 19:41\")",
			"Test.assertEquals(timeDifference(\"Canberra\", \"March 1, 2009 18:32\", \"Caracas\"), \"2009-3-1 04:02\")",
			"Test.assertEquals(timeDifference(\"Moscow\", \"September 14, 1953 19:54\", \"New York\"), \"1953-9-14 11:54\")",
			"Test.assertEquals(timeDifference(\"Beijing\", \"November 18, 1999 02:03\", \"New Delhi\"), \"1999-11-17 23:33\")",
			"Test.assertEquals(timeDifference(\"Tehran\", \"June 3, 1977 11:18\", \"Moscow\"), \"1977-6-3 10:48\")",
			"Test.assertEquals(timeDifference(\"Caracas\", \"January 21, 1990 12:44\", \"London\"), \"1990-1-21 17:14\")",
			"Test.assertEquals(timeDifference(\"New York\", \"February 21, 2016 17:56\", \"Rome\"), \"2016-2-21 23:56\")"
		],
		"starterFn": [
			"1\nfunction timeDifference(cityA, timestamp, cityB) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5fN46pGqkjd9EQXca"
	},
	{
		"title": "Perfect or Amicable?",
		"description": "<p><span>Given a positive number x, if all the positive divisors of x (excluding x) add up to x, then x is said to be a perfect number.</span></p><p><span>For example, the set of positive divisors of 6 excluding 6 itself is (1, 2, 3). The sum of this set is 6. Therefore, 6 is a </span><em><span>perfect</span></em><span> number.</span></p><p><span>Given a positive number x, if all the positive divisors of x add up to a second number y, and all the positive divisors of y add up to x, then x and y are said to be a pair of </span><em><span>amicable</span></em><span> numbers.</span></p><p><span>Create a function that takes a number and returns </span><code>\"Perfect\"</code><span> if the number is perfect, </span><code>\"Amicable\"</code><span> if the number is part of an amicable pair, or </span><code>\"Neither\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>numType(6) ➞ \"Perfect\"\n\nnumType(2924) ➞ \"Amicable\"\n\nnumType(5010) ➞ \"Neither\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(numType(6), \"Perfect\")",
			"Test.assertEquals(numType(2924), \"Amicable\")",
			"Test.assertEquals(numType(5010), \"Neither\")",
			"Test.assertEquals(numType(8128), \"Perfect\")",
			"Test.assertEquals(numType(10744), \"Amicable\")",
			"Test.assertEquals(numType(17296), \"Amicable\")",
			"Test.assertEquals(numType(498), \"Neither\")",
			"Test.assertEquals(numType(66992), \"Amicable\")",
			"Test.assertEquals(numType(5566), \"Neither\")"
		],
		"starterFn": [
			"1\nfunction numType(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gGrPrwZ5XZ3GqEzkp"
	},
	{
		"title": "Growing and Shrinking Potions",
		"description": "<p><span>There are two types of potions:</span></p><ol><li><strong><span>Growing potion</span></strong><span>: </span><code>\"A\"</code></li><li><strong><span>Shrinking potion</span></strong><span>: </span><code>\"B\"</code></li></ol><ul><li><span>If </span><code>\"A\"</code><span> immediately follows a </span><strong><span>digit</span></strong><span>, add 1 to the digit.</span></li><li><span>If </span><code>\"B\"</code><span> immediately follows a </span><strong><span>digit</span></strong><span>, subtract 1 from the digit.</span></li></ul><p><span>Create a function that returns a string according to these rules, removing the potions once they've been consumed.</span></p><h3><span>Examples</span></h3><pre><code>afterPotion(\"3A78B51\") ➞ \"47751\"\n// 3 grows to 4, 8 shrinks to 7\n\nafterPotion(\"9999B\") ➞ \"9998\"\n\nafterPotion(\"9A123\") ➞ \"10123\"\n\nafterPotion(\"567\") ➞ \"567\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Digits that do not have a potion on their immediate right should be left alone.</span></li><li><span>A digit will always either be followed by </span><strong><span>zero</span></strong><span> or </span><strong><span>exactly 1 potion</span></strong><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(afterPotion(\"567\"), \"567\", \"Should work without any potions.\")",
			"Test.assertEquals(afterPotion(\"3A78B51\"), \"47751\", \"Should work with both potions.\")",
			"Test.assertEquals(afterPotion(\"9999B\"), \"9998\")",
			"Test.assertEquals(afterPotion(\"9A123\"), \"10123\")",
			"Test.assertEquals(afterPotion(\"1A2A3A4A\"), \"2345\")",
			"Test.assertEquals(afterPotion(\"9B8B7B6A\"), \"8767\")"
		],
		"starterFn": [
			"1\nfunction afterPotion(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8L62AipTvCLPQKtFH"
	},
	{
		"title": "12 vs 24 Hours",
		"description": "<p><span>Create a function that converts 12-hour time to 24-hour time or vice versa. Return the output as a string.</span></p><h3><span>Examples</span></h3><pre><code>convertTime(\"12:00 am\") ➞ \"0:00\"\n\nconvertTime(\"6:20 pm\") ➞ \"18:20\"\n\nconvertTime(\"21:00\") ➞ \"9:00 pm\"\n\nconvertTime(\"5:05\") ➞ \"5:05 am\"</code></pre><h3><span>Notes</span></h3><ul><li><span>A 12-hour time input will be denoted with an </span><strong><span>am</span></strong><span> or </span><strong><span>pm</span></strong><span> suffix.</span></li><li><span>A 24-hour input time contains no suffix.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(convertTime(\"12:00 am\"), \"0:00\")",
			"Test.assertEquals(convertTime(\"6:20 pm\"), \"18:20\")",
			"Test.assertEquals(convertTime(\"21:00\"), \"9:00 pm\")",
			"Test.assertEquals(convertTime(\"5:05\"), \"5:05 am\")"
		],
		"starterFn": [
			"1\nfunction convertTime(time) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Xe6bBpEhgyFDGFzgm"
	},
	{
		"title": "Battle Game",
		"description": "<p><span>You were bored, so you decided to try out a new game you recently downloaded. There are five types of characters, each with their own level of attack power, defense, and speed. There are also five types of armor,  weapons, and boots. Each type of item has a different cost of gold and a different level of attack power, defense or speed.</span></p><p><span>Create a function that takes the type of character and the amount of gold. The function should return the maximum amount of attack power possible, the maximum amount of defense possible, and the maximum speed possible in an array, in that order.</span></p><h3><span>Examples</span></h3><pre><code>maxStats(\"Robot\", 160) ➞ [210, 220, 26]\n\nmaxStats(\"Fairy\", 50) ➞ [91, 120, 22]\n\nmaxStats(\"Warrior\", 70) ➞ [210, 211, 14]</code></pre><h3><span>Notes</span></h3><ul><li><span>Calculate the attack power,  defense, and speed seperately. Do not calculate combinations of items.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for the array of characters and items.</span></li><li><strong><span>Hint:</span></strong><span> Add the character's stats to the items' stats for the result.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"games",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(maxStats(\"Robot\", 160), [210, 220, 26])",
			"Test.assertSimilar(maxStats(\"Knight\", 80), [160, 180, 15])",
			"Test.assertSimilar(maxStats(\"Giant\", 200), [210, 300, 19])",
			"Test.assertSimilar(maxStats(\"Fairy\", 90), [111, 160, 25])",
			"Test.assertSimilar(maxStats(\"Warrior\", 110), [230, 131, 20])"
		],
		"starterFn": [
			"1\n// Check the Resources tab for the list of characters and items.",
			"2\nfunction maxStats(character, gold) {",
			"3\n  ",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/5N2g3vGhjhy2QcviD"
	},
	{
		"title": "Number of Covered Integers",
		"description": "<p><span>Write a function that returns the total number of </span><strong><span>integers</span></strong><span> covered from an array of intervals (</span><strong><span>inclusive</span></strong><span>). In other words, return the number of different inteters in the arrays.</span></p><h3><span>Examples</span></h3><pre><code>coveredIntegers([[80, 81], [1, 2], [9, 11]]) ➞ 7\n// Seven integers are covered: 1, 2, 9, 10, 11, 80, 81\n\ncoveredIntegers([[3, 6], [4, 6], [5, 6]]) ➞ 4\n\ncoveredIntegers([[1, 2], [1, 2]]) ➞ 2</code></pre><h3><span>Notes</span></h3><ul><li><span>Intervals may overlap, be subintervals of each other, or be identical.</span></li><li><span>For each interval </span><code>[l, u]</code><span>, </span><code>l</code><span> and </span><code>u</code><span> will be integers, and </span><code>l &lt;= u</code><span> will always be true.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertEquals(coveredIntegers([[80, 81], [1, 2], [9, 11]]), 7)",
			"Test.assertEquals(coveredIntegers([[3, 6], [4, 6], [5, 6]]), 4)",
			"Test.assertEquals(coveredIntegers([[1, 2], [1, 2]]), 2)",
			"Test.assertEquals(coveredIntegers([[1, 11]]), 11)",
			"Test.assertEquals(coveredIntegers([[8, 9], [102, 104]]), 5)",
			"Test.assertEquals(coveredIntegers([[1, 1], [5, 5], [8, 8]]), 3)",
			"Test.assertEquals(coveredIntegers([[0, 5], [5, 5], [8, 8]]), 7)",
			"Test.assertEquals(coveredIntegers([[1, 5], [3, 5], [4, 6], [5, 7]]), 7)",
			"Test.assertEquals(coveredIntegers([[-3, 10], [-2, 9], [-1, 8], [0, 7], [1, 6], [2, 5], [3, 4]]), 14)"
		],
		"starterFn": [
			"1\nfunction coveredIntegers(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Jaox8TDLREobGf9oJ"
	},
	{
		"title": "Find the LCM of Three Numbers",
		"description": "<p><span>Create a function that takes an array of three numbers and returns the </span><strong><span>Least Common Multiple</span></strong><span> (LCM).</span></p><p><span>The LCM is the smallest positive number that is a multiple of two or more numbers. In our case, we are dealing with three numbers.</span></p><ul><li><span>Multiples of 3 are: 3, 6, 9, 12, and so on.</span></li><li><span>Multiples of 4 are: 4, 8,12, and so on.</span></li><li><span>Multiples of 12 are: 12, and so on.</span></li></ul><p><span>Thus, the least common multiple of 3, 4, and 12 is 12.</span></p><h3><span>Examples</span></h3><pre><code>lcmThree([5, 7, 13]) ➞ 455\n\nlcmThree([104, 105, 107]) ➞ 1168440\n\nlcmThree([19, 47, 43]) ➞ 38399</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(lcmThree([5, 7, 13]), 455)",
			"Test.assertSimilar(lcmThree([104, 105, 107]), 1168440)",
			"Test.assertSimilar(lcmThree([19, 47, 43]), 38399)",
			"Test.assertSimilar(lcmThree([3, 4, 12]), 12)",
			"Test.assertSimilar(lcmThree([6, 16, 348]), 1392)",
			"Test.assertSimilar(lcmThree([97, 103, 301]), 3007291)",
			"Test.assertSimilar(lcmThree([97, 997, 301]), 29109409)"
		],
		"starterFn": [
			"1\nfunction lcmThree(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yHDcevx6KfjqiXcMg"
	},
	{
		"title": "Find Greatest Common Divisor of N Numbers",
		"description": "<p><span>Create a function that takes an array of numbers and returns the </span><em><span>greatest common factor</span></em><span> of those numbers.</span></p><h3><span>Examples</span></h3><pre><code>gcd([84, 70, 42, 56]) ➞ 14\n\ngcd([19, 38, 76, 133]) ➞ 19\n\ngcd([120, 300, 95, 425, 625]) ➞ 5</code></pre><h3><span>Notes</span></h3><p><span>The GCD is the largest factor that divides all numbers in the array.</span></p>",
		"publishedBy": "Raka Raka",
		"publishedByUrl": "https://edabit.com/user/AXcnPX68zdMiLNSmu",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(gcd([84, 70, 42, 56]), 14)",
			"Test.assertEquals(gcd([19, 38, 76, 133]), 19)",
			"Test.assertEquals(gcd([120, 300, 95, 425, 625]), 5)",
			"Test.assertEquals(gcd([6, 18]), 6)",
			"Test.assertEquals(gcd([5, 15]), 5)",
			"Test.assertEquals(gcd([120, 105, 300, 95, 425, 625, 18]), 1)"
		],
		"starterFn": [
			"1\nfunction gcd(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iHLQC79hL9Yc78LAw"
	},
	{
		"title": "The Nth Term of the Sequence",
		"description": "<p><span>Write a function containing an expression, in terms of </span><code>n</code><span>, for the </span><em><span>n</span></em><span>th term of the sequence that has the following first six terms:</span></p><p><code>2, 6, 13, 23, 36, 52</code><span> ...and the sequence continues.</span></p><h3><span>Examples</span></h3><pre><code>seq(1) ➞ 2\n\nseq(2) ➞ 6\n\nseq(6) ➞ 52</code></pre><h3><span>Notes</span></h3><p><span>The parameter </span><code>n</code><span> is always </span><code>&gt;=</code><span> 0.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(seq(1), 2)",
			"Test.assertEquals(seq(2), 6)",
			"Test.assertEquals(seq(0), 1, \"If the formula is right, 0 can be an input.\")",
			"Test.assertEquals(seq(18), 478)",
			"Test.assertEquals(seq(27), 1081)",
			"Test.assertEquals(seq(6), 52)",
			"Test.assertEquals(seq(99), 14653)"
		],
		"starterFn": [
			"1\nfunction seq(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SaP7mAdsQCrN4ShCi"
	},
	{
		"title": "Unique Character Mapping",
		"description": "<p><span>Write a function that returns a character mapping from a word.</span></p><h3><span>Examples</span></h3><pre><code>characterMapping(\"abcd\") ➞ [0, 1, 2, 3]\n\ncharacterMapping(\"abb\") ➞ [0, 1, 1]\n\ncharacterMapping(\"babbcb\") ➞ [0, 1, 0, 0, 2, 0]\n\ncharacterMapping(\"hmmmmm\") ➞ [0, 1, 1, 1, 1, 1]</code></pre><h3><span>Notes</span></h3><ul><li><span>Start your counter at 0, and increment by </span><strong><span>1</span></strong><span> each time you encounter a new character.</span></li><li><span>Identical characters should share the same number.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(characterMapping(\"abcd\"), [0, 1, 2, 3])",
			"Test.assertSimilar(characterMapping(\"abb\"), [0, 1, 1])",
			"Test.assertSimilar(characterMapping(\"babbcb\"), [0, 1, 0, 0, 2, 0])",
			"Test.assertSimilar(characterMapping(\"aaabb\"), [0, 0, 0, 1, 1])",
			"Test.assertSimilar(characterMapping(\"abccbc\"), [0, 1, 2, 2, 1, 2])",
			"Test.assertSimilar(characterMapping(\"fluffy\"), [0, 1, 2, 0, 0, 3])",
			"Test.assertSimilar(characterMapping(\"madness\"), [0, 1, 2, 3, 4, 5, 5])",
			"Test.assertSimilar(characterMapping(\"buttery\"), [0, 1, 2, 2, 3, 4, 5])",
			"Test.assertSimilar(characterMapping(\"canine\"), [0, 1, 2, 3, 2, 4])",
			"Test.assertSimilar(characterMapping(\"hohoho\"), [0, 1, 0, 1, 0, 1])",
			"Test.assertSimilar(characterMapping(\"hmmmmm\"), [0, 1, 1, 1, 1, 1])",
			"Test.assertSimilar(characterMapping(\"\"), [])"
		],
		"starterFn": [
			"1\nfunction characterMapping(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9MEWMJ5eX8EAiWSs5"
	},
	{
		"title": "No Intersecting Ones",
		"description": "<p><span>A </span><strong><span>no-intersecting ones matrix</span></strong><span> is one where no two ones exist on the same row or column.</span></p><p><span>To illustrate:</span></p><pre><code>[\n  [1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0],\n  [0, 0, 0, 1, 0],\n  [0, 0, 0, 0, 0],\n  [0, 0, 1, 0, 0]\n]</code></pre><p><span>The array below is </span><strong><span>not</span></strong><span> a non-intersecting ones matrix:</span></p><pre><code>[\n  [1, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0],\n  [0, 0, 0, 1, 0],\n  [0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0]\n]\n\n// Column 2 has two 1s.</code></pre><p><span>Write a function that returns </span><code>true</code><span> if a 2D matrix is a </span><strong><span>no-intersecting ones matrix</span></strong><span> and false otherwise.</span></p><h3><span>Examples</span></h3><pre><code>noIntersectingOnes([\n  [0, 1],\n  [1, 0]\n]) ➞ true\n\nnoIntersectingOnes([\n  [1, 1],\n  [0, 0]\n]) ➞ false\n\nnoIntersectingOnes([\n  [0, 0, 0, 1],\n  [1, 0, 0, 0],\n  [0, 1, 0, 0]\n]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(noIntersectingOnes([",
			"[0, 1], ",
			"[1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(noIntersectingOnes([",
			"[1, 1], ",
			"[0, 0]",
			"]), false)",
			"​",
			"Test.assertEquals(noIntersectingOnes([",
			"[0, 0, 0, 1], ",
			"[1, 0, 0, 0], ",
			"[0, 1, 0, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(noIntersectingOnes([",
			"[0, 0, 0, 1], ",
			"[1, 0, 0, 0], ",
			"[0, 0, 0, 1]",
			"]), false)",
			"​",
			"Test.assertEquals(noIntersectingOnes([",
			"[0, 0, 1, 1], ",
			"[0, 0, 0, 0], ",
			"[0, 0, 0, 0]"
		],
		"starterFn": [
			"1\nfunction noIntersectingOnes(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dPAND8kBRGqqbExiR"
	},
	{
		"title": "WordRank Scoring System",
		"description": "<p><span>Create a function that takes a string of words and returns the highest scoring word. Each letter of a word scores points according to it's position in the alphabet: a = 1, b = 2, c = 3, etc.</span></p><h3><span>Examples</span></h3><pre><code>wordRank(\"The quick brown fox.\") ➞ \"brown\"\n\nwordRank(\"Nancy is very pretty.\") ➞ \"pretty\"\n\nwordRank(\"Check back tomorrow, man!\") ➞ \"tomorrow\"\n\nwordRank(\"Wednesday is hump day.\") ➞ \"Wednesday\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If two words score the same, return the word that appears first in the original string.</span></li><li><span>The returned string should only contain alphabetic characters (a-z).</span></li><li><span>Preserve case in the returned string (see 4th example above).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordRank(\"If the Easter Bunny and the Tooth Fairy had babies would they take your teeth and leave chocolate for you?\"), \"chocolate\");",
			"Test.assertEquals(wordRank(\"The memory we used to share is no longer coherent.\"), \"memory\");",
			"Test.assertEquals(wordRank(\"He didn’t want to go to the dentist, yet he went anyway.\"), \"dentist\");",
			"Test.assertEquals(wordRank(\"What was the person thinking when they discovered cow’s milk was fine for human consumption... and why did they do it in the first place!?\"), \"consumption\");",
			"Test.assertEquals(wordRank(\"Mary plays the piano.\"), \"plays\");",
			"Test.assertEquals(wordRank(\"I hear that Nancy is very pretty.\"), \"pretty\");",
			"Test.assertEquals(wordRank(\"If you like tuna and tomato sauce- try combining the two. It’s really not as bad as it sounds.\"), \"sounds\");",
			"Test.assertEquals(wordRank(\"She works two jobs to make ends meet; at least, that was her reason for not having time to join us.\"), \"works\");",
			"Test.assertEquals(wordRank(\"Wednesday is hump day, but has anyone asked the camel if he’s happy about it?\"), \"Wednesday\");",
			"Test.assertEquals(wordRank(\"The body may perhaps compensates for the loss of a true metaphysics.\"), \"metaphysics\");",
			"Test.assertEquals(wordRank(\"The clock within this blog and the clock on my laptop are 1 hour different from each other.\"), \"different\");",
			"Test.assertEquals(wordRank(\"Check back tomorrow; I will see if the book has arrived.\"), \"tomorrow\");"
		],
		"starterFn": [
			"1\nfunction wordRank(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sZZ4gr9RNN8JpMaEv"
	},
	{
		"title": "Collatz Calculator",
		"description": "<p><span>A Collatz sequence is generated by repeatedly applying the following rules to an integer and then to each resulting integer in turn:</span></p><ul><li><span>If even: divide by 2.</span></li><li><span>If odd: multiply by 3, then add 1.</span></li></ul><p><span>The Collatz conjecture states that, for any initial positive integer, you will eventually reach the number 1.</span></p><p><span>Write a function that, for an initial positive integer </span><em><span>n</span></em><span>, returns an array containing 2 values:</span></p><ol><li><span>The number of times the Collatz rule has to be applied until you reach 1.</span></li><li><span>The maximum number reached in the process.</span></li></ol><h3><span>Examples</span></h3><pre><code>collatz(17) ➞ [12, 52]\n// Because 17 – 52 – 26 – 13 – 40 – 20 – 10 – 5 – 16 – 8 – 4 – 2 – 1\n// takes 12 steps and 52 is the highest number reached.\n\ncollatz(6) ➞ [8, 16]\n\ncollatz(21) ➞ [7, 64]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(collatz(1), [0, 1])",
			"Test.assertSimilar(collatz(3), [7, 16])",
			"Test.assertSimilar(collatz(9), [19, 52])",
			"Test.assertSimilar(collatz(27), [111, 9232])",
			"Test.assertSimilar(collatz(81), [22, 244])"
		],
		"starterFn": [
			"1\nfunction collatz(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PTmrkAiczm7KxSAJi"
	},
	{
		"title": "Vending Machine",
		"description": "<p><span>Your task is to create a function that simulates a vending machine.</span></p><p><span>Given an amount of </span><code>money</code><span> (in cents </span><strong><span>¢</span></strong><span> to make it simpler) and a </span><code>productNumber</code><span>, the vending machine should output the correct product name and give back the correct amount of change.</span></p><p><span>The coins used for the change are the following: </span><code>[500, 200, 100, 50, 20, 10]</code></p><p><span>The return value is an object with 2 properties:</span></p><ul><li><code>product</code><span>: the product name that the user selected.</span></li><li><code>change</code><span>: an array of coins (can be empty, must be sorted in descending order).</span></li></ul><h3><span>Examples</span></h3><pre><code>vendingMachine(products, 200, 7) ➞ { product: \"Crackers\", change: [ 50, 20, 10 ] }\n\nvendingMachine(products, 500, 0) ➞ \"Enter a valid product number\"\n\nvendingMachine(products, 90, 1) ➞ \"Not enough money for this product\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The products are fixed and you can find them in the </span><strong><span>Tests</span></strong><span> tab.</span></li><li><span>If </span><code>productNumber</code><span> is invalid (out of range) you should return the </span><em><span>string</span></em><span>: \"Enter a valid product number\".</span></li><li><span>If </span><code>money</code><span> is not enough to buy a certain product you should return the </span><em><span>string</span></em><span>: \"Not enough money for this product\".</span></li><li><span>If there's no change, return an empty array as the </span><code>change</code><span>.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"objects",
			"recursion"
		],
		"tests": [
			"// Products available",
			"const products = [",
			"  { number: 1, price: 100, name: 'Orange juice' },",
			"  { number: 2, price: 200, name: 'Soda' },",
			"  { number: 3, price: 150, name: 'Chocolate snack' },",
			"  { number: 4, price: 250, name: 'Cookies' },",
			"  { number: 5, price: 180, name: 'Gummy bears' },",
			"  { number: 6, price: 500, name: 'Condoms' },",
			"  { number: 7, price: 120, name: 'Crackers' },",
			"  { number: 8, price: 220, name: 'Potato chips' },",
			"  { number: 9, price: 80,  name: 'Small snack' },",
			"];",
			"​",
			"// Tests",
			"Test.assertSimilar(vendingMachine(products, 500, 8), { product: 'Potato chips', change: [ 200, 50, 20, 10 ] });",
			"Test.assertSimilar(vendingMachine(products, 500, 1), { product: 'Orange juice', change: [ 200, 200 ] });",
			"Test.assertSimilar(vendingMachine(products, 200, 7), { product: 'Crackers', change: [ 50, 20, 10 ] });",
			"Test.assertSimilar(vendingMachine(products, 100, 9), { product: 'Small snack', change: [ 20 ] });",
			"Test.assertSimilar(vendingMachine(products, 1000, 6), { product: 'Condoms', change: [ 500 ] });",
			"Test.assertSimilar(vendingMachine(products, 250, 4), { product: 'Cookies', change: [] });",
			"Test.assertEquals(vendingMachine(products, 500, 0), 'Enter a valid product number');",
			"Test.assertEquals(vendingMachine(products, 90, 1), 'Not enough money for this product');",
			"Test.assertEquals(vendingMachine(products, 0, 0), 'Enter a valid product number');",
			"​"
		],
		"starterFn": [
			"1\nfunction vendingMachine(products, money, productNumber) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PYXbvQh9W3c9i72xx"
	},
	{
		"title": "SimpleCrypt",
		"description": "<p><span>You'll need to decrypt some strings found on a website and maybe one of that will help you further to get your ever wanted software.</span></p><p><span>Let's do OOP and create an object:</span></p><ul><li><span>Create an object named SimpleCrypt with a constructor that will store the original given string.</span></li><li><span>SimpleCrypt should have 3 prototypes : encrypt, decrypt, reset.</span></li><li><span>Prototype encrypt should take one optional argument (string type) and will encrypt the argument if present or original string if no arguments.</span></li><li><span>Prototype decrypt should take one optionnal argument too (string type) and will decrypt the argument if present or get last string with encrypt.</span></li><li><span>Prototype reset should reset all object properties to origin.</span></li></ul><h3><span>Examples</span></h3><pre><code>myExemple.encrypt(\"123456789\") ➞ \"2468:&lt;&gt;@B\"\n\nmyExemple.encrypt(\"abcdefghij\") ➞ \"bdfhjlnprt\"\n\nmyExemple.encrypt(\"9876543210\") ➞ \"::::::::::\"\n\nmyExemple.encrypt(\"98754310\") ➞ \":::99988\"\n\nmyExemple.encrypt(\"qwerty\") ➞ \"ryhvy\\u007f\"\n\nmyExemple.encrypt(\"azerty\") ➞ \"b|hvy\\u007f\"</code></pre><h3><span>Notes</span></h3><ul><li><span>No info about crypting will be added here, because it's too easy to decrypt this with given infos.</span></li><li><span>The exemple will help you a lot to understand how is working crypt function.</span></li><li><span>The ressource will probably hint you.</span></li><li><span>All whitespace should be spaces (32).</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"classes",
			"loops",
			"objects",
			"strings"
		],
		"tests": [
			"console.log(\"====== MANUAL TEST ======\")",
			"var manualTests = new SimpleCrypt(\"My uncrypted str\");",
			"Test.assertEquals(manualTests.encrypt(), \"N{#ysiy\\u0081y~pp-\\u0081\\u0083\\u0082\");",
			"Test.assertEquals(manualTests.decrypt(), \"My uncrypted str\");",
			"Test.assertEquals(manualTests.decrypt(\"N{#ysiy\\u0081y~pp-\\u0081\\u0083\\u0082\"), \"My uncrypted str\");",
			"Test.assertEquals(manualTests.encrypt(\"MyTest\"), \"N{Wixz\");",
			"Test.assertEquals(manualTests.decrypt(), \"MyTest\");",
			"manualTests.reset()",
			"Test.assertEquals(manualTests.encrypt(), \"N{#ysiy\\u0081y~pp-\\u0081\\u0083\\u0082\");",
			"Test.assertEquals(manualTests.encrypt(\"9876543210\"), \"::::::::::\");",
			"Test.assertEquals(manualTests.decrypt(\"::::::::::\"), \"9876543210\");",
			"Test.assertEquals(manualTests.decrypt(\"kkkkkkkkkk\"), \"jihgfedcba\");",
			"Test.assertEquals(manualTests.encrypt(\"qwerty\"), \"ryhvy\\u007f\");",
			"Test.assertEquals(manualTests.encrypt(\"123456789\"), \"2468:<>@B\");",
			"​",
			"​",
			"​",
			"​",
			"// RANDOMS ",
			"​",
			"var randomTests = new SimpleCrypt(\"Random\");",
			"var randomWords = [",
			"    ['1¤kÐöè\\u0099¾Mµ(?jô\\u0084F@t¡p+.Çè«è\\u0097xQÛF>\\u0085ÍÍiF½¦\\u0081y¤û\\u009dÇBÄ:µ\\u0095\\u008aóÌ\\u00850bo¦\\u0099¬CaÃ\\u0081\\u008eÚecF|%DÙ¿zA\\u0087IbW×Ð\\\\¯\\u0088GNPÙÕÄyïò¯Þlý\\u0087Q\\u009a+·÷ä´v\\u0090Ú.Lqò8)Víî%v¿\\u009fp&ûÞ\\u009bDÛõ{Ý\\u0081ñGÔ+-X\\u0093\\u0096QËCs}5µñ\\u0095»ÑÓ3*4°[\\u0089\\u0088fª\\u008c\\u0091¯è÷X\\u0088º;2c@\\u0087','2¦nÔûî ÆV¿3KwĂ\\u0093VQ\\u0086´\\u0084@DÞĀÄĂ²\\u0094nùe^¦ïð\\u008dkãÍ©¢ÎĦÉôpójæÇ½ħā»g\\u009a¨àÔè\\u0080\\u009fĂÁÏĜ¨§\\u008bÂl\\u008cĢĉÅ\\u008dÔ\\u0097±§ĨĢ¯ăÝ\\u009d¥¨ĲįğÕŌŐĎľÍşêµÿ\\u0091ĞşōĞáüŇ\\u009c»áţª\\u009cÊŢŤ\\u009cîĸęë¢ŸŜĚÄŜŷþšĆŷÎŜ´·ãğģßŚÓĄďÈŉƆīŒũŬÍÅÐōùĨĨćŌįĵŔƎƞĀıŤæÞĐîĶ'],",
			"    ['úé^6\\u0097q\\u009cm,\\u0099a4àÃ\\u009dÚ¶©I§ù×[[ÌäìE÷\\u008aÇK¸\\u0098Ñx\\\"Åæ\\u0098pO±ð\\u009b\\u0096eß\\u007fÍíxîV\\u0083Ò\\u0095\\u0089-36ÎZé\\u009e&´Çõ´\\u0093Åb\\u0090\\\"ÅºÈp¡\\u008e\\u0097´8\\u009bhê\\u0084à²SûôEï¾-$ýísz·9\\u0082ÛÓMÞ\\u0092\\u0082Ðhõ\\u0090ªZ\\u0082µ•<Iò\\u0093<cß\\u008eE\\u0083X\\u0084©;ÝsO\\u0084º´2]jrÖ\\u009bV\\u0099\\u008d|vñ½Ïúf\\u0082FÐßm\\u008eîcTzîárvµ^]Y,«-\\\\\\u0087\\u0090ìÑ!Atº3=ÕsI','ûëa:\\u009cw£u5£l@íÑ¬êÇ»\\\\»ĎírsåþćaĔ¨ækÙºô\\u009cGëčÀ\\u0099yÜĜÈÄ\\u0094ď°ÿĠ¬ģ\\u008cºĊÎÃhosČ\\u0099ĩßh÷ċĺúÚč«ÚmđćĖ¿ñßéć\\u008cð¾ŁÜĹČ®ŗő£ŎĞ\\u008e\\u0086ŠőØàĞ¡ëŅľ¹ŋĀñŀÙŧăĞÏøĬĥµÃŭď¹áŞĎÆąÛĈĮÁŤûØĎŅŀ¿ëùĂŧĭéĭĢĒčƉŖũƕĂğäůſĎİƑćùĠƕƉěĠŠĊĊćÛśÞĎĺńơƇØùĭŴîùƒıĈ'],",
			"    ['c\\u0083äz:ÃÍi\\u008cÀä\\u009a³C1¶Ö\\u0089ç¿\\u009c<ñÄD[Ýú\\u0082©`ýÊ~æ8ÝÞRì\\u008f0\\\"×|b\\u008f·²\\u0090ÊX7T#\\u009bxø¢lÏ!df\\u0098²n\\u0097Ôù\\u0083º.9/Çp[¬â)©£^¬·\\u009f\\'\\u0096âËqX\\u009aû[<\\u008eÚ3\\u0088:$ÊÉJz<&«`¿+C\\u009e)Uíõ\\u0085Ú¡)Ïá·/}ó5ÔÁj\\u008eÁL¸§°×\\u008dUWÓ$²Xn','d\\u0085ç~?ÉÔq\\u0095Êï¦ÀQ@Æç\\u009búÓ±RĈÜ]uøĖ\\u009fÇ\\u007fĝë ĉ\\\\ĂĄyĔ¸ZMă©\\u0090¾çãÂý\\u008cl\\u008aZÓ±ĲÝ¨Č_£¦Ùô±ÛęĿÊĂw\\u0083zē½©ûĲzûö²āčö\\u007fïļĦÍµøŚ»\\u009dðĽ\\u0097í \\u008bĲĲ´å¨\\u0093ęÏį\\u009cµđ\\u009dÊţŬýœě¤ŋŞĵ®ýŴ·ŗŅïĔňÔŁıĻţĚãæţµńëĂ'],",
			"    ['·±$hü\\u0085ú¡$ðöBk²*9ø{??ãêüç.íXâéÎF\\u0091xÙ\\u00906DÅ§Köö}·Í×Q1tJM[\\u0095Õ-Ô\\u0083REö\\\"§Ø¨a\\u0095Fº}N{úä»l#Ub\\u0081:m\\u0094TEì\\u008aÑ®t\\u009b\\u008eÌ§\\u008b×\\u009c#E6ðµ´&-Ò\\u008aGJ®F0ÛØ\\u0081û\\\"`Æ}\\u0094:3øAcø|%ñ¡Ô\\u0082û','¸³\\'lā\\u008bā©-úāNxÀ9Iĉ\\u008dRSøĀēÿGćsþĆìe±\\u0099û³ZiëÎsğĠ¨ãúą\\u0080a¥|\\u0080\\u008fÊċdČ¼\\u008c\\u0080Ĳ_åėè¢×\\u0089þÂ\\u0094Âłĭą·o¢°Ð\\u008a¾æ§\\u0099ŁàĨĆÍõéĨĄéĶü\\u0084§\\u0099ŔĚĚ\\u008d\\u0095Ļô²¶ě´\\u009fŋŉóŮ\\u0096ÕļôČ³•ų½àŶû¥ŲģŗĆƀ'],"
		],
		"starterFn": [
			"1\nfunction SimpleCrypt(str) {",
			"2\n​",
			"3\n}",
			"4\n​",
			"5\nSimpleCrypt.prototype.encrypt = function(str) {}",
			"6\n​",
			"7\nSimpleCrypt.prototype.decrypt = function(str) {}",
			"8\n​",
			"9\nSimpleCrypt.prototype.reset = function() {}"
		],
		"url": "https://edabit.com/challenge/mJhgK7LWqgAZuapuD"
	},
	{
		"title": "Verbos Regulares",
		"description": "<p><span>The conjugations for all Spanish regular verbs can be built by using the 3 forms for verbs ending in -ar, -er and -ir.</span></p><p><span>Create a function that takes a verb as string, and returns a string with the 6 conjugations like in the examples, watch out for verbs ending in -ir, check the notes. Try programming the construction rather than forming structures with arrays.</span></p><h3><span>Examples</span></h3><pre><code>espVerb(\"pasar\") ➞ \"Yo paso, tú pasas, él pasa, nosotros pasamos, vosotros pasáis, ellos pasan.\"\n\nespVerb(\"unir\") ➞ \"Yo uno, tú unes, él une, nosotros unimos, vosotros unís, ellos unen.\"\n\nespVerb(\"correr\") ➞ \"Yo corro, tú corres, él corre, nosotros corremos, vosotros corréis, ellos corren.\"</code></pre><h3><span>Notes</span></h3><p><span>The smallest category of regular Spanish verbs is those that end in -ir. To conjugate them, remove the infinitive ending and then add one of the following verb endings:</span></p><table><thead><tr><th><span>...</span></th><th><span>Singular</span></th><th><span>Plural</span></th></tr></thead><tbody><tr><td><span>1st person</span></td><td><span>yo   -o</span></td><td><span>nosotros    -imos</span></td></tr><tr><td><span>2nd person</span></td><td><span>tú   -es</span></td><td><span>vosotros   -ís</span></td></tr><tr><td><span>3rd person</span></td><td><span>él   -e</span></td><td><span>ellos   -en</span></td></tr></tbody></table>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"logic"
		],
		"tests": [
			"Test.assertEquals(espVerb('pasar'), 'Yo paso, tú pasas, él pasa, nosotros pasamos, vosotros pasáis, ellos pasan.');",
			"Test.assertEquals(espVerb('deber'), 'Yo debo, tú debes, él debe, nosotros debemos, vosotros debéis, ellos deben.');",
			"Test.assertEquals(espVerb('abrir'), 'Yo abro, tú abres, él abre, nosotros abrimos, vosotros abrís, ellos abren.');",
			"​",
			"Test.assertEquals(espVerb('hablar'), 'Yo hablo, tú hablas, él habla, nosotros hablamos, vosotros habláis, ellos hablan.');",
			"Test.assertEquals(espVerb('correr'), 'Yo corro, tú corres, él corre, nosotros corremos, vosotros corréis, ellos corren.');",
			"Test.assertEquals(espVerb('vivir'), 'Yo vivo, tú vives, él vive, nosotros vivimos, vosotros vivís, ellos viven.');",
			"​",
			"Test.assertEquals(espVerb('quedar'), 'Yo quedo, tú quedas, él queda, nosotros quedamos, vosotros quedáis, ellos quedan.');",
			"Test.assertEquals(espVerb('comprender'), 'Yo comprendo, tú comprendes, él comprende, nosotros comprendemos, vosotros comprendéis, ellos comprenden.');",
			"Test.assertEquals(espVerb('unir'), 'Yo uno, tú unes, él une, nosotros unimos, vosotros unís, ellos unen.');"
		],
		"starterFn": [
			"1\nfunction espVerb(verb) {",
			"2\n  // ¡ Buena suerte !",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QGvL9nFnn2PJwRgyp"
	},
	{
		"title": "Make a Number",
		"description": "<p><span>In this challenge, you have to find all the subsequences of consecutive numbers that, when their numbers are added between them, are equals to the given number.</span></p><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns a matrix containing every sequence of consecutive numbers smaller than </span><code>n</code><span>, sorted ascendingly by their first term, whose sum is equal to </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>makeNumber(9) ➞ [ [2, 3, 4], [4, 5] ]\n\nmakeNumber(8) ➞ []\n\nmakeNumber(100) ➞ [ [9, 10, 11, 12, 13, 14, 15, 16], [18, 19, 20, 21, 22] ]</code></pre><h3><span>Notes</span></h3><p><span>If no sequence sum is equal to the given </span><code>n</code><span>, return an empty array (see example #2).</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(makeNumber(9), [[2,3,4], [4,5]], \"Example #1\")",
			"Test.assertSimilar(makeNumber(8), [], \"Example #2\")",
			"Test.assertSimilar(makeNumber(100), [[9,10,11,12,13,14,15,16], [18,19,20,21,22]], \"Example #3\")",
			"Test.assertSimilar(makeNumber(5), [[2,3]])",
			"Test.assertSimilar(makeNumber(18), [[3,4,5,6], [5,6,7]])",
			"Test.assertSimilar(makeNumber(40), [[6,7,8,9,10]])",
			"Test.assertSimilar(makeNumber(1), [])",
			"Test.assertSimilar(makeNumber(3), [[1, 2]])",
			"Test.assertSimilar(makeNumber(333), [",
			"  [",
			"    10, 11, 12, 13, 14, 15, 16,",
			"    17, 18, 19, 20, 21, 22, 23,",
			"    24, 25, 26, 27",
			"  ],",
			"  [",
			"    33, 34, 35, 36, 37,",
			"    38, 39, 40, 41",
			"  ],",
			"  [ 53, 54, 55, 56, 57, 58 ],",
			"  [ 110, 111, 112 ],",
			"  [ 166, 167 ]",
			"])"
		],
		"starterFn": [
			"1\nfunction makeNumber(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AA5fY9AshyJkuPEMt"
	},
	{
		"title": "Validate Phone Numbers",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if the phone number is in a valid format. Valid formats are as follows:</span></p><table><thead><tr><th><strong><span>With Country Code</span></strong></th><th><strong><span>Without Country Code</span></strong></th></tr></thead><tbody><tr><td><span>+1-892-445-7663</span></td><td><span>892-445-7663</span></td></tr><tr><td><span>1-892-445-7663</span></td><td><span>(892) 445-7663</span></td></tr><tr><td><span>1 (892) 445-7663</span></td><td><span>892.567.8901</span></td></tr><tr><td><span>1.892.567.8901</span></td><td><span>1/892/567/8901</span></td></tr><tr><td><span>1 892 567 8901</span></td><td><span>892/567/8901</span></td></tr><tr><td><span>18925678901</span></td><td><span>892 567 8901</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>validate(\"578-332-1114\") ➞ true\n\nvalidate(\"57-332-1114\") ➞ false\n\nvalidate(\"577 332  1114\") ➞ false\n// More than one space in between digits clusters.\n\nvalidate(\"57 332 1114\") ➞ false\n// Unacceptable digit cluster length.\n\nvalidate(\"157%332-1114\") ➞ false\n// Unacceptable delimiter.</code></pre><h3><span>Notes</span></h3><ul><li><span>The country code will always be </span><code>+1</code><span> or </span><code>1</code><span>.</span></li><li><span>Each phone number will contain either 10 or 11 digits (depending on whether the country code exists).</span></li><li><span>There must either be exactly one space, a delimiter, or no space at all between the digit clusters.</span></li><li><span>You do not have to worry about extensions.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validate(\"+1-892-445-7663\"), true)",
			"Test.assertEquals(validate(\"1-892-445-7663\"), true)",
			"Test.assertEquals(validate(\"1 (892) 445-7663\"), true)",
			"Test.assertEquals(validate(\"1.892.567.8901\"), true)",
			"Test.assertEquals(validate(\"1/892/567/8901\"), true)",
			"Test.assertEquals(validate(\"1 892 567 8901\"), true)",
			"Test.assertEquals(validate(\"18925678901\"), true)",
			"Test.assertEquals(validate(\"892-445-7663\"), true)",
			"Test.assertEquals(validate(\"(892) 445-7663\"), true)",
			"Test.assertEquals(validate(\"892.567.8901\"), true)",
			"Test.assertEquals(validate(\"892/567/8901\"), true)",
			"Test.assertEquals(validate(\"892 567 8901\"), true)",
			"Test.assertEquals(validate(\"8925678901\"), true)",
			"Test.assertEquals(validate(\"89-445-7663\"), false, \"Invalid digit clusters.\")",
			"Test.assertEquals(validate(\"(892) 4454-7663\"), false, \"Invalid digit clusters.\")",
			"Test.assertEquals(validate(\"892  567 8901\"), false, \"Additional space.\")",
			"Test.assertEquals(validate(\"892?567?8901\"), false, \"Invalid delimiter.\")",
			"Test.assertEquals(validate(\"!1-892-567-8901\"), false, \"Invalid international code.\")",
			"Test.assertEquals(validate(\"(8924) 445-7663\"), false, \"Invalid digit clusters.\")",
			"Test.assertEquals(validate(\"12 892 445-7663\"), false, \"Invalid international code.\")",
			"Test.assertEquals(validate(\"1&892&445-7663\"), false, \"Invalid delimiter.\")",
			"Test.assertEquals(validate(\"894-445-766\"), false, \"Invalid digit clusters.\")",
			"Test.assertEquals(validate(\"894 445 766\"), false, \"Invalid digit clusters.\")"
		],
		"starterFn": [
			"1\nfunction validate(s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LQvRrzwHzc2BAXBQx"
	},
	{
		"title": "Concert Seats",
		"description": "<p><span>Create a function that determines whether each seat can \"see\" the front-stage. A number can \"see\" the front-stage if it is </span><strong><span>strictly greater</span></strong><span> than the number before it.</span></p><p><span>Everyone can see the front-stage in the example below:</span></p><pre><code>// FRONT STAGE\n[[1, 2, 3, 2, 1, 1],\n[2, 4, 4, 3, 2, 2],\n[5, 5, 5, 5, 4, 4],\n[6, 6, 7, 6, 5, 5]]\n\n// Starting from the left, the 6 &gt; 5 &gt; 2 &gt; 1, so all numbers can see.\n// 6 &gt; 5 &gt; 4 &gt; 2 - so all numbers can see, etc.</code></pre><p><span>Not everyone can see the front-stage in the example below:</span></p><pre><code>// FRONT STAGE\n[[1, 2, 3, 2, 1, 1], \n[2, 4, 4, 3, 2, 2], \n[5, 5, 5, 10, 4, 4], \n[6, 6, 7, 6, 5, 5]]\n\n// The 10 is directly in front of the 6 and blocking its view.</code></pre><p><span>The function should return </span><code>true</code><span> if </span><strong><span>every number</span></strong><span> can see the front-stage, and </span><code>false</code><span> if even a single number cannot.</span></p><h3><span>Examples</span></h3><pre><code>canSeeStage([\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]) ➞ true\n\ncanSeeStage([\n  [0, 0, 0],\n  [1, 1, 1],\n  [2, 2, 2]\n]) ➞ true\n\ncanSeeStage([\n  [2, 0, 0], \n  [1, 1, 1], \n  [2, 2, 2]\n]) ➞ false\n\ncanSeeStage([\n  [1, 0, 0],\n  [1, 1, 1],\n  [2, 2, 2]\n]) ➞ false\n\n// Number must be strictly smaller than \n// the number directly behind it.</code></pre><h3><span>Notes</span></h3><p><span>Numbers must be </span><strong><span>strictly greater</span></strong><span> than the number in front of it.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canSeeStage(",
			"[[1, 2, 3], ",
			"[4, 5, 6], ",
			"[7, 8, 9]]), true)",
			"​",
			"Test.assertEquals(canSeeStage(",
			"[[1, 2, 2], ",
			"[1, 2, 3], ",
			"[4, 4, 4]]), false)",
			"​",
			"Test.assertEquals(canSeeStage(",
			"[[1, 1, 2], ",
			"[5, 2, 3], ",
			"[4, 4, 4]]), false)",
			"​",
			"Test.assertEquals(canSeeStage(",
			"[[1, 1, 2], ",
			"[5, 2, 3], ",
			"[6, 4, 4]]), true)",
			"​",
			"Test.assertEquals(canSeeStage(",
			"[[0, 0, 0], ",
			"[1, 1, 1], ",
			"[2, 2, 2]]), true)",
			"​",
			"Test.assertEquals(canSeeStage("
		],
		"starterFn": [
			"1\nfunction canSeeStage(seats) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Qkdyd5CLHizJqmNdx"
	},
	{
		"title": "Shiritori Game",
		"description": "<p><span>This challenge is an English twist on the Japanese word game </span><strong><span>Shiritori</span></strong><span>. The basic premise is to follow two rules:</span></p><ol><li><strong><span>First character</span></strong><span> of </span><strong><span>next word</span></strong><span> must match </span><strong><span>last character</span></strong><span> of </span><strong><span>previous word</span></strong><span>.</span></li><li><span>The word must not have already been said.</span></li></ol><p><span>Below is an example of a </span><strong><span>Shiritori</span></strong><span> game:</span></p><pre><code>[\"word\", \"dowry\", \"yodel\", \"leader\", \"righteous\", \"serpent\"]  // valid!\n\n[\"motive\", \"beach\"]  // invalid! - beach should start with \"e\"\n\n[\"hive\", \"eh\", \"hive\"]  // invalid! - \"hive\" has already been said</code></pre><p><span>Write a </span><strong><span>Shiritori class</span></strong><span> that has </span><strong><span>two instance properties</span></strong><span>:</span></p><ul><li><strong><span>words</span></strong><span>: an array of words already said.</span></li><li><strong><span>game_over</span></strong><span>: a boolean that is true if the game is over.</span></li></ul><p><span>and </span><strong><span>two instance methods</span></strong><span>:</span></p><ul><li><p><strong><span>play</span></strong><span>: a method that takes in a word as an argument and checks if it is valid (the word should follow rules #1 and #2 above).</span></p><ul><li><span>If it is valid, it adds the word to the </span><strong><span>words</span></strong><span> array, and returns the </span><strong><span>words</span></strong><span> array.</span></li><li><span>If it is invalid (either rule is broken), it returns </span><strong><span>\"game over\"</span></strong><span> and sets the </span><strong><span>game_over</span></strong><span> boolean to </span><strong><span>true</span></strong><span>.</span></li></ul></li><li><p><strong><span>restart</span></strong><span>: a method that sets the </span><strong><span>words</span></strong><span> array to an empty one </span><code>[]</code><span> and sets the </span><strong><span>game_over</span></strong><span> boolean to </span><strong><span>false</span></strong><span>. It should return </span><strong><span>\"game restarted\"</span></strong><span>.</span></p></li></ul><h3><span>Examples</span></h3><pre><code>my_shiritori = Shiritori.new()\n\nmy_shiritori.play(\"apple\") ➞ [\"apple\"]\nmy_shiritori.play(\"ear\") ➞ [\"apple\", \"ear\"]\nmy_shiritori.play(\"rhino\") ➞ [\"apple\", \"ear\", \"rhino\"]\nmy_shiritori.play(\"corn\") ➞ \"game over\"\n\n// Corn does not start with an \"o\".\n\nmy_shiritori.words ➞  [\"apple\", \"ear\", \"rhino\"]\n\n// Words should be accessible.\n\nmy_shiritori.restart() ➞ \"game restarted\"\nmy_shiritori.words ➞ []\n\n// Words array should be set back to empty.\n\nmy_shiritori.play(\"hostess\") ➞ [\"hostess\"]\nmy_shiritori.play(\"stash\") ➞ [\"hostess\", \"stash\"]\nmy_shiritori.play(\"hostess\") ➞ \"game over\"\n\n// Words cannot have already been said.</code></pre><h3><span>Notes</span></h3><ul><li><span>The </span><strong><span>play</span></strong><span> method should </span><strong><span>not</span></strong><span> add an invalid word to the </span><strong><span>words</span></strong><span> array.</span></li><li><span>You don't need to worry about capitalization or white spaces for the inputs for the </span><strong><span>play</span></strong><span> method.</span></li><li><span>There will only be </span><strong><span>single inputs</span></strong><span> for the </span><strong><span>play</span></strong><span> method.</span></li><li><span>Read more about Shiritori in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"classes",
			"control_flow",
			"games",
			"strings"
		],
		"tests": [
			"my_shiritori = new Shiritori(); ",
			"​",
			"Test.assertEquals(my_shiritori.game_over, false)",
			"Test.assertSimilar(my_shiritori.play(\"apple\"), [\"apple\"])",
			"Test.assertSimilar(my_shiritori.words, [\"apple\"])",
			"Test.assertSimilar(my_shiritori.play(\"ear\"), [\"apple\", \"ear\"])",
			"Test.assertSimilar(my_shiritori.play(\"rhino\"), [\"apple\", \"ear\", \"rhino\"])",
			"Test.assertSimilar(my_shiritori.play(\"ocelot\"), [\"apple\", \"ear\", \"rhino\", \"ocelot\"])",
			"Test.assertEquals(my_shiritori.game_over, false)",
			"Test.assertEquals(my_shiritori.play(\"oops\"), \"game over\", \"does not follow Rule 1 (input word's first character = last words last character)\")",
			"Test.assertEquals(my_shiritori.game_over, true)",
			"Test.assertSimilar(my_shiritori.words, [\"apple\", \"ear\", \"rhino\", \"ocelot\"], \"oops should not be added to the array\")",
			"​",
			"Test.assertEquals(my_shiritori.restart(), \"game restarted\")",
			"Test.assertSimilar(my_shiritori.words, [])",
			"Test.assertEquals(my_shiritori.game_over, false)",
			"Test.assertSimilar(my_shiritori.play(\"hostess\"), [\"hostess\"])",
			"Test.assertEquals(my_shiritori.game_over, false)",
			"Test.assertSimilar(my_shiritori.play(\"stash\"), [\"hostess\", \"stash\"])",
			"Test.assertEquals(my_shiritori.play(\"hostess\"), \"game over\", \"does not follow Rule 2 (word already exists in array)\")",
			"Test.assertSimilar(my_shiritori.words, [\"hostess\", \"stash\"])"
		],
		"starterFn": [
			"1\nclass Shiritori {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6o5tYwwbY2ys7XTm4"
	},
	{
		"title": "When to Sleep?",
		"description": "<p><span>Given a series of arrays, with each individual array containing the </span><strong><span>time of the alarm set</span></strong><span> and the </span><strong><span>sleep duration</span></strong><span>, return </span><strong><span>what time to sleep</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>bedTime([\"07:50\", \"07:50\"]) ➞ [\"00:00\"]\n// The second argument means 7 hours, 50 minutes sleep duration.\n\nbedTime([\"06:15\", \"10:00\"], [\"08:00\", \"10:00\"], [\"09:30\", \"10:00\"]) ➞ [\"20:15\", \"22:00\", \"23:30\"]\n// The second argument of each sub list means 10 hours sleep duration.\n\nbedTime([\"05:45\", \"04:00\"], [\"07:10\", \"04:30\"]) ➞ [\"01:45\", \"02:40\"]\n// Sleep duration can be different among the arrays.</code></pre><h3><span>Notes</span></h3><ul><li><span>Times should be given in 24-hrs (i.e. \"23:25\" as opposed to \"11:25PM\").</span></li><li><span>Return an array of strings.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(bedTime(['07:50', '07:50']), ['00:00'])",
			"Test.assertSimilar(bedTime(['06:15', '10:00'], ['08:00', '10:00'], ['09:30', '10:00']), ['20:15', '22:00', '23:30'])",
			"Test.assertSimilar(bedTime(['05:45', '04:00'], ['07:10', '04:30']), ['01:45', '02:40'])",
			"​",
			"// Made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction bedTime() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fKGMjfjibMM7AxtpZ"
	},
	{
		"title": "Number Groups",
		"description": "<p><span>Given three groups of numbers, return a list containing all numbers that appear in more than one group (in ascending order).</span></p><h3><span>Examples</span></h3><pre><code>number_groups([7, 8, 7, 3, 4], [2, 9, 1, 2, 1], [5, 6, 6, 6, 5]) ➞ []\n\nnumber_groups([3, 8, 8, 1, 1], [9, 1, 1, 9, 9], [10, 7, 6, 6, 3]) ➞ [1, 3]\n\nnumber_groups([4, 10, 9, 2, 2], [5, 3, 7, 3, 8], [6, 2, 9, 4, 2]) ➞ [2, 4, 9]\n\nnumber_groups([7, 8, 4, 8, 7], [8, 5, 9, 2, 9], [6, 1, 5, 5, 6]) ➞ [5, 8]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(numberGroups([3, 1, 7, 6, 4], [6, 10, 2, 2, 6], [1, 1, 2, 5, 5]), [1, 2, 6])",
			"Test.assertSimilar(numberGroups([6, 3, 7, 3, 1], [4, 6, 5, 9, 2], [10, 7, 8, 1, 2]), [1, 2, 6, 7])",
			"Test.assertSimilar(numberGroups([4, 6, 3, 9, 9], [4, 7, 10, 6, 9], [7, 9, 1, 1, 5]), [4, 6, 7, 9])",
			"Test.assertSimilar(numberGroups([7, 6, 9, 2, 6], [8, 5, 6, 8, 3], [5, 8, 6, 8, 3]), [3, 5, 6, 8])",
			"Test.assertSimilar(numberGroups([4, 4, 4, 5, 1], [8, 2, 8, 9, 4], [7, 4, 3, 10, 4]), [4])",
			"Test.assertSimilar(numberGroups([4, 8, 9, 8, 4], [10, 2, 5, 7, 2], [1, 1, 3, 6, 6]), [])",
			"Test.assertSimilar(numberGroups([7, 10, 7, 1, 4], [6, 2, 1, 8, 5], [9, 4, 9, 9, 3]), [1, 4])",
			"Test.assertSimilar(numberGroups([4, 3, 3, 5, 9], [6, 9, 6, 6, 1], [10, 5, 7, 10, 7]), [5, 9])",
			"Test.assertSimilar(numberGroups([3, 4, 9, 1, 10], [2, 9, 6, 8, 5], [6, 9, 10, 1, 7]), [1, 6, 9, 10])",
			"Test.assertSimilar(numberGroups([4, 7, 2, 5, 9], [6, 10, 2, 2, 10], [9, 9, 2, 9, 9]), [2, 9])",
			"Test.assertSimilar(numberGroups([7, 10, 4, 8, 2], [3, 8, 1, 9, 4], [6, 1, 5, 8, 6]), [1, 4, 8])",
			"Test.assertSimilar(numberGroups([10, 1, 10, 10, 3], [7, 6, 8, 7, 4], [7, 7, 7, 2, 10]), [7, 10])",
			"Test.assertSimilar(numberGroups([7, 7, 6, 8, 3], [3, 3, 10, 3, 10], [5, 7, 2, 2, 10]), [3, 7, 10])",
			"Test.assertSimilar(numberGroups([5, 9, 9, 9, 5], [8, 6, 1, 1, 1], [3, 7, 2, 2, 6]), [6])",
			"Test.assertSimilar(numberGroups([2, 8, 10, 2, 10], [8, 9, 4, 6, 8], [6, 5, 4, 1, 10]), [4, 6, 8, 10])",
			"Test.assertSimilar(numberGroups([1, 5, 3, 3, 5], [9, 5, 10, 8, 10], [4, 6, 1, 6, 10]), [1, 5, 10])",
			"Test.assertSimilar(numberGroups([2, 6, 5, 4, 4], [8, 4, 8, 7, 8], [6, 8, 8, 3, 5]), [4, 5, 6, 8])",
			"Test.assertSimilar(numberGroups([8, 8, 9, 3, 8], [5, 1, 10, 6, 1], [2, 7, 7, 4, 2]), [])",
			"Test.assertSimilar(numberGroups([1, 10, 6, 10, 3], [9, 3, 9, 6, 8], [7, 8, 5, 3, 6]), [3, 6, 8])",
			"Test.assertSimilar(numberGroups([9, 8, 2, 9, 1], [10, 3, 2, 5, 6], [1, 7, 8, 3, 7]), [1, 2, 3, 8])"
		],
		"starterFn": [
			"1\nfunction numberGroups(group1, group2, group3) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Xz2SWTuwQtnqHGi7d"
	},
	{
		"title": "The Fiscal Code (Part II): the Check Letter",
		"description": "<p><span>In this challenge, you must build a program that generates the last character of an Italian </span><em><span>Codice Fiscale</span></em><span>, an alphanumeric identifying ID code.</span></p><p><span>The last character, also called check letter or </span><strong><span>CIN</span></strong><span> (</span><em><span>Control Internal Number</span></em><span>), is calculated after converting every other character into a numeric value, in relation to the parity of their natural position into the string (treating so the string as a </span><em><span>1-indexed</span></em><span> sequence).</span></p><h4><span>CONVERSION TABLE</span></h4><table><thead><tr><th><strong><span>Char</span></strong></th><th><strong><span>Odd</span></strong></th><th><strong><span>Even</span></strong></th><th></th><th><strong><span>Char</span></strong></th><th><strong><span>Odd</span></strong></th><th><strong><span>Even</span></strong></th></tr></thead><tbody><tr><td><span>0</span></td><td><span>1</span></td><td><span>0</span></td><td></td><td><span>I</span></td><td><span>19</span></td><td><span>8</span></td></tr><tr><td><span>1</span></td><td><span>0</span></td><td><span>1</span></td><td></td><td><span>J</span></td><td><span>21</span></td><td><span>9</span></td></tr><tr><td><span>2</span></td><td><span>5</span></td><td><span>2</span></td><td></td><td><span>K</span></td><td><span>2</span></td><td><span>10</span></td></tr><tr><td><span>3</span></td><td><span>7</span></td><td><span>3</span></td><td></td><td><span>L</span></td><td><span>4</span></td><td><span>11</span></td></tr><tr><td><span>4</span></td><td><span>9</span></td><td><span>4</span></td><td></td><td><span>M</span></td><td><span>18</span></td><td><span>12</span></td></tr><tr><td><span>5</span></td><td><span>13</span></td><td><span>5</span></td><td></td><td><span>N</span></td><td><span>20</span></td><td><span>13</span></td></tr><tr><td><span>6</span></td><td><span>15</span></td><td><span>6</span></td><td></td><td><span>O</span></td><td><span>11</span></td><td><span>14</span></td></tr><tr><td><span>7</span></td><td><span>17</span></td><td><span>7</span></td><td></td><td><span>P</span></td><td><span>3</span></td><td><span>15</span></td></tr><tr><td><span>8</span></td><td><span>19</span></td><td><span>8</span></td><td></td><td><span>Q</span></td><td><span>6</span></td><td><span>16</span></td></tr><tr><td><span>9</span></td><td><span>21</span></td><td><span>9</span></td><td></td><td><span>R</span></td><td><span>8</span></td><td><span>17</span></td></tr><tr><td><span>A</span></td><td><span>1</span></td><td><span>0</span></td><td></td><td><span>S</span></td><td><span>12</span></td><td><span>18</span></td></tr><tr><td><span>B</span></td><td><span>0</span></td><td><span>1</span></td><td></td><td><span>T</span></td><td><span>14</span></td><td><span>19</span></td></tr><tr><td><span>C</span></td><td><span>5</span></td><td><span>2</span></td><td></td><td><span>U</span></td><td><span>16</span></td><td><span>20</span></td></tr><tr><td><span>D</span></td><td><span>7</span></td><td><span>3</span></td><td></td><td><span>V</span></td><td><span>10</span></td><td><span>21</span></td></tr><tr><td><span>E</span></td><td><span>9</span></td><td><span>4</span></td><td></td><td><span>W</span></td><td><span>22</span></td><td><span>22</span></td></tr><tr><td><span>F</span></td><td><span>13</span></td><td><span>5</span></td><td></td><td><span>X</span></td><td><span>25</span></td><td><span>23</span></td></tr><tr><td><span>G</span></td><td><span>15</span></td><td><span>6</span></td><td></td><td><span>Y</span></td><td><span>24</span></td><td><span>24</span></td></tr><tr><td><span>H</span></td><td><span>17</span></td><td><span>7</span></td><td></td><td><span>Z</span></td><td><span>23</span></td><td><span>25</span></td></tr></tbody></table><p><span>When all characters will be converted accordingly to the conversion table, you have to sum these values and divide the result by </span><code>26</code><span>: the remainder will give you the index of a letter, from </span><code>A = 0</code><span> up to </span><code>Z = 25</code><span>.</span></p><p><span>Given a string </span><code>code</code><span> being a partial Fiscal Code, implement a function that returns the CIN as a capitalized single letter.</span></p><h3><span>Example</span></h3><pre><code>fiscalCodeCIN(\"MRTMTT25D09F205\") ➞ \"Z\"\n\nConvert the characters in odd positions:\n\nPos   Char   Value\n1st  -&gt; M -&gt; 18\n3rd  -&gt; T -&gt; 14\n5th  -&gt; T -&gt; 14\n7th  -&gt; 2 -&gt; 5\n9th  -&gt; D -&gt; 7\n11th -&gt; 9 -&gt; 21\n13th -&gt; 2 -&gt; 5\n15th -&gt; 5 -&gt; 13\n\nConvert the characters in even positions:\n\nPos   Char   Value\n2nd  -&gt; R -&gt; 17\n4th  -&gt; M -&gt; 12\n6th  -&gt; T -&gt; 19\n8th  -&gt; 5 -&gt; 5\n10th -&gt; 0 -&gt; 0\n12th -&gt; F -&gt; 5\n14th -&gt; 0 -&gt; 0\n\nSum of the values:\n\n18 + 14 + 14 + 5 + 7 + 21 + 5 + 13 +\n17 + 12 + 19 + 5 + 0 + 5 + 0 = 155\n\nThe remainder (modulo) of 155 % 26 is 25\n\nStarting from A = 0, Z is the 25th letter</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember that the positions of characters into the string are </span><em><span>1-indexed</span></em><span>. On the other hand, when returning the check letter, the positions of the letters into the alphabet are </span><em><span>0-indexed</span></em><span>.</span></li><li><span>You can expect only valid data: uppercase alpha-numeric strings made of 15 valid characters.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on </span><em><span>Codice Fiscale</span></em><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fiscalCodeCIN(\"MRTMTT25D09F205\"), \"Z\")",
			"Test.assertEquals(fiscalCodeCIN(\"BTTRSE85M20C351\"), \"V\")",
			"Test.assertEquals(fiscalCodeCIN(\"MLLSNT82P65Z404\"), \"U\")",
			"Test.assertEquals(fiscalCodeCIN(\"CPNLAX99A17H501\"), \"O\")",
			"Test.assertEquals(fiscalCodeCIN(\"CRUMRA67S47F704\"), \"O\")",
			"Test.assertEquals(fiscalCodeCIN(\"MSOMKY28A16B230\"), \"V\")",
			"Test.assertEquals(fiscalCodeCIN(\"YUXHLN50T41E999\"), \"X\")",
			"Test.assertEquals(fiscalCodeCIN(\"CHEBND61T01Z799\"), \"R\")"
		],
		"starterFn": [
			"1\nfunction fiscalCodeCIN(code) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/b4dCYcmHkyDBB68dB"
	},
	{
		"title": "Word Game Using First/Last Letter",
		"description": "<p><span>Create a function that takes an array of player 1's words </span><code>p1</code><span> and an array of player 2's words </span><code>p2</code><span>. Player 1 will always play first and will give a word. Player 2 must then give another word that begins with the end letter of the last word used. The first player to use a duplicate word, or use a word that does not begin with the last word's end, loses.</span></p><h3><span>Examples</span></h3><pre><code>wordGame([\"edabit\", \"yellow\", \"growing\"], [\"tangy\", \"wedding\", \"round\"]) ➞ \"Player 1 wins!\"\n// Round does not begin with \"g\".\n\nwordGame([\"edabit\", \"yellow\", \"growing\", \"dart\", \"tangy\"], [\"tangy\", \"wedding\", \"ground\", \"toast\", \"yellow\"]) ➞ \"Player 2 wins!\"\n// Although player 2 repeated \"yellow\", player 1 repeated \"tangy\" first.\n\nwordGame([\"edabit\", \"yellow\", \"growing\"], [\"tangy\", \"wedding\", \"ground\"]) ➞ \"Game Continues...\"\n// No winner yet.</code></pre><h3><span>Notes</span></h3><p><span>All words will be lowercase and there will be equal words used by each player, regardless of whether a player has won.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordGame([\"edabit\", \"yellow\", \"growing\"], [\"tangy\", \"wedding\", \"ground\"]), \"Game continues...\")",
			"Test.assertEquals(wordGame([\"edabit\", \"yellow\", \"rowing\"], [\"tangy\", \"wedding\", \"ground\"]), \"Player 2 wins!\")",
			"Test.assertEquals(wordGame([\"edabit\", \"yellow\", \"growing\"], [\"tangy\", \"wedding\", \"round\"]), \"Player 1 wins!\")",
			"Test.assertEquals(wordGame([\"edabit\", \"yellow\", \"growing\", \"dart\"], [\"tangy\", \"wedding\", \"ground\", \"tangy\"]), \"Player 1 wins!\")",
			"Test.assertEquals(wordGame([\"edabit\", \"yellow\", \"growing\", \"dart\", \"tangy\"], [\"tangy\", \"wedding\", \"ground\", \"toast\", \"yellow\"]), \"Player 2 wins!\")",
			"Test.assertEquals(wordGame(['banana', 'elephant', 'orange', 'elope',  'tiger',  'elipse', 'elevate',  'trust',  'time'], ['apple',  'tornado',  'ewe',  'event',  'rose', 'eradicate',  'eat',  'tonight',  'love']), \"Player 1 wins!\")"
		],
		"starterFn": [
			"1\nfunction wordGame(p1, p2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pgN9GtB8GacdGAcDy"
	},
	{
		"title": "Sort Beethoven's Nicknamed Works by Genre, Nickname, and Opus Number",
		"description": "<p><span>Write a function that takes an array of nicknamed works by Beethoven (objects with </span><code>op</code><span>, </span><code>nickname</code><span>, and </span><code>genre</code><span> properties, all non-empty strings) and returns an object whose keys are the pluralized </span><code>genre</code><span>s and whose values are arrays of the corresponding work-objects, with each array sorted alphabetically by </span><code>nickname</code><span> (and secondarily by </span><code>op</code><span> in the case of a shared nickname—more on this below).</span></p><p><span>To pluralize a </span><code>genre</code><span>, just add an </span><code>\"s\"</code><span>, with the exception of </span><code>\"symphony\"</code><span> (pl. </span><code>\"symphonies\"</code><span>).</span></p><p><span>Each </span><code>nickname</code><span> has headline-style capitalization (the first letter of each word is uppercase).</span></p><p><span>Opus-number strings (</span><code>op</code><span>) always begin with an integer, but some opuses contain more than one work. In that case, a work's </span><code>op</code><span> string will end either with a lowercase letter (e.g., </span><code>\"81a\"</code><span>) or with a slash followed by another integer (e.g., </span><code>\"27/1\"</code><span>). (For a given opus that contains more than one work, either the lettering scheme or the numbering scheme is used—never both.)</span></p><p><span>A single nickname may apply to an entire opus that contains multiple works of the same genre. Such works should be sub-sorted by their full </span><code>op</code><span> strings (so </span><code>\"1a\"</code><span> would precede </span><code>\"1b\"</code><span>, and </span><code>\"1/1\"</code><span> would precede </span><code>\"1/2\"</code><span>).</span></p><p><span>Try to keep your code abstract! With the exception of the </span><code>\"symphony\"</code><span> </span><code>genre</code><span>, you don't have to know any of the values of the input-data to complete this challenge.</span></p>",
		"publishedBy": "Euphonic Sounds",
		"publishedByUrl": "https://edabit.com/user/mHT2bJb5SByfJ8yKS",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects",
			"sorting",
			"strings"
		],
		"tests": [
			"const nicknamedLvBWorks = [",
			"  { op: '24', nickname: 'Spring', genre: 'violin sonata' },",
			"  { op: '125', nickname: 'Choral', genre: 'symphony' },",
			"  { op: '59/2', nickname: 'Razumovsky', genre: 'string quartet' },",
			"  { op: '73', nickname: 'Emperor', genre: 'piano concerto' },",
			"  { op: '28', nickname: 'Pastorale', genre: 'piano sonata' },",
			"  { op: '31/2', nickname: 'Tempest', genre: 'piano sonata' },",
			"  { op: '67', nickname: 'Fate', genre: 'symphony' },",
			"  { op: '70/1', nickname: 'Ghost', genre: 'piano trio' },",
			"  { op: '106', nickname: 'Hammerklavier', genre: 'piano sonata' },",
			"  { op: '55', nickname: 'Eroica', genre: 'symphony' },",
			"  { op: '74', nickname: 'Harp', genre: 'string quartet' },",
			"  { op: '53', nickname: 'Waldstein', genre: 'piano sonata' },",
			"  { op: '47', nickname: 'Kreutzer', genre: 'violin sonata' },",
			"  { op: '57', nickname: 'Appassionata', genre: 'piano sonata' },",
			"  { op: '81a', nickname: 'Les Adieux', genre: 'piano sonata' },",
			"  { op: '97', nickname: 'Archduke', genre: 'piano trio' },",
			"  { op: '27/1', nickname: 'Moonlight', genre: 'piano sonata' },",
			"  { op: '68', nickname: 'Pastoral', genre: 'symphony' },",
			"  { op: '59/3', nickname: 'Razumovsky', genre: 'string quartet' },",
			"  { op: '95', nickname: 'Serioso', genre: 'string quartet' },",
			"  { op: '13', nickname: 'Pathétique', genre: 'piano sonata' },",
			"  { op: '59/1', nickname: 'Razumovsky', genre: 'string quartet' }",
			"]",
			"​",
			"const expected = {"
		],
		"starterFn": [
			"1\nfunction sortByGenre(works) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/knW3A8W6vpxfJa9iK"
	},
	{
		"title": "Water Balloon",
		"description": "<p><span>Once a water balloon pops, is soaks the area around it. The ground gets drier the further away you travel from the balloon.</span></p><p><span>The effect of a water balloon popping can be modeled using an array. Create a function that takes an array which takes the </span><strong><span>pre-pop</span></strong><span> state and returns the state after the balloon is popped. The </span><strong><span>pre-pop</span></strong><span> state will contain </span><strong><span>at most</span></strong><span> a single balloon, whose size is represented by the only non-zero element.</span></p><h3><span>Examples</span></h3><pre><code>pop([0, 0, 0, 0, 4, 0, 0, 0, 0]) ➞ [0, 1, 2, 3, 4, 3, 2, 1, 0]\n\npop([0, 0, 0, 3, 0, 0, 0]) ➞ [0, 1, 2, 3, 2, 1, 0]\n\npop([0, 0, 2, 0, 0]) ➞ [0, 1, 2, 1, 0]\n\npop([0]) ➞ [0]</code></pre><h3><span>Notes</span></h3><ul><li><span>Length of input array is always odd.</span></li><li><span>The input array will always be the exact length it takes for there to be exactly one border zero.</span></li><li><span>If the input array consists only of zeroes, return the same array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(pop([0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0]), [0, 1, 2, 3, 4, 5, 4, 3, 2, 1, 0])",
			"Test.assertSimilar(pop([0, 0, 0, 0, 4, 0, 0, 0, 0]), [0, 1, 2, 3, 4, 3, 2, 1, 0])",
			"Test.assertSimilar(pop([0, 0, 0, 3, 0, 0, 0]), [0, 1, 2, 3, 2, 1, 0])",
			"Test.assertSimilar(pop([0, 0, 2, 0, 0]), [0, 1, 2, 1, 0])",
			"Test.assertSimilar(pop([0, 1, 0]), [0, 1, 0])",
			"Test.assertSimilar(pop([0]), [0])"
		],
		"starterFn": [
			"1\nfunction pop(state) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rj2fNpjobWZksHrdZ"
	},
	{
		"title": "Programming Polyglot",
		"description": "<p><span>Create a function that takes a number that represents a person's programming language score, and returns an alphabetised array of programming languages they are proficient in. Arbitrarily assigned points for each language are listed below:</span></p><table><thead><tr><th><span>Language</span></th><th><span>Points</span></th></tr></thead><tbody><tr><td><span>C#</span></td><td><span>1</span></td></tr><tr><td><span>C++</span></td><td><span>2</span></td></tr><tr><td><span>Java</span></td><td><span>4</span></td></tr><tr><td><span>JavaScript</span></td><td><span>8</span></td></tr><tr><td><span>PHP</span></td><td><span>16</span></td></tr><tr><td><span>Python</span></td><td><span>32</span></td></tr><tr><td><span>Ruby</span></td><td><span>64</span></td></tr><tr><td><span>Swift</span></td><td><span>128</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>getLanguages(25) ➞ [\"C#\", \"JavaScript\", \"PHP\"]\n\ngetLanguages(100) ➞ [\"Java\", \"Python\", \"Ruby\"]\n\ngetLanguages(53) ➞ [\"C#\", \"Java\", \"PHP\", \"Python\"]</code></pre><h3><span>Notes</span></h3><p><span>Easier using bitwise operations.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"bit_operations",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(getLanguages(32), ['Python'])",
			"Test.assertSimilar(getLanguages(25), ['C#','JavaScript','PHP'])",
			"Test.assertSimilar(getLanguages(100), ['Java','Python','Ruby'])",
			"Test.assertSimilar(getLanguages(255), ['C#','C++','Java','JavaScript','PHP','Python','Ruby','Swift'])",
			"Test.assertSimilar(getLanguages(53), ['C#','Java','PHP','Python'])",
			"Test.assertSimilar(getLanguages(12), ['Java','JavaScript'])"
		],
		"starterFn": [
			"1\nfunction getLanguages(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CWvC6aNbqHn68D2No"
	},
	{
		"title": "Remove The Word!",
		"description": "<p><span>Create a function that takes an array and string. The function should remove the letters in the string from the array, and return the array.</span></p><h3><span>Examples</span></h3><pre><code>removeLetters([\"s\", \"t\", \"r\", \"i\", \"n\", \"g\", \"w\"], \"string\") ➞ [\"w\"]\n\nremoveLetters([\"b\", \"b\", \"l\", \"l\", \"g\", \"n\", \"o\", \"a\", \"w\"], \"balloon\") ➞ [\"b\", \"g\", \"w\"]\n\nremoveLetters([\"d\", \"b\", \"t\", \"e\", \"a\", \"i\"], \"edabit\") ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If number of times a letter appears in the array is greater than the number of times the letter appears in the string, the extra letters should be left behind (see example #2).</span></li><li><span>If all the letters in the array are used in the string, the function should return an empty array (see example #3).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(removeLetters([\"s\", \"t\", \"r\", \"i\", \"n\", \"g\", \"w\"], \"string\"), [\"w\"])",
			"Test.assertSimilar(removeLetters([\"b\", \"b\", \"l\", \"l\", \"g\", \"n\", \"o\", \"a\", \"w\"], \"balloon\"), [\"b\", \"g\", \"w\"])",
			"Test.assertSimilar(removeLetters([\"d\", \"b\", \"t\", \"e\", \"a\", \"i\"], \"edabit\"), [])",
			"Test.assertSimilar(removeLetters([\"t\", \"t\", \"e\", \"s\", \"t\", \"u\"], \"testing\"), [\"t\", \"u\"])"
		],
		"starterFn": [
			"1\nfunction removeLetters(letters, word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Xpj88Ni3QxoCGFnne"
	},
	{
		"title": "To Adjust the Time",
		"description": "<p><span>In this challenge, you have to add a variable amount of hours, minutes and seconds to a given time, obtaining, in turn, a new adjusted time.</span></p><p><span>Given a string </span><code>now</code><span> being a timestamp in the format </span><code>hh:mm:ss</code><span>, and three integers </span><code>hrs</code><span>, </span><code>min</code><span> and </span><code>sec</code><span> being the hours, minutes and seconds to add, implement a function that returns a string being the newly adjusted timestamp (maintaining the same format).</span></p><h3><span>Examples</span></h3><pre><code>timeAdjust(\"01:00:00\", 1, 30, 10) ➞ \"02:30:10\"\n\ntimeAdjust(\"18:22:30\", 4, 60, 30) ➞ \"23:23:00\"\n\ntimeAdjust(\"00:00:00\", 72, 120, 120) ➞ \"02:02:00\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The amounts of </span><code>hrs</code><span>, </span><code>min</code><span>  and </span><code>sec</code><span> can be any positive integer, and you have to correctly add them to the corresponding unit if they exceed their scale. See example #2: sixty minutes is one hour, and sixty seconds (30 + 30) is one minute.</span></li><li><span>If the amount of time to add exceeds the 24 hours, then the time will start again from \"00:00:00\". See example #3: 72 hours are 3 exact days so that after three cycles of 24 hours, the hour will be again \"00\" (and becomes \"02\" because we are adding also 120 minutes or 2 hours).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"dates",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(timeAdjust(\"01:00:00\", 1, 30, 10), \"02:30:10\", \"Example #1\")",
			"Test.assertEquals(timeAdjust(\"18:22:30\", 4, 60, 30), \"23:23:00\", \"Example #2\")",
			"Test.assertEquals(timeAdjust(\"00:00:00\", 72, 120, 120), \"02:02:00\", \"Example #3\")",
			"Test.assertEquals(timeAdjust(\"23:59:59\", 0, 0, 1), \"00:00:00\")",
			"Test.assertEquals(timeAdjust(\"12:17:43\", 0, 0, 0), \"12:17:43\")",
			"Test.assertEquals(timeAdjust(\"14:11:29\", 1000, 23466, 171626), \"12:57:55\")",
			"Test.assertEquals(timeAdjust(\"21:02:55\", 39, 62525, 332), \"22:13:27\")"
		],
		"starterFn": [
			"1\nfunction timeAdjust(now, hrs, min, sec) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AuH5MDBMBcTS9Te4K"
	},
	{
		"title": "Stack Calculator",
		"description": "<p><span>A stack machine processes instructions by pushing and popping values to an internal stack. A simple example of this is a calculator.</span></p><p><span>The argument passed to </span><code>run(instructions)</code><span> will always be a string containing a series of instructions.</span><br><span>The instruction set of the calculator will be this:  </span></p><ul><li><code>+</code><span>: Pop the last 2 values from the stack, add them, and push the result onto the stack.</span></li><li><code>-</code><span>: Pop the last 2 values from the stack, subtract the lower one from the topmost one, and push the result.</span></li><li><code>*</code><span>: Pop the last 2 values, multiply, and push the result.</span></li><li><code>/</code><span>: Pop the last 2 values, divide the topmost one by the lower one, and push the result.</span></li><li><code>DUP</code><span>: Duplicate (not double) the top value on the stack.</span></li><li><code>POP</code><span>: Pop the last value from the stack and discard it.</span></li><li><code>PSH</code><span>: Performed whenever a number appears as an instruction. Push the number to the stack.</span></li><li><span>Any other instruction (for example, a letter) should result in the value \"Invalid instruction: </span><span>[</span><span>instruction]\"</span></li></ul><h3><span>Examples</span></h3><pre><code>StackCalc(\"\") ➞ 0\n\nStackCalc(\"5 6 +\") ➞ 11\n\nStackCalc(\"3 DUP +\") ➞ 6\n\nStackCalc(\"6 5 5 7 * - /\") ➞ 5\n\nStackCalc(\"x y +\") ➞ Invalid instruction: x</code></pre><h3><span>Notes</span></h3><ul><li><span>If there are no instructions, the value should remain 0.</span></li><li><span>The return value of </span><code>get value()</code><span> should be the topmost value on the stack.</span></li></ul>",
		"publishedBy": "Theodore",
		"publishedByUrl": "https://edabit.com/user/hi7Hvtq2mJfkXEGF2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"classes",
			"math",
			"numbers"
		],
		"tests": [
			"const tests = [",
			"  {",
			"    arg: '12', ans: 12",
			"  }, {",
			"    arg: '5 6 +', ans: 11",
			"  }, {",
			"    arg: '3 6 -', ans: 3",
			"  }, {",
			"    arg: '3 DUP +', ans: 6",
			"  }, {",
			"    arg: '2 5 - 5 + DUP +', ans: 16",
			"  }, {",
			"    arg: '9 14 DUP + - 3 POP', ans: 19",
			"  }, {",
			"    arg: '1 2 3 4 5 POP POP POP', ans: 2",
			"  }, {",
			"    arg: '13 DUP 4 POP 5 DUP + DUP + -', ans: 7",
			"  }, {",
			"    arg: '6 5 5 7 * - /', ans: 5",
			"  }, {",
			"    arg: '4 2 4 * 3 + 5 + / 5 -', ans: 1",
			"  }, {",
			"    arg: '5 8 + 4 5 1 + POP 13 +', ans: 17",
			"  }, {",
			"    arg: 'x', ans: 'Invalid instruction: x'",
			"  }, {"
		],
		"starterFn": [
			"1\nclass StackCalc {",
			"2\n  constructor() {",
			"3\n    ",
			"4\n  }",
			"5\n  run(instructions) {",
			"6\n    ",
			"7\n  }",
			"8\n  get value() {",
			"9\n    ",
			"10\n  }",
			"11\n}"
		],
		"url": "https://edabit.com/challenge/WyuiphFcBXZSoKpEt"
	},
	{
		"title": "A Subtle Switcheroo",
		"description": "<p><span>Create a function which </span><strong><span>replaces</span></strong><span> all instances of </span><code>\"nts\"</code><span> with </span><code>\"nce\"</code><span> and </span><strong><span>vice versa</span></strong><span> if they are at the </span><em><span>end of a word</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>switcheroo(\"The elephants in France were chased by ants!\") ➞ \"The elephance in Frants were chased by ance!\"\n\nswitcheroo(\"While he rants, I fall into a trance...\") ➞ \"While he rance, I fall into a trants...\"\n\nswitcheroo(\"Bounced over the fence!\") ➞ \"Bounced over the fents!\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Empty strings should return just an empty string (see example #2).</span></li><li><span>Ignore punctuation and any instances where </span><code>\"nts\"</code><span> or </span><code>\"nce\"</code><span> are not at the end of a word (see example #3).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(switcheroo(\"While he rants, I fall into a trance...\"), \"While he rance, I fall into a trants...\")",
			"Test.assertEquals(switcheroo(\"The elephants in France were chased by ants!\"), \"The elephance in Frants were chased by ance!\")",
			"Test.assertEquals(switcheroo(\"Bounced over the fence!\"), \"Bounced over the fents!\")",
			"Test.assertEquals(switcheroo(\"Face\"), \"Face\", \"Replace nce, not just ce\")",
			"Test.assertEquals(switcheroo(\"Fats\"), \"Fats\", \"Replace nts, not just ts\")",
			"Test.assertEquals(switcheroo(\"\"), \"\")",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction switcheroo(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WQjRP8ZpmSWZddoMd"
	},
	{
		"title": "Is Edabit in the String?",
		"description": "<p><span>A string contains the word \"edabit\" if a </span><em><span>subsequence</span></em><span> of its characters spell \"edabit\".</span></p><p><span>Write a function that accepts a string and returns “YES” if the string contains a subsequence of the word edabit or \"NO\" if it does not.</span></p><h3><span>Examples</span></h3><pre><code>edabitInString(“eddaaabt”) ➞ “NO”\n\nedabitInString(“edwardisabletodoit”) ➞ “YES”\n\nedabitInString(“abecdfghijklmnopqrstuvwxyz”) ➞ “NO”</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for more details on subsequence.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(edabitInString(\"eddaaabt\"), \"NO\")",
			"Test.assertEquals(edabitInString(\"edwardisabletodoittoo\"), \"YES\")",
			"Test.assertEquals(edabitInString(\"abecdfghijklmnopqrstuvwxyz\"), \"NO\")",
			"Test.assertEquals(edabitInString(\"edisthebestatthis\"), \"NO\")",
			"Test.assertEquals(edabitInString(\"teachandlearnbitbybit\"), \"YES\")",
			"Test.assertEquals(edabitInString(\"fjkdlkskkkkkdkkdkdedaaakkjkkdkkdklqiieuirooeizooziiciibiiiiifooiioiiuuyeyttgguoosooodiifiufiiodikkjkls\"), \"YES\")"
		],
		"starterFn": [
			"1\nfunction edabitInString(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AdB5SRYzqoiaKKiwm"
	},
	{
		"title": "Shared vs. Unique Letters",
		"description": "<p><span>Create a function that takes in two words as input and returns an array of three elements, in the following order:</span></p><ol><li><span>Shared letters between two words.</span></li><li><span>Letters unique to word 1.</span></li><li><span>Letters unique to word 2.</span></li></ol><p><span>Each element should have </span><strong><span>unique</span></strong><span> letters, and have each letter be </span><strong><span>alphabetically sorted</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>letters(\"sharp\", \"soap\") ➞ [\"aps\", \"hr\", \"o\"]\n\nletters(\"board\", \"bored\") ➞ [\"bdor\", \"a\", \"e\"]\n\nletters(\"happiness\", \"envelope\") ➞ [\"enp\", \"ahis\", \"lov\"]\n\nletters(\"kerfuffle\", \"fluffy\") ➞ [\"flu\", \"ekr\", \"y\"]\n// Even with multiple matching letters (e.g. 3 f's), there should \n// only exist a single \"f\" in your first element.\n\nletters(\"match\", \"ham\") ➞ [\"ahm\", \"ct\", \"\"]\n// \"ham\" does not contain any letters that are not found already \n// in \"match\".</code></pre><h3><span>Notes</span></h3><ul><li><span>Both words will be in lower case.</span></li><li><span>You do not have to worry about punctuation, all words only have letters from </span><code>[a-z]</code><span>.</span></li><li><span>If an element contains no letters, return an empty string (see last example).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(letters(\"sharp\", \"soap\"), [\"aps\", \"hr\", \"o\"])",
			"Test.assertSimilar(letters(\"board\", \"bored\"), [\"bdor\", \"a\", \"e\"])",
			"Test.assertSimilar(letters(\"happiness\", \"envelope\"), [\"enp\", \"ahis\", \"lov\"])",
			"Test.assertSimilar(letters(\"match\", \"ham\"), [\"ahm\", \"ct\", \"\"])",
			"Test.assertSimilar(letters(\"kerfuffle\", \"fluffy\"), [\"flu\", \"ekr\", \"y\"])"
		],
		"starterFn": [
			"1\nfunction letters(word1, word2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/64JH2CWhLNkbzfRYW"
	},
	{
		"title": "The Magic Square Game",
		"description": "<p><span>There are two players, Alice and Bob, each with a 3-by-3 grid. A referee tells Alice to fill out one particular row in the grid (say the second row) by putting either a 1 or a 0 in each box, such that the sum of the numbers in that row is odd. The referee tells Bob to fill out one column in the grid (say the first column) by putting either a 1 or a 0 in each box, such that the sum of the numbers in that column is even.</span></p><p><span>Alice and Bob win the game if Alice’s numbers give an odd sum, Bob’s give an even sum, and (</span><strong><span>most important</span></strong><span>) they’ve each written down the same number in the one square where their row and column intersect.</span></p><h3><span>Examples</span></h3><pre><code>magicSquareGame([2, \"100\"], [1, \"101\"]) ➞ false\n\nmagicSquareGame([2, \"001\"], [1, \"101\"]) ➞ true\n\nmagicSquareGame([3, \"111\"], [2, \"011\"]) ➞ true\n\nmagicSquareGame([1, \"010\"], [3, \"101\"]) ➞ false\n\n// Two arrays, Alice [row, \"her choice\"], Bob [column, \"his choice\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Look at the article in the </span><strong><span>resources tab</span></strong><span> to see the first two examples in action.</span></li><li><span>The </span><strong><span>row</span></strong><span> of Alice is always </span><strong><span>odd</span></strong><span>, the </span><strong><span>column</span></strong><span> of Bob is always </span><strong><span>even</span></strong><span>.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"games",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(magicSquareGame([2,'100'],[1,'101']), false)",
			"Test.assertEquals(magicSquareGame([2,'001'],[1,'101']), true)",
			"Test.assertEquals(magicSquareGame([3,'111'],[2,'011']), true)",
			"Test.assertEquals(magicSquareGame([1,'010'],[3,'101']), false)",
			"Test.assertEquals(magicSquareGame([2,'111'],[3,'011']), true)",
			"Test.assertEquals(magicSquareGame([2,'100'],[3,'110']), false)",
			"Test.assertEquals(magicSquareGame([1,'001'],[1,'101']), false)",
			"Test.assertEquals(magicSquareGame([2,'100'],[2,'101']), true)",
			"Test.assertEquals(magicSquareGame([3,'010'],[1,'110']), true)",
			"Test.assertEquals(magicSquareGame([1,'100'],[2,'110']), false)",
			"Test.assertEquals(magicSquareGame([2,'111'],[3,'011']), true)",
			"Test.assertEquals(magicSquareGame([2,'001'],[2,'101']), true)",
			"Test.assertEquals(magicSquareGame([1,'100'],[2,'101']), false)",
			"Test.assertEquals(magicSquareGame([3,'001'],[3,'011']), true)",
			"Test.assertEquals(magicSquareGame([3,'111'],[1,'110']), false)",
			"Test.assertEquals(magicSquareGame([2,'100'],[2,'101']), true)"
		],
		"starterFn": [
			"1\nfunction magicSquareGame(alice, bob) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/znm7CReZdTWaSgeed"
	},
	{
		"title": "Untouchable Numbers",
		"description": "<p><span>A positive number greater than 1 can be defined untouchable when it's not equal to the sum of the proper divisors (called also </span><em><span>aliquot sum</span></em><span>) of any other positive number, in a range starting from 2 and ending with the square of the given number (bounds included).</span></p><p><span>Given an integer </span><code>number</code><span>, implement a function that returns:</span></p><ul><li><code>true</code><span> if the given number is untouchable.</span></li><li><span>An array containing the numbers whose proper divisors sum is equal to the number, if the given number is not untouchable.</span></li><li><span>A string </span><code>\"Invalid Input\"</code><span> if the given number is lower than 2.</span></li></ul><h3><span>Examples</span></h3><pre><code>isUntouchable(2) ➞ true\n// Range: 2 to 4\n// 2 = 1  |  3 = 1  |  4 = 1+2 = 3\n// No sum is equal to the given number\n\nisUntouchable(3) ➞ [4]\n// Range: 2 to 9\n// As in the example above, 4 = 1+2 = 3\n\nisUntouchable(6) ➞ [6, 25]\n// Range: 2 to 36\n// 6 = 1+2+3 = 6  |  25 = 1+5 = 6\n\nisUntouchable(1) ➞ \"Invalid Input\"\n// The given number is lower than 2</code></pre><h3><span>Notes</span></h3><ul><li><span>The proper divisors of a number are, merely, all its divisors less the number itself.</span></li><li><span>More than a number can have a proper divisors sum equal to the given number, with given number included (see example #3).</span></li><li><span>Trivia: As far as we know, numbers 2 and 5 are the only two primes present in the sequence, with 5 being the only odd number present; by the way, these two assertions are still unproofed.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isUntouchable(2), true, \"Example #1\")",
			"Test.assertSimilar(isUntouchable(3), [4], \"Example #2\")",
			"Test.assertSimilar(isUntouchable(6), [6, 25], \"Example #3\")",
			"Test.assertEquals(isUntouchable(1), \"Invalid Input\", \"Example #4\")",
			"Test.assertEquals(isUntouchable(5), true)",
			"Test.assertSimilar(isUntouchable(8), [10, 49])",
			"Test.assertEquals(isUntouchable(52), true)",
			"Test.assertSimilar(isUntouchable(30), [841])",
			"Test.assertEquals(isUntouchable(-10), \"Invalid Input\")",
			"Test.assertEquals(isUntouchable(188), true)",
			"Test.assertSimilar(isUntouchable(60), [3481])",
			"Test.assertSimilar(isUntouchable(100), [124, 194])",
			"Test.assertEquals(isUntouchable(120), true)",
			"Test.assertSimilar(isUntouchable(121), [243,  791, 1199, 1391, 1751, 1919, 2231, 2759, 3071, 3239, 3431, 3551, 3599])",
			"Test.assertEquals(isUntouchable(0), \"Invalid Input\")"
		],
		"starterFn": [
			"1\nfunction isUntouchable(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MRJBdWsEubRSufbs7"
	},
	{
		"title": "Track the Robot (Part 1)",
		"description": "<p><span>A robot has been given a list of movement instructions. Each instruction is either </span><code>left</code><span>, </span><code>right</code><span>, </span><code>up</code><span> or </span><code>down</code><span>, followed by a distance to move. The robot starts at </span><code>[0, 0]</code><span>. You want to calculate where the robot will end up and return its final position as an array.</span></p><p><span>To illustrate, if the robot is given the following instructions:</span></p><pre><code>[\"right 10\", \"up 50\", \"left 30\", \"down 10\"]</code></pre><p><span>It will end up 20 left and 40 up from where it started, so we return </span><code>[-20, 40]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>trackRobot([\"right 10\", \"up 50\", \"left 30\", \"down 10\"]) ➞ [-20, 40]\n\ntrackRobot([]) ➞ [0, 0]\n// If there are no instructions, the robot doesn't move.\n\ntrackRobot([\"right 100\", \"right 100\", \"up 500\", \"up 10000\"]) ➞ [200, 10500]</code></pre><h3><span>Notes</span></h3><ul><li><span>The only instructions given will be </span><code>left</code><span>, </span><code>right</code><span>, </span><code>up</code><span> or </span><code>down</code><span>.</span></li><li><span>The distance after the instruction is always a positive whole number.</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(trackRobot([\"right 10\", \"up 50\", \"left 30\", \"down 10\"]),[-20,40])",
			"Test.assertSimilar(trackRobot([]),[0,0])",
			"Test.assertSimilar(trackRobot([\"left 10\", \"left 100\", \"left 1000\", \"left 10000\"]),[-11110,0])",
			"Test.assertSimilar(trackRobot([\"right 100\", \"right 100\", \"up 500\", \"up 10000\"]),[200,10500])",
			"Test.assertSimilar(trackRobot([\"left 10\", \"right 10\", \"down 10\", \"up 10\"]),[ 0, 0 ])"
		],
		"starterFn": [
			"1\nfunction trackRobot(instructions) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/t3iJRARc9K9x9AAdr"
	},
	{
		"title": "Scrabble Scores (Part 1)",
		"description": "<p><span>Create a function that takes an array of words, scores the words based on the Scrabble scoring table below, and returns an array of the highest scoring words. The words on the resulting array should be in the same relative order as the original array.</span></p><table><thead><tr><th><span>Letter</span></th><th><span>Points</span></th></tr></thead><tbody><tr><td><span>A</span></td><td><span>1</span></td></tr><tr><td><span>B</span></td><td><span>3</span></td></tr><tr><td><span>C</span></td><td><span>3</span></td></tr><tr><td><span>D</span></td><td><span>2</span></td></tr><tr><td><span>E</span></td><td><span>1</span></td></tr><tr><td><span>F</span></td><td><span>4</span></td></tr><tr><td><span>G</span></td><td><span>2</span></td></tr><tr><td><span>H</span></td><td><span>4</span></td></tr><tr><td><span>I</span></td><td><span>1</span></td></tr><tr><td><span>J</span></td><td><span>8</span></td></tr><tr><td><span>K</span></td><td><span>5</span></td></tr><tr><td><span>L</span></td><td><span>2</span></td></tr><tr><td><span>M</span></td><td><span>3</span></td></tr><tr><td><span>N</span></td><td><span>1</span></td></tr><tr><td><span>O</span></td><td><span>1</span></td></tr><tr><td><span>P</span></td><td><span>3</span></td></tr><tr><td><span>Q</span></td><td><span>10</span></td></tr><tr><td><span>R</span></td><td><span>1</span></td></tr><tr><td><span>S</span></td><td><span>1</span></td></tr><tr><td><span>T</span></td><td><span>1</span></td></tr><tr><td><span>U</span></td><td><span>1</span></td></tr><tr><td><span>V</span></td><td><span>4</span></td></tr><tr><td><span>W</span></td><td><span>4</span></td></tr><tr><td><span>X</span></td><td><span>8</span></td></tr><tr><td><span>Y</span></td><td><span>4</span></td></tr><tr><td><span>Z</span></td><td><span>10</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>bestWords([\"got\", \"test\", \"oh\", \"sat\", \"rents\"]) ➞ [\"oh\", \"rents\"]\n\nbestWords([\"digest\", \"divest\", \"verge\", \"honey\", \"money\"]) ➞ [\"honey\"]\n\nbestWords([\"berry\", \"whiz\", \"laughed\", \"ghetto\", \"psychic\"]) ➞ [\"whiz\", \"psychic\"]</code></pre><h3><span>Notes</span></h3><p><span>Input and output should both be arrays (see tests).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"games",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(bestWords(['got','test','oh','sat','rents']),['oh','rents'])",
			"Test.assertSimilar(bestWords(['digest','divest','verge','honey','money']),['honey'])",
			"Test.assertSimilar(bestWords(['wig','jury','interim','size','hunter']),['jury'])",
			"Test.assertSimilar(bestWords(['berry','whiz','laughed','ghetto','psychic']),['whiz', 'psychic'])",
			"Test.assertSimilar(bestWords(['library','index','memory','ghosts','quit']),['library','index','memory','quit'])",
			"Test.assertSimilar(bestWords(['singing','swine','llamas','crunchy','creamy']),['crunchy'])"
		],
		"starterFn": [
			"1\nfunction bestWords(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Q54dLnhYKHBfc7aKp"
	},
	{
		"title": "Sort by Number of Calls",
		"description": "<p><span>Create a function that takes a list of functions and sorts them in ascending order based on how many calls are needed for them to return a non-function.</span></p><h3><span>Examples</span></h3><pre><code class=\"language-js\">f1 = _ =&gt; \"hello\"\n// f1() ➞ \"hello\"\n\nf2 = _ =&gt; _ =&gt; \"edabit\"\n// f2()() ➞ \"edabit\"\n\nf3 = _ =&gt; _ =&gt; _ =&gt; \"user\"\n// f3()()() ➞ \"user\"\n\nfuncSort([f2, f3, f1]) ➞ [f1, f2, f3]\n// [f2, f3, f1] ➞ [2, 3, 1] ➞ [1, 2, 3] ➞ [f1, f2, f3]\n\nfuncSort([f1, f2, f3]) ➞ [f1, f2, f3]\n// [f1, f2, f3] ➞ [1, 2, 3] ➞ [1, 2, 3] ➞ [f1, f2, f3]\n\nfuncSort([f2, \"func\"]) ➞ [\"func\", f2]\n// [f2, \"func\"] ➞ [2, 0] ➞ [0, 2] ➞ [\"func\", f2]</code></pre><h3><span>Notes</span></h3><ul><li><span>Treat non-functions as needing zero calls.</span></li><li><span>Every function will be called with empty parameters.</span></li><li><span>Every function will need to be called at least once.</span></li><li><span>The potentially returned values include </span><code>Number</code><span>s, </span><code>Boolean</code><span>s, and </span><code>String</code><span>s, among others.</span></li></ul>",
		"publishedBy": "bangyen",
		"publishedByUrl": "https://edabit.com/user/yv7c4H2jimSKHEjtG",
		"language": "JavaScript",
		"tags": [
			"closures",
			"functional_programming",
			"higher_order_functions"
		],
		"tests": [
			"// example functions",
			"f1 = _ => \"hello\"",
			"f2 = _ => _ => \"edabit\"",
			"f3 = _ => _ => _ => \"user\"",
			"​",
			"// examples",
			"Test.assertSimilar(funcSort([f2, f3, f1]), [f1, f2, f3], 'Example 1')",
			"Test.assertSimilar(funcSort([f2, 'func']), ['func', f2], 'Example 2')",
			"​",
			"// create functions f5 to f14 to be used in tests",
			"rand = max => Math.floor(Math.random() * max)",
			"​",
			"for (k = 5; k < 15; k++) {",
			"  r = ['\"func\"', '0', 'null', '[]', '{}', 'true', '1.0'][rand(6)]",
			"  eval('f' + k.toString() + ' = ' + '_ => '.repeat(k) + r)",
			"}",
			"​",
			"// create 12 random tests",
			"for (k = 0; k < 12; k++) {",
			"  r = [\"'func'\", '0', 'null', '[]', '{}', 'true', '1.0'][rand(6)]",
			"  g = n => 'f' + n.toString()",
			"  l = [...Array(5 + rand(5)).keys()].map(k => 5 + rand(10))",
			"  sl = [...l].sort((x,y) => x - y)",
			"  lf = '[' + l.map(k => g(k)).toString().replace('f5', r) + ']'",
			"  slf = '[' + sl.map(k => g(k)).toString().replace('f5', r) + ']'",
			"​"
		],
		"starterFn": [
			"1\nfunction funcSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zi2Mvb2GZi3r34JKv"
	},
	{
		"title": "Astonishing Numbers",
		"description": "<p><span>In this challenge, you have to establish if a given integer is an Astonishing number. An Astonishing number is an integer that, when partitioned into two parts </span><code>a</code><span> (left) and </span><code>b</code><span> (right), is equal to the sum of the consecutive numbers from </span><code>a</code><span> up to </span><code>b</code><span> (if </span><code>a</code><span> is lower than </span><code>b</code><span>), or from </span><code>b</code><span> up to </span><code>a</code><span> (if </span><code>a</code><span> is greater than </span><code>b</code><span>).</span></p><p><span>Given a positive integer </span><code>num</code><span>, implement a function that returns:</span></p><ul><li><span>The string </span><code>\"AB-Astonishing\"</code><span> if </span><code>num</code><span> is an Astonishing number and the partition </span><code>a</code><span> is lower than </span><code>b</code><span>.</span></li><li><span>The string </span><code>\"BA-Astonishing\"</code><span> if </span><code>num</code><span> is an Astonishing number and the partition </span><code>a</code><span> is greater than </span><code>b</code><span>.</span></li><li><code>false</code><span> if </span><code>num</code><span> is not an Astonishing number.</span></li></ul><h3><span>Examples</span></h3><pre><code>isAstonishing(15) ➞ \"AB-Astonishing\"\n// There is only one possible partition: a = 1 and b = 5\n// Sum from a up to b: 1 + 2 + 3 + 4 + 5 = 15\n// It's Astonishing and partition a is lower than partition b\n\nisAstonishing(4020) ➞ false\n// There are three possible partitions\n// Partition 1: a = 4 and b = 020 = 20 (leading zeros are not considered)\n// Sum from a up to b: 4 + 5 + 6 + ... + 20 = 204\n// Partition 2: a = 40 and b = 20\n// Sum from b up to a: 20 + 21 + 22 + ... + 40 = 630\n//Partition 3: a = 402 and b = 0\n// Sum from b to a: 0 + 1 + 2 + ... + 402 = 81003\n// It's not Astonishing\n\nisAstonishing(2002077) ➞ \"BA-Astonishing\"\n// There are six possible partitions\n// Partition 1: a = 2 and b = 002077 = 2077 (leading zeros are not considered)\n// Sum from a up to b: 2 + 3 + 4 + ... + 2077 = 2158002\n// Partition 2: a = 20 and b = 02077 = 2077\n// Sum from a up to b: 20 + 21 + 22 + ... + 2077 = 2157813\n// Partition 3: a = 200 and b = 2077\n// Sum from a up to b: 200 + 201 + 202 + ... + 2077 = 2138103\n// Partition 4: a = 2002 and b = 077 = 77\n// Sum from b up to a: 77 + 78 + 79 + ... + 2002 = 2002077\n// It's Astonishing and partition a is greater than partition b</code></pre><h3><span>Notes</span></h3><ul><li><span>Leading zeros in the </span><code>b</code><span> partition are not considered (see examples #2 and #3).</span></li><li><span>A valid partition has at least a number into it, and this number can be also 0 (see example #2).</span></li><li><span>You can expect positive integers greater than 9 as input (a single-digit number can't be partitioned).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isAstonishing(15), \"AB-Astonishing\")",
			"Test.assertEquals(isAstonishing(4020), false)",
			"Test.assertEquals(isAstonishing(2002077), \"BA-Astonishing\")",
			"Test.assertEquals(isAstonishing(190), \"BA-Astonishing\")",
			"Test.assertEquals(isAstonishing(429), \"AB-Astonishing\")",
			"Test.assertEquals(isAstonishing(1333353333), \"AB-Astonishing\")",
			"Test.assertEquals(isAstonishing(2665444422), false)",
			"Test.assertEquals(isAstonishing(888887270281), false)",
			"Test.assertEquals(isAstonishing(228118821481188), \"AB-Astonishing\")",
			"Test.assertEquals(isAstonishing(2313692851932), \"BA-Astonishing\")"
		],
		"starterFn": [
			"1\nfunction isAstonishing(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BPCCy3zLD5d96zyet"
	},
	{
		"title": "Shiny Semiprimes: Brilliant Numbers",
		"description": "<p><span>In this challenge, you have to establish if a given number is </span><em><span>Brilliant</span></em><span>. A Brilliant number is a semiprime that can be obtained only by multiplicating two, and only two, different primes with the same number of digits.</span></p><p><span>A semiprime can be:</span></p><ul><li><span>A </span><strong><span>composite</span></strong><span> number equal to the </span><strong><span>product of two different primes</span></strong><span>.</span></li><li><span>A </span><strong><span>composite</span></strong><span> number equal to the </span><strong><span>square of a prime</span></strong><span>.</span></li></ul><p><span>Given an integer </span><code>n</code><span>, implement a function that returns </span><code>true</code><span> if </span><code>n</code><span> is a Brilliant number, or </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isBrilliant(11) ➞ false\n// 11 is a prime.\n\nisBrilliant(9) ➞ true\n// 9 is equal to the square of a prime: 3²\n\nisBrilliant(21) ➞ true\n// 21 is equal to the product of two different primes: 3 x 7\n// 3 and 7 have the same digital length.\n\nisBrilliant(22) ➞ false\n// 22 is equal to the product of two different primes: 2 x 11\n// 2 and 11 have different digital lengths.</code></pre><h3><span>Notes</span></h3><ul><li><span>The given </span><code>n</code><span> will be a positive integer greater than 0.</span></li><li><span>Remember that a Brilliant number is a semiprime that can be obtained only with a single combination of different primes having the same digital length.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isBrilliant(11), false, \"Example #1\")",
			"Test.assertEquals(isBrilliant(9), true, \"Example #2\")",
			"Test.assertEquals(isBrilliant(21), true, \"Example #3\")",
			"Test.assertEquals(isBrilliant(22), false, \"Example #4\")",
			"Test.assertEquals(isBrilliant(1001), false)",
			"Test.assertEquals(isBrilliant(77), false)",
			"Test.assertEquals(isBrilliant(209), true)",
			"Test.assertEquals(isBrilliant(211), false)",
			"Test.assertEquals(isBrilliant(780), false)",
			"Test.assertEquals(isBrilliant(703), true)",
			"Test.assertEquals(isBrilliant(1000), false)",
			"Test.assertEquals(isBrilliant(1003), true)",
			"Test.assertEquals(isBrilliant(1008), false)",
			"Test.assertEquals(isBrilliant(16459), true)",
			"Test.assertEquals(isBrilliant(348166), false)",
			"Test.assertEquals(isBrilliant(768017), true)"
		],
		"starterFn": [
			"1\nfunction isBrilliant(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Kj9uzWHcb5bdDp9NK"
	},
	{
		"title": "Know Your Neighbor",
		"description": "<p><span>Create a function that takes a string as an argument and returns </span><code>true</code><span> if each letter in the string is surrounded by a plus sign.  Return </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>plusSign(\"+f+d+c+#+f+\") ➞ true\n\nplusSign(\"+d+=3=+s+\") ➞ true\n\nplusSign(\"f++d+g+8+\") ➞ false\n\nplusSign(\"+s+7+fg+r+8+\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>For clarity, each letter must have a plus sign on both sides.</span></p>",
		"publishedBy": "DreamArdor",
		"publishedByUrl": "https://edabit.com/user/PAzNgJF54C2mYPkR9",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(plusSign(\"+f+d+c+#+f+\"), true)",
			"Test.assertEquals(plusSign(\"+d+=3=+s+\"), true)",
			"Test.assertEquals(plusSign(\"+d+k+##f+\"), false)",
			"Test.assertEquals(plusSign(\"hf+d++#+f+\"), false)",
			"Test.assertEquals(plusSign(\"+d+i+#+c+\"), true)",
			"Test.assertEquals(plusSign(\"a+\"), false)"
		],
		"starterFn": [
			"1\nfunction plusSign(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SXEBbL4xhgKJr7pqd"
	},
	{
		"title": "What's the Closest Major Event?",
		"description": "<p><span>Given an </span><em><span>array of objects</span></em><span> containing some of the major historical events and a </span><em><span>date object</span></em><span>, you should return the </span><em><span>name</span></em><span> of the historical event that is closest to that date.</span></p><p><span>An historical event object contains 2 properties, this is an example:</span></p><pre><code>{\n  date: '2005-08-23',\n  name: 'Hurricane Katrina'\n}</code></pre><p><span>⚠️ You can see the full array in the </span><strong><span>Tests</span></strong><span> tab.</span></p><h3><span>Examples</span></h3><pre><code>closestEvent(events, new Date(1990, 0, 1)) ➞ Fall of the Berlin Wall\n\nclosestEvent(events, new Date(2005, 0, 1)) ➞ Indian Ocean Earthquake and Tsunami Disaster\n\nclosestEvent(events, new Date()) ➞ Fukushima Nuclear Disaster</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates",
			"objects"
		],
		"tests": [
			"// The events array",
			"const events = [",
			"  { date: '2005-08-23', name: 'Hurricane Katrina' },",
			"  { date: '2004-12-26', name: 'Indian Ocean Earthquake and Tsunami Disaster' },",
			"  { date: '1989-11-09', name: 'Fall of the Berlin Wall' },",
			"  { date: '2009-01-15', name: 'Hudson River Plane Crash' },",
			"  { date: '1986-01-28', name: 'Challenger Spacecraft Explodes' },",
			"  { date: '2001-09-11', name: 'September 11 Attacks' },",
			"  { date: '1986-04-26', name: 'Chernobyl Nuclear Disaster' },",
			"  { date: '2011-03-16', name: 'Fukushima Nuclear Disaster' }",
			"];",
			"​",
			"// Tests",
			"Test.assertEquals(closestEvent(events, new Date(1970, 0, 1)),  'Challenger Spacecraft Explodes');",
			"Test.assertEquals(closestEvent(events, new Date(1986, 2, 13)), 'Challenger Spacecraft Explodes');",
			"Test.assertEquals(closestEvent(events, new Date(1986, 2, 14)), 'Chernobyl Nuclear Disaster');",
			"Test.assertEquals(closestEvent(events, new Date(1990, 0, 1)),  'Fall of the Berlin Wall');",
			"Test.assertEquals(closestEvent(events, new Date(1995, 9, 11)), 'Fall of the Berlin Wall');",
			"Test.assertEquals(closestEvent(events, new Date(1995, 9, 12)), 'September 11 Attacks');",
			"Test.assertEquals(closestEvent(events, new Date(2005, 0, 1)),  'Indian Ocean Earthquake and Tsunami Disaster');",
			"Test.assertEquals(closestEvent(events, new Date(2006, 5, 16)), 'Hurricane Katrina');",
			"Test.assertEquals(closestEvent(events, new Date(2007, 4, 12)), 'Hudson River Plane Crash');",
			"Test.assertEquals(closestEvent(events, new Date()),            'Fukushima Nuclear Disaster');"
		],
		"starterFn": [
			"1\nfunction closestEvent(events, date) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HmXdhA9WA9uLnsuiB"
	},
	{
		"title": "Sliding Sum",
		"description": "<p><span>Create a function that returns the subarrays of </span><code>n</code><span> consecutive elements from the original element that sum up to </span><code>k</code><span>. The function will have the following form: </span><code>slidingSum(arr, n, k)</code></p><p><span>To illustrate:</span></p><pre><code>slidingSum([3, 4, 1, 9, 9, 0, 3, 5, 4], 3, 8) ➞ [[3, 4, 1], [0, 3, 5]]\n// Where [3, 4, 1] and [0, 3, 5] are the only subarrays that sum to 8 with length 3.</code></pre><h3><span>Examples</span></h3><pre><code>slidingSum([1, 4, 2, 3, 5, 0], 2, 5) ➞ [[1, 4], [2, 3], [5, 0]]\n\nslidingSum([5, 5, 5, 5, 5], 1, 5) ➞ [[5], [5], [5], [5], [5]]\n\nslidingSum([5, 5, 5, 5, 5], 5, 24) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Return an empty array if no subarrays satisfy the </span><code>(n,k)</code><span> condition.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(slidingSum([1, 4, 2, 3, 5, 0], 2, 5), [[1, 4], [2, 3], [5, 0]])",
			"Test.assertSimilar(slidingSum([5, 5, 5, 5, 5], 1, 5), [[5], [5], [5], [5], [5]])",
			"Test.assertSimilar(slidingSum([5, 5, 5, 5, 5], 5, 24), [])",
			"Test.assertSimilar(slidingSum([3, 2, 1, 1, 3, 2], 4, 7), [[3, 2, 1, 1], [2, 1, 1, 3], [1, 1, 3, 2]])",
			"Test.assertSimilar(slidingSum([3, 4, 1, 9, 9, 0, 3, 5, 4], 3, 8), [[3, 4, 1], [0, 3, 5]])"
		],
		"starterFn": [
			"1\nfunction slidingSum(arr, n, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5hWPHkuDxSYjTzqKT"
	},
	{
		"title": "Cleaning Project Files",
		"description": "<p><span>You are in the midst of organizing all of your coding projects. It's a mess! Every file you've ever created is located in the same folder.</span></p><p><span>To clean it up, you've decided that you will use one of two organization methods.</span></p><ol><li><span>The </span><code>prefix</code><span> method: You will group all files with the same project name under the same folder.</span></li><li><span>The </span><code>suffix</code><span> method: You will group all files with the same extension under the same folder.</span></li></ol><p><span>Create a function that takes in the current folder sorts the files according to the organization method (</span><code>prefix</code><span> or </span><code>suffix</code><span>). A folder is a grouping of files in the same array.</span></p><h3><span>Examples</span></h3><pre><code>// Sorting by project name (ex1 and ex2)\ncleanUp([\"ex1.html\", \"ex1.js\", \"ex2.html\", \"ex2.js\"], \"prefix\") ➞ [\n  [\"ex1.html\", \"ex1.js\"],\n  [\"ex2.html\", \"ex2.js\"]\n]\n\n// Sorting by extension (.html and .js)\ncleanUp([\"ex1.html\", \"ex1.js\", \"ex2.html\", \"ex2.js\"], \"suffix\") ➞ [\n  [\"ex1.html\", \"ex2.html\"],\n  [\"ex1.js\", \"ex2.js\"]\n]\n\ncleanUp([\"music_app.js\", \"music_app.png\", \"music_app.wav\", \"tetris.png\", \"tetris.js\"], \"prefix\") ➞ [\n  [\"music_app.js\", \"music_app.png\", \"music_app.wav\"],\n  [\"tetris.png\", \"tetris.js\"]\n]\n\ncleanUp([\"_1.rb\", \"_2.rb\", \"_3.rb\", \"_4.rb\"], \"suffix\") ➞ [\n  [\"_1.rb\", \"_2.rb\", \"_3.rb\", \"_4.rb\"]\n]\n\ncleanUp([\"_1.rb\", \"_2.rb\", \"_3.rb\", \"_4.rb\"], \"prefix\") ➞ [\n  [\"_1.rb\"], [\"_2.rb\"],\n  [\"_3.rb\"], [\"_4.rb\"]\n]</code></pre><h3><span>Notes</span></h3><p><span>Keep elements in the same relative order.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(cleanUp(['music_app.js', 'music_app.png', 'music_app.wav', 'tetris.png', 'tetris.js'], 'prefix'), [['music_app.js', 'music_app.png', 'music_app.wav'], ['tetris.png', 'tetris.js']])",
			"Test.assertSimilar(cleanUp(['_1.rb', '_2.rb', '_3.rb', '_4.rb'], 'suffix'), [['_1.rb', '_2.rb', '_3.rb', '_4.rb']])",
			"Test.assertSimilar(cleanUp(['_1.rb', '_2.rb', '_3.rb', '_4.rb'], 'prefix'), [['_1.rb'], ['_2.rb'], ['_3.rb'], ['_4.rb']])",
			"Test.assertSimilar(cleanUp(['project1.html', 'project2.html', 'project1.css', 'project2.css', 'project1.js', 'project2.js'], 'suffix'), [['project1.html', 'project2.html'], ['project1.css', 'project2.css'], ['project1.js', 'project2.js']])"
		],
		"starterFn": [
			"1\nfunction cleanUp(files, sort) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pw8taSZSektvqcDS2"
	},
	{
		"title": "String to Phone Number",
		"description": "<p><span>You're able to call numbers like 1-800-flowers which replace the characters with the associated numbers on a cellular device keyboard.</span></p><h3><span>Conversion</span></h3><pre><code>abc  = 2\ndef  = 3\nghi  = 4\njkl  = 5\nmno  = 6\npqrs = 7\ntuv  = 8\nwxyz = 9</code></pre><p><span>This is your task:</span></p><ul><li><span>Create a function that takes a string as argument.</span></li><li><span>Convert all letters to numbers by using a cellular device keyboard as reference and leave any other characters in.</span></li><li><span>Return a string containing the argument with replaced letters.</span></li></ul><h3><span>Examples</span></h3><pre><code>dial(\"1-800-HOTLINEBLING\") ➞ \"1-800-468546325464\"\n\ndial(\"abc-def-ghi-jkl!!\") ➞ \"222-333-444-555!!\"\n\ndial(\"adgjmptw :)\") ➞ \"23456789 :)\"</code></pre><h3><span>Notes</span></h3><ul><li><span>While when you would write a SMS back in the day, to enter \"b\", you would have to press \"2\" twice. When calling numbers this is not the case as the range a-c gets converted to \"2\".</span></li><li><span>Given string can contain upper and lowercase letters.</span></li><li><span>Enjoy and good luck!</span></li></ul>",
		"publishedBy": "Xaotic",
		"publishedByUrl": "https://edabit.com/user/4qKLAGtHEGMr3PNYp",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"function test(entry, shouldBe) {",
			"  Test.assertEquals(dial(entry), shouldBe, \"Number \" + entry + \" not converted correctly\")",
			"}",
			"​",
			"test(\"1-800-HOTLINEBLING\", \"1-800-468546325464\", \"Incorrect Number\")",
			"test(\"hello-world!\", \"43556-96753!\", \"Incorrect Number\")",
			"test(\"aaaabcccdefggg\", \"22222222333444\", \"Incorrect Number\")",
			"test(\"01023468adghijgkmz?\", \"010234682344454569?\", \"Incorrect Number\")",
			"test(\"SwApPeDcAsE\", \"79277332273\", \"Incorrect Number\")",
			"test(\"VAPORWAVE\", \"827679283\", \"Incorrect Number\")"
		],
		"starterFn": [
			"1\nfunction dial(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2Ybd7gvXJQd5h5CMH"
	},
	{
		"title": "Ransom Letter",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if you can use the letters of the first string to create the second string. Letters are </span><strong><span>case sensitive</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>canBuild(\"aPPleAL\", \"PAL\") ➞ true\n\ncanBuild(\"aPPleAL\", \"apple\") ➞ false\n\ncanBuild(\"shortCAKE\", \"cakey\") ➞ false\n\ncanBuild(\"a\", \"\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canBuild(\"aPPleAL\", \"PAL\"), true)",
			"Test.assertEquals(canBuild(\"OAT\", \"OAT\"), true)",
			"Test.assertEquals(canBuild(\"maybelLINE\", \"maybe\"), true)",
			"Test.assertEquals(canBuild(\"topsh\", \"shop\"), true)",
			"Test.assertEquals(canBuild(\"topshSHP\", \"SHoP\"), true)",
			"Test.assertEquals(canBuild(\"DAISIES\", \"SAID\"), true)",
			"Test.assertEquals(canBuild(\"ToporP\", \"porT\"), true)",
			"Test.assertEquals(canBuild(\"PoTluCK\", \"PuCK\"), true)",
			"Test.assertEquals(canBuild(\"pATS\", \"p\"), true)",
			"Test.assertEquals(canBuild(\"blah\", \"\"), true)",
			"Test.assertEquals(canBuild(\"aPPleAL\", \"apple\"), false)",
			"Test.assertEquals(canBuild(\"shortCAKE\", \"cakey\"), false)",
			"Test.assertEquals(canBuild(\"maybeLINE\", \"lINE\"), false)",
			"Test.assertEquals(canBuild(\"teaPOT\", \"lINE\"), false)",
			"Test.assertEquals(canBuild(\"\", \"a\"), false)",
			"Test.assertEquals(canBuild(\"a\", \"aA\"), false)",
			"Test.assertEquals(canBuild(\"a\", \"A\"), false)",
			"Test.assertEquals(canBuild(\"AAAAAA\", \"AAAAAAa\"), false)",
			"Test.assertEquals(canBuild(\"apple\", \"appleY\"), false)",
			"Test.assertEquals(canBuild(\"xxYYzZ\", \"zzZxYxY\"), false)",
			"Test.assertEquals(canBuild(\"abCD\", \"aBCD\"), false)"
		],
		"starterFn": [
			"1\nfunction canBuild(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XdPy5mwG9g6J9DdEw"
	},
	{
		"title": "Repeat a Char",
		"description": "<p><span>In this challenge you should repeat a specific given char x times. Create a function that takes a string and a number as arguments and return a string.</span></p><h3><span>Examples</span></h3><pre><code>repeat(\"-\", 3) ➞ \"---\"\n\nrepeat(\"A\", 0) ➞ \"\"\n\nrepeat(\"c\", -1) ➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Tests can repeat a char 268435440 times, no more.</span></li><li><span>Repeat should be fast maximum execution time : 5 ms.</span></li><li><span>Total maximum execution time : 3800 ms.</span></li><li><span>Native repeat is forbidden.</span></li><li><span>Using of an existing repeat polyfill too (that's not the challenge objective).</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"algorithms"
		],
		"tests": [
			"const Proxy = {};",
			"​",
			"Object.defineProperty(String.prototype,\"repeat\",{  ",
			"  value: function repeat(){console.log(\"Native repeat is not allowed !\"); return \":(\"},",
			"  writable: false,",
			"  configurable: false,",
			"})",
			"​",
			"// Check time, valid string and length of string",
			"const checkRepeat = function(fct,arg1,arg2) {",
			"    var timerStart = +new Date();",
			"    var str = fct(arg1,arg2);",
			"    var timerEnd =  +new Date();",
			"    var time = (timerEnd - timerStart <= 5) ? true : false;",
			"    var strLength = str.length;",
			"    var isValidStr = true;",
			"    for (var i = 0; i < 2000;i++){",
			"        var rand = Math.floor(Math.random()*strLength);",
			"        if(str[rand] != arg1){",
			"            isValidStr = false;",
			"        }",
			"    }",
			"    console.log(\"Execution time : \"+(timerEnd - timerStart)+\" ms\");",
			"    return (time && strLength == arg2 && isValidStr);",
			"}",
			"​"
		],
		"starterFn": [
			"1\nfunction repeat(str, nb) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HQXJLmsGK9KiKmeDf"
	},
	{
		"title": "Decompose URL",
		"description": "<p><span>Create a function named that takes a string (URL) as input. Decompose the string and return an object with the following properties:</span></p><ul><li><strong><span>protocol:</span></strong><span> This is the url protocol (e.g. \"http\").</span></li><li><strong><span>ipAdress:</span></strong><span> Should contain IP address (if valid) of URL or </span><code>null</code><span>.</span></li><li><strong><span>subDomain:</span></strong><span> Should contain subDomain of URL (e.g. \"www\" or </span><code>null</code><span>).</span></li><li><strong><span>domainName:</span></strong><span> Should contain domain without subDomain (e.g. \"google.com\" or </span><code>null</code><span>).</span></li><li><strong><span>folderTree:</span></strong><span> Should contain an array of folders (e.g. \"www.google.com/test/image/index.html\" ➞ </span><code>[\"test\", \"image\"]</code><span> or </span><code>null</code><span>)</span></li><li><strong><span>targetFile:</span></strong><span> Should return targeted file.</span><ul><li><span>e.g. 1. \"www.google.com/test/image\" ➞ \"image\"</span></li><li><span>e.g. 2. \"www.google.com/test/index.html\"  ➞  \"index.html\" or </span><code>null</code></li></ul></li><li><strong><span>argumentsFile:</span></strong><span> Should return arguments of targetedFile.</span><ul><li><span>e.g. \"www.google.com/test/image?search=ok\" ➞ \"?search=ok\" or </span><code>null</code></li></ul></li></ul><h3><span>Examples</span></h3><pre><code>decomposeUrl(\"https://www.google.com/search/test.js?ok=1\") ➞ {\n  protocol: \"https\",\n  ipAdress: null,\n  subDomain: \"www\",\n  domainName: \"google.com\",\n  folderTree: (1) […],\n  targetFile: \"test.js\",\n  argumentsFile: \"?ok=1\"\n}\n\ndecomposeUrl(\"https://edabit.com/new/challenge\") ➞ {\n  protocol: \"https\",\n  ipAdress: null,\n  subDomain: null,\n  domainName: \"edabit.com\",\n  folderTree: (1) […],\n  targetFile: \"challenge\",\n  argumentsFile: null\n}\n\ndecomposeUrl(\"https://edabit.com/new/challenge/test.html\") ➞ {\n  protocol: \"https\",\n  ipAdress: null,\n  subDomain: null,\n  domainName: \"edabit.com\",\n  folderTree: (2) […],\n  targetFile: \"test.html\",\n  argumentsFile: null\n}</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"loops",
			"objects"
		],
		"tests": [
			"var t1 = {protocol:\"https\",ipAdress:null,subDomain:null,domainName:\"edabit.com\",folderTree:[\"new\",\"challenge\"],targetFile:\"test.html\",argumentsFile:null};",
			"var t2 = {protocol:\"https\",ipAdress:null,subDomain:null,domainName:\"edabit.com\",folderTree:[\"edit\",\"challenge\"],targetFile:\"bSuzdY5mYYLbuasX8\",argumentsFile:null};",
			"var t3 = {protocol:\"https\",ipAdress:null,subDomain:null,domainName:\"jsfiddle.net\",folderTree:[\"r5dq22dc\",\"99\"],targetFile:null,argumentsFile:null};",
			"var t4 = {protocol:\"https\",ipAdress:null,subDomain:\"www\",domainName:\"google.com\",folderTree:null,targetFile:\"search\",argumentsFile:\"?client=firefox-b-ab&q=popup+dela+muerte&spell=1&sa=X&ved=0ahUKEwis1r7d5uzcAhVC1xoKHSGmDNQQBQgkKAA&biw=1920&bih=944\"};",
			"var t5 = {protocol:\"https\",ipAdress:null,subDomain:\"www\",domainName:\"transparenttextures.com\",folderTree:null,targetFile:null,argumentsFile:null};",
			"var t6 = {protocol:\"https\",ipAdress:null,subDomain:\"forum\",domainName:\"joomla.fr\",folderTree:null,targetFile:\"index.html\",argumentsFile:null};",
			"var t7 = {protocol:\"https\",ipAdress:\"192.168.1.1\",subDomain:null,domainName:null,folderTree:null,targetFile:\"index.html\",argumentsFile:null};",
			"var t8 = {protocol:\"https\",ipAdress:null,subDomain:null,domainName:\"192.168.256.1\",folderTree:null,targetFile:\"index.html\",argumentsFile:null};",
			"var t9 = {protocol:\"https\",ipAdress:\"001.168.1.1\",subDomain:null,domainName:null,folderTree:null,targetFile:\"index.html\",argumentsFile:null};",
			"var t10 = {protocol:\"https\",ipAdress:\"192.1.1.1\",subDomain:null,domainName:null,folderTree:null,targetFile:\"index.html\",argumentsFile:\"?gj=true\"};",
			"var t11 = {protocol:\"file\",ipAdress:\"192.1.1.1\",subDomain:null,domainName:null,folderTree:null,targetFile:\"index.html\",argumentsFile:\"?gj=true\"};",
			"var t12 = {protocol:\"http\",ipAdress:\"192.1.1.1\",subDomain:null,domainName:null,folderTree:null,targetFile:\"index.html\",argumentsFile:\"?gj=true\"};",
			"var t13 = {protocol:\"filesLocal\",ipAdress:null,subDomain:null,domainName:\"jsfiddle.net\",folderTree:[\"r5dq22dc\",\"99\"],targetFile:null,argumentsFile:null};",
			"​",
			"Test.assertSimilar(decomposeUrl(\"https://edabit.com/new/challenge/test.html\"),t1);",
			"Test.assertSimilar(decomposeUrl(\"https://edabit.com/edit/challenge/bSuzdY5mYYLbuasX8\"),t2);",
			"Test.assertSimilar(decomposeUrl(\"https://jsfiddle.net/r5dq22dc/99/\"),t3);",
			"Test.assertSimilar(decomposeUrl(\"https://www.google.com/search?client=firefox-b-ab&q=popup+dela+muerte&spell=1&sa=X&ved=0ahUKEwis1r7d5uzcAhVC1xoKHSGmDNQQBQgkKAA&biw=1920&bih=944\"),t4);",
			"Test.assertSimilar(decomposeUrl(\"https://www.transparenttextures.com/\"),t5);",
			"Test.assertSimilar(decomposeUrl(\"https://forum.joomla.fr/index.html\"),t6);",
			"Test.assertSimilar(decomposeUrl(\"https://192.168.1.1/index.html\"),t7);",
			"Test.assertSimilar(decomposeUrl(\"https://192.168.256.1/index.html\"),t8);",
			"Test.assertSimilar(decomposeUrl(\"https://001.168.1.1/index.html\"),t9);",
			"Test.assertSimilar(decomposeUrl(\"file://192.1.1.1/index.html?gj=true\"),t11);",
			"Test.assertSimilar(decomposeUrl(\"http://192.1.1.1/index.html?gj=true\"),t12);",
			"Test.assertSimilar(decomposeUrl(\"filesLocal://jsfiddle.net/r5dq22dc/99/\"),t13);"
		],
		"starterFn": [
			"1\nfunction decomposeUrl(url) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bSuzdY5mYYLbuasX8"
	},
	{
		"title": "Decompose Address",
		"description": "<p><span>Create a function that decomposes an address string into an array of five substrings:</span></p><ol><li><span>Street Number</span></li><li><span>Street Name</span></li><li><span>City Name</span></li><li><span>State</span></li><li><span>Zip Code</span></li></ol><h3><span>Examples</span></h3><pre><code>decomposeAddress(\"557 Farmer Rd Corner, MT 59105\")\n➞ [\"557\", \"Farmer Rd\", \"Corner\", \"MT\", \"59105\"]\n\ndecomposeAddress(\"3315 Vanity St Beverly Hills, CA 90210\")\n➞ [\"3315\", \"Vanity St\", \"Beverly Hills\", \"CA\", \"90210\"]\n\ndecomposeAddress(\"8919 Scarecrow Ct Idaho Falls, ID 80193\")\n➞ [\"8919\", \"Scarecrow Ct\", \"Idaho Falls\", \"ID\", \"80193\"]</code></pre><h3><span>Notes</span></h3><p><span>All street extensions will be shortened to two-letter formats.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(decomposeAddress(\"3315 Vanity St Beverly Hills, CA 90210\"), [\"3315\", \"Vanity St\", \"Beverly Hills\", \"CA\", \"90210\"])",
			"Test.assertSimilar(decomposeAddress(\"557 Farmer Rd Corner, MT 59105\"), [\"557\", \"Farmer Rd\", \"Corner\", \"MT\", \"59105\"])",
			"Test.assertSimilar(decomposeAddress(\"8919 Scarecrow Ct Idaho Falls, ID 80193\"), [\"8919\", \"Scarecrow Ct\", \"Idaho Falls\", \"ID\", \"80193\"])",
			"Test.assertSimilar(decomposeAddress(\"91 Ronald Dr Stenton, MS 39073\"), [\"91\", \"Ronald Dr\", \"Stenton\", \"MS\", \"39073\"])",
			"Test.assertSimilar(decomposeAddress(\"25000 Meek Pl Bozerman, MT 59104\"), [\"25000\", \"Meek Pl\", \"Bozerman\", \"MT\", \"59104\"])"
		],
		"starterFn": [
			"1\nfunction decomposeAddress(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xAc7G3AzGgQzLabTe"
	},
	{
		"title": "Simon Says",
		"description": "<p><span>Simon asks you to perform operations on an array of numbers that </span><strong><span>only he tells you</span></strong><span>. You should ignore all other instructions given. Create a function which evaluates an array of commands (written in plain English) if the command begins with </span><strong><span>Simon says</span></strong><span>. Return the result as an integer.</span></p><h3><span>Examples</span></h3><pre><code>simonSays([\n  \"Simon says add 4\",\n  \"Simon says add 6\",\n  \"Then add 5\"\n]) ➞ 10\n\nsimonSays([\n  \"Susan says add 10\",\n  \"Simon says add 3\",\n  \"Simon says multiply by 8\"\n]) ➞ 24\n\nsimonSays([\n  \"Firstly, add 4\",\n  \"Simeon says subtract 100\"\n]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>If no instructions are given by Simon, return </span><code>0</code><span>.</span></li><li><span>For the sake of simplicity, there will be no command for </span><strong><span>dividing</span></strong><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(simonSays([",
			"  \"Simon says add 4\",",
			"  \"Simon says add 6\",",
			"  \"Then add 5\"",
			"]), 10)",
			"​",
			"Test.assertSimilar(simonSays([",
			"  \"Susan says add 10\",",
			"  \"Simon says add 3\",",
			"  \"Simon says multiply by 8\",",
			"]), 24)",
			"​",
			"Test.assertSimilar(simonSays([",
			"  \"Firstly, add 4\",",
			"  \"Simeon says subtract 100\"",
			"]), 0)",
			"​",
			"Test.assertSimilar(simonSays([\"Simeon says subtract 46\", \"Firstly, multiply by 3\", \"Simon says add 18\", \"Then subtract 50\", \"Next, multiply by 2\", \"Then add 17\", \"Simeon says multiply by 43\", \"Now add 13\", \"Now subtract 32\", \"Firstly, multiply by 35\", \"Simon says subtract 22\", \"Joshua says subtract 48\", \"Simon says subtract 45\", \"Simon says add 7\", \"Simon says add 25\", \"Simeon says add 13\"]), -17)",
			"Test.assertSimilar(simonSays([\"Firstly, multiply by 19\", \"Simon says add 6\", \"Next, add 29\", \"Simon says add 50\", \"Joshua says multiply by 27\"]), 56)",
			"Test.assertSimilar(simonSays([\"Now add 44\", \"Now multiply by 27\", \"Simon says multiply by 30\", \"Now subtract 4\", \"Then multiply by 45\"]), 0)",
			"Test.assertSimilar(simonSays([\"Firstly, multiply by 26\", \"Simon says add 13\", \"Simeon says add 21\"]), 13)",
			"Test.assertSimilar(simonSays([\"Now subtract 41\", \"Now add 30\", \"Simon says multiply by 46\", \"Firstly, subtract 37\", \"Now multiply by 6\", \"Then multiply by 19\", \"Simon says add 23\", \"Simon says subtract 28\"]), -5)",
			"Test.assertSimilar(simonSays([\"Sarah says subtract 36\", \"Sieon says add 25\", \"Now add 24\", \"Sarah says add 27\", \"Then multiply by 8\", \"Firstly, add 35\", \"Sarah says add 21\"]), 0)",
			"Test.assertSimilar(simonSays([\"Simon says subtract 19\", \"Firstly, subtract 26\", \"Now add 48\", \"Then subtract 22\", \"Now subtract 15\", \"Then add 1\", \"Simon says add 28\", \"Firstly, multiply by 22\", \"Then add 44\", \"Simeon says multiply by 16\", \"Then multiply by 50\", \"Simon says subtract 26\", \"Firstly, add 49\"]), -17)",
			"Test.assertSimilar(simonSays([\"Now add 48\", \"Simeon says subtract 30\", \"Firstly, subtract 46\", \"Simon says subtract 21\", \"Sieon says add 32\", \"Joshua says add 45\", \"Now subtract 4\", \"Then multiply by 5\", \"Next, add 36\"]), -21)",
			"Test.assertSimilar(simonSays([\"Next, subtract 2\", \"Simon says add 32\", \"Then multiply by 46\", \"Sarah says multiply by 3\", \"Firstly, multiply by 3\", \"Simon says subtract 32\"]), 0)"
		],
		"starterFn": [
			"1\nfunction simonSays(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DxAhwhR3cxiHK9E4d"
	},
	{
		"title": "KixCodes in the Netherlands",
		"description": "<p><span>In The Netherlands we have PostNL, the postal company. They use KixCodes, it's a fast way to deliver letters and packages that can be scanned during the process.</span></p><p><img alt=\"Kix Code\" src=\"https://www.postnl.nl/Images/KIX-code-van-PostNL_tcm10-8633.gif\"></p><p><span>The code is a combination of:\n</span><code>Postal code</code><span>, </span><code>House/box/call number</code><span> and </span><code>House appendage / suffix</code></p><p><span>If there is a character between the house number and the suffix, we need to replace that with an </span><code>X</code><span>. Eventually, the code will be printed in the KixCode font.</span></p><h3><span>Examples</span></h3><pre><code>kixCode(`PostNL, Postbus 30250, 2500 GG ’s Gravenhage`) ➞ `2500GG30250`\n\nkixCode(`Liesanne B Wilkens, Kogge 11-1, 1657 KA Abbekerk`) ➞ `1657KA11X1`\n\nkixCode(`Dijk, Antwoordnummer 80430, 2130 VA Hoofddorp`) ➞ `2130VA80430`</code></pre><h3><span>Notes</span></h3><ul><li><span>Your function will get an address line (string) separated by comma's.</span></li><li><span>The input format will always be the same.</span></li><li><span>Watch out for the different suffixes!</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"regex"
		],
		"tests": [
			"Test.assertEquals(kixCode(\"PostNL, Postbus 30250, 2500 GG 's Gravenhage\"), \"2500GG30250\")",
			"Test.assertEquals(kixCode(\"De Jong, Havendijk 13 hs, 1231 FZ POSTDAM\"), \"1231FZ13XHS\")",
			"Test.assertEquals(kixCode(\"B. Bartelds, Boerheem 46, 9421 MC Bovensmilde\"), \"9421MC46\")",
			"Test.assertEquals(kixCode(\"Huisman, Koninginneweg 182 B, 3331 CH Zwijndrecht\"), \"3331CH182XB\")",
			"Test.assertEquals(kixCode(\"Liesanne B Wilkens, Kogge 11-1, 1657 KA Abbekerk\"), \"1657KA11X1\")",
			"Test.assertEquals(kixCode(\"Dijk, Antwoordnummer 80430, 2130 VA Hoofddorp\"), \"2130VA80430\")",
			"Test.assertEquals(kixCode(\"Van Eert, Dirk van Heinsbergstraat 200-A, 5575 BM Luyksgestel\"), \"5575BM200XA\")",
			"Test.assertEquals(kixCode(\"B.C. Dieker, Korhoenlaan 130b, 3847 LN Harderwijk\"), \"3847LN130B\")",
			"Test.assertEquals(kixCode(\"Mahir F Schipperen, IJsselmeerlaan 31, 8304 DE Emmeloord\"), \"8304DE31\")",
			"Test.assertEquals(kixCode(\"Jet de Wit, Wielingenstraat 129/7, 3522 PG Utrecht\"), \"3522PG129X7\")"
		],
		"starterFn": [
			"1\nfunction kixCode(addr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/o5zmKhLucmgnqBmWy"
	},
	{
		"title": "Mangle the String",
		"description": "<p><span>Create a function that takes a string and replaces every letter with the letter following it in the alphabet (\"c\" becomes \"d\", \"z\" becomes \"a\", \"b\" becomes \"c\", etc). Then capitalize every vowel (a, e, i, o, u) and return the new modified string.</span></p><h3><span>Examples</span></h3><pre><code>mangle(\"Fun times!\") ➞ \"GvO Ujnft!\"\n\nmangle(\"The quick brown fox.\") ➞ \"UIf rvjdl cspxO gpy.\"\n\nmangle(\"Omega\") ➞ \"Pnfhb\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If a letter is </span><strong><span>already uppercase</span></strong><span>, return it as uppercase (regardless of being a vowel).</span></li><li><span>\"y\" is not considered a vowel.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(mangle(\"Fun times!\"), \"GvO Ujnft!\")",
			"Test.assertEquals(mangle(\"The quick brown fox.\"), \"UIf rvjdl cspxO gpy.\")",
			"Test.assertEquals(mangle(\"Omega\"), \"Pnfhb\")",
			"Test.assertEquals(mangle(\"I will never be this young again. Ever. Oh damn… I just got older.\"), \"J xjmm Ofwfs cf UIjt zpvOh bhbjO. Fwfs. PI EbnO… J kvtU hpU pmEfs.\")",
			"Test.assertEquals(mangle(\"Should we start class now, or should we wait for everyone to get here?\"), \"TIpvmE xf tUbsU dmbtt Opx, ps tIpvmE xf xbjU gps fwfszpOf Up hfU Ifsf?\")",
			"Test.assertEquals(mangle(\"Check back tomorrow; I will see if the book has arrived.\"), \"DIfdl cbdl Upnpsspx; J xjmm tff jg UIf cppl Ibt bssjwfE.\")",
			"Test.assertEquals(mangle(\"The lake is a long way from here.\"), \"UIf mblf jt b mpOh xbz gspn Ifsf.\")",
			"Test.assertEquals(mangle(\"It was getting dark, and we weren’t there yet.\"), \"JU xbt hfUUjOh Ebsl, bOE xf xfsfO’U UIfsf zfU.\")",
			"Test.assertEquals(mangle(\"The mysterious diary records the voice.\"), \"UIf nztUfsjpvt Ejbsz sfdpsEt UIf wpjdf.\")",
			"Test.assertEquals(mangle(\"Cats are good pets, for they are clean and are not noisy.\"), \"DbUt bsf hppE qfUt, gps UIfz bsf dmfbO bOE bsf OpU Opjtz.\")",
			"Test.assertEquals(mangle(\"abcz\"), \"bcdA\", \"Don't forget that \\\"z\\\" becomes \\\"a\\\"!\")",
			"Test.assertEquals(mangle(\"ABCZ\"), \"BCDA\", \"If a letter is already uppercase, return it as uppercase.\")"
		],
		"starterFn": [
			"1\nfunction mangle(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yLqEK5hZ8SGYe5TNR"
	},
	{
		"title": "Postfix Notation",
		"description": "<p><span>Postfix notation is a mathematical notation in which operators follow their operands. In other words, </span><code>pfexp1 pfexp2 op</code><span>, where </span><code>pfexp1</code><span> and </span><code>pfexp2</code><span> are both postfix expressions.</span></p><p><span>Some examples:</span></p><ul><li><code>2 2 +</code><span> is the postfix notation of the expression </span><code>2 + 2</code><span>.</span></li><li><code>2 3 * 1 - 5 /</code><span> is the postfix notation of the expression </span><code>((2 * 3) - 1) / 5</code><span>.</span></li></ul><p><span>Here you have to compute the result from a postfix expression.</span></p><h3><span>Examples</span></h3><pre><code>postfix(\"2 2 +\") ➞ 4\n// 2 + 2 = 4\n\npostfix(\"2 3 * 1 - 5 /\") ➞ 1\n// ((2 * 3) - 1) / 5 = (6 - 1) / 5 = 5 / 5 = 1</code></pre><h3><span>Note</span></h3><ul><li><span>Operators and operands are separated by a space.</span></li><li><span>The operators </span><code>+, -, *, /</code><span> may be supported.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(postfix(\"2 2 +\"), 4, \"See example #1\")",
			"Test.assertEquals(postfix(\"2 3 * 1 - 5 /\"), 1, \"See example #2\")",
			"Test.assertEquals(postfix(\"5\"), 5)",
			"Test.assertEquals(postfix(\"10 10 * 10 /\"), 10)",
			"Test.assertEquals(postfix(\"5 6 * 2 1 + /\"), 10)",
			"Test.assertEquals(postfix(\"1 1 + 2 2 + -\"), -2)",
			"Test.assertEquals(postfix(\"8 4 / 9 * 3 1 * /\"), 6)"
		],
		"starterFn": [
			"1\nfunction postfix(expr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JxM8RyFw42TraEyfN"
	},
	{
		"title": "Filter Items from an Array",
		"description": "<p><span>Create a function that takes two parameters:</span></p><ol><li><span>An array with items ranging from numbers and strings.</span></li><li><span>An array with items ranging from numbers, strings and and anonymous function.</span></li></ol><p><span>The function should return only the items from the first array that satisfies the anonymous function present in the second array.</span></p><h3><span>Detail</span></h3><pre><code>#filterArray([1, 2, 3, 4], [100, (num) =&gt; num % 2 === 0]) ➞ [2, 4]\n\n# 2 and 4 from [1, 2, 3, 4] satisifies  anonymous function in the second array.\n# (num) =&gt; num % 2 === 0          2 % 2 === 0 and 4 % 2 === 0\n# 1 and 3 do not satisfy (num) =&gt; num % 2 === 0</code></pre><h3><span>Examples</span></h3><pre><code> filterArray([1, 2, 3, 4], [1, 2, (num) =&gt; num % 2 === 0]) ➞ [2 , 4]\n\n filterArray([1, 2, 3, 4, 5], [1, 2, (num) =&gt; num % 2 === 1,\"eon\",\"epoch\"]) ➞ [1, 3, 5]\n\n filterArray([\"apple\", \"kiwi\"], [2, (txt) =&gt; txt.indexOf(\"a\") &gt; -1]) ➞ [\"apple\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Inputs are always two arrays.</span></li><li><span>There is always only one anonymous function in the second array that needs to be checked with the item in the first array.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(filterArray([1,2,3,4,5],[1,2, (num) => num % 2 === 1]),[1, 3, 5])",
			"Test.assertSimilar(filterArray([1,2,3,4,5],[(num) => num % 2 === 1],\"\"),[1, 3, 5]) ",
			"Test.assertSimilar(filterArray([\"apple\",\"kiwi\",\"grape\"],[2,(txt) => txt.indexOf(\"a\")>-1],12),[\"apple\",\"grape\"]) ",
			"Test.assertSimilar(filterArray([\"nepal\",\"radar\",\"madam\",\"civic\"],[(txt) => txt === [...txt].reverse().join(\"\")]),[\"radar\",\"madam\",\"civic\"])",
			"Test.assertSimilar(filterArray([\"balkot\",\"naxal\",\"dalu\",\"gwarko\"],[1,2, (txt) => txt.length > 4,\"a\",\"b\"]),[\"balkot\",\"naxal\",\"gwarko\"])"
		],
		"starterFn": [
			"1\nfunction filterArray(arr1, arr2){",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QdiAZBBr59u5PXJaM"
	},
	{
		"title": "Simplifying to Simplest Ratio",
		"description": "<p><span>Create a function which </span><em><span>simplifies</span></em><span> a given </span><strong><span>fraction</span></strong><span> into its </span><strong><span>simplest ratio</span></strong><span>. Return the fraction as a </span><em><span>string</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>simplifyFrac(\"2/4\") ➞ \"1/2\"\n\nsimplifyFrac(\"15/25\") ➞ \"3/5\"\n\nsimplifyFrac(\"4/9\") ➞ \"4/9\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Fractions are given as strings.</span></li><li><span>Return the same fraction if it is already in its simplified ratio (see example #3).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(simplifyFrac(\"2/4\"), \"1/2\")",
			"Test.assertEquals(simplifyFrac(\"15/25\"), \"3/5\")",
			"Test.assertEquals(simplifyFrac(\"4/9\"), \"4/9\")",
			"Test.assertEquals(simplifyFrac(\"15/48\"), \"5/16\")",
			"Test.assertEquals(simplifyFrac(\"8/41\"), \"8/41\")",
			"Test.assertEquals(simplifyFrac(\"13/94\"), \"13/94\")",
			"Test.assertEquals(simplifyFrac(\"9/95\"), \"9/95\")",
			"Test.assertEquals(simplifyFrac(\"8/69\"), \"8/69\")",
			"Test.assertEquals(simplifyFrac(\"4/31\"), \"4/31\")",
			"Test.assertEquals(simplifyFrac(\"13/8\"), \"13/8\")",
			"Test.assertEquals(simplifyFrac(\"7/86\"), \"7/86\")",
			"Test.assertEquals(simplifyFrac(\"19/75\"), \"19/75\")",
			"Test.assertEquals(simplifyFrac(\"10/44\"), \"5/22\")",
			"Test.assertEquals(simplifyFrac(\"1/93\"), \"1/93\")",
			"Test.assertEquals(simplifyFrac(\"17/23\"), \"17/23\")",
			"Test.assertEquals(simplifyFrac(\"20/80\"), \"1/4\")",
			"Test.assertEquals(simplifyFrac(\"12/13\"), \"12/13\")",
			"Test.assertEquals(simplifyFrac(\"8/51\"), \"8/51\")",
			"Test.assertEquals(simplifyFrac(\"8/29\"), \"8/29\")",
			"Test.assertEquals(simplifyFrac(\"20/41\"), \"20/41\")",
			"Test.assertEquals(simplifyFrac(\"2/75\"), \"2/75\")",
			"Test.assertEquals(simplifyFrac(\"20/24\"), \"5/6\")",
			"Test.assertEquals(simplifyFrac(\"13/22\"), \"13/22\")",
			"Test.assertEquals(simplifyFrac(\"4/15\"), \"4/15\")",
			"Test.assertEquals(simplifyFrac(\"9/29\"), \"9/29\")",
			"Test.assertEquals(simplifyFrac(\"17/83\"), \"17/83\")"
		],
		"starterFn": [
			"1\nfunction simplifyFrac(f) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cAvXoLephroL2dKRp"
	},
	{
		"title": "Read The Abacus (Part 2: Japanese Soroban)",
		"description": "<p><span>The Japanese </span><em><span>soroban</span></em><span> is type of abacus (counting tool) that is used by sliding threaded beads up and down wires. The soroban is divided into an upper deck (where each bead is worth 5 units) and a lower deck (where beads are worth 1 unit). Working from the right and moving to the left, units increase by a factor of 10. If we use \"O\" for a bead and \"|\" to show the wire, we can represent the soroban as follows:</span></p><pre><code>OOOOOOO\n|||||||  Upper deck\n-------  Dividing line\n|||||||  Lower deck\nOOOOOOO\nOOOOOOO\nOOOOOOO\nOOOOOOO</code></pre><p><span>To read the number, we count the value of the number of beads that have been moved </span><em><span>towards</span></em><span> the dividing line. The values for the upper and lower deck are added together. In the example below, the number is </span><strong><span>30651</span></strong><span>:</span></p><pre><code>OOOO||O\n||||OO|\n-------\n||O|O|O\nOOOO|O|\nOOOOOOO\nOO|OOOO\nOOOOOOO\n\n0000550  Upper deck\n0030101  Lower deck\n  30651  Total</code></pre><p><span>Given an array of strings representing the soroban, return the </span><em><span>number</span></em><span> being displayed.</span></p><h3><span>Examples</span></h3><pre><code>soroban([\n  \"OOOO||O\",\n  \"||||OO|\",\n  \"-------\",\n  \"|||O|OO\",\n  \"OOOOOOO\",\n  \"OOO|OOO\",\n  \"OOOOO|O\",\n  \"OOOOOO|\"\n]) ➞ 2584\n\nsoroban([\n  \"||OO||O\",\n  \"OO||OO|\",\n  \"-------\",\n  \"OO|OO||\",\n  \"OOO|OOO\",\n  \"OOOO|OO\",\n  \"|OOOOOO\",\n  \"O|OOOOO\"\n]) ➞ 8901750</code></pre><h3><span>Notes</span></h3><p><span>For more info on how to use a soroban, please check the </span><strong><span>Resources</span></strong><span> tab.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(soroban(['|O|O|O|', 'O|O|O|O', '-------', '||O|OO|', 'OOOO||O', 'OO|OOOO', 'OOOOOOO', 'OOOOOOO']), 5070615)",
			"Test.assertEquals(soroban(['OOO||OO', '|||OO||', '-------', 'OOOOO||', 'OOO||OO', 'OO|OOOO', 'OOOOOOO', '||OOOOO']), 4426600)",
			"Test.assertEquals(soroban(['|O|O|OO', 'O|O|O||', '-------', 'OO||||O', 'O|OOOOO', '|OOOOOO', 'OOOOOO|', 'OOOOOOO']), 7150503)",
			"Test.assertEquals(soroban(['|OOO|OO', 'O|||O||', '-------', '|||OO|O', 'OOOO|OO', 'OOO|OOO', 'OOOOOOO', 'OOOOOO|']), 5002604)",
			"Test.assertEquals(soroban(['O|OOO|O', '|O|||O|', '-------', 'OOO|OO|', '|OOOOOO', 'OO|OOOO', 'O|OOO|O', 'OOOO|OO']), 1820480)",
			"Test.assertEquals(soroban(['OOO|OO|', '|||O||O', '-------', 'OOOOO|O', '|OOO|O|', 'OO|OOOO', 'OOO|OOO', 'O|OOOOO']), 1428106)",
			"Test.assertEquals(soroban(['OOOOOOO', '|||||||', '-------', '||OO|OO', 'OO|OO|O', 'OOOOOOO', 'OOO|OOO', 'OOOOOO|']), 13014)",
			"Test.assertEquals(soroban(['|OOO|||', 'O|||OOO', '-------', 'O||OOOO', 'OOOOOOO', 'OOOOO|O', '|OO||O|', 'OOOOOOO']), 8003878)",
			"Test.assertEquals(soroban(['O|OOOOO', '|O|||||', '-------', '||OO|||', 'OOOOOOO', 'OOOOOOO', 'OO|OOOO', 'OOO|OOO']), 534000)",
			"Test.assertEquals(soroban(['OOOO|||', '||||OOO', '-------', '|OO||OO', 'OOOOOOO', 'OOOOOO|', 'OO|OO|O', 'O|OOOOO']), 430587)",
			"Test.assertEquals(soroban(['OOO|||O', '|||OOO|', '-------', '||OOOO|', 'OOOOOOO', 'OOOOO|O', 'OO|OOOO', 'OOO||OO']), 39970)",
			"Test.assertEquals(soroban(['O||OO||', '|OO||OO', '-------', 'OO|OOO|', 'O|OOOOO', 'OOOOOOO', 'OOOO|OO', '|OO|O|O']), 4654395)",
			"Test.assertEquals(soroban(['OOO|OO|', '|||O||O', '-------', '|||OO||', 'OOOOOOO', 'OOO|OOO', 'OOOOOOO', 'OOOO|OO']), 7405)",
			"Test.assertEquals(soroban(['|O|OOOO', 'O|O||||', '-------', 'OO|OO|O', '|OOOOOO', 'OOO||OO', 'OOOOOOO', 'O|OOOO|']), 6452204)",
			"Test.assertEquals(soroban(['O|OO|O|', '|O||O|O', '-------', 'OOOOO|O', 'OOOOOO|', '||O||OO', 'OOOOOOO', 'OO|OOOO']), 2742706)",
			"Test.assertEquals(soroban(['OO|OOOO', '||O||||', '-------', 'OO|O|||', 'OOOOOOO', 'O|OOOOO', 'OOOOOOO', '|OO|OOO']), 4254000)",
			"Test.assertEquals(soroban(['|OOOOO|', 'O|||||O', '-------', 'OOOOO|O', 'O|OOOO|', '|OOOOOO', 'OOOO|OO', 'OO||OOO']), 7144306)",
			"Test.assertEquals(soroban(['OO|OO||', '||O||OO', '-------', 'O|||O|O', 'OOOOOOO', '|OOOOOO', 'OOOO|O|', 'OOOOOOO']), 2050358)",
			"Test.assertEquals(soroban(['||O|OOO', 'OO|O|||', '-------', 'O||||OO', '|OOOOOO', 'OOOOOO|', 'OOOOO|O', 'OOOOOOO']), 6505032)",
			"Test.assertEquals(soroban(['|OOOO|O', 'O||||O|', '-------', '|O||OO|', 'OOOOOOO', 'O|OOOOO', 'OOOOOOO', 'OOOO||O']), 5200490)"
		],
		"starterFn": [
			"1\nfunction soroban(frame) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rCBGDCTmDMypW6LLa"
	},
	{
		"title": "Working 9 to 5",
		"description": "<p><span>Write a function that calculates overtime and pay associated with overtime.</span></p><ul><li><span>Working 9 to 5: regular hours</span></li><li><span>After 5pm is overtime</span></li></ul><p><span>Your function gets an array with 4 values:</span></p><ul><li><span>Start of working day, in decimal format, (24-hour day notation)</span></li><li><span>End of working day. (Same format)</span></li><li><span>Hourly rate</span></li><li><span>Overtime multiplier</span></li></ul><p><span>Your function should spit out:</span></p><ul><li><code>$</code><span> + earned that day (rounded to the nearest hundreth)</span></li></ul><h3><span>Examples</span></h3><pre><code>overTime([9, 17, 30, 1.5]) ➞ \"$240.00\"\n\noverTime([16, 18, 30, 1.8]) ➞ \"$84.00\"\n\noverTime([13.25, 15, 30, 1.5]) ➞ \"$52.50\"</code></pre><p><span>2nd example explained:</span></p><ul><li><span>From 16 to 17 is regular, so </span><code>1 * 30</code><span> = 30</span></li><li><span>From 17 to 18 is overtime, so </span><code>1 * 30 * 1.8</code><span> = 54</span></li><li><code>30 + 54</code><span> = $84.00</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(overTime([9, 17, 30, 1.5]), \"$240.00\")",
			"Test.assertEquals(overTime([9, 18, 40, 2]), \"$400.00\")",
			"Test.assertEquals(overTime([13, 20, 32.5, 2]), \"$325.00\")",
			"Test.assertEquals(overTime([9, 13, 25, 1.5]), \"$100.00\")",
			"Test.assertEquals(overTime([11.5, 19, 40, 1.8]), \"$364.00\")",
			"Test.assertEquals(overTime([10, 17, 30, 1.5]), \"$210.00\")",
			"Test.assertEquals(overTime([10.5, 17, 32.25, 1.5]), \"$209.63\")",
			"Test.assertEquals(overTime([16, 18, 30, 1.8]), \"$84.00\")",
			"Test.assertEquals(overTime([18, 20, 32.5, 2]), \"$130.00\")",
			"Test.assertEquals(overTime([13.25, 15, 30, 1.5]), \"$52.50\")",
			"Test.assertEquals(overTime([13, 21, 38.6, 1.8]), \"$432.32\")"
		],
		"starterFn": [
			"1\nfunction overTime(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kYwxQo9tqLpFYTMY6"
	},
	{
		"title": "Find the Bug: Annual Price and Deposit Increasement",
		"description": "<p><span>The annual price increasement needs to be done and we have written a script to migrate a product. An object needs to be returned with the old product and the new migrated product for pricing history records.</span></p><p><span>All prices need to raised by 15% and the deposit of bottles is increased from $0.15 to $0.20.</span></p><p><span>During the tests the old product seems to be the new product as well. Something is not working like expected.</span></p><h3><span>Expected result</span></h3><pre><code>migrateProduct({\n  product: \"Milk\",\n  price: 1.2,\n  containers: [\n    { type: \"bottle\", deposit: 0.15, liters: 1.5 },\n    { type: \"can\", deposit: 0.1, liters: 0.33 },\n    { type: \"carton\", deposit: null, liters: 1 }\n  ]\n}) ➞ {\n  oldProduct: {\n    product: \"Milk\",\n    price: 1.2,\n    containers: [\n      { type: \"bottle\", deposit: 0.15, liters: 1.5 },\n      { type: \"can\", deposit: 0.1, liters: 0.33 },\n      { type: \"carton\", deposit: null, liters: 1 }\n    ]\n  },\n  newProduct: {\n    product: \"Milk\",\n    price: 1.38,\n    containers: [\n      { type: \"bottle\", deposit: 0.2, liters: 1.5 },\n      { type: \"can\", deposit: 0.1, liters: 0.33 },\n      { type: \"carton\", deposit: null, liters: 1 }\n    ]\n  }\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>JSON </span><a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\"><span>object functions</span></a><span> may not be used due to performance issues.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for tips!  :)</span></li></ul>",
		"publishedBy": "Allard",
		"publishedByUrl": "https://edabit.com/user/d2oMpeLcNGNtnab8n",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"language_fundamentals",
			"objects"
		],
		"tests": [
			"Test.assertDeepEquals(migrateProduct({",
			"  product: 'Milk',",
			"  price: 1.2,",
			"  containers: [",
			"    { type: 'bottle', deposit: 0.15, liters: 1.5 },",
			"    { type: 'can', deposit: 0.1, liters: 0.33 },",
			"    { type: 'carton', deposit: null, liters: 1 }",
			"  ]",
			"}), {",
			"  oldProduct: {",
			"    product: 'Milk',",
			"    price: 1.2,",
			"    containers: [",
			"      { type: 'bottle', deposit: 0.15, liters: 1.5 },",
			"      { type: 'can', deposit: 0.1, liters: 0.33 },",
			"      { type: 'carton', deposit: null, liters: 1 }",
			"    ]",
			"  },",
			"  newProduct: {",
			"    product: 'Milk',",
			"    price: 1.38,",
			"    containers: [",
			"      { type: 'bottle', deposit: 0.2, liters: 1.5 },",
			"      { type: 'can', deposit: 0.1, liters: 0.33 },",
			"      { type: 'carton', deposit: null, liters: 1 }",
			"    ]"
		],
		"starterFn": [
			"1\nfunction migrateProduct(oldProduct) {",
			"2\n  const newProduct = oldProduct",
			"3\n  newProduct.price *= 1.15",
			"4\n  newProduct.containers = newProduct.containers.map((container => {",
			"5\n    if (container.type === 'bottle') {",
			"6\n      container.deposit = 0.20",
			"7\n    }",
			"8\n    return container",
			"9\n  }))",
			"10\n  ",
			"11\n  return { oldProduct, newProduct }",
			"12\n}"
		],
		"url": "https://edabit.com/challenge/5zyJ7DunEikvzcWzf"
	},
	{
		"title": "Broken Bridge",
		"description": "<p><span>A broken bridge can be represented by </span><code>1</code><span>s and </span><code>0</code><span>s, where contiguous </span><code>0</code><span>s represent holes. You can walk across a bridge with a hole with a maximum width of 1, but any holes bigger than that you must fix first. For example, the bridge below is walkeable:</span></p><pre><code>[1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1]</code></pre><p><span>This bridge is not:</span></p><pre><code>[1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</code></pre><p><span>You own several wooden planks, each with different widths. You can patch the holes on the bridge with these planks. More specifically, a plank size </span><code>n</code><span> can fill a </span><code>n</code><span>-sized hole. If you had a plank of size </span><code>2</code><span>, the un-walkeable bridge above could be filled in:</span></p><pre><code>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</code></pre><p><span>But even if you only had a plank of size </span><code>1</code><span>, you could still transform the unwalkeable bridge into a walkeable one:</span></p><pre><code>[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</code></pre><p><span>Write a function that takes in a broken bridge, an array of plank sizes, and returns </span><code>true</code><span> if the bridge can be patched up enough to walk over, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>canPatch([1, 0, 0, 0, 0, 0, 0, 1], [5, 1, 2]) ➞ true\n// You can use the 5 plank to transform the 6 hole to a 1 hole.\n// Leftover planks [1, 2] are okay.\n\ncanPatch([1, 0, 0, 0, 0, 0, 0, 1], [4, 1, 2, 3, 4]) ➞ false\n// None of your planks are long enough (you can't combine them).\n\ncanPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 2]) ➞ true\n\ncanPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 1]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Individual planks may NOT be combined to form a longer plank.</span></li><li><span>Leftover planks are okay.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canPatch([1, 0, 0, 1], [1]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1], [1, 2]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1], []), false)",
			"Test.assertEquals(canPatch([1, 0, 1, 1], []), true)",
			"Test.assertEquals(canPatch([1, 0, 1, 0, 1, 0, 1, 0, 1], []), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 0, 0, 0, 0, 1], [5, 1, 2]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 0, 0, 0, 0, 1], [4, 1, 2, 3, 4]), false)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1]), false)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 1, 1]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 2]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 1, 0, 0, 0, 1], [1, 1]), false)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1], [1, 1]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 3, 1]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 3, 1, 5, 5]), true)",
			"Test.assertEquals(canPatch([1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1], [1, 2, 2]), false)"
		],
		"starterFn": [
			"1\nfunction canPatch(bridge, planks) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tQNGydfWqZueRgmDC"
	},
	{
		"title": "Validating a Set in the Set Game",
		"description": "<p><span>In the game </span><strong><span>Set</span></strong><span>, </span><strong><span>three cards form a set</span></strong><span> if each of the cards are identical or completely different for each of the </span><strong><span>four properties</span></strong><span>. All three cards must:</span></p><ol><li><span>Have the </span><strong><span>same color</span></strong><span>  or </span><strong><span>different colors</span></strong><span>.</span></li><li><span>Have the </span><strong><span>same number</span></strong><span> or </span><strong><span>different numbers</span></strong><span>.</span></li><li><span>Have the </span><strong><span>same shades</span></strong><span> or </span><strong><span>different shades</span></strong><span>.</span></li><li><span>Have the </span><strong><span>same shape</span></strong><span> or </span><strong><span>different shapes</span></strong><span>.</span></li></ol><p><span>The four properties are:</span></p><ol><li><span>Colors: red, purple, green</span></li><li><span>Numbers: 1, 2, 3</span></li><li><span>Shades: empty, lined, full</span></li><li><span>Shapes: squiggle, oval, diamond</span></li></ol><p><span>Here, a set is represented by an array containing three cards. Each card is represented by an object of properties and values. Write a function that determines whether three cards constitute a valid set.</span></p><p><span>Here is an example of a </span><strong><span>set</span></strong><span>:</span></p><pre><code>[\n  { color: \"red\", number: 1, shade: \"empty\", shape: \"squiggle\" },\n  { color: \"red\", number: 2, shade: \"lined\", shape: \"diamond\" },\n  { color: \"red\", number: 3, shade: \"full\", shape: \"oval\" }\n]\n\n// \"Same\" properties: color\n// \"Different\" properties: numbers, shading and shapes</code></pre><p><span>The following is  </span><strong><span>not a set</span></strong><span>:</span></p><pre><code>[\n  { color: \"red\", number: 1, shade: \"empty\", shape: \"squiggle\" },\n  { color: \"red\", number: 2, shade: \"lined\", shape: \"diamond\" },\n  { color: \"purple\", number: 3, shade: \"full\", shape: \"oval\" }\n]\n\n// Colors are not all identical, but not all different.</code></pre><h3><span>Examples</span></h3><pre><code>isSet([\n  { color: \"green\", number: 1, shade: \"empty\", shape: \"squiggle\" },\n  { color: \"green\", number: 2, shade: \"empty\", shape: \"diamond\" },\n  { color: \"green\", number: 3, shade: \"empty\", shape: \"oval\" }\n]) ➞ true\n\nisSet([\n  { color: \"purple\", number: 1, shade: \"full\", shape: \"oval\" },\n  { color: \"green\", number: 1, shade: \"full\", shape: \"oval\" },\n  { color: \"red\", number: 1, shade: \"full\", shape: \"oval\" }\n]) ➞ true\n\nisSet([\n  { color: \"purple\", number: 3, shade: \"full\", shape: \"oval\" },\n  { color: \"green\", number: 1, shade: \"full\", shape: \"oval\" },\n  { color: \"red\", number: 3, shade: \"full\", shape: \"oval\" }\n]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>A set cannot have 2/3 cards having the same property. Either all must share that property, or none will share that particular property.</span></li><li><span>You can play Set by checking the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"games",
			"objects",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isSet(",
			"[{color: \"red\", number: 1, shade: \"lined\", shape: \"squiggle\"}, ",
			"{color: \"red\", number: 1, shade: \"lined\", shape: \"diamond\"}, ",
			"{color: \"red\", number: 1, shade: \"lined\", shape: \"squiggle\"}]",
			"), false)",
			"​",
			"Test.assertEquals(isSet(",
			"[{color: \"red\", number: 1, shade: \"lined\", shape: \"squiggle\"}, ",
			"{color: \"red\", number: 1, shade: \"lined\", shape: \"diamond\"}, ",
			"{color: \"red\", number: 1, shade: \"lined\", shape: \"oval\"}]",
			"), true)",
			"​",
			"Test.assertEquals(isSet(",
			"[{color: \"red\", number: 1, shade: \"empty\", shape: \"squiggle\"}, ",
			"{color: \"red\", number: 1, shade: \"lined\", shape: \"diamond\"}, ",
			"{color: \"red\", number: 1, shade: \"lined\", shape: \"oval\"}]",
			"), false)",
			"​",
			"Test.assertEquals(isSet(",
			"[{color: \"red\", number: 1, shade: \"empty\", shape: \"squiggle\"}, ",
			"{color: \"red\", number: 2, shade: \"lined\", shape: \"diamond\"}, ",
			"{color: \"red\", number: 3, shade: \"full\", shape: \"oval\"}]",
			"), true)",
			"​",
			"Test.assertEquals(isSet(",
			"[{color: \"green\", number: 1, shade: \"empty\", shape: \"squiggle\"}, "
		],
		"starterFn": [
			"1\nfunction isSet(cards) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/278bzxEFeTKNiKXfM"
	},
	{
		"title": "New Numbers",
		"description": "<p><span>A new number is a number that is not a permutation of any smaller number.  869 is </span><strong><span>not</span></strong><span> a new number because it is just a permutation of smaller numbers, 689 and 698. 509 is a new number because it can't be formed by a permutation of any smaller number (leading zeros not allowed).</span></p><p><span>Write a function that takes a non-negative integer and returns </span><code>true</code><span> if the integer is a new number and </span><code>false</code><span> if it is not.</span></p><h3><span>Examples</span></h3><pre><code>isNew(3) ➞ true\n\nisNew(30) ➞ true\n\nisNew(321) ➞ false\n\nisNew(123) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>A curious fact: out of the first one million integers, only 8002 are new.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isNew(0), true)",
			"Test.assertEquals(isNew(90), true)",
			"Test.assertEquals(isNew(601), false) ",
			"Test.assertEquals(isNew(123), true)",
			"Test.assertEquals(isNew(321), false)",
			"Test.assertEquals(isNew(40567), true)",
			"Test.assertEquals(isNew(10783), false)",
			"Test.assertEquals(isNew(4444), true)",
			"Test.assertEquals(isNew(102), true)",
			"Test.assertEquals(isNew(30004), true)",
			"Test.assertEquals(isNew(40003), false)",
			"Test.assertEquals(isNew(125609), false)",
			"Test.assertEquals(isNew(23401), false)"
		],
		"starterFn": [
			"1\nfunction isNew(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dydxdTCEpELGMRWeB"
	},
	{
		"title": "Epidemiology: the Chi-Squared Test",
		"description": "<p><span>The Edabit Medical Industries are developing a new drug, the </span><em><span>Edabitin™</span></em><span>, which will (hopefully) increase the programming skills of patients. Various tests are carried out on different programmers: for a week some are given the </span><em><span>Edabitin™</span></em><span>, while others are supplied simple </span><em><span>generic Tutorial powder</span></em><span>. After a week, the number of programmers able to solve ten exercises of an average level in half an hour and the number of those that instead take two hours is recorded for both control groups.</span></p><p><span>You are asked to establish if </span><em><span>Edabitin™</span></em><span> has a statistical influence over performances with a </span><strong><span>Chi-Squared Test</span></strong><span>.</span></p><p><span>Look at the table below:</span></p><table><thead><tr><th><span>Treatment</span></th><th><span>2 Hours</span></th><th><span>½ Hour</span></th></tr></thead><tbody><tr><td><span>Edabitin</span></td><td><span>207</span></td><td><span>282</span></td></tr><tr><td><span>Tutorial</span></td><td><span>231</span></td><td><span>242</span></td></tr></tbody></table><p><span>The first thing to do is to calculate the total population of programmers involved in the test, so you have to sum all the four cells' values. Then you must calculate the totals of the rows: the </span><em><span>Edabitin™</span></em><span> total treatments and the Tutorial total treatments. Calculate the totals also for the columns: normal programmers that spent 2 hours solving the exercises and improved programmers that spent just 1/2 hour. The new table now is:</span></p><table><thead><tr><th><span>Treatment</span></th><th><span>2 Hours</span></th><th><span>½ Hour</span></th><th><span>Row Tot</span></th></tr></thead><tbody><tr><td><span>Edabitin</span></td><td><span>207</span></td><td><span>282</span></td><td><strong><span>489</span></strong></td></tr><tr><td><span>Tutorial</span></td><td><span>231</span></td><td><span>242</span></td><td><strong><span>473</span></strong></td></tr><tr><td><strong><span>Col Tot</span></strong></td><td><strong><span>438</span></strong></td><td><strong><span>524</span></strong></td><td><strong><span>962</span></strong></td></tr></tbody></table><p><span>The value in the lower-right corner is the overall total. Each cell now has to be transformed into the corresponding expected result: multiply the row total for the column total (crossing them), and divide the result by the overall total. The table now is:</span></p><table><thead><tr><th><span>Treatment</span></th><th><span>2 Hours</span></th><th><span>½ Hour</span></th><th><span>Row Tot</span></th></tr></thead><tbody><tr><td><span>Edabitin</span></td><td><span>(489 * 438) / 962</span></td><td><span>(489 * 524) / 962</span></td><td><strong><span>489</span></strong></td></tr><tr><td><span>Tutorial</span></td><td><span>(473 * 438) / 962</span></td><td><span>(473 * 524) / 962</span></td><td><strong><span>473</span></strong></td></tr><tr><td><strong><span>Col Tot</span></strong></td><td><strong><span>438</span></strong></td><td><strong><span>524</span></strong></td><td><strong><span>962</span></strong></td></tr></tbody></table><p><span>Now for each cell you have to subtract the obtained expected value from the original cell value, square the result, and divide it by the expected value: The table now is:</span></p><table><thead><tr><th><span>Treatment</span></th><th><span>2 Hours</span></th><th><span>½ Hour</span></th></tr></thead><tbody><tr><td><span>Edabitin</span></td><td><span>(207 - 222.64)² / 222.64</span></td><td><span>(282 - 266.36)² / 266.36</span></td></tr><tr><td><span>Tutorial</span></td><td><span>(231 - 215.36)² / 215.36</span></td><td><span>(242 - 257.64)² / 257.64</span></td></tr></tbody></table><p><span>Finally, you can sum all cell values and get the Chi-Squared value (</span><strong><span>χ²</span></strong><span>) rounded to the nearest tenth:</span></p><p><strong><span>χ²</span></strong><span> = 1.099 + 0.918 + 1.136 + 0.949 = </span><strong><span>4.1</span></strong></p><p><span>To establish if the effect of Edabitin is statistically significant, you must confront the Chi-Squared value with two different alpha values (or levels of confidence): </span><strong><span>alpha1</span></strong><span> and </span><strong><span>alpha5</span></strong><span>.</span></p><p><span>If the Chi-Squared value is greater than </span><strong><span>6.635 (alpha1)</span></strong><span>, than there is the 1% of possibilities that the </span><em><span>Edabitin™</span></em><span> effect is a false positive, but the </span><strong><span>99%</span></strong><span> of possibilities that it actually works; if it is lower than alpha1 but greater than </span><strong><span>3.841 (alpha5)</span></strong><span>, then the possibilities of an effective improvement are equals to the </span><strong><span>95%</span></strong><span> (with the 5% of false positives possibilities). If the Chi-Squared value is lower than alpha5 than the effect of </span><em><span>Edabitin™</span></em><span> is not statistically relevant for the programming performances.</span></p><p><span>For the example table above, the Chi-Squared value is lower than alpha1 and greater than alpha5, so we can assert that: </span><em><span>improvements in programmers treated with Edabitin™ are caused by 95% by the drug effectiveness</span></em><span>.</span></p><p><span>Given an object </span><code>data</code><span> being the table containing the results to analyze (\"E\" is the Edabitin's row, \"T\" is the Tutorial's row, with the two columns being the \"2 hours passed\" and \"1/2 hour passed\" registered cases, as in the tables above) implement a function that returns an array containing two elements:</span></p><ul><li><span>The </span><strong><span>Chi-Squared value</span></strong><span> rounded to the nearest tenth.</span></li><li><span>A string with the final analysis being:</span><ul><li><code>\"Edabitin effectiveness = 99%\"</code><span> if the Chi-Squared value is greater than alpha1.</span></li><li><code>\"Edabitin effectiveness = 95%\"</code><span> if the Chi-Squared value is lower than alpha1 and greater than alpha5.</span></li><li><code>\"Edabitin is ininfluent\"</code><span> if the Chi-Squared value is lower than alpha5.</span></li></ul></li></ul><h3><span>Examples</span></h3><pre><code>chiSquaredTest({\"E\": [207, 282], \"T\": [231, 242]}) ➞ [4.1, \"Edabitin effectiveness = 95%\"]\n\nchiSquaredTest({\"E\": [100, 50], \"T\": [100, 20]}) ➞ [9.6, \"Edabitin effectiveness = 99%\"]\n\nchiSquaredTest({\"E\": [90, 50], \"T\": [80, 40]}) ➞ [0.2, \"Edabitin is ininfluent\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Round just the final result to the nearest tenth, values of the example are actually rounded for readability scopes.</span></li><li><span>Besides epidemiology, the Chi-Squared Test is used also in agriculture, surveys, economics and in cases where \"categorical\" data is implied instead of \"numerical\" data. This test is used for medium-to-large recorded cases: for smaller numbers, other tests are used. The alpha1 and alpha5 values are constants related to this specific exercise's tables with two rows and two columns (</span><em><span>1 degree of freedom</span></em><span> results), so they change for different sized tables. For more info look at the specific links in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><em><span>No programmers were harmed in the making of this challenge!</span></em></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures",
			"math",
			"objects"
		],
		"tests": [
			"Test.assertSimilar(chiSquaredTest({\"E\": [207, 282], \"T\": [231, 242]}), [4.1, \"Edabitin effectiveness = 95%\"], \"Instructions example\")",
			"Test.assertSimilar(chiSquaredTest({\"E\": [100, 50], \"T\": [100, 20]}), [9.6, 'Edabitin effectiveness = 99%'])",
			"Test.assertSimilar(chiSquaredTest({\"E\": [90, 50], \"T\": [80, 40]}), [0.2, \"Edabitin is ininfluent\"])",
			"Test.assertSimilar(chiSquaredTest({\"E\": [366, 181], \"T\": [249, 112]}), [0.4, \"Edabitin is ininfluent\"])",
			"Test.assertSimilar(chiSquaredTest({\"E\": [112, 201], \"T\": [77, 90]}), [4.9, \"Edabitin effectiveness = 95%\"])",
			"Test.assertSimilar(chiSquaredTest({\"E\": [239, 198], \"T\": [190, 100]}), [8.4, 'Edabitin effectiveness = 99%'])"
		],
		"starterFn": [
			"1\nfunction chiSquaredTest(data) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/69t9okDM6RqXmK33F"
	},
	{
		"title": "Letter Shifting",
		"description": "<p><span>Create a function that takes a string and shifts the letters by an amount </span><code>n</code><span> </span><strong><span>but not the whitespace</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>shiftLetters(\"Boom\", 2) ➞ \"omBo\"\n\nshiftLetters(\"This is a test\",  4) ➞ \"test Th i sisa\"\n\nshiftLetters(\"A B C D E F G H\", 5) ➞  \"D E F G H A B C\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Keep the case as it is.</span></li><li><code>n</code><span> can be larger than the total number of letters.</span></li></ul>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(shiftLetters(\"Made by Harith Shah\", 15), \"adeb yH arithS hahM\");",
			"Test.assertEquals(shiftLetters(\"Boom\", 1), \"mBoo\");",
			"Test.assertEquals(shiftLetters(\"The most addictive way to learn\", 19), \"add icti vewaytole arn Th emost\");",
			"Test.assertEquals(shiftLetters(\"This is a test\", 13), \"stTh is i sate\");",
			"Test.assertEquals(shiftLetters(\"Shift the letters\", 1), \"sShif tth eletter\");",
			"Test.assertEquals(shiftLetters(\"A B C D E F G H\", 4), \"E F G H A B C D\");",
			"Test.assertEquals(shiftLetters(\"Edabit helps you learn in bitesize chunks\", 39), \"unksEd abith elp syoul ea rninbite sizech\");",
			"Test.assertEquals(shiftLetters(\"To be or not to be\", 6), \"ot to be Tob eo rn\");",
			"Test.assertEquals(shiftLetters(\"Made by Harith Shah\", 18), \"ahMa de byHari thSh\");",
			"Test.assertEquals(shiftLetters(\"Boom\", 0), \"Boom\");",
			"Test.assertEquals(shiftLetters(\"The most addictive way to learn\", 5), \"lea rnTh emostaddi cti ve wayto\");",
			"Test.assertEquals(shiftLetters(\"This is a test\", 9), \"isis at e stTh\");",
			"Test.assertEquals(shiftLetters(\"Shift the letters\", 3), \"ersSh ift thelett\");",
			"Test.assertEquals(shiftLetters(\"A B C D E F G H\", 10), \"G H A B C D E F\");",
			"Test.assertEquals(shiftLetters(\"Birds of a Feather Flock Together\", 32), \"therB ir d sofaFea therF lockToge\");",
			"Test.assertEquals(shiftLetters(\"Talk the Talk\", 1), \"kTal kth eTal\");",
			"​",
			"// By Harith Shah"
		],
		"starterFn": [
			"1\nfunction shiftLetters(str, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Fp8mhnDaA79bkERjh"
	},
	{
		"title": "Points on Rectangle Bounds",
		"description": "<p><span>Given an array of 2D points </span><code>[x, y]</code><span>, create a function that returns </span><code>true</code><span> if those points can be on the </span><em><span>bounds</span></em><span> of a rectangle, </span><code>false</code><span> otherwise.</span></p><p><img src=\"https://edabit-challenges.s3.amazonaws.com/fhh2XNW.png\"></p><h3><span>Examples</span></h3><pre><code>onRectangleBounds([[0, 1], [1, 0], [1, 1], [0, 0]]) ➞ true\n\nonRectangleBounds([[0, 1], [1, 0], [1, 1], [0.5, 0.5]]) ➞ false\n\nonRectangleBounds([[0, 1], [10, 0], [10, 1]]) ➞ true\n\nonRectangleBounds([[0, 1]]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Only rectangles with sides parallel to </span><em><span>x-axis</span></em><span> and </span><em><span>y-axis</span></em><span> will be considered.</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(onRectangleBounds([[0, 1]]), true, 'A point alone can be on the boundary of any rectangle')",
			"Test.assertEquals(onRectangleBounds([[0, 1], [2, 3]]), true)",
			"Test.assertEquals(onRectangleBounds([[0, 1], [2, 3], [0, 5]]), true)",
			"Test.assertEquals(onRectangleBounds([[0, 1], [2, 3], [4, 5]]), false)",
			"Test.assertEquals(onRectangleBounds([[0, 1], [2, 3], [4, 5], [6, 7]]), false)",
			"Test.assertEquals(onRectangleBounds([[1.94, 0.0], [1.92, 0.0], [1.99, 0.0],[1.85,0.0],[0.56,0.0],[0.42,0.0],[0.35,0.0],[1.37,0.0],[0.91,0.0],[1.39,0.0],[0.02,0.0],[1.78,0.0],[1.63,0.0],[0.93,0.0],[1.92,0.0],[1.32,0.0],[0.73,0.0],[1.87,0.0],[1.48,0.0],[0.12,0.0]]), true)",
			"Test.assertEquals(onRectangleBounds([[2.0,-0.16],[2.0,-0.65],[2.0,1.0],[2.0,-0.43],[2.0,-0.84],[2.0,-0.15],[2.0,-0.29],[2.0,0.86],[2.0,0.89],[2.0,-0.17],[2.0,-0.69],[2.0,-0.95],[2.0,0.76],[2.0,-0.45],[2.0,0.8],[2.0,0.19],[2.0,-0.87],[2.0,-0.05],[2.0,-0.24],[2.0,0.95]]), true)",
			"Test.assertEquals(onRectangleBounds([[0.6,0.94],[0.74,1.18],[1.22,2.04],[1.1,1.21],[1.48,2.58],[0.19,3.78],[0.29,3.87],[0.9,1.4],[0.33,0.36],[0.49,2.67],[0.74,2.5],[1.87,3.64],[0.47,1.83],[1.39,3.89],[0.57,0.11],[1.75,1.07],[1.78,1.81],[1.9,2.51],[1.65,3.65],[0.05,3.78]]), false)",
			"Test.assertEquals(onRectangleBounds([[-1.12,-1.0],[-1.4,-1.0],[-0.97,-1.0],[-0.97,-1.0],[-1.61,-1.0],[-0.22,3.0],[-0.97,3.0],[-0.02,3.0],[-1.06,3.0],[-1.2,3.0],[-2.0,2.71],[-2.0,0.51],[-2.0,1.34],[-2.0,-0.84],[-2.0,-0.22],[2.0,3.28],[2.0,4.45],[2.0,3.79],[2.0,4.51],[2.0,4.77]]), false)",
			"Test.assertEquals(onRectangleBounds([[-1.01,-1.0],[-1.22,-1.0],[-1.44,-1.0],[-0.89,-1.0],[-0.1,-1.0],[-0.94,3.0],[-1.65,3.0],[-1.21,3.0],[-0.63,3.0],[-1.16,3.0],[-2.0,-0.57],[-2.0,-0.26],[-2.0,-0.27],[-2.0,-0.57],[-2.0,1.55],[2.0,2.79],[2.0,2.75],[2.0,2.85],[2.0,2.49],[2.0,2.73]]), true)",
			"Test.assertEquals(onRectangleBounds([[1.66,0.66],[0.02,-0.98],[0.87,-0.13],[1.87,0.87],[1.44,0.44],[0.19,-0.81],[1.92,0.92],[0.84,-0.16],[0.71,-0.29],[0.31,-0.69],[1.25,0.25],[0.76,-0.24],[0.58,-0.42],[0.53,-0.47],[0.37,-0.63],[0.04,-0.96],[0.71,-0.29],[1.68,0.68],[0.82,-0.18],[1.94,0.94]]), false)",
			"Test.assertEquals(onRectangleBounds([[0.19,-0.81],[1.89,0.89],[1.17,0.17],[1.82,0.82],[1.84,0.84],[1.74,0.74],[1.92,0.92],[0.09,-0.91],[1.66,0.66],[1.83,0.83],[0.29,-0.71],[0.84,-0.16],[1.95,0.95],[1.68,0.68],[0.56,-0.44],[1.97,0.97],[1.09,0.09],[0.23,-0.77],[1.13,0.13],[1.24,0.24],[-1.03,1.03],[-0.74,0.74],[-0.39,0.39],[-0.04,0.04],[-1.24,1.24],[-0.91,0.91],[-0.94,0.94],[-0.68,0.68],[-1.51,1.51],[-1.96,1.96],[-0.34,0.34],[-1.75,1.75],[-1.53,1.53],[-0.66,0.66],[-1.28,1.28],[-0.68,0.68],[-1.47,1.47],[-0.36,0.36],[-0.38,0.38],[-0.48,0.48]]), false)",
			"Test.assertEquals(onRectangleBounds([[2.69,-1.0],[0.95,-1.0],[3.68,-1.0],[-0.79,-1.0],[2.42,-1.0],[1.85,-1.0],[-0.3,-1.0],[-0.25,-1.0],[3.51,-1.0],[0.83,-1.0],[1.45,-1.0],[1.13,-1.0],[1.74,-1.0],[0.08,-1.0],[2.33,-1.0],[0.31,-1.0],[1.89,-1.0],[2.24,-1.0],[-1.94,-1.0],[-1.19,-1.0],[1.49,3.0],[0.28,3.0],[0.12,3.0],[-1.97,3.0],[1.94,3.0],[-0.96,3.0],[-1.74,3.0],[-1.59,3.0],[0.19,3.0],[-1.33,3.0],[0.53,3.0],[0.12,3.0],[0.83,3.0],[0.42,3.0],[-0.13,3.0],[1.41,3.0],[-1.65,3.0],[0.93,3.0],[0.75,3.0],[-0.21,3.0],[-2.0,1.52],[-2.0,0.75],[-2.0,2.96],[-2.0,1.5],[-2.0,2.35],[-2.0,0.11],[-2.0,0.42],[-2.0,-0.42],[-2.0,-0.03],[-2.0,1.7],[-2.0,0.05],[-2.0,0.76],[-2.0,1.56],[-2.0,1.51],[-2.0,2.22],[-2.0,2.82],[-2.0,0.65],[-2.0,2.73],[-2.0,1.44],[-2.0,-0.51],[2.0,1.01],[2.0,-0.7],[2.0,0.7],[2.0,1.35],[2.0,2.84],[2.0,-0.02],[2.0,0.3],[2.0,-0.81],[2.0,1.66],[2.0,0.9],[2.0,2.3],[2.0,-0.12],[2.0,-0.77],[2.0,0.64],[2.0,-0.35],[2.0,0.54],[2.0,-0.08],[2.0,2.05],[2.0,1.03],[2.0,-0.17]]), false)",
			"Test.assertEquals(onRectangleBounds([[-0.08,-1.0],[0.37,-1.0],[0.56,-1.0],[-1.32,-1.0],[-1.76,-1.0],[0.56,-1.0],[0.6,-1.0],[1.94,-1.0],[-0.42,-1.0],[1.66,-1.0],[0.9,-1.0],[0.79,-1.0],[0.24,-1.0],[1.13,-1.0],[-1.89,-1.0],[-0.6,-1.0],[1.5,-1.0],[-1.34,-1.0],[-0.95,-1.0],[1.96,-1.0],[1.17,3.0],[-0.87,3.0],[-0.45,3.0],[1.82,3.0],[-0.5,3.0],[0.56,3.0],[-1.95,3.0],[1.42,3.0],[0.98,3.0],[0.24,3.0],[-0.41,3.0],[1.32,3.0],[1.48,3.0],[-0.5,3.0],[0.64,3.0],[-1.63,3.0],[-0.23,3.0],[0.62,3.0],[-0.58,3.0],[-1.37,3.0],[-2.0,1.06],[-2.0,1.24],[-2.0,2.31],[-2.0,-0.6],[-2.0,0.75],[-2.0,1.33],[-2.0,-0.49],[-2.0,-0.87],[-2.0,-0.56],[-2.0,0.1],[-2.0,2.4],[-2.0,-0.65],[-2.0,1.36],[-2.0,2.1],[-2.0,-0.53],[-2.0,1.53],[-2.0,0.9],[-2.0,2.67],[-2.0,1.67],[-2.0,0.02],[2.0,-0.67],[2.0,2.48],[2.0,-0.77],[2.0,-0.99],[2.0,-0.53],[2.0,2.88],[2.0,1.13],[2.0,0.73],[2.0,1.93],[2.0,-0.93],[2.0,0.53],[2.0,0.29],[2.0,2.99],[2.0,0.12],[2.0,0.08],[2.0,-0.77],[2.0,2.44],[2.0,-0.74],[2.0,1.07],[2.0,0.67]]), true)",
			"Test.assertEquals(onRectangleBounds([[-0.64,-1.0],[-1.4,-1.0],[-1.51,-1.0],[-1.64,-1.0],[-1.34,-1.0],[-1.78,-1.0],[-1.96,-1.0],[-0.97,-1.0],[-0.46,-1.0],[-1.51,-1.0],[-0.63,-1.0],[-1.86,-1.0],[-0.85,-1.0],[-0.15,-1.0],[-1.49,-1.0],[-1.52,-1.0],[-1.3,-1.0],[-1.85,-1.0],[-0.21,-1.0],[-0.92,-1.0],[1.56,3.0],[-1.62,3.0],[0.93,3.0],[-1.23,3.0],[0.77,3.0],[-1.59,3.0],[-1.46,3.0],[-0.85,3.0],[0.28,3.0],[1.32,3.0],[0.29,3.0],[-0.37,3.0],[-1.2,3.0],[-1.03,3.0],[1.4,3.0],[-0.8,3.0],[1.87,3.0],[-0.79,3.0],[0.53,3.0],[1.2,3.0],[-2.0,-0.51],[-2.0,0.11],[-2.0,0.55],[-2.0,0.02],[-2.0,1.83],[-2.0,1.69],[-2.0,2.16],[-2.0,1.54],[-2.0,0.91],[-2.0,0.77],[-2.0,2.05],[-2.0,0.14],[-2.0,1.42],[-2.0,1.76],[-2.0,0.59],[-2.0,-0.14],[-2.0,1.65],[-2.0,1.03],[-2.0,0.13],[-2.0,0.57],[2.0,2.59],[2.0,2.77],[2.0,2.84],[2.0,2.01],[2.0,2.54],[2.0,2.4],[2.0,2.92],[2.0,2.8],[2.0,2.63],[2.0,2.28],[2.0,2.37],[2.0,2.89],[2.0,2.68],[2.0,2.28],[2.0,2.4],[2.0,2.77],[2.0,2.78],[2.0,2.55],[2.0,2.61],[2.0,2.94]]), true)",
			"Test.assertEquals(onRectangleBounds([[-1.18,-1.0],[2.12,-1.0],[2.48,-1.0],[3.01,-1.0],[2.85,-1.0],[-0.62,-1.0],[0.38,-1.0],[2.12,-1.0],[3.42,-1.0],[1.2,-1.0],[1.72,-1.0],[2.33,-1.0],[2.27,-1.0],[0.23,-1.0],[1.23,-1.0],[3.91,-1.0],[2.3,-1.0],[1.29,-1.0],[-0.64,-1.0],[-0.4,-1.0],[0.49,3.0],[1.44,3.0],[0.19,3.0],[1.35,3.0],[-0.95,3.0],[-1.49,3.0],[0.17,3.0],[0.31,3.0],[0.9,3.0],[1.25,3.0],[-0.31,3.0],[-1.58,3.0],[-1.31,3.0],[0.54,3.0],[1.14,3.0],[-1.35,3.0],[-0.38,3.0],[0.55,3.0],[0.94,3.0],[-1.88,3.0],[-2.0,2.7],[-2.0,2.89],[-2.0,2.39],[-2.0,2.02],[-2.0,-0.85],[-2.0,1.61],[-2.0,-0.3],[-2.0,1.39],[-2.0,-0.59],[-2.0,0.58],[-2.0,2.6],[-2.0,1.54],[-2.0,-0.18],[-2.0,-0.8],[-2.0,0.82],[-2.0,1.07],[-2.0,0.65],[-2.0,2.67],[-2.0,2.72],[-2.0,2.39],[2.0,-0.97],[2.0,-0.19],[2.0,-1.73],[2.0,-1.89],[2.0,-1.57],[2.0,-0.8],[2.0,-0.43],[2.0,-0.26],[2.0,0.33],[2.0,-2.38],[2.0,0.87],[2.0,-1.46],[2.0,-0.55],[2.0,-2.32],[2.0,-2.09],[2.0,0.51],[2.0,-1.88],[2.0,-0.91],[2.0,0.89],[2.0,-1.27]]), false)",
			"Test.assertEquals(onRectangleBounds([[-1.06,-1.0],[-0.9,-1.0],[-1.16,-1.0],[-0.78,-1.0],[-0.15,-1.0],[-0.76,-1.0],[-1.23,-1.0],[-1.55,-1.0],[-0.91,-1.0],[-1.62,-1.0],[-1.02,-1.0],[-0.88,-1.0],[-0.57,-1.0],[-2.0,-1.0],[-0.11,-1.0],[-1.57,-1.0],[-1.05,-1.0],[-1.52,-1.0],[-0.86,-1.0],[-0.87,-1.0],[1.75,3.0],[-0.91,3.0],[1.14,3.0],[-1.09,3.0],[0.53,3.0],[0.82,3.0],[-1.51,3.0],[1.28,3.0],[1.41,3.0],[0.89,3.0],[-0.46,3.0],[-1.92,3.0],[-1.67,3.0],[-1.83,3.0],[1.02,3.0],[1.79,3.0],[-0.1,3.0],[-0.56,3.0],[-0.27,3.0],[0.56,3.0],[-2.0,-0.5],[-2.0,-0.19],[-2.0,2.95],[-2.0,2.28],[-2.0,1.05],[-2.0,0.78],[-2.0,1.07],[-2.0,-0.57],[-2.0,2.4],[-2.0,-0.01],[-2.0,-0.15],[-2.0,0.06],[-2.0,0.93],[-2.0,0.36],[-2.0,0.64],[-2.0,2.28],[-2.0,-0.97],[-2.0,0.53],[-2.0,-0.94],[-2.0,-0.23],[2.0,2.88],[2.0,1.85],[2.0,-0.77],[2.0,1.55],[2.0,0.65],[2.0,2.25],[2.0,0.45],[2.0,1.13],[2.0,0.45],[2.0,-0.86],[2.0,2.04],[2.0,0.72],[2.0,2.17],[2.0,-0.78],[2.0,0.6],[2.0,-0.28],[2.0,2.28],[2.0,2.77],[2.0,1.06],[2.0,2.26]]), true)",
			"Test.assertEquals(onRectangleBounds([[-0.52,-1.0],[-0.26,-1.0],[-0.13,-1.0],[-0.51,-1.0],[-0.17,-1.0],[-1.88,-1.0],[-0.99,-1.0],[-0.43,-1.0],[-0.04,-1.0],[-1.13,-1.0],[-0.76,-1.0],[-0.91,-1.0],[-0.13,-1.0],[-0.3,-1.0],[-1.83,-1.0],[-0.57,-1.0],[-1.65,-1.0],[-1.09,-1.0],[-0.27,-1.0],[-1.73,-1.0],[-0.26,3.0],[-0.9,3.0],[-1.61,3.0],[-0.72,3.0],[-0.11,3.0],[-1.95,3.0],[-0.62,3.0],[-1.19,3.0],[-0.75,3.0],[-0.4,3.0],[-1.59,3.0],[-0.44,3.0],[-0.32,3.0],[-0.22,3.0],[-1.69,3.0],[-1.71,3.0],[-0.58,3.0],[-1.15,3.0],[-1.32,3.0],[-0.07,3.0],[-2.0,-0.41],[-2.0,0.83],[-2.0,1.27],[-2.0,2.45],[-2.0,1.85],[-2.0,-0.71],[-2.0,2.72],[-2.0,0.15],[-2.0,2.49],[-2.0,2.69],[-2.0,0.49],[-2.0,0.91],[-2.0,0.11],[-2.0,1.54],[-2.0,-0.48],[-2.0,0.13],[-2.0,2.79],[-2.0,2.66],[-2.0,-0.49],[-2.0,1.18],[2.0,2.36],[2.0,2.41],[2.0,2.1],[2.0,2.98],[2.0,2.48],[2.0,2.11],[2.0,2.61],[2.0,2.52],[2.0,2.88],[2.0,2.01],[2.0,2.41],[2.0,2.22],[2.0,2.16],[2.0,2.14],[2.0,2.46],[2.0,2.99],[2.0,2.92],[2.0,2.75],[2.0,2.65],[2.0,2.57]]), true)"
		],
		"starterFn": [
			"1\nfunction onRectangleBounds(points) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8ipEnvvW5Pn35JQJh"
	},
	{
		"title": "Is One String in the Other?",
		"description": "<p><span>Create a function that takes two strings and returns </span><code>true</code><span> if either of the strings appears at the very end of the other string. Return </span><code>false</code><span> otherwise. The character </span><code>*</code><span> is a wildcard, so it can take the place of any character.</span></p><h3><span>Examples</span></h3><pre><code>overlap(\"ABC\", \"Ican'tsingmyABC\") ➞ true\n\noverlap(\"abc\", \"Ican'tsingmyABC\") ➞ true\n\noverlap(\"Ican'tsingmyABC\", \"abc\") ➞ true\n\noverlap(\"hello world\", \"hello\") ➞ false\n\noverlap(\"+=\", \"this should work too +=\") ➞ true\n\noverlap(\"hey\", \"*********\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Your function should NOT be case sensitive (see example #2).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"logic",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(overlap(\"ABC\", \"Ican'tsingmyABC\"), true)",
			"Test.assertEquals(overlap(\"abc\", \"Ican'tsingmyABC\"), true)",
			"Test.assertEquals(overlap(\"Ican'tsingmyABC\", \"abc\"), true)",
			"Test.assertEquals(overlap(\"*bc\", \"Ican'tsingmyABC\"), true)",
			"Test.assertEquals(overlap(\"abc\", \"Ican'tsingmy***\"), true)",
			"Test.assertEquals(overlap(\"ab\", \"Ican'tsingmy**c\"), false)",
			"Test.assertEquals(overlap(\"hello world\", \"hello\"), false)",
			"Test.assertEquals(overlap(\"+=\", \"this should work too +=\"), true)",
			"Test.assertEquals(overlap(\"don't forget hyphens-\", \"-\"), true)",
			"Test.assertEquals(overlap(\"don't forget periods \", \".\"), false)",
			"Test.assertEquals(overlap(\"this will always be true\", \"*\"), true)",
			"Test.assertEquals(overlap(\"this will always be false\", \"F\"), false)",
			"Test.assertEquals(overlap(\"hey\", \"*********\"), true)",
			"Test.assertEquals(overlap(\"a*c\", \"*b*\"), true)",
			"Test.assertEquals(overlap(\"last test\", \"congrats you passed the last test\"), true)"
		],
		"starterFn": [
			"1\nfunction overlap(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/taDMEiBjokE9AymBb"
	},
	{
		"title": "Can You Make the Numbers",
		"description": "<p><span>You are given an array representing the number of 0s, 1s, 2s, ..., 9s you have. The function will look like:</span></p><pre><code>can_build([#0s, #1s, #2s, ..., #9s], [num1, num2, ...])</code></pre><p><span>Write a function that returns </span><code>true</code><span> if you can build the following numbers using only the digits you have.</span></p><h3><span>Examples</span></h3><pre><code>canBuild([0, 1, 2, 2, 3, 0, 0, 0, 1, 1], [123, 444, 92]) ➞ true\n\n// You have: one 1, two 2s, two 3s, three 4s, one 8 and one 9\n// Using only these digits, you can build 123, 444, and 92\n\ncanBuild([10, 2, 3, 8, 5, 8, 5, 5, 3, 1], [11, 2, 22, 49, 444, 998, 87, 44]) ➞ false\n\ncanBuild([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], []) ➞ true\n\ncanBuild([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"loops"
		],
		"tests": [
			"Test.assertEquals(canBuild([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], []), true)",
			"Test.assertEquals(canBuild([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 8]), true)",
			"Test.assertEquals(canBuild([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 80]), true)",
			"Test.assertEquals(canBuild([0, 1, 2, 2, 3, 0, 0, 0, 1, 1], [123, 444, 92]), true)",
			"Test.assertEquals(canBuild([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [10, 23, 45, 6789]), true)",
			"Test.assertEquals(canBuild([0, 2, 3, 0, 5, 0, 0, 0, 0, 1], [11, 2, 22, 49, 444, 4]), true)",
			"Test.assertEquals(canBuild([1, 1, 0, 0, 0, 0, 0, 0, 1, 0], [1, 80, 0]), false)",
			"Test.assertEquals(canBuild([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1]), false)",
			"Test.assertEquals(canBuild([0, 2, 3, 0, 5, 0, 0, 0, 0, 1], [11, 7, 2, 22, 49, 444, 4]), false)",
			"Test.assertEquals(canBuild([0, 2, 3, 0, 5, 0, 0, 0, 0, 1], [11, 2, 22, 49, 444, 44]), false)",
			"Test.assertEquals(canBuild([10, 2, 3, 8, 5, 8, 5, 5, 3, 1], [11, 2, 22, 49, 444, 998, 87, 44]), false)"
		],
		"starterFn": [
			"1\nfunction canBuild(digits, arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sEn8HvF2pHiv4La2N"
	},
	{
		"title": "A Periodic Series",
		"description": "<p><span>This challenge involves a series that can start with any string of digits. The next term in the series is found by adding the digits of the previous term, appending that sum to the previous term, and then truncating the leftmost digits so that the number of digits in the terms is always the same.</span></p><p><span>Let's start with \"1234\". The sum of the digits is 10. Appending gives us \"123410\", then truncating the left two digits results in \"3410\". The next three terms are \"4108\", \"0813\", \"1312\". The series becomes periodic when a term that previously appeared occurs again.</span></p><p><span>Example:</span></p><pre><code>\"124\", \"247\", \"713\", \"311\", \"115\", \"157\", \"713\", \"311\" ...</code></pre><p><span>This series becomes periodic at a length of 6 before \"713\" reappears.</span></p><p><span>Create a function whose argument is a digit string (the first term) and returns the length of the series when it first becomes periodic.</span></p><h3><span>Examples</span></h3><pre><code>periodic(\"1\") ➞ 1\n\nperiodic(\"3061\") ➞ 7\n\nperiodic(\"02468\") ➞ 178\n\nperiodic(\"314159265\") ➞ 12210</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(periodic(\"2\"), 1)",
			"Test.assertEquals(periodic(\"22\"), 13)",
			"Test.assertEquals(periodic(\"157\"), 4)",
			"Test.assertEquals(periodic(\"1234567\"), 943)",
			"Test.assertEquals(periodic(\"1818\"), 1)",
			"Test.assertEquals(periodic(\"0000001\"), 778)"
		],
		"starterFn": [
			"1\nfunction periodic(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oxbB9va7ejSMoCf9B"
	},
	{
		"title": "Clock Hands",
		"description": "<p><span>Create a function whose argument is the time in 12 hour format (hh:mm:ss). The function returns the smaller angle between the hour and minute hands in degrees, rounded to three decimal points.</span></p><h3><span>Examples</span></h3><pre><code>clock(\"12:00:00\") ➞ 0.0\n\nclock(\"12:15:00\") ➞ 82.5\n\nclock(\"12:32:44\") ➞ 179.967\n\nclock(\"03:33:33\") ➞ 94.525</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(clock(\"12:00:00\"), 0.0)",
			"Test.assertEquals(clock(\"12:15:00\"), 82.5)",
			"Test.assertEquals(clock(\"12:32:44\"), 179.967)",
			"Test.assertEquals(clock(\"03:33:33\"), 94.525)",
			"Test.assertEquals(clock(\"01:59:59\"), 60.092)"
		],
		"starterFn": [
			"1\nfunction clock(time) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JwntMLoEpnbrcxrD9"
	},
	{
		"title": "Prison Break",
		"description": "<p><span>A prison can be represented as an array of cells. Each cell contains exactly one prisoner. A </span><code>1</code><span> represents an unlocked cell and a </span><code>0</code><span> represents a locked cell.</span></p><pre><code>[1, 1, 0, 0, 0, 1, 0]</code></pre><p><span>Starting from the leftmost cell, you are tasked with seeing how many prisoners you can set free, with a catch. Each time you free a prisoner, the locked cells become unlocked, and the unlocked cells become locked again.</span></p><p><span>So, if we use the example above:</span></p><pre><code>[1, 1, 0, 0, 0, 1, 0] \n// You free the prisoner in the 1st cell.\n\n[0, 0, 1, 1, 1, 0, 1] \n// You free the prisoner in the 3rd cell (2nd one locked).\n\n[1, 1, 0, 0, 0, 1, 0]\n// You free the prisoner in the 6th cell (3rd, 4th and 5th locked).\n\n[0, 0, 1, 1, 1, 0, 1]\n// You free the prisoner in the 7th cell - and you are done!</code></pre><p><span>Here, we have freed </span><code>4</code><span> prisoners in total.</span></p><p><span>Create a function that, given this unique prison arrangement, returns the number of freed prisoners.</span></p><h3><span>Examples</span></h3><pre><code>freedPrisoners([1, 1, 0, 0, 0, 1, 0]) ➞ 4\n\nfreedPrisoners([1, 1, 1]) ➞ 1\n\nfreedPrisoners([0, 0, 0]) ➞ 0\n\nfreedPrisoners([0, 1, 1, 1]) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>You must free a prisoner in order for the locks to switch. So in second example where the input is </span><code>[1, 1, 1]</code><span>, after you release the first prisoner, the locks change to </span><code>[0, 0, 0]</code><span>. Since all cells are locked, you can release no more prisoners.</span></li><li><span>You always start with the leftmost element in the array (the first prison cell). If all the prison cells to your right are all zeroes, you cannot free any more prisoners.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(freedPrisoners([1, 1, 0, 0, 0, 1, 0]), 4)",
			"Test.assertEquals(freedPrisoners([1, 0, 0, 0, 0, 0, 0]), 2) ",
			"Test.assertEquals(freedPrisoners([1, 1, 1, 0, 0, 0]), 2) ",
			"Test.assertEquals(freedPrisoners([1, 0, 1, 0, 1, 0]), 6) ",
			"Test.assertEquals(freedPrisoners([1, 1, 1]), 1, 'once first prisoner freed, all cells become locked')",
			"Test.assertEquals(freedPrisoners([0, 0, 0]), 0, 'first cell locked, so cannot switch')",
			"Test.assertEquals(freedPrisoners([0, 1, 1, 1]), 0, 'first cell locked, cannot switch')"
		],
		"starterFn": [
			"1\nfunction freedPrisoners(prison) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rT33paDEoJH5AhsA9"
	},
	{
		"title": "Fives and Threes Only",
		"description": "<p><span>Starting with either </span><code>3</code><span> or </span><code>5</code><span> and given these operations:</span></p><ul><li><span>add </span><code>5</code></li><li><span>multiply by </span><code>3</code></li></ul><p><span>You should say if it is possible to reach the target number </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>only5and3(14) ➞ true\n// 14 = 3*3 + 5\n\nonly5and3(25) ➞ true\n// 25 = 5+5+5+5+5\n\nonly5and3(7) ➞ false\n// There exists no path to the target number 7</code></pre><h3><span>Notes</span></h3><p><span>You can solve this problem by recursion or algebra.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(only5and3(14), true, \"See example #1\")",
			"Test.assertEquals(only5and3(25), true, \"See example #2\")",
			"Test.assertEquals(only5and3(7), false, \"See example #3\")",
			"Test.assertEquals(only5and3(2), false)",
			"Test.assertEquals(only5and3(43), true)",
			"Test.assertEquals(only5and3(33), true)",
			"Test.assertEquals(only5and3(51), false)",
			"Test.assertEquals(only5and3(91), true)",
			"Test.assertEquals(only5and3(378), true)",
			"Test.assertEquals(only5and3(627), true)"
		],
		"starterFn": [
			"1\nfunction only_5_and_3(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2aRggQCd8XFHtdtBD"
	},
	{
		"title": "Even vs. Odds",
		"description": "<p><span>Odd numbers like to hangout with odd numbers. Even numbers like to hangout with even numbers.</span></p><p><span>A </span><strong><span>spot</span></strong><span> is an insertion between two numbers in an array. Given an array of </span><strong><span>n</span></strong><span> integers in length, there are </span><strong><span>n-1</span></strong><span> spots available. </span></p><p><span>For instance:</span></p><pre><code>[3, 4, 9, 10, 1]  // Array of 5 digits can also be thought of as...\n\n[3, __ , 4, __ , 9, __, 10, __, 1]  // ...an array of 4 spots.</code></pre><p><span>After a number is newly inserted into a </span><strong><span>spot</span></strong><span>, it's </span><strong><span>left neighbor</span></strong><span> is the number directly to the left of it and it's </span><strong><span>right neighbor</span></strong><span> is the number directly to the right of it.</span></p><p><span>For instance:</span></p><pre><code>[3, 6, 4, 9, 10, 1]  // Left neighbor of 6 is 3, right neighbor of 6 is 4.</code></pre><p><span>Odd numbers like having the following </span><strong><span>(left neighbor, right neighbor combinations)</span></strong><span>: </span><code>(odd, even), (even, odd), (odd, odd)</code><span> .They </span><strong><span>dislike</span></strong><span> having both neighbors being even, or </span><code>(even, even)</code><span>.</span></p><p><span>Similarly, even numbers like the following neighbor combinations: </span><code>(even, odd), (odd, even), (even, even)</code><span>. They </span><strong><span>dislike</span></strong><span> having both neighbors being odd, or </span><code>(odd, odd)</code><span>.</span></p><p><span>Given an array, calculate the number of liked spots.</span></p><h3><span>Examples</span></h3><pre><code>availableSpots([0, 4, 6, 8], 9) ➞ 0\n// 9 likes NONE of the following spots: [0, __, 4], [4, __ , 6], [6, __, 8] b/c all of his neighbors are even.\n\navailableSpots([0, 4, 6, 8], 12) ➞ 3\n// 12 likes ALL of the spots.\n\navailableSpots([4, 4, 4, 4, 5], 7) ➞ 1\n// 7 dislikes every spot except the last one at: [4, __, 5].\n\navailableSpots([4, 4], 8) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(availableSpots([0, 4, 6, 8], 9), 0)",
			"Test.assertEquals(availableSpots([0, 4, 6, 8], 6), 3)",
			"Test.assertEquals(availableSpots([1, 2, 3, 4], 6), 3)",
			"Test.assertEquals(availableSpots([1, 2, 3, 4], 5), 3)",
			"Test.assertEquals(availableSpots([1, 1, 1, 4], 7), 3)",
			"Test.assertEquals(availableSpots([1, 1, 4, 4], 7), 2)",
			"Test.assertEquals(availableSpots([1, 4, 4, 4], 7), 1)",
			"Test.assertEquals(availableSpots([4, 4, 4, 4], 7), 0)",
			"Test.assertEquals(availableSpots([5, 5, 5, 8, 8, 5, 5, 5, 5], 32), 3)",
			"Test.assertEquals(availableSpots([4, 4], 8), 1)"
		],
		"starterFn": [
			"1\nfunction availableSpots(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/975ac5gm3hAwYqqjS"
	},
	{
		"title": "24-Hour Time",
		"description": "<p><span>Write a function that receives the time in 12-hour AM/PM format and returns a string representation of the time in military (24-hour) format.</span></p><h3><span>Examples</span></h3><pre><code>convertTime(“07:05:45PM”) ➞ “19:05:45”\n\nconvertTime(“12:40:22AM”) ➞ “00:40:22”\n\nconvertTime(“12:45:54PM”) ➞ “12:45:54”</code></pre><h3><span>Notes</span></h3><ul><li><span>Midnight is 12:00:00AM on a 12-hour clock, and 00:00:00 on a 24-hour clock.</span></li><li><span>Noon is 12:00:00PM on a 12-hour clock, and 12:00:00 on a 24-hour clock.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"dates",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(convertTime(\"07:05:45PM\"), \"19:05:45\")",
			"Test.assertEquals(convertTime(\"12:40:22AM\"), \"00:40:22\")",
			"Test.assertEquals(convertTime(\"12:45:54PM\"), \"12:45:54\")",
			"Test.assertEquals(convertTime(\"05:32:33PM\"), \"17:32:33\")",
			"Test.assertEquals(convertTime(\"11:59:59PM\"), \"23:59:59\")",
			"Test.assertEquals(convertTime(\"11:59:59AM\"), \"11:59:59\")",
			"Test.assertEquals(convertTime(\"06:00:19AM\"), \"06:00:19\")"
		],
		"starterFn": [
			"1\nfunction convertTime(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/myFTyWErMrazWgh8r"
	},
	{
		"title": "Binary Tree Nodes",
		"description": "<p><span>We have two arrays </span><code>N</code><span> and </span><code>P</code><span>,  where </span><code>N</code><span> represents the value of a node in </span><strong><span>Binary Tree</span></strong><span>, and </span><code>P</code><span> is the parent of </span><code>N</code><span>.</span></p><table><thead><tr><th><span>N</span></th><th><span>P</span></th></tr></thead><tbody><tr><td><span>1</span></td><td><span>2</span></td></tr><tr><td><span>3</span></td><td><span>2</span></td></tr><tr><td><span>6</span></td><td><span>8</span></td></tr><tr><td><span>9</span></td><td><span>8</span></td></tr><tr><td><span>2</span></td><td><span>5</span></td></tr><tr><td><span>8</span></td><td><span>5</span></td></tr><tr><td><span>5</span></td><td><span>-1</span></td></tr></tbody></table><p><span>Write a function to find the node type of the node within this Binary Tree, ordered by the value of the node. Output one of the following:</span></p><ul><li><code>Root</code><span>: If node is root node.</span></li><li><code>Leaf</code><span>: If node is leaf node.</span></li><li><code>Inner</code><span>: If node is neither root nor leaf node.</span></li><li><code>Not exist</code><span>: If node not exist.</span></li></ul><pre><code>nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 5) ➞ \"Root\"\n\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 6) ➞ \"Leaf\"\n\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 2) ➞ \"Inner\"\n\nnodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 10) ➞ \"Not exist\"</code></pre><p><img alt=\"Binary Tree Example\" src=\"https://edabit-challenges.s3.amazonaws.com/binary-tree-example.png\"></p><h3><span>Notes</span></h3><p><span>All values of </span><code>N</code><span> array are unique.</span></p>",
		"publishedBy": "Sweet",
		"publishedByUrl": "https://edabit.com/user/BpiAkZfs6sXRMdArb",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"conditions"
		],
		"tests": [
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 1 ), \"Leaf\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 2), \"Inner\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 3), \"Leaf\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 5), \"Root\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 6), \"Leaf\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 8), \"Inner\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 9), \"Leaf\")",
			"Test.assertSimilar(nodeType([1, 3, 6, 9, 2, 8, 5], [2, 2, 8, 8, 5, 5, -1], 10), \"Not exist\")",
			"Test.assertSimilar(nodeType([6, 3, 1, 2, 5, 7, 4, 6, 8], [3, 1, 6, 1, 2, 3, 8, -1, 6], 8), \"Inner\")",
			"Test.assertSimilar(nodeType([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 11), \"Leaf\")",
			"Test.assertSimilar(nodeType([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 3 ), \"Root\")",
			"Test.assertSimilar(nodeType([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 4), \"Inner\")",
			"Test.assertSimilar(nodeType([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 6), \"Leaf\")",
			"Test.assertSimilar(nodeType([6, 3, 1, 2, 5, 7, 4, 6, 8], [3, 1, 6, 1, 2, 3, 8, -1, 6], 5), \"Leaf\")",
			"Test.assertSimilar(nodeType([5, 6, 8, 7, 1, 9, 4, 11, 10, 2], [8, 8, -1, 8, 7, 4, 5, 4, 1, 1], 8), \"Root\")",
			"Test.assertSimilar(nodeType([3, 2, 4, 9, 11, 10, 8, 5, 6, 7], [-1, 3, 3, 2, 3, 4, 4, 9, 10, 8], 10), \"Inner\")"
		],
		"starterFn": [
			"1\nfunction nodeType(N, P, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ycNLF4XMmQub5AeTt"
	},
	{
		"title": "Exact Factorial Bounds",
		"description": "<p><span>Create a function that tests if an integer is an exact upper bound of a factorial of an integer. If so, return the integer and the integer that is the exact factorial bound of. Otherwise, return </span><code>\"Not exact!\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>  isExact(6) ➞ [6, 3]\n\n  isExact(24) ➞ [24, 4]\n\n  isExact(125) ➞ \"Not exact!\"\n\n  isExact(720) ➞ [720, 6]\n\n  isExact(1024) ➞ \"Not exact!\"\n\n  isExact(40320) ➞ [40320, 8]</code></pre><h3><span>Notes</span></h3><ul><li><span>There will be no exceptions to handle, all inputs are positive integers.</span></li><li><span>Optionally, you can solve this challenge via recursion (if you're comfortable with it) but there is a bit of an advanced version of this challenge (to be solved via recursion) that can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/chDJCBDzZkjSExMwm\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(isExact(2), [2, 2])",
			"Test.assertSimilar(isExact(6), [6, 3])",
			"Test.assertSimilar(isExact(24), [24, 4])",
			"Test.assertSimilar(isExact(120), [120, 5])",
			"Test.assertSimilar(isExact(5040), [5040, 7])",
			"Test.assertSimilar(isExact(40320), [40320, 8])",
			"Test.assertSimilar(isExact(3628800), [3628800, 10])",
			"Test.assertSimilar(isExact(20922789888000), [20922789888000, 16])",
			"Test.assertEquals(isExact(125), \"Not exact!\")",
			"Test.assertEquals(isExact(721), \"Not exact!\")",
			"Test.assertEquals(isExact(1024), \"Not exact!\")",
			"Test.assertEquals(isExact(41845579776000), \"Not exact!\")"
		],
		"starterFn": [
			"1\nfunction isExact(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jFqttm7eFe8j4WMPu"
	},
	{
		"title": "Expensive Words",
		"description": "<p><span>Each letter in a sentence is worth its </span><em><span>position in the alphabet</span></em><span> (i.e. </span><strong><span>a = 1, b = 2, c = 3, etc...</span></strong><span>). However, if a word is all in </span><strong><span>UPPERCASE</span></strong><span>, the value of that word is </span><strong><span>doubled</span></strong><span>.</span></p><p><span>Create a function which returns the </span><em><span>value</span></em><span> of a sentence.</span></p><pre><code>getSentenceValue(\"abc ABC Abc\") ➞ 24\n// a = 1, b = 2, c = 3\n\n// abc = 1 + 2 + 3 = 6\n// ABC = (1+2+3) * 2 = 12 (ALL letters are in uppercase)\n// Abc = 1 + 2 + 3 = 6 (NOT ALL letters are in uppercase)\n\n// 6 + 12 + 6 = 24</code></pre><h3><span>Examples</span></h3><pre><code>getSentenceValue(\"HELLO world\") ➞ 176\n\ngetSentenceValue(\"Edabit is LEGENDARY\") ➞ 251\n\ngetSentenceValue(\"Her seaside sea-shelling business is really booming!\") ➞ 488</code></pre><h3><span>Notes</span></h3><ul><li><span>Ignore spaces and punctuation.</span></li><li><span>Remember that the value of a </span><em><span>word</span></em><span> isn't doubled unless </span><em><span>all</span></em><span> the letters in it are </span><em><span>uppercase</span></em><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getSentenceValue('abc ABC Abc'), 24)",
			"Test.assertEquals(getSentenceValue('HELLO world'), 176)",
			"Test.assertEquals(getSentenceValue('Edabit is Legendary'), 160)",
			"Test.assertEquals(getSentenceValue('Her seaside sea-shelling business is really booming!'), 488)",
			"Test.assertEquals(getSentenceValue('edabit Edabit EDABIT'), 164)",
			"Test.assertEquals(getSentenceValue('expensive words'), 198)",
			"Test.assertEquals(getSentenceValue('FISH AND CHIPS'), 232)",
			"Test.assertEquals(getSentenceValue('this sentence is like a piece of hay in a needle stack'), 423)",
			"Test.assertEquals(getSentenceValue(\"CAN YOU STOP SHOUTING?! I CAN'T HEAR MYSELF THINK!!!\"), 966)",
			"Test.assertEquals(getSentenceValue('a whisper in the wind...'), 205)",
			"Test.assertEquals(getSentenceValue(',.;[,.;][,.;[,.][,.;,.]['), 0)",
			"Test.assertEquals(getSentenceValue(\"Isn't it funny how the word BIG is physically smaller than the word small?\"), 777)",
			"Test.assertEquals(getSentenceValue('this is a really pricey sentence: ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'), 2503)",
			"Test.assertEquals(getSentenceValue('                    '), 0)",
			"Test.assertEquals(getSentenceValue(''), 0)",
			"Test.assertEquals(getSentenceValue('Oranges and APPLES'), 236)",
			"Test.assertEquals(getSentenceValue('Edabit is LEGENDARY'), 251)",
			"​",
			"// made by @Joshua Señoron"
		],
		"starterFn": [
			"1\nfunction getSentenceValue(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KKFx2xWbvR4NhyqwM"
	},
	{
		"title": "Inside, not Outside a Box",
		"description": "<p><span>Write a function that returns the number of </span><strong><span>distinct items</span></strong><span> inside a box. Do </span><strong><span>not</span></strong><span> count items outside the box.</span></p><h3><span>Examples</span></h3><pre><code>count([\n  \"??????\",\n  \"?####?\",\n  \"?#&amp;!#?\",\n  \"@#^Z#?\",\n  \"$####?\"\n]) ➞ 4\n\ncount([\n  \"??????\",\n  \"?####?\",\n  \"?#ZZ#?\",\n  \"@#ZZ#?\",\n  \"$####?\",\n  \"AAAAAA\"\n]) ➞ 1\n\ncount([\n  \"AAAAA\",\n  \"AAA##\",\n  \"AAA##\",\n  \"AAAAA\",\n  \"AAAAA\"\n]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Return </span><code>0</code><span> if the box is empty or too small to fit anything.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(count(",
			"[\"??????\",",
			"\"?####?\",",
			"\"?#&!#?\",",
			"\"@#^Z#?\",",
			"\"$####?\"]), 4)",
			"​",
			"Test.assertEquals(count(",
			"[\"??????\",",
			"\"?####?\",",
			"\"?#ZZ#?\",",
			"\"@#ZZ#?\",",
			"\"$####?\", ",
			"\"AAAAAA\"]), 1)",
			"​",
			"Test.assertEquals(count(",
			"[\"??????\",",
			"\"?####?\",",
			"\"?#  #?\",",
			"\"@#  #?\",",
			"\"$####?\", ",
			"\"AAAAAA\"]), 0)",
			"​",
			"Test.assertEquals(count(",
			"[\"??????Z\",",
			"\"Z?####?V\","
		],
		"starterFn": [
			"1\nfunction count(box) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9Wvy5ogsYeXjyzMxo"
	},
	{
		"title": "Strings & Frets",
		"description": "<p><span>Write a function that gets a string number and a fret of a 6-string guitar in 'standard tuning' and return the corresponding note. For this challenge we use a 24 fret model.</span></p><p><span>The notes are:</span></p><pre><code>C, C#/Db, D, D#/Eb, E, F, F#/Gb, G, G#/Ab, A, A#/Bb, B</code></pre><p><span>Try not to use a 2 dimensional array. Look at the image on the bottom to see the note names on the guitar neck.</span></p><h3><span>Examples</span></h3><pre><code>stringFret(2, 10) ➞ \"A\"\n\nstringFret(0, 16) ➞ \"Invalid input\"\n\nstringFret(2, 19) ➞ \"F#/Gb\"\n\nstringFret(3, 0) ➞ \"G\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If the string or fret number isn't correct return \"Invalid input\".</span></li><li><a target=\"_blank\" href=\"https://edabit-challenges.s3.amazonaws.com/24-frets.png\"><span>24 frets on the guitar neck.</span></a></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(stringFret(2, 10), \"A\")",
			"Test.assertEquals(stringFret(6, 3), \"G\")",
			"Test.assertEquals(stringFret(1, 18), \"A#/Bb\")",
			"Test.assertEquals(stringFret(0, 16), \"Invalid input\")",
			"Test.assertEquals(stringFret(3, 1), \"G#/Ab\")",
			"Test.assertEquals(stringFret(5, 3), \"C\")",
			"Test.assertEquals(stringFret(5, 25), \"Invalid input\")",
			"Test.assertEquals(stringFret(6, 13), \"F\")",
			"Test.assertEquals(stringFret(4, 18), \"G#/Ab\")",
			"Test.assertEquals(stringFret(5, 0), \"A\")",
			"Test.assertEquals(stringFret(4, 6), \"G#/Ab\")",
			"Test.assertEquals(stringFret(4, 20), \"A#/Bb\")",
			"Test.assertEquals(stringFret(7, 10), \"Invalid input\")",
			"Test.assertEquals(stringFret(5, 0), \"A\")",
			"Test.assertEquals(stringFret(3, 14), \"A\")",
			"Test.assertEquals(stringFret(2, 19), \"F#/Gb\")",
			"Test.assertEquals(stringFret(4, 5), \"G\")",
			"Test.assertEquals(stringFret(6, 10), \"D\")",
			"Test.assertEquals(stringFret(2, 10), \"A\")",
			"Test.assertEquals(stringFret(3, 0), \"G\")"
		],
		"starterFn": [
			"1\nfunction stringFret(st, fr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9c5nHopKXkZH6zXij"
	},
	{
		"title": "Track the Robot (Part 2)",
		"description": "<p><span>This robot roams around a 2D grid. It starts at </span><code>(0, 0)</code><span> facing North. After each time it moves, the robot rotates 90 degrees clockwise. Given the amount the robot has moved each time, you have to calculate the robot's final position.</span></p><p><span>To illustrate, if the robot is given the movements </span><code>20, 30, 10, 40</code><span> then it will move:</span></p><ul><li><span>20 steps North, now at </span><code>(0, 20)</code></li><li><span>30 steps East, now at </span><code>(30, 20)</code></li><li><span>10 steps South. now at </span><code>(30, 10)</code></li><li><span>40 steps West, now at </span><code>(-10, 10)</code></li></ul><p><span>...and will end up at coordinates </span><code>(-10, 10)</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>trackRobot(20, 30, 10, 40) ➞ [-10, 10]\n\ntrackRobot() ➞ [0, 0]\n// No movement means the robot stays at (0, 0).\n\ntrackRobot(-10, 20, 10) ➞ [20, -20]\n// The amount to move can be negative.</code></pre><h3><span>Notes</span></h3><p><span>Each movement is an integer (whole number).</span></p>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(trackRobot(20, 30, 10, 40), [-10, 10])",
			"Test.assertSimilar(trackRobot(10, -10, -10, 10), [-20, 20])",
			"Test.assertSimilar(trackRobot(),[0, 0])",
			"Test.assertSimilar(trackRobot(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), [6, 5])",
			"Test.assertSimilar(trackRobot(1, 0, 2, 0, 3, 0, 4, 0, 5, 0), [0, 3])",
			"Test.assertSimilar(trackRobot(0, 1, 0, 2, 0, 3, 0, 4, 0, 5), [3, 0])"
		],
		"starterFn": [
			"1\nfunction trackRobot(...steps) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jfpfpH6w42tZeRo2T"
	},
	{
		"title": "Product of Digits of Sum",
		"description": "<p><span>Create a function that takes numbers as arguments, adds them together, and returns the product of digits until the answer is only 1 digit long.</span></p><h3><span>Examples</span></h3><pre><code>sumDigProd(16, 28) ➞ 6\n// 16 + 28 = 44\n// 4 * 4 =  16\n// 1 * 6 = 6\n\nsumDigProd(0) ➞ 0\n\nsumDigProd(1, 2, 3, 4, 5, 6) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>The input of the function is at least one number.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sumDigProd(8, 16, 89, 3), 6)",
			"Test.assertEquals(sumDigProd(16, 28), 6)",
			"Test.assertEquals(sumDigProd(9), 9)",
			"Test.assertEquals(sumDigProd(26, 497, 62, 841), 6)",
			"Test.assertEquals(sumDigProd(0), 0)",
			"Test.assertEquals(sumDigProd(17737, 98723, 2), 6)",
			"Test.assertEquals(sumDigProd(123, -99), 8)",
			"Test.assertEquals(sumDigProd(9, 8), 7)",
			"Test.assertEquals(sumDigProd(167, 167, 167, 167, 167, 3), 8)",
			"Test.assertEquals(sumDigProd(111111111), 1)",
			"Test.assertEquals(sumDigProd(98526, 54, 863, 156489, 45, 6156), 2)",
			"Test.assertEquals(sumDigProd(999, 999), 8)",
			"Test.assertEquals(sumDigProd(1, 2, 3, 4, 5, 6), 2)",
			"Test.assertEquals(sumDigProd(999, 2222), 2)",
			"Test.assertEquals(sumDigProd(8618, -2), 6)"
		],
		"starterFn": [
			"1\nfunction sumDigProd() {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Kzmyf4pLx66ZRsnWk"
	},
	{
		"title": "Persistence",
		"description": "<p><span>The additive persistence of an integer, </span><code>n</code><span>, is the number of times you have to replace </span><code>n</code><span> with the sum of its digits until </span><code>n</code><span> becomes a single digit integer.</span></p><p><span>The multiplicative persistence of an integer, </span><code>n</code><span>, is the number of times you have to replace </span><code>n</code><span> with the product of its digits until </span><code>n</code><span> becomes a single digit integer.</span></p><p><span>Create two functions that take an integer as an argument and:</span></p><ol><li><span>Return its additive persistence.</span></li><li><span>Return its multiplicative persistence.</span></li></ol><h3><span>Examples: Additive Persistence</span></h3><pre><code>additivePersistence(1679583) ➞ 3\n// 1 + 6 + 7 + 9 + 5 + 8 + 3 = 39\n// 3 + 9 = 12\n// 1 + 2 = 3\n// It takes 3 iterations to reach a single-digit number.\n\nadditivePersistence(123456) ➞ 2\n// 1 + 2 + 3 + 4 + 5 + 6 = 21\n// 2 + 1 = 3\n\nadditivePersistence(6) ➞ 0\n// Because 6 is already a single-digit integer.</code></pre><h3><span>Examples: Multiplicative Persistence</span></h3><pre><code>multiplicativePersistence(77) ➞ 4\n// 7 x 7 = 49\n// 4 x 9 = 36\n// 3 x 6 = 18\n// 1 x 8 = 8\n// It takes 4 iterations to reach a single-digit number.\n\nmultiplicativePersistence(123456) ➞ 2\n// 1 x 2 x 3 x 4 x 5 x 6 = 720\n// 7 x 2 x 0 = 0\n\nmultiplicativePersistence(4) ➞ 0\n// Because 4 is already a single-digit integer.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"// ADDITIVE PERSISTENCE",
			"Test.assertEquals(additivePersistence(5), 0)",
			"Test.assertEquals(additivePersistence(27), 1)",
			"Test.assertEquals(additivePersistence(58), 2)",
			"Test.assertEquals(additivePersistence(5789), 3)",
			"// MULTIPLICATIVE PERSISTENCE",
			"Test.assertEquals(multiplicativePersistence(7), 0)",
			"Test.assertEquals(multiplicativePersistence(1234567890), 1)",
			"Test.assertEquals(multiplicativePersistence(39), 3)",
			"Test.assertEquals(multiplicativePersistence(6788), 6)",
			"Test.assertEquals(multiplicativePersistence(277777788888899), 11)"
		],
		"starterFn": [
			"1\nfunction additivePersistence(n) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction multiplicativePersistence(n) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/vHvu4Wis8RhmQbwXm"
	},
	{
		"title": "Balanced Words",
		"description": "<p><span>We can assign a value to each character in a word, based on their position in the alphabet (a = 1, b = 2, ... , z = 26).  A </span><strong><span>balanced word</span></strong><span> is one where the sum of values on the left-hand side of the word equals the sum of values on the right-hand side. For odd length words, the middle character (balance point) is ignored.</span></p><p><span>Write a function that returns </span><code>true</code><span> if the word is balanced, and </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>balanced(\"zips\") ➞ true\n// \"zips\" = \"zi|ps\" = 26+9|16+19 = 35|35 = true\n\nbalanced(\"brake\") ➞ false\n// \"brake\" = \"br|ke\" = 2+18|11+5 = 20|16 = false</code></pre><h3><span>Notes</span></h3><ul><li><span>All words will be lowercase, and have a minimum of 2 characters.</span></li><li><span>Palindromic words will always be balanced.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(balanced('at'), false)",
			"Test.assertEquals(balanced('forgetful'), false)",
			"Test.assertEquals(balanced('vegetation'), true)",
			"Test.assertEquals(balanced('disillusioned'), false)",
			"Test.assertEquals(balanced('abstract'), true)",
			"Test.assertEquals(balanced('clever'), false)",
			"Test.assertEquals(balanced('conditionalities'), true)",
			"Test.assertEquals(balanced('seasoning'), true)",
			"Test.assertEquals(balanced('uptight'), false)",
			"Test.assertEquals(balanced('ticket'), false)",
			"Test.assertEquals(balanced('calculate'), false)",
			"Test.assertEquals(balanced('measure'), false)",
			"Test.assertEquals(balanced('join'), false)",
			"Test.assertEquals(balanced('anesthesiologies'), true)",
			"Test.assertEquals(balanced('command'), false)",
			"Test.assertEquals(balanced('graphite'), true)",
			"Test.assertEquals(balanced('quadratically'), true)",
			"Test.assertEquals(balanced('right'), false)",
			"Test.assertEquals(balanced('fossil'), true)",
			"Test.assertEquals(balanced('sparkling'), false)",
			"Test.assertEquals(balanced('dolphin'), true)",
			"Test.assertEquals(balanced('baseball'), true)",
			"Test.assertEquals(balanced('immense'), false)",
			"Test.assertEquals(balanced('pattern'), true)",
			"Test.assertEquals(balanced('hand'), false)",
			"Test.assertEquals(balanced('radar'), true)"
		],
		"starterFn": [
			"1\nfunction balanced(word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8QTBwLzAdaM8wkrXu"
	},
	{
		"title": "Primal Strength",
		"description": "<p><span>In number theory, a prime number is </span><strong><em><span>balanced</span></em></strong><span> if it is equidistant from the prime before it and the prime after it. It is therefore the arithmetic mean of those primes. For example, 5 is a balanced prime, two units away from 3, and two from 7. 211 is 12 units away from the previous prime, 199, and 12 away from the next, 223.</span></p><p><span>A prime that is greater than the arithmetic mean of the primes before and after it is called a </span><strong><em><span>strong</span></em></strong><span> prime. It is closer to the prime after it than the one before it. For example, the strong prime 17 is closer to 19 than it is to 13 (see note at bottom).</span></p><p><span>A prime that is lesser than the arithmetic mean of the primes before and after it is called </span><strong><em><span>weak</span></em></strong><span> prime. For example, 19.</span></p><p><span>Create a function that takes a prime number as input and returns </span><code>\"Strong\"</code><span> if it is a strong prime, </span><code>\"Weak\"</code><span> if it is a weak prime, or </span><code>\"Balanced\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>primalStrength(211) ➞ \"Balanced\"\n\nprimalStrength(17) ➞ \"Strong\"\n\nprimalStrength(19) ➞ \"Weak\"</code></pre><h3><span>Notes</span></h3><p><span>This definition of strong primes is not to be confused with strong primes as defined in cryptography, which are much more complicated than this. You are all welcome to make a challenge based on cryptographically strong primes.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(primalStrength(5), \"Balanced\")",
			"Test.assertEquals(primalStrength(211), \"Balanced\")",
			"Test.assertEquals(primalStrength(593), \"Balanced\")",
			"Test.assertEquals(primalStrength(1693), \"Strong\")",
			"Test.assertEquals(primalStrength(599), \"Strong\")",
			"Test.assertEquals(primalStrength(2203), \"Strong\")",
			"Test.assertEquals(primalStrength(19), \"Weak\")",
			"Test.assertEquals(primalStrength(2971), \"Weak\")",
			"Test.assertEquals(primalStrength(1493), \"Weak\")"
		],
		"starterFn": [
			"1\nfunction primalStrength(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/n3w4fqdaMuCB9bjgs"
	},
	{
		"title": "Count the Digits",
		"description": "<p><span>Create a function that will count the number of digits of a number. Conversion of the </span><em><span>number</span></em><span> to a </span><em><span>string</span></em><span> is </span><strong><span>not allowed</span></strong><span>, thus, the approach is either recursive or via loops.</span></p><h3><span>Examples</span></h3><pre><code>digitsCount(0) ➞ 1\n\ndigitsCount(12345)  ➞ 5\n\ndigitsCount(1289396387328) ➞ 13</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs are integers but some are in exponential form, so, deal with it accordingly.</span></li><li><span>A recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/uL2Hi8Aj3FDgW9F7q\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"logic",
			"numbers"
		],
		"tests": [
			"const noStrConvert = fn => !RegExp('`|String|\\'|\\\"', 'gm').test(fn)",
			"Test.assertNotEquals(noStrConvert(digitsCount), false, \"String manipulation is not allowed.\")",
			"​",
			"let [numVector, resVector] = [[",
			"  0, 12345, 1289396387328, -1232323, 3463463874638476,",
			"  -231.2e6, 1283939312321, -231273683, 3.2e6, 314890e3 ],[",
			"  1, 5, 13, 7, 16, 9, 13, 9, 7, 9 ]]",
			"for (let i in numVector) {",
			"  Test.assertEquals(digitsCount(numVector[i]), resVector[i])",
			"}"
		],
		"starterFn": [
			"1\nfunction digitsCount(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bxJH7XXXnX6G5NTxT"
	},
	{
		"title": "Not Quite Perfect",
		"description": "<p><span>A </span><strong><span>perfect</span></strong><span> number is a number that is equal to the sum of all its proper (non-self) divisors. Take 6 for example:</span></p><pre><code>6 = 1 + 2 + 3</code></pre><p><span>A number that is equal to the sum of all its proper divisors -- </span><em><span>provided that one of them is negative</span></em><span> -- is not quite perfect, but </span><strong><span>admirable</span></strong><span>.</span></p><p><span>To illustrate. The proper divisors of 12 are 1, 2, 3, 4, 6, totalling 16. However, if 2 is negative, the total would be 12, the number itself. 12 is therefore an admirable number.</span></p><pre><code>12 = 1 - 2 + 3 + 4 + 6</code></pre><p><span>Create a function that takes a number </span><code>n</code><span> as input.</span></p><ol><li><span>If </span><code>n</code><span> is perfect, return </span><code>\"Perfect\"</code><span>.</span></li><li><span>If </span><code>n</code><span> is admirable, return the proper divisor that must be rendered negative to make the sum of the proper divisors equal to </span><code>n</code><span>.</span></li><li><span>If </span><code>n</code><span> is neither perfect nor admirable, return </span><code>\"Neither\"</code><span>.</span></li></ol><h3><span>Examples</span></h3><pre><code>admirable(6) ➞ \"Perfect\"\n\nadmirable(12) ➞ 2\n\nadmirable(18) ➞ \"Neither\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(admirable(6), 'Perfect')",
			"Test.assertEquals(admirable(12), 2)",
			"Test.assertEquals(admirable(18), 'Neither')",
			"Test.assertEquals(admirable(496), 'Perfect')",
			"Test.assertEquals(admirable(138), 6)",
			"Test.assertEquals(admirable(612), 'Neither')",
			"Test.assertEquals(admirable(1876), 28)",
			"Test.assertEquals(admirable(5456), 496)"
		],
		"starterFn": [
			"1\nfunction admirable(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WEhe9MCnyZG8WhN9Z"
	},
	{
		"title": "[Color Conversion] RGB to HEX and HEX to RGB",
		"description": "<p><span>Create a function, that can convert RGB to HEX if the passed value is an object, or HEX to RGB if the value is a string.</span></p><ul><li><code>colorConversion(\"string\")</code><span> will convert HEX to RGB.</span></li><li><code>colorConversion({r: 235, g: 64, b: 52})</code><span> will convert RGB to HEX.</span></li></ul><h3><span>Rules</span></h3><ul><li><span>If \"R\", \"G\" or \"B\" value is not between 0 and 255, return </span><code>\"Not valid input\"</code><span>.</span></li><li><span>If the first character in the HEX string is a hash (#), then the string must not have more than 7 characters, else if it doesn't have the hash, it must not have more than 6 chraracters. If it isn't, return </span><code>\"Not valid input\"</code><span>.</span></li><li><span>The output HEX value, must have this syntax: \"#HEXVAL\".</span></li><li><span>The output RGB value, must have this syntax </span><code>(object): { r: NUM, g: NUM, b: NUM }</code></li></ul><h3><span>Examples</span></h3><pre><code>colorConversion(\"#ffffff\") ➞ {r: 255, g: 255, b: 255}\n\ncolorConversion(\"#ff0025\") ➞ {r: 255, g: 0, b: 37}\n\ncolorConversion({r: 40, g: 200, b: 125}) ➞ \"#28c87d\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If the number in R, G or B is less than 10, the HEX code must have a \"0\" before it; R, G and B values have to be numbers, not strings.</span></li><li><span>The HEX value (output) have to be </span><strong><span>lower case only</span></strong><span> (i.e. correct: #ffffff, wrong: #FFFFFF).</span></li></ul>",
		"publishedBy": "ffraca",
		"publishedByUrl": "https://edabit.com/user/jSQykNgWgYtr3vpZS",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"objects",
			"validation"
		],
		"tests": [
			"function isEquivalent(a, b){",
			"    var aProps = Object.getOwnPropertyNames(a);",
			"    var bProps = Object.getOwnPropertyNames(b);",
			"​",
			"    if(aProps.length != bProps.length){",
			"        return false;",
			"    }",
			"​",
			"    for(var i = 0; i < aProps.length; i++){",
			"        var propName = aProps[i];",
			"        if(a[propName] !== b[propName]){",
			"            return false;",
			"        }",
			"    }",
			"    return true;",
			"}",
			"​",
			"isEquivalent(colorConversion('#4f69c9'), {r: 79, g: 105, b: 201});",
			"isEquivalent(colorConversion('ffffff'), {r: 255, g: 255, b: 255});",
			"isEquivalent(colorConversion('#000000'), {r: 0, g: 0, b: 0});",
			"isEquivalent(colorConversion('#050106'), {r: 5, g: 1, b: 6});",
			"​",
			"Test.assertEquals(colorConversion({r: 126, g: 214, b: 131}), '#7ed683')",
			"Test.assertEquals(colorConversion({r: 255, g: 255, b: 255}), '#ffffff')",
			"​",
			"Test.assertEquals(colorConversion({r: 0, g: 0, b: 0}), '#000000')"
		],
		"starterFn": [
			"1\nfunction colorConversion(input) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7RBuf27avn8QNigQA"
	},
	{
		"title": "Number to Google",
		"description": "<p><span>Create a function that takes an array and returns a string.</span></p><ul><li><strong><span>0</span></strong><span> Repeat the actual decrypted value (using like this : 014 to repeat 14 times). </span><ul><li><em><span>Warning: When you start a repeat you can't stop it to add other numbers.</span></em></li></ul></li><li><strong><span>1, 2, 3, 4</span></strong><span> = g, o, l, e</span></li><li><strong><span>5</span></strong><span> Corresponding to up case of letter before this.</span></li><li><strong><span>6</span></strong><span> Add a point to the end.</span></li><li><strong><span>7</span></strong><span> Change case of the first letter.</span></li><li><strong><span>8</span></strong><span> Reverse the string.</span></li><li><strong><span>9</span></strong><span> Clear the actual decrypted string.</span></li></ul><h3><span>Examples</span></h3><pre><code>numToGoogle([\"12213467\"]) ➞ \"Google.\"\n\nnumToGoogle([\"12213467\", \"321\"]) ➞ \"Google.log\"\n\nnumToGoogle([\"12213467\", \"321\", \"122906\"]) ➞ \"Google.log\"\n\nnumToGoogle([\"15\", \"2502\", \"15\", 345]) ➞ \"GOOGLE\"\n\nnumToGoogle([\"15\", \"2502\", \"15\", 35, 45]) ➞ \"GOOGLE\"\n\nnumToGoogle([15, 202, 1, 3, 4]) ➞ \"Google\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures"
		],
		"tests": [
			"Test.assertEquals(numToGoogle([\"12213467\"]), \"Google.\")",
			"Test.assertEquals(numToGoogle([\"12213467\", \"321\"]), \"Google.log\")",
			"Test.assertEquals(numToGoogle([\"12213467\", \"321\", \"122906\"]), \"Google.log\")",
			"Test.assertEquals(numToGoogle([\"15\", \"2502\", \"15\",345]), \"GOOGLE\")",
			"Test.assertEquals(numToGoogle([\"15\", \"2502\", \"15\",35,45]), \"GOOGLE\")",
			"Test.assertEquals(numToGoogle([15,202,1,3,4]), \"Google\")",
			"Test.assertEquals(numToGoogle([\"1221348\"]), \"elgoog\")",
			"Test.assertEquals(numToGoogle([\"15345678\"]), \".ELG\")",
			"Test.assertEquals(numToGoogle([\"218\",\"6\",\"12\",6,1,2,]), \"go.go.go\")"
		],
		"starterFn": [
			"1\nfunction numToGoogle(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2o8GAmetGCkn5a68Y"
	},
	{
		"title": "Books and Book Ends",
		"description": "<p><span>Suppose a </span><strong><span>pair of identical characters</span></strong><span> serve as </span><strong><span>book ends</span></strong><span> for all characters in between them. Write a function that returns the </span><strong><span>total number of unique characters</span></strong><span> (books, so to speak) between all pairs of book ends.</span></p><p><span>The function will look like:</span></p><pre><code>countUniqueBooks(\"stringSequence\", \"bookEnd\")</code></pre><h3><span>Examples</span></h3><pre><code>countUniqueBooks(\"AZYWABBCATTTA\", \"A\") ➞ 4\n\n// 1st bookend group: \"AZYWA\" : 3 unique books: \"Z\", \"Y\", \"W\"\n// 2nd bookend group: \"ATTTA\": 1 unique book: \"T\"\n\ncountUniqueBooks(\"$AA$BBCATT$C$$B$\", \"$\") ➞ 3\n\ncountUniqueBooks(\"ZZABCDEF\", \"Z\") ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>No book characters will be identical to the bookend character.</span></li><li><span>There will always be an even number of bookends.</span></li><li><span>Return </span><code>0</code><span> if bookends contain zero books.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(countUniqueBooks(\"AZYWABBCATTTA\", \"A\"), 4)",
			"Test.assertEquals(countUniqueBooks(\"$AA$BBCATT$C$$B$\", \"$\"), 3)",
			"Test.assertEquals(countUniqueBooks(\"ZZABCDEF\", \"Z\"), 0)",
			"Test.assertEquals(countUniqueBooks(\"A#BBCD##GGA##!#\", \"#\"), 6)",
			"Test.assertEquals(countUniqueBooks(\"&AAAAAAAAAAAA&\", \"&\"), 1)",
			"Test.assertEquals(countUniqueBooks(\"&&&&&&&&\", \"&\"), 0)",
			"Test.assertEquals(countUniqueBooks(\"&A&&&&&&C&\", \"&\"), 2)",
			"Test.assertEquals(countUniqueBooks(\"&A&33333&C&\", \"&\"), 2)",
			"Test.assertEquals(countUniqueBooks(\"&3&3&3&\", \"&\"), 1)",
			"Test.assertEquals(countUniqueBooks(\"&4&3&3&\", \"&\"), 2)",
			"Test.assertEquals(countUniqueBooks(\"&AA&\", \"A\"), 0)",
			"Test.assertEquals(countUniqueBooks(\"AZAAABDZCCZZ\", \"Z\"), 3)",
			"Test.assertEquals(countUniqueBooks(\"AZAAABDZCCZZ\", \"A\"), 1)"
		],
		"starterFn": [
			"1\nfunction countUniqueBooks(s, bookend) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TkbyvmeqbGpSsHLq8"
	},
	{
		"title": "Headline Hash Tags",
		"description": "<p><span>Write a function that retrieves the </span><strong><span>top 3</span></strong><span> longest words of a newspaper headline and transforms them into hashtags. If multiple words tie for the same length, retrieve the word that occurs first.</span></p><h3><span>Examples</span></h3><pre><code>getHashTags(\"How the Avocado Became the Fruit of the Global Trade\")\n➞ [\"#avocado\", \"#became\", \"#global\"]\n\ngetHashTags(\"Why You Will Probably Pay More for Your Christmas Tree This Year\")\n➞ [\"#christmas\", \"#probably\", \"#will\"]\n\ngetHashTags(\"Hey Parents, Surprise, Fruit Juice Is Not Fruit\")\n➞ [\"#surprise\", \"#parents\", \"#fruit\"]\n\ngetHashTags(\"Visualizing Science\")\n➞ [\"#visualizing\", \"#science\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>If the title is less than 3 words, just order the words in the title by length in descending order (see example #4).</span></li><li><span>Punctuation does </span><strong><span>not</span></strong><span> count towards a word's length.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(getHashTags(\"How the Avocado Became the Fruit of the Global Trade\"), [\"#avocado\", \"#became\", \"#global\"])",
			"Test.assertSimilar(getHashTags(\"Why You Will Probably Pay More for Your Christmas Tree This Year\"), [\"#christmas\", \"#probably\", \"#will\"])",
			"Test.assertSimilar(getHashTags(\"Hey Parents, Surprise, Fruit Juice Is Not Fruit\"), [\"#surprise\", \"#parents\", \"#fruit\"])",
			"Test.assertSimilar(getHashTags(\"Visualizing Science\"), [\"#visualizing\", \"#science\"])",
			"Test.assertSimilar(getHashTags(\"Minecraft Stars on Youtube Share Secrets to Their Fame\"), [\"#minecraft\", \"#youtube\", \"#secrets\"])",
			"Test.assertSimilar(getHashTags(\"Are You an Elite Entrepreneur?\"), [\"#entrepreneur\", \"#elite\", \"#are\"])"
		],
		"starterFn": [
			"1\nfunction getHashTags(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ABiF6EsqRYMvogcgp"
	},
	{
		"title": "Find All Digits",
		"description": "<p><span>Taking each four digit number of an array in turn, return the </span><strong><span>number</span></strong><span> that you are on when all of the digits 0-9 have been discovered. If not all of the digits can be found, return </span><code>\"Missing digits!\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>findAllDigits([5175, 4538, 2926, 5057, 6401, 4376, 2280, 6137, 8798, 9083]) ➞ 5057\n// digits found:  517-  4-38  29-6  -0\n\nfindAllDigits([5719, 7218, 3989, 8161, 2676, 3847, 6896, 3370, 2363, 1381]) ➞ 3370\n// digits found:  5719  -2-8  3---  --6-  ----  --4-  ----  ---0\n\nfindAllDigits([4883, 3876, 7769, 9846, 9546, 9634, 9696, 2832, 6822, 6868]) ➞ \"Missing digits!\"\n// digits found:  48-3  --76  ---9  ----  -5--  ----  ----  2---\n// 0 and 1 are missing</code></pre><h3><span>Notes</span></h3><p><span>The digits can be discovered in </span><em><span>any</span></em><span> order.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(findAllDigits([3129, 7689, 7449, 4389, 5855, 9670, 9245, 1291, 7367, 1810]), 9670)",
			"Test.assertEquals(findAllDigits([2758, 3737, 3349, 5118, 7004, 6106, 8868, 6687, 2510, 8911]), 6106)",
			"Test.assertEquals(findAllDigits([5343, 6743, 2922, 2423, 7050, 5116, 3992, 2707, 2435, 5251]), \"Missing digits!\")",
			"Test.assertEquals(findAllDigits([4169, 4511, 1498, 6945, 7959, 2666, 7872, 3217, 5408, 8662]), 5408)",
			"Test.assertEquals(findAllDigits([7985, 7130, 4625, 7392, 4933, 7163, 7130, 2145, 1596, 6188]), 4625)",
			"Test.assertEquals(findAllDigits([4823, 1049, 9555, 9466, 2191, 9316, 1105, 4489, 8318, 7081]), 7081)",
			"Test.assertEquals(findAllDigits([9827, 4405, 6317, 6086, 8091, 7800, 8365, 2544, 3402, 7248]), 6317)",
			"Test.assertEquals(findAllDigits([2227, 7262, 9322, 8967, 4807, 8708, 3317, 6543, 9522, 7106]), 6543)",
			"Test.assertEquals(findAllDigits([8452, 7326, 6786, 1893, 6546, 8714, 6699, 1361, 4891, 9797]), \"Missing digits!\")",
			"Test.assertEquals(findAllDigits([2627, 1146, 3964, 6280, 9759, 6188, 8917, 9375, 4012, 4217]), 9759)",
			"Test.assertEquals(findAllDigits([1291, 6903, 5887, 8914, 3906, 1465, 8452, 4909, 4143, 6921]), 8914)",
			"Test.assertEquals(findAllDigits([7433, 8245, 9603, 1446, 8158, 8756, 5066, 4996, 5233, 2856]), 1446)",
			"Test.assertEquals(findAllDigits([4661, 1207, 8411, 2010, 2092, 2441, 7885, 3810, 7433, 2034]), 3810)",
			"Test.assertEquals(findAllDigits([9429, 6519, 3795, 7924, 3042, 3425, 1371, 7194, 7680, 9007]), 7680)",
			"Test.assertEquals(findAllDigits([6621, 9480, 8239, 4542, 9772, 5108, 6872, 5057, 9477, 3602]), 9772)",
			"Test.assertEquals(findAllDigits([9701, 3828, 7183, 2727, 5212, 6721, 5413, 2351, 4237, 8207]), 5413)",
			"Test.assertEquals(findAllDigits([3914, 9923, 8187, 1657, 4271, 9538, 3759, 4543, 3438, 1943]), \"Missing digits!\")",
			"Test.assertEquals(findAllDigits([6572, 3752, 9661, 7017, 8139, 2596, 3054, 2730, 1350, 2483]), 3054)",
			"Test.assertEquals(findAllDigits([2102, 4519, 4229, 8347, 2019, 7342, 7181, 8977, 1339, 9988]), \"Missing digits!\")",
			"Test.assertEquals(findAllDigits([4467, 2849, 5706, 7330, 9488, 2529, 8837, 2256, 3975, 7311]), 7311)"
		],
		"starterFn": [
			"1\nfunction findAllDigits(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5hsyLC2Ntgoqn2wAy"
	},
	{
		"title": "Area of Overlapping Rectangles",
		"description": "<p><span>Create a function that returns the area of the overlap between two rectangles. The function will receive two rectangles, each with the coordinates of two of its opposite angles.</span></p><h3><span>Examples</span></h3><pre><code>overlappingRectangles(\n  [{ x: 2, y: 1 }, { x: 5, y: 5 }],\n  [{ x: 3, y: 2 }, { x: 5, y: 7 }]\n) ➞ 6\n\noverlappingRectangles(\n  [{ x: 2, y: -9 }, { x: 13, y: -4 }],\n  [{ x: 5, y: -11 }, { x: 7, y: -2 }]\n) ➞ 10\n\noverlappingRectangles(\n  [{ x: -8, y: -7 }, { x: -4, y: 0 }],\n  [{ x: -5, y: -9 }, { x: -1, y: -2 }]\n) ➞ 5</code></pre><p><img alt=\"Example 1\" src=\"https://i.imgur.com/tTo4Cib.png\"></p><hr><p><img alt=\"Example 2\" src=\"https://i.imgur.com/uP3Lrqx.png\"></p><hr><p><img alt=\"Example 3\" src=\"https://i.imgur.com/mXkrRIV.png\"></p><h3><span>Notes</span></h3><ul><li><span>Coordinates can be positive or negative integers</span></li><li><span>Not all examples have overlaps!</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"objects"
		],
		"tests": [
			"// With overlaps",
			"Test.assertEquals(",
			"  overlappingRectangles(",
			"    [{ x: 2, y: 1 }, { x: 5, y: 5 }],",
			"    [{ x: 3, y: 2 }, { x: 5, y: 7 }]",
			"  ),",
			"  6",
			");",
			"Test.assertEquals(",
			"  overlappingRectangles(",
			"    [{ x: 2, y: -9 }, { x: 13, y: -4 }],",
			"    [{ x: 5, y: -11 }, { x: 7, y: -2 }]",
			"  ),",
			"  10",
			");",
			"Test.assertEquals(",
			"  overlappingRectangles(",
			"    [{ x: -8, y: -7 }, { x: -4, y: 0 }],",
			"    [{ x: -5, y: -9 }, { x: -1, y: -2 }]",
			"  ),",
			"  5",
			");",
			"Test.assertEquals(",
			"  overlappingRectangles(",
			"    [{ x: -11, y: 2 }, { x: -1, y: 6 }],",
			"    [{ x: -8, y: 2 }, { x: -4, y: 9 }]"
		],
		"starterFn": [
			"1\nfunction overlappingRectangles(rect1, rect2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dejHsfH2qWpgu4CGC"
	},
	{
		"title": "Guitar Tuner",
		"description": "<p><span>Create a function that takes guitar strings as an array of frequencies (numbers) and returns the display of a tuner as an array. You can find the frequencies of the strings on the Wikipedia page (check the </span><strong><span>Resources</span></strong><span> tab).</span></p><ul><li><span>The guitar strings are played 1st to 6th, High E to Low E.</span></li><li><span>If the guitar string matches, return </span><code>\"OK\"</code><span> for that guitar string.</span></li><li><span>If it's too low, return </span><code>\"&gt;•\"</code><span> for 1 or 2 percent off (the arrow means, tune up).</span></li><li><span>Return </span><code>\"&gt;&gt;•\"</code><span> if it's way off. For more than 3 percent.</span></li><li><span>If it's too high, return </span><code>\"•&lt;\"</code><span> for 1 or 2 percent, and </span><code>\"•&lt;&lt;\"</code><span> for more, (tune down).</span></li><li><span>Check the rounded percentages.</span></li><li><span>If </span><code>0</code><span> is given, the guitar string isn't played, return </span><code>\" - \"</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>tune([0, 246.94, 0, 0, 0, 80]) ➞ [\" - \", \"OK\", \" - \", \" - \", \" - \", \"&gt;&gt;•\"]\n\ntune([329, 246, 195, 146, 111, 82]) ➞ [\"OK\", \"OK\", \"&gt;•\", \"&gt;•\", \"•&lt;\", \"OK\" ]\n\ntune([329.63, 246.94, 196, 146.83, 110, 82.41]) ➞ [\"OK\", \"OK\", \"OK\", \"OK\", \"OK\", \"OK\"]</code></pre><h3><span>Notes</span></h3><p><span>Items in the array will always be numbers.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(tune([329.63,246.94,196,146.83,110,82.41]), ['OK', 'OK', 'OK', 'OK', 'OK', 'OK' ])",
			"Test.assertSimilar(tune([0,0,190,0,110,0]), [' - ', ' - ', '>>•', ' - ', 'OK', ' - ' ])",
			"Test.assertSimilar(tune([331,248,195,147,110,84]), ['OK', 'OK', '>•', 'OK', 'OK', '•<' ])",
			"Test.assertSimilar(tune([0,246.94,0,0,0,80]), [' - ', 'OK', ' - ', ' - ', ' - ', '>>•' ])",
			"Test.assertSimilar(tune([329,246,195,146,111,82]), ['OK', 'OK', '>•', '>•', '•<', 'OK' ])"
		],
		"starterFn": [
			"1\nfunction tune(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/P2kYTu2wxAyMmFhEq"
	},
	{
		"title": "Happy Numbers",
		"description": "<p><span>Given any number, we can create a new number by </span><strong><span>adding the sums of squares of digits of that number</span></strong><span>. For example, given </span><code>203</code><span>, our new number is </span><code>4 + 0 + 9 = 13</code><span>. If we repeat this process, we get a sequence of numbers:</span></p><pre><code>203 -&gt; 13 -&gt; 10 -&gt; 1 -&gt; 1</code></pre><p><span>Sometimes, like with </span><code>203</code><span>, the sequence reaches (and stays at) </span><code>1</code><span>. Numbers like this are called </span><strong><span>happy</span></strong><span>.</span></p><p><span>Not all numbers are happy. If we started with </span><code>11</code><span>, the sequence would be:</span></p><pre><code>11 -&gt; 2 -&gt; 4 -&gt; 16 -&gt; ...</code></pre><p><span>This sequence will never reach </span><code>1</code><span>, and so the number </span><code>11</code><span> is called </span><strong><span>unhappy</span></strong><span>.</span></p><p><span>Given a positive whole number, you have to determine whether that number is happy or unhappy.</span></p><h3><span>Examples</span></h3><pre><code>happy(203) ➞ true\n\nhappy(11) ➞ false\n\nhappy(107) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>You can assume </span><em><span>(and it is actually true!)</span></em><span> that all positive whole numbers are either happy or unhappy. Any happy number will have a </span><code>1</code><span> in its sequence, and every unhappy number will have a </span><code>4</code><span> in its sequence.</span></li><li><span>The only numbers passed to your function will be positive whole numbers.</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"loops",
			"validation"
		],
		"tests": [
			"// Between 100 and 110 the happy numbers are 100, 103, 109",
			"Test.assertEquals(happy(100), true)",
			"Test.assertEquals(happy(101), false)",
			"Test.assertEquals(happy(102), false)",
			"Test.assertEquals(happy(103), true)",
			"Test.assertEquals(happy(104), false)",
			"Test.assertEquals(happy(105), false)",
			"Test.assertEquals(happy(106), false)",
			"Test.assertEquals(happy(107), false)",
			"Test.assertEquals(happy(108), false)",
			"Test.assertEquals(happy(109), true)",
			"Test.assertEquals(happy(110), false)"
		],
		"starterFn": [
			"1\nfunction happy(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EhGY9aaNHiCqqpnL9"
	},
	{
		"title": "Spoonerisms",
		"description": "<p><span>A spoonerism is when the first letters / sounds of two words are transposed onto one another. Create a function that takes a two-word string and performs a spoonerism on the phrase.</span></p><h3><span>Examples</span></h3><pre><code>spoonerise(\"history lecture\") ➞ \"listory hecture\"\n\nspoonerise(\"loud noises\") ➞ \"noud loises\"\n\nspoonerise(\"chow mein\") ➞ \"mow chein\"\n\nspoonerise(\"edabit rules!\") ➞ \"redabit ules!\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Only two words will be parsed into the function. Don't worry about handling more than two.</span></li><li><span>You won't always just have to swap the first letters, take care to notice which letters have been switched in the examples (notice the difference between vowel-starting and consonant-starting words).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(spoonerise(\"crushing failure\"), \"fushing crailure\")",
			"Test.assertEquals(spoonerise(\"christmas eve\"), \"istmas chreve\")",
			"Test.assertEquals(spoonerise(\"highlighter fluid\"), \"flighlighter huid\")",
			"Test.assertEquals(spoonerise(\"chocolate biscuits\"), \"bocolate chiscuits\")",
			"Test.assertEquals(spoonerise(\"edabit rules!\"), \"redabit ules!\")"
		],
		"starterFn": [
			"1\nfunction spoonerise(phrase) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CCAEMfHcmrvSwA4KR"
	},
	{
		"title": "All Pairs that Sum to Target",
		"description": "<p><span>Create a function that returns all </span><strong><span>pairs</span></strong><span> of numbers in an array that sum to a target. Sort the pairs in ascending order with respect to the smaller number, then order each pair in this order: </span><code>[smaller, larger]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>allPairs([2, 4, 5, 3], 7) ➞ [[2, 5], [3, 4]]\n// 2 + 5 = 7, 3 + 4 = 7\n\nallPairs([5, 3, 9, 2, 1], 3) ➞ [[1, 2]]\n\nallPairs([4, 5, 1, 3, 6, 8], 9) ➞ [[1, 8], [3, 6], [4, 5]]\n// Sorted: 1 &lt; 3 &lt; 4; each pair is ordered [smaller, larger]</code></pre><h3><span>Notes</span></h3><ul><li><span>If no pairs are found, return an empty array </span><code>[]</code><span>.</span></li><li><span>You are only allowed to use each number once in a pair.</span></li><li><span>See Comments for a hint.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(allPairs([2, 4, 5, 3], 7), [[2, 5], [3, 4]])",
			"Test.assertSimilar(allPairs([5, 3, 9, 2, 1], 3), [[1, 2]])",
			"Test.assertSimilar(allPairs([4, 5, 1, 3, 6, 8], 9), [[1, 8], [3, 6], [4, 5]])",
			"Test.assertSimilar(allPairs([5, 2], 14), [])",
			"Test.assertSimilar(allPairs([5, 5, 2], 14), [])",
			"Test.assertSimilar(allPairs([8, 7, 7, 2, 4, 6], 14), [[6, 8], [7, 7]])",
			"Test.assertSimilar(allPairs([8, 7, 2, 4, 6], 14), [[6, 8]])",
			"Test.assertSimilar(allPairs([1, 3, 5, 4, 0], 4), [[0, 4], [1, 3]])",
			"Test.assertSimilar(allPairs([1, 3, 5, 4, 0, 2], 4), [[0, 4], [1, 3]])",
			"Test.assertSimilar(allPairs([1, 3, 5, 4, 0, 2, 2], 4), [[0, 4], [1, 3], [2, 2]])"
		],
		"starterFn": [
			"1\nfunction allPairs(arr, target) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KYeCAfYxsvomapQg2"
	},
	{
		"title": "Fauna in Chitwan National Park",
		"description": "<p><span>Create a function that takes a string containing both name and number of animals and plants that may or may not be found in Chitwan National Park. The function should return a array of tuples where first element in the tuple is animal name and second element in the tuple is number of that particular animal that is found in Chitwan National Park.</span></p><h3><span>Animals Present in Chitwan National Park</span></h3><pre><code>animals = [\"muggercrocodile\", \"one-hornedrhino\", \"python\", \"moth\", \"monitorlizard\", \"bengaltiger\"]</code></pre><h3><span>Examples</span></h3><pre><code>faunaNumber(\"There are 24 one-hornedrhino, 50 python and 20000 mango.\") ➞ [{\"one-hornedrhino\": 24}, {\"python\": 50}]\n// Mango not present in animal array.\n\nfaunaNumber(\"There are 244 bengaltiger, 200 monitorlizard and 5000 apples.\") ➞ [{\"bengaltiger\": 244}, {\"monitorlizard\": 200}]\n// Apples not present in animal array.</code></pre><h3><span>Notes</span></h3><ul><li><span>Input contains name and number of both animals and plants.</span></li><li><span>If there is no match, return an empty array.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"logic",
			"regex"
		],
		"tests": [
			"Test.assertSimilar(faunaNumber(\"There are 24 one-hornedrhino, 50 python and 20000 bees.\"), [{'one-hornedrhino': 24}, {'python': 50}])",
			"Test.assertSimilar(faunaNumber(\"There are 244 bengaltiger, 200 monitorlizard and 5000 apples.\"), [{'bengaltiger': 244}, {'monitorlizard': 200}])",
			"Test.assertSimilar(faunaNumber(\"There are 2444 saltrees, 2000 cobra and 5000 mangotrees.\"), [])",
			"Test.assertSimilar(faunaNumber(\"There are 180 muggercrocodile, 20 krait and 500 taipan.\"), [{'muggercrocodile': 180}])"
		],
		"starterFn": [
			"1\nfunction faunaNumber(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aRtf5uRhgqTapqsuT"
	},
	{
		"title": "Harshad Numbers",
		"description": "<p><strong><span>Harshad/Niven</span></strong><span> numbers are positive numbers that are divisible by the sum of their digits. All single-digit numbers are Harshad numbers.</span></p><p><span>For example, 27 is a Harshad number as 2 + 7 = 9, and 9 is a divisor of 27.</span></p><p><span>Harshad numbers can occur in consecutive clusters. The numbers 1 through 10 are Harshad numbers. The numbers 132 and 133 are both Harshad numbers. The numbers 1014, 1015, 1016, 1017 are Harshad numbers.</span></p><p><span>Create a function that takes a number and returns an array of two elements. The first element is the length of the Harshad cluster of which the number is a part. The second is its order in the cluster.</span></p><h3><span>Examples</span></h3><pre><code>harshad(5) ➞ [10, 5]\n// cluster = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// The second element should be the layman order in the\n// cluster, not the programming index.\n\nharshad(133) ➞ [2, 2]\n// cluster = [132, 133]\n\nharshad(82) ➞ [0, 0]\n// Not a Harshad number, so cluster length is 0, position is 0.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(harshad(5),[10,5])",
			"Test.assertSimilar(harshad(133),[2,2])",
			"Test.assertSimilar(harshad(82),[0,0])",
			"Test.assertSimilar(harshad(72),[1,1])",
			"Test.assertSimilar(harshad(12751223),[6,4])",
			"Test.assertSimilar(harshad(5831),[3,1])",
			"Test.assertSimilar(harshad(10309),[4,3])",
			"Test.assertSimilar(harshad(7384),[0,0])",
			"Test.assertSimilar(harshad(2584),[1,1])",
			"// Test.assertSimilar(harshad(10810245632),[8,3])"
		],
		"starterFn": [
			"1\nfunction harshad(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3Wz6z3LpzSNydGaJA"
	},
	{
		"title": "Powerful Numbers",
		"description": "<p><span>Given a positive number x:</span></p><pre><code>p = (p1, p2, …)\n// Set of *prime* factors of x</code></pre><p><span>If the square of every item in p is also a factor of x, then x is said to be a </span><strong><em><span>powerful</span></em></strong><span> number.</span></p><p><span>Create a function that takes a number and returns </span><code>true</code><span> if it's powerful, </span><code>false</code><span> if it's not.</span></p><h3><span>Examples</span></h3><pre><code>isPowerful(36) ➞ true\n// p = (2, 3) (prime factors of 36)\n// 2^2 = 4 (factor of 36)\n// 3^2 = 9 (factor of 36)\n\nisPowerful(27) ➞ true\n\nisPowerful(674) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPowerful(36), true)",
			"Test.assertEquals(isPowerful(27), true)",
			"Test.assertEquals(isPowerful(32), true)",
			"Test.assertEquals(isPowerful(72), true)",
			"Test.assertEquals(isPowerful(243), true)",
			"Test.assertEquals(isPowerful(968), true)",
			"Test.assertEquals(isPowerful(951), false)",
			"Test.assertEquals(isPowerful(144), true)",
			"Test.assertEquals(isPowerful(674), false)",
			"Test.assertEquals(isPowerful(600), false)",
			"Test.assertEquals(isPowerful(500), true)",
			"Test.assertEquals(isPowerful(320), false)",
			"Test.assertEquals(isPowerful(720), false)"
		],
		"starterFn": [
			"1\nfunction isPowerful(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qBHiycz67g7BrM9h5"
	},
	{
		"title": "Word Nests (Part 2)",
		"description": "<p><span>A word nest is created by taking a starting word, and generating a new string by placing the word inside itself. This process is then repeated.</span></p><p><span>Nesting 3 times with the word \"incredible\":</span></p><pre><code>start  = incredible\nfirst  = incre(incredible)dible\nsecond = increin(incredible)credibledible\nthird  = increinincr(incredible)ediblecredibledible</code></pre><p><span>The final nest is </span><code>increinincrincredibleediblecredibledible</code><span> (depth = 3)</span></p><p><span>Valid word nests can always be </span><em><span>collapsed</span></em><span> to show the starting word, by reversing the process above:</span></p><pre><code>word = \"incredible\"\nnest = \"increinincrincredibleediblecredibledible\"\n\nSteps:\n=&gt; \"increinincrincredibleediblecredibledible\"   # starting nest\n=&gt; \"increinincr(incredible)ediblecredibledible\" # find word in nest\n=&gt; \"increinincr            ediblecredibledible\" # remove word\n=&gt; \"increinincrediblecredibledible\"             # join remaining halves\n=&gt; \"increin(incredible)credibledible\"           # find word in nest...\n\n... repeat steps until single word remains\n\n=&gt; \"incredible\" (return true as \"incredible\" = word)</code></pre><p><span>When </span><em><span>in</span></em><span>valid word nests are collapsed, the starting word isn't found:</span></p><pre><code>word = \"spring\"\nnest = \"sprspspspringringringg\"\n\nSteps:\n=&gt; \"sprspspspringringringg\"   # starting nest\n=&gt; \"sprspsp(spring)ringringg\" # find word in nest\n=&gt; \"sprspsp        ringringg\" # remove word\n=&gt; \"sprspspringringg\"         # join remaining halves\n=&gt; \"sprsp(spring)ringg\"       # find word in nest...\n\n... repeat steps until single word remains\n\n=&gt; \"sprg\" (return false as \"sprig\" != \"spring\")</code></pre><p><span>Given a </span><em><span>starting word</span></em><span> and a </span><em><span>final word nest</span></em><span>, return </span><code>true</code><span> if the word nest is valid. Return </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>validWordNest(\"deep\", \"deep\") ➞ true\n\nvalidWordNest(\"novel\", \"nonnonovnovnovelelelvelovelvel\") ➞ true\n\nvalidWordNest(\"painter\", \"ppaintppapaipainterinternteraintererainter\") ➞ false\n// Doesn't show starting word after being collapsed.\n\nvalidWordNest(\"shape\", \"sssshapeshapehahapehpeape\") ➞ false\n// Word placed outside, not inside itself.</code></pre><h3><span>Notes</span></h3><p><span>Valid word nests can only be created by repeatedly placing the word inside </span><em><span>itself</span></em><span>, so at any point when collapsing the nest, there should only be </span><em><span>one</span></em><span> instance of the word to be found.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(validWordNest(\"redeem\", \"rederedredrredredrerrrederedeememedeemedeemedeeemeemmedeemeemeemem\"), false)",
			"Test.assertEquals(validWordNest(\"survey\", \"sursursurvsurvssurssursusurveyrveyveyurveyveyurveyeyeyveyvey\"), true)",
			"Test.assertEquals(validWordNest(\"sensation\", \"sensatissenssensastssenensensasenssensensensationsationsationationtionsationatioionantionensationon\"), false)",
			"Test.assertEquals(validWordNest(\"feed\", \"feefeeded\"), false)",
			"Test.assertEquals(validWordNest(\"station\", \"ststatstasstatistationontationtionionation\"), true)",
			"Test.assertEquals(validWordNest(\"quarrel\", \"quaquarrquarrelrerell\"), false)",
			"Test.assertEquals(validWordNest(\"broadcast\", \"broadcbroadcastbroadcastast\"), false)",
			"Test.assertEquals(validWordNest(\"current\", \"currccurrcurcurrcucucurrentrrentrrententrententurrentent\"), true)",
			"Test.assertEquals(validWordNest(\"diet\", \"diet\"), true)",
			"Test.assertEquals(validWordNest(\"park\", \"pppappappapapapapparkarkarkrkrkrkrkkarkrkrarkark\"), false)",
			"Test.assertEquals(validWordNest(\"undermine\", \"undermiundermundermiunununderundermineminederminedermineneinene\"), true)",
			"Test.assertEquals(validWordNest(\"nail\", \"nannnailnailailil\"), false)",
			"Test.assertEquals(validWordNest(\"show\", \"sshssshowhowhowowhow\"), true)",
			"Test.assertEquals(validWordNest(\"demand\", \"dedemdeamademademandndndmandnd\"), false)",
			"Test.assertEquals(validWordNest(\"publicity\", \"publicppublicityublicityity\"), true)",
			"Test.assertEquals(validWordNest(\"relief\", \"rrerelirerreerrereliefliefelielifliefliefefliefelfeief\"), false)",
			"Test.assertEquals(validWordNest(\"pipe\", \"ppppppipeipeipeipeipeipe\"), true)",
			"Test.assertEquals(validWordNest(\"diagram\", \"diargdiadidiadiagramgramagramgramam\"), false)",
			"Test.assertEquals(validWordNest(\"salt\", \"ssaltalt\"), true)",
			"Test.assertEquals(validWordNest(\"pioneer\", \"pionpippipioppionpiopipioneeroneerneereerioneerneeroneerioneeroneereer\"), true)"
		],
		"starterFn": [
			"1\nfunction validWordNest(word, nest) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nm5jyuTK9KdgtYEjJ"
	},
	{
		"title": "Contact List",
		"description": "<p><span>Write a sorting function that takes in an array of names and sorts them </span><strong><span>by last name</span></strong><span> either alphabetically (</span><code>ASC</code><span>) or reverse-alphabetically (</span><code>DESC</code><span>).</span></p><h3><span>Examples</span></h3><pre><code>sortContacts([\n  \"John Locke\",\n  \"Thomas Aquinas\",\n  \"David Hume\",\n  \"Rene Descartes\"\n], \"ASC\") ➞ [\n  \"Thomas Aquinas\",\n  \"Rene Descartes\",\n  \"David Hume\",\n  \"John Locke\"\n]\n\n// Aquinas (A) &lt; Descartes (D) &lt; Hume (H) &lt; Locke (L)\n\nsortContacts([\n  \"Paul Erdos\",\n  \"Leonhard Euler\",\n  \"Carl Gauss\"\n], \"DESC\") ➞ [\n  \"Carl Gauss\",\n  \"Leonhard Euler\",\n  \"Paul Erdos\"\n]\n\n// Gauss (G) &gt; Erdos (ER) &gt; Euler (EU)\n\nsortContacts([], \"DESC\") ➞ []\n\nsortContacts(null, \"DESC\") ➞ []\n\nsortContacts(undefined, \"DESC\") ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>An array with a single name should be trivially returned.</span></li><li><span>An empty array, or an input of </span><code>null</code><span> or </span><code>undefined</code><span> should return an empty array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(sortContacts(['John Locke', 'Thomas Aquinas', 'David Hume', 'Rene Descartes'], 'ASC'), ['Thomas Aquinas', 'Rene Descartes', 'David Hume', 'John Locke'])",
			"Test.assertSimilar(sortContacts(['Paul Erdos', 'Leonhard Euler', 'Carl Gauss'], 'DESC'), ['Carl Gauss', 'Leonhard Euler', 'Paul Erdos'])",
			"Test.assertSimilar(sortContacts(['Michael Phelps', 'Jesse Owens', 'Michael Jordan', 'Usain Bolt'], 'DESC'), ['Michael Phelps', 'Jesse Owens', 'Michael Jordan', 'Usain Bolt'])",
			"Test.assertSimilar(sortContacts(['Al Gore', 'Barack Obama'], 'ASC'), ['Al Gore', 'Barack Obama'])",
			"Test.assertSimilar(sortContacts(['Albert Einstein'], 'ASC'), ['Albert Einstein'])",
			"Test.assertSimilar(sortContacts([], 'DESC'), [])",
			"Test.assertSimilar(sortContacts(null, 'DESC'), [])",
			"Test.assertSimilar(sortContacts(undefined, 'DESC'), [])"
		],
		"starterFn": [
			"1\nfunction sortContacts(names, sort) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oK8YTFzTDBzjQpmtH"
	},
	{
		"title": "Advanced Array Sort",
		"description": "<p><span>Create a function that takes in an array of </span><strong><span>numbers or strings</span></strong><span> and returns an array with the items from the original array stored in subarrays. Items of the same value should be in the same subarray.</span></p><h3><span>Examples</span></h3><pre><code>advancedSort([2, 1, 2, 1]) ➞ [[2, 2], [1, 1]]\n\nadvancedSort([5, 4, 5, 5, 4, 3]) ➞ [[5, 5, 5], [4, 4], [3]]\n\nadvancedSort([\"b\", \"a\", \"b\", \"a\", \"c\"]) ➞ [[\"b\", \"b\"], [\"a\", \"a\"], [\"c\"]]</code></pre><h3><span>Notes</span></h3><p><span>The subarrays should be returned in the order of each element's first appearance in the given array.</span></p>",
		"publishedBy": "Alex Nemechek",
		"publishedByUrl": "https://edabit.com/user/tXzqHX2abH7KJQqKg",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(advancedSort([1,2,1,2]) , [[1,1],[2,2]])",
			"Test.assertSimilar(advancedSort([2,1,2,1]) , [[2,2],[1,1]])",
			"Test.assertSimilar(advancedSort([3,2,1,3,2,1]) , [[3,3],[2,2],[1,1]])",
			"Test.assertSimilar(advancedSort([5,5,4,3,4,4]) , [[5,5],[4,4,4],[3]])",
			"Test.assertSimilar(advancedSort([80,80,4,60,60,3]),[[80,80],[4],[60,60],[3]])",
			"Test.assertSimilar(advancedSort(['c','c','b','c','b',1,1]),[['c','c','c'],['b','b'],[1,1]])",
			"Test.assertSimilar(advancedSort([1234, 1235, 1234, 1235, 1236, 1235]),[[1234, 1234],[1235, 1235, 1235],[1236]])",
			"Test.assertSimilar(advancedSort(['1234', '1235', '1234', '1235', '1236', '1235']),[['1234', '1234'],['1235', '1235', '1235'],['1236']])"
		],
		"starterFn": [
			"1\nfunction advancedSort(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SAeaT8pzJDkSoACsi"
	},
	{
		"title": "Averages Methods: Extending the Math Object",
		"description": "<p><span>In this exercise the goal is to extend the </span><code>Math()</code><span> object adding four methods for calculate different types of averages.</span></p><ul><li><strong><span>Arithmetic Mean:</span></strong><span> The division of the sum of the numbers by the quantity of numbers.</span><ul><li><span>avg of </span><span>[</span><span>A, B, C] ➞ (A + B + C) / 3</span></li></ul></li><li><strong><span>Quadratic Mean:</span></strong><span> Also called </span><em><span>Root Mean Square</span></em><span>, is the square root of the arithmetic mean of the squared numbers.</span><ul><li><span>qAvg of </span><span>[</span><span>A, B, C]  ➞  ²√ ( (A² + B² + C²) / 3 )</span></li></ul></li><li><strong><span>Harmonic Mean:</span></strong><span> is the </span><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Multiplicative_inverse\"><span>reciprocal</span></a><span> of the arithmetic mean of the numbers reciprocals.</span><ul><li><span>hAvg of </span><span>[</span><span>A, B, C]  ➞  ( (A⁻¹ + B⁻¹ + C⁻¹) / 3 )⁻¹</span></li></ul></li><li><strong><span>Geometric Mean:</span></strong><span> is the </span><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Nth_root\"><em><span>n-th</span></em><span> root</span></a><span> of the product of the numbers, where </span><em><span>n</span></em><span> is the quantity of numbers.</span><ul><li><span>gAvg of </span><span>[</span><span>A, B, C] ➞   ³√ (A </span><span>*</span><span> B </span><span>*</span><span> C)</span></li></ul></li></ul><p><span>For each average type build a function that, given a required parameter (the array containing the numbers) and an optional one (the precision, or number of floating digits to return) returns the result as a number.</span></p><h3><span>Examples</span></h3><pre><code>Math.avg([3, 5, 7])➞ 5\n//Precision is an optional parameter.\n// (3 + 5 + 7) / 3 = 15 / 3 = 5\n\nMath.qAvg([3, 5, 7], 1) ➞ 5.3\n// ²√ ( (3² + 5² + 7²) / 3 ) = ²√ (83 / 3) = 5.3\n\nMath.hAvg([3, 5, 7], 1) ➞ 4.4\n// Precision is required only for the final result.\n// (3⁻¹ + 5⁻¹ + 7⁻¹) / 3 )⁻¹ = (0.676... / 3)⁻¹ = 4.4\n\nMath.gAvg([3, 5, 7], 1) ➞ 4.7\n// ³√ (3 * 5 * 7) = ³√ 105 = 4.7</code></pre><h3><span>Notes</span></h3><ul><li><span>Pay attention to cumulative rounding errors! Precision is required only if the parameter is indicated and only for the final result.</span></li><li><span>All given arrays are valid ones containing positive numbers greater than zero, either integers or float.</span></li><li><strong><span>REVISION NOTE</span></strong><span>: </span><a target=\"_blank\" href=\"https://stackoverflow.com/questions/7308627/javascript-calculate-the-nth-root-of-a-number\"><span>Implementing a method for to get the </span><em><span>n</span></em><span>-th root of a number</span></a><span> can lead to rounding imprecisions if you use a combination of exponential and logarithm instead of a direct formula. Thanks to </span><strong><span>@Pustur</span></strong><span> and </span><strong><span>@xAlien95</span></strong><span>, see the </span><strong><span>Comments</span></strong><span> tab for more info. After the update, some old solution could fail the last test for the geometric average.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(Math.avg([3, 5, 7]), 5, \"Example #1\")",
			"Test.assertEquals(Math.qAvg([3, 5, 7], 1), 5.3, \"Example #2\")",
			"Test.assertEquals(Math.hAvg([3, 5, 7], 1), 4.4, \"Example #3\")",
			"Test.assertEquals(Math.gAvg([3, 5, 7], 1), 4.7, \"Example #4\")",
			"Test.assertEquals(Math.avg([1, 4, 4]), 3)",
			"Test.assertEquals(Math.qAvg([1, 4, 4], 3), 3.317)",
			"Test.assertEquals(Math.hAvg([1, 4, 4], 5), 2)",
			"Test.assertEquals(Math.gAvg([1, 4, 4], 7), 2.5198421)",
			"Test.assertEquals(Math.avg([0.11, 0.22, 0.33], 1), 0.2)",
			"Test.assertEquals(Math.qAvg([0.11, 0.22, 0.33], 6), 0.237627)",
			"Test.assertEquals(Math.hAvg([0.11, 0.22, 0.33], 4), 0.18)",
			"Test.assertEquals(Math.gAvg([0.11, 0.22, 0.33], 2), 0.2)",
			"Test.assertEquals(Math.avg([1, 23, 456, 7890]), 2092.5)",
			"Test.assertEquals(Math.qAvg([1, 23, 456, 7890]), 3951.599865877111)",
			"Test.assertEquals(Math.hAvg([1, 23, 456, 7890]), 3.8248304676450755)",
			"Test.assertEquals(Math.gAvg([1, 23, 456, 7890]), 95.37672823128207)"
		],
		"starterFn": [
			"1\nMath.avg = function(arr, prec) {",
			"2\n  // Arithmetic",
			"3\n}",
			"4\n​",
			"5\nMath.qAvg = function(arr, prec) {",
			"6\n  // Quadratic",
			"7\n}",
			"8\n​",
			"9\nMath.hAvg = function(arr, prec) {",
			"10\n  // Harmonic",
			"11\n}",
			"12\n​",
			"13\nMath.gAvg = function(arr, prec) {",
			"14\n  // Geometric",
			"15\n}"
		],
		"url": "https://edabit.com/challenge/rRXRZvkq6uK98uEWv"
	},
	{
		"title": "Parentheses Clusters",
		"description": "<p><span>Write a function that groups a string into </span><strong><span>parentheses cluster</span></strong><span>. Each cluster should be </span><strong><span>balanced</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>split(\"()()()\") ➞ [\"()\", \"()\", \"()\"]\n\nsplit(\"((()))\") ➞ [\"((()))\"]\n\nsplit(\"((()))(())()()(()())\") ➞ [\"((()))\", \"(())\", \"()\", \"()\", \"(()())\"]\n\nsplit(\"((())())(()(()()))\") ➞ [\"((())())\", \"(()(()()))\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>All input strings will </span><strong><span>only</span></strong><span> contain parentheses.</span></li><li><strong><span>Balanced</span></strong><span>: Every opening parens </span><code>(</code><span> must exist with its matching closing parens </span><code>)</code><span> in the same cluster.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(split(\"()()()\"), [\"()\", \"()\", \"()\"])",
			"Test.assertSimilar(split(\"\"), [])",
			"Test.assertSimilar(split(\"()()(())\"), [\"()\", \"()\", \"(())\"])",
			"Test.assertSimilar(split(\"(())(())\"), [\"(())\", \"(())\"])",
			"Test.assertSimilar(split(\"((()))\"), [\"((()))\"])",
			"Test.assertSimilar(split(\"()(((((((((())))))))))\"), [\"()\", \"(((((((((())))))))))\"])",
			"Test.assertSimilar(split(\"((())()(()))(()(())())(()())\"), [\"((())()(()))\", \"(()(())())\", \"(()())\"])",
			"Test.assertSimilar(split(\"((()))(())()()(()())\"), [\"((()))\", \"(())\", \"()\", \"()\", \"(()())\"])",
			"Test.assertSimilar(split(\"((())())(()(()()))\"), [\"((())())\", \"(()(()()))\"])",
			"Test.assertSimilar(split(\"(()(()()))()(((()))()(()))(()((()))(())())\"), [\"(()(()()))\", \"()\", \"(((()))()(()))\", \"(()((()))(())())\"])"
		],
		"starterFn": [
			"1\nfunction split(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uGN6vd3t2ycfnCpfv"
	},
	{
		"title": "Tic Tac Toe",
		"description": "<p><span>Given a 3x3 matrix of a completed tic-tac-toe game, create a function that returns whether the game is a win for </span><code>\"X\"</code><span>, </span><code>\"O\"</code><span>, or a </span><code>\"Draw\"</code><span>, where </span><code>\"X\"</code><span> and </span><code>\"O\"</code><span> represent themselves on the matrix, and </span><code>\"E\"</code><span> represents an empty spot.</span></p><h3><span>Examples</span></h3><pre><code>ticTacToe([\n  [\"X\", \"O\", \"X\"],\n  [\"O\", \"X\",  \"O\"],\n  [\"O\", \"X\",  \"X\"]\n]) ➞ \"X\"\n\nticTacToe([\n  [\"O\", \"O\", \"O\"],\n  [\"O\", \"X\", \"X\"],\n  [\"E\", \"X\", \"X\"]\n]) ➞ \"O\"\n\nticTacToe([\n  [\"X\", \"X\", \"O\"],\n  [\"O\", \"O\", \"X\"],\n  [\"X\", \"X\", \"O\"]\n]) ➞ \"Draw\"</code></pre><h3><span>Notes</span></h3><p><span>Make sure that if </span><strong><span>O</span></strong><span> wins, you return the letter </span><code>\"O\"</code><span> and not the integer </span><strong><span>0</span></strong><span> (zero) and if it's a draw, make sure you return the capitalised word </span><code>\"Draw\"</code><span>. If you return </span><code>\"X\"</code><span> or </span><code>\"O\"</code><span>, make sure they're capitalised too.</span></p>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(ticTacToe([",
			"  [\"X\", \"O\", \"X\"],",
			"  [\"O\", \"X\", \"O\"],",
			"  [\"O\", \"X\", \"X\"]",
			"]), \"X\")",
			"​",
			"Test.assertEquals(ticTacToe([",
			"  [\"O\", \"O\", \"O\"],",
			"  [\"O\", \"X\", \"X\"],",
			"  [\"E\", \"X\", \"X\"]",
			"]), \"O\")",
			"​",
			"Test.assertEquals(ticTacToe([",
			"  [\"X\", \"X\", \"O\"],",
			"  [\"O\", \"O\", \"X\"],",
			"  [\"X\", \"X\", \"O\"]",
			"]), \"Draw\")",
			"​",
			"Test.assertEquals(ticTacToe([",
			"  [\"X\", \"O\", \"O\"],",
			"  [\"X\", \"O\", \"O\"],",
			"  [\"X\", \"X\", \"X\"]",
			"]), \"X\")",
			"​",
			"Test.assertEquals(ticTacToe([",
			"  [\"X\", \"X\", \"O\"],"
		],
		"starterFn": [
			"1\nfunction ticTacToe(board) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jsukwFKLKJx2qLs5b"
	},
	{
		"title": "Alphabet Clash (Battle of the ASCII Values)",
		"description": "<p><span>In this challenge, you have to establish the points scored by two players (called </span><code>Player A</code><span> and </span><code>Player Z</code><span>) after an ASCII game session.</span></p><p><span>The two players place randomly the 26 letters of the English alphabet in a string and ten integers (ranged from 0 up to 25) in an array. Each integer represents the index of a letter to eliminate from the opponent's string so that the two players will afford the battle with two reduced strings of 16 letters.</span></p><h4><span>How the data appear and how the indices are eliminated</span></h4><pre><code>str_A = \"MZNHUVIOEPTWFJCBXKALSDQGYR\"\n// The 26 letters of Player A ...\n\nstr_Z = \"YFTUCSQOMGKPXNDWHIVJRABZEL\"\n// ... and the 26 letters of Player Z\n\nind_A = [1, 3, 2, 8, 10, 12, 9, 7, 4, 22]\n// The indices to eliminate into str_Z:\n// str_Z[1] is \"F\", delete it\n// str_Z[3] is \"U\", delete it\n// and so on ...\n\nind_Z = [21, 24, 25, 3, 4, 1, 8, 9, 10, 17]\n// ... and the indices to eliminate into str_A:\n// str_A[21] is \"D\", delete it!\n// str_A[24] is \"Y\", delete it!\n// and so on ...\n\nstr_A = \"MNVIOWFJCBXALSQG\"\n// Player A now has 16 letters\n// The relative order is the same as before the elimination ...\n\nstr_Z = \"YSQPNDWHIVJRAZEL\"\n// ... and so is for Player Z</code></pre><p><span>Now, you have to compare the letters of the players' strings progressively from the left, obtaining their ASCII values: during this series of </span><em><span>clashes</span></em><span>, the highest letter (meaning the greater ASCII value) gives to his possessor a number of points equal to its value less the one of its opponent. If the letters are equal for both players, they don't gain any points.</span></p><h4><span>How the points are assigned</span></h4><pre><code>str_A = \"MNVIOWFJCBXALSQG\"\n\nstr_Z = \"YSQPNDWHIVJRAZEL\"\n\n// Each letter has an ASCII value...\n// Starting from left:\n\nPlayer A = 77, 78, 86, 73, 79, 87, 70, 74, 67, 66, 88, 65, 76, 83, 81, 71\nPlayer Z = 89, 83, 81, 80, 78, 68, 87, 72, 73, 86, 74, 82, 65, 90, 69, 76\n\n// Each ASCII value is compared with its corresponding among the players\n\n// notation: Player A vs. Player Z\n\n// Clash 1: 77 vs. 89\n// Player Z wins and he obtains 89 - 77 = 12 points\n\n// Clash 2: 78 vs. 83\n// Player Z wins and he obtains 83 - 78 = 5 points\n\n// Clash 3: 86 vs. 81\n// Player A wins and he obtains 86 - 81 = 5 points\n\n// Clash 4: 73 vs, 80\n// Player Z wins and he obtains 80 - 73 = 7 points\n\n// Clash 5: 79 vs. 78\n// Player A wins and he obtains 79 - 78 = 1 point\n\n// and so on...</code></pre><p><span>You are given four parameters:</span></p><ul><li><code>str_A</code><span> is a string containing the 26 letters placed by </span><code>Player A</code><span> (only unique uppercase letters).</span></li><li><code>ind_A</code><span> is an array containing the 10 indices (as integers ranged from 0 up to 25) submitted by </span><code>Player A</code><span>.</span></li><li><code>str_Z</code><span> is the string of </span><code>Player Z</code><span>.</span></li><li><code>ind_Z</code><span> is the array of </span><code>Player Z</code><span>.</span></li></ul><p><span>You have to implement a function that returns the score of the players as an object with two entries named </span><code>\"A\"</code><span> and </span><code>\"Z\"</code><span> (in the given order):</span></p><pre><code>// Result of the step-by-step example game:\n\n{ A: 64, Z: 96 }</code></pre><h3><span>Examples</span></h3><pre><code>alphaClash(\n  \"MZNHUVIOEPTWFJCBXKALSDQGYR\",\n  [1, 3, 2, 8, 10, 12, 9, 7, 4, 22],\n  \"YFTUCSQOMGKPXNDWHIVJRABZEL\",\n  [21, 24, 25, 3, 4, 1, 8, 9, 10, 17]\n) ➞ { A: 64, Z: 96 }\n\nalphaClash(\n  \"OZLICHFRKYBVUDSPWXJNGTQAEM\",\n  [8, 6, 4, 2, 0, 10, 12, 14, 16, 18],\n  \"WKJVUNXHRFDIOBTCSLZMPYGQAE\",\n  [7, 5, 3, 1, 9, 11, 13, 15, 17, 19]\n) ➞ { A: 77, Z: 63 }\n\nalphaClash(\n  \"IBXOWMUSGYPADJCLVKETQRZHFN\",\n  [23, 19, 21, 22, 2, 4, 6, 1, 0, 12],\n  \"TOLFIYHGKWAXRBDQMVNJSPCUZE\",\n  [15, 8, 2, 1, 0, 25, 12, 13, 16, 14]\n) ➞ { A: 75, Z: 50 }</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember: </span><code>ind_A</code><span> are the indices choose by </span><code>Player A</code><span>, and they eliminate the letters of </span><code>str_Z</code><span> and </span><em><span>vice-versa</span></em><span> for </span><code>ind_Z</code><span>.</span></li><li><span>Points are gained by the possessor of the highest letter in every single clash, equal to the ASCII value of the higher letter less than the ASCII value of the lower letter. If two letters are the same it's a draw, and nothing happens.</span></li><li><span>The given data will be valid: only 26 different uppercased letters into strings, only 10 different integers into arrays. There aren't exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"data_structures",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(alphaClash(",
			"  \"MZNHUVIOEPTWFJCBXKALSDQGYR\",",
			"  [1, 3, 2, 8, 10, 12, 9, 7, 4, 22],",
			"  \"YFTUCSQOMGKPXNDWHIVJRABZEL\",",
			"  [21, 24, 25, 3, 4, 1, 8, 9, 10, 17]",
			"), {A: 64, Z: 96}, \"See the step-by-step example.\")",
			"​",
			"Test.assertSimilar(alphaClash(",
			"  \"OZLICHFRKYBVUDSPWXJNGTQAEM\",",
			"  [8, 6, 4, 2, 0, 10, 12, 14, 16, 18],",
			"  \"WKJVUNXHRFDIOBTCSLZMPYGQAE\",",
			"  [7, 5, 3, 1, 9, 11, 13, 15, 17, 19]",
			"), {A: 77, Z: 63})",
			"​",
			"Test.assertSimilar(alphaClash(",
			"  \"IBXOWMUSGYPADJCLVKETQRZHFN\",",
			"  [23, 19, 21, 22, 2, 4, 6, 1, 0, 12],",
			"  \"TOLFIYHGKWAXRBDQMVNJSPCUZE\",",
			"  [15, 8, 2, 1, 0, 25, 12, 13, 16, 14]",
			"), {A: 75, Z: 50})",
			"​",
			"Test.assertSimilar(alphaClash(",
			"  \"IBXOWMUSGYPADJCLVKETQRZHFN\",",
			"  [15, 8, 2, 1, 0, 25, 12, 13, 16, 14],",
			"  \"IBXOWMUSGYPADJCLVKETQRZHFN\",",
			"  [15, 8, 2, 1, 0, 25, 12, 13, 16, 14]"
		],
		"starterFn": [
			"1\nfunction alphaClash(str_A, ind_A, str_Z, ind_Z) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yvCfLsJiAC8xXn7oP"
	},
	{
		"title": "Most Common Last Vowel",
		"description": "<p><span>Create a function that takes in a sentence as input and returns the </span><strong><span>most common last vowel</span></strong><span> in the sentence as a single character string.</span></p><h3><span>Examples</span></h3><pre><code>commonLastVowel(\"Hello World!\") ➞ \"o\"\n\ncommonLastVowel(\"Watch the characters dance!\") ➞ \"e\"\n\ncommonLastVowel(\"OOI UUI EEI AAI\") ➞ \"i\"</code></pre><h3><span>Notes</span></h3><ul><li><span>There will only be one common last vowel in each sentence.</span></li><li><span>If the word has one vowel, treat the vowel as the last one </span><strong><span>even if it is at the start of the word</span></strong><span>.</span></li><li><span>The question asks you to compile all of the last vowels of each word and returns the vowel in the list which appears most often.</span></li><li><strong><span>y</span></strong><span> won't count as a vowel.</span></li><li><span>Return outputs in </span><strong><span>lowercase</span></strong><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"strings"
		],
		"tests": [
			"Test.assertEquals(commonLastVowel(\"Hello World!\"), \"o\")",
			"Test.assertEquals(commonLastVowel(\"Watch the characters dance!\"), \"e\")",
			"Test.assertEquals(commonLastVowel(\"OOI UUI EEI AAI\"), \"i\")",
			"Test.assertEquals(commonLastVowel(\"amy and acts\"), \"a\")",
			"Test.assertEquals(commonLastVowel(\"munch munch munch tasty tasty brunch\"), \"u\")"
		],
		"starterFn": [
			"1\nfunction commonLastVowel(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ewhZdFfjk6bNy9LtC"
	},
	{
		"title": "ABACABA Pattern",
		"description": "<p><span>The ABACABA pattern is a recursive fractal pattern that shows up in many places in the real world (such as in geometry, art, music, poetry, number systems, literature and higher dimensions).</span></p><p><span>Create a function that takes a number </span><code>n</code><span> as an argument and returns a </span><code>string</code><span> that represents the full pattern.</span></p><h3><span>Examples</span></h3><pre><code>abacabaPattern(1) ➞ \"A\"\n\nabacabaPattern(2) ➞ \"ABA\"\n\nabacabaPattern(3) ➞ \"ABACABA\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Result should always be uppercase.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on the ABACABA pattern.</span></li></ul>",
		"publishedBy": "Mahmoud Sagr",
		"publishedByUrl": "https://edabit.com/user/pdZMdmGowou47HESt",
		"language": "JavaScript",
		"tags": [
			"recursion"
		],
		"tests": [
			"const message = \"Unmatched.\"",
			"Test.assertEquals(abacabaPattern(1), \"A\", message)",
			"Test.assertEquals(abacabaPattern(2), \"ABA\", message)",
			"Test.assertEquals(abacabaPattern(3), \"ABACABA\", message)",
			"Test.assertEquals(abacabaPattern(4), \"ABACABADABACABA\", message)",
			"Test.assertEquals(abacabaPattern(5), \"ABACABADABACABAEABACABADABACABA\", message)",
			"Test.assertEquals(abacabaPattern(6), \"ABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABA\", message)",
			"Test.assertEquals(abacabaPattern(7), \"ABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABA\", message)",
			"Test.assertEquals(abacabaPattern(8), \"ABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAHABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABA\", message)",
			"Test.assertEquals(abacabaPattern(9), \"ABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAHABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAIABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAHABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABAGABACABADABACABAEABACABADABACABAFABACABADABACABAEABACABADABACABA\", message)"
		],
		"starterFn": [
			"1\nfunction abacabaPattern(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ny6ErMLiGWeL6up3v"
	},
	{
		"title": "Majority Vote",
		"description": "<p><span>Create a function that returns the </span><strong><span>majority vote</span></strong><span> in an array. A majority vote is an element that occurs </span><strong><span>&gt; N/2</span></strong><span> times in an array (where </span><strong><span>N</span></strong><span> is the length of the array).</span></p><h3><span>Examples</span></h3><pre><code>majorityVote([\"A\", \"A\", \"B\"]) ➞ \"A\"\n\nmajorityVote([\"A\", \"A\", \"A\", \"B\", \"C\", \"A\"]) ➞ \"A\"\n\nmajorityVote([\"A\", \"B\", \"B\", \"A\", \"C\", \"C\"]) ➞ null</code></pre><h3><span>Notes</span></h3><ul><li><span>The frequency of the majority element must be </span><strong><span>strictly greater</span></strong><span> than 1/2.</span></li><li><span>If there is no majority element, return </span><code>null</code><span>.</span></li><li><span>If the array is empty, return </span><code>null</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(majorityVote([\"A\", \"B\", \"B\", \"B\", \"A\", \"A\"]), null)",
			"Test.assertEquals(majorityVote([\"B\", \"B\", \"B\"]), \"B\")",
			"Test.assertEquals(majorityVote([\"A\", \"B\", \"B\"]), \"B\")",
			"Test.assertEquals(majorityVote([\"A\", \"A\", \"B\"]), \"A\")",
			"Test.assertEquals(majorityVote([\"A\", \"A\", \"A\", \"B\", \"C\", \"A\"]), \"A\")",
			"Test.assertEquals(majorityVote([\"B\", \"A\", \"B\", \"B\", \"C\", \"A\", \"B\", \"B\"]), \"B\")",
			"Test.assertEquals(majorityVote([\"A\", \"B\", \"B\", \"A\", \"C\", \"C\"]), null)",
			"Test.assertEquals(majorityVote([\"A\", \"B\"]), null)",
			"Test.assertEquals(majorityVote([\"A\"]), \"A\")",
			"Test.assertEquals(majorityVote([]), null)"
		],
		"starterFn": [
			"1\nfunction majorityVote(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aewSLr2r2LMSDhPxf"
	},
	{
		"title": "Pilish Strings",
		"description": "<p><span>In this challenge, transform a string into a series of </span><em><span>words</span></em><span> (or sequences of characters) separated by a single space, with each word having the same length given by the first 15 digits of the decimal representation of Pi:</span></p><pre><code>3.14159265358979</code></pre><p><span>If a string contains more characters than the total quantity given by the sum of the Pi digits, the unused characters are discarded and you will use only those needed to form 15 words.</span></p><pre><code>String = \"HOWINEEDADRINKALCOHOLICINNATUREAFTERTHEHEAVYLECTURESINVOLVINGQUANTUMMECHANICSANDALLTHESECRETSOFTHEUNIVERSE\"\n\nPi String = \"HOW I NEED A DRINK ALCOHOLIC IN NATURE AFTER THE HEAVY LECTURES INVOLVING QUANTUM MECHANICS\"\n\n// Every word has the same length of the digit of Pi found at the same index ?\n// \"HOW\" = 3, \"I\" = 1, \"NEED\" = 4, \"A\" = 1, \"DRINK\" = 5\n// \"ALCOHOLIC\" = 9, \"IN\" = 2, \"NATURE\" = 6, \"AFTER\" = 5\n// \"THE\" = 3, \"HEAVY\" = 5, \"LECTURES\" = 8, \"INVOLVING\" = 9\n// \"QUANTUM\" = 7, \"MECHANICS\" = 9\n// 3.14159265358979</code></pre><p><span>Also if a string contains less characters than the total quantity given by the sum of the Pi digits, in any case you have to respect the sequence of the digits to obtain the words.</span></p><pre><code>String = \"FORALOOP\"\n\nPi String = \"FOR A LOOP\"\n\n// Every word has the same length of the digit of Pi found at the same index ?\n// \"FOR\" = 3, \"A\" = 1, \"LOOP\" = 4\n// 3.14</code></pre><p><span>If the letters contained in the string don't match exactly the digits, in this case you will repeat the last letter until the </span><em><span>word</span></em><span> will have the correct length.</span></p><pre><code>String = \"CANIMAKEAGUESSNOW\"\n\nPi String = \"CAN I MAKE A GUESS NOWWWWWWW\"\n\n// Every word has the same length of the digit of Pi found at the same index ?\n// \"CAN\" = 3, \"I\" = 1, \"MAKE\" = 4, \"A\" = 1, \"GUESS\" = 5, \"NOW\" = 3\n// 3.14153 (Wrong!)\n// The length of the sixth word \"NOW\" (3)...\n// ...doesn't match the sixth digit of Pi (9)\n// The last letter \"W\" will be repeated...\n// ...until the length of the word will match the digit\n\n// \"CAN\" = 3, \"I\" = 1, \"MAKE\" = 4, \"A\" = 1, \"GUESS\" = 5, \"NOWWWWWWW\" = 9\n// 3.14159 (Correct!)</code></pre><p><span>If the given string is empty, an empty string has to be returned.</span></p><p><span>Given a string </span><code>txt</code><span>, implement a function that returns the same string formatted accordingly to the above instructions.</span></p><h3><span>Examples</span></h3><pre><code>pilishString(\"33314444\") ➞ \"333 1 4444\"\n// 3.14\n\npilishString(\"TOP\") ➞ \"TOP\"\n// 3\n\npilishString(\"X\")➞ \"XXX\"\n// \"X\" has to match the same length of the first digit (3)\n// The last letter of the word is repeated\n\npilishString(\"\")➞ \"\"</code></pre><h3><span>Notes</span></h3><ul><li><span>This challenge is a simplified concept inspired by the Pilish, a peculiar type of constrained writing that uses all the known possible digits of Pi. A potentially infinite text can be written allowing punctuation and a set of additional rules, that permits to avoid long sequences of small digits, substituting them with words bigger than 9 letters and making so appear the composition more similar to a </span><em><span>free-verse</span></em><span>  poem.</span></li><li><span>The </span><em><span>dot</span></em><span> that separes the integer part of Pi from the decimal part hasn't to be considered in the function: it's present in Instructions and Examples only for readability.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(pilishString(\"FORALOOP\"), \"FOR A LOOP\")",
			"Test.assertEquals(pilishString(\"CANIMAKEAGUESS\"), \"CAN I MAKE A GUESS\")",
			"Test.assertEquals(pilishString(\"CANIMAKEAGUESSNOW\"), \"CAN I MAKE A GUESS NOWWWWWWW\")",
			"Test.assertEquals(pilishString(\"X\"), \"XXX\")",
			"Test.assertEquals(pilishString(\"ARANDOMSEQUENCEOFLETTERS\"), \"ARA N DOMS E QUENC EOFLETTER SS\")",
			"Test.assertEquals(pilishString(\"\"), \"\")",
			"Test.assertEquals(pilishString(\"33314444155555999999999226666665555533355555888888889999999997777777999999999\"), \"333 1 4444 1 55555 999999999 22 666666 55555 333 55555 88888888 999999999 7777777 999999999\")",
			"Test.assertEquals(pilishString(\"###*@\"), \"### * @@@@\")",
			"Test.assertEquals(pilishString(\"..........\"), \"... . .... . .....\")",
			"// Below, quoting Mike Keith",
			"Test.assertEquals(pilishString(\"NowIfallAtiredsuburbianInliquidunderthetreesDriftingalongsideforestssimm\"), \"Now I fall A tired suburbian In liquid under the trees Drifting alongside forests simmmmmmm\")",
			"// Below, quoting Sir James Hopwood Jeans",
			"Test.assertEquals(pilishString(\"HOWINEEDADRINKALCOHOLICINNATUREAFTERTHEHEAVYLECTURESINVOLVINGQUANTUMMECHANICSANDALLTHESECRETSOFTHEUNIVERSE\"), \"HOW I NEED A DRINK ALCOHOLIC IN NATURE AFTER THE HEAVY LECTURES INVOLVING QUANTUM MECHANICS\")",
			"Test.assertEquals(pilishString(\"HOWINEEDADRINKALCOHOLICINNATUREAFTERTHEHEAVYCODING\"), \"HOW I NEED A DRINK ALCOHOLIC IN NATURE AFTER THE HEAVY CODINGGG\")"
		],
		"starterFn": [
			"1\nfunction pilishString(txt) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MPNkbLAD3baxY5Frj"
	},
	{
		"title": "Does the Triangle Fit into the Triangular Hole?",
		"description": "<p><span>Create a function that takes the dimensions of two triangles (as arrays) and checks if the first triangle fits into the second one.</span></p><h3><span>Examples</span></h3><pre><code>doesTriangleFit([1, 1, 1], [1, 1, 1]) ➞ true\n\ndoesTriangleFit([1, 1, 1], [2, 2, 2]) ➞ true\n\ndoesTriangleFit([1, 2, 3], [1, 2, 2]) ➞ false\n\ndoesTriangleFit([1, 2, 4], [1, 2, 6]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Triangle fits if it has the same or smaller size as the hole.</span></li><li><span>The function should return </span><code>false</code><span> if the triangle with that dimensions is not possible.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(doesTriangleFit([1, 1, 1], [1, 1, 1]), true, \"Same triangle\")",
			"Test.assertEquals(doesTriangleFit([1, 1, 1], [2, 2, 2]), true, \"Smaller triangle\")",
			"Test.assertEquals(doesTriangleFit([1, 6, 8], [1, 6, 8]), false, \"Not a triangle\")",
			"Test.assertEquals(doesTriangleFit([12, 63, 42], [1, 6, 8]), false, \"too small hole\")",
			"Test.assertEquals(doesTriangleFit([3, 6, 8], [23, 63, 42]), true, \"Hole is too big\")",
			"Test.assertEquals(doesTriangleFit([3, 6, 8], [1, 10, 8]), false, \"impossible hole\")"
		],
		"starterFn": [
			"1\nfunction doesTriangleFit(brick, hole) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7e2Aq87tDpW2CK7XH"
	},
	{
		"title": "Hexadecimal Color Mixer",
		"description": "<p><span>In this challenge, you have to mix two or more colors to get a brand new color from their average rgb values.</span></p><p><span>Each color will be represented in its hexadecimal notation, and so as a string starting with </span><code>#</code><span> containing three pairs of alphanumeric characters, equals to the three </span><strong><span>rgb</span></strong><span> values (in base 16) of red, green and blue.</span></p><p><span>To obtain the new color, you need to get the arithmetic average of the sums of the individual red, green and blue values of each given color. When the average is a float number, you have to round it to the nearest integer (rounding up for decimal parts equal to 0.5).</span></p><p><span>Mixing yellow and red:</span></p><pre><code>Hexadecimal code of yellow = \"#FFFF00\"\nHexadecimal code of red = \"#FF0000\"\n\nyellow to RGB = Red: [\"FF\" = 255], Green: [\"FF\" = 255], Blue: [\"00\", 0]\nred to RGB = Red: [\"\"FF = 255], Green: [\"00\" = 0], Blue: [\"00\" = 0]\n\nAverage of Red values = (255 + 255) / 2 = 255\nAverage of Green values = (255 + 0) / 2 = 127.5 = 128\nAverage of Blue values = (0 + 0) / 2 = 0 = 0\n\nRgb of new color = [255, 128, 0]\nHexadecimal conversion = [255 = \"FF\"], [128 = \"80\"], [0 = \"00\"]\n\nNew color = \"#FF8000\" (orange)</code></pre><p><span>Given an array of strings </span><code>colors</code><span> containing a series of hexadecimal codes, implement a function that returns the hexadecimal code of the new color, as a new string.</span></p><h3><span>Examples</span></h3><pre><code>hexColorMixer([\"#FFFF00\", \"#FF0000\"]) ➞ \"#FF8000\"\n// Orange\n\nhexColorMixer([\"#FFFF00\", \"#0000FF\"]) ➞ \"#808080\"\n// Medium gray\n\nhexColorMixer([\"#B60E73\", \"#0EAEB6\"]) ➞ \"#625E95\"\n// Lavender</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember to round to the nearest integer the average of the rgb values.</span></li><li><span>You can test the color codes in any hexadecimal-colors utility site, such as </span><a target=\"_blank\" href=\"https://htmlcolorcodes.com/\"><span>this one</span></a><span> that I used for testing cases.</span></li><li><span>All the given hexadecimal strings are valid; there are no exceptions to handle.</span></li><li><span>If you're interested in rgb colors and their validation, you can give also try </span><a target=\"_blank\" href=\"https://edabit.com/challenge/CoAPnr8jxcTah2CzZ\"><span>this challenge</span></a><span> made by </span><strong><span>@Pustur</span></strong><span> (</span><em><span>open this link in a new tab to avoid issues due to the refresh of the page</span></em><span>)</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(hexColorMixer([\"#FFFF00\", \"#FF0000\"]), \"#FF8000\", \"Example #1\")",
			"Test.assertEquals(hexColorMixer([\"#FFFF00\", \"#0000FF\"]), \"#808080\", \"Example #2\")",
			"Test.assertEquals(hexColorMixer([\"#B60E73\", \"#0EAEB6\"]), \"#625E95\", \"Example #3\")",
			"Test.assertEquals(hexColorMixer([\"#FF0000\", \"#00FF00\", \"#0000FF\"]), \"#555555\")",
			"Test.assertEquals(hexColorMixer([\"#99CC00\", \"#663399\", \"#1A8191\"]), \"#5E8063\")",
			"Test.assertEquals(hexColorMixer([\"#918381\", \"#D53B21\", \"#A54C83\", \"#DEFACF\"]), \"#BA817D\")",
			"Test.assertEquals(hexColorMixer([\"#140A23\", \"#46B31E\", \"#CFDF08\", \"#263534\", \"#EAD1FB\", \"#235E02\"]), \"#65803F\")",
			"Test.assertEquals(hexColorMixer([\"#FFFFFF\", \"#000000\", \"#000000\", \"#FFFFFF\"]), \"#808080\")",
			"Test.assertEquals(hexColorMixer([\"#CCCCCC\"]), \"#CCCCCC\")"
		],
		"starterFn": [
			"1\nfunction hexColorMixer(colors) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/aBYTxSRpLpBnMSX3E"
	},
	{
		"title": "Building A Binary Clock",
		"description": "<p><span>A binary clock displays the time of day in binary format. Modern binary clocks have six columns of lights; two for each of the hours, minutes and seconds. The photo below shows a binary clock displaying the time \"12:15:45\":</span></p><p><img src=\"https://edabit-challenges.s3.amazonaws.com/220px-Digital-BCD-clock.jpg\"></p><p><span>The binary values increase from the bottom to the top row. Lights on the bottom row have a value of 1, lights on the row above have a value of 2, then 4 on the row above that, and finally a value of 8 on the top row. Any 24-hour time can be shown by switching on a certain combination of lights. For example, to show the time \"10:37:49\":</span></p><p><img src=\"https://edabit-challenges.s3.amazonaws.com/440px-Binary_clock.svg.png\"></p><p><span>You've decided to build your own binary clock, and you need to figure out how to light each row of the clock to show the correct time. Given the time as a string, return an array containing strings that shows the lights for each row of the clock (top to bottom). Use \"1\" for on, and \"0\" for off. Leave a blank space for any part of the row that doesn't require a light.</span></p><h3><span>Examples</span></h3><pre><code>binaryClock(\"10:37:49\") ➞ [\n  \" 0 0 1\",\n  \" 00110\",\n  \"001100\",\n  \"101101\"\n]\n\nbinaryClock(\"18:57:31\") ➞ [\n  \" 1 0 0\",\n  \" 01100\",\n  \"000110\",\n  \"101111\"\n]\n\nbinaryClock(\"10:50:22\") ➞ [\n  \" 0 0 0\",\n  \" 01000\",\n  \"000011\",\n  \"101000\"\n]</code></pre><h3><span>Notes</span></h3><p><span>See the </span><strong><span>Resources</span></strong><span> section for more information on binary clocks.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(binaryClock(\"07:24:16\"), [' 0 0 0', ' 10101', '011001', '010010'])",
			"Test.assertSimilar(binaryClock(\"13:48:18\"), [' 0 1 1', ' 01000', '010000', '110010'])",
			"Test.assertSimilar(binaryClock(\"18:48:15\"), [' 1 1 0', ' 01001', '000000', '100011'])",
			"Test.assertSimilar(binaryClock(\"11:47:55\"), [' 0 0 0', ' 01111', '000100', '110111'])",
			"Test.assertSimilar(binaryClock(\"05:46:39\"), [' 0 0 1', ' 11100', '000110', '010011'])",
			"Test.assertSimilar(binaryClock(\"20:35:19\"), [' 0 0 1', ' 00100', '101000', '001111'])",
			"Test.assertSimilar(binaryClock(\"10:51:40\"), [' 0 0 0', ' 01010', '000000', '101100'])",
			"Test.assertSimilar(binaryClock(\"10:16:17\"), [' 0 0 0', ' 00101', '000101', '101011'])",
			"Test.assertSimilar(binaryClock(\"08:17:26\"), [' 1 0 0', ' 00101', '000111', '001100'])",
			"Test.assertSimilar(binaryClock(\"17:48:59\"), [' 0 1 1', ' 11010', '010000', '110011'])",
			"Test.assertSimilar(binaryClock(\"20:04:33\"), [' 0 0 0', ' 00100', '100011', '000011'])",
			"Test.assertSimilar(binaryClock(\"01:35:39\"), [' 0 0 1', ' 00100', '001010', '011111'])",
			"Test.assertSimilar(binaryClock(\"13:23:39\"), [' 0 0 1', ' 00000', '011110', '110111'])",
			"Test.assertSimilar(binaryClock(\"01:56:09\"), [' 0 0 1', ' 01100', '000100', '011001'])",
			"Test.assertSimilar(binaryClock(\"10:50:22\"), [' 0 0 0', ' 01000', '000011', '101000'])",
			"Test.assertSimilar(binaryClock(\"07:41:09\"), [' 0 0 1', ' 11000', '010000', '010101'])",
			"Test.assertSimilar(binaryClock(\"10:20:42\"), [' 0 0 0', ' 00010', '001001', '100000'])",
			"Test.assertSimilar(binaryClock(\"02:19:30\"), [' 0 1 0', ' 00000', '010010', '001110'])",
			"Test.assertSimilar(binaryClock(\"13:41:41\"), [' 0 0 0', ' 01010', '010000', '110101'])",
			"Test.assertSimilar(binaryClock(\"03:17:28\"), [' 0 0 1', ' 00100', '010110', '011100'])"
		],
		"starterFn": [
			"1\nfunction binaryClock(time) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3zB2qyJRpvJGCsCj4"
	},
	{
		"title": "Coin Trouble",
		"description": "<p><span>Given an array of coins, father needs to distribute them amongst his three children. Write a function to determine if the coins can be distributed equally or not. Return </span><code>true</code><span> if each son receives the same amount of money,  otherwise return </span><code>false</code><span>.</span></p><pre><code>[1, 2, 3, 2, 2, 2, 3] ➞ true</code></pre><ul><li><span>Amount to be distributed to each child = </span><code>(1+2+3+2+4+3)/3 =&gt; 15/3 =&gt; 5</code></li><li><span>Possible set of coin to be distributed to children = </span><code>[(1,2,2),(2,3),(2,3)]</code></li></ul><pre><code>[5, 3, 10, 1, 2] ➞ false</code></pre><ul><li><span>Amount to be distributed to each child = </span><code>(5+3+10+1+2)/3 =&gt; 21/3 =&gt; 7</code></li><li><span>But there are no combination such that each child get equal value which is 7.</span></li></ul><h3><span>Examples</span></h3><pre><code>coinsDiv([1, 2, 3, 2, 2, 2, 3]) ➞ true\n\ncoinsDiv([5, 3, 10, 1, 2]) ➞ false\n\ncoinsDiv([2, 4, 3, 2, 4, 9, 7, 8, 6, 9]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Inputs will be an array of positive integers only.</span></li><li><span>Coin can be any positive value.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(coinsDiv([1, 1, 1]), true)",
			"Test.assertEquals(coinsDiv([80, 78, 79, 65, 61]), false)",
			"Test.assertEquals(coinsDiv([1, 1, 1]), true)",
			"Test.assertEquals(coinsDiv([80, 78, 79, 65, 61]), false)",
			"Test.assertEquals(coinsDiv([1, 2, 3, 2, 2, 2, 3]), true)",
			"Test.assertEquals(coinsDiv([5, 3, 10, 1, 2]), false)",
			"Test.assertEquals(coinsDiv([2, 4, 3, 2, 4, 9, 7, 8, 6, 9]), true)",
			"Test.assertEquals(coinsDiv([4, 7, 6, 8, 2, 1, 2]), true)",
			"Test.assertEquals(coinsDiv([3, 6, 2, 2, 2, 2, 1, 3, 2, 1, 3]), true)",
			"Test.assertEquals(coinsDiv([11, 9, 3, 22, 6, 2, 4, 10, 1]), false)",
			"Test.assertEquals(coinsDiv([13, 6, 12, 23, 2, 8, 15, 31, 16]), false)",
			"Test.assertEquals(coinsDiv([4, 14, 12, 21, 3, 1, 18, 5]), true)",
			"Test.assertEquals(coinsDiv([10, 5, 20, 27, 17, 4, 3, 15, 0, 25]), true)",
			"Test.assertEquals(coinsDiv([7, 3, 3, 4, 5, 4, 1, 1, 1, 1, 1, 8, 7, 3, 3, 4, 5, 4, 1, 1, 1, 1, 1, 8]), true)",
			"Test.assertEquals(coinsDiv([1, 13, 10, 6, 24, 16, 22, 4]), false)",
			"Test.assertEquals(coinsDiv([9]), false)",
			"Test.assertEquals(coinsDiv([246, 96, 129, 220, 203, 75, 200, 77, 114, 91]), false)",
			"Test.assertEquals(coinsDiv([3, 2, 2, 5, 9, 3, 3]), true)"
		],
		"starterFn": [
			"1\nfunction coinsDiv(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xP34EkkKFGQc6ZGwg"
	},
	{
		"title": "Time Elapsed",
		"description": "<p><span>Create a function that takes two timestamps as input, and returns a string describing the time elapsed between them (in days, hours, minutes, seconds as appropriate).</span></p><h3><span>Examples</span></h3><pre><code>elapsed(1559813526, 1559899926) ➞ \"1 day\"\n\nelapsed(1559681004, 1559899926) ➞ \"2 days, 12 hours, 48 minutes, 42 seconds\"\n\nelapsed(1558773066, 1559899926) ➞ \"13 days, 1 hour, 1 minute\"</code></pre><h3><span>Notes</span></h3><p><span>Timestamps are seconds elapsed since 1st January 1970.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"strings"
		],
		"tests": [
			"Test.assertEquals(elapsed(1559813526, 1559899926), \"1 day\")",
			"Test.assertEquals(elapsed(1559681004, 1559899926), \"2 days, 12 hours, 48 minutes, 42 seconds\")",
			"Test.assertEquals(elapsed(1557641659, 1559899926), \"26 days, 3 hours, 17 minutes, 47 seconds\")",
			"Test.assertEquals(elapsed(1557652446, 1559899926), \"26 days, 18 minutes\")",
			"Test.assertEquals(elapsed(1558773066, 1559899926), \"13 days, 1 hour, 1 minute\")",
			"Test.assertEquals(elapsed(1552513985, 1559899926), \"85 days, 11 hours, 39 minutes, 1 second\")"
		],
		"starterFn": [
			"1\nfunction elapsed(t1, t2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/y55uFmf4xCdivNBaT"
	},
	{
		"title": "Find the Most Frequent Element in an Array",
		"description": "<p><span>Create a function that takes an array and return the most frequently occuring element contained within it.</span></p><h3><span>Examples</span></h3><pre><code>findFrequent([3, 7, 3]) ➞ 3\n\nfindFrequent([null, \"hello\", true, null]) ➞ null\n\nfindFrequent([false, \"up\", \"down\", \"left\", \"right\", true, false]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(findFrequent([3, 7, 3]), 3);",
			"Test.assertEquals(findFrequent([null, \"hello\", true, null]), null);",
			"Test.assertEquals(findFrequent([false, \"up\", \"down\", \"left\", \"right\", true, false]), false);",
			"Test.assertEquals(findFrequent([undefined]), undefined);",
			"Test.assertEquals(findFrequent([1, 2, -3, true, false, undefined, \"yes\", \"yeah\", \"yup\", 2]), 2);",
			"Test.assertEquals(findFrequent([\"Batman\", \"Superman\", \"Batman\"]), \"Batman\");"
		],
		"starterFn": [
			"1\nfunction findFrequent(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hxHBsYebaBM3ff5s6"
	},
	{
		"title": "Conway's Game of Life",
		"description": "<p><img alt=\"Conway's Game of Life\" src=\"https://s3.amazonaws.com/edabit-images/game-of-life.gif\"></p><p><span>The goal of this challenge is to implement the logic used in Conway's Game of Life. Wikipedia will give a better understanding of what it is and how it works (check the resources tab above).</span></p><h3><span>Rules</span></h3><ul><li><strong><span>For a space that's \"populated\":</span></strong><ul><li><span>Each cell with 0 or 1 neighbours dies, as if by solitude.</span></li><li><span>Each cell with 2 or 3 neighbours survives.</span></li><li><span>Each cell with 4 or more neighbours dies, as if by overpopulation.</span></li></ul></li><li><strong><span>For a space that's \"empty\" or \"unpopulated\":</span></strong><ul><li><span>Each cell with 3 neighbours becomes populated.</span></li></ul></li></ul><h3><span>Parameters</span></h3><p><code>board</code><span>: a 2-dimensional array of values 0 to 1.</span></p><ul><li><span>0 means the cell is empty.</span></li><li><span>1 means the cell is populated.</span></li></ul><h3><span>Return Value</span></h3><p><span>A </span><code>string</code><span> containing the board's state after the game logic has been applied once.</span></p><pre><code>On character: █\nOff character: ░</code></pre><h3><span>Notes</span></h3><p><span>The string should be divided by newlines </span><code>\\n</code><span> to signal the end of each row.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"games",
			"loops"
		],
		"tests": [
			"const example1 = [",
			"  [0, 0, 0],",
			"  [0, 1, 0],",
			"  [0, 0, 0],",
			"];",
			"​",
			"const example2 = [",
			"  [0, 1, 0],",
			"  [1, 1, 1],",
			"  [0, 1, 0],",
			"];",
			"​",
			"const example3 = [",
			"  [1, 0, 0],",
			"  [0, 1, 0],",
			"  [0, 0, 1],",
			"];",
			"​",
			"const example4 = [",
			"  [1, 0, 1],",
			"  [0, 0, 0],",
			"  [1, 0, 0],",
			"];",
			"​",
			"const glider = [",
			"  [0, 0, 0, 0, 0],"
		],
		"starterFn": [
			"1\n// on  character: █",
			"2\n// off character: ░",
			"3\n​",
			"4\nfunction gameOfLife(board) {",
			"5\n  ",
			"6\n}"
		],
		"url": "https://edabit.com/challenge/CzfwodvnWs5QjzEgv"
	},
	{
		"title": "Mowing the Lawn",
		"description": "<p><span>Create a function that takes in an array of grass heights and a </span><strong><span>variable</span></strong><span> sequence of lawn mower cuts and outputs the array of successive grass heights.</span></p><p><span>If </span><strong><span>after a cut</span></strong><span>, any single element in the array reaches zero or negative, return </span><code>\"Done\"</code><span>  instead of the array of new heights.</span></p><p><span>A demo:</span></p><pre><code>cuttingGrass([3, 4, 4, 4], 1, 1, 1) ➞ [[2, 3, 3, 3], [1, 2, 2, 2], \"Done\"]\n\n// 1st cut shaves off 1: [3, 4, 4, 4] ➞ [2, 3, 3, 3]\n// 2nd cut shaves off 1: [2, 3, 3, 3] ➞ [1, 2, 2, 2]\n// 3rd cut shaves off 1: [1, 2, 2, 2] ➞ [0, 1, 1, 1], but one element reached zero so we return \"Done\".</code></pre><h3><span>Examples</span></h3><pre><code>cuttingGrass([5, 6, 7, 5], 1, 2, 1)\n➞ [[4, 5, 6, 4], [2, 3, 4, 2], [1, 2, 3, 1]]\n\ncuttingGrass([4, 4, 4, 4], 1, 1, 1, 1)\n➞ [[3, 3, 3, 3], [2, 2, 2, 2], [1, 1, 1, 1], \"Done\"]\n\ncuttingGrass([8, 9, 9, 8, 8], 2, 3, 2, 1)\n➞ [[6, 7, 7, 6, 6], [3, 4, 4, 3, 3], [1, 2, 2, 1, 1], \"Done\"]\n\ncuttingGrass([1, 0, 1, 1], 1, 1, 1) ➞ [\"Done\", \"Done\", \"Done\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>The number of lawn cuts is variable.</span></li><li><span>There will be at least one cut.</span></li><li><span>Return </span><code>\"Done\"</code><span> onwards for each additional cut if the grass has already been completely mowed (see fourth example).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(cuttingGrass([4, 4, 4, 4], 1, 1, 1, 1), ",
			"  [[3, 3, 3, 3], [2, 2, 2, 2], [1, 1, 1, 1], \"Done\"])",
			"​",
			"Test.assertSimilar(cuttingGrass([5, 6, 7, 5], 1, 2, 1), ",
			"  [[4, 5, 6, 4], [2, 3, 4, 2], [1, 2, 3, 1]])",
			"​",
			"Test.assertSimilar(cuttingGrass([8, 9, 9, 8, 8], 2, 3, 2, 1), ",
			"  [[6, 7, 7, 6, 6], [3, 4, 4, 3, 3], [1, 2, 2, 1, 1], \"Done\"])",
			"​",
			"Test.assertSimilar(cuttingGrass([1, 0, 1, 1], 1, 1, 1), ",
			"  [\"Done\", \"Done\", \"Done\"])",
			"​",
			"Test.assertSimilar(cuttingGrass([4, 5, 4, 5], 2, 1, 1), ",
			"  [[2, 3, 2, 3], [1, 2, 1, 2], \"Done\"])",
			"​",
			"Test.assertSimilar(cuttingGrass([4, 2, 2], 2, 1, 1), ",
			"  [\"Done\", \"Done\", \"Done\"])"
		],
		"starterFn": [
			"1\nfunction cuttingGrass(arr, ...cuts) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/L99jAtiuAeWaB9jdm"
	},
	{
		"title": "The Unprimeables",
		"description": "<p><span>In this challenge, you have to establish if an integer is an Unprimeable number. To be Unprimeable, when a single digit of a composite number is exchanged with any digit from </span><code>0</code><span> up to </span><code>9</code><span>, the new number obtained </span><strong><span>must not be</span></strong><span> a prime:</span></p><pre><code>number = 14\n\nNumbers obtained changing the first digit (1):\n\n04 (4), 14, 24, 34, 44, 54, 64, 74, 84, 94\n// Leading zeros are not considered\n\nNumbers obtained changing the second digit (4):\n\n10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n\n// Among the two series, 11, 13, 17 and 19 are primes\n// 14 is not an unprimeable number\n\nnumber = 200\n\nNumbers obtained changing the first digit (2):\n\n000 (0), 100, 200, 300, 400, 500, 600, 700, 800, 900\n// Leading zeros are not considered\n\nNumbers obtained changing the second digit (0):\n\n200, 210, 220, 230, 240, 250, 260, 270, 280, 290\n\nNumbers obtained changing the third digit (0):\n\n200, 201, 202, 203, 204, 205, 206, 207, 208, 209\n\n// Among the three series, there aren't primes\n// 200 is an unprimeable number (the first of the series)</code></pre><p><span>Given a non-negative integer </span><code>num</code><span>, implement a function that returns:</span></p><ul><li><span>The string </span><code>\"Prime Input\"</code><span> if </span><code>num</code><span> is prime.</span></li><li><span>The string </span><code>\"Unprimeable\"</code><span> if </span><code>num</code><span> is Unprimeable (accordingly to the above instructions).</span></li><li><span>If </span><code>num</code><span> is not Unprimeable, an array containing all the primes obtained after exchanging its digits, without duplicates and sorted ascendingly.</span></li></ul><h3><span>Examples</span></h3><pre><code>isUnprimeable(200) ➞ \"Unprimeable\"\n\nisUnprimeable(14) ➞ [11, 13, 17, 19]\n\nisUnprimeable(2) ➞ \"Prime Input\"</code></pre><h3><span>Notes</span></h3><ul><li><span>When changing the first digit, leading zeros are not considered part of the new number obtained.</span></li><li><span>Despite is still an unproofed theory, as far as we know every even number (except </span><code>2</code><span>) is not prime. You are free to choose to use this discriminant when you check the number obtained after the change of a digit.</span></li><li><span>The same concept can be applied also to primes. Primes that do not return other primes when their single digits are changed (apart from the number itself)  are called </span><em><span>Weakly Primes</span></em><span>: the first prime of this series is </span><code>294001</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(isUnprimeable(200), \"Unprimeable\", \"Example #1\")",
			"Test.assertSimilar(isUnprimeable(14), [11, 13, 17, 19], \"Example #2\")",
			"Test.assertSimilar(isUnprimeable(2), \"Prime Input\", \"Example #3\")",
			"Test.assertSimilar(isUnprimeable(839), \"Prime Input\")",
			"Test.assertSimilar(isUnprimeable(4065), \"Unprimeable\")",
			"Test.assertSimilar(isUnprimeable(5042), \"Unprimeable\")",
			"Test.assertSimilar(isUnprimeable(1), [2, 3, 5, 7])",
			"Test.assertSimilar(isUnprimeable(5137), [137, 2137, 3137, 5107, 5147, 5167, 5197, 5237, 5437, 5737, 9137])",
			"Test.assertSimilar(isUnprimeable(666), [661])",
			"Test.assertSimilar(isUnprimeable(13490), [13499])",
			"Test.assertSimilar(isUnprimeable(294001), \"Prime Input\")"
		],
		"starterFn": [
			"1\nfunction isUnprimeable(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nPDQ5rYH8WccdQx33"
	},
	{
		"title": "Almost Sorted Sequence",
		"description": "<p><span>An </span><strong><span>almost-sorted sequence</span></strong><span> is a sequence that is </span><strong><span>strictly increasing</span></strong><span> or </span><strong><span>strictly decreasing</span></strong><span> if you remove a </span><strong><span>single element</span></strong><span> from the array (no more, no less). Write a function that returns </span><code>true</code><span> if an array is </span><strong><span>almost-sorted</span></strong><span>, and </span><code>false</code><span> otherwise.</span></p><p><span>For example, if you remove </span><code>80</code><span> from the first example, it is perfectly sorted in ascending order. Similarly, if you remove </span><code>7</code><span> from the second example, it is perfectly sorted in descending order.</span></p><h3><span>Examples</span></h3><pre><code>almostSorted([1, 3, 5, 9, 11, 80, 15, 33, 37, 41] ) ➞ true\n\nalmostSorted([6, 5, 4, 7, 3]) ➞ true\n\nalmostSorted([6, 4, 2, 0]) ➞ false\n// Sequence is already sorted.\n\nalmostSorted([7, 8, 9, 3, 10, 11, 12, 2]) ➞ false\n// Requires removal of more than 1 item.</code></pre><h3><span>Notes</span></h3><ul><li><span>Completely sorted arrays should return </span><code>false</code><span>.</span></li><li><span>Arrays will always be </span><strong><span>&gt; 3</span></strong><span> in length (to remove ambiguity).</span></li><li><span>Numbers in each input array will be unique - don't worry about \"ties\".</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting",
			"validation"
		],
		"tests": [
			"Test.assertEquals(almostSorted([1, 3, 5, 9, 11, 80, 15, 33, 37, 41]), true, 'remove 80 should work')",
			"Test.assertEquals(almostSorted([6, 5, 4, 7, 3]), true, 'remove 7 should work')",
			"Test.assertEquals(almostSorted([6, 4, 2, 0]), false, 'numbers should not be completely sorted')",
			"Test.assertEquals(almostSorted([7, 8, 9, 3, 10, 11, 12, 2]), false)",
			"Test.assertEquals(almostSorted([9, 1, 8, 2]), true, 'remove 1 should work')",
			"Test.assertEquals(almostSorted([1, 3, 9, 44, 15, 17, 33]), true, 'remove 44 should work')",
			"Test.assertEquals(almostSorted([5, 4, 3, 2, -1, 0]), true, 'remove -1 should work')",
			"Test.assertEquals(almostSorted([5, 2, 3, 4]), true, 'remove 5 should work')",
			"Test.assertEquals(almostSorted([8, 3, 7, 4, 9]), false)",
			"Test.assertEquals(almostSorted([-3, -4, -5, -7]), false, 'numbers should not be completely sorted')",
			"Test.assertEquals(almostSorted([5, 6, 7, 8]), false, 'numbers should not be completed sorted')",
			"Test.assertEquals(almostSorted([9, 1, 8, 2, 7, 3]), false)"
		],
		"starterFn": [
			"1\nfunction almostSorted(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/z9JujCTeTM69ssLZa"
	},
	{
		"title": "Simplified Fractions",
		"description": "<p><span>Create a function that returns the simplified version of a fraction.</span></p><h3><span>Examples</span></h3><pre><code>simplify(\"4/6\") ➞ \"2/3\"\n\nsimplify(\"10/11\") ➞ \"10/11\"\n\nsimplify(\"100/400\") ➞ \"1/4\"\n\nsimplify(\"8/4\") ➞ \"2\"</code></pre><h3><span>Notes</span></h3><ul><li><span>A fraction is simplified if there are no common factors (except 1) between the numerator and the denominator. For example, </span><code>4/6</code><span> is </span><strong><span>not</span></strong><span> simplified, since </span><code>4</code><span> and </span><code>6</code><span> both share </span><code>2</code><span> as a factor.</span></li><li><span>If improper fractions can be transformed into integers, do so in your code (see example #4).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(simplify(\"5/7\"), \"5/7\")",
			"Test.assertEquals(simplify(\"4/6\"), \"2/3\")",
			"Test.assertEquals(simplify(\"11/10\"), \"11/10\")",
			"Test.assertEquals(simplify(\"8/4\"), \"2\")",
			"Test.assertEquals(simplify(\"7/4\"), \"7/4\", 'should work for improper fractions')",
			"Test.assertEquals(simplify(\"6/4\"), \"3/2\")",
			"Test.assertEquals(simplify(\"300/200\"), \"3/2\")",
			"Test.assertEquals(simplify(\"50/25\"), \"2\")",
			"Test.assertEquals(simplify(\"5/45\"), \"1/9\")"
		],
		"starterFn": [
			"1\nfunction simplify(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZNnfzsWj5i6S93Cxk"
	},
	{
		"title": "Amount of Possible Combinations",
		"description": "<p><span>Write a function that returns the amount of possible combinations when drawing the given amount of cards from a deck of cards.</span></p><p><span>The function must take two inputs:\n    </span><code>k</code><span> is the amount of cards to draw.\n    </span><code>n</code><span> the total amount of cards in the deck.</span></p><p><span>For example, a poker hand can be described as a 5-combination (</span><code>k</code><span> = 5) of cards from a 52 card deck (</span><code>n</code><span> = 52). The 5 cards of the hand are all distinct, and the order of cards in the hand does not matter. There are 2,598,960 such combinations.</span></p><p><span>The amount of combinations should be returned as an integer.</span></p><h3><span>Examples</span></h3><pre><code>combinations(52, 52) ➞ 1\n\ncombinations(5, 52) ➞ 2598960\n\ncombinations(10, 52) ➞ 15820024220</code></pre><h3><span>Notes</span></h3><ul><li><span>Try solving this nativly without any imports.</span></li><li><span>Remember to return result as integer.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(combinations(6, 52), 20358520)",
			"Test.assertEquals(combinations(5, 52), 2598960)",
			"Test.assertEquals(combinations(10, 52), 15820024220)",
			"Test.assertEquals(combinations(18, 52), 42671977361650)",
			"Test.assertEquals(combinations(52, 52), 1)",
			"Test.assertEquals(combinations(7, 64), 621216192)"
		],
		"starterFn": [
			"1\nfunction combinations(k, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Wk7ScSpAG4wLSqm8k"
	},
	{
		"title": "Single Letter Swaps",
		"description": "<p><span>Given an array of strings and an original string, write a function to output an array of boolean values - </span><code>true</code><span> if the word can be formed from the original word by swapping two letters </span><strong><span>only once</span></strong><span> and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>validateSwaps([\"BACDE\", \"EBCDA\", \"BCDEA\", \"ACBED\"], \"ABCDE\")\n➞ [true, true, false, false]\n\n// Swap \"A\" and \"B\" from \"ABCDE\" to get \"BACDE\".\n// Swap \"A\" and \"E\" from \"ABCDE\" to get \"EBCDA\".\n// Both \"BCDEA\" and \"ACBED\" cannot be formed from \"ABCDE\" using only a single swap.\n\nvalidateSwaps([\"32145\", \"12354\", \"15342\", \"12543\"], \"12345\")\n➞ [true, true, true, true]\n\nvalidateSwaps([\"9786\", \"9788\", \"97865\", \"7689\"], \"9768\")\n➞ [true, false, false, false]</code></pre><h3><span>Notes</span></h3><p><span>Original string will consist of unique characters.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(validateSwaps(['BACDE', 'EBCDA', 'BCDEA', 'ACBED'], 'ABCDE'), [true, true, false, false])",
			"Test.assertSimilar(validateSwaps(['32145', '12354', '15342', '12543'], '12345'), [true, true, true, true])",
			"Test.assertSimilar(validateSwaps(['9786', '9788', '97865', '7689'], '9768'), [true, false, false, false])",
			"Test.assertSimilar(validateSwaps(['123', '321', '132', '13', '12'], '213'),  [true, false, false, false, false])",
			"Test.assertSimilar(validateSwaps(['123', '1234', '1235'], '12'), [false, false, false])",
			"Test.assertSimilar(validateSwaps(['123', '123', '123'], '133'), [false, false, false])",
			"Test.assertSimilar(validateSwaps(['132', '321', '213'], '123'), [true, true, true])"
		],
		"starterFn": [
			"1\nfunction validateSwaps(arr, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xukQmQoGopXbQMdZj"
	},
	{
		"title": "Crack the Code",
		"description": "<p><span>This is a reverse-coding challenge. Create a function that outputs the correct array from the input. Use the following examples to crack the code.</span></p><h3><span>Examples</span></h3><pre><code>decode(\"hello\") ➞ [5, 2, 9, 9, 3]\n\ndecode(\"wonderful\") ➞ [11, 3, 2, 1, 2, 6, 3, 9, 9]\n\ndecode(\"something challenging\") ➞ [7, 3, 10, 2, 8, 5, 6, 2, 4, 5, 18, 5, 16, 9, 9, 2, 2, 4, 6, 2, 4]</code></pre><h3><span>Notes</span></h3><p><span>Check </span><strong><span>Comments</span></strong><span> if you're stuck.</span></p>",
		"publishedBy": "Cory Crook",
		"publishedByUrl": "https://edabit.com/user/fMGp72XG7rQYcdFqt",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"logic"
		],
		"tests": [
			"Test.assertSimilar(decode(\"hello\"), [5, 2, 9, 9, 3])",
			"Test.assertSimilar(decode(\"wonderful\"), [11, 3, 2, 1, 2, 6, 3, 9, 9])",
			"Test.assertSimilar(decode(\"all my friends\"), [16, 9, 9, 5, 10, 4, 5, 3, 6, 6, 2, 2, 1, 7])",
			"Test.assertSimilar(decode(\"River\"), [10, 6, 10, 2, 6])"
		],
		"starterFn": [
			"1\nfunction decode(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NNqAzPWi5v4HfTC9k"
	},
	{
		"title": "Group in Order",
		"description": "<p><span>Create a function that groups an array of numbers based on a </span><strong><span>size</span></strong><span> parameter. The </span><strong><span>size</span></strong><span> represents the maximum length of each sub-array.</span></p><pre><code>[1, 2, 3, 4, 5, 6], 3\n[[1, 3, 5], [2, 4, 6]]\n// Divide array into groups of size 3.\n\n[1, 2, 3, 4, 5, 6], 2\n[[1, 4], [2, 5], [3, 6]]\n// Divide array into groups of size 2.\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4\n[[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9]]\n// \"Leftover\" arrays are okay.</code></pre><h3><span>Examples</span></h3><pre><code>group([1, 2, 3, 4], 2) ➞ [[1, 3], [2, 4]]\n\ngroup([1, 2, 3, 4, 5, 6, 7], 4) ➞ [[1, 3, 5, 7], [2, 4, 6]]\n\ngroup([1, 2, 3, 4, 5], 1) ➞ [[1], [2], [3], [4], [5]]\n\ngroup([1, 2, 3, 4, 5, 6], 4) ➞ [[1, 3, 5], [2, 4, 6]]</code></pre><h3><span>Notes</span></h3><ul><li><span>The </span><strong><span>size</span></strong><span> parameter represents the maximum size for each sub-array (see ex.4). You should try to fill each sub-array evenly. In other words, ex.4 should be </span><code>[[1, 3, 5], [2, 4, 6]]</code><span>, not </span><code>[[1, 3, 5, 6], [2, 4]]</code><span>.</span></li><li><span>Keep the relative order of the numbers in each sub-array the same as the order in the original array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"closures",
			"scope"
		],
		"tests": [
			"Test.assertSimilar(group([1, 2, 3, 4], 2), [[1, 3], [2, 4]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5, 6, 7], 4), [[1, 3, 5, 7], [2, 4, 6]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5], 1), [[1], [2], [3], [4], [5]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5, 6], 4), [[1, 3, 5], [2, 4, 6]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5, 6], 3), [[1, 3, 5], [2, 4, 6]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5, 6], 2), [[1, 4], [2, 5], [3, 6]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4), [[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9]])",
			"Test.assertSimilar(group([1, 2, 3, 4, 5, 6, 7, 8], 2), [[1, 5], [2, 6], [3, 7], [4, 8]])"
		],
		"starterFn": [
			"1\nfunction group(arr, size) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/w5LTwJwDLK4uQ3Dmv"
	},
	{
		"title": "Alt Facts, Semi Facts",
		"description": "<p><span>The </span><strong><span>factorial</span></strong><span> of a positive number </span><code>n</code><span> is the product of all numbers from 1 to </span><code>n</code><span>.</span></p><pre><code>5! = 5 x 4 x 3 x 2 x 1 = 120</code></pre><p><span>The </span><strong><span>semifactorial</span></strong><span> (also known as the </span><strong><span>double factorial</span></strong><span>) of a positive number </span><code>n</code><span> is the product of all numbers from 1 to </span><code>n</code><span> that have the same parity (i.e. odd or even) as </span><code>n</code><span>.</span></p><pre><code>12!! = 12 x 10 x 8 x 6 x 4 x 2 = 46,080\n\n7!! = 7 x 5 x 3 x 1 = 105</code></pre><p><span>The </span><strong><span>alternating factorial</span></strong><span> of a positive number </span><code>n</code><span> is the </span><em><span>sum of the consecutive factorials</span></em><span> from </span><code>n</code><span> to 1, where every other factorial is multiplied by -1.</span></p><p><span>Alternating factorial of 1:</span></p><pre><code>af(1) = 1!</code></pre><p><span>Alternating factorial of 2:</span></p><pre><code>af(2) = 2! + (-1)x(1!) = 2! - 1! = 2 -1 = 1</code></pre><p><span>Alternating factorial of 3:</span></p><pre><code>af(3) = 3! - 2! + 1! = 6 - 2 + 1 = 5</code></pre><p><span>Create a function that takes a number </span><code>n</code><span> and returns the difference between the alternating factorial and semifactorial of </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>altSemi(1) ➞ 0\n\naltSemi(2) ➞ -1\n\naltSemi(3)➞ 2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(altSemi(1), 0)",
			"Test.assertEquals(altSemi(3), 2)",
			"Test.assertEquals(altSemi(4), 11)",
			"Test.assertEquals(altSemi(6), 571)",
			"Test.assertEquals(altSemi(9), 326036)",
			"Test.assertEquals(altSemi(16), 19696498855099)",
			"Test.assertEquals(altSemi(21), 48773618867405512406)"
		],
		"starterFn": [
			"1\nfunction altSemi(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MBsY28LQth2d2G6ci"
	},
	{
		"title": "Pagination Class with OOP",
		"description": "<p><span>Your task is to create a </span><code>class</code><span> to handle paginated content in a website. A pagination is used to divide long lists of content in a series of pages.</span></p><p><img alt=\"Example\" title=\"Pagination\" src=\"https://s3.amazonaws.com/edabit-challenges/persons_paginated.png\"></p><p><span>The pagination </span><code>class</code><span> will accept 2 parameters:</span></p><ol><li><p><strong><span>items</span></strong><span> (default: </span><code>[]</code><span>): An </span><code>array</code><span> of contents to paginate.</span></p></li><li><p><strong><span>pageSize</span></strong><span> (default: </span><code>10</code><span>): The amount of items to show in each page.</span></p></li></ol><p><span>So for example we could initialize our pagination like this:</span></p><pre><code>const alphabetArray = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\nconst p = new Pagination(alphabetArray, 4);</code></pre><p><span>And then use the method </span><code>getVisibleItems</code><span> to show the contents of the paginated array.</span></p><pre><code>console.log(p.getVisibleItems()); // [\"a\", \"b\", \"c\", \"d\"]</code></pre><p><span>You will have to implement various methods to go through the pages such as:</span></p><ul><li><code>prevPage</code></li><li><code>nextPage</code></li><li><code>firstPage</code></li><li><code>lastPage</code></li><li><code>goToPage</code></li></ul><p><span>Here's a continuation of the example above using </span><code>nextPage</code><span> and </span><code>lastPage</code><span>:</span></p><pre><code>p.nextPage();\n\nconsole.log(p.getVisibleItems());\n// [\"e\", \"f\", \"g\", \"h\"]\n\np.lastPage();\n\nconsole.log(p.getVisibleItems());\n// [\"y\", \"z\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>You don't have to use ES6 </span><code>class</code><span> if you don't want to</span></li><li><span>The second argument (</span><code>pageSize</code><span>) could be a </span><code>float</code><span>, in that case just convert it to an </span><code>int</code><span> (this is also the case for the </span><code>goToPage</code><span> method)</span></li><li><span>The methods used to change page should be chainable, so you can call them one after the other like this: </span><code>p.nextPage().nextPage();</code></li><li><span>Please remove the comments I provided before publishing your solution.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"classes",
			"math",
			"numbers",
			"objects"
		],
		"tests": [
			"// Checking correct default values",
			"const defaultPagination = new Pagination();",
			"Test.assertEquals(defaultPagination.pageSize, 10);",
			"Test.assertEquals(defaultPagination.items.length, 0);",
			"Test.assertEquals(Array.isArray(defaultPagination.items), true);",
			"​",
			"// Checking correct handling of float numbers as pageSize",
			"// REMOVED no more float tests",
			"// Test.assertEquals((new Pagination(new Array(0), 8.8).pageSize), 8);",
			"​",
			"// Checking correct amount of pages",
			"Test.assertEquals(new Pagination(new Array( 0), 10).totalPages, 1);",
			"Test.assertEquals(new Pagination(new Array( 1), 10).totalPages, 1);",
			"Test.assertEquals(new Pagination(new Array(10), 10).totalPages, 1);",
			"Test.assertEquals(new Pagination(new Array(11), 10).totalPages, 2);",
			"​",
			"// Checking correct currentPage",
			"Test.assertEquals((new Pagination(new Array( 0), 10)).currentPage, 1);",
			"Test.assertEquals((new Pagination(new Array( 1), 10)).currentPage, 1);",
			"Test.assertEquals((new Pagination(new Array(11), 10)).currentPage, 1);",
			"​",
			"// Checking correct implementation of methods that change page",
			"const p1 = new Pagination(new Array(69), 5);",
			"Test.assertEquals(p1.nextPage().currentPage,     2);",
			"Test.assertEquals(p1.lastPage().currentPage,    14);",
			"Test.assertEquals(p1.nextPage().currentPage,    14);"
		],
		"starterFn": [
			"1\nclass Pagination {",
			"2\n  constructor(items, pageSize) {",
			"3\n    this.items;       // Holds the items array",
			"4\n    this.pageSize;    // Holds the size of each page",
			"5\n    this.totalPages;  // Holds the total number of pages",
			"6\n    this.currentPage; // Holds the current page number",
			"7\n  }",
			"8\n​",
			"9\n  // Methods",
			"10\n  // Goes to the previous page",
			"11\n  prevPage() {}",
			"12\n​",
			"13\n  // Goes to the next page",
			"14\n  nextPage() {}",
			"15\n​",
			"16\n  // Goes to the first page",
			"17\n  firstPage() {}",
			"18\n​",
			"19\n  // Goes to the last page",
			"20\n  lastPage() {}",
			"21\n​",
			"22\n  // Goes to a page determined by the `page` argument",
			"23\n  goToPage(page) {}",
			"24\n​",
			"25\n  // Returns the currently visible items as an array",
			"26\n  getVisibleItems() {}"
		],
		"url": "https://edabit.com/challenge/YYr4WQPJuCCiN6wLT"
	},
	{
		"title": "Palindromic Anagrams",
		"description": "<p><span>Given a word, create a function which returns whether or not it's possible to </span><strong><span>create a palindrome</span></strong><span> by </span><em><span>rearranging the letters in the word</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>isPalindromePossible(\"rearcac\") ➞ true\n// You can make \"racecar\"\n\nisPalindromePossible(\"suhbeusheff\") ➞ true\n// You can make \"sfuehbheufs\" (not a real word but still a palindrome)\n\nisPalindromePossible(\"palindrome\") ➞ false\n// It's impossible</code></pre><h3><span>Notes</span></h3><ul><li><span>Trivially, words which are already palindromes return </span><code>true</code><span>.</span></li><li><span>Words are given in all </span><em><span>lowercase</span></em><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isPalindromePossible(\"rearcac\"), true)",
			"Test.assertEquals(isPalindromePossible(\"suhbeusheff\"), true)",
			"Test.assertEquals(isPalindromePossible(\"palindrome\"), false)",
			"Test.assertEquals(isPalindromePossible(\"yagnx\"), false)",
			"Test.assertEquals(isPalindromePossible(\"zgzqxljjp\"), false)",
			"Test.assertEquals(isPalindromePossible(\"tgmqkpdhnhatoco\"), false)",
			"Test.assertEquals(isPalindromePossible(\"akyka\"), true)",
			"Test.assertEquals(isPalindromePossible(\"kjyyrftnbsbq\"), false)",
			"Test.assertEquals(isPalindromePossible(\"jynmynqhcy\"), false)",
			"Test.assertEquals(isPalindromePossible(\"hfe\"), false)",
			"Test.assertEquals(isPalindromePossible(\"noon\"), true)",
			"Test.assertEquals(isPalindromePossible(\"azmkallbanpu\"), false)",
			"Test.assertEquals(isPalindromePossible(\"drrede\"), true)",
			"Test.assertEquals(isPalindromePossible(\"xmhwcocldjdnqvv\"), false)",
			"Test.assertEquals(isPalindromePossible(\"reparpe\"), true)",
			"Test.assertEquals(isPalindromePossible(\"jnavz\"), false)",
			"Test.assertEquals(isPalindromePossible(\"orort\"), true)",
			"Test.assertEquals(isPalindromePossible(\"mel\"), false)",
			"Test.assertEquals(isPalindromePossible(\"jdxknf\"), false)",
			"Test.assertEquals(isPalindromePossible(\"qo\"), false)",
			"Test.assertEquals(isPalindromePossible(\"neett\"), true)",
			"Test.assertEquals(isPalindromePossible(\"wow\"), true)",
			"Test.assertEquals(isPalindromePossible(\"avkkiaapiusuapspiip\"), true)",
			"Test.assertEquals(isPalindromePossible(\"aann\"), true)",
			"Test.assertEquals(isPalindromePossible(\"iivcc\"), true)",
			"Test.assertEquals(isPalindromePossible(\"akyka\"), true)"
		],
		"starterFn": [
			"1\nfunction isPalindromePossible(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8wqJTmobdGWuQKFmy"
	},
	{
		"title": "Column With Maximum Sum",
		"description": "<p><span>Given an array of numbers and a value for </span><em><span>n</span></em><span>, split the numbers into n-sized groups. If we imagine that these groups are stacked on top of each other (see below), return the column number that has the </span><em><span>greatest</span></em><span> sum. If two or more columns have the same sum, return the one with the smallest column number.</span></p><h3><span>Example</span></h3><pre><code>nums = [4, 14, 12, 7, 14, 16, 5, 13, 7, 16, 11, 19]\nn = 4</code></pre><p><span>Gives the array:</span></p><pre><code>[[4, 14, 12,  7],\n[14, 16, 5, 13],\n[7, 16, 11, 19]]\n\n// 1, 2, 3, 4 (column)\n// 25, 46, 28, 39 (sum)</code></pre><p><span>You would return </span><strong><span>2</span></strong><span>, as the 2nd column has the greatest sum.</span></p><h3><span>Notes</span></h3><p><span>Nums will always divide into equal-length groups.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertEquals(colWithMaxSum([14, 9, 19, 6, 13, 13, 3, 2, 12], 3), 3)",
			"Test.assertEquals(colWithMaxSum([1, 13, 15, 5, 16, 1, 4, 9, 20], 3), 2)",
			"Test.assertEquals(colWithMaxSum([15, 4, 6, 10, 6, 4], 2), 1)",
			"Test.assertEquals(colWithMaxSum([7, 9, 13, 16, 17, 1, 10, 6, 3, 19, 6, 10, 8, 18, 20, 4], 8), 7)",
			"Test.assertEquals(colWithMaxSum([4, 18, 14, 16, 7, 7, 20, 14, 9, 4, 8, 16, 1, 12, 18, 13], 2), 2)",
			"Test.assertEquals(colWithMaxSum([5, 7, 2, 12, 20, 7, 1, 12, 8, 7, 12, 8], 3), 2)",
			"Test.assertEquals(colWithMaxSum([18, 16, 6, 4, 18, 20, 9, 8, 1, 14, 20, 16], 4), 2)",
			"Test.assertEquals(colWithMaxSum([5, 4, 20, 8, 8, 18], 2), 1)",
			"Test.assertEquals(colWithMaxSum([2, 9, 12, 9, 17, 6, 8, 9, 8, 18, 2, 4], 2), 2)",
			"Test.assertEquals(colWithMaxSum([15, 2, 16, 19, 3, 1, 15, 13, 19, 16, 2, 16], 3), 1)",
			"Test.assertEquals(colWithMaxSum([4, 6, 18, 13, 19, 2, 7, 13, 19, 16, 12, 20, 17, 12, 4, 7], 8), 5)",
			"Test.assertEquals(colWithMaxSum([10, 8, 6, 2, 2, 2, 18, 17, 17, 20, 17, 17], 6), 1)",
			"Test.assertEquals(colWithMaxSum([3, 9, 14, 7, 6, 13, 9, 10, 1, 5, 10, 17, 16, 6, 3, 18], 4), 4)",
			"Test.assertEquals(colWithMaxSum([2, 7, 8, 17, 15, 3], 3), 2)",
			"Test.assertEquals(colWithMaxSum([8, 8, 6, 4, 8, 16, 4, 16, 18, 20, 20, 7], 2), 2)",
			"Test.assertEquals(colWithMaxSum([19, 15, 1, 10, 2, 8], 6), 1)",
			"Test.assertEquals(colWithMaxSum([5, 20, 8, 3, 5, 15], 3), 2)",
			"Test.assertEquals(colWithMaxSum([10, 12, 15, 14, 17, 4, 18, 12, 17, 18, 18, 12], 4), 3)",
			"Test.assertEquals(colWithMaxSum([5, 9, 12, 12, 7], 5), 3)",
			"Test.assertEquals(colWithMaxSum([3, 18, 8, 15, 9, 15, 12, 8, 11, 5, 10, 8], 6), 2)"
		],
		"starterFn": [
			"1\nfunction colWithMaxSum(nums, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/X47SKhYan6mATPfhA"
	},
	{
		"title": "Remove the Last Vowel",
		"description": "<p><span>Write a function that removes the last vowel in each word in a sentence.</span></p><h3><span>Examples</span></h3><pre><code>removeLastVowel(\"Those who dare to fail miserably can achieve greatly.\")\n➞ \"Thos wh dar t fal miserbly cn achiev gretly.\"\n\nremoveLastVowel(\"Love is a serious mental disease.\")\n➞ \"Lov s  serios mentl diseas\"\n\nremoveLastVowel(\"Get busy living or get busy dying.\")\n➞ \"Gt bsy livng r gt bsy dyng\"</code></pre><h3><span>Notes</span></h3><p><span>Vowels are: </span><code>a, e, i, o, u</code><span> (both upper and lowercase).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(removeLastVowel(\"Those who dare to fail miserably can achieve greatly.\"), \"Thos wh dar t fal miserbly cn achiev gretly.\")",
			"Test.assertEquals(removeLastVowel(\"Love is a serious mental disease.\"), \"Lov s  serios mentl diseas.\")",
			"Test.assertEquals(removeLastVowel(\"Get busy living or get busy dying.\"), \"Gt bsy livng r gt bsy dyng.\")",
			"Test.assertEquals(removeLastVowel(\"If you want to live a happy life, tie it to a goal, not to people.\"), \"f yo wnt t liv  hppy lif, ti t t  gol, nt t peopl.\")"
		],
		"starterFn": [
			"1\nfunction removeLastVowel(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rEyBNGafoHLYmyKfj"
	},
	{
		"title": "Basic Statistics: Mode",
		"description": "<p><span>The </span><em><span>mode</span></em><span> of a group of numbers is the value (or values) that occur most often (values have to occur more than once). Given a sorted array of numbers, return an array of all modes in ascending order.</span></p><h3><span>Examples</span></h3><pre><code>mode([4, 5, 6, 6, 6, 7, 7, 9, 10]) ➞ [6]\n\nmode([4, 5, 5, 6, 7, 8, 8, 9, 9]) ➞ [5, 8, 9]\n\nmode([1, 2, 2, 3, 6, 6, 7, 9]) ➞ [2, 6]</code></pre><h3><span>Notes</span></h3><p><span>In this challenge, all group of numbers will have at least one mode.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(mode([1, 2, 3, 3, 6, 7, 8, 9]), [3])",
			"Test.assertSimilar(mode([2, 3, 3, 4, 4, 6, 7, 8]), [3, 4])",
			"Test.assertSimilar(mode([1, 6, 6, 7, 7, 8, 9]), [6, 7])",
			"Test.assertSimilar(mode([4, 4, 4, 6, 8, 9, 10, 10]), [4])",
			"Test.assertSimilar(mode([1, 4, 6, 7, 9, 9]), [9])",
			"Test.assertSimilar(mode([2, 2, 2, 3, 7, 8, 9, 9]), [2])",
			"Test.assertSimilar(mode([2, 4, 5, 5, 7, 8, 10, 10]), [5, 10])",
			"Test.assertSimilar(mode([1, 1, 4, 4, 5, 7, 9]), [1, 4])",
			"Test.assertSimilar(mode([2, 3, 3, 3, 4, 7, 9]), [3])",
			"Test.assertSimilar(mode([1, 1, 2, 4, 4, 6, 6, 9]), [1, 4, 6])",
			"Test.assertSimilar(mode([1, 2, 3, 3, 3, 7, 9, 10]), [3])",
			"Test.assertSimilar(mode([1, 2, 5, 6, 6, 6, 7, 10]), [6])",
			"Test.assertSimilar(mode([2, 2, 6, 9, 10, 10, 10]), [10])",
			"Test.assertSimilar(mode([1, 1, 5, 6, 6, 10, 10]), [1, 6, 10])",
			"Test.assertSimilar(mode([2, 2, 3, 3, 4, 8]), [2, 3])",
			"Test.assertSimilar(mode([2, 3, 8, 10, 10, 10, 10]), [10])",
			"Test.assertSimilar(mode([2, 2, 3, 4, 6, 9]), [2])",
			"Test.assertSimilar(mode([1, 2, 5, 8, 9, 9, 10, 10]), [9, 10])",
			"Test.assertSimilar(mode([2, 3, 3, 4, 4, 5]), [3, 4])",
			"Test.assertSimilar(mode([2, 2, 3, 3, 4, 5, 10, 10]), [2, 3, 10])",
			"Test.assertSimilar(mode([1, 3, 3, 5, 5, 9, 10, 10]), [3, 5, 10])"
		],
		"starterFn": [
			"1\nfunction mode(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/biyHa34iTd58LfFFb"
	},
	{
		"title": "Add Two String Numbers",
		"description": "<p><span>Write a function that adds two numbers. The catch, however, is that the numbers will be strings.</span></p><h3><span>Examples</span></h3><pre><code>addStrNums(\"4\", \"5\") ➞ \"9\"\n\naddStrNums(\"abcdefg\", \"3\") ➞ \"-1\"\n\naddStrNums(\"1\", \"\") ➞ \"1\"\n\naddStrNums(\"1874682736267235927359283579235789257\", \"32652983572985729\") ➞ 1874682736267235927391936562808774986</code></pre><h3><span>Notes</span></h3><ul><li><span>If there are any non-numerical characters, return </span><code>\"-1\"</code><span>.</span></li><li><span>If one option is blank the code should still work.</span></li><li><span>Your function should be able to add any size number.</span></li><li><span>Your function doesn't have to add negative numbers.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(addStrNums(\"\", \"\"), \"0\")",
			"Test.assertEquals(addStrNums(\"1\", \"01\"), \"2\")",
			"Test.assertEquals(addStrNums(\"1\",\"\"), \"1\")",
			"Test.assertEquals(addStrNums(\"198547982570192857109283570192837509218375091283750192835710298357019237509125710925710923759012375901275901285701925712035712983571092562945875310962518235712385971230956127856123571209358712905610923587102395716258125612095710298\",\"510298570192857910827519027510982561875691857120958371029586187585198273501982573091857091875901875809175091659812750918275091875091857918265901265918659816591750981750981759817598175089175891720570129571098758901750917501975\"), \"198548492868763049967194397711865020200936966975607313794081327943206822707399212908284015616104251803151710460793585524786631258662967654803793576863784154372202562981937878837883388807533802081502644157231966815017027363013212273\")",
			"Test.assertEquals(addStrNums(\"0000001\", \"020006\"), \"20007\")",
			"Test.assertEquals(addStrNums(\"1325123515s238579875987\", \"38698592523525325\"), \"-1\")",
			"Test.assertEquals(addStrNums(\"123456788654323456543456765432345678843234567150666666666666612735980127350918265309182653091635916258165871265087126121827562875835613875612875360182653127560192756012975608172560817653081760126578132617265192561923051397585261519826512951827401928470192864312873561298357120985710927561287356129857120851235612835712935612385971230598612035912635189273651289357120983571298035612836518237481235098172350891623508912375981206598127539128035619286350912836509123856710298560918236590138257013257219857182935681923569032656109851629851605109283560192863598126359125710982375918237598125091256012893570128357128935609128350192873501928365019283750129837401928374019283740189237401298374019823740912365012381075109823650912837501923561023650123659812375091862350912735\", \"1023570192835719836509165309156091653091875309312365123569182365123051235710298365109236501928365019283650291836501928365091256109823560921865091263509126509126350921568091265309128653091263590165309160912653809126510560165016501650650165016835610285172356137845623745623592835692836592837569283756832795693827564\"), \"123456788654323456543456765432345678843234567150666666666666612735980127350918265309182653091635916258165871265087126121827562875835613875612875360182653127560192756012975608172560817653081760126578132617265192561923051397585261519826512951827401928470192864312873561298357120985710927561287356129857120851235612835712935612385971230598612035912635189273651289357120983571298035612836518237481235098172350891623508912375981206598127539128035619286350913860079316692430135070083545746229910105132529169548059251105934155707345561928216714345785488557882881776650962212910741009493707948652177877984833637483638061960049918284138811057018110547340295146562841027828410250749402417800024669988757747975297553431247669274658461094759253860242961229096131924658044740299\")"
		],
		"starterFn": [
			"1\nfunction addStrNums(num1, num2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3q6tbKL8BS4CgaR4c"
	},
	{
		"title": "Calculate Depth of Array",
		"description": "<p><span>Given an array, write a function to calculate it's depth. Assume that a normal array has a depth of 1.</span></p><h3><span>Examples</span></h3><pre><code>depth([1, 2, 3, 4]) ➞ 1\n\ndepth([1, [2, 3, 4]]) ➞ 2\n\ndepth([1, [2, [3, 4]]]) ➞ 3\n\ndepth([1, [2, [3, [4]]]]) ➞ 4</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(depth([1, 2, 3, 4]), 1)",
			"Test.assertEquals(depth([1, [2, 3, 4]]), 2)",
			"Test.assertEquals(depth([1, [2, [3, 4]]]), 3)",
			"Test.assertEquals(depth([1, [2, [3, [4]]]]), 4)",
			"​",
			"Test.assertEquals(depth([1, [2, [3, [4]]], 4]), 4)",
			"Test.assertEquals(depth([1, [2], 3, [4], 5, [6]]), 2)",
			"Test.assertEquals(depth([1, 2, 3, 4, [[5]], [6], 7]), 3)"
		],
		"starterFn": [
			"1\nfunction depth(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JJtafXGmNegpQMp6p"
	},
	{
		"title": "Oddly or Evenly Positioned From Last",
		"description": "<p><span>Create a function that extracts the characters from an array (or a string) on odd or even positions, depending on the specifier. The string </span><strong><em><span>\"odd\"</span></em></strong><span> for items on </span><em><span>odd positions</span></em><span> (... 5, 3, 1) and </span><strong><em><span>\"even\"</span></em></strong><span> for </span><em><span>even positions</span></em><span> (... 6, 4, 2) </span><strong><em><span>from the last item</span></em></strong><span> of that array or string.</span></p><h3><span>Examples</span></h3><pre><code>charAtPos([2, 4, 6, 8, 10], \"even\") ➞ [4, 8]\n// 4 &amp; 8 occupy the 4th &amp; 2nd positions from right.\n\ncharAtPos(\"EDABIT\", \"odd\") ➞ \"DBT\"\n// \"D\", \"B\" and \"T\" occupy the 5th, 3rd and 1st positions from right.\n\ncharAtPos([\")\", \"(\", \"*\", \"&amp;\", \"^\", \"%\", \"$\", \"#\", \"@\", \"!\"], \"odd\") ➞ [\"(\", \"&amp;\", \"%\", \"#\", \"!\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Arrays are zero-indexed, so, index+1 = position or position-1 = index.</span></li><li><span>The prior version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/fWkrdJb6EJrHsP7Sm\"><span>here</span></a><span>.</span></li><li><span>The recursive prior version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/Fby397fv37HCNHZy8\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"logic"
		],
		"tests": [
			"Test.assertEquals(charAtPos(\"EDABIT\", \"even\"), \"EAI\")",
			"Test.assertEquals(charAtPos(\"EDABIT\", \"odd\"), \"DBT\")",
			"Test.assertEquals(charAtPos(\"QWERTYUIOP\", \"even\"), \"QETUO\")",
			"Test.assertEquals(charAtPos(\"POIUYTREWQ\", \"odd\"), \"OUTEQ\")",
			"Test.assertEquals(charAtPos(\"ASDFGHJKLZ\", \"odd\"), \"SFHKZ\")",
			"Test.assertEquals(charAtPos(\"ASDFGHJKLZ\", \"even\"), \"ADGJL\")",
			"Test.assertSimilar(charAtPos([2, 4, 6, 8, 10], \"even\"), [4, 8])",
			"Test.assertSimilar(charAtPos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"odd\"), [2, 4, 6, 8, 10])",
			"Test.assertSimilar(charAtPos([\"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\"], \"odd\"), [\"@\", \"$\", \"^\", \"*\", \")\"])",
			"Test.assertSimilar(charAtPos([\")\", \"(\", \"*\", \"&\", \"^\", \"%\", \"$\", \"#\", \"@\", \"!\"], \"odd\"), [\"(\", \"&\", \"%\", \"#\", \"!\"])",
			"Test.assertSimilar(charAtPos([\"A\", \"R\", \"B\", \"I\", \"T\", \"R\", \"A\", \"R\", \"I\", \"L\", \"Y\"], \"odd\"), [\"A\", \"B\", \"T\", \"A\", \"I\", \"Y\"])"
		],
		"starterFn": [
			"1\nfunction charAtPos(r, s) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WZMZEQoaNuhXovauT"
	},
	{
		"title": "Reverse LEGO Yoda",
		"description": "<p><span>Create a function that takes a string with at least one sentence in it and returns a string with the part(s) after the comma at the beginning of the sentence(s).</span></p><h3><span>Examples</span></h3><pre><code>reverseLegoYoda(\"Hit you with my stick, I shall.\")\n➞ \"I shall hit you with my stick.\"\n\nreverseLegoYoda(\"Rejected me, my crush has. Ketamine, I need.\")\n➞ \"My crush has rejected me. I need ketamine.\"\n\nreverseLegoYoda(\"An alien, I am. Holding me captive in Area 51, the government is.\")\n➞ \"I am an alien. The government is holding me captive in Area 51.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Pay close attention to letter cases.</span></li><li><span>Sentences will always end with a period.</span></li><li><span>There will always be exactly one comma in each of the sentences.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(reverseLegoYoda(\"Hit you with my stick, I shall.\"), \"I shall hit you with my stick.\")",
			"Test.assertEquals(reverseLegoYoda(\"Rejected me, my crush has. Ketamine, I need.\"), \"My crush has rejected me. I need ketamine.\")",
			"Test.assertEquals(reverseLegoYoda(\"An alien, I am. Holding me captive in Area 51, the government is.\"), \"I am an alien. The government is holding me captive in Area 51.\")"
		],
		"starterFn": [
			"1\nfunction reverseLegoYoda(text) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/etjdtp5KGC2vYP6fn"
	},
	{
		"title": "Widen the Streets!",
		"description": "<p><span>Given an array of strings </span><em><span>depicting a row of buildings</span></em><span>, create a fuction which </span><strong><span>sets the gap between buildings</span></strong><span> as a given amount.</span></p><h3><span>Examples</span></h3><pre><code>widenStreets([\n  \"###   ## #\",\n  \"### # ## #\",\n  \"### # ## #\",\n  \"### # ## #\",\n  \"### # ## #\"\n], 3) ➞ [\n  \"###       ##   #\",\n  \"###   #   ##   #\",\n  \"###   #   ##   #\",\n  \"###   #   ##   #\",\n  \"###   #   ##   #\"\n]\n\nwidenStreets([\n  \"## ### ###\",\n  \"## ### ###\",\n  \"## ### ###\",\n  \"## ### ###\"\n], 2) ➞ [\n  \"##  ###  ###\",\n  \"##  ###  ###\",\n  \"##  ###  ###\",\n  \"##  ###  ###\"\n]\n\nwidenStreets([\n  \"# # # # #\"\n], 2) ➞ [\n  \"#  #  #  #  #\"\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>Buildings may be different sizes.</span></li><li><span>There will always be a starting gap size of </span><strong><span>one character</span></strong><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(widenStreets([",
			"  \"# # # # #\"",
			"], 2), [",
			"  \"#  #  #  #  #\"",
			"])",
			"​",
			"Test.assertSimilar(widenStreets([",
			"  \"###   ## #\",",
			"  \"### # ## #\",",
			"  \"### # ## #\",",
			"  \"### # ## #\",",
			"  \"### # ## #\"",
			"], 3), [",
			"  \"###       ##   #\",",
			"  \"###   #   ##   #\",",
			"  \"###   #   ##   #\",",
			"  \"###   #   ##   #\",",
			"  \"###   #   ##   #\"",
			"])",
			"​",
			"Test.assertSimilar(widenStreets([",
			"  \"## ### ###\",",
			"  \"## ### ###\",",
			"  \"## ### ###\",",
			"  \"## ### ###\"",
			"], 2), ["
		],
		"starterFn": [
			"1\nfunction widenStreets(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RzNT8CdBWJPW3WBPX"
	},
	{
		"title": "Fibonacci Word",
		"description": "<p><span>A Fibonacci Word is a specific sequence of binary digits (or symbols from any two-letter alphabet). The Fibonacci Word is formed by repeated concatenation in the same way that the Fibonacci numbers are formed by repeated addition.</span></p><p><span>Create a function that takes a number </span><code>n</code><span> as an argument and returns the first </span><code>n</code><span> elements of the Fibonacci Word sequence.</span></p><p><span>If </span><code>n &lt; 2</code><span>, the function must return </span><code>\"invalid\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>fiboWord(1) ➞ \"invalid\"\n\nfiboWord(3) ➞ \"b, a, ab\"\n\nfiboWord(7) ➞ \"b, a, ab, aba, abaab, abaababa, abaababaabaab\"</code></pre><h3><span>Notes</span></h3><p><span>Recursion is allowed and even encouraged.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fiboWord(1), 'invalid')",
			"Test.assertEquals(fiboWord(3), 'b, a, ab')",
			"Test.assertEquals(fiboWord(7), 'b, a, ab, aba, abaab, abaababa, abaababaabaab')",
			"Test.assertEquals(fiboWord(10), 'b, a, ab, aba, abaab, abaababa, abaababaabaab, abaababaabaababaababa, abaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababa')",
			"Test.assertEquals(fiboWord(20), 'b, a, ab, aba, abaab, abaababa, abaababaabaab, abaababaabaababaababa, abaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababa, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababa, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababa, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababa, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababa, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaab, abaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaabaababaababaabaababaababaabaababaabaababaababaabaababaababa')"
		],
		"starterFn": [
			"1\nfunction fiboWord(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JtmsfWqEB8z2nwiu4"
	},
	{
		"title": "Molar Mass of Chemical Compound",
		"description": "<p><span>Create a function that takes a name of a chemical compound as a string and returns the molar mass of the compound. For this challenge only, required data is included below.</span></p><h3><span>Data</span></h3><pre><code>H -&gt; 1\nB -&gt; 10\nO -&gt; 16\nS -&gt; 32\nN -&gt; 14\nCl -&gt; 35\n\nWater = \"H2 O\"\nBoricAcid = \"H3 B O3\"\nSulfuricAcid = \"H2 S O4\"\nNitricAcid = \"H N O3\"\nHydroChloricAcid = \"H Cl\"</code></pre><h3><span>Examples</span></h3><pre><code>molarMass(\"SulfuricAcid\") -&gt; \"H2 S O4\"\n#H * 2 + S * 1 +  O * 4 -----&gt; 1 * 2 + 32 * 1 + 16 * 4 = 98\n\nmolarMass(\"Water\") -&gt; \"H2 O\"\n#H * 2 +  O * 1 -----&gt; 1 * 2 + 16 * 1 = 18</code></pre><h3><span>Notes</span></h3><ul><li><span>Input is a string and return value is number.</span></li><li><span>In the data, </span><strong><span>\"O\"</span></strong><span> is an English letter, not </span><strong><span>zero</span></strong><span>.</span></li><li><span>Check out the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(molarMass(\"SulfuricAcid\"), 98)",
			"Test.assertEquals(molarMass(\"Water\"), 18)",
			"Test.assertEquals(molarMass(\"BoricAcid\"), 61)",
			"Test.assertEquals(molarMass(\"NitricAcid\"), 63)",
			"Test.assertEquals(molarMass(\"HydroChloricAcid\"), 36)"
		],
		"starterFn": [
			"1\nfunction molarMass(compound) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BZjEvK7rMNZ3uvokm"
	},
	{
		"title": "A Lonely Class for Lonely Numbers",
		"description": "<p><span>In this challenge, build a support class </span><code>Lonely</code><span> to find the last </span><em><span>Lonely</span></em><span> number inside a sequence. A number is </span><em><span>Lonely</span></em><span> if the distance from its </span><strong><span>closest</span></strong><span> Prime sets a new record of the sequence.</span></p><pre><code>Sequence = from 0 up 3\n\n// Any number lower than 3 doesn't have a Prime preceeding it...\n// ...so that you'll consider only its next closest Prime.\n\n0 has distance 2 from its closest Prime (2)\n// It's a new record! 0 It's the first lonely number of the sequence\n1 has distance 1 from its closest Prime (2)\n2 has distance 1 from 3\n3 has distance 1 from 2\n\n// The sequence 0 to 3  has only one Lonely number: 0</code></pre><pre><code>Sequence = Numbers from 5 up 10\n\n5 has distance 2 from its closest Prime (3 or 7)\n// It's a new record! 5 It's the first lonely number of the sequence\n6 has distance 1 from 5 or 7\n7 has distance 2 from 5\n8 has distance 1 from 7\n9 has distance 2 from 7 or 11\n10 has distance 1 from 11\n\n// The sequence 5 to 10  has only one Lonely number: 5</code></pre><pre><code>Sequence = Numbers from 19 up 24\n\n19 has distance 2 from its closest Prime (17)\n// It's a new record! 19 It's the first lonely number of the sequence\n20 has distance 1 from 19\n21 has distance 2 from 5\n22 has distance 1 from 23\n23 has distance 4 from 17 or 29\n// It's a new record! 23 is the second lonely number of the sequence\n24 has distance 1 from 23\n\n// The sequence 19 to 24  has two Lonely numbers: 19 and 23</code></pre><p><span>The class </span><code>Lonely</code><span> must have a static method </span><code>record()</code><span> that accepts two integers </span><code>lo</code><span> and </span><code>hi</code><span> being the inclusive bounds of the sequence to analyze, and returns an object literal with the following keys:</span></p><ul><li><code>number:</code><span> is the </span><strong><span>last </span><em><span>Lonely</span></em><span> number found</span></strong><span> in the given sequence;</span></li><li><code>distance:</code><span> is the distance of the </span><code>number</code><span> from its closest Prime;</span></li><li><code>closest:</code><span> is the Prime closest to </span><code>number</code><span> (if two Primes equally distant from </span><code>number</code><span> are found, return the </span><strong><span>higher Prime</span></strong><span>).</span></li></ul><h3><span>Examples</span></h3><pre><code>Lonely.record(0, 22) ➞ {\n  number: 0, distance: 2, closest: 2\n}\n\nLonely.record(8, 123) ➞ {\n  number: 53, distance: 6, closest: 59\n}\n\nLonely.record(938, 1190) ➞ {\n  number: 1140, distance: 11, closest: 1151\n}\n\nLonely.record(120, 1190) ➞ {\n  number: 211, distance: 12, closest: 223\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>The numbers  </span><code>0</code><span>, </span><code>1</code><span> and </span><code>2</code><span> have no previous Prime to check, so that you'll consider only the next Prime to set the distance, as in Example #1.</span></li><li><span>Remember that you are searching for the </span><strong><span>closest</span></strong><span> Prime when establishing if the distance is a record: </span><code>7</code><span> has a distance equal to </span><code>2</code><span> because its closest Prime is </span><code>5</code><span>.</span></li><li><span>If a Lonely number is equally distant from two Primes, you have to return the higher Prime, as in Example #2 (</span><code>53</code><span> has distance </span><code>6</code><span> from either </span><code>47</code><span> and </span><code>59</code><span>).</span></li><li><span>The first Lonely number of a sequence is (trivially) always equal to the sequence lower bound.</span></li><li><span>You can expect valid non-negative integers as input, without exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertDeepEquals(Lonely.record(0, 22), {",
			"  number: 0, distance: 2, closest: 2",
			"})",
			"​",
			"Test.assertDeepEquals(Lonely.record(8, 123), {",
			"  number: 120, distance: 7, closest: 127",
			"})",
			"​",
			"Test.assertDeepEquals(Lonely.record(938, 1190), {",
			"  number: 1140, distance: 11, closest: 1151",
			"})",
			"​",
			"Test.assertDeepEquals(Lonely.record(120, 1190), {",
			"  number: 211, distance: 12, closest: 223",
			"})",
			"​",
			"Test.assertDeepEquals(Lonely.record(2, 31), {",
			"  number: 23, distance: 4, closest: 19",
			"})",
			"​",
			"Test.assertDeepEquals(Lonely.record(14, 50), {",
			"  number: 23, distance: 4, closest: 19",
			"})",
			"​",
			"Test.assertDeepEquals(Lonely.record(889, 1389), {",
			"  number: 1344, distance: 17, closest: 1361"
		],
		"starterFn": [
			"1\nclass Lonely {",
			"2\n  static record(lo, hi) {",
			"3\n    ",
			"4\n  }",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/diSXtsft9ux8Wq98j"
	},
	{
		"title": "Centered Hexagonal Number",
		"description": "<p><span>As stated on the </span><a target=\"_blank\" href=\"https://oeis.org/A003215\"><span>On-Line Encyclopedia of Integer Sequences</span></a><span>: </span></p><blockquote><p><span>The hexagonal lattice is the familiar 2-dimensional lattice in which each point has 6 neighbors.</span></p></blockquote><p><span>A </span><strong><span>centered hexagonal number</span></strong><span> is a centered figurate number that represents a hexagon with a dot in the center and all other dots surrounding the center dot in a hexagonal lattice.</span></p><p><span>At the end of that web page the following illustration is shown:</span></p><pre><code>Illustration of initial terms:\n.\n.                                 o o o o\n.                   o o o        o o o o o\n.         o o      o o o o      o o o o o o\n.   o    o o o    o o o o o    o o o o o o o\n.         o o      o o o o      o o o o o o\n.                   o o o        o o o o o\n.                                 o o o o\n.\n.   1      7          19             37\n.</code></pre><p><span>Write a function that takes an integer </span><code>n</code><span> and returns </span><code>\"Invalid\"</code><span> if </span><code>n</code><span> is not a </span><strong><span>centered hexagonal number</span></strong><span> or its illustration as a multiline rectangular string otherwise.</span></p><h3><span>Examples</span></h3><pre><code class=\"language-js\">hexLattice(1) ➞ \" o \"\n// o\n\nhexLattice(7) ➞ \"  o o  \\n o o o \\n  o o  \"\n//  o o\n// o o o\n//  o o\n\nhexLattice(19) ➞ \"   o o o   \\n  o o o o  \\n o o o o o \\n  o o o o  \\n   o o o   \"\n//   o o o\n//  o o o o\n// o o o o o\n//  o o o o\n//   o o o\n\nhexLattice(21) ➞ \"Invalid\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(hexLattice(1), \" o \")",
			"Test.assertEquals(hexLattice(2), \"Invalid\")",
			"Test.assertEquals(hexLattice(4), \"Invalid\")",
			"Test.assertEquals(hexLattice(6), \"Invalid\")",
			"Test.assertEquals(hexLattice(7), \"  o o  \\n o o o \\n  o o  \")",
			"Test.assertEquals(hexLattice(10), \"Invalid\")",
			"Test.assertEquals(hexLattice(18), \"Invalid\")",
			"Test.assertEquals(hexLattice(19), \"   o o o   \\n  o o o o  \\n o o o o o \\n  o o o o  \\n   o o o   \")",
			"Test.assertEquals(hexLattice(37), \"    o o o o    \\n   o o o o o   \\n  o o o o o o  \\n o o o o o o o \\n  o o o o o o  \\n   o o o o o   \\n    o o o o    \")",
			"Test.assertEquals(hexLattice(45), \"Invalid\")",
			"Test.assertEquals(hexLattice(1387), \"                      o o o o o o o o o o o o o o o o o o o o o o                      \\n                     o o o o o o o o o o o o o o o o o o o o o o o                     \\n                    o o o o o o o o o o o o o o o o o o o o o o o o                    \\n                   o o o o o o o o o o o o o o o o o o o o o o o o o                   \\n                  o o o o o o o o o o o o o o o o o o o o o o o o o o                  \\n                 o o o o o o o o o o o o o o o o o o o o o o o o o o o                 \\n                o o o o o o o o o o o o o o o o o o o o o o o o o o o o                \\n               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o               \\n              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o              \\n             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o             \\n            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o            \\n           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o           \\n          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o          \\n         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o         \\n        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o        \\n       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o       \\n      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o      \\n     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o     \\n    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o    \\n   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o   \\n  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o  \\n o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o \\n  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o  \\n   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o   \\n    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o    \\n     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o     \\n      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o      \\n       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o       \\n        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o        \\n         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o         \\n          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o          \\n           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o           \\n            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o            \\n             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o             \\n              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o              \\n               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o               \\n                o o o o o o o o o o o o o o o o o o o o o o o o o o o o                \\n                 o o o o o o o o o o o o o o o o o o o o o o o o o o o                 \\n                  o o o o o o o o o o o o o o o o o o o o o o o o o o                  \\n                   o o o o o o o o o o o o o o o o o o o o o o o o o                   \\n                    o o o o o o o o o o o o o o o o o o o o o o o o                    \\n                     o o o o o o o o o o o o o o o o o o o o o o o                     \\n                      o o o o o o o o o o o o o o o o o o o o o o                      \")",
			"Test.assertEquals(hexLattice(1500), \"Invalid\")",
			"Test.assertEquals(hexLattice(6487), \"                                               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                               \\n                                              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                              \\n                                             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                             \\n                                            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                            \\n                                           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                           \\n                                          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                          \\n                                         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                         \\n                                        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                        \\n                                       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                       \\n                                      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                      \\n                                     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                     \\n                                    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                    \\n                                   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                   \\n                                  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                  \\n                                 o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                 \\n                                o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                \\n                               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                               \\n                              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                              \\n                             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                             \\n                            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                            \\n                           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                           \\n                          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                          \\n                         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                         \\n                        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                        \\n                       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                       \\n                      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                      \\n                     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                     \\n                    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                    \\n                   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                   \\n                  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                  \\n                 o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                 \\n                o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                \\n               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o               \\n              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o              \\n             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o             \\n            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o            \\n           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o           \\n          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o          \\n         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o         \\n        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o        \\n       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o       \\n      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o      \\n     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o     \\n    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o    \\n   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o   \\n  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o  \\n o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o \\n  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o  \\n   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o   \\n    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o    \\n     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o     \\n      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o      \\n       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o       \\n        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o        \\n         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o         \\n          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o          \\n           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o           \\n            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o            \\n             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o             \\n              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o              \\n               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o               \\n                o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                \\n                 o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                 \\n                  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                  \\n                   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                   \\n                    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                    \\n                     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                     \\n                      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                      \\n                       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                       \\n                        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                        \\n                         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                         \\n                          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                          \\n                           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                           \\n                            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                            \\n                             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                             \\n                              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                              \\n                               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                               \\n                                o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                \\n                                 o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                 \\n                                  o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                  \\n                                   o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                   \\n                                    o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                    \\n                                     o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                     \\n                                      o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                      \\n                                       o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                       \\n                                        o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                        \\n                                         o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                         \\n                                          o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                          \\n                                           o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                           \\n                                            o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                            \\n                                             o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                             \\n                                              o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                              \\n                                               o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o                                               \")",
			"Test.assertEquals(hexLattice(7777), \"Invalid\")"
		],
		"starterFn": [
			"1\nfunction hexLattice(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CPYrpoJyK4nJhRkhw"
	},
	{
		"title": "Interprime Numbers",
		"description": "<p><span>An </span><strong><span>interprime</span></strong><span> number is a composite number which is equidistant from two consecutive primes. For example, the interprime 6 is 1 point after 5, a prime, and 1 point before the next prime, 7. Another interprime is 93, which lies midway between primes 89 and 97.</span></p><p><span>Create a function that takes a number </span><code>n</code><span> as input. If </span><code>n</code><span> is an interprime number, return an array containing the two consecutive primes between which it lies. If it isn't, return an empty array.</span></p><h3><span>Examples</span></h3><pre><code>interprime(6) ➞ [5, 7]\n\ninterprime(9) ➞ [7, 11]\n\ninterprime(8) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Interprimes cannot be prime themselves (otherwise the primes would not have been consecutive).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(interprime(6), [5, 7])",
			"Test.assertSimilar(interprime(9), [7, 11])",
			"Test.assertSimilar(interprime(473), [467, 479])",
			"Test.assertSimilar(interprime(373), [])",
			"Test.assertSimilar(interprime(756), [])",
			"Test.assertSimilar(interprime(413), [])",
			"Test.assertSimilar(interprime(924), [919, 929])"
		],
		"starterFn": [
			"1\nfunction interprime(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Lmxq4ijbxX6pFPdQ6"
	},
	{
		"title": "Fruity Smoothie",
		"description": "<p><span>Create a class </span><code>Smoothie</code><span> and do the following:</span></p><ul><li><span>Create a constructor property called </span><code>ingredients</code><span>.</span></li><li><span>Create a </span><code>getCost</code><span> method which calculates the total cost of the </span><em><span>ingredients used</span></em><span> to make the smoothie.</span></li><li><span>Create a </span><code>getPrice</code><span> method which returns the number from </span><code>getCost</code><span> </span><strong><span>plus</span></strong><span> the number from </span><code>getCost</code><span> multiplied by </span><strong><span>1.5</span></strong><span>. Round to </span><strong><span>two decimal places</span></strong><span>.</span></li><li><span>Create a </span><code>getName</code><span> method which gets the ingredients and puts them in </span><strong><span>alphabetical order</span></strong><span> into a nice descriptive sentence. If there are multiple ingredients, add the word </span><em><span>'Fusion'</span></em><span> to the end but otherwise, add </span><em><span>'Smoothie'</span></em><span>. Remember to change </span><strong><span>'-berries</span></strong><span> to </span><strong><span>'-berry'</span></strong><span>. See the examples below.</span></li></ul><table><thead><tr><th><span>Ingredient</span></th><th><span>Price</span></th></tr></thead><tbody><tr><td><span>Strawberries</span></td><td><span>$1.50</span></td></tr><tr><td><span>Banana</span></td><td><span>$0.50</span></td></tr><tr><td><span>Mango</span></td><td><span>$2.50</span></td></tr><tr><td><span>Blueberries</span></td><td><span>$1.00</span></td></tr><tr><td><span>Raspberries</span></td><td><span>$1.00</span></td></tr><tr><td><span>Apples</span></td><td><span>$1.75</span></td></tr><tr><td><span>Pineapple</span></td><td><span>$3.50</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>s1 = new Smoothie([\"Banana\"])\n\ns1.ingredients ➞ [\"Banana\"]\n\ns1.getCost() ➞ \"$0.50\"\n\ns1.getPrice() ➞ \"$1.25\"\n\ns1.getName() ➞ \"Banana Smoothie\"</code></pre><pre><code>s2 = Smoothie([\"Raspberries\", \"Strawberries\", \"Blueberries\"])\n\ns2.ingredients ➞ [\"Raspberries\", \"Strawberries\", \"Blueberries\"]\n\ns2.getCost() ➞ \"$3.50\"\n\ns2.getPrice() ➞ \"$8.75\"\n\ns2.getName() ➞ \"Blueberry Raspberry Strawberry Fusion\"</code></pre><h3><span>Notes</span></h3><p><span>Feel free to check out the </span><strong><span>Resources</span></strong><span> tab for a refresher on classes.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"data_structures",
			"formatting",
			"objects"
		],
		"tests": [
			"let s1 = new Smoothie([\"Banana\"]),",
			"    s2 = new Smoothie([\"Raspberries\", \"Strawberries\", \"Blueberries\"]),",
			"    s3 = new Smoothie([\"Mango\", \"Apple\", \"Pineapple\"]),",
			"    s4 = new Smoothie([\"Pineapple\", \"Strawberries\", \"Blueberries\", \"Mango\"]),",
			"    s5 = new Smoothie([\"Blueberries\"])",
			"​",
			"Test.assertSimilar(s1.ingredients, [\"Banana\"])",
			"Test.assertEquals(s1.getCost(), \"$0.50\")",
			"Test.assertEquals(s1.getPrice(), \"$1.25\")",
			"Test.assertEquals(s1.getName(), \"Banana Smoothie\")",
			"Test.assertSimilar(s2.ingredients, [\"Raspberries\", \"Strawberries\", \"Blueberries\"])",
			"Test.assertEquals(s2.getCost(), \"$3.50\")",
			"Test.assertEquals(s2.getPrice(), \"$8.75\")",
			"Test.assertEquals(s2.getName(), \"Blueberry Raspberry Strawberry Fusion\")",
			"Test.assertSimilar(s3.ingredients, [\"Mango\", \"Apple\", \"Pineapple\"])",
			"Test.assertEquals(s3.getCost(), \"$7.75\")",
			"Test.assertEquals(s3.getPrice(), \"$19.38\")",
			"Test.assertEquals(s3.getName(), \"Apple Mango Pineapple Fusion\")",
			"Test.assertSimilar(s4.ingredients, [\"Pineapple\", \"Strawberries\", \"Blueberries\", \"Mango\"])",
			"Test.assertEquals(s4.getCost(), \"$8.50\")",
			"Test.assertEquals(s4.getPrice(), \"$21.25\")",
			"Test.assertEquals(s4.getName(), \"Blueberry Mango Pineapple Strawberry Fusion\")",
			"Test.assertSimilar(s5.ingredients, [\"Blueberries\"])",
			"Test.assertEquals(s5.getCost(), \"$1.00\")",
			"Test.assertEquals(s5.getPrice(), \"$2.50\")",
			"Test.assertEquals(s5.getName(), \"Blueberry Smoothie\")"
		],
		"starterFn": [
			"1\nconst prices = {",
			"2\n  Strawberries: \"$1.50\", Banana: \"$0.50\", Mango: \"$2.50\",",
			"3\n  Blueberries: \"$1.00\", Raspberries: \"$1.00\", Apple: \"$1.75\",",
			"4\n  Pineapple: \"$3.50\"",
			"5\n}",
			"6\n​",
			"7\nclass Smoothie {",
			"8\n  ",
			"9\n}"
		],
		"url": "https://edabit.com/challenge/7ytmgtAXGAccwpvJN"
	},
	{
		"title": "Complete the Word",
		"description": "<p><span>An input string can be completed if additional letters can be added and no letters need to be taken away to match the word. Furthermore, the order of the letters in the input string must be the same as the order of letters in the final word.</span></p><p><span>Create a function that, given an input string, determines if the word can be completed.</span></p><h3><span>Examples</span></h3><pre><code>canComplete(\"butl\", \"beautiful\") ➞ true\n// We can add \"ea\" between \"b\" and \"u\", and \"ifu\" between \"t\" and \"l\".\n\ncanComplete(\"butlz\", \"beautiful\") ➞ false\n// \"z\" does not exist in the word beautiful.\n\ncanComplete(\"tulb\", \"beautiful\") ➞ false\n// Although \"t\", \"u\", \"l\" and \"b\" all exist in \"beautiful\", they are incorrectly ordered.\n\ncanComplete(\"bbutl\", \"beautiful\") ➞ false\n// Too many \"b\"s, beautiful has only 1.</code></pre><h3><span>Notes</span></h3><p><span>Both string input and word will be lowercased.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canComplete('butl', 'beautiful'), true)",
			"Test.assertEquals(canComplete('butlz', 'beautiful'), false, \"'z' does not exist in the word `beautiful`\")",
			"Test.assertEquals(canComplete('tulb', 'beautiful'), false, \"although 't', 'u', 'l' and 'b' incorrectly ordered\")",
			"Test.assertEquals(canComplete('bbutl', 'beautiful'), false, \"too many 'b's, beautiful has only 1\")",
			"Test.assertEquals(canComplete('sg', 'something'), true)",
			"Test.assertEquals(canComplete('sgi', 'something'), false, \"out of order\")",
			"Test.assertEquals(canComplete('sing', 'something'), true)",
			"Test.assertEquals(canComplete('siing', 'something'), false, \"too many i's\")"
		],
		"starterFn": [
			"1\nfunction canComplete(initial, word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Hx8tidhX6gXNK56aF"
	},
	{
		"title": "Strip URL Query Parameters",
		"description": "<p><span>Create a function that takes a URL (string), removes duplicate query parameters and parameters specified within the 2nd argument (which will be an </span><em><span>optional</span></em><span> array).</span></p><h3><span>Examples</span></h3><pre><code>stripUrlParams(\"https://edabit.com?a=1&amp;b=2&amp;a=2\") ➞ \"https://edabit.com?a=2&amp;b=2\"\n\nstripUrlParams(\"https://edabit.com?a=1&amp;b=2&amp;a=2\", [\"b\"]) ➞ \"https://edabit.com?a=2\"\n\nstripUrlParams(\"https://edabit.com\", [\"b\"]) ➞ \"https://edabit.com\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The 2nd argument </span><code>paramsToStrip</code><span> is optional.</span></li><li><code>paramsToStrip</code><span> can contain multiple params.</span></li><li><span>If there are duplicate query parameters with different values, use the value of the last occurring parameter (see examples #1 and #2 above).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&a=2\"), \"https://edabit.com?a=2&b=2\")",
			"Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&a=2\", [\"b\"]), \"https://edabit.com?a=2\")",
			"Test.assertEquals(stripUrlParams(\"https://edabit.com\", [\"b\"]), \"https://edabit.com\")",
			"Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2\"), \"https://edabit.com?a=1&b=2\")",
			"Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2\", [\"c\"]), \"https://edabit.com?a=1&b=2\")",
			"Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&c=3&d=4\", [\"a\", \"d\"]), \"https://edabit.com?b=2&c=3\", \"The 2nd argument can contain multiple URL params.\")",
			"Test.assertEquals(stripUrlParams(\"https://edabit.com?a=1&b=2&c=3&d=4&c=5\", [\"a\", \"d\"]), \"https://edabit.com?b=2&c=5\")"
		],
		"starterFn": [
			"1\nfunction stripUrlParams(url, paramsToStrip) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PoqAEPydtM2CEssSQ"
	},
	{
		"title": "Mind the Gap",
		"description": "<p><span>A number is </span><strong><span>gapful</span></strong><span> if it is at least 3 digits long and is divisible by the number formed by stringing the first and last numbers together. The smallest number that fits this description is 100. First digit is 1, last digit is 0, forming 10, which is a factor of 100. Therefore, 100 is gapful.</span></p><p><span>Create a function that takes a number </span><code>n</code><span> and returns the closest gapful number (including itself). If there are 2 gapful numbers that are equidistant to </span><code>n</code><span>, return the lower one.</span></p><h3><span>Examples</span></h3><pre><code>gapful(25) ➞ 100\n\ngapful(100) ➞ 100\n\ngapful(103) ➞ 105</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(gapful(25), 100)",
			"Test.assertEquals(gapful(100), 100)",
			"Test.assertEquals(gapful(103), 105)",
			"Test.assertEquals(gapful(1442), 1441)",
			"Test.assertEquals(gapful(3345), 3333)",
			"Test.assertEquals(gapful(4780), 4773)",
			"Test.assertEquals(gapful(3078), 3078)"
		],
		"starterFn": [
			"1\nfunction gapful(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8wvYyLYo9JaRrC8dW"
	},
	{
		"title": "Shortest Subarray Whose Sum Exceeds N",
		"description": "<p><span>Write a function that returns the </span><strong><span>length of the shortest subarray</span></strong><span> whose sum of all elements </span><strong><span>strictly exceeds</span></strong><span> </span><code>n</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>minLength([5, 8, 2, -1, 3, 4], 9) ➞ 2\n\nminLength([3, -1, 4, -2, -7, 2], 4) ➞ 3\n// Shortest subarray whose sum exceeds 4 is: [3, -1, 4]\n\nminLength([1, 0, 0, 0, 1], 1) ➞ 5\n\nminLength([0, 1, 1, 0], 2) ➞ -1</code></pre><h3><span>Notes</span></h3><ul><li><span>The subarray should be composed of </span><strong><span>contiguous elements</span></strong><span> from the original array.</span></li><li><span>If no such subarray exists, return </span><code>-1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(minLength([5, 10, 2, -1, 3, 4], 9), 1)",
			"Test.assertEquals(minLength([3, -1, 4, -2, -7, 2], 4), 3)",
			"Test.assertEquals(minLength([-5, 3, 2, 7, 8, 9, -1, 5], 16), 2)",
			"Test.assertEquals(minLength([1, 0, -1, 1, 1], 1), 2)",
			"Test.assertEquals(minLength([1, 0, 1, 1, -1, 0, 1], 2), 4)",
			"Test.assertEquals(minLength([1, 0, 0, 0, 1], 1), 5)",
			"Test.assertEquals(minLength([1, 0, 1, 0, 1], 1), 3)",
			"Test.assertEquals(minLength([-1, 1, 1, 0, 1, 1], 3), 5)",
			"Test.assertEquals(minLength([3, -1, 4, 3, 0, 1, 2], 7), 4)",
			"Test.assertEquals(minLength([0, 1, 1, 0], 2), -1)",
			"Test.assertEquals(minLength([0, 1, 5, 2, 0], 10), -1)",
			"Test.assertEquals(minLength([3, -1, 4, -2, -7, 2], 6), -1)"
		],
		"starterFn": [
			"1\nfunction minLength(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kfFvrue8r45zZahXW"
	},
	{
		"title": "Odd One Out",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if </span><strong><span>exactly one word</span></strong><span> in the array differs in length from the rest. Return </span><code>false</code><span> in all other cases.</span></p><h3><span>Examples</span></h3><pre><code>oddOneOut([\"silly\", \"mom\", \"let\", \"the\"]) ➞ true\n\noddOneOut([\"swanky\", \"rhino\", \"moment\"]) ➞ true\n\noddOneOut([\"the\", \"them\", \"theme\"]) ➞ false\n\noddOneOut([\"very\", \"to\", \"an\", \"some\"]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>The length of the array will always have at least </span><strong><span>three or more</span></strong><span> words.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(oddOneOut([\"silly\", \"mom\", \"let\", \"the\"]), true)",
			"Test.assertEquals(oddOneOut([\"swanky\", \"rhino\", \"moment\"]), true)",
			"Test.assertEquals(oddOneOut([\"the\", \"them\", \"theme\"]), false)",
			"Test.assertEquals(oddOneOut([\"very\", \"to\", \"an\", \"some\"]), false)",
			"Test.assertEquals(oddOneOut([\"very\", \"to\", \"then\", \"some\"]), true)"
		],
		"starterFn": [
			"1\nfunction oddOneOut(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PEecJK7uPz5m2oD9i"
	},
	{
		"title": "Almost-Palindrome Sieve",
		"description": "<p><span>Write a function that takes in an array of integers and returns the integers that are either </span><strong><span>palindromes</span></strong><span> or  </span><strong><span>almost-palindromes</span></strong><span>. An </span><strong><span>almost-palindrome</span></strong><span> is any integer that can be rearranged to form a palindrome.</span></p><p><span>For example, the numbers </span><code>677</code><span> and </span><code>338</code><span> are both </span><strong><span>almost-palindromes</span></strong><span>, since they can be rearranged to form </span><code>767</code><span> and </span><code>383</code><span>, respectively.</span></p><h3><span>Examples</span></h3><pre><code>palindromeSieve([443, 12, 639, 121, 3232]) ➞ [443, 121, 3232]\n// Since 443 =&gt; 434; 121 is a palindrome; 3232 =&gt; 2332 or 3223\n\npalindromeSieve([5, 55, 6655, 8787]) ➞ [5, 55, 6655, 8787]\n// Single-digit numbers are automatically palindromes.\n\npalindromeSieve([897, 89, 23, 54, 6197, 53342]) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>Return an empty array if none of the numbers are palindromes or almost-palindromes.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(palindromeSieve([443, 12, 639, 121, 3232]), [443, 121, 3232])",
			"Test.assertSimilar(palindromeSieve([5, 55, 6655, 8787]), [5, 55, 6655, 8787])",
			"Test.assertSimilar(palindromeSieve([897, 89, 23, 54, 6197, 53342]), [])",
			"Test.assertSimilar(palindromeSieve([112, 334, 555, 656, 665, 444, 443, 7]), [112, 334, 555, 656, 665, 444, 443, 7])",
			"Test.assertSimilar(palindromeSieve([1, 2, 123]), [1, 2])",
			"Test.assertSimilar(palindromeSieve([1, 2, 3]), [1, 2, 3])",
			"Test.assertSimilar(palindromeSieve([555, 687868877]), [555, 687868877])",
			"Test.assertSimilar(palindromeSieve([555, 68786887]), [555, 68786887])"
		],
		"starterFn": [
			"1\nfunction palindromeSieve(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xPnZKhYcn5TwK3HFT"
	},
	{
		"title": "Max Increase While Keeping City Skyline",
		"description": "<p><span>In a 2 dimensional array, each value represents the height of a building located there. You are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings).</span></p><p><span>At the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance.</span></p><p><span>Create a function that updates the heights of the buildings to the maximum possible under conditions: keep the original vertical and horizontal skylines; keep the zero heights equal to zero.</span></p><h3><span>Examples</span></h3><pre><code>[\n  [3, 0, 8, 4],\n  [2, 4, 5, 7],\n  [9, 2, 6, 3],\n  [0, 3, 1, 0]\n]\n\n// Skyline viewed from top or bottom: [9, 4, 8, 7]\n// Skyline viewed from left or right: [8, 7, 9, 3]\n\n[\n  [8, 0, 8, 7],\n  [7, 4, 7, 7],\n  [9, 4, 8, 7],\n  [0, 3, 3, 0]\n]\n\n// Grid after increasing the height of buildings\n// without affecting skylines.</code></pre><h3><span>Notes</span></h3><p><span>Height </span><code>0</code><span> is considered to be a protected park and nothing should be built on top of it.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(",
			"  keepSkyline([[3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0]]),",
			"  [[8, 0, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [0, 3, 3, 0]]",
			");",
			"Test.assertSimilar(",
			"  keepSkyline([[3, 1, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [1, 3, 1, 1]]),",
			"  [[8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3]]",
			");",
			"Test.assertSimilar(",
			"  keepSkyline([[11, 19, 4, 5, 6], [6, 21, 5, 13, 4], [9, 2, 0, 11, 3]]),",
			"  [[11, 19, 5, 13, 6], [11, 21, 5, 13, 6], [11, 11, 0, 11, 6]]",
			");",
			"Test.assertSimilar(",
			"  keepSkyline([[11, 10, 6], [14, 5, 8], [7, 2, 0], [8, 18, 12], [2, 8, 4]]),",
			"  [[11, 11, 11], [14, 14, 12], [7, 7, 0], [14, 18, 12], [8, 8, 8]]",
			");"
		],
		"starterFn": [
			"1\nfunction keepSkyline(grid) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zLNho5QD5LcZReZxi"
	},
	{
		"title": "Early Birds",
		"description": "<p><span>A </span><strong><span>Natural Number String Sequence</span></strong><span> is a string containing all numbers, starting from 0, joined without spaces or other delimitators between them.</span></p><pre><code>\"01234567891011121314151617181920...\"</code></pre><p><span>If you think of the sequence as an array, any number has a natural position index it occupies within a string long enough to contain it based on the real position in the numeric sequence. Looking at the example above, numbers from 0 to 9 are equals to their index position in the string; starting from 10, every number has a string natural index position different from itself (number 10 has a position of 10|11 because it has two digits, number 11 has a position of 12|13, and so on).</span></p><p><span>When a number appears in the sequence </span><strong><span>before</span></strong><span> its natural position is an </span><strong><span>Early Bird</span></strong><span>. Suppose that we want to know if number 12 is an Early Bird in the above example sequence:</span></p><pre><code>01234567891011121314151617181920\n_!!___________!!________________</code></pre><p><span>Natural position index of 12 is </span><strong><span>|14, 15|</span></strong><span> (after 11 and before 13 in the numeric sequence), but, if we look closely at the sequence, it appears before its natural position, at index </span><strong><span>|1, 2|</span></strong><span> (after 0 and before 3): 12 is then an Early Bird number (and the first to appear, also).</span></p><p><span>You are given two integers as parameters: </span><code>range</code><span> is the ending number of the string sequence to generate, and </span><code>n</code><span> is the number to analyze. You must implement a function that returns an array that contains the position indexes of </span><code>n</code><span> (with every position index being an array in turn), and the string </span><code>\"Early Bird!\"</code><span> as the last element of the array only if </span><code>n</code><span> is an Early Bird. If </span><code>n</code><span> it's not an Early Bird and the returned array has to contain just the array with its natural position index.</span></p><h3><span>Examples</span></h3><pre><code>isEarlyBird(20, 14) ➞ [[18, 19]]\n\nisEarlyBird(20, 12) ➞ [[1, 2], [14, 15], \"Early Bird!\"]\n\nisEarlyBird(101, 101) ➞ [[10, 11, 12], [193, 194, 195], \"Early Bird!\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>In every given case, the range will be high enough to obtain the natural position of the number, don't worry about exceptions handling. </span></li><li><span>The given number </span><code>n</code><span> will be greater than 9 for every case, as trivially every single-digit number appears at the same index in the numeric sequence and in the string sequence.</span></li><li><span>The position indexes have to be in the order they appear in the string sequence.</span></li><li><span>The string at the end of the array has to be present only if  </span><code>n</code><span> is an Early Bird.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> tab for more info on this sequence.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(isEarlyBird(20, 12), [[1, 2], [14, 15], 'Early Bird!'], \"Example in Instructions tab\")",
			"Test.assertSimilar(isEarlyBird(20, 14), [[18, 19]])",
			"Test.assertSimilar(isEarlyBird(101, 101), [[10, 11, 12], [193, 194, 195], 'Early Bird!'])",
			"Test.assertSimilar(isEarlyBird(50, 34), [[3, 4], [58, 59], [77, 78], 'Early Bird!'])",
			"Test.assertSimilar(isEarlyBird(212, 156), [[358, 359, 360]])",
			"Test.assertSimilar(isEarlyBird(400, 240), [[610, 611, 612]])",
			"Test.assertSimilar(isEarlyBird(900, 888), [[166, 167, 168], [2554, 2555, 2556], [2555, 2556, 2557], [2556, 2557, 2558], 'Early Bird!'])",
			"Test.assertSimilar(isEarlyBird(1200, 745), [[1263, 1264, 1265], [1613, 1614, 1615], [2125, 2126, 2127], 'Early Bird!'])",
			"Test.assertSimilar(isEarlyBird(2000, 666), [[122, 123, 124], [1888, 1889, 1890], [1889, 1890, 1891], [1890, 1891, 1892], [5555, 5556, 5557], 'Early Bird!'])"
		],
		"starterFn": [
			"1\nfunction isEarlyBird(range, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oPcmocNP9BDwbN43L"
	},
	{
		"title": "Difference Cipher",
		"description": "<p><span>It's time to send and receive secret messages.</span></p><p><span>Create a single function that takes a string </span><strong><span>or</span></strong><span> an array and returns a coded or decoded message.</span></p><p><span>The first letter of the string, or the first element of the array represents the Character Code of that letter. The next elements are the differences between the characters:\ne.g. </span><code>A</code><span> +3 --&gt; </span><code>C</code><span> or </span><code>z</code><span> -1 --&gt; </span><code>y</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>difCiph(\"Hello\") ➞ [72, 29, 7, 0, 3]\n// H = 72, the difference between the H and e is 29 (upper- and lowercase).\n// The difference between the two l's is obviously 0.\n\ndifCiph([ 72, 33, -73, 84, -12, -3, 13, -13, -68 ]) ➞ \"Hi there!\"\n\ndifCiph(\"Sunshine\") ➞ [83, 34, -7, 5, -11, 1, 5, -9]</code></pre><h3><span>Notes</span></h3><p><span>The input of the function will always be a string </span><strong><span>or</span></strong><span> an array with numbers.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(difCiph(\"How are you?\"), [72, 39, 8, -87, 65, 17, -13, -69, 89, -10, 6, -54])",
			"Test.assertSimilar(difCiph(\"?\"), [63])",
			"Test.assertSimilar(difCiph([84, 20,  -3,  -69,  78,  -9,  4,  -2,  1,  -6,  13,  6,  -3,  1,  -83,  65,  17,  -13,  -69,  83,  1,  -2,  -17,  13,  -7,  -2,  -55,  0 ]), \"The neighbours are strange..\")",
			"Test.assertSimilar(difCiph(\"It's a secret!\"), [73, 43, -77, 76, -83, 65, -65, 83, -14, -2, 15, -13, 15, -83 ])",
			"Test.assertSimilar(difCiph([79, -4 ]), \"OK\")",
			"Test.assertSimilar(difCiph([84, 27,  -2,  2,  3,  0,  -3,  8,  -75,  -12,  19,  -19,  80,  -3,  -77,  73,  5,  -78,  84,  -12,  -3,  -69,  71,  -6,  17,  -14,  1,  9,  -64 ]), \"Tomorrow, 3 pm in the garden.\")",
			"Test.assertSimilar(difCiph(difCiph(\"Double test!\")), \"Double test!\")",
			"Test.assertSimilar(difCiph(\"Sunshine\"), [83, 34, -7, 5, -11, 1, 5, -9])"
		],
		"starterFn": [
			"1\nfunction difCiph(input) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vzvh4papXafwAWSNS"
	},
	{
		"title": "Identical Row and Column?",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if there exists a row that is identical to a column in a 2-D matrix, otherwise </span><code>false</code><span>.</span></p><p><span>To illustrate:</span></p><pre><code>[\n  [1, 2, 3, 4],\n  [2, 4, 9, 8],\n  [5, 9, 7, 7],\n  [6, 8, 1, 0]\n]\n\n// 2nd row + 2nd column are identical: [2, 4, 9, 8]</code></pre><h3><span>Examples</span></h3><pre><code>hasIdentical([\n  [4, 4, 4, 4],\n  [2, 4, 9, 8],\n  [5, 4, 7, 7],\n  [6, 4, 1, 0]\n]) ➞ true\n\nhasIdentical([\n  [4, 4, 9, 4],\n  [2, 1, 9, 8],\n  [5, 4, 7, 7],\n  [6, 4, 1, 0]\n]) ➞ false\n\nhasIdentical([\n  [4, 4]\n  [2, 1]\n]) ➞ false\n\nhasIdentical([\n  [4, 2]\n  [2, 1]\n]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Non-square matrices should return </span><code>false</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(hasIdentical([",
			"  [4, 4, 4, 4], ",
			"  [2, 4, 9, 8], ",
			"  [5, 4, 7, 7], ",
			"  [6, 4, 1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(hasIdentical([",
			"  [4, 2, 4, 6, 1], ",
			"  [2, 4, 9, 4, 5], ",
			"  [5, 1, 7, 1, 9], ",
			"  [6, 4, 1, 0, 33], ",
			"  [5, 5, 5, 33, 5]",
			"]), true)",
			"​",
			"Test.assertEquals(hasIdentical([",
			"  [4, 2],",
			"  [2, 1]",
			"]), true)",
			"​",
			"Test.assertEquals(hasIdentical([",
			"  [4, 4, 9, 4], ",
			"  [2, 1, 9, 8], ",
			"  [5, 4, 7, 7], ",
			"  [6, 4, 1, 0]",
			"]), false)"
		],
		"starterFn": [
			"1\nfunction hasIdentical(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MXbibjS95Y8X4wDZx"
	},
	{
		"title": "Are Pairs Sufficient for a Clear Ordering?",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if an array of pairs are sufficient for a clear ordering of all items.</span></p><p><span>To illustrate:</span></p><pre><code>clearOrdering([[\"D\", \"A\"], [\"C\", \"B\"], [\"A\", \"C\"]]) ➞ true\n// Since unequivocally: \"D\" &lt; \"A\" &lt; \"C\" &lt; \"B\"</code></pre><p><span>On the other hand:</span></p><pre><code>clearOrdering([[\"D\", \"A\"], [\"B\", \"A\"], [\"C\", \"D\"]]) ➞ false\n// Since we know that \"C\" &lt; \"D\" &lt; \"A\", and we know \"B\" &lt; \"A\"\n// but we don't know anything about \"B\"s relationship with \"C\" or \"D\".</code></pre><h3><span>Examples</span></h3><pre><code>clearOrdering([[\"S\", \"T\"], [\"T\", \"U\"], [\"U\", \"V\"]]) ➞ true\n\nclearOrdering([[\"T\", \"S\"], [\"T\", \"U\"], [\"U\", \"V\"], [\"V\", \"W\"]]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>See Comments for a good visualization of the question.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic"
		],
		"tests": [
			"Test.assertEquals(clearOrdering([[\"D\", \"A\"], [\"C\", \"B\"], [\"A\", \"C\"]]), true)",
			"Test.assertEquals(clearOrdering([[\"D\", \"A\"], [\"B\", \"A\"], [\"C\", \"D\"]]), false)",
			"Test.assertEquals(clearOrdering([[\"S\", \"T\"], [\"T\", \"U\"], [\"U\", \"V\"]]), true)",
			"Test.assertEquals(clearOrdering([[\"T\", \"S\"], [\"T\", \"U\"], [\"U\", \"V\"], [\"V\", \"W\"]]), false)",
			"Test.assertEquals(clearOrdering([[\"A\", \"D\"], [\"C\", \"D\"]]), false)",
			"Test.assertEquals(clearOrdering([[\"A\", \"D\"], [\"D\", \"C\"]]), true)",
			"Test.assertEquals(clearOrdering([[\"c\", \"d\"], [\"a\", \"b\"], [\"b\", \"c\"]]), true)",
			"Test.assertEquals(clearOrdering([[\"d\", \"c\"], [\"a\", \"b\"], [\"b\", \"c\"]]), false)",
			"Test.assertEquals(clearOrdering([[\"a\", \"b\"], [\"b\", \"c\"], [\"c\", \"d\"], [\"e\", \"f\"], [\"d\", \"e\"]]), true)",
			"Test.assertEquals(clearOrdering([[\"b\", \"a\"], [\"b\", \"c\"], [\"c\", \"d\"], [\"e\", \"f\"], [\"d\", \"e\"]]), false)"
		],
		"starterFn": [
			"1\nfunction clearOrdering(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9cwxZNTWByMeEQAej"
	},
	{
		"title": "String Incrementer",
		"description": "<p><span>Write a function which increments a string to create a new string.</span></p><ul><li><strong><span>If the string ends with a number</span></strong><span>, the number should be incremented by </span><code>1</code><span>.</span></li><li><strong><span>If the string doesn't end with a number</span></strong><span>, </span><code>1</code><span> should be </span><strong><span>added</span></strong><span> to the new string.</span></li><li><strong><span>If the number has leading zeros</span></strong><span>, the amount of digits </span><strong><span>should be considered</span></strong><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>incrementString(\"foo\") ➞ \"foo1\"\n\nincrementString(\"foobar0009\") ➞ \"foobar0010\"\n\nincrementString(\"foo099\") ➞ \"foo100\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Jaime Segura",
		"publishedByUrl": "https://edabit.com/user/faKt2ad3GNGH2gYB9",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(incrementString(\"foo\"), \"foo1\")",
			"Test.assertEquals(incrementString(\"foobar01002\"), \"foobar01003\")",
			"Test.assertEquals(incrementString(\"foobar00599\"), \"foobar00600\")",
			"Test.assertEquals(incrementString(\"foo099\"), \"foo100\")",
			"Test.assertEquals(incrementString(\"foo09999\"), \"foo10000\")"
		],
		"starterFn": [
			"1\nfunction incrementString(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4cKsMQnxaA7APdeg4"
	},
	{
		"title": "Get SHA-256 Hash",
		"description": "<p><span>Hash algorithms are easy to do one way, but essentially impossible to do in reverse. For example, if you hash something simple, like </span><code>password123</code><span>, it will give you a long code, unique to that word or phrase. Ideally, there's no way to do this in reverse. You can't take the hash code and go back to the word or phrase you started with.</span></p><p><span>Make a function that returns the SHA-256 secure hash for a given string. The hash should be formatted in a hexadecimal digit string.</span></p><h3><span>Examples</span></h3><pre><code>getSha256Hash(\"password123\") ➞ \"ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\"\n\ngetSha256Hash(\"Fluffy@home\") ➞ \"dcc1ac3a7148a2d9f47b7dbe3d733040c335b2a3d8adc7984e0c483c5b2c1665\"\n\ngetSha256Hash(\"Hey dude!\") ➞ \"14f997f08b8ad032dcb274198684f995d34043f9da00acd904dc72836359ae0f\"</code></pre><h3><span>Notes</span></h3><p><span>Bonus if you can do it without importing any libraries ;)</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"cryptography",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getSha256Hash(\"hi\"), \"8f434346648f6b96df89dda901c5176b10a6d83961dd3c1ac88b59b2dc327aa4\")",
			"Test.assertEquals(getSha256Hash(\"password123\"), \"ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f\")",
			"Test.assertEquals(getSha256Hash(\"don't use easy passwords\"), \"9fdfef802f06e384101080935fd3c938c60f92f528d520528b5c0491471a2be1\")"
		],
		"starterFn": [
			"1\nfunction getSha256Hash(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tPK2g4dGnrnqLZRX2"
	},
	{
		"title": "Stranger Danger",
		"description": "<p><span>For this challenge, the input will be a (long) string.</span></p><p><span>A word encountered for the first time is a stranger. A word encountered thrice becomes an acquaintance. A word encountered 5 times becomes a friend.</span></p><p><span>Create a function that takes the string and returns an array of two arrays. The first is an array of acquaintances in the order they became an acquaintance (see example). The second is an array of friends in the order they became a friend. Words in the friend array should no longer be in the acquaintance array.</span></p><h3><span>Examples</span></h3><pre><code>noStrangers(\"See Spot run. See Spot jump. Spot likes jumping. See Spot fly.\")\n➞ [[\"spot\", \"see\"], []]\n// \"see\" was encountered first but \"spot\" became an acquaintance earlier.</code></pre><h3><span>Notes</span></h3><ul><li><span>All words should be in lowercase.</span></li><li><span>Punctuation should be stripped except for apostrophes (e.g. doesn't, aren't, etc).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"language_fundamentals",
			"regex",
			"strings"
		],
		"tests": [
			"const t1 = \"Billy always listens to his mother. He always does what she says. If his mother says, \\\"Brush your teeth,\\\" Billy brushes his teeth. If his mother says, \\\"Go to bed,\\\" Billy goes to bed. Billy is a very good boy. A good boy listens to his mother. His mother doesn't have to ask him again. She asks him to do something one time, and she doesn't ask again. Billy is a good boy. He does what his mother asks the first time. She doesn't have to ask again. She tells Billy, \\\"You are my best child.\\\" Of course Billy is her best child. Billy is her only child.\"",
			"const t2 = \"Facts are meaningless. You could use facts to prove anything that's even remotely true. Old people don't need companionship. They need to be isolated and studied so it can be determined what nutrients they have that might be extracted for our personal use. You don't like your job, you don't strike. You go in every day and do it really half-assed. That's the American way. Don't kid yourself, Jimmy. If a cow ever got the chance, he'd eat you and everyone you care about. You don't win friends with salad. Kids, we need to talk for a moment about Krusty Brand Chew Goo Gum Like Substance. We all knew it contained spider eggs, but the hantavirus came out of left field. Fame was like a drug. But what was even more like a drug were the drugs. Well, he's kind of had it in for me ever since I accidentally ran over his dog. Actually, replace \\\"accidentally\\\" with \\\"repeatedly\\\" and replace \\\"dog\\\" with \\\"son\\\".\"",
			"const t3 = \"Snowboarding family is very important to me I'm just a regular guy I'm just a regular guy. New friends what to order off of the menu I love the smell of honest and direct not looking for a penpal, if you want to I know I listed more than 6 things making lasagna from scratch ethical nonmonogamy skiing. I don't really like talking about myself using my farmshare ethical nonmonogamy shoot me a message seeing as many countries as possible fixing my scooter. Only looking for something casual I'm a good listener making people laugh going to the gym. Not looking for a penpal local sports teams ethical nonmonogamy making people laugh down to earth, feminism only looking for something casual I value art family is very important to me bikes. Down to earth playing my guitar seeing as many countries as possible my favorite word is Breaking Bad but then it wouldn't be private. Trying this for the first time family is very important to me I'm looking for as friends. Honest and direct Kurosawa down to earth working on my body and my mind everything but country music, not looking for a penpal Neutral Milk Hotel activity partners whatever topic is on NPR I'm a good listener. I'm a big fan of tattoos ask me anything if you want to jazz cafes if you think we have something in common.\"",
			"const t4 = \"Monocle ipsum dolor sit amet winkreative Porter quality of life, Airbus A380 extraordinary Helsinki punctual alluring flat white sharp elegant. Discerning quality of life Boeing 787 remarkable carefully curated sophisticated, destination craftsmanship delightful exclusive smart punctual curated extraordinary the best Ginza. Uniforms delightful airport, Tsutaya classic liveable flat white. Essential Melbourne Lufthansa, Asia-Pacific uniforms bespoke Marylebone exclusive ryokan sophisticated extraordinary. Handsome perfect Fast Lane, business class Marylebone sophisticated Swiss ryokan sleepy bulletin the best sharp. ANA Scandinavian exquisite carefully curated artisinal hand-crafted. Signature destination Shinkansen discerning, Nordic charming premium. Sunspel cosy boutique Comme des Garcons delightful. Carefully curated uniforms Singapore perfect St Moritz. Cosy intricate boutique, Washlet business class bespoke flat white craftsmanship sleepy exclusive Baggu exquisite smart. Muji joy sophisticated Swiss Toto wardrobe. Destination Gaggenau Airbus A380 extraordinary.  Hand-crafted bureaux destination, efficient Porter Muji discerning. Concierge sharp izakaya vibrant extraordinary charming Helsinki business class finest iconic Lufthansa Singapore St Moritz Melbourne. Boutique carefully curated tote bag, destination cutting-edge impeccable. Perfect bulletin ryokan flat white.\"",
			"const t5 = \"Coffee watching a movie Werner Herzog food. Ask me anything Woody Allen if you like my profile someone who shares my sense of humor using my farmshare, whatever topic is on NPR I enjoy everything but country music I'm a big fan of as friends. Hiking vinyl records Sunday funday shoot me a message I don't take myself too seriously Kurosawa. Breaking Bad Vampire Weekend food share a new experience. I'm just a regular guy home brewing sleeping late if you're still reading this working on my body and my mind, long-term dating degree in philosophy dubstep but then it wouldn't be private I love the smell of. My beard working at a coffee shop outdoorsy my eyes grilling my favorite word is coffee. Kurosawa shoot me a message fascinates me dubstep. Making lasagna from scratch bored at home too many to list my smartphone Arrested Development, passionate about open-minded recently moved back adventures I don't really like talking about myself. Making lasagna from scratch home brewing if you want to pickles hiking The Daily Show Kurosawa\"",
			"​",
			"Test.assertSimilar(noStrangers('See Spot run. See Spot jump. Spot likes jumping. See Spot fly.'), [['spot', 'see'],[]])",
			"Test.assertSimilar(noStrangers(t1), [['says', 'a', 'good', 'boy', \"doesn't\", 'ask', 'again', 'is', 'child'], ['his', 'mother', 'to', 'billy', 'she']])",
			"Test.assertSimilar(noStrangers(t2),[['be', 'and', 'need', 'to', 'it', 'the', 'like', 'a', 'for', 'with'], ['you', \"don't\"]])",
			"Test.assertSimilar(noStrangers(t3), [['the', 'ethical', 'nonmonogamy', 'making', 'family', 'very', 'important', 'down', 'earth', 'and', 'not', 'penpal', 'of', 'if', 'you', 'something'], ['a', 'to', 'i', 'for', 'looking', 'as', 'my', 'is', \"i'm\", 'me']])",
			"Test.assertSimilar(noStrangers(t4),[['sophisticated', 'delightful', 'carefully', 'uniforms', 'flat', 'white', 'exclusive', 'discerning', 'sharp', 'business', 'class', 'boutique', 'perfect', 'ryokan'], ['extraordinary', 'curated', 'destination']])",
			"Test.assertSimilar(noStrangers(t5),[['i', 'of', 'coffee', 'me', 'home', 'if', 'kurosawa'], ['a', 'my']])"
		],
		"starterFn": [
			"1\nfunction noStrangers(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hRSynrrriRuHZMrRq"
	},
	{
		"title": "Calculate the Quartiles",
		"description": "<p><span>In statistic a quartile is a type of </span><em><span>quantile</span></em><span>, more specifically is any of the three values (q1, q2 or q3) that divide the items of a sorted frequency distribution (that starts at </span><em><span>q0</span></em><span> with the lowest value and ends at </span><em><span>q4</span></em><span> with the highest value) into four classes with each containing one fourth of the total population.</span></p><p><span>There are three main methods used for calculate the quartiles of a dataset: </span><strong><span>Tukey</span></strong><span> (</span><em><span>abbr.</span></em><span> </span><strong><span>T</span></strong><span>), </span><strong><span>Moore &amp; McCabe</span></strong><span> (</span><em><span>abbr.</span></em><span> </span><strong><span>MM</span></strong><span>) and </span><strong><span>Mendenhall &amp; Sincich</span></strong><span> (</span><em><span>abbr.</span></em><span> </span><strong><span>MS</span></strong><span>). (see </span><strong><em><span>Resources</span></em></strong><span> tab for more informations about quartiles and other calculation methods).</span></p><ul><li><span>As already said, in a dataset </span><strong><span>q0 is the lowest value</span></strong><span> and </span><strong><span>q4 is the highest value</span></strong><span>.</span></li><li><span>All methods share one common statement: </span><strong><span>q2 is equal to the median of the set.</span></strong></li><li><p><span>Using T or MM you split the dataset in two parts:</span></p><ul><li><span>If dataset has an odd  population </span><strong><span>T includes the median</span></strong><span> appending it at the end of the lower half and at the beginning of the upper half, while </span><strong><span>MM excludes the median</span></strong><span> from both parts.</span></li><li><span>If dataset has an even population is splitted in two equal parts by both methods.</span></li><li><span>With the dataset split in two </span><strong><span>q1 is equal to the median of the lower half</span></strong><span> and </span><strong><span>q3 is equal to the median of the upper half</span></strong><span>.</span></li></ul></li><li><p><span>Using MS you don't split the dataset:</span></p><ul><li><strong><span>q1 is equal to the nth term of the dataset</span></strong><span> with n equal to </span><code>(population length + 1) / 4</code><span>, </span><em><span>rounded to the nearest integer</span></em><span>, unless the decimal part is equal to </span><code>0.5</code><span>, in that case it should be </span><em><span>rounded </span><strong><span>up</span></strong><span> to the nearest integer</span></em><span>.</span></li><li><strong><span>q3 is equal to the nth term of the dataset</span></strong><span> with n equal to </span><code>3 * (population length + 1) / 4</code><span>  </span><em><span>rounded to the nearest integer</span></em><span>, unless the decimal part is equal to </span><code>0.5</code><span>, in that case it should be </span><em><span>rounded </span><strong><span>down</span></strong><span> to the nearest integer</span></em><span>.</span></li></ul></li></ul><p><span>Given an array of values and a string with one of the three possible methods (\"T\", \"MM\" or \"MS\") return an array in the form </span><code>[q0, q1, q2, q3, q4]</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>getQuartiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \"T\") ➞ [1, 3.5, 6, 8.5, 11]\n// T includes the median (q2 = 6) in lower half (1 to 6, q1 = mean of 3+4)\n// and in upper half (6 to 11, q3 = mean of 8+9).\n\ngetQuartiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], \"MM\") ➞ [1, 3, 6, 9, 11]\n// MM excludes the median in lower half (1 to 5, q1 = 3) and in upper\n// half (7 to 11, q3 = 9).\n\ngetQuartiles([1, 2, 3, 4, 5, 6, 7, 8, 9] ➞ [1, 3, 5, 7, 9]\n// With MS q1 = population + 1 = 11 / 4 = 2.75 rounded up to 3 = third\n// number of dataset, and q2 = population + 1 = 11 * 3 = 33 / 4 = 8.25\n// rounded down to 8 = eighth number of dataset.</code></pre><h3><span>Notes</span></h3><ul><li><span>Try </span><a target=\"_blank\" href=\"https://edabit.com/challenge/36cEmt2BiGTtZ9SDx\"><span>this challenge</span></a><span> if you need to get familiar with medians.</span></li><li><span>The dataset has to be sorted in ascending order.</span></li><li><span>Values can be either positive or negative integers.</span></li><li><span>All given arrays are valid, no exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(getQuartiles([4, 1, 7, 8, 3, 6, 5, 2], \"T\"), [1, 2.5, 4.5, 6.5, 8])",
			"Test.assertSimilar(getQuartiles([4, 1, 7, 8, 3, 6, 5, 2], \"MS\"), [1, 2, 4.5, 7, 8])",
			"Test.assertSimilar(getQuartiles([2, 6, 1, 8, 5, 9, 7, 4, 3], \"MM\"), [1, 2.5, 5, 7.5, 9])",
			"Test.assertSimilar(getQuartiles([2, 6, 1, 8, 5, 9, 7, 4, 3], \"MS\"), [1, 3, 5, 7, 9])",
			"Test.assertSimilar(getQuartiles([10, 3, 1, 8, 6, 4, 7, 5, 2, 9], \"T\"), [1, 3, 5.5, 8, 10])",
			"Test.assertSimilar(getQuartiles([10, 3, 1, 8, 6, 4, 7, 5, 2, 9], \"MM\"), [1, 3, 5.5, 8, 10])",
			"Test.assertSimilar(getQuartiles([10, 3, 1, 8, 6, 4, 7, 5, 2, 9], \"MS\"), [1, 3, 5.5, 8, 10])",
			"Test.assertSimilar(getQuartiles([3, 9, 11, 2, 4, 1, 8, 6, 10, 5, 7], \"T\"), [1, 3.5, 6, 8.5, 11])",
			"Test.assertSimilar(getQuartiles([3, 9, 11, 2, 4, 1, 8, 6, 10, 5, 7], \"MM\"), [1, 3, 6, 9, 11])",
			"Test.assertSimilar(getQuartiles([41, 33, 10, 26, 52, 77, 20, 39, 33, 33], \"T\"), [10, 26, 33, 41, 77])",
			"Test.assertSimilar(getQuartiles([-4, -25, -33, 12, 37, 12], \"MM\"), [-33, -25, 4, 12, 37])",
			"Test.assertSimilar(getQuartiles([-121, 8, -3, 12, 412, -66], \"MS\"), [-121, -66, 2.5, 12, 412])"
		],
		"starterFn": [
			"1\nfunction getQuartiles(arr, method) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oAv74xPhmMNZvEfHK"
	},
	{
		"title": "Mod 10 Algorithm",
		"description": "<p><span>Create a function that takes a number and checks whethers the given number is a valid credit card number using </span><strong><span>Luhn Algorithm</span></strong><span>. The return value is boolean.</span></p><h3><span>Examples</span></h3><pre><code>validCreditCard(4111111111111111) ➞ true\n// Visa Card\n\nvalidCreditCard(6451623895684318) ➞ false\n// Not a valid credit card number.\n\nvalidCreditCard(6451623895684318) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>American Express/VISA/Discover/Diner Club may be the credit card type.</span></li><li><span>Check the </span><strong><span>Resources</span></strong><span> for help.</span></li></ul>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validCreditCard(2111111111121111), false)",
			"Test.assertEquals(validCreditCard(4111111111111111), true)",
			"Test.assertEquals(validCreditCard(5500000000000004), true)",
			"Test.assertEquals(validCreditCard(378282246310005), true)",
			"Test.assertEquals(validCreditCard(7777777777777777), false)",
			"Test.assertEquals(validCreditCard(6011000000000004), true)",
			"Test.assertEquals(validCreditCard(6451623895684318), false)"
		],
		"starterFn": [
			"1\nfunction validCreditCard(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2cexaD4QfdrPJpDZS"
	},
	{
		"title": "Hole Number Sequence",
		"description": "<p><span>What do the digits 0, 4, 6, 8, and 9 have in common? Well, they are whole numbers... and they are also </span><em><span>hole</span></em><span> numbers (not actually a thing until now). Hole numbers are numbers with holes in their shapes (8 is special in that it contains two holes).</span></p><p><span>14 is a hole number with one hole. 88 is a hole number with four holes.</span></p><p><span>Your task is to create a function with argument </span><code>N</code><span> that returns the sum of the holes for the integers </span><em><span>n</span></em><span> in the range of range </span><em><span>0 &lt; n &lt;= N</span></em><span>.</span></p><p><span>To illustrate, </span><code>sumOfHoles(14)</code><span> returns </span><code>7</code><span>, because there are 7 holes in 4, 6, 8, 9, 10 and 14.</span></p><h3><span>Examples</span></h3><pre><code>sumOfHoles(4) ➞ 1\n\nsumOfHoles(6) ➞ 2\n\nsumOfHoles(8) ➞ 4\n\nsumOfHoles(6259) ➞ 12345</code></pre><h3><span>Notes</span></h3><ul><li><span>All test cases are positive real integers.</span></li><li><span>Don't forget that 8 has two holes.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers",
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(sumOfHoles(1), 0)",
			"Test.assertEquals(sumOfHoles(4), 1)",
			"Test.assertEquals(sumOfHoles(6), 2)",
			"Test.assertEquals(sumOfHoles(8), 4)",
			"Test.assertEquals(sumOfHoles(9), 5)",
			"Test.assertEquals(sumOfHoles(10), 6)",
			"Test.assertEquals(sumOfHoles(88), 90)",
			"Test.assertEquals(sumOfHoles(10000), 22893)",
			"Test.assertEquals(sumOfHoles(12345), 27991)"
		],
		"starterFn": [
			"1\nfunction sumOfHoles(N) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/67z9Tzvadgxb5pDmS"
	},
	{
		"title": "Squishing an Array",
		"description": "<p><span>Write a function that squishes an array from the left or the right.</span></p><h3><span>Examples</span></h3><pre><code>squish([1, 2, 3, 4, 5], \"left\")\n➞ [[1, 2, 3, 4, 5], [3, 3, 4, 5], [6, 4, 5], [10, 5], [15]]\n\nsquish([1, 2, 3, 4, 5], \"right\")\n➞ [[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 12], [1, 14], [15]]\n\nsquish([1, 0, 2, -3], \"left\")\n➞ [[1, 0, 2, -3], [1, 2, -3], [3, -3], [0]]\n\nsquish([1, 0, 2, -3], \"right\")\n➞ [[1, 0, 2, -3], [1, 0, -1], [1, -1], [0]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Squishing from the left is to successively sum the first two elements of an array (shortening the array in the process).</span></li><li><span>Squishing from the right is to successively sum the last two elements of an array.</span></li><li><span>Include the original array as the first element in either squish.</span></li><li><span>Return an empty array if the input is an empty array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"// Left Squish Tests",
			"Test.assertSimilar(squish([1, 2, 3, 4, 5], \"left\"), [[1, 2, 3, 4, 5], [3, 3, 4, 5], [6, 4, 5], [10, 5], [15]])",
			"Test.assertSimilar(squish([1, 0, 2, -3], \"left\"), [[1, 0, 2, -3], [1, 2, -3], [3, -3], [0]])",
			"Test.assertSimilar(squish([4, 9, -3, 2, 5], \"left\"), [[4, 9, -3, 2, 5], [13, -3, 2, 5], [10, 2, 5], [12, 5], [17]])",
			"Test.assertSimilar(squish([8, -7, 6, 1, 0, 2], \"left\"), [[8, -7, 6, 1, 0, 2], [1, 6, 1, 0, 2], [7, 1, 0, 2], [8, 0, 2], [8, 2], [10]])",
			"Test.assertSimilar(squish([8, 7], \"left\"), [[8, 7], [15]])",
			"Test.assertSimilar(squish([8], \"left\"), [[8]])",
			"Test.assertSimilar(squish([], \"left\"), [])",
			"​",
			"// Right Squish Tests",
			"Test.assertSimilar(squish([1, 2, 3, 4, 5], \"right\"), [[1, 2, 3, 4, 5], [1, 2, 3, 9], [1, 2, 12], [1, 14], [15]])",
			"Test.assertSimilar(squish([1, 0, 2, -3], \"right\"), [[1, 0, 2, -3], [1, 0, -1], [1, -1], [0]])",
			"Test.assertSimilar(squish([4, 9, -3, 2, 5], \"right\"), [[4, 9, -3, 2, 5], [4, 9, -3, 7], [4, 9, 4], [4, 13], [17]])",
			"Test.assertSimilar(squish([8, -7, 6, 1, 0, 2], \"right\"), [[8, -7, 6, 1, 0, 2], [8, -7, 6, 1, 2], [8, -7, 6, 3], [8, -7, 9], [8, 2], [10]])",
			"Test.assertSimilar(squish([8, 7], \"right\"), [[8, 7], [15]])",
			"Test.assertSimilar(squish([8], \"right\"), [[8]])",
			"Test.assertSimilar(squish([], \"right\"), [])"
		],
		"starterFn": [
			"1\nfunction squish(arr, d) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8p7apuCwgSzWkaTC8"
	},
	{
		"title": "Dividing into Chunks of Maximum Sum N",
		"description": "<p><span>Write a function that divides an array into chunks such that the sum of each chunk is </span><code>&lt;= n</code><span>. Start from the left side of the array and move to the right.</span></p><h3><span>Examples</span></h3><pre><code>divide([1, 2, 3, 4, 1, 0, 2, 2], 5)\n➞ [[1, 2], [3], [4, 1, 0], [2, 2]]\n\ndivide([1, 0, 1, 1, -1, 0, 0], 1)\n➞ [[1, 0], [1], [1, -1, 0, 0]]\n\ndivide([2, 1, 0, -1, 0, 0, 2, 1, 3], 3)\n➞ [[2, 1, 0, -1, 0, 0], [2, 1], [3]]</code></pre><h3><span>Notes</span></h3><ul><li><span>The max of the array will always be smaller than or equal to </span><code>n</code><span>.</span></li><li><span>Use the </span><strong><span>greedy approach</span></strong><span> when solving the problem (e.g. fit as many elements you can into a chunk as long as you satisfy the sum constraint).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming"
		],
		"tests": [
			"Test.assertSimilar(divide([1, 2, 3, 4, 1, 0, 2, 2], 5), [[1, 2], [3], [4, 1, 0], [2, 2]])",
			"Test.assertSimilar(divide([1, 2, 3, 4, 1, 0, 2, 2], 4), [[1, 2], [3], [4], [1, 0, 2], [2]])",
			"Test.assertSimilar(divide([1, 3, 2, -1, 2, 1, 1, 3, 1], 3), [[1], [3], [2, -1, 2], [1, 1], [3], [1]])",
			"Test.assertSimilar(divide([1, 2, 2, -1, 2, 0, 1, 0, 1], 2), [[1], [2], [2, -1], [2, 0], [1, 0, 1]])",
			"Test.assertSimilar(divide([1, 2, 2, -1, 2, 0, 1, 0, 1], 3), [[1, 2], [2, -1, 2, 0], [1, 0, 1]])",
			"Test.assertSimilar(divide([1, 2, 2, -1, 2, 0, 1, 0, 1], 5), [[1, 2, 2, -1], [2, 0, 1, 0, 1]])",
			"Test.assertSimilar(divide([2, 1, 0, -1, 0, 0, 2, 1, 3], 3), [[2, 1, 0, -1, 0, 0], [2, 1], [3]])",
			"Test.assertSimilar(divide([2, 1, 0, -1, 0, 0, 2, 1, 3], 4), [[2, 1, 0, -1, 0, 0, 2], [1, 3]])",
			"Test.assertSimilar(divide([1, 0, 1, 1, -1, 0, 0], 1), [[1, 0], [1], [1, -1, 0, 0]])",
			"Test.assertSimilar(divide([1, 0, 1, 1, -1, 0, 0], 2), [[1, 0, 1], [1, -1, 0, 0]])",
			"Test.assertSimilar(divide([1, 0, 1, 1, -1, 0, 0], 3), [[1, 0, 1, 1, -1, 0, 0]])"
		],
		"starterFn": [
			"1\nfunction divide(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RaxaX4wmKKCsrzKwJ"
	},
	{
		"title": "Find Highest Occurrence",
		"description": "<p><span>Create a function that takes an array, finds the most repeated element(s) within it and returns it/them in an array (order not important). The function should work for both integers and strings mixed together within the input array (e.g. </span><code>[1, 1, \"a\"]</code><span>).</span></p><h3><span>Examples</span></h3><pre><code>highestOccurrence([2, 3, 2, 5, 6, 7, 2]) ➞ [2]\n\nhighestOccurrence([1, 2, 3, 3, \"a\", \"b\", \"b\", \"c\"]) ➞ [3, \"b\"]\n\nhighestOccurrence([\"it\", \"keeps\", \"coding\", \"on\", \"or\", \"it\", \"gets\", \"the\", \"hose\"]) ➞ [\"it\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>If there is a tie for highest occurrence, return both (see second example above).</span></li><li><span>Don't let integers become strings and/or string become integers in the result.</span></li><li><code>NaN</code><span> counts as a number.</span></li></ul>",
		"publishedBy": "joe111",
		"publishedByUrl": "https://edabit.com/user/E3bAbAjwFzekBoMGD",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(highestOccurrence([\"a\"]), [\"a\"],\"strings should work with this function\");",
			"Test.assertSimilar(highestOccurrence([\"a\",\"a\"]), [\"a\"]);",
			"Test.assertSimilar(highestOccurrence([\"a\",\"a\",\"b\"]), [\"a\"]);",
			"Test.assertSimilar(highestOccurrence([\"a\",\"a\",\"b\"]), [\"a\"]);",
			"Test.assertSimilar(highestOccurrence([\"a\",\"a\",\"b\",\"b\"].sort()), [\"a\",\"b\"].sort(),\"if there is a tie for highest occurrence, both should be returned in the array\");",
			"Test.assertSimilar(highestOccurrence([1,\"a\",\"b\",\"b\"]), [\"b\"],\"numbers should be returned as numbers\");",
			"Test.assertSimilar(highestOccurrence([NaN,\"a\",\"b\",\"b\"]), [\"b\"],\"NaN is a number too - and a relative\");",
			"Test.assertSimilar(highestOccurrence([1,2,2,3,3,3,4,4,4,4]), [4]);",
			"Test.assertSimilar(highestOccurrence([\"ab\",\"ab\",\"b\"]), [\"ab\"]);",
			"Test.assertSimilar(highestOccurrence([\"ab\",\"ab\",\"b\",\"bb\",\"b\"].sort()), [\"b\",\"ab\"].sort());",
			"Test.assertSimilar(highestOccurrence([\"3a\",\"2a\",\"3a\"]),[\"3a\"],\"this is a cruel one, make sure that parseInt doesn't affect strings that start with digits\");",
			"Test.assertSimilar(highestOccurrence([3,3,3,4,4,4,4,2,3,6,7,6,7,6,7,6,\"a\",\"a\",\"a\",\"a\"].sort()), [3,4,6,\"a\"].sort());",
			"Test.assertSimilar(highestOccurrence([\"ab\",\"ab\",\"b\",\"bb\",\"b\"].sort()), [\"b\",\"ab\"].sort());",
			"Test.assertSimilar(highestOccurrence([0,1]).sort(), [0,1].sort(),\"there is a zero problem in your solution, perhaps there is a statement taking zero as a falsey value\");",
			"Test.assertSimilar(highestOccurrence([\"hearts\",\"diamonds\",\"diamonds\",\"spades\",\"spades\",\"clubs\"]).sort(), [\"diamonds\",\"spades\"].sort());",
			"Test.assertSimilar(highestOccurrence([\"1\",\"2\",\"2\"]), [\"2\"], \"Should have got a string as an element of the array\");",
			"Test.assertSimilar(highestOccurrence([2,2,\"2\",\"2\",4,4]).sort(), [2,\"2\",4].sort());"
		],
		"starterFn": [
			"1\nfunction highestOccurrence(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QfywtQoWim2FTKe7b"
	},
	{
		"title": "Money Bill Count",
		"description": "<p><span>Create a function </span><code>billCount</code><span> that takes two arguments. The first argument is the amount of money the user has and the second is the array of money bills available. Return the </span><strong><span>minimum</span></strong><span> count of </span><strong><span>money bills</span></strong><span> required to equal the user money amount.</span></p><pre><code>billCount(1001, [1, 10, 20])\n# User Money = €1000 and Bills Available = [€1, €10, €20]\n\nbillCount(1001, [1, 10, 20]) -&gt;51 because 20*50+ 1*1 = 1001\n# We require 50  20€ bill and 1 1€ bill to equal €1001.\n# Therefore, Minimum Count Money Bills is 50 + 1 = 51.</code></pre><h3><span>Examples</span></h3><pre><code>billCount(100, [1, 10, 20]) ➞ 5\n# Because 20 * 5 = 100\n\nbillCount(1050, [1, 10, 20, 100]) ➞ 13\n# Because 100 * 10 + 20 * 2 + 10 * 1 = 1050\n\nbillCount(3, [1, 10]) ➞ 3\n# Because 3 * 1 = 3\n\nbillCount(55, [1, 5, 10, 50]) ➞ 2\n# Because 50 * 1 + 5 * 1 = 55</code></pre><h3><span>Notes</span></h3><p><span>Money amount and bills are all valid.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(billCount(100, [1, 10, 20]), 5)",
			"Test.assertEquals(billCount(1050, [1, 10, 20, 100]), 13)",
			"Test.assertEquals(billCount(3, [1, 10]), 3)",
			"Test.assertEquals(billCount(555, [1, 10, 100]), 15)",
			"Test.assertEquals(billCount(222, [1, 10, 100]), 6)",
			"Test.assertEquals(billCount(60, [1, 10, 20]), 3)",
			"Test.assertEquals(billCount(55, [1, 5, 10, 50]), 2)"
		],
		"starterFn": [
			"1\nfunction billCount(money, bills){",
			"2\n  ",
			"3\n}",
			"4\n  "
		],
		"url": "https://edabit.com/challenge/4B2hvNaGFvrEgqZEr"
	},
	{
		"title": "Validate Password",
		"description": "<p><span>Write a </span><strong><span>regular expression</span></strong><span> that checks to see if a password is valid. For a password to be valid, it must meet the following requirments:</span></p><ol><li><span>The password must contain at least one uppercase character.</span></li><li><span>The password must contain at least one lowercase character.</span></li><li><span>The password must contain at least one number.</span></li><li><span>The password must contain at least one special character (!,?,*,#).</span></li><li><span>The password must be at least 8 characters in length.</span></li></ol><h3><span>Examples</span></h3><pre><code>\"Password*12\" ➞ true\n\n\"passWORD12!\" ➞ true\n\n\"Pass\" ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>The lowercase char, uppercase char, special char, and number can appear at any part of the password.</span></li><li><strong><span>You will only be writing a regular expression; do not write a function.</span></strong></li></ul>",
		"publishedBy": "jmichael12",
		"publishedByUrl": "https://edabit.com/user/CJnuSjyCBMTbTiibD",
		"language": "JavaScript",
		"tags": [
			"regex",
			"validation"
		],
		"tests": [
			"function validatePassword(password){",
			"  return regex.test(password);",
			"}",
			"​",
			"//Passes",
			"Test.assertEquals(validatePassword(\"Password*123\"), true)",
			"Test.assertEquals(validatePassword(\"123e!*Ar\"), true)",
			"Test.assertEquals(validatePassword(\"*Password*13\"), true)",
			"Test.assertEquals(validatePassword(\"passWORD1?\"), true)",
			"Test.assertEquals(validatePassword(\"eDAB1T#12\"), true)",
			"​",
			"//FAILS",
			"Test.assertEquals(validatePassword(\"Pass1!\"), false, \"Password not long enough\")",
			"Test.assertEquals(validatePassword(\"Password1\"), false, \"Password does not contain special character\")",
			"Test.assertEquals(validatePassword(\"*Password*\"), false, \"Password does not contain number\")",
			"Test.assertEquals(validatePassword(\"PASSWORD12!\"), false, \"Password does not contain lowercase character\")",
			"Test.assertEquals(validatePassword(\"password12!\"), false, \"Password does not contain uppercase character\")"
		],
		"starterFn": [
			"1\nvar regex = //;"
		],
		"url": "https://edabit.com/challenge/XqTrTFmaksWs8aADz"
	},
	{
		"title": "A Capital Challenge",
		"description": "<p><span>Given two strings, </span><code>s1</code><span> and </span><code>s2</code><span>, select only the characters in each string where the character in the same position in the </span><strong><span>other</span></strong><span> string is in uppercase. Return these as a single string.</span></p><p><span>To illustrate, given the strings </span><code>s1 = \"heLLo\"</code><span> and </span><code>s2 = \"GUlp\"</code><span>, we select the letters \"he\" from </span><code>s1</code><span>, because \"G\" and \"U\" are uppercase. We then select \"lp\" from </span><code>s2</code><span>, because \"LL\" is in uppercase. Finally, we join these together and return </span><code>\"help\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>selectLetters(\"heLLO\", \"GUlp\") ➞ \"help\"\n\nselectLetters(\"1234567\", \"XxXxX\")  ➞ \"135\"\n\nselectLetters(\"EVERYTHING\", \"SomeThings\") ➞  \"EYSomeThings\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The strings don't have to be the same length.</span></li><li><span>Strings can contain non-alphabetic characters.</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(selectLetters(\"heLLO\", \"GUlp\"), \"help\")",
			"Test.assertEquals(selectLetters(\"1234567\", \"XxXxX\"), \"135\")",
			"Test.assertEquals(selectLetters(\"EVERYTHING\", \"SomeThings\"), \"EYSomeThings\")",
			"Test.assertEquals(selectLetters(\"PaTtErN\", \"pAtTeRn\"), \"atrpten\")",
			"Test.assertEquals(selectLetters(\"nothing\", \"nothing\"), \"\")",
			"Test.assertEquals(selectLetters(\"What do you think of it so far?\", \"RUBBISH!\"), \"What doR\")"
		],
		"starterFn": [
			"1\nfunction selectLetters(s1, s2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gjKemfXwedir9y7D4"
	},
	{
		"title": "Longest Consecutive Run",
		"description": "<p><span>A </span><strong><span>consecutive-run</span></strong><span> is a list of adjacent, consecutive integers. This list can be either increasing or decreasing. Create a function that takes an array of numbers and returns the length of the longest </span><strong><span>consecutive-run</span></strong><span>.</span></p><p><span>To illustrate:</span></p><pre><code>longestRun([1, 2, 3, 5, 6, 7, 8, 9]) ➞ 5\n// Two consecutive runs: [1, 2, 3] and [5, 6, 7, 8, 9] (longest).</code></pre><h3><span>Examples</span></h3><pre><code>longestRun([1, 2, 3, 10, 11, 15]) ➞ 3\n// Longest consecutive-run: [1, 2, 3].\n\nlongestRun([5, 4, 2, 1]) ➞ 2\n// Longest consecutive-run: [5, 4] and [2, 1].\n\nlongestRun([3, 5, 7, 10, 15]) ➞ 1\n// No consecutive runs, so we return 1.</code></pre><h3><span>Notes</span></h3><p><span>If there aren't any consecutive runs (there is a gap between each integer), return </span><code>1</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"control_flow",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertEquals(longestRun([1, 2, 3, 5, 6, 7, 8, 9]), 5)",
			"Test.assertEquals(longestRun([1, 2, 3, 10, 11, 15]), 3)",
			"Test.assertEquals(longestRun([-7, -6, -5, -4, -3, -2, -1]), 7)",
			"Test.assertEquals(longestRun([3, 5, 6, 10, 15]), 2)",
			"Test.assertEquals(longestRun([3, 5, 7, 10, 15]), 1)",
			"Test.assertEquals(longestRun([5, 4, 3, 2, 1]), 5)",
			"Test.assertEquals(longestRun([5, 4, 2, 1]), 2)",
			"Test.assertEquals(longestRun([10, 9, 0, 5]), 2)",
			"Test.assertEquals(longestRun([1, 2, 3, 2, 1]), 3)",
			"Test.assertEquals(longestRun([10, 9, 8, 7, 6, 2, 1]), 5)"
		],
		"starterFn": [
			"1\nfunction longestRun(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/J3HA3p3enpxnMJCmd"
	},
	{
		"title": "Semiprimes",
		"description": "<p><span>A semiprime is a composite number that is the product of two primes. Apart from these two primes, its only other proper (non-self) divisor is 1.</span></p><p><span>The two prime factors of a semiprime can be the same number (e.g. the semiprime 49 is the product of 7x7). A semiprime that has two </span><em><span>distinct</span></em><span> prime factors is called a </span><strong><em><span>squarefree semiprime.</span></em></strong></p><p><span>Create a function that takes a number and returns </span><code>\"Squarefree Semiprime\"</code><span>, </span><code>\"Semiprime\"</code><span>, or </span><code>\"Neither\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>semiprime(49) ➞ \"Semiprime\"\n\nsemiprime(15) ➞ \"Squarefree Semiprime\"\n\nsemiprime(97) ➞ \"Neither\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(semiprime(49), \"Semiprime\")",
			"Test.assertEquals(semiprime(15), \"Squarefree Semiprime\")",
			"Test.assertEquals(semiprime(19), \"Neither\")",
			"Test.assertEquals(semiprime(75), \"Neither\")",
			"Test.assertEquals(semiprime(169), \"Semiprime\")",
			"Test.assertEquals(semiprime(203), \"Squarefree Semiprime\")",
			"Test.assertEquals(semiprime(177), \"Squarefree Semiprime\")",
			"Test.assertEquals(semiprime(125), \"Neither\")",
			"Test.assertEquals(semiprime(70), \"Neither\")"
		],
		"starterFn": [
			"1\nfunction semiprime(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZPWXhy8wmK2fqJPzT"
	},
	{
		"title": "Route Tracer",
		"description": "<p><span>In this challenge, the work area will be a 4x4 matrix containing three types of characters:</span></p><ul><li><code>@</code><span>  Your position.</span></li><li><code>-</code><span>  A blank spot.</span></li><li><code>&amp;, #, $</code><span>  Collectible items.</span></li></ul><p><span>From your starting point in the grid, you have to trace a route placing a </span><code>x</code><span> in every spot visited, following a sequence of letters with the directions to take:</span></p><ul><li><code>l</code><span>  Left</span></li><li><code>r</code><span>  Right</span></li><li><code>u</code><span>  Up</span></li><li><code>d</code><span>  Down</span></li></ul><pre><code>input = \"luur\"\n// left, up, up, right\n\ngrid = [\n[\"-\", \"-\", \"-\", \"#\"]\n[\"-\", \"-\", \"$\", \"-\"]\n[\"-\", \"-\", \"-\", \"@\"]\n[\"-\", \"&amp;\", \"-\", \"-\"] ]\n\nresult = { route = [\n[\"-\", \"-\", \"x\", \"x\"],\n[\"-\", \"-\", \"x\", \"-\"],\n[\"-\", \"-\", \"x\", \"@\"],\n[\"-\", \"&amp;\", \"-\", \"-\"] ],\nitems: \"$#\" }</code></pre><p><span>When moves are finished, you will have a new grid with the traced given route (a route made of </span><code>x</code><span> chars), and a series of items collected along the way.</span></p><p><span>Given a matrix </span><code>grid</code><span> and a string with the directions to take </span><code>input</code><span>, implement a function that returns an object literal containing the traced route as a new matrix and the items collected as a string.</span></p><h3><span>Examples</span></h3><pre><code>function routeTracer([\n  [\"-\", \"#\", \"-\", \"-\"],\n  [\"$\", \"#\", \"@\", \"&amp;\"],\n  [\"-\", \"#\", \"$\", \"&amp;\"],\n  [\"$\", \"-\", \"&amp;\", \"-\"]\n], \"lddr\",) ➞ {\n  route: [\n [\"-\", \"#\", \"-\", \"-\"],\n  [\"$\", \"x\", \"@\", \"&amp;\"],\n  [\"-\", \"x\", \"$\", \"&amp;\"],\n  [\"$\", \"x\", \"x\", \"-\"]\n  ],\n  items: \"##&amp;\"\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>The starting position must not be changed in the new matrix.</span></li><li><span>The </span><code>x</code><span> will overwite the symbol already present in the spot visited.</span></li><li><span>In the returned string, items have to appear in the order you collected them. Watch out for the blank spots: they're not collectible!</span></li><li><span>Don't worry about \"out of bounds\" cases, instruction strings contain only valid routes.</span></li><li><span>Instruction strings will have different lengths.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"formatting",
			"loops"
		],
		"tests": [
			"const grid1 =   [ [\"-\", \"#\", \"-\", \"-\"],",
			"                  [\"$\", \"#\", \"@\", \"&\"],",
			"                  [\"-\", \"#\", \"$\", \"&\"],",
			"                  [\"$\", \"-\", \"&\", \"-\"] ],",
			"      inpt1 =   \"lddr\",",
			"      // Test #1",
			"      answ1 =   {route:",
			"                [ [ '-', '#', '-', '-' ],",
			"                  [ '$', 'x', '@', '&' ],",
			"                  [ '-', 'x', '$', '&' ],",
			"                  [ '$', 'x', 'x', '-' ] ],",
			"                items: '##&'},  ",
			"      grid2 =   [ [\"-\", \"-\", \"&\", \"-\"],",
			"                  [\"-\", \"-\", \"&\", \"-\"],",
			"                  [\"$\", \"#\", \"-\", \"#\"],",
			"                  [\"-\", \"@\", \"-\", \"$\"] ],",
			"      inpt2 =   \"ulurrr\",",
			"      // Test #2",
			"      answ2 =   {route:",
			"                [ [ '-', '-', '&', '-' ],",
			"                  [ 'x', 'x', 'x', 'x' ],",
			"                  [ 'x', 'x', '-', '#' ],",
			"                  [ '-', '@', '-', '$' ] ],",
			"                items: '#$&'},",
			"      grid3 =   [ [\"-\", \"#\", \"&\", \"-\"],",
			"                  [\"-\", \"#\", \"-\", \"$\"],"
		],
		"starterFn": [
			"1\nfunction routeTracer(grid, input) {",
			"2\n  ",
			"3\n  return {route: [], items: \"\"}",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/cZReb2PbqAcfRserf"
	},
	{
		"title": "Sum the Digits of All Integers 0 to 10^n - 1",
		"description": "<p><span>Create a function that takes an integer parameter, </span><code>n</code><span>, and returns the sum of all the digits in each integer in the range 0 to 10^n - 1 inclusive.</span></p><ul><li><span>If </span><code>n</code><span> is </span><code>1</code><span>, the range is 0 to 9.</span></li><li><span>if </span><code>n</code><span> is </span><code>2</code><span>, the range is 0 to 99.</span></li><li><span>if </span><code>n</code><span> is </span><code>12</code><span>, the range is 0 to 999999999999.</span></li></ul><p><code>n</code><span> will always be </span><code>&gt;= 1</code><span>.</span></p><p><span>Because of JavaScript's representation of numbers, </span><code>n</code><span> will be limited to </span><code>125</code></p><h3><span>Examples</span></h3><pre><code>sumDigitsInRange(1) ➞ 45\n\nsumDigitsInRange(2) ➞ 900\n\nsumDigitsInRange(3) ➞ 13500\n\nsumDigitsInRange(8) ➞ 3600000000\n\nsumDigitsInRange(13) ➞ 585000000000000</code></pre><h3><span>Notes</span></h3><p><span>The function should run quickly.</span></p>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sumDigitsInRange(1), 45)",
			"Test.assertEquals(sumDigitsInRange(7), 315000000)",
			"Test.assertEquals(sumDigitsInRange(14), 6300000000000000)",
			"Test.assertEquals(sumDigitsInRange(125), 56250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)"
		],
		"starterFn": [
			"1\nfunction sumDigitsInRange(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iNzJFQCctFXw5w8Nf"
	},
	{
		"title": "Crop Fields",
		"description": "<p><span>You're given a 2D array / matrix of a crop field. Each crop needs a water source. Each water source hydrates the 8 tiles aound it. With </span><code>\"w\"</code><span> representing a water source, and </span><code>\"c\"</code><span> representing a crop, is every crop hydrated?</span></p><h3><span>Examples</span></h3><pre><code>cropHydrated([\n  [ \"w\", \"c\" ],\n  [ \"w\", \"c\" ],\n  [ \"c\", \"c\" ]\n]) ➞ true\n\ncropHydrated([\n  [ \"c\", \"c\", \"c\" ]\n]) ➞ false\n// There isn\"t even a water source.\n\ncropHydrated([\n  [ \"c\", \"c\", \"c\", \"c\" ],\n  [ \"w\", \"c\", \"c\", \"c\" ],\n  [ \"c\", \"c\", \"c\", \"c\" ],\n  [ \"c\", \"w\", \"c\", \"c\" ]\n]) ➞ false</code></pre><h3><span>Notes</span></h3><p><code>\"w\"</code><span> on its own should return </span><code>true</code><span>, and </span><code>\"c\"</code><span> on its own should return </span><code>false</code><span>.</span></p>",
		"publishedBy": "Harith",
		"publishedByUrl": "https://edabit.com/user/Ynw596LiAeaYq29os",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(cropHydrated([",
			"  [ \"w\", \"w\" ],",
			"  [ \"w\", \"c\" ],",
			"  [ \"c\", \"c\" ],",
			"  [ \"c\", \"w\" ],",
			"  [ \"c\", \"w\" ]",
			"]), true)",
			"​",
			"Test.assertEquals(cropHydrated([",
			"  [ \"c\", \"w\", \"w\", \"w\", \"c\" ],",
			"  [ \"w\", \"c\", \"c\", \"c\", \"c\" ],",
			"  [ \"c\", \"c\", \"c\", \"c\", \"c\" ],",
			"  [ \"w\", \"c\", \"c\", \"w\", \"c\" ]",
			"]), true)",
			"​",
			"Test.assertEquals(cropHydrated([",
			"  [ \"c\", \"w\" ]",
			"]), true)",
			"​",
			"Test.assertEquals(cropHydrated([",
			"  [ \"w\", \"c\", \"c\", \"c\", \"c\" ],",
			"  [ \"c\", \"c\", \"c\", \"w\", \"c\" ]",
			"]), true)",
			"​",
			"Test.assertEquals(cropHydrated([",
			"  [ \"c\", \"c\", \"c\" ],"
		],
		"starterFn": [
			"1\nfunction cropHydrated(field) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9KMYT5u9sww3MSzNt"
	},
	{
		"title": "Underscore-Hash Staircase",
		"description": "<p><span>Create a function that will build a staircase using the underscore </span><code>_</code><span> and hash </span><code>#</code><span> symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.</span></p><h3><span>Examples</span></h3><pre><code>staircase(3) ➞ \"__#\\n_##\\n###\"\n__#\n_##\n###\n\nstaircase(7) ➞ \"______#\\n_____##\\n____###\\n___####\\n__#####\\n_######\\n#######\"\n______#\n_____##\n____###\n___####\n__#####\n_######\n#######\n\nstaircase(2) ➞ \"_#\\n##\"\n_#\n##\n\nstaircase(-8) ➞ \"########\\n_#######\\n__######\\n___#####\\n____####\\n_____###\\n______##\\n_______#\"\n########\n_#######\n__######\n___#####\n____####\n_____###\n______##\n_______#</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs are either positive or negative values.</span></li><li><span>The string to be returned is adjoined with the newline character (</span><code>\\n</code><span>).</span></li><li><span>A recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/ZLTwdq8n5HK7DP9Eq\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"strings"
		],
		"tests": [
			"Test.assertEquals(staircase(3), \"__#\\n_##\\n###\")",
			"Test.assertEquals(staircase(7), \"______#\\n_____##\\n____###\\n___####\\n__#####\\n_######\\n#######\")",
			"Test.assertEquals(staircase(2), \"_#\\n##\")",
			"Test.assertEquals(staircase(-8), \"########\\n_#######\\n__######\\n___#####\\n____####\\n_____###\\n______##\\n_______#\")",
			"Test.assertEquals(staircase(4), \"___#\\n__##\\n_###\\n####\")",
			"Test.assertEquals(staircase(-12), \"############\\n_###########\\n__##########\\n___#########\\n____########\\n_____#######\\n______######\\n_______#####\\n________####\\n_________###\\n__________##\\n___________#\")",
			"Test.assertEquals(staircase(11), \"__________#\\n_________##\\n________###\\n_______####\\n______#####\\n_____######\\n____#######\\n___########\\n__#########\\n_##########\\n###########\")",
			"Test.assertEquals(staircase(-6), \"######\\n_#####\\n__####\\n___###\\n____##\\n_____#\")"
		],
		"starterFn": [
			"1\nfunction staircase(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/inecXu7CtXyvNekxu"
	},
	{
		"title": "Validate the Relationships Between Integers in a String",
		"description": "<p><span>You will be given a string consisting of a list of integers and their relationships to their neighboring integers. For instance:</span></p><pre><code>\"-15&lt;-10&lt;=0=0&lt;5\"</code></pre><p><span>Test to see that all the relationships between the integers in the string are true. If they are, return </span><code>true</code><span>. If they are not, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>validateTheRelationships(\"5&gt;-1&lt;0=0&lt;-5&gt;5=5\") ➞ false\n// This is false because 0 is not less than -5.\n\nvalidateTheRelationships(\"-15&lt;-10&lt;=0=0&lt;5\") ➞ true\n\nvalidateTheRelationships(\"0=807&lt;1000&lt;=1000&gt;9990&lt;-3605&lt;=20\") ➞ false\n// This is false because 0 is not equal to 807.</code></pre><h3><span>Notes</span></h3><ul><li><span>This is a modifcation of Helen Yu's \"Correct Signs\" challenge.</span></li><li><span>As the examples above show, there could be negative numbers in the string.</span></li><li><span>The numbers will only be separated by: </span><code>=, &lt;, &gt;, &gt;=, &lt;=</code></li><li><span>Tests will not contain any spaces.</span></li></ul>",
		"publishedBy": "likesToGoHiking",
		"publishedByUrl": "https://edabit.com/user/vewKwcMeGuk3p3MsN",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(validateTheRelationships(\"5>-1<0=0<-5>5=5\"), false)",
			"Test.assertEquals(validateTheRelationships(\"-15<-10<=0=0<5\"), true)",
			"Test.assertEquals(validateTheRelationships(\"0=807<1000<=1000>9990<-3605<=20\"), false)",
			"Test.assertEquals(validateTheRelationships(\"3<=3<11>-109\"), true)",
			"Test.assertEquals(validateTheRelationships(\"44>-33>=1>-13\"), false)",
			"Test.assertEquals(validateTheRelationships(\"10>2=22>9>3\"), false)",
			"Test.assertEquals(validateTheRelationships(\"44>0<13>=-2<-1=-1\"), true)",
			"Test.assertEquals(validateTheRelationships(\"3>=-1\"), true)",
			"Test.assertEquals(validateTheRelationships(\"9<=9<-1\"), false)",
			"Test.assertEquals(validateTheRelationships(\"0<9<=9>-1\"), true)",
			"Test.assertEquals(validateTheRelationships(\"44>=0<13>-2<-1=1\"), false)",
			"Test.assertEquals(validateTheRelationships(\"-39<=5=5<=9>-1\"), true)",
			"Test.assertEquals(validateTheRelationships(\"55>7>=7>=1\"), true)",
			"Test.assertEquals(validateTheRelationships(\"3<19>-19>5>=-19\"), false)"
		],
		"starterFn": [
			"1\nfunction validateTheRelationships(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Kg7rsPaPHMydFisP7"
	},
	{
		"title": "Sexagenary Cycle (Chinese Zodiac)",
		"description": "<p><span>In early recorded Chinese history, time was reckoned using the sexagenary (60-year) cycle, generated from two subcycles:</span></p><ol><li><span>Five heavenly stems (elements) in this order: wood, fire, earth, metal, water. The stems change every two years.</span></li><li><span>Twelve earthly branches (animals) in this order: rat, ox, tiger, rabbit, dragon, snake, horse, sheep, monkey, rooster, dog, pig. The branches change yearly.</span></li></ol><p><span>The combinations between these two sub-cycles result in a 60-year cycle where no two years are the same — for example, the 5 years of the Rat have 5 different elements: 1924 Wood Rat, 1936 Fire Rat, 1948 Earth Rat, 1960 Metal Rat, 1972 Water Rat.</span></p><p><span>The first 14 years of the current cycle are shown in the table below:</span></p><table><thead><tr><th><span>Gregorian Year</span></th><th><span>Stem</span></th><th><span>Branch</span></th></tr></thead><tbody><tr><td><span>1984</span></td><td><span>Wood</span></td><td><span>Rat</span></td></tr><tr><td><span>1985</span></td><td><span>Wood</span></td><td><span>Ox</span></td></tr><tr><td><span>1986</span></td><td><span>Fire</span></td><td><span>Tiger</span></td></tr><tr><td><span>1987</span></td><td><span>Fire</span></td><td><span>Rabbit</span></td></tr><tr><td><span>1988</span></td><td><span>Earth</span></td><td><span>Dragon</span></td></tr><tr><td><span>1989</span></td><td><span>Earth</span></td><td><span>Snake</span></td></tr><tr><td><span>1990</span></td><td><span>Metal</span></td><td><span>Horse</span></td></tr><tr><td><span>1991</span></td><td><span>Metal</span></td><td><span>Sheep</span></td></tr><tr><td><span>1992</span></td><td><span>Water</span></td><td><span>Monkey</span></td></tr><tr><td><span>1993</span></td><td><span>Water</span></td><td><span>Rooster</span></td></tr><tr><td><span>1994</span></td><td><span>Wood</span></td><td><span>Dog</span></td></tr><tr><td><span>1995</span></td><td><span>Wood</span></td><td><span>Pig</span></td></tr><tr><td><span>1996</span></td><td><span>Fire</span></td><td><span>Rat</span></td></tr><tr><td><span>1997</span></td><td><span>Fire</span></td><td><span>Ox</span></td></tr></tbody></table><p><span>These days, the sexagenary cycle is used mainly for historical celebrations and events, and in Chinese astrology. The Gregorian calendar is now the standard means of reckoning time.</span></p><p><span>Create a function that takes a number representing a year in the Gregorian calendar, and returns a string consisting of the corresponding stem-and-branch combination in the sexagenary cycle.</span></p><h3><span>Examples</span></h3><pre><code>sexagenary(1971) ➞ \"Metal Pig\"\n\nsexagenary(1927) ➞ \"Fire Rabbit\"\n\nsexagenary(1974) ➞ \"Wood Tiger\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"loops"
		],
		"tests": [
			"Test.assertEquals(sexagenary(1971), 'Metal Pig')",
			"Test.assertEquals(sexagenary(1927), 'Fire Rabbit')",
			"Test.assertEquals(sexagenary(2017), 'Fire Rooster')",
			"Test.assertEquals(sexagenary(2000), 'Metal Dragon')",
			"Test.assertEquals(sexagenary(1958), 'Earth Dog')",
			"Test.assertEquals(sexagenary(1942), 'Water Horse')",
			"Test.assertEquals(sexagenary(1974), 'Wood Tiger')"
		],
		"starterFn": [
			"1\nfunction sexagenary(year) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pDEXzeuQAowyoa623"
	},
	{
		"title": "Postfix Notation (Part 1: Evaluation)",
		"description": "<p><span>Mathematical expressions are usually written with </span><em><span>infix</span></em><span> notation, where the operator is </span><em><span>in-between</span></em><span> the two operands. </span><em><span>Postfix</span></em><span> notation, on the other hand, is where the operator </span><em><span>follows</span></em><span> the operands. As we use operator precedence to determine the order of calculation (e.g. multiplication/division is evaluated before addition/subtraction), we can change the position of the operands and eliminate the need for parentheses:</span></p><pre><code>2 + 5   # Infix\n2 5 +   # Postfix\n\n5 + (1 + 2) * 4 - 3   # Infix\n5 1 2 + 4 * + 3 -     # Postfix</code></pre><p><span>Postfix expressions are evaluated by reading left-to-right. Any time an operator is reached, a calculation is performed on the previous two operands. The process repeats until there are no more calculations to perform:</span></p><pre><code>2 3 4 * + 9 -   # evaluate 3x4\n   2 12 + 9 -   # evaluate 2+12\n       14 9 -   # evaluate 14-9\n            5   # final answer</code></pre><p><span>Given a postfix expression as a string, return the evaluated expression. A single space separates each operator/operand.</span></p><h3><span>Examples</span></h3><pre><code>postfix(\"12 3 /\") ➞ 4\n\npostfix(\"5 3 4 * +\") ➞ 17\n\npostfix(\"5 3 + 4 *\") ➞ 32</code></pre><h3><span>Notes</span></h3><p><span>Postfix is also known as \"Reverse Polish Notation\". See the resources tab for more information.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(postfix(\"8 1 +\"), 9)",
			"Test.assertEquals(postfix(\"9 3 /\"), 3)",
			"Test.assertEquals(postfix(\"8 2 5 * +\"), 18)",
			"Test.assertEquals(postfix(\"8 2 + 5 *\"), 50)",
			"Test.assertEquals(postfix(\"1 2 3 4 5 + + + +\"), 15)",
			"Test.assertEquals(postfix(\"3 12 32 8 / / *\"), 9)",
			"Test.assertEquals(postfix(\"2 3 1 * + 9 -\"), -4)",
			"Test.assertEquals(postfix(\"3 4 + 2 * 7 /\"), 2)",
			"Test.assertEquals(postfix(\"4 5 7 2 + - *\"), -16)",
			"Test.assertEquals(postfix(\"10 8 + 3 4 * - 6 /\"), 1)",
			"Test.assertEquals(postfix(\"13 6 7 8 4 / 9 * - + +\"), 8)",
			"Test.assertEquals(postfix(\"5 7 - 6 9 + *\"), -30)",
			"Test.assertEquals(postfix(\"6 2 + 5 * 8 4 / -\"), 38)",
			"Test.assertEquals(postfix(\"9 2 * 3 + 12 -\"), 9)",
			"Test.assertEquals(postfix(\"6 4 18 2 7 + / + -\"), 0)",
			"Test.assertEquals(postfix(\"3 10 5 + *\"), 45)",
			"Test.assertEquals(postfix(\"8 1 3 + 7 * + 6 -\"), 30)",
			"Test.assertEquals(postfix(\"3 2 + 15 3 / 8 - *\"), -15)",
			"Test.assertEquals(postfix(\"10 7 1 1 + - / 6 * 3 5 4 + - +\"), 6)",
			"Test.assertEquals(postfix(\"6 45 - 3 12 6 2 / * + /\"), -1)"
		],
		"starterFn": [
			"1\nfunction postfix(expression) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3dJicC9jWNzf7qgXb"
	},
	{
		"title": "Name Count Equality",
		"description": "<p><span>Create a function that counts the embedded names in the string and determines the equality. The names are embedded in a string of mixed special symbols and characters. The names to be counted to are adjoined with the ampersand symbol </span><code>&amp;</code><span> and as the second parameter. See the following examples for more details.</span></p><h3><span>Examples</span></h3><pre><code>equalCount(\"Peter!@#$Paul&amp;*#Peter!--@|#$Paul#$Peter@|Paul$%^^Peter++Paul%$%^Peter++Paul#$#$#Peter@|Paul\", \"Peter&amp;Paul\")\n➞ {\"Peter\":6, \"Paul\": 6, \"equality\": true}\n\nequalCount(\"Elliot!@#$Sam!--@|#$Elliot@|Sam++Elliot$%^Elliot@|Sam!@#Elliot!@#$Sam!--@|#$Elliot\", \"Sam&amp;Elliot\")\n➞ {\"Sam\": 4, \"Elliot\": 6, \"equality\": false, \"difference\": 2}\n// \"difference\" key is added to the object if count is not equal.\n\nequalCount(\"Tim!@#$Kit&amp;&amp;*#Tim!--@|#$Kit#$%Tim@|Kit$%^^Tim++Kit%$%^Tim++Kit#$#$#Tim@|Kit\", \"Ken&amp;Tom\")\n➞ {\"Ken\": 0, \"Tom\": 0, \"equality\": true}</code></pre><h3><span>Notes</span></h3><p><span>Make sure to return the result as an </span><strong><span>object</span></strong><span> with the corresponding keys seen in the above examples and the </span><code>difference</code><span> key when needed.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"objects",
			"strings"
		],
		"tests": [
			"let strVector = [",
			"  [\"Peter!@#$Paul&*#Peter!--@|#$Paul#$Peter@|Paul$%^^Peter++Paul%$%^Peter++Paul#$#$#Peter@|Paul\", \"Peter&Paul\"],",
			"  [\"Elliot!@#$Sam!--@|#$Elliot@|Sam++Elliot$%^Elliot@|Sam!@#Elliot!@#$Sam!--@|#$Elliot\", \"Sam&Elliot\"],",
			"  [\"Tim!@#$Kit&&*#Tim!--@|#$Kit#$%Tim@|Kit$%^^Tim++Kit%$%^Tim++Kit#$#$#Tim@|Kit\", \"Ken&Tom\"],",
			"  [\"Barnes!@#$Noble@|Barnes++Noble$%^Barnes!--@|#$Noble!@#$Barnes@|Noble!@#$Barnes++Noble\", \"Barnes&Noble\"],",
			"  [\"Dick!@#$Harry!--@|#$Dick@|Harry++Dick$%^Harry-$%^Dick!@#Harry!@#Dick!@*Harry\", \"Dick&Harry\"],",
			"  [\"$#%#%Henry+++&&***Hank!@#$%^Henry)(*&^%$)Henry$^$%^%$Henry+Hank$Henry%^$^Hank%^Henry\", \"Henry&Hank\"],",
			"  [\"$$$^Mary+++&&***John&###@@Mary|Mary;$$John:Mary*John--#@John^&&)(()\", \"John&Mary\"]",
			"]",
			"let objRes = [",
			"  {\"Peter\": 6, \"Paul\": 6, \"equality\": true},",
			"  {\"Sam\": 4, \"Elliot\": 6, \"equality\": false, \"difference\": 2},",
			"  {\"Ken\": 0, \"Tom\": 0, \"equality\": true},",
			"  {\"Barnes\": 5, \"Noble\": 5, \"equality\": true},",
			"  {\"Dick\": 5, \"Harry\": 5, \"equality\": true},",
			"  {\"Henry\": 6, \"Hank\": 3, \"equality\": false, \"difference\": 3},",
			"  {\"John\": 4,\"Mary\": 4, \"equality\": true}",
			"]",
			"for (let i in strVector){",
			"  Test.assertSimilar(equalCount(...strVector[i]), objRes[i])",
			"}"
		],
		"starterFn": [
			"1\nfunction equalCount (str, names) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KLyD6Ce6KkA2364sH"
	},
	{
		"title": "Double Palindromes",
		"description": "<p><span>Strings can be segregated into both their letter and digit components.</span></p><ol><li><span>A </span><strong><span>double palindrome</span></strong><span> is when a string's letter component and digit component are both palindromes.</span></li><li><span>A </span><strong><span>single-palindrome</span></strong><span> is when either (but </span><strong><span>not both</span></strong><span>) the letter component or the digit component are palindromes.</span></li></ol><p><span>To illustrate:</span></p><pre><code>\"cab97ac79\" // double-palindrome\n// \"cabac\" and \"9779\" are both palindromes.\n\n\"1abc4de1\" // single-palindrome\n// \"141\" is a palindrome.</code></pre><p><span>Write a function that maps </span><strong><span>double palindromes</span></strong><span> to the number </span><strong><span>2</span></strong><span>, </span><strong><span>single palindromes</span></strong><span> to the number </span><strong><span>1</span></strong><span>, and everything else to the number </span><strong><span>0</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>palindromeSet([\"cb77c\", \"ccc888\", \"ccc789\", \"abc89\"]) ➞ [2, 2, 1, 0]\n\npalindromeSet([\"789\", \"555\", \"ccc\", \"abba\"]) ➞ [0, 1, 1, 1]\n\npalindromeSet([\"7a\", \"5f\", \"6c\"]) ➞ [2, 2, 2]</code></pre><h3><span>Notes</span></h3><ul><li><span>A string is composed of only letters or only numbers, can be at most a single palindrome (see example #2).</span></li><li><span>All single character components are trivially palindromes (see example #3).</span></li><li><span>All letters will be lower cased.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(palindromeSet([\"cb77c\", \"ccc888\", \"ccc789\", \"abc89\"]), [2, 2, 1, 0])",
			"Test.assertSimilar(palindromeSet([\"18a99b89cc881ba\", \"p7o8p987\", \"p7o\", \"p7o8\"]), [1, 2, 1, 0])",
			"Test.assertSimilar(palindromeSet([\"ab9a\", \"abba\", \"aa78bb8bbaa7\", \"a88a\"]), [2, 1, 2, 2])",
			"Test.assertSimilar(palindromeSet([\"789\", \"555\", \"ccc\", \"abba\"]), [0, 1, 1, 1])",
			"Test.assertSimilar(palindromeSet([\"7a\", \"5f\", \"6c\"]), [2, 2, 2])",
			"Test.assertSimilar(palindromeSet([\"7ab\", \"5fc\", \"6cd\"]), [1, 1, 1])",
			"Test.assertSimilar(palindromeSet([\"87ab\", \"15fc\", \"26cd\"]), [0, 0, 0])",
			"Test.assertSimilar(palindromeSet([\"1234ab\", \"144a441\"]), [0, 2])",
			"Test.assertSimilar(palindromeSet([\"\"]), [0])"
		],
		"starterFn": [
			"1\nfunction palindromeSet(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KsbT9c2zf7jczanTt"
	},
	{
		"title": "Get the Months Between Two Dates",
		"description": "<p><span>Create a function that, given 2 dates, returns the names of the months that are present between them (inclusive).</span></p><h2><span>Examples</span></h2><p><span>  </span><strong><span>Input</span></strong></p><pre><code class=\"language-javascript\">var january = new Date(2017, 0, 1);\nvar march = new Date(2017, 2, 1);\n\nmonthsInterval(january, march)</code></pre><p><span>  </span><strong><span>Output</span></strong></p><pre><code class=\"language-javascript\">['January', 'February', 'March']</code></pre><p><span>  </span><strong><span>Input</span></strong></p><pre><code class=\"language-javascript\">var december = new Date(2017, 11, 1);\nvar january = new Date(2018, 0, 1);\n\nmonthsInterval(december, january)</code></pre><p><span>  </span><strong><span>Output</span></strong></p><pre><code class=\"language-javascript\">['January', 'December']</code></pre><p><span>  </span><strong><span>Input</span></strong></p><pre><code class=\"language-javascript\">var january2017 = new Date(2017, 0, 1);\nvar january2018 = new Date(2018, 0, 1);\n\nmonthsInterval(january2017, january2018)</code></pre><p><span>  </span><strong><span>Output</span></strong></p><pre><code class=\"language-javascript\">['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']</code></pre><p><span>  (Notice that January is </span><strong><span>not</span></strong><span> duplicated!)</span></p><h2><span>Notes</span></h2><ul><li><span>The returned array should include the months of </span><code>dateStart</code><span> and </span><code>dateEnd</code><span> (inclusive)</span></li><li><span>The returned array </span><strong><span>must not</span></strong><span> include duplicate values</span></li><li><span>The month names returned by the function should be sorted (not alphabetically, but ordered by which comes first (January = 1st month, February = 2nd month, … , December = 12th month))</span></li><li><span>The function should produce the same output even if </span><code>dateStart</code><span> is greater than </span><code>dateEnd</code></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates",
			"sorting"
		],
		"tests": [
			"// Same month & year",
			"Test.assertSimilar(",
			"  monthsInterval(new Date(2017, 0, 1), new Date(2017, 0, 1)),",
			"  ['January']",
			");",
			"​",
			"// Same month, different year",
			"Test.assertSimilar(",
			"  monthsInterval(new Date(2016, 0, 1), new Date(2017, 0, 1)),",
			"  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']",
			");",
			"​",
			"// Same month, different year (reversed)",
			"Test.assertSimilar(",
			"  monthsInterval(new Date(2017, 0, 1), new Date(2016, 0, 1)),",
			"  ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']",
			");",
			"​",
			"// Month interval same year",
			"Test.assertSimilar(",
			"  monthsInterval(new Date(2017, 3, 1), new Date(2017, 7, 1)),",
			"  ['April', 'May', 'June', 'July', 'August']",
			");",
			"​",
			"// Month interval same year (reversed)",
			"Test.assertSimilar("
		],
		"starterFn": [
			"1\nconst monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];",
			"2\n​",
			"3\nfunction monthsInterval(dateStart, dateEnd) {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/JhQ8qCptpTbZMvnRz"
	},
	{
		"title": "Synchronize the Subtitles",
		"description": "<p><span>Create a function that will increment every time format found in a string (for example </span><code>00:42:33,120</code><span>) by a specific time (for example </span><code>00:00:30,550</code><span>). The result between the examples is </span><code>00:43:03,670</code><span>.</span></p><ul><li><span>The function must take 2 arguments: a string from where to search time format and a string that respects the format </span><code>hours:minutes:seconds,milliseconds</code><span>.</span></li><li><span>The function must return a string identical to the first argument but with all time format incremented with the second argument time format.</span></li><li><span>If the second argument does not respect the given time format (for example </span><code>00:00:00</code><span> or </span><code>0:0:0,000</code><span>), you must return \"There is a problem with the second argument\".</span></li></ul><h3><span>Examples</span></h3><pre><code>syncSubs(\"708\n00:44:50,006 --&gt; 00:44:53,007\nHi.\", \"00:03:30,550\")\n➞\n\"708\n00:45:20,556 --&gt; 00:45:23,557\nHi.\"\n\nsyncSubs(\"179\n00:12:52,766 --&gt; 00:12:55,900\n[Door rattling]\", \"00:11:11,111\")\n➞\n\"179\n00:24:04,011 --&gt; 00:24:07,011\n[Door rattling]\"\n\nsyncSubs(\"188\n00:13:37,243 --&gt; 00:13:39,744\n30 minutes.\nEveryone's ready.\n189\n00:13:39,779 --&gt; 00:13:43,548\n\n\", \"01:00:51,111\")\n➞\n\"188\n02:06:28,000 --&gt; 02:06:30,000\n30 minutes.\nEveryone's ready.\n189\n02:06:30,000 --&gt; 02:06:34,000\"</code></pre><h3><span>Notes</span></h3><p><span>You don't need to worry about a time format being wrong in the first string like </span><code>00:13:79,779</code><span> or </span><code>00:13:39,79</code><span> because there won't be any mistake in it.</span></p>",
		"publishedBy": "VeryKnave",
		"publishedByUrl": "https://edabit.com/user/RW2wFPbMQniZWPmw4",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(syncSubs(",
			"`708",
			"00:44:50,006 --> 00:44:53,007",
			"People are taking this festival",
			"extremely seriously.`, `00:03:30,550`),",
			"`708",
			"00:48:20,556 --> 00:48:23,557",
			"People are taking this festival",
			"extremely seriously.`)",
			"Test.assertEquals(syncSubs(",
			"`729",
			"00:45:55,704 --> 00:45:59,506",
			"So we don't have to wait for it.`, `00:00:00,000`),",
			"`729",
			"00:45:55,704 --> 00:45:59,506",
			"So we don't have to wait for it.`)",
			"Test.assertEquals(syncSubs(",
			"`735",
			"00:46:24,967 --> 00:46:27,701",
			"We've already won.",
			"​",
			"736",
			"00:46:27,736 --> 00:46:30,637",
			"[Crowd cheers]`, `01:21:00,211`),",
			"`735",
			"02:07:25,178 --> 02:07:27,912"
		],
		"starterFn": [
			"1\nfunction syncSubs(subtitles, timeIncrement) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/H4of8EdxS98ikEaZd"
	},
	{
		"title": "Pyramidal Strings",
		"description": "<p><span>In this challenge, you have to obtain a pyramidal version of a given string, transforming the string into an array containing a series of string slices that progressively increase or decrease </span><strong><span>steadily</span></strong><span> from the left to the right. Every slice containing two or more characters must have </span><strong><span>a space between every pair of characters</span></strong><span>, to permit a hypothetical vertical alignment. See the example below:</span></p><pre><code>// REGULAR pyramidal version of \"EDABIT\"\n\n[ \"E\",\n \"D A\",\n\"B I T\" ]</code></pre><p><span>Depending on the given </span><code>type</code><span>, you have to obtain a </span><strong><span>regular</span></strong><span> pyramid starting from its vertex (</span><code>type === \"REG\"</code><span>) as in the example above, or a </span><strong><span>reversed</span></strong><span> pyramid  starting from its base (</span><code>type === \"REV\"</code><span>) as in the example below:</span></p><pre><code>// REVERSED pyramidal version of \"EDABIT\"\n\n[\"E D A\",\n  \"B I\",\n   \"T\"  ]</code></pre><p><span>Every pyramid must follow the same steadily increment/decrement of its slices (or rows) by exactly one character (excluding spaces), so that not every string can be transformed in a pyramid! See the example below:</span></p><pre><code>// Regular pyramidal version of \"PYRAMID\"\n\n[ \"P\",\n \"Y R\",\n\"A M I\" ]\n\n// Letter \"D\" can't be placed in the pyramid</code></pre><p><span>Given as parameters a </span><code>string</code><span> and a </span><code>type</code><span>, implement a function that returns:</span></p><ul><li><span>A string </span><code>\"Error!\"</code><span> if the pyramidal version can't be obtained from the given </span><code>string</code><span>.</span></li><li><span>An array containing the regular pyramidal version of the </span><code>string</code><span> if the given </span><code>type</code><span> is equal to </span><code>\"REG\"</code><span>.</span></li><li><span>An array containing the reversed pyramidal version of the </span><code>string</code><span> if the given </span><code>type</code><span> is equal to </span><code>\"REV\"</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>pyramidalString(\"EDABIT\", \"REG\") ➞ [\"E\", \"D A\", \"B I T\"]\n\npyramidalString(\"EDABIT\", \"REV\") ➞ [\"E D A\", \"B I\", \"T\"]\n\npyramidalString(\"PYRAMID\", \"REG\") ➞ \"Error!\"\n\npyramidalString(\"!\", \"REV\") ➞ [\"!\"]\n\npyramidalString(\"\", \"REG\") ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>If the given </span><code>string</code><span> has just one character, the returned array will contain that single character. If the given </span><code>string</code><span> is empty, the returned array will be empty. </span></li><li><span>Remember to insert a space between every character inside the rows containing two or more characters.</span></li><li><span>The increment and the decrement of the rows in a pyramidal string are equal to one character more or less than the previous, depending on the given </span><code>type</code><span>.</span></li><li><span>You have to find a discriminant rule to establish if a string can be transformed into a pyramid, without creating single exceptions for every given case. What is suggesting to you the shape of a pyramid seen frontally?</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"math",
			"strings"
		],
		"tests": [
			"// Regular pyramids",
			"Test.assertSimilar(pyramidalString(\"\", \"REG\"), [])",
			"Test.assertSimilar(pyramidalString(\"ZAPHODBEEBLEBROX\", \"REG\"), \"Error!\")",
			"Test.assertSimilar(pyramidalString(\"THEHITCHIKERGUIDETOTHEGALAXY\", \"REG\"), [\"T\", \"H E\", \"H I T\", \"C H I K\", \"E R G U I\", \"D E T O T H\", \"E G A L A X Y\"])",
			"Test.assertSimilar(pyramidalString(\"HOTBLACKDESIATO\", \"REG\"), [\"H\", \"O T\", \"B L A\", \"C K D E\", \"S I A T O\"])",
			"Test.assertSimilar(pyramidalString(\"TRILLIAN\", \"REG\"), \"Error!\")",
			"Test.assertSimilar(pyramidalString(\"APERFECTLYNORMALBEAST\", \"REG\"), [\"A\", \"P E\", \"R F E\", \"C T L Y\", \"N O R M A\", \"L B E A S T\"])",
			"Test.assertSimilar(pyramidalString(\"RESTAURANTATTHEENDOFTHEUNIVERSE\", \"REG\"), \"Error!\")",
			"​",
			"// Reversed pyramids",
			"Test.assertSimilar(pyramidalString(\"?\", \"REV\"), [ \"?\" ])",
			"Test.assertSimilar(pyramidalString(\"ARTHURDENT\", \"REV\"), [\"A R T H\", \"U R D\", \"E N\", \"T\"])",
			"Test.assertSimilar(pyramidalString(\"DONTPANIC\", \"REV\"), \"Error!\")",
			"Test.assertSimilar(pyramidalString(\"MARVIN\", \"REV\"), [\"M A R\", \"V I\", \"N\"])",
			"Test.assertSimilar(pyramidalString(\"42\", \"REV\"), \"Error!\")",
			"Test.assertSimilar(pyramidalString(\"LIFETHEUNIVERSEANDEVERYTHING\", \"REV\"), [\"L I F E T H E\", \"U N I V E R\", \"S E A N D\", \"E V E R\", \"Y T H\", \"I N\", \"G\"])",
			"Test.assertSimilar(pyramidalString(\"FORDPREFECT\", \"REV\"), \"Error!\")"
		],
		"starterFn": [
			"1\nfunction pyramidalString(string, type) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4BKEcK9Y4WW6o64Mt"
	},
	{
		"title": "Movie Theater Seating",
		"description": "<p><span>A group of </span><code>n</code><span> friends are going to see a movie. They would like to find a spot where they can sit next to each other in the same row. A movie theater's seat layout can be represented as a 2-D matrix, where </span><code>0</code><span>s represent empty seats and </span><code>1</code><span>s represent taken seats.</span></p><pre><code>[[1, 0, 0, 0, 1, 1, 1],\n[1, 1, 1, 0, 1, 1, 1],\n[1, 0, 1, 0, 1, 0, 1],\n[1, 1, 0, 1, 1, 0, 1],\n[1, 0, 1, 1, 1, 1, 1],\n[1, 0, 1, 1, 0, 0, 0]]</code></pre><p><span>Create a function that, given a seat layout and the number of friends </span><code>n</code><span>, returns the number of available spots for all </span><code>n</code><span> friends to sit together. In the above example, if </span><code>n = 3</code><span>, there would be 2 spots (the first row and last row).</span></p><h3><span>Examples</span></h3><pre><code>groupSeats([\n  [1, 0, 1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0, 1, 0],\n  [0, 0, 1, 1, 1, 1, 1],\n  [1, 0, 1, 1, 0, 0, 1],\n  [1, 1, 1, 0, 1, 0, 1],\n  [0, 1, 1, 1, 1, 0, 0]\n], 2) ➞ 3\n\ngroupSeats([\n  [1, 0, 1, 0, 1, 0, 1],\n  [0, 1, 0, 0, 0, 0, 0],\n], 4) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>Multiple free arrangements that overlap still count as distinct arrangements (see example #2).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"loops"
		],
		"tests": [
			"Test.assertEquals(groupSeats([",
			"  [1, 0, 1, 0, 1, 0, 1], ",
			"  [0, 1, 0, 1, 0, 1, 0], ",
			"  [0, 0, 0, 0, 0, 0, 0], ",
			"  [1, 0, 1, 1, 0, 0, 1], ",
			"  [1, 1, 1, 0, 0, 0, 1], ",
			"  [0, 1, 1, 1, 1, 0, 0]",
			"], 7), 1)",
			"​",
			"Test.assertEquals(groupSeats([",
			"  [1, 0, 0, 0, 1, 1, 1], ",
			"  [1, 1, 1, 0, 1, 1, 1], ",
			"  [1, 0, 1, 0, 1, 0, 1], ",
			"  [1, 1, 0, 1, 1, 0, 1], ",
			"  [1, 0, 1, 1, 1, 1, 1],",
			"  [1, 0, 1, 1, 0, 0, 0]",
			"], 3), 2)",
			"​",
			"Test.assertEquals(groupSeats([",
			"  [1, 0, 0, 0, 0, 1, 1], ",
			"  [1, 1, 1, 0, 1, 1, 1], ",
			"  [1, 0, 1, 0, 1, 0, 1], ",
			"  [1, 1, 0, 1, 1, 0, 1], ",
			"  [1, 0, 1, 1, 1, 1, 1],",
			"  [1, 0, 1, 1, 0, 0, 0]",
			"], 4), 1)"
		],
		"starterFn": [
			"1\nfunction groupSeats(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/N7LuCieCrotxajSqB"
	},
	{
		"title": "Primitive Pythagorean Triples",
		"description": "<p><span>A Pythagorean triple is a set of three integer numbers that form a right triangle. The sum of the squares of the two smaller numbers should equal the square of the largest number. Given three numbers a, b and c (c being the largest):</span></p><pre><code>a^2 + b^2 = c^2</code></pre><p><span>Furthermore, a Pythagorean triple is said to be primitive if the three numbers are pairwise coprime — that is, the greatest common prime factor between any two numbers is 1.</span></p><p><span>Create a function that takes an array of three numbers (unordered) and returns </span><code>true</code><span> if the numbers constitute a primitive Pythagorean triple, </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isPrimPythTriple([4, 5, 3]) ➞ true\n\nisPrimPythTriple([7, 12, 13]) ➞ false\n\nisPrimPythTriple([39, 15, 36]) ➞ false\n// Pythagorean triple, but not primitive.\n\nisPrimPythTriple([77, 36, 85]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"conditions",
			"higher_order_functions",
			"math"
		],
		"tests": [
			"Test.assertEquals(isPrimPythTriple([4,5,3]), true)",
			"Test.assertEquals(isPrimPythTriple([7,12,13]), false)",
			"Test.assertEquals(isPrimPythTriple([39,15,36]), false,'Pythagorean triple, but not primitive')",
			"Test.assertEquals(isPrimPythTriple([77,36,85]), true)",
			"Test.assertEquals(isPrimPythTriple([35,28,21]), false)",
			"Test.assertEquals(isPrimPythTriple([80,89,39]), true)"
		],
		"starterFn": [
			"1\nfunction isPrimPythTriple(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7WZBxctgouiNRYAX2"
	},
	{
		"title": "The Primiera",
		"description": "<p><span>Primiera (from the french word </span><em><span>prime</span></em><span>, \"prize\") is a combination of cards of </span><em><span>Scopa</span></em><span>, a popular Italian card game.</span></p><p><span>For establishing the value of the Primiera, a separate point scale is used for selecting the best cards in the player's deck, in each of the four suits and totaling those four cards point values. A Primiera requires at least one card for each suit, otherwise, it can't be calculated.</span></p><p><span>This is the Primiera points scale:</span></p><ul><li><span>7 is worth 21 points.</span></li><li><span>6 is worth 18 points.</span></li><li><span>Ace is worth 16 points.</span></li><li><span>Cards from 2 to 5 are worth 10 points plus the card value.</span></li><li><span>Face cards (Jack, Queen and King) are worth 10 points.</span></li></ul><p><span>Create a function that takes in an array representing a cards deck and returns the value of the Primiera.</span></p><h3><span>Examples</span></h3><pre><code>getPrimieraScore([\"Ad\", \"7d\", \"5h\", \"2c\", \"Ks\"]) ➞ 58\n// In the diamonds set 7 is higher than Ace (21 &gt; 16).\n\ngetPrimieraScore([\"2d\", \"Jd\", \"7h\", \"Qc\", \"5s\", \"As\"]) ➞ 59\n// In the diamonds set 2 is higher than Jack (12 &gt; 10), while in\n// the spades set Ace is higher than 5 (16 &gt; 15 ).\n\ngetPrimieraScore([\"2d\", \"Jd\", \"Qc\", \"5s\", \"As\"]) ➞ 0\n// There aren't cards in the hearts set, so Primiera can't be\n// calculated.</code></pre><h3><span>Notes</span></h3><ul><li><span>Notation: </span><strong><span>A</span></strong><span>ce, card numbers from </span><strong><span>2 to 7</span></strong><span>, </span><strong><span>J</span></strong><span>ack, </span><strong><span>Q</span></strong><span>ueen or </span><strong><span>K</span></strong><span>ing   +   </span><strong><span>d</span></strong><span>iamonds, </span><strong><span>h</span></strong><span>earts, </span><strong><span>c</span></strong><span>lubs or </span><strong><span>s</span></strong><span>pades.</span></li><li><span>If one or more seeds are missing from the deck the value of the Primiera is equal to 0.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"games"
		],
		"tests": [
			"Test.assertEquals(getPrimieraScore([\"3d\", \"6d\", \"6h\", \"Qh\", \"7s\", \"As\", \"6c\", \"Jc\"]), 75)",
			"Test.assertEquals(getPrimieraScore([\"3d\", \"7d\", \"Kd\", \"7h\", \"Qh\", \"Ah\", \"7s\", \"3c\", \"Jc\"]), 76)",
			"Test.assertEquals(getPrimieraScore([\"5d\", \"7h\", \"Qc\", \"Ac\", \"4c\", \"Kc\", \"As\"]), 68)",
			"Test.assertEquals(getPrimieraScore([\"7d\", \"Ad\", \"Kd\", \"2h\", \"6h\", \"5h\", \"Ah\", \"3c\", \"Jc\", \"Ac\", \"7c\", \"3c\", \"4c\"]), 0, \"At least one card per suit must be in the deck\")"
		],
		"starterFn": [
			"1\nfunction getPrimieraScore(deck) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4RQdHYZq7vMxgiibB"
	},
	{
		"title": "Vowel Families",
		"description": "<p><span>Write a function that selects all words that have all the same vowels (in any order and/or number) as the first word, including the first word.</span></p><h3><span>Examples</span></h3><pre><code>sameVowelGroup([\"toe\", \"ocelot\", \"maniac\"]) ➞ [\"toe\", \"ocelot\"]\n\nsameVowelGroup([\"many\", \"carriage\", \"emit\", \"apricot\", \"animal\"]) ➞ [\"many\"]\n\nsameVowelGroup([\"hoops\", \"chuff\", \"bot\", \"bottom\"]) ➞ [\"hoops\", \"bot\", \"bottom\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Words will contain only </span><strong><span>lowercase letters</span></strong><span>, and </span><strong><span>may contain whitespaces</span></strong><span>.</span></li><li><span>Frequency </span><strong><span>does not</span></strong><span> matter (e.g. if the first word is \"loopy\", then you can include words with any number of o's, so long as they </span><strong><span>only</span></strong><span> contain o's, and not any other vowels).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"objects",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(sameVowelGroup([\"hoops\", \"chuff\", \"bot\", \"bottom\"]), ",
			"[\"hoops\", \"bot\", \"bottom\"])",
			"Test.assertSimilar(sameVowelGroup([\"crop\", \"nomnom\", \"bolo\", \"yodeller\"]), ",
			"[\"crop\", \"nomnom\", \"bolo\"])",
			"Test.assertSimilar(sameVowelGroup([\"semantic\", \"aimless\", \"beautiful\", \"meatless icecream\"]), ",
			"[\"semantic\", \"aimless\", \"meatless icecream\"])",
			"Test.assertSimilar(sameVowelGroup([\"many\", \"carriage\", \"emit\", \"apricot\", \"animal\"]), ",
			"[\"many\"])",
			"Test.assertSimilar(sameVowelGroup([\"toe\", \"ocelot\", \"maniac\"]), [\"toe\", \"ocelot\"])",
			"Test.assertSimilar(sameVowelGroup([\"a\", \"apple\", \"flat\", \"map\", \"shark\"]), [\"a\", \"flat\", \"map\", \"shark\"])",
			"Test.assertSimilar(sameVowelGroup([\"a\", \"aa\", \"ab\", \"abc\", \"aaac\", \"abe\"]), [\"a\", \"aa\", \"ab\", \"abc\", \"aaac\"])"
		],
		"starterFn": [
			"1\nfunction sameVowelGroup(w) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nxSeD3tvqQkumGNid"
	},
	{
		"title": "Standard Competition Ranking",
		"description": "<p><span>Standard competition ranking (also known as \"1224\" ranking) assigns the same rank to matching values. Rank numbers are increased each time, so ranks are sometimes </span><em><span>skipped</span></em><span>. If we have 5 scores (the highest score having a rank of 1):</span></p><p><span>No matching values:</span></p><pre><code>Scores = [99, 98, 97, 96, 95]\nRank = 1,  2,  3,  4,  5</code></pre><p><span>With matching values:</span></p><pre><code>Scores = [99, 98, 98, 96, 95]\nRank = 1,  2,  2,  4,  5\n\n// Second and third scores are equal, so rank \"3\" is skipped.</code></pre><p><span>Given an object containing the names and scores of 5 competitors, and a competitor name, return the </span><em><span>rank</span></em><span> of that competitor after applying competition ranking.</span></p><h3><span>Examples</span></h3><pre><code>competition_rank({\n  George: 96,\n  Emily: 95,\n  Susan: 93,\n  Jane: 89,\n  Brett: 82\n  }, \"Jane\") ➞ 4\n\ncompetition_rank({\n  Kate: 92,\n  Carol: 92,\n  Jess: 87,\n  Bruce: 87,\n  Scott: 84\n  }, \"Bruce\") ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>The highest score has a rank value of 1.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"objects"
		],
		"tests": [
			"Test.assertEquals(competitionRank({Aria: 90, Brooke: 90, Olivia: 90, Eve: 74, Ellie: 87}, \"Ellie\"), 4)",
			"Test.assertEquals(competitionRank({Ryan: 97, Thomas: 85, Kai: 95, Aiden: 87, Logan: 90}, \"Logan\"), 3)",
			"Test.assertEquals(competitionRank({Lilly: 91, Harris: 87, Archie: 93, Lexi: 100, Ava: 88}, \"Lilly\"), 3)",
			"Test.assertEquals(competitionRank({Jayden: 90, Josh: 90, Rebecca: 96, Jack: 89, Max: 96}, \"Rebecca\"), 1)",
			"Test.assertEquals(competitionRank({Ben: 78, Quinn: 84, Lena: 84, Isla: 92, Kayla: 72}, \"Ben\"), 4)",
			"Test.assertEquals(competitionRank({Lucy: 81, Ella: 90, Summer: 91, Harper: 81, Sadie: 85}, \"Ella\"), 2)",
			"Test.assertEquals(competitionRank({Cole: 96, Carson: 92, Gabriel: 91, Hollie: 97, Penelope: 85}, \"Hollie\"), 1)",
			"Test.assertEquals(competitionRank({Michael: 89, Noah: 98, Reuben: 88, Sam: 91, Mia: 91}, \"Mia\"), 2)",
			"Test.assertEquals(competitionRank({James: 93, Maria: 91, Lewis: 95, Joseph: 96, Imogen: 90}, \"Lewis\"), 2)",
			"Test.assertEquals(competitionRank({Jessica: 90, Emily: 99, Hope: 91, Charlie: 96, Lucas: 87}, \"Hope\"), 3)",
			"Test.assertEquals(competitionRank({Sophie: 86, Piper: 98, Elliot: 100, Erica: 90, Freya: 100}, \"Freya\"), 1)",
			"Test.assertEquals(competitionRank({Grace: 93, Henry: 90, Florence: 98, Millie: 89, David: 99}, \"Henry\"), 4)",
			"Test.assertEquals(competitionRank({Alfie: 90, Elijah: 90, Cara: 85, Isaac: 96, Bella: 92}, \"Elijah\"), 3)",
			"Test.assertEquals(competitionRank({Clara: 85, Matilda: 86, Amelia: 98, Oliver: 95, Adam: 94}, \"Clara\"), 5)",
			"Test.assertEquals(competitionRank({Nina: 81, Tommy: 79, Tyler: 84, Leo: 79, Hallie: 79}, \"Nina\"), 2)",
			"Test.assertEquals(competitionRank({Violet: 99, Finn: 100, Eden: 99, Frankie: 98, Rory: 98}, \"Frankie\"), 4)",
			"Test.assertEquals(competitionRank({Robbie: 70, Julia: 76, Owen: 70, Phoebe: 92, Jacob: 79}, \"Owen\"), 4)",
			"Test.assertEquals(competitionRank({Andrew: 95, Louis: 95, Riley: 95, Amy: 95, Charlotte: 95}, \"Charlotte\"), 1)",
			"Test.assertEquals(competitionRank({Harry: 81, Elsie: 81, Grayson: 84, John: 84, Alex: 81}, \"Elsie\"), 3)",
			"Test.assertEquals(competitionRank({Innes: 76, Lola: 85, Anna: 92, Cooper: 93, Daniel: 93}, \"Cooper\"), 1)"
		],
		"starterFn": [
			"1\nfunction competitionRank(results, person) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/g2QxB5HCE9hN3PS75"
	},
	{
		"title": "Prime Factorization",
		"description": "<p><span>Create a function that returns the prime factorization of a number as a sorted list of arrays. Include the multiplicity of each prime in the arrays:</span></p><ul><li><span>[</span><span>(prime</span><span>_</span><span>0, mult</span><span>_</span><span>0), ..., (prime</span><span>_</span><span>k, mult</span><span>_</span><span>k)]</span></li><li><span>where prime</span><span>_</span><span>0 &lt; prime</span><span>_</span><span>1 &lt; ... &lt; prime</span><span>_</span><span>k</span></li></ul><h3><span>Examples</span></h3><pre><code>getPrimeFactorization(4) ➞ [[2, 2]]\n\ngetPrimeFactorization(10) ➞ [[2, 1], [5, 1]]\n\ngetPrimeFactorization(60) ➞ [[2, 2], [3, 1], [5, 1]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Don't worry about negatives or floats. All inputs will be positive numbers.</span></li><li><span>1 is not a prime! Do not include it. You will not be given 1 as an input.</span></li><li><span>All inputs will be less than 10,000.</span></li></ul>",
		"publishedBy": "kochug",
		"publishedByUrl": "https://edabit.com/user/vQEmjTRgmdGNYB7yk",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(getPrimeFactorization(2), [[2, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(4), [[2, 2]]);",
			"Test.assertSimilar(getPrimeFactorization(10), [[2, 1], [5, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(11), [[11, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(29), [[29, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(60), [[2, 2], [3, 1], [5, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(100), [[2, 2], [5, 2]]);",
			"Test.assertSimilar(getPrimeFactorization(151), [[151, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(323), [[17, 1], [19, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(997), [[997, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(3349), [[17, 1], [197, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(5040), [[2, 4], [3, 2], [5, 1], [7, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(6097), [[7, 1], [13, 1], [67, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(8192), [[2, 13]]);",
			"Test.assertSimilar(getPrimeFactorization(9870), [[2, 1], [3, 1], [5, 1], [7, 1], [47, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(9973), [[9973, 1]]);",
			"Test.assertSimilar(getPrimeFactorization(9999), [[3, 2], [11, 1], [101, 1]]);"
		],
		"starterFn": [
			"1\nfunction getPrimeFactorization(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WkH9rwDnNtDLYAYLp"
	},
	{
		"title": "Quad Sequence",
		"description": "<p><span>Write a function that receives an array of </span><em><span>x</span></em><span> integers and returns an array of </span><em><span>x</span></em><span> integers in the Nth term of a quadratic number sequence (where </span><em><span>x</span></em><span> is the length of the incoming array). Your function should return the continuation of the quadratic sequence of the length equal to the length of the given array.</span></p><h3><span>Examples</span></h3><pre><code>quadSequence([48, 65, 84]) ➞ [105, 128, 153]\n\nquadSequence([0, 1, 6, 15, 28]) ➞ [45, 66, 91, 120, 153]\n\nquadSequence([9, 20, 33, 48]) ➞ [65, 84, 105, 128]</code></pre><h3><span>Notes</span></h3><p><span>Both positive and negative numbers are included in the test cases.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(quadSequence([48, 65, 84]), [105, 128, 153])",
			"Test.assertSimilar(quadSequence([9, 20, 33, 48]), [65, 84, 105, 128])",
			"Test.assertSimilar(quadSequence([0, 1, 6, 15, 28]), [45, 66, 91, 120, 153])",
			"Test.assertSimilar(quadSequence([6, 10, 16, 24]), [34, 46, 60, 76])",
			"Test.assertSimilar(quadSequence([3, 12, 27, 48, 75, 108, 147, 192, 243, 300]), [363, 432, 507, 588, 675, 768, 867, 972, 1083, 1200])",
			"Test.assertSimilar(quadSequence([-3, 8, 23, 42, 65]), [92, 123, 158, 197, 240])",
			"Test.assertSimilar(quadSequence([0, 12, 10]), [-6, -36, -80])"
		],
		"starterFn": [
			"1\nfunction quadSequence(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pZoKXf2ujZq65iWfD"
	},
	{
		"title": "Get Notes Distribution",
		"description": "<p><span>Create a function that takes an array of students and returns an object representing their notes distribution. Have in mind that all invalid notes should not be count in the distribution. Valid notes are: </span><code>1, 2, 3, 4, 5</code></p><h3><span>Examples</span></h3><pre><code>[\n  {\n    name: \"Steve\",\n    notes: [5, 5, 3, -1, 6]\n  },\n  {\n    name: \"John\",\n    notes: [3, 2, 5, 0, -3]\n  }\n] ➞ {\n  5: 3,\n  3: 2,\n  2: 1\n}</code></pre><h3><span>Notes</span></h3><p><span>Try doing that with filter + reduce.</span></p>",
		"publishedBy": "Bartosz Cytrowski",
		"publishedByUrl": "https://edabit.com/user/QCchMDx3z8NcqT8QJ",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects"
		],
		"tests": [
			"const objectsAreEqual = (actual, expected) => Object.keys(expected).every(",
			"  key => actual[key] === expected[key]",
			")",
			"const areEqual = (actual, expected, compare) => expected.every(",
			"  (item, index) => compare(actual[index], item)",
			")",
			"const sets = [",
			"  [['Jacek', [5, 4, 3, -1, 0]], ['Ewa', [3, 3, 3, 6]], ['Zygmunt', [1, 2, 3]]],",
			"  [['Jacek', []], ['Ewa', []], ['Zygmunt', [6, 1, 2, 3]]],",
			"  []",
			"].map(",
			"  set => ({ ",
			"    actual: getNotesDistribution(",
			"      set.map(([name, notes]) => ({ name, notes }))",
			"    ), ",
			"    expected: set.map(([,notes]) => notes).reduce((result, next) => result.concat(next), []).filter(",
			"      note => note > 0 && note < 6",
			"    ).reduce(",
			"      (result, next) => {",
			"        result[next] = (result[next] || 0) + 1",
			"        return result",
			"      },",
			"      {}",
			"    )",
			"  })   ",
			").forEach("
		],
		"starterFn": [
			"1\nfunction getNotesDistribution(students) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WyEL2YcemhrS4waEE"
	},
	{
		"title": "Group Monotonicity",
		"description": "<p><span>Create a function which returns the indices where the monotonicity of a 1-D array changes. If there are none, return an empty array. A monotonic array is one that is either non-increasing or non-decreasing.</span></p><h3><span>Examples</span></h3><pre><code>groupMonotonic([0, 1]) ➞ []\n\ngroupMonotonic([0, 2, 1]) ➞ [1]\n\ngroupMonotonic([0, 1, 1, 0]) ➞ [2]</code></pre><h3><span>Notes</span></h3><ul><li><span>Trivially, all points and line-segments are monotonic (see example </span><span>#</span><span>1).</span></li><li><span>Return the indices where each monotonic section stops, not where each new one begins: i.e. return the \"peaks\" of the triangles (see example </span><span>#</span><span>2).</span></li><li><span>Monotonic arrays are allowed to be constant (see example </span><span>#</span><span>3).</span></li><li><span>You can expect positive and negative values in the array.</span></li></ul>",
		"publishedBy": "kochug",
		"publishedByUrl": "https://edabit.com/user/vQEmjTRgmdGNYB7yk",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math"
		],
		"tests": [
			"Test.assertSimilar(groupMonotonic([]), [])",
			"Test.assertSimilar(groupMonotonic([0]), [])",
			"Test.assertSimilar(groupMonotonic([1]), [])",
			"Test.assertSimilar(groupMonotonic([0, 1]), [])",
			"Test.assertSimilar(groupMonotonic([1, 0]), [])",
			"Test.assertSimilar(groupMonotonic([1, 1]), [])",
			"Test.assertSimilar(groupMonotonic([0, 1, 2]), [])",
			"Test.assertSimilar(groupMonotonic([2, 1, 0]), [])",
			"Test.assertSimilar(groupMonotonic([0, 2, 1]), [1])",
			"Test.assertSimilar(groupMonotonic([1, 0, 2]), [1])",
			"Test.assertSimilar(groupMonotonic([0, 1, 1, 0]), [2])",
			"Test.assertSimilar(groupMonotonic([1, 2, 3, 4, 4, 4, 3, 2, 1]), [5])",
			"Test.assertSimilar(groupMonotonic([0, 6, 10, 9, 3, -3, -9, -10, -6, 0]), [2, 7])"
		],
		"starterFn": [
			"1\nfunction groupMonotonic(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RPfHDE8xNuDu8Te3F"
	},
	{
		"title": "We Have a House",
		"description": "<p><span>In the garden, we have a house. We don't know how big the house is going to get. The garden is 50' x 50'. If you want to walk around the house, you'll need 3 feet so the house cannot be bigger than the width &amp; depth of the garden minus the path to walk around it.</span></p><p><img alt=\"We Have a House\" title=\"We Have a House\" src=\"https://edabit-challenges.s3.amazonaws.com/we_have_house.png\"></p><p><span>In this example you can see the arguments your function is going to get (in </span><strong><span>red</span></strong><span>). The measurements of the windows + door as well as the dark rim (against rain damage) are always the same (in </span><strong><span>blue</span></strong><span>). We put </span><strong><span>One door</span></strong><span> in the front and </span><strong><span>Two windows</span></strong><span> in each wall.</span></p><p><span>We don't have permission to build higher than 20'. The area around the windows and door cannot be smaller than 1 foot except under the door obviously. It is possible to have a flat roof.</span></p><p><span>Create a function that takes four arguments and returns the area of </span><strong><span>light yellow</span></strong><span> paint and </span><strong><span>dark gray</span></strong><span> paint in a string as square feet. Assuming the coverage of the paint is perfect and you'll only need one layer of paint.</span></p><h3><span>Examples</span></h3><pre><code>weHaveHouse(8, 30, 32, 8) ➞ \"Yellow: 873, Gray: 242\"\n\nweHaveHouse(9, 14, 20, 9) ➞ \"House too small.\"\n\nweHaveHouse(9, 38, 36, 9) ➞ \"Yellow: 1261, Gray: 290\"\n\nweHaveHouse(10, 31, 30, 11) ➞ \"No permission.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If the house is too big for the garden, return </span><code>\"House too big.\"</code></li><li><span>If the house is too high, return </span><code>\"No permission.\"</code></li><li><span>If the house is too small (for the windows and door to fit), return </span><code>\"House too small.\"</code></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(weHaveHouse(8, 30, 32, 8), \"Yellow: 873, Gray: 242\")",
			"Test.assertEquals(weHaveHouse(10, 31, 30, 11), \"No permission.\")",
			"Test.assertEquals(weHaveHouse(8, 30, 30, 8), \"Yellow: 849, Gray: 234\")",
			"Test.assertEquals(weHaveHouse(9, 20, 18, 8), \"Yellow: 581, Gray: 146\")",
			"Test.assertEquals(weHaveHouse(9, 14, 20, 9), \"House too small.\")",
			"Test.assertEquals(weHaveHouse(8, 16, 12, 8), \"Yellow: 353, Gray: 106\")",
			"Test.assertEquals(weHaveHouse(10, 25, 25, 0), \"Yellow: 689, Gray: 194\")",
			"Test.assertEquals(weHaveHouse(8, 45, 42, 8), \"House too big.\")",
			"Test.assertEquals(weHaveHouse(10, 40, 40, 10), \"Yellow: 1569, Gray: 314\")",
			"Test.assertEquals(weHaveHouse(10, 15, 10, 7), \"House too small.\")",
			"Test.assertEquals(weHaveHouse(9, 38, 36, 9), \"Yellow: 1267, Gray: 290\")",
			"Test.assertEquals(weHaveHouse(8, 15, 12, 6), \"Yellow: 303, Gray: 102\")",
			"Test.assertEquals(weHaveHouse(8, 30, 45, 6), \"House too big.\")",
			"Test.assertEquals(weHaveHouse(9, 20, 14, 8), \"Yellow: 525, Gray: 130\")"
		],
		"starterFn": [
			"1\nfunction weHaveHouse(hh, hw, hd, rh) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uaK2bBBZby58kXbGe"
	},
	{
		"title": "The Smiths",
		"description": "<p><span>In numbers theory, a positive composite integer is a Smith number if its digital root is equal to the digital root of the sum of its prime factors, with factors being counted by multiplicity. Trivially, every prime is also a Smith number, having just one prime factor that is equal to itself. If two Smith numbers are consecutive in the integer series, then they are Smith brothers. Any other number will not be a Smith.</span></p><p><span>Given a positive integer </span><code>number</code><span>, implement a function that returns:</span></p><ul><li><code>\"Youngest Smith\"</code><span> if the given number is the lower element of a couple of Smith brothers.</span></li><li><code>\"Oldest Smith\"</code><span> if the given number is the higher element of a couple of Smith brothers.</span></li><li><code>\"Single Smith\"</code><span> if the given number is a Smith number without another Smith number adjacent, lower or higher.</span></li><li><code>\"Trivial Smith\"</code><span> if the given number is a prime.</span></li><li><code>\"Not a Smith\"</code><span> if the given number is not a Smith number.</span></li></ul><h3><span>Examples</span></h3><pre><code>smithType(22) ➞ \"Single Smith\"\n// Digital root of 22 = 2 + 2 = 4\n// Sum of prime factors of 22 = 2 + 11 = 13\n// Digital root of 13 = 1 + 3 = 4\n// Is a Smith  number without a brother\n\nsmithType(7) ➞ \"Trivial Smith\"\n// The given number is a prime\n\nsmithType(728) ➞ \"Youngest Smith\"\n// Digital root of 728 = 7 + 2 + 8 = 17 = 1 + 7 = 8\n// Sum of prime factors of 728 = 2 + 2 + 2 + 7 + 13 = 26\n// Digital root of 26 = 2 + 6 = 8\n// The number 729 is a Smith number, so 728 is the youngest brother  \n\nsmithType(6) ➞ \"Not a Smith\"\n// Digital root of 6 = 6\n// Sum of prime factors of 6 = 2 + 3 = 5\n// Digital root of 5 = 5</code></pre><h3><span>Notes</span></h3><ul><li><span>The prime factors are counted by multiplicity, they don't have to be unique (see example #3).</span></li><li><span>Two Smith numbers are brothers if they are adjacent and if they are </span><strong><span>composite</span></strong><span>, a Trivial Smith (a prime) can't be the brother of a Smith number! Look at example #1: 22 is a Single Smith, despite the next one, 23 (a prime), being a Trivial Smith.</span></li><li><span>The digital root is the reiterated sum of the digits of a number until a single digit is reached. You can find more info in the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>All given integers will be greater than zero.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(smithType(22), \"Single Smith\", \"Example #1\")",
			"Test.assertEquals(smithType(7), \"Trivial Smith\", \"Example #2\")",
			"Test.assertEquals(smithType(728), \"Youngest Smith\", \"Example #3\")",
			"Test.assertEquals(smithType(6), \"Not a Smith\", \"Example #4\")",
			"Test.assertEquals(smithType(729), \"Oldest Smith\")",
			"Test.assertEquals(smithType(1), \"Not a Smith\")",
			"Test.assertEquals(smithType(58), \"Single Smith\")",
			"Test.assertEquals(smithType(8), \"Not a Smith\")",
			"Test.assertEquals(smithType(666), \"Single Smith\")",
			"Test.assertEquals(smithType(2965), \"Oldest Smith\")",
			"Test.assertEquals(smithType(2963), \"Trivial Smith\")",
			"Test.assertEquals(smithType(2964), \"Youngest Smith\")"
		],
		"starterFn": [
			"1\nfunction smithType(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4CLzLRAiuxepwfL5X"
	},
	{
		"title": "Split 25 (Part 1)",
		"description": "<p><span>About a month ago I stumbled upon an interesting problem — something called the 25 split. In the problem, you had to break up 25 into parts, and, from those parts that add to it, try to create the biggest product.</span></p><p><span>For example, </span><code>3 * 22 = 66</code><span> or </span><code>5 * 5 * 5 * 5 * 5 = 3125</code><span>. With this first part, return the value of the biggest product possible using natural number parts from a given number, </span><em><span>x</span></em><span>.</span></p><h3><span>Examples</span></h3><pre><code>split(5) ➞ 6\n// 3 times 2\n\nsplit(10) ➞ 36\n// 3 * 3 * 4\n\nsplit(1) ➞ 1</code></pre><h3><span>Notes</span></h3><p><span>3's are useful...</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"control_flow",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(split(25), 8748)",
			"Test.assertEquals(split(1), 1)",
			"Test.assertEquals(split(10), 36)",
			"Test.assertEquals(split(5), 6)",
			"Test.assertEquals(split(15), 243)",
			"Test.assertEquals(split(20), 1458)"
		],
		"starterFn": [
			"1\nfunction split(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/upHyzAsn83TctQQYn"
	},
	{
		"title": "The Kempner Function",
		"description": "<p><span>The Kempner Function, applied to a composite number, permits to find the smallest integer greater than zero which factorial is exactly divided by the number.</span></p><pre><code>kempner(6) ➞ 3\n\n1! = 1 % 6 &gt; 0\n2! = 2 % 6 &gt; 0\n3! = 6 % 6 === 0\n\nkempner(10) ➞ 5\n\n1! = 1 % 10 &gt; 0\n2! = 2 % 10 &gt; 0\n3! = 6 % 10 &gt; 0\n4! = 24 % 10 &gt; 0\n5! = 120 % 10 === 0</code></pre><p><span>A Kempner Function applied to a prime will always return the prime itself.</span></p><pre><code>kempner(2) ➞ 2\nkempner(5) ➞ 5</code></pre><p><span>Given an integer </span><code>n</code><span>, implement a Kempner Function.</span></p><h3><span>Examples</span></h3><pre><code>kempner(6) ➞ 3\n\nkempner(10) ➞ 5\n\nkempner(2) ➞ 2</code></pre><h3><span>Notes</span></h3><ul><li><span>Try to solve this using a recursive method, with an approach oriented to higher order functions.</span></li><li><span>If you need to get more confident with recursion and factorials, try </span><a target=\"_blank\" href=\"https://edabit.com/challenge/Ju7AK9rAGjz86hjxo\"><span>this challenge</span></a><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(kempner(6), 3, \"Instructions: first example.\")",
			"Test.assertEquals(kempner(10), 5, \"Instructions: second example.\")",
			"Test.assertEquals(kempner(2), 2, \"Instructions: third example\")",
			"Test.assertEquals(kempner(21), 7)",
			"Test.assertEquals(kempner(1), 1)",
			"Test.assertEquals(kempner(4), 4)",
			"Test.assertEquals(kempner(13), 13)",
			"Test.assertEquals(kempner(29), 29)",
			"Test.assertEquals(kempner(68), 17)",
			"Test.assertEquals(kempner(71), 71)",
			"Test.assertEquals(kempner(100), 10)"
		],
		"starterFn": [
			"1\nfunction kempner(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tcdEnEJPA6gXg3XXP"
	},
	{
		"title": "Tic Tac Toe Checker",
		"description": "<p><span>Mike and his friend love playing tic tac toe. In fact, they love it so much they created a multiplayer web version to play remotly against each other. At the last minute Mike realized he forgot to call an animation when a player won the game. Now he needs to create a function that will check it but can't do it himself because he's short on time. Mike needs your help!</span></p><p><span>Create a function </span><code>ticTacToeCheck</code><span> that takes a two dimensional array representing a finished game of tic tac toe (e.g. </span><code>[[\"XO-\"], [\"XXX\"], [\"XO-\"]]</code><span>).</span></p><ul><li><span>X represents player 1 move(s).</span></li><li><span>O represents player 2 move(s).</span></li><li><span>Dash (-) represents no move(s).</span></li></ul><h3><span>Rules</span></h3><p><strong><span>1)</span></strong><span> Return </span><code>true</code><span> if player 1 or player 2 win the game.</span></p><pre><code>ticTacToeCheck([[\"XO-\"], [\"XXO\"], [\"O-X\"]]) ➞ true</code></pre><p><strong><span>2)</span></strong><span> Return </span><code>false</code><span> if nobody won the game.</span></p><pre><code>ticTacToeCheck([[\"XXO\"], [\"OOX\"], [\"XOO\"]]) ➞ false</code></pre><p><strong><span>3)</span></strong><span> Return </span><code>\"Nobody moved\"</code><span> if  nobody made a move.</span></p><pre><code>ticTacToeCheck([[---],  [---], [---]]) ➞ \"Nobody moved\"</code></pre><p><strong><span>4)</span></strong><span> Return </span><code>\"No/Incomplete game\"</code><span> if no value was received / all received arrays are void / type of any given value is not \"array\".</span></p><pre><code>ticTacToeCheck([[], [], []]) ➞ \"No/Incomplete game\"\n\nticTacToeCheck([[], []]) ➞ \"No/Incomplete game\"\n\nticTacToeCheck([[]], []) ➞ \"No/Incomplete game\"\n\nticTacToeCheck([\"XOX\", [\"XOX\"], [\"XOO\"]]) ➞ \"No/Incomplete game\"\n\nticTacToeCheck([\"XOX\", [\"XOX\"], []]) ➞ \"No/Incomplete game\"\n\nticTacToeCheck(undefined) ➞ \"No/Incomplete game\"</code></pre><p><strong><span>5)</span></strong><span> Return </span><code>\"Corrupted game\"</code><span> if any values differ from the expected </span><code>\"X\", \"O\", \"-\"</code><span>.</span></p><pre><code>ticTacToeCheck([[\"X\"], [\"XX\"], [\"X-\"]]) ➞ \"Corrupted game\"\n\nticTacToeCheck([[\"AAA\"], [\"BBA\"], [\"ABB\"]]) ➞ \"Corrupted game\"\n\nticTacToeCheck([[\"XOX\"], [\"XOO\"], [undefined]]) ➞ \"Corrupted game\"\n\nticTacToeCheck([[\"XXX\"], [\"XOX\"], [\"\"]]) ➞ \"Corrupted game\"\n\nticTacToeCheck([[\"XXX\"], [\"XOX\"], [1,2,3]]) ➞ \"Corrupted game\"</code></pre><h3><span>Notes</span></h3><p><span>Each array in the main array represent a line in the game.</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertEquals(ticTacToeCheck([[\"-X-\"],[\"OXO\"],[\"--O\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"O-X\"],[\"XOO\"],[\"XOX\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"-XO\"],[\"XOX\"],[\"O-O\"]]),true);",
			"Test.assertEquals(ticTacToeCheck([[\"--X\"],[\"-O-\"],[\"-O-\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"---\"],[\"X--\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"XOO\"],[\"X--\"],[\"XOO\"]]),true);",
			"Test.assertEquals(ticTacToeCheck([[\"XO-\"],[\"OX-\"],[\"X-O\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"-OX\"],[\"---\"],[\"--X\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"-OO\"],[\"X--\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"OO-\"],[\"XXX\"],[\"OXO\"]]),true);",
			"Test.assertEquals(ticTacToeCheck([[\"OOO\"],[\"-OX\"],[\"X-X\"]]),true);",
			"Test.assertEquals(ticTacToeCheck([[\"XO-\"],[\"-XO\"],[\"-XO\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"XOX\"],[\"-XO\"],[\"-OO\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"--O\"],[\"X--\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"-X-\"],[\"OO-\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"XOO\"],[\"OXO\"],[\"XXX\"]]),true);",
			"Test.assertEquals(ticTacToeCheck([[\"--O\"],[\"XOX\"],[\"OOX\"]]),true);",
			"Test.assertEquals(ticTacToeCheck([[\"O--\"],[\"--X\"],[\"O--\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"--O\"],[\"---\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"--X\"],[\"XO-\"],[\"-XO\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"--O\"],[\"--X\"],[\"---\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"--X\"],[\"O--\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"-O-\"],[\"---\"],[\"---\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"X--\"],[\"---\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"---\"],[\"-O-\"],[\"---\"]]),false);",
			"Test.assertEquals(ticTacToeCheck([[\"X-O\"],[\"---\"],[\"X-O\"]]),false);"
		],
		"starterFn": [
			"1\nfunction ticTacToeCheck(a) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DNekob6jaKrBzdvvR"
	},
	{
		"title": "Is It a Valid RGB(A) Color?",
		"description": "<p><span>Given an RGB(A) CSS color, determine whether its format is valid or not. Create a function that takes a string (e.g. </span><code>\"rgb(0, 0, 0)\"</code><span>) and return </span><code>true</code><span> if it's format is correct, otherwise return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>validColor(\"rgb(0,0,0)\") ➞ true\n\nvalidColor(\"rgb(0,,0)\") ➞ false\n\nvalidColor(\"rgb(255,256,255)\") ➞ false\n\nvalidColor(\"rgba(0,0,0,0.123456789)\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>Alpha is between 0 and 1.</span></li><li><span>There are a few edge cases. Check out the </span><strong><span>Tests</span></strong><span> tab to know more.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"regex",
			"validation"
		],
		"tests": [
			"// True tests",
			"Test.assertEquals(validColor('rgb(0,0,0)'), true, 'rgb lowest valid numbers');",
			"Test.assertEquals(validColor('rgb(255,255,255)'), true, 'rgb highest valid numbers');",
			"Test.assertEquals(validColor('rgba(0,0,0,0)'), true, 'rgba lowest valid numbers');",
			"Test.assertEquals(validColor('rgba(255,255,255,1)'), true, 'rgba highest valid numbers');",
			"Test.assertEquals(validColor('rgba(0,0,0,0.123456789)'), true, 'alpha can have many decimals');",
			"Test.assertEquals(validColor('rgba(0,0,0,.8)'), true, 'in alpha the number before the dot is optional');",
			"Test.assertEquals(validColor('rgba( 0 , 127 , 255 , 0.1 )'), true, 'whitespace is allowed around numbers (even tabs)');",
			"Test.assertEquals(validColor('rgb(0%,50%,100%)'), true, 'numbers can be percentages');",
			"​",
			"// False tests",
			"Test.assertEquals(validColor('rgb(0,,0)'), false, 'INVALID: missing number');",
			"Test.assertEquals(validColor('rgb (0,0,0)'), false, 'INVALID: whitespace before parenthesis');",
			"Test.assertEquals(validColor('rgb(0,0,0,0)'), false, 'INVALID: rgb with 4 numbers');",
			"Test.assertEquals(validColor('rgba(0,0,0)'), false, 'INVALID: rgba with 3 numbers');",
			"Test.assertEquals(validColor('rgb(-1,0,0)'), false, 'INVALID: numbers below 0');",
			"Test.assertEquals(validColor('rgb(255,256,255)'), false, 'INVALID: numbers above 255');",
			"Test.assertEquals(validColor('rgb(100%,100%,101%)'), false, 'INVALID: numbers above 100%');",
			"Test.assertEquals(validColor('rgba(0,0,0,-1)'), false, 'INVALID: alpha below 0');",
			"Test.assertEquals(validColor('rgba(0,0,0,1.1)'), false, 'INVALID: alpha above 1');"
		],
		"starterFn": [
			"1\nfunction validColor(color) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CoAPnr8jxcTah2CzZ"
	},
	{
		"title": "Roman Numeral Conversion",
		"description": "<p><span>Create a function that will take either a </span><strong><span>string</span></strong><span> containing a roman numeral, or an </span><strong><span>integer</span></strong><span>.</span></p><ol><li><span>Given a string, return the integer value of that roman numeral.</span></li><li><span>Given an integer, return the equivalent roman numeral.</span></li></ol><h3><span>Symbols to Values</span></h3><pre><code>I ➞ 1\n\nV ➞ 5\n\nX ➞ 10\n\nL ➞ 50\n\nC ➞ 100\n\nD ➞ 500\n\nM ➞ 1000</code></pre><h3><span>Examples</span></h3><pre><code>romanNumerals(\"V\") ➞ 5\n\nromanNumerals(\"IV\") ➞ 4\n\nromanNumerals(\"CII\") ➞ 102\n\nromanNumerals(45) ➞ \"XLV\"\n\nromanNumerals(1666) ➞ \"MDCLXVI\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Theodore",
		"publishedByUrl": "https://edabit.com/user/hi7Hvtq2mJfkXEGF2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers",
			"strings"
		],
		"tests": [
			"const tests = [",
			"  ['I', 1],",
			"  ['V', 5],",
			"  ['X', 10],",
			"  ['L', 50],",
			"  ['C', 100],",
			"  ['D', 500],",
			"  ['M', 1000],",
			"  ['IV', 4],",
			"  ['VI', 6],",
			"  ['XIV', 14],",
			"  ['LIX', 59],",
			"  ['XCIX', 99],",
			"  ['CII', 102],",
			"  ['XLV', 45],",
			"  ['XXX', 30],",
			"  ['XXXVI', 36],",
			"  ['DCCXIV', 714],",
			"  ['MMXVIII', 2018],",
			"  ['MDCLXVI', 1666],",
			"  ['MCCCXXIV', 1324]",
			"];",
			"// Test roman to decimal",
			"for (let [arg, ans] of tests) {",
			"  Test.assertEquals(romanNumerals(arg), ans, `${arg} should return ${ans}`);",
			"}"
		],
		"starterFn": [
			"1\nfunction romanNumerals(arg) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8dDWzSehDjwE9TcHQ"
	},
	{
		"title": "ASCII Charts (Part 2: Bar Chart)",
		"description": "<p><span>Given an object containing quarterly sales values for a year, return a string representing a </span><em><span>bar chart</span></em><span> of the sales by quarter.</span></p><ul><li><span>Quarter names (Q1, Q2, Q3, Q4) should appear on the left.</span></li><li><span>Quarters should be sorted in descending order by value.</span></li><li><span>Quarters with the same value should be shown in their yearly order (Q1 -&gt; Q4).</span></li><li><span>Bars should begin with a \"|\".</span></li><li><span>Repeat the character \"#\" to fill the bar, with each character having a value of 50.</span></li><li><span>A single space comes after the bar, then the sales for that quarter.</span></li><li><span>If the value is 0, there should be no space after \"|\".</span></li><li><span>Use the newline character (\"\\n\") to separate each bar in the chart.</span></li></ul><h3><span>Example #1</span></h3><pre><code>barChart({Q4: 250, Q1: 300, Q2: 150, Q3: 0})\n➞ \"Q1|###### 300\\nQ4|##### 250\\nQ2|### 150\\nQ3|0\"</code></pre><p><span>When printed:</span></p><pre><code>Q1|###### 300\nQ4|##### 250\nQ2|### 150\nQ3|0</code></pre><h3><span>Example #2</span></h3><pre><code>barChart({Q4: 500, Q3: 100, Q2: 100, Q1: 150})\n➞ \"Q4|########## 500\\nQ1|### 150\\nQ2|## 100\\nQ3|## 100\"</code></pre><p><span>When printed:</span></p><pre><code>Q4|########## 500\nQ1|### 150\nQ2|## 100\nQ3|## 100</code></pre><h3><span>Notes</span></h3><p><span>There should be no additional whitespace after each value.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertEquals(barChart({Q4: 0, Q3: 100, Q2: 0, Q1: 600}), \"Q1|############ 600\\nQ3|## 100\\nQ2|0\\nQ4|0\")",
			"Test.assertEquals(barChart({Q4: 300, Q3: 150, Q2: 350, Q1: 250}), \"Q2|####### 350\\nQ4|###### 300\\nQ1|##### 250\\nQ3|### 150\")",
			"Test.assertEquals(barChart({Q4: 350, Q3: 400, Q2: 400, Q1: 50}), \"Q2|######## 400\\nQ3|######## 400\\nQ4|####### 350\\nQ1|# 50\")",
			"Test.assertEquals(barChart({Q4: 200, Q1: 500, Q2: 300, Q3: 300}), \"Q1|########## 500\\nQ2|###### 300\\nQ3|###### 300\\nQ4|#### 200\")",
			"Test.assertEquals(barChart({Q4: 300, Q3: 250, Q2: 600, Q1: 350}), \"Q2|############ 600\\nQ1|####### 350\\nQ4|###### 300\\nQ3|##### 250\")",
			"Test.assertEquals(barChart({Q4: 150, Q1: 550, Q2: 50, Q3: 600}), \"Q3|############ 600\\nQ1|########### 550\\nQ4|### 150\\nQ2|# 50\")",
			"Test.assertEquals(barChart({Q4: 450, Q3: 0, Q2: 50, Q1: 200}), \"Q4|######### 450\\nQ1|#### 200\\nQ2|# 50\\nQ3|0\")",
			"Test.assertEquals(barChart({Q4: 150, Q3: 0, Q2: 0, Q1: 450}), \"Q1|######### 450\\nQ4|### 150\\nQ2|0\\nQ3|0\")",
			"Test.assertEquals(barChart({Q4: 0, Q1: 600, Q2: 250, Q3: 400}), \"Q1|############ 600\\nQ3|######## 400\\nQ2|##### 250\\nQ4|0\")",
			"Test.assertEquals(barChart({Q4: 100, Q1: 150, Q2: 450, Q3: 0}), \"Q2|######### 450\\nQ1|### 150\\nQ4|## 100\\nQ3|0\")",
			"Test.assertEquals(barChart({Q4: 150, Q1: 400, Q2: 100, Q3: 0}), \"Q1|######## 400\\nQ4|### 150\\nQ2|## 100\\nQ3|0\")",
			"Test.assertEquals(barChart({Q4: 550, Q1: 600, Q2: 200, Q3: 50}), \"Q1|############ 600\\nQ4|########### 550\\nQ2|#### 200\\nQ3|# 50\")",
			"Test.assertEquals(barChart({Q4: 250, Q3: 200, Q2: 500, Q1: 550}), \"Q1|########### 550\\nQ2|########## 500\\nQ4|##### 250\\nQ3|#### 200\")",
			"Test.assertEquals(barChart({Q4: 450, Q3: 50, Q2: 500, Q1: 0}), \"Q2|########## 500\\nQ4|######### 450\\nQ3|# 50\\nQ1|0\")",
			"Test.assertEquals(barChart({Q4: 250, Q3: 400, Q2: 150, Q1: 500}), \"Q1|########## 500\\nQ3|######## 400\\nQ4|##### 250\\nQ2|### 150\")",
			"Test.assertEquals(barChart({Q4: 400, Q3: 600, Q2: 350, Q1: 600}), \"Q1|############ 600\\nQ3|############ 600\\nQ4|######## 400\\nQ2|####### 350\")",
			"Test.assertEquals(barChart({Q4: 50, Q1: 100, Q2: 150, Q3: 50}), \"Q2|### 150\\nQ1|## 100\\nQ3|# 50\\nQ4|# 50\")",
			"Test.assertEquals(barChart({Q4: 50, Q1: 100, Q2: 100, Q3: 300}), \"Q3|###### 300\\nQ1|## 100\\nQ2|## 100\\nQ4|# 50\")",
			"Test.assertEquals(barChart({Q4: 350, Q3: 50, Q2: 600, Q1: 300}), \"Q2|############ 600\\nQ4|####### 350\\nQ1|###### 300\\nQ3|# 50\")",
			"Test.assertEquals(barChart({Q4: 100, Q1: 500, Q2: 50, Q3: 200}), \"Q1|########## 500\\nQ3|#### 200\\nQ4|## 100\\nQ2|# 50\")"
		],
		"starterFn": [
			"1\nfunction barChart(results) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hR9WCCaSW2pZqoWhT"
	},
	{
		"title": "Football Tournament Scores",
		"description": "<p><span>Four football teams face each other in a tournament and you must determine the final classification. Depending on the match result, a team gets a certain amount of points:</span></p><ul><li><span>A win is worth </span><strong><span>3</span></strong><span> points.</span></li><li><span>A draw is worth </span><strong><span>1</span></strong><span> point.</span></li><li><span>A defeat is worth </span><strong><span>0</span></strong><span> points.</span></li></ul><p><span>Each team faces another once, for a total of six played games. For each game the result is provided with the following notation:</span></p><pre><code>\"Team X - X Team\"</code></pre><p><span>(</span><em><span>with X being the number of goals scored by both teams</span></em><span>)</span></p><pre><code>\"A 0 - 1 B\" ➞ B wins and gets 3 points, A lose and gets 0 points\n\"C 2 - 2 D\" ➞ It's a draw, both C and D get 1 point</code></pre><p><span>At the end of the tournament, points are counted for each team. If two or more teams have the same number of points, two further criteria are applied to determine who gets the best placement, in the order:</span></p><ul><li><span>The greater number of goals scored.</span></li><li><span>The greater goals difference (goals scored minus goals conceded).</span></li></ul><p><span>Given an array </span><code>arr</code><span> containing strings with the results of the six played games, you have to implement a function that returns an array containing four arrays, one for each team, in the following notation:</span></p><pre><code>[Team, PT, GS, GD]</code></pre><ul><li><code>Team</code><span>: A string, name of the team.</span></li><li><code>PT</code><span>: An integer, points obtained.</span></li><li><code>GS</code><span>: An integer, the sum of scored goals.</span></li><li><code>GD</code><span>: An integer, scored goals minus conceded goals (can be negative).</span></li></ul><p><span>The main array containing the teams' info must be ordered in such a way as to present the correct placement of each team as if it were a summary of the final classification and performance.</span></p><h3><span>Examples</span></h3><pre><code>tournamentScores([\"A 0 - 1 B\", \"C 2 - 0 D\", \"B 2 - 2 C\", \"D 3 - 1 A\", \"A 2 - 2 C\", \"B 2 - 0 D\"]) ➞ [ [ \"B\", 7, 5, 3 ], [ \"C\", 5, 6, 2 ], [ \"D\", 3, 3, -2 ], [ \"A\", 1, 3, -3 ] ]\n// Final order is B, C, D, A. All teams have different points, so that a simple descendant sort by points obtained is enough.\n\ntournamentScores([[\"A 4 - 0 B\", \"C 2 - 1 D\", \"B 1 - 0 C\", \"D 3 - 2 A\", \"A 1 - 3 C\", \"B 2 - 1 D\"]) ➞ [ [ \"C\", 6, 5, 2 ], [ \"B\", 6, 3, -2 ], [ \"A\", 3, 7, 1 ], [ \"D\", 3, 5, -1 ] ]\n// Final order is C, B, A, D (C and B have same points, but C has more scored goals than B; A and D have same points but A has more scored goals than D).\n\ntournamentScores([[\"A 2 - 1 B\", \"C 3 - 0 D\", \"B 1 - 1 C\", \"D 1 - 0 A\", \"A 3 - 0 C\", \"B 2 - 4 D\"]) ➞ [ \"A\", 6, 5, 3 ], [ \"D\", 6, 5, 0 ], [ \"C\", 4, 4, 0 ], [ \"B\", 1, 4, -3 ]]\n// Final order is A, D, C, B (A and D have same points and same number of scored goals, but A has a greater goals difference than D).</code></pre><h3><span>Notes</span></h3><ul><li><span>For the exercise scope, every given case is working with the given set of instructions, despite in real life football when teams share points, scored goals and goal difference, other criteria are used to determine the placement (sometimes even a coin toss!).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"formatting",
			"objects",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(tournamentScores([\"A 0 - 1 B\", \"C 2 - 0 D\", \"B 2 - 2 C\", \"D 3 - 1 A\", \"A 2 - 2 C\", \"B 2 - 0 D\"]), [[\"B\", 7, 5, 3], [\"C\", 5, 6, 2], [\"D\", 3, 3, -2], [\"A\", 1, 3, -3]], \"Example #1\");",
			"Test.assertSimilar(tournamentScores([\"A 0 - 0 B\", \"C 3 - 5 D\", \"B 1 - 0 C\", \"D 1 - 1 A\", \"A 2 - 2 C\", \"B 1 - 0 D\"]), [[\"B\", 7, 2, 2], [\"D\", 4, 6, 1], [\"A\", 3, 3, 0], [\"C\", 1, 5, -3]]);",
			"Test.assertSimilar(tournamentScores([\"A 4 - 0 B\", \"C 2 - 1 D\", \"B 1 - 0 C\", \"D 3 - 2 A\", \"A 1 - 3 C\", \"B 2 - 1 D\"]), [[\"C\", 6, 5, 2], [\"B\", 6, 3, -2], [\"A\", 3, 7, 1], [\"D\", 3, 5, -1]], \"Example #2\");",
			"Test.assertSimilar(tournamentScores([\"A 3 - 3 B\", \"C 0 - 6 D\", \"B 4 - 2 C\", \"D 0 - 1 A\", \"A 1 - 2 C\", \"B 2 - 1 D\"]), [[\"B\", 7, 9, 3], [\"A\", 4, 5, 0], [\"D\", 3, 7, 4], [\"C\", 3, 4, -7]]);",
			"Test.assertSimilar(tournamentScores([\"A 2 - 1 B\", \"C 3 - 0 D\", \"B 1 - 1 C\", \"D 1 - 0 A\", \"A 3 - 0 C\", \"B 2 - 4 D\"]), [[\"A\", 6, 5, 3], [\"D\", 6, 5, 0], [\"C\", 4, 4, 0], [\"B\", 1, 4, -3]], \"Example #3\");",
			"Test.assertSimilar(tournamentScores([\"A 0 - 1 B\", \"C 2 - 0 D\", \"B 0 - 0 C\", \"D 0 - 1 A\", \"A 0 - 2 C\", \"B 3 - 1 D\"]), [[\"C\", 7, 4, 4], [\"B\", 7, 4, 3], [\"A\", 3, 1, -2], [\"D\", 0, 1, -5]]);"
		],
		"starterFn": [
			"1\nfunction tournamentScores(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JunxyznafDQA8Yr38"
	},
	{
		"title": "Game of Thrones: Character Titles",
		"description": "<p><span>Write a function that takes a string and returns a string with the correct case for character titles in the Game of Thrones series.</span></p><ul><li><span>The words </span><code>and</code><span>, </span><code>the</code><span>, </span><code>of</code><span> and </span><code>in</code><span> should be lowercase.</span></li><li><span>All other words should have the </span><em><span>first</span></em><span> character as uppercase and the rest lowercase.</span></li></ul><h3><span>Examples</span></h3><pre><code>correctTitle(\"jOn SnoW, kINg IN thE noRth.\")\n➞ \"Jon Snow, King in the North.\"\n\ncorrectTitle(\"sansa stark, lady of winterfell.\")\n➞ \"Sansa Stark, Lady of Winterfell.\"\n\ncorrectTitle(\"TYRION LANNISTER, HAND OF THE QUEEN.\")\n➞ \"Tyrion Lannister, Hand of the Queen.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Punctuation and spaces must remain in their original positions.</span></li><li><span>Hyphenated words are considered </span><em><span>separate</span></em><span> words.</span></li><li><span>Be careful with words that contain </span><code>and</code><span>, </span><code>the</code><span>, </span><code>of</code><span> or </span><code>in</code><span>.</span></li><li><span>See the </span><strong><span>Resources</span></strong><span> tab for more info on the various JavaScript string methods.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(correctTitle(\"sansa stark, lady of winterfell.\"), \"Sansa Stark, Lady of Winterfell.\")",
			"Test.assertEquals(correctTitle(\"lord eddard stark, hand of the king.\"), \"Lord Eddard Stark, Hand of the King.\")",
			"Test.assertEquals(correctTitle(\"jaime lannister, lord commander of the kingsguard.\"), \"Jaime Lannister, Lord Commander of the Kingsguard.\")",
			"Test.assertEquals(correctTitle(\"varys, master of whisperers.\"), \"Varys, Master of Whisperers.\")",
			"Test.assertEquals(correctTitle(\"doran martell, prince of dorne, lord of sunspear.\"), \"Doran Martell, Prince of Dorne, Lord of Sunspear.\")",
			"Test.assertEquals(correctTitle(\"TYRION LANNISTER, HAND OF THE QUEEN.\"), \"Tyrion Lannister, Hand of the Queen.\")",
			"Test.assertEquals(correctTitle(\"GRAND MAESTER PYCELLE.\"), \"Grand Maester Pycelle.\")",
			"Test.assertEquals(correctTitle(\"EURON GREYJOY, KING OF THE IRON ISLANDS, LORD REAPER OF PYKE.\"), \"Euron Greyjoy, King of the Iron Islands, Lord Reaper of Pyke.\")",
			"Test.assertEquals(correctTitle(\"PETYR BAELISH, LORD PROTECTOR OF THE VALE.\"), \"Petyr Baelish, Lord Protector of the Vale.\")",
			"Test.assertEquals(correctTitle(\"MANCE RAYDER, KING-BEYOND-THE-WALL.\"), \"Mance Rayder, King-Beyond-the-Wall.\")",
			"Test.assertEquals(correctTitle(\"jOn SnoW, kINg IN thE noRth.\"), \"Jon Snow, King in the North.\")",
			"Test.assertEquals(correctTitle(\"Jeor MORMONT, Lord COMMANDER of the NIGHT'S WATCH.\"), \"Jeor Mormont, Lord Commander of the Night's Watch.\")",
			"Test.assertEquals(correctTitle(\"cERSei LANnIStEr, QuEEn Of the aNdals and THE fIRSt men, PROtecTOR OF tHe SEVEN KInGdOmS.\"), \"Cersei Lannister, Queen of the Andals and the First Men, Protector of the Seven Kingdoms.\")",
			"Test.assertEquals(correctTitle(\"DAeneRYS StOrmboRn oF hOuse TARGARYEn, ThE FirsT OF HER naMe, QUeEn OF The ANdAlS And THe FirsT mEN, PROtECtOr Of tHE SEven KinGDOmS, The MoTHeR of DrAGONS, thE KhALeEsi oF THE GReAt gRAss sEa, The UnburNT, The BReakEr of cHAInS.\"), \"Daenerys Stormborn of House Targaryen, the First of Her Name, Queen of the Andals and the First Men, Protector of the Seven Kingdoms, the Mother of Dragons, the Khaleesi of the Great Grass Sea, the Unburnt, the Breaker of Chains.\")"
		],
		"starterFn": [
			"1\nfunction correctTitle(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QudLBG2RvfePRMzDn"
	},
	{
		"title": "Track the Robot (Part 3)",
		"description": "<p><span>A robot moves around a 2D grid. At the start, it is at </span><code>[0, 0]</code><span>, facing east. It is controlled by a sequence of instructions:</span></p><ul><li><code>.</code><span> means take one step forwards in the current direction.</span></li><li><code>&lt;</code><span> means turn 90 degrees anticlockwise.</span></li><li><code>&gt;</code><span> means turn 90 degrees clockwise.</span></li></ul><p><span>Your job is to process the instructions and return the final position of the robot.</span></p><h3><span>Example</span></h3><p><span>For example, if the robot is given the sequence of instructions </span><code>..&lt;.&lt;.</code><span>, then:</span></p><ul><li><span>Step 1: </span><code>.</code><span> It still faces east, and is at </span><code>[1, 0]</code><span>.</span></li><li><span>Step 2: </span><code>.</code><span> It still faces east, and is at </span><code>[2, 0]</code><span>.</span></li><li><span>Step 3: </span><code>&lt;</code><span> It now faces north, and is still at  </span><code>[2, 0]</code><span>.</span></li><li><span>Step 4: </span><code>.</code><span> It still faces north, and is at </span><code>[2, 1]</code><span>.</span></li><li><span>Step 5: </span><code>&lt;</code><span> It now faces west, and is still at </span><code>[2, 1]</code><span>.</span></li><li><span>Step 6: </span><code>.</code><span> It still faces west, and is now at </span><code>[1, 1]</code><span>.</span></li></ul><p><span>So, </span><code>trackRobot(\"..&lt;.&lt;.\")</code><span> returns </span><code>[1, 1]</code><span>.</span></p><h3><span>Notes</span></h3><ul><li><span>The instruction strings will only contain the three valid characters </span><code>.</code><span>, </span><code>&lt;</code><span> or </span><code>&gt;</code><span>.</span></li><li><span>You will always be passed a string (but the string might be empty).</span></li></ul>",
		"publishedBy": "Jon Ingram",
		"publishedByUrl": "https://edabit.com/user/rTRvHndHZKKRkb9w5",
		"language": "JavaScript",
		"tags": [
			"loops"
		],
		"tests": [
			"Test.assertSimilar(trackRobot(\"..<.<.\"),[ 1, 1 ],\"Example\")",
			"Test.assertSimilar(trackRobot(\".\".repeat(100)),[100,0])",
			"Test.assertSimilar(trackRobot(\"<>>>><><<<><>>>><><<<><>>><>\"),[ 0, 0 ])",
			"Test.assertSimilar(trackRobot(\".<..<...<....<.....<......\"),[ 3, 4 ])",
			"Test.assertSimilar(trackRobot(\">>..\"),[ -2, 0 ])",
			"Test.assertSimilar(trackRobot(\"..<<..>>..<<..>>..\"),[ 2, 0 ])",
			"Test.assertSimilar(trackRobot(\".>\".repeat(5000)),[ 0, 0 ])"
		],
		"starterFn": [
			"1\nfunction trackRobot(steps) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/WRB33HsHBFDEfx4EA"
	},
	{
		"title": "88 Piano Keys",
		"description": "<p><span>Create a function that takes a number (key) as an argument and returns an array containing 4 strings:</span></p><ul><li><span>The name of the key (the note).</span></li><li><span>The color of the key (Black or White).</span></li><li><span>The octave the note is in.</span></li><li><span>The corresponding frequency of the note.</span></li></ul><p><span>You can look at the Wikipedia page (check the </span><strong><span>Resources</span></strong><span> tab) to find out what the index is for the piano keys, where the octave numbers are and most importantly, how to calculate the frequency of the note, round the frequency to the nearest hundreth. Ignore the shaded parts of the piano (on the Wikipedia page).</span></p><h3><span>Examples</span></h3><pre><code>pianoKeys(1) ➞ [\"A\", \"0\", \"White\", \"27.50\"]\n\npianoKeys(60) ➞ [\"G♯/A♭\", \"5\", \"Black\", \"830.61\"]\n\npianoKeys(0) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>There are 88 keys, 1 - 88, so there is no 0th key or anything above 88.</span></li><li><span>Try not to put the frequencies in a giant array but to calculate them.</span></li><li><span>Calculate the frequencies from </span><code>A</code><span> notes, they are rounded by nature (e.g. 440 Hz).</span></li><li><span>If the key isn't in the range 1 - 88, return </span><code>false</code><span>.</span></li><li><strong><span>Tip:</span></strong><span> White keys don't have sharps ♯ or flats ♭ in their note name.</span></li><li><strong><span>Tip:</span></strong><span> Copy &amp; paste the note names from Wikipedia, then you have the right ♯ and ♭ 's.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(pianoKeys(1), ['A', '0', 'White', '27.50'])",
			"Test.assertSimilar(pianoKeys(15), ['B', '1', 'White', '61.74'])",
			"Test.assertSimilar(pianoKeys(0), false)",
			"Test.assertSimilar(pianoKeys(17), ['C♯/D♭', '2', 'Black', '69.30'])",
			"Test.assertSimilar(pianoKeys(88), ['C', '8', 'White', '4186.01'])",
			"Test.assertSimilar(pianoKeys(100), false)",
			"Test.assertSimilar(pianoKeys(60), ['G♯/A♭', '5', 'Black', '830.61'])",
			"Test.assertSimilar(pianoKeys(4), ['C', '1', 'White', '32.70'])",
			"Test.assertSimilar(pianoKeys(71), ['G', '6', 'White', '1567.98'])",
			"Test.assertSimilar(pianoKeys(16), ['C', '2', 'White', '65.41'])",
			"Test.assertSimilar(pianoKeys(29), ['C♯/D♭', '3', 'Black', '138.59'])"
		],
		"starterFn": [
			"1\nfunction pianoKeys(key) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sh67Jcu2yy35JXWNW"
	},
	{
		"title": "Fraction to Mixed Number",
		"description": "<p><span>Create a function that takes a string representing a fraction, and return a string representing that input as a mixed number.</span></p><ul><li><span>Mixed numbers are of the form </span><code>1 2/3</code><span> — note the space between the whole number portion and the fraction portion.</span></li><li><span>Resulting fractions should be fully reduced (see example #2).</span></li><li><span>If a result is a whole number with no fractional remainder, return only the whole number portion (see example #3).</span></li><li><span>If a result is only fractional with no whole number, return only the fractional portion (see example #4).</span></li><li><span>If a result is negative, the whole number should carry the negative sign. If the result would not have a whole number portion, the numerator of the fractional portion should carry the negative sign (see examples #5 - #7).</span></li></ul><h3><span>Examples</span></h3><pre><code>mixedNumber(\"5/4\") ➞ \"1 1/4\"\n\nmixedNumber(\"6/4\") ➞ \"1 1/2\"\n\nmixedNumber(\"8/4\") ➞ \"2\"\n\nmixedNumber(\"4/6\") ➞ \"2/3\"\n\nmixedNumber(\"-1/4\") ➞ \"-1/4\"\n\nmixedNumber(\"-5/4\") ➞ \"-1 1/4\"\n\nmixedNumber(\"-8/4\") ➞ \"-2\"</code></pre><h3><span>Notes</span></h3><p><span>All provided inputs will be formatted similarly, negative numbers will be provided in the numerator portion only, and all inputs will contain no spaces, invalid characters, or zero denominators.</span></p>",
		"publishedBy": "mbbentley",
		"publishedByUrl": "https://edabit.com/user/n5wubRfh6zh8QRymN",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(mixedNumber(\"5/4\"), \"1 1/4\")",
			"Test.assertEquals(mixedNumber(\"6/4\"), \"1 1/2\")",
			"Test.assertEquals(mixedNumber(\"8/4\"), \"2\")",
			"Test.assertEquals(mixedNumber(\"4/6\"), \"2/3\")",
			"Test.assertEquals(mixedNumber(\"-1/4\"), \"-1/4\")",
			"Test.assertEquals(mixedNumber(\"-5/4\"), \"-1 1/4\")",
			"Test.assertEquals(mixedNumber(\"-8/4\"), \"-2\")",
			"Test.assertEquals(mixedNumber(\"0/32768\"), \"0\")",
			"Test.assertEquals(mixedNumber(\"73/5\"), \"14 3/5\")",
			"Test.assertEquals(mixedNumber(\"3855/889785\"), \"257/59319\")",
			"Test.assertEquals(mixedNumber(\"82346/197\"), \"418\")",
			"Test.assertEquals(mixedNumber(\"-2037450/204\"), \"-9987 1/2\")"
		],
		"starterFn": [
			"1\nfunction mixedNumber(frac) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PvDfScDCnsY8qYvTq"
	},
	{
		"title": "Matryoshka Dolls",
		"description": "<p><span>Matryoshka dolls are traditionally wooden dolls that can be nested by fitting smaller dolls into larger ones. Suppose arrays can be nested similarly, placing </span><strong><span>smaller arrays</span></strong><span> into </span><strong><span>larger ones</span></strong><span>, in the following sense:</span></p><p><code>Array A</code><span> can be nested inside </span><code>Array B</code><span> if:</span></p><ol><li><code>min(array A)</code><span> &gt; </span><code>min(array B)</code></li><li><code>max(array A)</code><span> &lt; </span><code>max(array B)</code></li></ol><p><span>For example, if </span><code>A = [2, 3, 9, 5]</code><span> and </span><code>B = [10, 2, 1]</code><span>, then </span><code>A</code><span> can be nested inside </span><code>B</code><span>, since:</span></p><ul><li><code>min(A) = 2 &gt; 1 = min(B)</code><span> and</span></li><li><code>max(A) = 9 &lt; 10 = max(B)</code></li></ul><p><span>Create a function that returns </span><code>true</code><span> if every single sub-array inside an array can be nested Matroyshka style, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>matryoshka([[2, 2, 7], [3, 4, 5, 6], [4, 5]]) ➞ true\n// [4, 5] nested inside [3, 4, 5, 6], [3, 4, 5, 6] nested inside [2, 2, 7], etc.\n// Dolls nested from largest to smallest.\n\nmatryoshka([[4, 5], [6, 3], [7, 6, 5, 4, 3, 2], [8, 1]]) ➞ true\n// Dolls nested from smallest to largest.\n\nmatryoshka([[7, 1], [7, 6, 5, 4, 3, 2], [6, 3], [4, 5]]) ➞ false\n// [7, 1] and [7, 6, 5, 4, 3, 2] share the same max.\n// Second doll cannot be nested properly inside first doll.\n\nmatryoshka([[1, 5], [2, 6], [3, 7]]) ➞ false\n// Elements are overlapping, cannot be nested.</code></pre><h3><span>Notes</span></h3><ul><li><span>Subarrays can be nested from smallest to largest or largest to smallest.</span></li><li><span>Elements must be strictly nested - e.g. no two arrays can share either the same MAX or the same MIN (see example #3).</span></li><li><span>Subarrays may not necessarily have unique elements (see example #1).</span></li><li><span>Subarrays can be in any order (see example #2).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"sorting",
			"validation"
		],
		"tests": [
			"Test.assertEquals(matryoshka([[1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6], [4, 5]]), true)",
			"Test.assertEquals(matryoshka([[4, 5], [2, 6], [1, 9], [-5, 10, 11]]), true)",
			"Test.assertEquals(matryoshka([[3, 3], [4, 4], [5, 5, 5]]), false)",
			"Test.assertEquals(matryoshka([[1, 1, 1, 1, 2], [3, 2, 5, 0], [-1, 500]]), true)",
			"Test.assertEquals(matryoshka([[1, 8], [2, 3, 4, 5, 6, 7], [3, 6], [4, 5]]), true)",
			"Test.assertEquals(matryoshka([[6, 2], [9, 4]]), false, 'cannot be overlapping')",
			"Test.assertEquals(matryoshka([[7, 1], [7, 6, 5, 4, 3, 2], [6, 3], [4, 5]]), false, 'must be strictly nested')",
			"Test.assertEquals(matryoshka([[1, 5], [2, 6], [3, 7]]), false)",
			"Test.assertEquals(matryoshka([[5, 1], [4, 2], [4, 2]]), false, 'must be strictly nested')",
			"Test.assertEquals(matryoshka([[5, 1], [4, 2], [3, 3]]), true)",
			"Test.assertEquals(matryoshka([[5, 1], [4, 2], [3, 3, 3, 3, 3, 3, 3]]), true)",
			"Test.assertEquals(matryoshka([[1, 2, 3, 4], [2, 3, 4]]), false, 'must be strictly nested')",
			"Test.assertEquals(matryoshka([[1, 2, 3, 4], [2, 3]]), true)",
			"Test.assertEquals(matryoshka([[1, 50, 100], [3, 25, 75], [10, 40, 50], [25, 45]]), true)",
			"Test.assertEquals(matryoshka([[1, 50, 100], [3, 25, 75], [10, 40, 50], [25, 55]]), false, 'cannot be overlapping')"
		],
		"starterFn": [
			"1\nfunction matryoshka(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GSJ5RYWDQBiKnfpWP"
	},
	{
		"title": "Same Letter Patterns",
		"description": "<p><span>Create a function that returns </span><code>true</code><span> if two strings share the same letter pattern, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>sameLetterPattern(\"ABAB\", \"CDCD\") ➞ true\n\nsameLetterPattern(\"ABCBA\", \"BCDCB\") ➞ true\n\nsameLetterPattern(\"FFGG\", \"CDCD\") ➞ false\n\nsameLetterPattern(\"FFFF\", \"ABCD\") ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sameLetterPattern('ABAB', 'CDCD'), true)",
			"Test.assertEquals(sameLetterPattern('AAABBB', 'CCCDDD'), true)",
			"Test.assertEquals(sameLetterPattern('ABCBA', 'BCDCB'), true)",
			"Test.assertEquals(sameLetterPattern('AAAA', 'BBBB'), true)",
			"Test.assertEquals(sameLetterPattern('BAAB', 'ABBA'), true)",
			"Test.assertEquals(sameLetterPattern('BAAB', 'QZZQ'), true)",
			"Test.assertEquals(sameLetterPattern('TTZZVV', 'PPSSBB'), true)",
			"Test.assertEquals(sameLetterPattern('ZYX', 'ABC'), true)",
			"Test.assertEquals(sameLetterPattern('AABAA', 'SSCSS'), true)",
			"Test.assertEquals(sameLetterPattern('AABAABAA', 'SSCSSCSS'), true)",
			"Test.assertEquals(sameLetterPattern('UBUBUBUB', 'WEWEWEWE'), true)",
			"Test.assertEquals(sameLetterPattern('FFGG', 'FFG'), false)",
			"Test.assertEquals(sameLetterPattern('FFGG', 'CDCD'), false)",
			"Test.assertEquals(sameLetterPattern('FFFG', 'GGHI'), false)",
			"Test.assertEquals(sameLetterPattern('FFFF', 'ABCD'), false)",
			"Test.assertEquals(sameLetterPattern('ABCA', 'ABCD'), false)",
			"Test.assertEquals(sameLetterPattern('ABCAAA', 'DDABCD'), false)"
		],
		"starterFn": [
			"1\nfunction sameLetterPattern(str1, str2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6NJrx5nPBX6uRS4qJ"
	},
	{
		"title": "Simplified Josephus",
		"description": "<p><span>Given </span><code>n</code><span> people find the survivor, starting from the first person he kills the person to the left and the next surviving person kills the person to his left, this keeps happening until 1 person survives return that person's number.</span></p><h3><span>Examples</span></h3><pre><code>josephus(1) ➞ 1\n\njosephus(8) ➞ 1\n\njosephus(41) ➞ 19</code></pre><h3><span>Notes</span></h3><p><span>You can search up the problem if you are too confused about the instructions.</span></p>",
		"publishedBy": "11level360",
		"publishedByUrl": "https://edabit.com/user/HcriFrFbmYgsMwtBg",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(josephus(1), 1)",
			"Test.assertEquals(josephus(41), 19)",
			"Test.assertEquals(josephus(8), 1)",
			"Test.assertEquals(josephus(5), 3)",
			"Test.assertEquals(josephus(7), 7)"
		],
		"starterFn": [
			"1\nfunction josephus(people) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/6TNRMTDDqdmnLeWMZ"
	},
	{
		"title": "The Resistor Colors",
		"description": "<p><span>A resistor is a common electrical component found in every electronic circuit. Usually a resistor has a color-based code (as painted bands over it) to decipher through a table.</span></p><table><thead><tr><th><span>Color</span></th><th><span>Digits</span></th><th><span>Magnitude</span></th><th><span>Tolerance</span></th><th><span>T.C.R.</span></th></tr></thead><tbody><tr><td><span>Black</span></td><td><span>0</span></td><td><span>0</span></td><td><span>-</span></td><td><span>-</span></td></tr><tr><td><span>Brown</span></td><td><span>1</span></td><td><span>1</span></td><td><span>±1%</span></td><td><span>100ppm/k</span></td></tr><tr><td><span>Red</span></td><td><span>2</span></td><td><span>2</span></td><td><span>±2%</span></td><td><span>50ppm/k</span></td></tr><tr><td><span>Orange</span></td><td><span>3</span></td><td><span>3</span></td><td><span>-</span></td><td><span>15ppm/k</span></td></tr><tr><td><span>Yellow</span></td><td><span>4</span></td><td><span>4</span></td><td><span>-</span></td><td><span>25ppm/k</span></td></tr><tr><td><span>Green</span></td><td><span>5</span></td><td><span>5</span></td><td><span>±0.5%</span></td><td><span>-</span></td></tr><tr><td><span>Blue</span></td><td><span>6</span></td><td><span>6</span></td><td><span>±0.25%</span></td><td><span>10ppm/k</span></td></tr><tr><td><span>Violet</span></td><td><span>7</span></td><td><span>7</span></td><td><span>±0.1%</span></td><td><span>5ppm/k</span></td></tr><tr><td><span>Gray</span></td><td><span>8</span></td><td><span>8</span></td><td><span>±0.05%</span></td><td><span>-</span></td></tr><tr><td><span>White</span></td><td><span>9</span></td><td><span>9</span></td><td><span>-</span></td><td><span>-</span></td></tr><tr><td><span>Gold</span></td><td><span>-</span></td><td><span>-1</span></td><td><span>±5%</span></td><td><span>-</span></td></tr><tr><td><span>Silver</span></td><td><span>-</span></td><td><span>-2</span></td><td><span>±10%</span></td><td><span>-</span></td></tr></tbody></table><p><span>Starting from the left assign a number to each coloured band:</span></p><ul><li><strong><span>4 bands resistor:</span></strong><ul><li><span>1st and 2nd color: digits from column 1.</span></li><li><span>3rd color: 10 elevated to the digit of column 2.</span></li><li><span>4th color: tolerance from column 3.</span></li></ul></li><li><strong><span>5 bands resistor:</span></strong><ul><li><span>1st, 2nd and 3rd color: digits from column 1.</span></li><li><span>4th color: 10 elevated to the digit of column 2.</span></li><li><span>5th color: tolerance from column 3.</span></li></ul></li><li><strong><span>6 bands resistor:</span></strong><ul><li><span>From 1st to 5th: as above.</span></li><li><span>6th color: coefficient from column 4.</span></li></ul></li></ul><p><span>Then, when numbers have replaced colors:</span></p><ul><li><strong><span>Resistance</span></strong><span> is equal to the number resulting by the union of digits from column 1 multiplied for the magnitude calculated from column 2: is measured in Ohms (symbol: </span><strong><span>Ω</span></strong><span>). When Ohms are in the thousands order the notation is </span><strong><span>kΩ</span></strong><span> (</span><em><span>kiloOhms</span></em><span>), in the millions order the notation is </span><strong><span>MΩ</span></strong><span> (</span><em><span>MegaOhms</span></em><span>), in the billions order the notation is </span><strong><span>GΩ</span></strong><span> (</span><em><span>GigaOhms</span></em><span>).</span></li><li><strong><span>Tolerance</span></strong><span> and </span><strong><span>TCR</span></strong><span> (temperature coefficient of resistance, only for 6-banded resistors) are the results of columns 3 and 4.</span></li></ul><p><span>Given an array of colors you must return the resistor resistance, tolerance and (eventually) the TCR as a string (with identifiers separated by spaces between them).</span></p><h3><span>Examples</span></h3><pre><code>resistorCode([\"red\", \"yellow\", \"blue\", \"green\"]) ➞ \"24MΩ ±0.5%\"\n// red + yellow = 24; blue = 10^6, green = ±0.5%\n// resistance * magnitude = 24000000 (24M)\n\nresistorCode([\"white\", \"black\", \"white\", \"blue\", \"gold\"]) ➞ \"909MΩ ±5%\"\n// white + black + white = 909\n\nresistorCode([\"black\", \"white\", \"black\", \"orange\", \"red\", \"yellow\"]) ➞ \"90kΩ ±2% 25ppm/k\"\n// black + white + black = 090 = 90; orange = 10^3\n// resistance * magnitude = 90000 (90k)</code></pre><h3><span>Notes</span></h3><ul><li><span>For more info about resistors and their color codes check the </span><strong><span>Resources</span></strong><span> tab.</span></li><li><span>All given arrays are valid, no exceptions to handle.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"formatting"
		],
		"tests": [
			"Test.assertEquals(resistorCode([\"red\", \"yellow\", \"blue\", \"green\"]), \"24MΩ ±0.5%\", \"Example #1\")",
			"Test.assertEquals(resistorCode([\"white\", \"black\", \"white\", \"blue\", \"gold\"]), \"909MΩ ±5%\", \"Example #2\")",
			"Test.assertEquals(resistorCode([\"black\", \"white\", \"black\", \"orange\", \"red\", \"yellow\"]), \"90kΩ ±2% 25ppm/k\", \"Example #3\")",
			"Test.assertEquals(resistorCode([\"black\", \"blue\", \"black\", \"brown\"]), \"6Ω ±1%\")",
			"Test.assertEquals(resistorCode([\"orange\", \"yellow\", \"white\", \"gold\", \"gray\"]), \"34.9Ω ±0.05%\")",
			"Test.assertEquals(resistorCode([\"yellow\", \"brown\", \"green\", \"black\", \"green\", \"orange\"]), \"415Ω ±0.5% 15ppm/k\")",
			"Test.assertEquals(resistorCode([\"brown\", \"violet\", \"red\", \"silver\"]), \"1.7kΩ ±10%\")",
			"Test.assertEquals(resistorCode([\"green\", \"gray\", \"black\", \"silver\", \"blue\"]), \"5.8Ω ±0.25%\")",
			"Test.assertEquals(resistorCode([\"white\", \"white\", \"white\", \"white\", \"silver\", \"violet\"]), \"999GΩ ±10% 5ppm/k\")"
		],
		"starterFn": [
			"1\nfunction resistorCode(colors) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/NxDZb5LBQHiH7veSz"
	},
	{
		"title": "Minesweeper Number of Neighbouring Mines",
		"description": "<p><span>Create a function that takes an array representation of a Minesweeper board, and returns another board where the value of each cell is the amount of its neighbouring mines.</span></p><h3><span>Examples</span></h3><p><span>The input may look like this:</span></p><pre><code>[\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 1, 0, 1],\n  [1, 1, 0, 0],\n]</code></pre><p><span>The </span><code>0</code><span> represents an </span><strong><span>empty space</span></strong><span>  .\nThe </span><code>1</code><span> represents a </span><strong><span>mine</span></strong><span>.</span></p><p><span>You will have to replace each </span><strong><span>mine</span></strong><span> with a </span><code>9</code><span> and each </span><strong><span>empty space</span></strong><span> with the number of adjacent mines, the output will look like this:</span></p><pre><code>[\n  [1, 9, 2, 1],\n  [2, 3, 9, 2],\n  [3, 9, 4, 9],\n  [9, 9, 3, 1],\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>Since in the output the numbers </span><code>0-8</code><span> are used to determine the amount of adjacent mines, the number </span><code>9</code><span> will be used to identify the mines instead.</span></li><li><span>A wikipedia page explaining how Minesweeper works is available in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"games",
			"loops"
		],
		"tests": [
			"// Boards",
			"const board0 = [];",
			"const board1 = [",
			"  [1, 1, 1],",
			"  [1, 0, 1],",
			"  [1, 1, 1]",
			"];",
			"const board2 = [",
			"  [0, 0, 0, 1],",
			"  [0, 1, 0, 0],",
			"  [1, 0, 0, 0],",
			"  [0, 0, 1, 0]",
			"];",
			"const board3 = [",
			"  [0, 1, 0, 0],",
			"  [0, 0, 1, 0],",
			"  [0, 1, 0, 1],",
			"  [1, 1, 0, 0],",
			"];",
			"const board4 = [",
			"  [1, 0, 0, 0, 0, 0, 1, 0],",
			"  [1, 0, 1, 0, 1, 0, 0, 0],",
			"  [0, 0, 0, 0, 0, 0, 1, 0],",
			"  [0, 1, 0, 1, 0, 0, 0, 1],",
			"  [0, 0, 0, 1, 0, 1, 1, 0],",
			"  [0, 1, 1, 0, 0, 0, 1, 1],"
		],
		"starterFn": [
			"1\nfunction minesweeperNumbers(board) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Hs9MayvcfE7gHzuLT"
	},
	{
		"title": "Diagonal Matrices",
		"description": "<p><span>Write a function that diagonally orders numbers in a </span><code>n x n</code><span> matrix, depending on which of the four corners you originate from: upper-left (</span><code>ul</code><span>), upper-right (</span><code>ur</code><span>), lower-left (</span><code>ll</code><span>), lower-right (</span><code>lr</code><span>).</span></p><h3><span>Examples</span></h3><pre><code>diagonalize(3, \"ul\") ➞ [\n  [0, 1, 2],\n  [1, 2, 3],\n  [2, 3, 4]\n]\n\ndiagonalize(4, \"ur\") ➞ [\n  [3, 2, 1, 0],\n  [4, 3, 2, 1],\n  [5, 4, 3, 2],\n  [6, 5, 4, 3]\n]\n\ndiagonalize(3, \"ll\") ➞ [\n  [2, 3, 4],\n  [1, 2, 3],\n  [0, 1, 2]\n]\n\ndiagonalize(5, \"lr\") ➞ [\n  [8, 7, 6, 5, 4],\n  [7, 6, 5, 4, 3],\n  [6, 5, 4, 3, 2],\n  [5, 4, 3, 2, 1],\n  [4, 3, 2, 1, 0]\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming"
		],
		"tests": [
			"Test.assertSimilar(diagonalize(3, 'ul'), [",
			"  [0, 1, 2],",
			"  [1, 2, 3],",
			"  [2, 3, 4]",
			"], \"It should work for the upper left corner.\")",
			"​",
			"Test.assertSimilar(diagonalize(4, 'ur'), [",
			"  [3, 2, 1, 0],",
			"  [4, 3, 2, 1],",
			"  [5, 4, 3, 2],",
			"  [6, 5, 4, 3]",
			"], \"It should work for the upper right corner.\")",
			"​",
			"Test.assertSimilar(diagonalize(3, 'll'), [",
			"  [2, 3, 4],",
			"  [1, 2, 3],",
			"  [0, 1, 2]",
			"], \"It should work for the lower left corner.\")",
			"​",
			"Test.assertSimilar(diagonalize(5, 'lr'), [",
			"  [8, 7, 6, 5, 4],",
			"  [7, 6, 5, 4, 3],",
			"  [6, 5, 4, 3, 2],",
			"  [5, 4, 3, 2, 1],",
			"  [4, 3, 2, 1, 0]",
			"], \"It should work for the lower right corner.\")"
		],
		"starterFn": [
			"1\nfunction diagonalize(n, dir) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Lcgmf6CvjXnzFTScc"
	},
	{
		"title": "Is the Array Circular?",
		"description": "<p><span>Write a function that determines if an array is </span><strong><span>circular</span></strong><span>. An array is </span><strong><span>circular</span></strong><span> if </span><strong><span>its subarrays can be reordered such that</span></strong><span> each subarray's last element is equal to the next subarray's first element.</span></p><p><span>For example, the array </span><code>[[1, 1, 1], [9, 2, 3, 4], [4, 1], [1, 2, 5, 7, 9]]</code><span> </span><strong><span>is circular</span></strong><span> because we can re-arrange the elements to create the following array:</span></p><pre><code>[[9, 2, 3, 4], [4, 1], [1, 1, 1], [1, 2, 5, 7, 9]]</code></pre><h3><span>Examples</span></h3><pre><code>isCircular([[9, 8], [6, 9, 1], [8, 4, 2], [1, 9], [2, 1, 6]]) ➞ true\n// Can be reordered: [[9, 8], [8, 4, 2], [2, 1, 6], [6, 9, 1], [1, 9]]\n\nisCircular([[1, 1], [1, 2]]) ➞ false\n\nisCircular([[2, 1], [1, 2]]) ➞ true\n\nisCircular([[2, 1], [1, 2], [2, 1], [1, 3, 1], [1, 4, 4]]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>In a circular re-ordering, the last subarray's last element must be identical to the first subarray's first element.</span></li><li><span>Subarrays will contain at least one element.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(isCircular([[9, 8], [6, 9, 1], [8, 4, 2], [1, 9], [2, 1, 6]]), true)",
			"Test.assertEquals(isCircular([[1, 2, 7], [7, 9, 3], [3], [3, 4], [4, 2, 1]]), true)",
			"Test.assertEquals(isCircular([[1, 2], [2, 3], [3, 4], [4, 5]]), false)",
			"Test.assertEquals(isCircular([[9, 9], [9, 2], [2, 9], [9, 5], [5, 9], [9, 6], [6, 9]]), true)",
			"Test.assertEquals(isCircular([[1, 2], [4, 1], [3, 4], [2, 3]]), true)",
			"Test.assertEquals(isCircular([[1, 1], [1, 2]]), false)",
			"Test.assertEquals(isCircular([[6, 7, 8, 9], [1, 2, 3, 4, 5, 6], [6, 6, 9], [9, 0, 1]]), false)",
			"Test.assertEquals(isCircular([[2, 1], [1, 2]]), true)",
			"Test.assertEquals(isCircular([[2, 1], [1, 2], [2, 1], [1, 3, 1], [1, 4, 4]]), false)"
		],
		"starterFn": [
			"1\nfunction isCircular(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TfL5ffvWoEgsoRhuP"
	},
	{
		"title": "Fix the Right Answer",
		"description": "<p><span>Create a function that takes a string and returns the right answer.</span></p><h3><span>Examples</span></h3><pre><code>postfix(\"2 2 +\") ➞ 4\n\npostfix(\"2 2 /\") ➞ 1\n\npostfix(\"2 3 * 1 - 5 /\") ➞  5.8</code></pre><h3><span>Notes</span></h3><ul><li><span>The operators </span><code>+ - * /</code><span> may be supported.</span></li><li><span>Output always returns an integer.</span></li></ul>",
		"publishedBy": "mdjahid.5533",
		"publishedByUrl": "https://edabit.com/user/r7mZLgpQWzRiGddL5",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(postfix(\"2 2 +\"), 4)",
			"Test.assertEquals(postfix(\"2 2 /\"), 1)",
			"Test.assertEquals(postfix(\"8 4 / 9 * 3 1 * /\"), 54)",
			"Test.assertEquals(postfix(\"5 6 * 2 1 + /\"), 32)",
			"Test.assertEquals(postfix(\"10 10 * 10 /\"), 10)",
			"Test.assertEquals(postfix(\"1 1 + 2 2 + -\"), 2)"
		],
		"starterFn": [
			"1\nfunction postfix(expr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/h7c3CTDzWge6SAzKT"
	},
	{
		"title": "Farey Sequence",
		"description": "<p><span>The Farey sequence of order </span><em><span>n</span></em><span> is the set of all fractions with a denominator between 1 and n, reduced and returned in ascending order. Given </span><em><span>n</span></em><span>, return the Farey sequence as an array, with each fraction being represented by a string in the form \"numerator/denominator\".</span></p><h3><span>Examples</span></h3><pre><code>farey(1) ➞ [\"0/1\", \"1/1\"]\n\nfarey(4) ➞ [\"0/1\", \"1/4\", \"1/3\", \"1/2\", \"2/3\", \"3/4\", \"1/1\"]\n\nfarey(5) ➞ [\"0/1\", \"1/5\", \"1/4\", \"1/3\", \"2/5\", \"1/2\", \"3/5\", \"2/3\", \"3/4\", \"4/5\", \"1/1\"]</code></pre><h3><span>Notes</span></h3><p><span>The Farey sequence will always begin with \"0/1\" and end with \"1/1\".</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"math"
		],
		"tests": [
			"Test.assertSimilar(farey(2), ['0/1', '1/2', '1/1'])",
			"Test.assertSimilar(farey(3), ['0/1', '1/3', '1/2', '2/3', '1/1'])",
			"Test.assertSimilar(farey(4), ['0/1', '1/4', '1/3', '1/2', '2/3', '3/4', '1/1'])",
			"Test.assertSimilar(farey(5), ['0/1', '1/5', '1/4', '1/3', '2/5', '1/2', '3/5', '2/3', '3/4', '4/5', '1/1'])",
			"Test.assertSimilar(farey(6), ['0/1', '1/6', '1/5', '1/4', '1/3', '2/5', '1/2', '3/5', '2/3', '3/4', '4/5', '5/6', '1/1'])",
			"Test.assertSimilar(farey(7), ['0/1', '1/7', '1/6', '1/5', '1/4', '2/7', '1/3', '2/5', '3/7', '1/2', '4/7', '3/5', '2/3', '5/7', '3/4', '4/5', '5/6', '6/7', '1/1'])",
			"Test.assertSimilar(farey(8), ['0/1', '1/8', '1/7', '1/6', '1/5', '1/4', '2/7', '1/3', '3/8', '2/5', '3/7', '1/2', '4/7', '3/5', '5/8', '2/3', '5/7', '3/4', '4/5', '5/6', '6/7', '7/8', '1/1'])",
			"Test.assertSimilar(farey(9), ['0/1', '1/9', '1/8', '1/7', '1/6', '1/5', '2/9', '1/4', '2/7', '1/3', '3/8', '2/5', '3/7', '4/9', '1/2', '5/9', '4/7', '3/5', '5/8', '2/3', '5/7', '3/4', '7/9', '4/5', '5/6', '6/7', '7/8', '8/9', '1/1'])",
			"Test.assertSimilar(farey(10), ['0/1', '1/10', '1/9', '1/8', '1/7', '1/6', '1/5', '2/9', '1/4', '2/7', '3/10', '1/3', '3/8', '2/5', '3/7', '4/9', '1/2', '5/9', '4/7', '3/5', '5/8', '2/3', '7/10', '5/7', '3/4', '7/9', '4/5', '5/6', '6/7', '7/8', '8/9', '9/10', '1/1'])",
			"Test.assertSimilar(farey(11), ['0/1', '1/11', '1/10', '1/9', '1/8', '1/7', '1/6', '2/11', '1/5', '2/9', '1/4', '3/11', '2/7', '3/10', '1/3', '4/11', '3/8', '2/5', '3/7', '4/9', '5/11', '1/2', '6/11', '5/9', '4/7', '3/5', '5/8', '7/11', '2/3', '7/10', '5/7', '8/11', '3/4', '7/9', '4/5', '9/11', '5/6', '6/7', '7/8', '8/9', '9/10', '10/11', '1/1'])",
			"Test.assertSimilar(farey(12), ['0/1', '1/12', '1/11', '1/10', '1/9', '1/8', '1/7', '1/6', '2/11', '1/5', '2/9', '1/4', '3/11', '2/7', '3/10', '1/3', '4/11', '3/8', '2/5', '5/12', '3/7', '4/9', '5/11', '1/2', '6/11', '5/9', '4/7', '7/12', '3/5', '5/8', '7/11', '2/3', '7/10', '5/7', '8/11', '3/4', '7/9', '4/5', '9/11', '5/6', '6/7', '7/8', '8/9', '9/10', '10/11', '11/12', '1/1'])",
			"Test.assertSimilar(farey(13), ['0/1', '1/13', '1/12', '1/11', '1/10', '1/9', '1/8', '1/7', '2/13', '1/6', '2/11', '1/5', '2/9', '3/13', '1/4', '3/11', '2/7', '3/10', '4/13', '1/3', '4/11', '3/8', '5/13', '2/5', '5/12', '3/7', '4/9', '5/11', '6/13', '1/2', '7/13', '6/11', '5/9', '4/7', '7/12', '3/5', '8/13', '5/8', '7/11', '2/3', '9/13', '7/10', '5/7', '8/11', '3/4', '10/13', '7/9', '4/5', '9/11', '5/6', '11/13', '6/7', '7/8', '8/9', '9/10', '10/11', '11/12', '12/13', '1/1'])"
		],
		"starterFn": [
			"1\nfunction farey(n) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QKj3nR5yATPMCkSw7"
	},
	{
		"title": "Topsy Turvy Numbers",
		"description": "<p><span>Topsy turvy numbers are numbers that when inverted (rotated 180 degrees) are unchanged. The most recent topsy turvy years were 1961 and 1881. The next one won't be until 6009. Mathemeticians have shown little interest in these numbers, but Edabitians are always up for a challenge:</span></p><p><span>Write a function that accepts two non-negative integers and returns an array of all topsy turvy numbers inclusively in that range.</span></p><h3><span>Examples</span></h3><pre><code>topsyTurvy(0, 10) ➞ [0, 1, 8]\n\ntopsyTurvy(10, 100) ➞ [11, 69, 88, 96]\n\ntopsyTurvy(1000, 2000) ➞ [1001, 1111, 1691, 1881, 1961]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(topsyTurvy(0, 10), [0, 1, 8])",
			"Test.assertSimilar(topsyTurvy(11, 100), [11, 69, 88, 96])",
			"Test.assertSimilar(topsyTurvy(2000, 6000), [])",
			"Test.assertSimilar(topsyTurvy(1000, 2000), [1001, 1111, 1691, 1881, 1961])",
			"Test.assertSimilar(topsyTurvy(10000, 15000), [10001, 10101, 10801, 11011, 11111, 11811])"
		],
		"starterFn": [
			"1\nfunction topsyTurvy(lo, hi) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/E9WQXpuezSgpdinmQ"
	},
	{
		"title": "Mountains or Valleys",
		"description": "<p><span>A </span><strong><span>mountain</span></strong><span> is an array with </span><strong><span>exactly one peak</span></strong><span>.</span></p><ul><li><span>All numbers to the left of the </span><strong><span>peak</span></strong><span> are increasing.</span></li><li><span>All numbers to the right of the </span><strong><span>peak</span></strong><span> are decreasing.</span></li><li><span>The peak CANNOT be on the boundary.</span></li></ul><p><span>A </span><strong><span>valley</span></strong><span> is an array with </span><strong><span>exactly one trough</span></strong><span>.</span></p><ul><li><span>All numbers to the left of the </span><strong><span>trough</span></strong><span> are decreasing.</span></li><li><span>All numbers to the right of the </span><strong><span>trough</span></strong><span> are increasing.</span></li><li><span>The trough CANNOT be on the boundary.</span></li></ul><p><span>Some examples of </span><strong><span>mountains</span></strong><span> and </span><strong><span>valleys</span></strong><span>:</span></p><pre><code>Mountain A:  [1, 3, 5, 4, 3, 2]   // 5 is the peak\nMountain B:  [-1, 0, -1]   // 0 is the peak\nMountain B:  [-1, -1, 0, -1, -1]   // 0 is the peak (plateau on both sides is okay)\n\nValley A: [10, 9, 8, 7, 2, 3, 4, 5]   // 2 is the trough\nValley B: [350, 100, 200, 400, 700]  // 100 is the trough</code></pre><p><span>Neither </span><strong><span>mountains</span></strong><span> nor </span><strong><span>valleys</span></strong><span>:</span></p><pre><code>Landscape A: [1, 2, 3, 2, 4, 1]  // 2 peaks (3, 4), not 1\nLandscape B: [5, 4, 3, 2, 1]  // Peak cannot be a boundary element\nLandscape B: [0, -1, -1, 0, -1, -1]  // 2 peaks (0)</code></pre><p><span>Based on the rules above, write a function that takes in an array and returns either </span><code>\"mountain\"</code><span>, </span><code>\"valley\"</code><span>, or </span><code>\"neither\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>landscapeType([3, 4, 5, 4, 3]) ➞ \"mountain\"\n\nlandscapeType([9, 7, 3, 1, 2, 4]) ➞ \"valley\"\n\nlandscapeType([9, 8, 9]) ➞ \"valley\"\n\nlandscapeType([9, 8, 9, 8]) ➞ \"neither\"</code></pre><h3><span>Notes</span></h3><ul><li><span>A </span><strong><span>peak</span></strong><span> is not exactly the same as the </span><strong><span>max</span></strong><span> of an array. The </span><strong><span>max</span></strong><span> is a unique number, but an array may have multiple peaks. However, if there exists only one peak in an array, then it is true that the peak = max.</span></li><li><span>See comments for a hint.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertEquals(landscapeType([3, 4, 5, 4, 3]), \"mountain\")",
			"Test.assertEquals(landscapeType([9, 7, 3, 1, 2, 4]), \"valley\")",
			"Test.assertEquals(landscapeType([9, 8, 9]), \"valley\")",
			"Test.assertEquals(landscapeType([9, 8, 9, 8]), \"neither\", '2 peaks')",
			"Test.assertEquals(landscapeType([1, 3, 5, 4, 3, 2]), \"mountain\")",
			"Test.assertEquals(landscapeType([-1, 0, -1]), \"mountain\")",
			"Test.assertEquals(landscapeType([10, 9, 8, 7, 2, 3, 4, 5]), \"valley\")",
			"Test.assertEquals(landscapeType([350, 100, 200, 400, 700]), \"valley\")",
			"Test.assertEquals(landscapeType([-1, -1, 0, -1, -1]), \"mountain\")",
			"Test.assertEquals(landscapeType([0, -1, -1, 0, -1, -1]), \"neither\", '2 peaks + boundary')",
			"Test.assertEquals(landscapeType([1, 2, 3, 2, 4, 1]), \"neither\", '2 peaks')",
			"Test.assertEquals(landscapeType([5, 4, 3, 2, 1]), \"neither\", 'boundary')",
			"Test.assertEquals(landscapeType([1, 2, 3, 4]), \"neither\", 'boundary')"
		],
		"starterFn": [
			"1\nfunction landscapeType(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LgfitGtQZTJBNbsCQ"
	},
	{
		"title": "Text Twist!",
		"description": "<p><span>In </span><strong><span>Text Twist</span></strong><span>, players try to score points by forming words using the letters from a 6-letter scrambled word. They win the round if they can successfully unscramble the 6-letter word.</span></p><p><span>Create a function that takes in an array of </span><strong><span>already-guessed words</span></strong><span>, the </span><strong><span>unscrambled 6-letter word</span></strong><span> and returns the total number of points the player scored in a particular round using the following rubric:</span></p><ol><li><strong><span>3-letter</span></strong><span> words are </span><strong><span>1 pt</span></strong></li><li><strong><span>4-letter</span></strong><span> words are </span><strong><span>2 pts</span></strong></li><li><strong><span>5-letter</span></strong><span> words are </span><strong><span>3 pts</span></strong></li><li><strong><span>6-letter</span></strong><span> words are </span><strong><span>4 pts</span></strong><span> + </span><strong><span>50 pt bonus</span></strong><span> (for unscrambling the word) </span></li></ol><p><span>Remember that </span><strong><span>invalid words</span></strong><span> (words that cannot be formed from the 6-letter unscrambled words) count as </span><strong><span>0 pts</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>totalPoints([\"cat\", \"create\", \"sat\"], \"caster\") ➞ 2\n// Since \"create\" is an invalid word.\n\ntotalPoints([\"trance\", \"recant\"], \"recant\") ➞ 108\n// Since \"trance\" and \"recant\" score 54 pts each.\n\ntotalPoints([\"dote\", \"dotes\", \"toes\", \"set\", \"dot\", \"dots\", \"sted\"], \"tossed\") ➞ 13\n// Since 2 + 3 + 2 + 1 + 1 + 2 + 2 = 13</code></pre><h3><span>Notes</span></h3><ul><li><span>If a 6-letter word has multiple anagrams, </span><strong><span>count each 6-letter unscramble as an additional 54 pts</span></strong><span>. For example, if the word is </span><strong><span>arches</span></strong><span>, and the player guessed </span><strong><span>arches</span></strong><span> and </span><strong><span>chaser</span></strong><span>, add </span><strong><span>108 pts</span></strong><span> for both words.</span></li><li><span>You can play Text Twist here: </span><a target=\"_blank\" href=\"http://text-twist2.com\"><span>http://text-twist2.com</span></a></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"games",
			"higher_order_functions",
			"strings"
		],
		"tests": [
			"Test.assertEquals(totalPoints([\"dote\", \"dotes\", \"toes\", \"set\", ",
			"                               \"dot\", \"dots\", \"sted\"], \"tossed\"), 13)",
			"Test.assertEquals(totalPoints([\"dial\", \"tail\", \"lid\", \"tide\", ",
			"                               \"date\", \"late\", \"tad\"], \"detail\"), 12)",
			"​",
			"// It should work with 6-letter words ",
			"Test.assertEquals(totalPoints([\"trance\", \"recant\"], \"recant\"), 108)",
			"Test.assertEquals(totalPoints([\"bluest\", \"sublet\", \"let\", ",
			"                               \"set\", \"belt\", \"belts\", \"bet\", ",
			"                              \"bets\", \"sted\", \"but\", \"tule\"], \"subtle\"), 121)",
			"​",
			"// It should work with incorrect words too ",
			"Test.assertEquals(totalPoints([\"cat\", \"create\", \"sat\"], \"caster\"), 2)",
			"Test.assertEquals(totalPoints([\"emote\", \"tome\", \"root\"], \"meteor\"), 5)"
		],
		"starterFn": [
			"1\nfunction totalPoints(guesses, word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Ht7CqJtytgzfezwXA"
	},
	{
		"title": "Get Max Depth of Object or Array",
		"description": "<p><span>Create a function that takes an object or array as an argument and returns the maximum depth of that object or array.</span></p><h3><span>Examples</span></h3><pre><code>getDepth([]) ➞ 1\n\ngetDepth({ a: 1 }) ➞ 1\n\ngetDepth({ a: 1, b: { c: 1 } }) ➞ 2\n\ngetDepth([1, [2, [3, [4, [5]]]]]) ➞ 5</code></pre><h3><span>Notes</span></h3><p><span>An empty object / array counts as a depth of 1.</span></p>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"objects",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(getDepth({}), 1);",
			"Test.assertEquals(getDepth([]), 1);",
			"Test.assertEquals(getDepth({ a: 1 }), 1);",
			"Test.assertEquals(getDepth({ a: 1, b: 1 }), 1);",
			"Test.assertEquals(getDepth([1, [2, [3, [4, [5]]]]]), 5);",
			"​",
			"Test.assertEquals(",
			"  getDepth({",
			"    a: 1,",
			"    b: {",
			"      c: 1,",
			"    },",
			"  }),",
			"  2",
			");",
			"​",
			"Test.assertEquals(",
			"  getDepth({",
			"    a: 1,",
			"    b: {",
			"      c: 1,",
			"      d: {",
			"        e: 1,",
			"      },",
			"    },",
			"  }),"
		],
		"starterFn": [
			"1\nfunction getDepth(obj) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EC8KnAe5cbdXKhwHk"
	},
	{
		"title": "Slope to Angle Conversion",
		"description": "<p><span>Given a slope of a line, calculate and return the value of the angle of line (relative to the y -axis). For example, a horizontal line would be 90 degrees.</span></p><h3><span>Examples</span></h3><pre><code>convert(1) ➞ 45\n\nconvert(0) ➞ 90\n\nconvert(-1) ➞ 135</code></pre><h3><span>Notes</span></h3><ul><li><span>All values returned should be in degrees.</span></li><li><span>All values returned should be rounded to the nearest whole number.</span></li><li><span>The value to return must be strictly between 0 and 180.</span></li><li><span>All inputs will be valid integer values.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(convert(0), 90)",
			"Test.assertEquals(convert(1), 45)",
			"Test.assertEquals(convert(-1), 135)",
			"Test.assertEquals(convert(3), 18)",
			"Test.assertEquals(convert(100), 1)",
			"Test.assertEquals(convert(-20), 177)"
		],
		"starterFn": [
			"1\nfunction convert(slope) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GwACHhzxHvTggemSy"
	},
	{
		"title": "Solve for the Red Area",
		"description": "<p><span>This problem went viral in China, spreading on Weibo. The problem is to solve for the area shown in red between the semicircle and the rectangle’s diagonal.</span></p><p><span>Create a function that takes a number </span><code>r</code><span> as an the length of the side and returns the area rounded to the nearest thousandth. Watch the video in the </span><strong><span>Resources</span></strong><span> tab for the answer to the problem.</span></p><p><img alt=\"The shaded part\" title=\"Solve for the Red Area\" src=\"https://edabit-challenges.s3.amazonaws.com/solve_red_area.png\"></p><h3><span>Examples</span></h3><pre><code>redArea(0) ➞ 0\n\nredArea(4) ➞ 1.252\n\nredArea(25) ➞ 48.906</code></pre><h3><span>Notes</span></h3><p><span>The input </span><code>r</code><span> is always a valid number.</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"[\"25,48.906\",",
			"\"94,691.412\",",
			"\"36,101.411\",",
			"\"42,138.032\",",
			"\"39,119.017\",",
			"\"36,101.411\",",
			"\"28,61.348\",",
			"\"33,85.214\",",
			"\"0,0\",",
			"\"68,361.825\",",
			"\"15,17.606\",",
			"\"55,236.705\",",
			"\"9,6.338\",",
			"\"67,351.262\",",
			"\"4,1.252\",",
			"\"30,70.425\",",
			"\"99,766.923\",",
			"\"28,61.348\",",
			"\"48,180.287\",",
			"\"13,13.224\",",
			"\"76,451.969\",",
			"\"3,0.704\",",
			"\"33,85.214\",",
			"\"37,107.123\",",
			"\"13,13.224\",",
			"\"14,15.337\","
		],
		"starterFn": [
			"1\nfunction redArea(r) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tr349ueDjT64Rf5aP"
	},
	{
		"title": "Queen Threat",
		"description": "<p><span>Create a function that takes </span><strong><span>a character from a to h</span></strong><span> as the column number and </span><strong><span>an integer from 1 to 8</span></strong><span> as the row number which together represent the location of a queen on a normal-sized chess board. Return this two dimensional 8x8 array.</span></p><p><span>This array must consist of zeroes and ones. The ones are placed in positions where the queen can move in one move and zeroes represent positions on the board where it cannot.</span></p><h3><span>Examples</span></h3><pre><code>checkBoard(\"a\", 1) ➞ [\n  [1, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1, 0],\n  [1, 0, 0, 0, 0, 1, 0, 0],\n  [1, 0, 0, 0, 1, 0, 0, 0],\n  [1, 0, 0, 1, 0, 0, 0, 0],\n  [1, 0, 1, 0, 0, 0, 0, 0],\n  [1, 1, 0, 0, 0, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1]\n]\n\ncheckBoard(\"h\", 4) ➞ [\n  [0, 0, 0, 1, 0, 0, 0, 1],\n  [0, 0, 0, 0, 1, 0, 0, 1],\n  [0, 0, 0, 0, 0, 1, 0, 1],\n  [0, 0, 0, 0, 0, 0, 1, 1],\n  [1, 1, 1, 1, 1, 1, 1, 0],\n  [0, 0, 0, 0, 0, 0, 1, 1],\n  [0, 0, 0, 0, 0, 1, 0, 1],\n  [0, 0, 0, 0, 1, 0, 0, 1]\n]\n \ncheckBoard(\"c\", 8) ➞ [\n  [1, 1, 0, 1, 1, 1, 1, 1],\n  [0, 1, 1, 1, 0, 0, 0, 0],\n  [1, 0, 1, 0, 1, 0, 0, 0],\n  [0, 0, 1, 0, 0, 1, 0, 0],\n  [0, 0, 1, 0, 0, 0, 1, 0],\n  [0, 0, 1, 0, 0, 0, 0, 1],\n  [0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 0, 0, 0, 0, 0]\n]</code></pre><h3><span>Notes</span></h3><p><span>The queens' current position is a zero as it is impossible to move to this position during one turn, because the queen is already there.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(checkBoard('a', 5), ",
			"  [",
			"    [1, 0, 0, 1, 0, 0, 0, 0],",
			"    [1, 0, 1, 0, 0, 0, 0, 0],",
			"    [1, 1, 0, 0, 0, 0, 0, 0],",
			"    [0, 1, 1, 1, 1, 1, 1, 1],",
			"    [1, 1, 0, 0, 0, 0, 0, 0],",
			"    [1, 0, 1, 0, 0, 0, 0, 0],",
			"    [1, 0, 0, 1, 0, 0, 0, 0],",
			"    [1, 0, 0, 0, 1, 0, 0, 0]",
			"  ])",
			"Test.assertSimilar(checkBoard('f', 1), ",
			"  [",
			"    [0, 0, 0, 0, 0, 1, 0, 0],",
			"    [0, 0, 0, 0, 0, 1, 0, 0],",
			"    [1, 0, 0, 0, 0, 1, 0, 0],",
			"    [0, 1, 0, 0, 0, 1, 0, 0],",
			"    [0, 0, 1, 0, 0, 1, 0, 0],",
			"    [0, 0, 0, 1, 0, 1, 0, 1],",
			"    [0, 0, 0, 0, 1, 1, 1, 0],",
			"    [1, 1, 1, 1, 1, 0, 1, 1]",
			"  ])",
			"Test.assertSimilar(checkBoard('d', 8), ",
			"  [",
			"    [1, 1, 1, 0, 1, 1, 1, 1],",
			"    [0, 0, 1, 1, 1, 0, 0, 0],"
		],
		"starterFn": [
			"1\nfunction checkBoard(col, row) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mmFp6DWPRgfgkjmbX"
	},
	{
		"title": "Partitions of a Natural Number",
		"description": "<p><span>Create a function that determines the number of partitions of a natural number.</span></p><p><span>A partition of a number </span><code>n</code><span> is an unordered sum of one or more numbers which totals </span><code>n</code><span>.\nFor example, the partitions of the number 4 are:</span></p><pre><code>1 + 1 + 1 + 1 = 4\n1 + 1 + 2 = 4\n1 + 3 = 4\n2 + 2 = 4\n4 = 4</code></pre><p><span>Since partitions are unordered, the sums </span><code>1 + 1 + 2 = 1 + 2 + 1 = 2 + 1 + 1 = 4</code><span> are considered the same partition.</span></p><h3><span>Examples</span></h3><pre><code>partitions(4) ➞ 5\n\npartitions(10) ➞ 42\n\npartitions(0) ➞ 1\n\npartitions(1) ➞ 1\n\npartitions(2) ➞ 2</code></pre><h3><span>Notes</span></h3><p><span>Remember the trivial partition </span><code>n = n</code><span>. Also, we say there is one way to partition zero; namely, </span><code>0 = 0</code><span>.</span></p>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(partitions(1), 1)",
			"Test.assertEquals(partitions(2), 2)",
			"Test.assertEquals(partitions(3), 3)",
			"Test.assertEquals(partitions(5), 7)",
			"Test.assertEquals(partitions(7), 15)",
			"Test.assertEquals(partitions(11), 56)",
			"Test.assertEquals(partitions(13), 101)",
			"Test.assertEquals(partitions(17), 297)",
			"Test.assertEquals(partitions(19), 490)"
		],
		"starterFn": [
			"1\nfunction partitions(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Cn9d39qeznvERMdGB"
	},
	{
		"title": "Identity Matrix",
		"description": "<p><span>An identity matrix is defined as a square matrix with </span><strong><span>1s</span></strong><span> running from the top left of the square to the bottom right. The rest are </span><strong><span>0s</span></strong><span>. The identity matrix has applications ranging from machine learning to the general theory of relativity.</span></p><p><span>Create a function that takes an integer </span><code>n</code><span> and returns the identity matrix of </span><code>n x n</code><span> dimensions, JSON stringified. For this challenge, if the integer is negative, return the mirror image of the identity matrix of </span><code>n x n</code><span> dimensions, JSON stringified. It does not matter if the mirror image is left-right or top-bottom.</span></p><h3><span>Examples</span></h3><pre><code>idMtrx(2) ➞ [\n  [1, 0],\n  [0, 1]\n]\n\nidMtrx(-2) ➞ [\n  [0, 1],\n  [1, 0]\n]\n\nidMtrx(0) ➞ []</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Kelvin Tan",
		"publishedByUrl": "https://edabit.com/user/PytNZK9mNiRiZxPrm",
		"language": "JavaScript",
		"tags": [
			"arrays"
		],
		"tests": [
			"Test.assertEquals(idMtrx(0), \"[]\")",
			"Test.assertEquals(idMtrx(1), \"[[1]]\")",
			"Test.assertEquals(idMtrx(2), \"[[1,0],[0,1]]\")",
			"Test.assertEquals(idMtrx(3), \"[[1,0,0],[0,1,0],[0,0,1]]\")",
			"Test.assertEquals(idMtrx(4), \"[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(5), \"[[1,0,0,0,0],[0,1,0,0,0],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(6), \"[[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,1,0,0,0],[0,0,0,1,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(7), \"[[1,0,0,0,0,0,0],[0,1,0,0,0,0,0],[0,0,1,0,0,0,0],[0,0,0,1,0,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,1,0],[0,0,0,0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(8), \"[[1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(9), \"[[1,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(10), \"[[1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0,1]]\")",
			"Test.assertEquals(idMtrx(-1), \"[[1]]\")",
			"Test.assertEquals(idMtrx(-2), \"[[0,1],[1,0]]\")",
			"Test.assertEquals(idMtrx(-3), \"[[0,0,1],[0,1,0],[1,0,0]]\")",
			"Test.assertEquals(idMtrx(-4), \"[[0,0,0,1],[0,0,1,0],[0,1,0,0],[1,0,0,0]]\")",
			"Test.assertEquals(idMtrx(-5), \"[[0,0,0,0,1],[0,0,0,1,0],[0,0,1,0,0],[0,1,0,0,0],[1,0,0,0,0]]\")",
			"Test.assertEquals(idMtrx(-6), \"[[0,0,0,0,0,1],[0,0,0,0,1,0],[0,0,0,1,0,0],[0,0,1,0,0,0],[0,1,0,0,0,0],[1,0,0,0,0,0]]\")",
			"Test.assertEquals(idMtrx(-7), \"[[0,0,0,0,0,0,1],[0,0,0,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,1,0,0,0],[0,0,1,0,0,0,0],[0,1,0,0,0,0,0],[1,0,0,0,0,0,0]]\")",
			"Test.assertEquals(idMtrx(-8), \"[[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0],[0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0],[0,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0]]\")",
			"Test.assertEquals(idMtrx(-9), \"[[0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0]]\")",
			"Test.assertEquals(idMtrx(-10), \"[[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0],[0,0,1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0]]\")"
		],
		"starterFn": [
			"1\nfunction idMtrx(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fFY9SYeuTX47yBeZf"
	},
	{
		"title": "Bell Number",
		"description": "<p><span>The Bell number is the number of ways an array of </span><code>n</code><span> items can be partitioned into non-empty subarrays. See the resources section for an in-depth explanation.</span></p><p><span>Create a function that takes a number </span><code>n</code><span> and returns the corresponding Bell number.</span></p><h3><span>Examples</span></h3><pre><code>bell(1) ➞ 1\n// sampleArr = [1]\n// possiblePartitions = [[[1]]]\n\nbell(2) ➞ 2\n// sampleArr = [1, 2]\n// possiblePartitions = [[[1, 2]], [[1], [2]]]\n\nbell(3) ➞ 5\n// sampleArr = [1, 2, 3]\n// possiblePartitions = [[[1, 2, 3]], [[1, 2], [3]], [[1], [2, 3]], [[1, 3], [2]], [[1], [2], [3]]]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(bell(1), 1)",
			"Test.assertEquals(bell(2), 2)",
			"Test.assertEquals(bell(3), 5)",
			"Test.assertEquals(bell(4), 15)",
			"Test.assertEquals(bell(5), 52)",
			"Test.assertEquals(bell(6), 203)"
		],
		"starterFn": [
			"1\nfunction bell(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AS2DsdhRkALvAmNKc"
	},
	{
		"title": "Sort by Factor Length",
		"description": "<p><span>A numbers </span><strong><span>factor length</span></strong><span> is simply its total number of factors.</span></p><p><span>For instance:</span></p><pre><code>3: 1, 3\n// 3's factor length = 2\n\n8: 1, 2, 4, 8\n// 8's factor length = 4\n\n36 : 1, 2, 3, 4, 6, 9, 12, 18, 36\n// 36's factor length = 9</code></pre><p><span>Create a function that sorts an array by </span><strong><span>factor length</span></strong><span> in </span><strong><span>descending order</span></strong><span>. If multiple numbers have the same factor length, sort these numbers in </span><strong><span>descending order</span></strong><span>, with the largest first.</span></p><p><span>In the example below, since 13 and 7 both have only 2 factors, we put 13 ahead of 7.</span></p><pre><code>factorSort([9, 7, 13, 12]) ➞ [12, 9, 13, 7]\n// 12 : 6, 9: 3, 13: 2, 7: 2</code></pre><h3><span>Examples</span></h3><pre><code>factorSort([1, 2, 31, 4]) ➞ [4, 31, 2, 1]\n\nfactorSort([5, 7, 9]) ➞ [9, 7, 5]\n\nfactorSort([15, 8, 2, 3]) ➞ [15, 8, 3, 2]</code></pre><h3><span>Notes</span></h3><p><span>Descending order: numbers with a higher factor length go before numbers with a lower factor length.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(factorSort([1, 2, 31, 4]), [4, 31, 2, 1])",
			"Test.assertSimilar(factorSort([5, 7, 9]), [9, 7, 5])",
			"Test.assertSimilar(factorSort([15, 8, 2, 3]), [15, 8, 3, 2])",
			"Test.assertSimilar(factorSort([1, 2, 3, 7, 11, 13, 16]), [16, 13, 11, 7, 3, 2, 1])",
			"Test.assertSimilar(factorSort([1, 5, 25, 17]), [25, 17, 5, 1])",
			"Test.assertSimilar(factorSort([1, 5, 4, 17]), [4, 17, 5, 1])"
		],
		"starterFn": [
			"1\nfunction factorSort(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TyN8D68zYSg75i5gD"
	},
	{
		"title": "Pascal's Triangle",
		"description": "<p><span>The goal of this challenge is to return Pascal's triangle up to number 29. Pascal's triangle is the sum of the two upper corners.</span></p><pre><code>   1 1\n  1 2 1\n 1 3 3 1\n\n// There will always be the 1 in the first\n// place and the row in the second.</code></pre><p><img alt=\"Pascal's Triangle\" title=\"Pascal's Triangle\" src=\"https://edabit-challenges.s3.amazonaws.com/PascalTriangleAnimated2.gif\"></p><p><span>Create a function that returns a row from Pascal's triangle. To find the row and column you can use </span><code>n!/(k!*(n-k)!)</code><span> where </span><code>n</code><span> is the row down and </span><code>k</code><span> is the column.</span></p><h3><span>Examples</span></h3><pre><code>pascalsTriangle(1) ➞ \"1 1\"\n\npascalsTriangle(4) ➞ \"1 4 6 4 1\"\n\npascalsTriangle(6) ➞ \"1 6 15 20 15 6 1\"\n\npascalsTriangle(8) ➞ \"1 8 28 56 70 56 28 8 1\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertEquals(pascalsTriangle(1), \"1 1\")",
			"Test.assertEquals(pascalsTriangle(2), \"1 2 1\")",
			"Test.assertEquals(pascalsTriangle(3), \"1 3 3 1\")",
			"Test.assertEquals(pascalsTriangle(4), \"1 4 6 4 1\")",
			"Test.assertEquals(pascalsTriangle(5), \"1 5 10 10 5 1\")",
			"Test.assertEquals(pascalsTriangle(6), \"1 6 15 20 15 6 1\")",
			"Test.assertEquals(pascalsTriangle(7), \"1 7 21 35 35 21 7 1\")",
			"Test.assertEquals(pascalsTriangle(8), \"1 8 28 56 70 56 28 8 1\")",
			"Test.assertEquals(pascalsTriangle(9), \"1 9 36 84 126 126 84 36 9 1\")",
			"Test.assertEquals(pascalsTriangle(10), \"1 10 45 120 210 252 210 120 45 10 1\")",
			"Test.assertEquals(pascalsTriangle(11), \"1 11 55 165 330 462 462 330 165 55 11 1\")",
			"Test.assertEquals(pascalsTriangle(12), \"1 12 66 220 495 792 924 792 495 220 66 12 1\")",
			"Test.assertEquals(pascalsTriangle(13), \"1 13 78 286 715 1287 1716 1716 1287 715 286 78 13 1\")",
			"Test.assertEquals(pascalsTriangle(14), \"1 14 91 364 1001 2002 3003 3432 3003 2002 1001 364 91 14 1\")",
			"Test.assertEquals(pascalsTriangle(15), \"1 15 105 455 1365 3003 5005 6435 6435 5005 3003 1365 455 105 15 1\")",
			"Test.assertEquals(pascalsTriangle(16), \"1 16 120 560 1820 4368 8008 11440 12870 11440 8008 4368 1820 560 120 16 1\")",
			"Test.assertEquals(pascalsTriangle(17), \"1 17 136 680 2380 6188 12376 19448 24310 24310 19448 12376 6188 2380 680 136 17 1\")",
			"Test.assertEquals(pascalsTriangle(18), \"1 18 153 816 3060 8568 18564 31824 43758 48620 43758 31824 18564 8568 3060 816 153 18 1\")",
			"Test.assertEquals(pascalsTriangle(19), \"1 19 171 969 3876 11628 27132 50388 75582 92378 92378 75582 50388 27132 11628 3876 969 171 19 1\")",
			"Test.assertEquals(pascalsTriangle(20), \"1 20 190 1140 4845 15504 38760 77520 125970 167960 184756 167960 125970 77520 38760 15504 4845 1140 190 20 1\")",
			"Test.assertEquals(pascalsTriangle(21), \"1 21 210 1330 5985 20349 54264 116280 203490 293930 352716 352716 293930 203490 116280 54264 20349 5985 1330 210 21 1\")",
			"Test.assertEquals(pascalsTriangle(22), \"1 22 231 1540 7315 26334 74613 170544 319770 497420 646646 705432 646646 497420 319770 170544 74613 26334 7315 1540 231 22 1\")",
			"Test.assertEquals(pascalsTriangle(23), \"1 23 253 1771 8855 33649 100947 245157 490314 817190 1144066 1352078 1352078 1144066 817190 490314 245157 100947 33649 8855 1771 253 23 1\")",
			"Test.assertEquals(pascalsTriangle(24), \"1 24 276 2024 10626 42504 134596 346104 735471 1307504 1961256 2496144 2704156 2496144 1961256 1307504 735471 346104 134596 42504 10626 2024 276 24 1\")",
			"Test.assertEquals(pascalsTriangle(25), \"1 25 300 2300 12650 53130 177100 480700 1081575 2042975 3268760 4457400 5200300 5200300 4457400 3268760 2042975 1081575 480700 177100 53130 12650 2300 300 25 1\")",
			"Test.assertEquals(pascalsTriangle(26), \"1 26 325 2600 14950 65780 230230 657800 1562275 3124550 5311735 7726160 9657700 10400600 9657700 7726160 5311735 3124550 1562275 657800 230230 65780 14950 2600 325 26 1\")"
		],
		"starterFn": [
			"1\nfunction pascalsTriangle(row) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rDBZd8qzZzpKLxEsK"
	},
	{
		"title": "Check if the Formula is Correct",
		"description": "<p><span>Create a function that takes a string and returns </span><code>true</code><span> or </span><code>false</code><span> depending on whether or not the formula is correct.</span></p><h3><span>Examples</span></h3><pre><code>formula(\"6 * 4 = 24\") ➞ true\n\nformula(\"18 / 17 = 2\") ➞ false\n\nformula(\"\") ➞ undefined</code></pre><h3><span>Notes</span></h3><ul><li><span>You have to figure out what </span><code>a</code><span> is.</span></li><li><span>Ignore the spaces.</span></li><li><span>If the input is an empty string </span><code>\"\"</code><span>, return </span><code>undefined</code><span>.</span></li><li><span>You do not need to dynamically find the value of </span><code>a</code><span> (it's a constant and the same accross all tests).</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(formula('6 * 4 = 24'), true)",
			"Test.assertEquals(formula('120 - 7 = 100'), false)",
			"Test.assertEquals(formula('16 - 8 = 16 / 2 = 64 / 8'), true)",
			"Test.assertEquals(formula('a = a'), true)",
			"Test.assertEquals(formula('a * 7 = 90'), false)",
			"Test.assertEquals(formula('16 * 10 = 160 = 14 + 120'), false)",
			"Test.assertEquals(formula('a=4'), true)",
			"Test.assertEquals(formula(''), undefined)",
			"Test.assertEquals(formula('1000 / 10 = 100 = 2 * 50'), true)",
			"Test.assertEquals(formula('18 / 17 = 2'), false)",
			"Test.assertEquals(formula('(1+2+3+4+5+6+7+8)/a=9'), true)",
			"Test.assertEquals(formula('2 * 2 * 2 = a * 2 = 8'), true)",
			"Test.assertEquals(formula('   8/       9 =       5'), false)",
			"Test.assertEquals(formula('1111           /     101=     11'), true)",
			"Test.assertEquals(formula('a / a = a - 3'), true)"
		],
		"starterFn": [
			"1\nfunction formula(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uTZ4bLqZ5vHp73K9t"
	},
	{
		"title": "Substring Consonant-Vowel Groups",
		"description": "<p><span>Write two functions:</span></p><ol><li><span>One to retrieve all </span><strong><span>unique</span></strong><span> substrings that </span><strong><span>start</span></strong><span> and </span><strong><span>end</span></strong><span> with a </span><strong><span>vowel</span></strong><span>. </span></li><li><span>One to retrieve all </span><strong><span>unique</span></strong><span> substrings that </span><strong><span>start</span></strong><span> and </span><strong><span>end</span></strong><span> with a </span><strong><span>consonant</span></strong><span>.</span></li></ol><p><span>The resulting array should be sorted in lexicographic ascending order (same order as a dictionary). </span></p><h3><span>Examples</span></h3><pre><code>getVowelSubstrings(\"apple\")\n➞ [\"a\", \"apple\", \"e\"]\n\ngetVowelSubstrings(\"hmm\") ➞ []\n\ngetConsonantSubstrings(\"aviation\")\n➞ [\"n\", \"t\", \"tion\", \"v\", \"viat\", \"viation\"]\n\ngetConsonantSubstrings(\"motor\")\n➞ [\"m\", \"mot\", \"motor\", \"r\", \"t\", \"tor\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember the output array should have </span><strong><span>unique</span></strong><span> values.</span></li><li><span>The word itself counts as a potential substring.</span></li><li><span>Exclude the empty string when outputting the array.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(getVowelSubstrings(\"apple\"), [\"a\", \"apple\", \"e\"])",
			"Test.assertSimilar(getVowelSubstrings(\"carrot\"), [\"a\", \"arro\", \"o\"])",
			"Test.assertSimilar(getVowelSubstrings(\"aviation\"), [\"a\", \"ati\", \"atio\", \"avi\", \"avia\", \"aviati\", \"aviatio\", \"i\", \"ia\", \"iati\", \"iatio\", \"io\", \"o\"])",
			"Test.assertSimilar(getVowelSubstrings(\"motor\"), [\"o\", \"oto\"])",
			"Test.assertSimilar(getVowelSubstrings(\"rhyme\"), [\"e\"])",
			"Test.assertSimilar(getVowelSubstrings(\"hmm\"), [])",
			"​",
			"Test.assertSimilar(getConsonantSubstrings(\"apple\"), [\"l\", \"p\", \"pl\", \"pp\", \"ppl\"])",
			"Test.assertSimilar(getConsonantSubstrings(\"carrot\"), [\"c\", \"car\", \"carr\", \"carrot\", \"r\", \"rot\", \"rr\", \"rrot\", \"t\"])",
			"Test.assertSimilar(getConsonantSubstrings(\"aviation\"), [\"n\", \"t\", \"tion\", \"v\", \"viat\", \"viation\"])",
			"Test.assertSimilar(getConsonantSubstrings(\"motor\"), [\"m\", \"mot\", \"motor\", \"r\", \"t\", \"tor\"])",
			"Test.assertSimilar(getConsonantSubstrings(\"rhyme\"), [\"h\", \"hy\", \"hym\", \"m\", \"r\", \"rh\", \"rhy\", \"rhym\", \"y\", \"ym\"])",
			"Test.assertSimilar(getConsonantSubstrings(\"hmm\"), [\"h\", \"hm\", \"hmm\", \"m\", \"mm\"])"
		],
		"starterFn": [
			"1\nfunction getVowelSubstrings(str) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction getConsonantSubstrings(str) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/rgEiYWCq6Z3J7RNwq"
	},
	{
		"title": "Letters Formed from the Longest Word",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if all the strings in an array can be formed by using only the characters from the longest string.</span></p><h3><span>Examples</span></h3><pre><code>canForm([\"mast\", \"manifest\", \"met\", \"fan\"]) ➞ true\n\ncanForm([\"may\", \"master\", \"same\", \"reams\"]) ➞ false\n\ncanForm([\"may\", \"same\", \"reams\", \"mastery\"]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>There will only be one unique longest string.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canForm([\"mast\", \"manifest\", \"met\", \"fan\"]), true)",
			"Test.assertEquals(canForm([\"may\", \"master\", \"same\", \"reams\"]), false)",
			"Test.assertEquals(canForm([\"may\", \"same\", \"reams\", \"mastery\"]), true)",
			"Test.assertEquals(canForm([\"kerfuffle\", \"fluke\", \"fluff\", \"ruffle\", ]), true)",
			"Test.assertEquals(canForm([\"monument\", \"momento\", \"moment\", \"tome\"]), false)",
			"Test.assertEquals(canForm([\"shape\", \"shapers\", \"raps\", \"saps\"]), true)"
		],
		"starterFn": [
			"1\nfunction canForm(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/D4KLn64XNGdrxR63Z"
	},
	{
		"title": "Diagonal Rug",
		"description": "<p><span>Write a function that takes in </span><strong><span>size</span></strong><span> and </span><strong><span>direction</span></strong><span> and generates a </span><strong><span>diagonal rug</span></strong><span>.</span></p><p><span>The size is the </span><code>n</code><span> parameter, and all rugs are square </span><code>n x n</code><span>. The direction is whether the diagonal part begins on the left or the right side.</span></p><h3><span>Examples</span></h3><pre><code>generateRug(4, \"left\") ➞ [\n  [0, 1, 2, 3],\n  [1, 0, 1, 2],\n  [2, 1, 0, 1],\n  [3, 2, 1, 0]\n]\n\ngenerateRug(5, \"right\") ➞ [\n  [4, 3, 2, 1, 0],\n  [3, 2, 1, 0, 1],\n  [2, 1, 0, 1, 2],\n  [1, 0, 1, 2, 3],\n  [0, 1, 2, 3, 4]\n]\n\ngenerateRug(1, \"left\") ➞ [\n  [0]\n]\n\ngenerateRug(2, \"right\") ➞ [\n  [1, 0],\n  [0, 1]\n]</code></pre><h3><span>Notes</span></h3><ul><li><code>n &gt; 0</code></li><li><span>A </span><code>1 x 1</code><span> rug is trivially </span><code>[[0]]</code><span> (same for left and right).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(generateRug(4, \"left\"),  ",
			"[[0, 1, 2, 3], ",
			"[1, 0, 1, 2], ",
			"[2, 1, 0, 1], ",
			"[3, 2, 1, 0]])",
			"​",
			"Test.assertSimilar(generateRug(5, \"right\"),",
			"[[4, 3, 2, 1, 0], ",
			"[3, 2, 1, 0, 1], ",
			"[2, 1, 0, 1, 2], ",
			"[1, 0, 1, 2, 3], ",
			"[0, 1, 2, 3, 4]])",
			"​",
			"Test.assertSimilar(generateRug(6, \"left\"),",
			"[[0, 1, 2, 3, 4, 5], ",
			"[1, 0, 1, 2, 3, 4], ",
			"[2, 1, 0, 1, 2, 3], ",
			"[3, 2, 1, 0, 1, 2], ",
			"[4, 3, 2, 1, 0, 1], ",
			"[5, 4, 3, 2, 1, 0]])",
			"​",
			"Test.assertSimilar(generateRug(1, \"left\"), ",
			"[[0]])",
			"​",
			"Test.assertSimilar(generateRug(2, \"right\"), ",
			"[[1, 0], "
		],
		"starterFn": [
			"1\nfunction generateRug(n, direction) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/afxdcvEi4Ra4fPLoQ"
	},
	{
		"title": "Intersecting Rows and Columns",
		"description": "<p><span>Suppose any </span><code>nxm</code><span> matrix of </span><code>0</code><span>s and </span><code>1</code><span>s can be transformed into a second matrix, where each number in position </span><code>(i, j)</code><span> in the new matrix is the sum of </span><strong><span>1s</span></strong><span> in row </span><code>i</code><span> and column </span><code>j</code><span> in the original matrix, </span><strong><span>excluding itself</span></strong><span> (if it is a 1).</span></p><pre><code>[[1, 0, 0, 0, 1],\n[0, 1, 0, 0, 0],\n[0, 0, 0, 1, 0],\n[0, 1, 0, 1, 0],\n[0, 1, 0, 0, 0]]\n\n[1, 5, 2, 4, 1],\n[2, 4, 1, 3, 2],\n[2, 4, 1, 1, 2],\n[3, 2, 2, 2, 3],\n[2, 2, 1, 3, 2]\n\n// The 1 on the upper left corner has 1 other 1 in the same row as itself (excluding itself).\n// The 0 to the right of the 1 has 2 1's on the same row as itself, and 3 1's in the same column, etc.</code></pre><p><span>Create a function that transforms the first matrix into its second matrix equivalent.</span></p><h3><span>Examples</span></h3><pre><code>transformMatrix([\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1]\n]) ➞ [\n  [0, 2, 2],\n  [2, 0, 2],\n  [2, 2, 0]\n]\n\ntransformMatrix([\n  [1, 1, 1],\n  [0, 0, 1],\n  [0, 0, 1]\n]) ➞ [\n  [2, 2, 4],\n  [2, 2, 2],\n  [2, 2, 2]\n]\n\ntransformMatrix([\n  [1, 1, 1],\n  [0, 1, 1],\n  [0, 0, 1]\n]) ➞ [\n  [2, 3, 4],\n  [3, 2, 3],\n  [2, 3, 2]\n]</code></pre><h3><span>Notes</span></h3><p><span>It might be easier to visualize this by drawing the grid of 0's and 1's out on a sheet of paper, and drawing lines through a specific number's row and column.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(transformMatrix([",
			"  [1, 0, 0, 0, 1],",
			"  [0, 1, 0, 0, 0],",
			"  [0, 0, 0, 1, 0],",
			"  [0, 1, 0, 1, 0],",
			"  [0, 1, 0, 0, 0]",
			"]), [",
			"  [1, 5, 2, 4, 1], ",
			"  [2, 2, 1, 3, 2], ",
			"  [2, 4, 1, 1, 2], ",
			"  [3, 3, 2, 2, 3], ",
			"  [2, 2, 1, 3, 2]",
			"])",
			"​",
			"Test.assertSimilar(transformMatrix([",
			"  [1, 0, 0, 0],",
			"  [0, 1, 0, 0],",
			"  [0, 0, 1, 0]",
			"]), [",
			"  [0, 2, 2, 1],",
			"  [2, 0, 2, 1],",
			"  [2, 2, 0, 1]",
			"])",
			"​",
			"Test.assertSimilar(transformMatrix([",
			"  [1, 1],"
		],
		"starterFn": [
			"1\nfunction transformMatrix(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tCFfABNfydAuX6qvK"
	},
	{
		"title": "Big Integers, Big Errors",
		"description": "<p><span>In this challenge, you have to create a </span><code>class</code><span> to deal with Big Integers. It will be used just a single </span><strong><span>static</span></strong><span> method called </span><code>max</code><span>, used to find the Big Integer with the highest value among the given data.</span></p><p><span>You'll have to manage also a series of exceptions, establishing if the given input is valid:</span></p><ul><li><span>A given </span><strong><span>Big Integer</span></strong><span> will be always valid.</span></li><li><span>A given </span><strong><span>integer</span></strong><span> lower or equal than the JS </span><code>MAX_SAFE_INTEGER</code><span> will be converted into a Big Integer (before calculating the max value).</span></li><li><span>A given </span><strong><span>string containing an integer</span></strong><span> lower or equal than the JS </span><code>MAX_SAFE_INTEGER</code><span> will be converted into a Big Integer (before calculating the max value).</span></li><li><span>If no input is given, the function must returns </span><code>null</code><span>.</span></li><li><span>If none of the previous conditions is satisfied, the given input is not valid.</span></li></ul><p><span>The </span><code>max</code><span> method applied to the input has to returns:</span></p><ul><li><span>If the input is valid, the highest given value </span><strong><span>as a Big Integer</span></strong><span>.</span></li><li><code>null</code><span> if no input is given.</span></li><li><span>A string </span><code>\"Big Error\"</code><span> if the input contains invalid data.</span></li></ul><h3><span>Examples</span></h3><pre><code>Big.max(1n, 10n, 5n) ➞ 10n\n\nBig.max(\"10\", 5n, 1) ➞ 10n\n\nBig.max() ➞ null\n\nBig.max(2 ** 53 - 1) ➞ 9007199254740991n\n\nBig.max(2 ** 53) ➞ \"Big Error\"\n\nBig.max(\"10\" / 3) ➞ \"Big Error\"\n\nBig.max(\"10\" / 2) ➞ 5n\n\nBig.max(10 - 12, 10 - 10, 10 - 11) ➞ 0n\n\nBig.max(0n) ➞ 0n\n\nBig.max(\"\") ➞ \"Big Error\"</code></pre><h3><span>Note</span></h3><ul><li><span>Reading the specific link about BigInt behaviors (look at the </span><strong><span>Resources</span></strong><span> tab) is </span><strong><span>highly</span></strong><span> recommended.</span></li><li><span>Inputs and values will be given in various ways trying to represent a real scenario. For coding easiness, tests are grouped separately.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"conditions",
			"functional_programming"
		],
		"tests": [
			"// Testing big integers",
			"Test.assertEquals(Big.max(1n, 5n, 3n), 5n)",
			"Test.assertEquals(Big.max(11n, 5n, 13n), 13n)",
			"Test.assertEquals(Big.max(-11n, -5n, -13n), -5n)",
			"Test.assertEquals(Big.max(...[8n ** 100n, 10n ** 100n, 9n ** 100n]), 10n ** 100n)",
			"Test.assertEquals(Big.max(-2n, -1n, 0n), 0n)",
			"​",
			"// Testing convertible values",
			"Test.assertEquals(Big.max(1, 2, 3), 3n)",
			"Test.assertEquals(Big.max(100 - 80, 19n, \"2\"), 20n)",
			"Test.assertEquals(Big.max(2 ** 53 - 1), BigInt(2 ** 53 - 1))",
			"Test.assertEquals(Big.max(\"50\" * \"8\", \"50\" * \"9\", \"50\" / \"10\"), 450n)",
			"Test.assertEquals(Big.max(\"1\", \"3\", \"2\"), 3n)",
			"​",
			"// Testing empty inputs",
			"Test.assertEquals(Big.max(...[]), null)",
			"Test.assertEquals(Big.max(), null)",
			"​",
			"// Testing invalid inputs",
			"Test.assertEquals(Big.max(\"\"), \"Big Error\")",
			"Test.assertEquals(Big.max([]), \"Big Error\")",
			"Test.assertEquals(Big.max([11n, 5n, 13n]), \"Big Error\")",
			"Test.assertEquals(Big.max({a: 10n}), \"Big Error\")",
			"Test.assertEquals(Big.max(\"10n * 5n\"), \"Big Error\")",
			"Test.assertEquals(Big.max(2 ** 53 - 1, 3 ** 50, 2 ** 54), \"Big Error\")",
			"Test.assertEquals(Big.max(\"50\" / \"8\", \"50\" / \"9\", \"50\" / \"10\"), \"Big Error\")"
		],
		"starterFn": [
			"1\nclass Big {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uKkGLkDZSAaRAxwya"
	},
	{
		"title": "A Knapsack",
		"description": "<p><span>Given a knapsack with a certain weight capacity, fill it with loot from a list of items to achieve the highest value possible.</span></p><p><span>The function takes two parameters: an int specifying the maximum weight the knapsack can hold, and an array of item Objects to choose from. Each item has a name, a weight, and a value. The total weight of all chosen items cannot exceed the capacity of the knapsack.</span></p><p><span>The function should return an object containing the capacity of the bag, a list of items that were added to the bag (in the same order that they were given), the total weight of those items, and the total value of the items.</span></p><h3><span>Example</span></h3><pre><code>knapsack(0, items) ➞ {\n  capacity: 0,\n  items: [],\n  weight: 0,\n  value: 0\n}</code></pre><h3><span>Notes</span></h3><p><span>  N/A</span></p>",
		"publishedBy": "Theodore",
		"publishedByUrl": "https://edabit.com/user/hi7Hvtq2mJfkXEGF2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"objects",
			"recursion"
		],
		"tests": [
			"var items = [",
			"  {name:\"desk lamp\",weight:2,value:12},",
			"  {name:\"beach towel\",weight:1,value:10},",
			"  {name:\"textbook\",weight:3,value:20},",
			"  {name:\"wall clock\",weight:2,value:15},",
			"  {name:\"frozen dinners\",weight:10,value:50},",
			"  {name:\"tablet\",weight:7,value:1400},",
			"  {name:\"smartphone\",weight:1,value:200},",
			"  {name:\"paper\",weight:2,value:5},",
			"  {name:\"laser printer\",weight:25,value:400},",
			"  {name:\"shoes\",weight:1,value:79},",
			"  {name:\"medicine\",weight:1,value:17},",
			"  {name:\"decorative cushion\",weight:1,value:11},",
			"  {name:\"gold necklace\",weight:1,value:2500},",
			"  {name:\"toaster oven\",weight:5,value:129}",
			"];",
			"Test.assertSimilar(Test.inspect(knapsack(0, items)), Test.inspect({",
			"  capacity: 0,",
			"  items: [],",
			"  weight: 0,",
			"  value: 0",
			"}));",
			"Test.assertSimilar(Test.inspect(knapsack(1, items)), Test.inspect({",
			"  capacity: 1,",
			"  items: [",
			"    {name:\"gold necklace\",weight:1,value:2500}"
		],
		"starterFn": [
			"1\nfunction knapsack(capacity, items) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uqwmC7RJF98xr3TiD"
	},
	{
		"title": "The ECG Sequence",
		"description": "<p><span>In the ECG Sequence (that always starts with the numbers 1 and 2), every number that succeeds is the smallest not already present in the sequence and that shares a factor (excluding 1) with its preceding number. Every number in the ECG Sequence (besides 1 and 2) has a different index from its natural index in a normal numeric sequence. See the example below to establish the ECG Sequence Index of number 3.</span></p><pre><code>// Find the smallest number that is not in sequence...\n// This number shares a factor with the preceding?\n\nSEQUENCE = [1, 2]\n\n3 = no factors shared with 2\n4 = shares factor 2 with number 2\n\nSEQUENCE = [1, 2, 4]\n\n3 = no factors shared with 4\n5 = no factors shared with 4\n6 = shares factor 2 with number 4\n\nSEQUENCE = [1, 2, 4, 6]\n\n3 = shares factor 3 with number 6\n\nSEQUENCE = [1, 2, 4, 6, 3]\n\nNumber 3 is at index 4 in the ECG Sequence.</code></pre><p><span>Given an integer </span><code>n</code><span> implement a function that returns its ECG Sequence Index.</span></p><h3><span>Examples</span></h3><pre><code>ecgSeqIndex(3) ➞ 4\n\necgSeqIndex(5) ➞ 9\n\necgSeqIndex(7) ➞ 13</code></pre><h3><span>Notes</span></h3><ul><li><span>ECG is the acronym for the electrocardiogram: if you try to graphically represent the trend of the sequence, a similar scheme appears.</span></li><li><span>Curiosity: every odd prime </span><code>p</code><span> in the sequence is preceded by </span><code>2p</code><span> and followed by </span><code>3p</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(ecgSequenceIndex(3), 4, \"Example in Instructions\")",
			"Test.assertEquals(ecgSequenceIndex(5), 9)",
			"Test.assertEquals(ecgSequenceIndex(7), 13)",
			"Test.assertEquals(ecgSequenceIndex(18), 11)",
			"Test.assertEquals(ecgSequenceIndex(33), 20)",
			"Test.assertEquals(ecgSequenceIndex(44), 40)",
			"Test.assertEquals(ecgSequenceIndex(69), 43)",
			"Test.assertEquals(ecgSequenceIndex(75), 68)",
			"Test.assertEquals(ecgSequenceIndex(101), 188)",
			"Test.assertEquals(ecgSequenceIndex(208), 199)",
			"Test.assertEquals(ecgSequenceIndex(300), 281)"
		],
		"starterFn": [
			"1\nfunction ecgSequenceIndex(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9DjLa5TbT7X73hj5n"
	},
	{
		"title": "Matrix Multiplication (Part 2)",
		"description": "<p><span>Create a function that multiplies two matrices (n x m) and (p x q) and returns:</span></p><ul><li><code>\"invalid\"</code><span> if the matrices are not multiplicable (i.e. if m is not equal to p).</span></li><li><span>The multiplication matrix (n x q) otherwise.</span></li></ul><h3><span>Examples</span></h3><pre><code>matrixMultiply([[1, 2]], [[3], [4]]) ➞ [[11]]\n\nmatrixMultiply([[0, 0], [0, 1]], [[1, 2], [3, 4], [5, 6]]) ➞ \"invalid\"\n\nmatrixMultiply([[4, 2], [3, 1]], [[5, 6], [3, 8]]) ➞ [[26, 40], [18, 26]]</code></pre><h3><span>Notes</span></h3><p><span>This challenge is a generalized version of </span><a target=\"_blank\" href=\"https://edabit.com/challenge/bqF3dphpBEKXE3miC\"><span>Matrix Multiplication</span></a><span>.</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(matrixMultiply([[1]], [[1, 2], [3, 4]]), \"invalid\")",
			"Test.assertSimilar(matrixMultiply([[0, 0], [0, 1]], [[1, 2], [3, 4], [5, 6]]), \"invalid\")",
			"Test.assertSimilar(matrixMultiply([[2]], [[3]]), [[6]])",
			"Test.assertSimilar(matrixMultiply([[1, 2]], [[3], [4]]), [[11]])",
			"Test.assertSimilar(matrixMultiply([[2, 4], [1, 3]], [[5], [6]]), [[34], [23]])",
			"Test.assertSimilar(matrixMultiply([[4, 2], [3, 1]], [[5, 6], [3, 8]]), [[26, 40], [18, 26]])",
			"Test.assertSimilar(matrixMultiply([[3, 6], [4, 5]], [[8, 1], [7, 2]]), [[66, 15], [67, 14]])",
			"Test.assertSimilar(matrixMultiply([[1, 6], [6, 3]], [[5, 3, 5], [1, 6, 6]]), [[11, 39, 41], [33, 36, 48]])",
			"Test.assertSimilar(matrixMultiply([[4, 6], [1, 6]], [[5, 5, 4], [5, 3, 2]]), [[50, 38, 28], [35, 23, 16]])",
			"Test.assertSimilar(matrixMultiply([[5, 1], [1, 1], [2, 5]], [[5, 6, 3], [2, 1, 3]]), [[27, 31, 18], [7, 7, 6], [20, 17, 21]])",
			"Test.assertSimilar(matrixMultiply([[1, 1, 1], [0, 1, 0], [0, 1, 1]], [[1, 0, 1], [0, 0, 1], [1, 1, 0]]), [[2, 1, 2], [0, 0, 1], [1, 1, 1]])"
		],
		"starterFn": [
			"1\nfunction matrixMultiply(A, B) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oKcZvE99o4Q7TWXwo"
	},
	{
		"title": "Number Pairs",
		"description": "<p><span>Create a function that determines how many number pairs are embedded in a space-separated string. The first numeric value in the space-separated string represents the count of the numbers, thus, excluded in the pairings.</span></p><h3><span>Examples</span></h3><pre><code>number_pairs(\"7 1 2 1 2 1 3 2\") ➞ 2\n// (1, 1), (2, 2)\n\nnumber_pairs(\"9 10 20 20 10 10 30 50 10 20\") ➞ 3\n// (10, 10), (20, 20), (10, 10)\n\nnumber_pairs(\"4 2 3 4 1\") ➞ 0\n// Although two 4's are present, the first one is discounted.</code></pre><h3><span>Notes</span></h3><p><span>Always take into consideration the first number in the string is not part of the pairing, thus, the count. It may not seem so useful as most people see it, but it's mathematically significant if you deal with </span><strong><span>set operations</span></strong><span>.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"strings"
		],
		"tests": [
			"let strVectors = [\"7 1 2 1 2 1 3 2\", \"9 10 20 20 10 10 30 50 10 20\", \"4 2 3 4 1\",",
			"                 \"13 10 20 20 10 10 30 50 10 20 50 50 30 20\", \"10 1 2 5 6 5 2 1 7 8 1\",",
			"                 \"16 2 3 5 11 1 11 5 7 9 13 17 3 8 7 2 1\", \"6 1 2 2 4 3 4\"]",
			"let numVectors = [2, 3, 0, 6, 3, 6, 2]",
			"​",
			"for (let i in strVectors)",
			"  Test.assertEquals(numberPairs(strVectors[i]), numVectors[i])"
		],
		"starterFn": [
			"1\nfunction numberPairs(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fpHGmHoKX5RyD3wjQ"
	},
	{
		"title": "Squaring the Circle",
		"description": "<p><em><span>This challenge is more about geometry and trig than code-writing, but some may find it interesting.</span></em></p><p><span>A circle has a circumference of 100 meters. A regular polygon, let's say a square, inscribed inside this circle has a perimeter of about 90 meters. As you increase the number of sides of the regular polygon, it's perimeter will become arbitrarily close to 100 meters.</span></p><p><span>Write a function whose argument is the number of sides of the inscribed regular polygon. The function returns the polygon's perimeter. Round your answer to 3 decimal places.</span></p><h3><span>Examples</span></h3><pre><code>circle(3) ➞ 82.699\n\ncircle(12) ➞ 98.862\n\ncircle(100) ➞ 99.984\n\ncircle(1000) ➞ 100.0\n// Perimeter is actually &lt;100, rounding makes it 100.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math"
		],
		"tests": [
			"Test.assertEquals(circle(3), 82.699)",
			"Test.assertEquals(circle(4), 90.032)",
			"Test.assertEquals(circle(8), 97.45)",
			"Test.assertEquals(circle(90), 99.98)",
			"Test.assertEquals(circle(600), 100.0)"
		],
		"starterFn": [
			"1\nfunction circle(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fAWgT5RbGBaXez2nq"
	},
	{
		"title": "Hexagonal Grid: Distance",
		"description": "<p><span>A </span><strong><span>hexagonal grid</span></strong><span> is a commonly used </span><strong><span>game board design</span></strong><span> based on hexagonal tiling. In the following grid, the two marked locations have a minimum distance of 6 because at least 6 steps are needed to reach the second location starting from the first one.</span></p><p><img src=\"https://edabit-challenges.s3.amazonaws.com/HiD.svg\"></p><p><span>Write a function that takes a hexagonal grid with two marked locations as input and returns their distance.</span></p><p><span>The input grid will be a list of strings in which each tile is represented with </span><code>o</code><span> and the two marked locations with </span><code>x</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>hexDistance([\n  \"  o o  \",\n  \" o x o \",\n  \"  o x  \",\n]) ➞ 1\n\nhexDistance([\n  \"  o o  \",\n  \" x o o \",\n  \"  o x  \",\n]) ➞ 2\n\nhexDistance([\n  \"   o o o   \",\n  \"  o o o o  \",\n  \" o o o o o \",\n  \"  x o o x  \",\n  \"   o o o   \",\n]) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"logic"
		],
		"tests": [
			"Test.assertEquals(hexDistance([",
			"  \"  o o  \",",
			"  \" o x o \",",
			"  \"  o x  \",",
			"]), 1)",
			"​",
			"Test.assertEquals(hexDistance([",
			"  \"  x o  \",",
			"  \" o o x \",",
			"  \"  o o  \",",
			"]), 2)",
			"​",
			"Test.assertEquals(hexDistance([",
			"  \"   o o o   \",",
			"  \"  o o o o  \",",
			"  \" o o o o o \",",
			"  \"  x o o x  \",",
			"  \"   o o o   \",",
			"]), 3)",
			"​",
			"Test.assertEquals(hexDistance([",
			"  \"   o x o   \",",
			"  \"  o x o o  \",",
			"  \" o o o o o \",",
			"  \"  o o o o  \",",
			"  \"   o o o   \","
		],
		"starterFn": [
			"1\nfunction hexDistance(grid) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YuWnXNtiRAnETbf3P"
	},
	{
		"title": "Range of Rolled Dice",
		"description": "<p><span>You are playing a game of JavaScript &amp; Jackalopes with your friends, and need to roll dice as part of the game. None of you actually own dice, but you do have a computer handy!</span></p><p><span>You'll be given a string representing the number of dice to roll, how many faces each die has, and a \"modifier\" to apply to the final result after adding up all the dice. For example, rolling a single six-sided die with no modifier might be represented by the string </span><code>\"1d6\"</code><span> — one die with six sides and values ranging from 1 through 6. If you wanted to add 2 to the result of rolling the same die, you might represent that as </span><code>\"1d6+2\"</code><span>.</span></p><p><span>Create a function that takes a string representing a set of dice to be rolled as an argument, and returns an array of two numbers representing the minimum and maximum possible values that could be achieved.</span></p><h3><span>Examples</span></h3><pre><code class=\"language-javascript\">diceRange(\"1d6\") ➞ [1, 6]\n// If a modifier is not given, assume that nothing will be\n// added to/subtracted from the results.\n\ndiceRange(\"1d6+2\") ➞ [3, 8]\n\ndiceRange(\"d6\") ➞ [1, 6]\n// If a number of dice is not provided, assume only one is\n// being rolled.\n\ndiceRange(\"d6-2\") ➞ [-1, 4]\n// If a modifier is negative, the resulting values may be\n// negative as well.\n\ndiceRange(\"2d6\") ➞ [2, 12]\n\ndiceRange(\"2d6-1\") ➞ [1, 11]\n// The modifier should be added to/subtracted from the\n// final result after rolling all the dice and adding up their\n// results, not applied to each roll!\n\ndiceRange(\"0d6+1\") ➞ [1, 1]\n// If you roll no dice, the result will only be whatever the\n// modifier's value is with no randomness.</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs will be valid inputs for the function.</span></li><li><span>The number of dice to roll in each test will be either a positive integer, zero, or omitted (with a default assumed value of 1).</span></li><li><span>The number of sides of the dice to roll in each test will be a positive integer.</span></li><li><span>The modifier in each test will be either an integer (positive, negative, or zero) or omitted (with a default assumed value of 0).</span></li></ul>",
		"publishedBy": "mbbentley",
		"publishedByUrl": "https://edabit.com/user/n5wubRfh6zh8QRymN",
		"language": "JavaScript",
		"tags": [
			"games",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(diceRange(\"1d6\"), [1, 6])",
			"Test.assertSimilar(diceRange(\"1d6+1\"), [2, 7])",
			"Test.assertSimilar(diceRange(\"1d6-2\"), [-1, 4])",
			"Test.assertSimilar(diceRange(\"2d6\"), [2, 12])",
			"Test.assertSimilar(diceRange(\"2d6+38\"), [40, 50])",
			"Test.assertSimilar(diceRange(\"2d6-22\"), [-20, -10])",
			"Test.assertSimilar(diceRange(\"d6\"), [1, 6])",
			"Test.assertSimilar(diceRange(\"0d6+3\"), [3, 3])",
			"Test.assertSimilar(diceRange(\"0d6-4\"), [-4, -4])",
			"Test.assertSimilar(diceRange(\"0d6\"), [0, 0])",
			"Test.assertSimilar(diceRange(\"0d6+0\"), [0, 0])",
			"Test.assertSimilar(diceRange(\"0d6-0\"), [0, 0])",
			"Test.assertSimilar(diceRange(\"5d20+2\"), [7, 102])",
			"Test.assertSimilar(diceRange(\"15d4-1\"), [14, 59])",
			"Test.assertSimilar(diceRange(\"12d100+99\"), [111, 1299])",
			"Test.assertSimilar(diceRange(\"24d8-100\"), [-76, 92])",
			"Test.assertSimilar(diceRange(\"50d12\"), [50, 600])"
		],
		"starterFn": [
			"1\nfunction diceRange(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/92am52aiwdKRAJjtL"
	},
	{
		"title": "The Connell Sequence",
		"description": "<p><span>The Connell sequence can be represented as a growing series of alternating numbered lines:</span></p><ul><li><span>If the line number is odd, the line contains a quantity of odd numbers equal to the line number, sorted ascendingly.</span></li><li><span>If the line number is even, the line contains a quantity of even numbers equal to the line number, sorted ascendingly.</span></li></ul><p><span>Every number in a line is equal to its next term less 2, and the last number (and highest) number of the sequence has to be the square of the line number. Numbers have to be unique: there are no duplicates in the sequence, and not every number is in the sequence.</span></p><pre><code>Line 1 = 1\n// 1 odd number\n\nLine 2 = 2, 4\n// 2 even numbers\n\nLine 3 = 5, 7, 9\n// 3 odd numbers\n// Notice how the number 3 is missing.\n// Highest number in line is 9 (the square of line number)\n\nLine 4 = 10, 12, 14, 16\n// 4 even numbers\n\nand so on...</code></pre><p><span>Given a </span><code>start</code><span> and an </span><code>end</code><span> being the initial and ending line of the sequence, you have to implement a function that returns the index of the given </span><code>n</code><span>, in a generated array containing the portion of the Connell sequence. If </span><code>n</code><span> is not in the array, you have to return a string </span><code>\"Not Found\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>connellSequence(1, 3, 4) ➞ 2\n// sequence = [1, 2, 4, 5, 7, 9]\n// Number 4 is at index 2\n\nconnellSequence(2, 3, 4) ➞ 1\n// sequence = [2, 4, 5, 7, 9]\n// Number 4 is at index 1\n\nconnellSequence(4, 5, 22) ➞ \"Not Found\"\n// sequence = [10, 12, 14, 16, 17, 19, 21, 23, 25]\n// Number 22 is not in the sequence</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(connellSequence(1, 3, 4), 2, \"Example #1\")",
			"Test.assertEquals(connellSequence(2, 3, 4), 1, \"Example #2\")",
			"Test.assertEquals(connellSequence(4, 5, 22), \"Not Found\", \"Example #3\")",
			"Test.assertEquals(connellSequence(1, 1, 1), 0)",
			"Test.assertEquals(connellSequence(1, 1, 0), \"Not Found\")",
			"Test.assertEquals(connellSequence(1, 100, 100), 54)",
			"Test.assertEquals(connellSequence(4, 5, 77), \"Not Found\")",
			"Test.assertEquals(connellSequence(11, 22, 300), 103)",
			"Test.assertEquals(connellSequence(30, 32, 974), 67)",
			"Test.assertEquals(connellSequence(13, 88, 300), 80)",
			"Test.assertEquals(connellSequence(1, 1000, 8000), 4044)",
			"Test.assertEquals(connellSequence(111, 1000, 8000), \"Not Found\")",
			"Test.assertEquals(connellSequence(10000, 11000, 120999810), 10510404)"
		],
		"starterFn": [
			"1\nfunction connellSequence(start, end, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/tbikqsDhYSnD76xmo"
	},
	{
		"title": "Dates of Easter",
		"description": "<p><span>The Christian holiday of Easter Sunday is a movable feast. It can occur on any date from March 22 to April 25. The date depends on the timing between the Paschal Full Moon and the spring equinox. It wasn't until the late 19th century that a formula was developed to accurately predict Easter's date for a given year.</span></p><p><span>Your task is to use this formula, also known as Butcher's Algorithm, to write a function that will return the date of Easter for any year after 1600. See the </span><strong><span>Resources</span></strong><span> tab for a detailed description of the algorithm.</span></p><h3><span>Examples</span></h3><pre><code>easterDate(1600) ➞ \"April 2\"\n\neasterDate(2020) ➞ \"April 12\"\n\neasterDate(1853) ➞ \"March 27\"\n\neasterDate(3535) ➞ \"April 14\"</code></pre><h3><span>Notes</span></h3><p><span>Before 1600 the Julian calendar was used in most countries. The algorithm we're using is based on the Gregorian calendar, which is still in use today.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math"
		],
		"tests": [
			"Test.assertEquals(easterDate(1715), \"April 21\")",
			"Test.assertEquals(easterDate(1758), \"March 26\")",
			"Test.assertEquals(easterDate(1872), \"March 31\")",
			"Test.assertEquals(easterDate(1899), \"April 2\")",
			"Test.assertEquals(easterDate(1900), \"April 15\")",
			"Test.assertEquals(easterDate(1944), \"April 9\")",
			"Test.assertEquals(easterDate(1989), \"March 26\")",
			"Test.assertEquals(easterDate(2000), \"April 23\")",
			"Test.assertEquals(easterDate(2070), \"March 30\")",
			"Test.assertEquals(easterDate(2099), \"April 12\")",
			"Test.assertEquals(easterDate(6009), \"April 12\")",
			"Test.assertEquals(easterDate(9999), \"March 28\")"
		],
		"starterFn": [
			"1\nfunction easterDate(y) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/TxJNFWzAk4cgGQqWT"
	},
	{
		"title": "Does the Cargo Fit? (Part 2)",
		"description": "<p><span>A ship has to transport cargo from one place to another, while picking up cargo along the way. Given the total amount of cargo and the types of cargo holds in the ship as arrays, create a function that returns </span><code>true</code><span> if each weight of cargo can fit in one hold, and </span><code>false</code><span> if it can't.</span></p><ul><li><span>\"S\" means 50 cargo space.</span></li><li><span>\"M\" means 100 cargo space.</span></li><li><span>\"L\" means 200 cargo space.</span></li></ul><h3><span>Examples</span></h3><pre><code>willFit([\"M\", \"L\", \"L\", \"M\"], [56, 62, 84, 90]) ➞ true\n\nwillFit([\"S\", \"S\", \"S\", \"S\", \"L\"], [40, 50, 60, 70 , 80, 90, 200]) ➞ false\n\nwillFit([\"L\", \"L\", \"M\"], [56, 62, 84, 90]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(willFit([\"M\", \"L\", \"L\", \"M\"], [56, 62, 84, 90]), true)",
			"Test.assertEquals(willFit([\"L\", \"L\", \"M\"], [56, 62, 84, 90]), true)",
			"Test.assertEquals(willFit([\"S\", \"S\", \"S\", \"S\", \"L\"], [40, 50, 60, 70 , 80, 90, 200]), false)",
			"Test.assertEquals(willFit([\"S\", \"L\"], [73 , 87, 95, 229]), false)",
			"Test.assertEquals(willFit([\"L\", \"L\", \"L\", \"L\"], [54, 54, 200, 200, 200]), true, \"54 and 54 can fit in one hold.\")"
		],
		"starterFn": [
			"1\nfunction willFit(holds, cargo) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yX8HRSfdHjKji8ikf"
	},
	{
		"title": "Generate N-Size Combinations from an Array",
		"description": "<p><span>Create a function that returns all </span><strong><span>combinations of size n</span></strong><span> from an array. Sort the array in ascending lexicographical order.</span></p><h3><span>Examples</span></h3><pre><code>combo([1, 2, 3, 4], 1) ➞ [[1], [2], [3], [4]]\n\ncombo([1, 2, 3, 4], 2) ➞ [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n\ncombo([1, 2, 3, 4], 5) ➞ []\n\ncombo([1, 2, 3, 4], 0) ➞ [[]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Lexicographical order: Compare the first element: </span><code>[1, 2]</code><span> will be before </span><code>[2, 4]</code><span>. If both share the same first element, compare the second element: </span><code>[1, 2]</code><span> is before </span><code>[1, 3]</code><span>, etc.</span></li><li><span>Return an empty array </span><code>[]</code><span> if </span><code>n</code><span> exceeds the length of the array.</span></li><li><span>Return  </span><code>[[]]</code><span> if </span><code>n</code><span> is </span><code>0</code><span> (see example #4). (Since there is only one combination of length 0: an empty array).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals"
		],
		"tests": [
			"Test.assertSimilar(combo([1, 2, 3, 4], 2), [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])",
			"Test.assertSimilar(combo([1, 2, 3, 4], 3), [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]])",
			"Test.assertSimilar(combo([1, 2, 3, 4], 1), [[1], [2], [3], [4]])",
			"Test.assertSimilar(combo([1, 2, 3, 4], 5), [])",
			"Test.assertSimilar(combo([1, 2, 3, 4], 0), [[]])",
			"Test.assertSimilar(combo(['a', 'b', 'c'], 0), [[]])",
			"Test.assertSimilar(combo(['a', 'b', 'c'], 4), [])",
			"Test.assertSimilar(combo(['a', 'b', 'c'], 1), [['a'], ['b'], ['c']])",
			"Test.assertSimilar(combo(['a', 'b', 'c'], 2), [['a', 'b'], ['a', 'c'], ['b', 'c']])",
			"Test.assertSimilar(combo(['a', 'b', 'c'], 3), [['a', 'b', 'c']])"
		],
		"starterFn": [
			"1\nfunction combo(arr, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/knZ2M5xC6XijT7M8w"
	},
	{
		"title": "Scrabble Scores (Part 2)",
		"description": "<p><span>This challenge is based on the game Scrabble. Each word you play is scored based on the point value of each tile/letter (see first table), as well as additional points conferred by any special squares your tiles land on (see second table).</span></p><p><span>Create a function that takes an array representing a row of squares in a Scrabble board, and a string representing the word to be played. The array will consist of </span><code>-</code><span> representing normal squares, and \"DL\", \"TL\", \"DW\" representing special squares. Return the index of the array where the first letter of the word should be placed to maximise the score of the word to be played. Return the lowest index, if several exist.</span></p><table><thead><tr><th><span>Letter</span></th><th><span>Points</span></th></tr></thead><tbody><tr><td><span>A</span></td><td><span>1</span></td></tr><tr><td><span>B</span></td><td><span>3</span></td></tr><tr><td><span>C</span></td><td><span>3</span></td></tr><tr><td><span>D</span></td><td><span>2</span></td></tr><tr><td><span>E</span></td><td><span>1</span></td></tr><tr><td><span>F</span></td><td><span>4</span></td></tr><tr><td><span>G</span></td><td><span>2</span></td></tr><tr><td><span>H</span></td><td><span>4</span></td></tr><tr><td><span>I</span></td><td><span>1</span></td></tr><tr><td><span>J</span></td><td><span>8</span></td></tr><tr><td><span>K</span></td><td><span>5</span></td></tr><tr><td><span>L</span></td><td><span>2</span></td></tr><tr><td><span>M</span></td><td><span>3</span></td></tr><tr><td><span>N</span></td><td><span>1</span></td></tr><tr><td><span>O</span></td><td><span>1</span></td></tr><tr><td><span>P</span></td><td><span>3</span></td></tr><tr><td><span>Q</span></td><td><span>10</span></td></tr><tr><td><span>R</span></td><td><span>1</span></td></tr><tr><td><span>S</span></td><td><span>1</span></td></tr><tr><td><span>T</span></td><td><span>1</span></td></tr><tr><td><span>U</span></td><td><span>1</span></td></tr><tr><td><span>V</span></td><td><span>4</span></td></tr><tr><td><span>W</span></td><td><span>4</span></td></tr><tr><td><span>X</span></td><td><span>8</span></td></tr><tr><td><span>Y</span></td><td><span>4</span></td></tr><tr><td><span>Z</span></td><td><span>10</span></td></tr></tbody></table><table><thead><tr><th><span>Special Square</span></th><th><span>Meaning</span></th></tr></thead><tbody><tr><td><span>DL</span></td><td><span>Double letter score - doubles the point value of a letter placed on the square</span></td></tr><tr><td><span>TL</span></td><td><span>Triple letter score - triples the point value of a letter placed on the square</span></td></tr><tr><td><span>DW</span></td><td><span>Double word score - doubles the score of an entire word if one of its letters is placed on the square</span></td></tr></tbody></table><h3><span>Examples</span></h3><pre><code>bestStart([\"-\",\"DW\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"DW\",\"-\"], \"quiz\") ➞ 0\n// Doubling the entire word maximises the score. Starting at\n// indices 1,10, and 11 have the same effect, but the function\n// should return the lowest index.\n\nbestStart([\"-\",\"DW\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"DW\",\"-\"], \"quit\") ➞ 5\n// Tripling the first letter alone gives a higher score than\n// doubling the entire word, as the other 3 letters have\n// low point-values.\n\nbestStart([\"-\",\"DW\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"DW\",\"-\"], \"quart\") ➞ 9\n// Tripling the first (high-scoring) letter, and doubling the word.\n\nbestStart([\"-\",\"DW\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"TL\",\"-\",\"-\",\"-\",\"DW\",\"-\"], \"quartz\") ➞ 0\n// Tripling the last (high-scoring) letter, and doubling the word.\n// Index 9 has the same effect (tripling the first letter, doubling\n// the word), but 0 is the lower index.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"conditions",
			"games"
		],
		"tests": [
			"Test.assertEquals(bestStart(['-','DW','-','-','-','TL','-','-','-','TL','-','-','-','DW','-'], 'quiz'), 0)",
			"Test.assertEquals(bestStart(['-','DW','-','-','-','TL','-','-','-','TL','-','-','-','DW','-'], 'quit'), 5)",
			"Test.assertEquals(bestStart(['-','DW','-','-','-','TL','-','-','-','TL','-','-','-','DW','-'], 'quart'), 9)",
			"Test.assertEquals(bestStart(['-','DW','-','-','-','TL','-','-','-','TL','-','-','-','DW','-'], 'quartz'), 0)",
			"​",
			"// more tests coming soon using other Scrabble board rows"
		],
		"starterFn": [
			"1\nfunction bestStart(arr, word) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iMrSBPsjm6M53xer8"
	},
	{
		"title": "The Complete Bracelet",
		"description": "<p><span>A </span><strong><span>complete bracelet</span></strong><span> is an array with at least one subsequence (pattern) repeating </span><em><span>at least two times</span></em><span>, and </span><em><span>completely</span></em><span> - the subsequence cannot be cut-off at any point. The subsequence </span><strong><span>must have length two or greater</span></strong><span>.</span></p><p><strong><span>Complete bracelets</span></strong><span>:</span></p><pre><code>[1, 2, 3, 3, 1, 2, 3, 3]  // Pattern: [1, 2, 3, 3]\n\n[1, 2, 1, 2, 1, 2, 1, 2]  // Pattern: [1, 2] or [1, 2, 1, 2]\n\n[1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7]  // Pattern: [1, 1, 6, 1, 1, 7]\n\n[4, 4, 3, 4, 4, 4, 4, 3, 4, 4]  // Pattern: [4, 4, 3, 4, 4]</code></pre><p><strong><span>Incomplete bracelets</span></strong><span>:</span></p><pre><code>[1, 2, 2, 2, 1, 2, 2, 2, 1]  // Incomplete (chopped off)\n\n[1, 1, 6, 1, 1, 7]  // Incomplete (subsequence repeats only once)</code></pre><p><span>Create a function that returns </span><code>true</code><span> if a bracelet is </span><strong><span>complete</span></strong><span>, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>completeBracelet([1, 2, 2, 1, 2, 2]) ➞ true\n\ncompleteBracelet([5, 1, 2, 2]) ➞ false\n\ncompleteBracelet([5, 5, 5]) ➞ false\n// potential pattern [5, 5] cut-off (patterns &gt;= 2)</code></pre><h3><span>Notes</span></h3><ul><li><span>Patterns must be at least two integers in length.</span></li><li><span>See </span><strong><span>Comments</span></strong><span> for a hint if you are stuck.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"scope",
			"validation"
		],
		"tests": [
			"Test.assertEquals(completeBracelet([1, 2, 2, 1, 2, 2]), true)",
			"Test.assertEquals(completeBracelet([5, 1, 2, 2]), false)",
			"Test.assertEquals(completeBracelet([5, 5, 5]), false)",
			"Test.assertEquals(completeBracelet([5, 5, 7, 7]), false)",
			"Test.assertEquals(completeBracelet([5, 5, 7, 7, 5, 5, 7, 7]), true)",
			"Test.assertEquals(completeBracelet([1, 2, 1, 2, 1, 2]), true)",
			"Test.assertEquals(completeBracelet([1, 2, 2, 2, 1, 2, 2]), false)",
			"Test.assertEquals(completeBracelet([1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2]), true)",
			"Test.assertEquals(completeBracelet([5, 2, 5, 5, 2, 5, 2, 5, 2, 2, 5, 2, 5, 2, 5, 5, 2, 5, 2, 5, 2, 2, 5, 2]), true)",
			"Test.assertEquals(completeBracelet([1, 2, 3, 3, 1, 2, 3, 3]), true)",
			"Test.assertEquals(completeBracelet([1, 2, 1, 2, 1, 2, 1, 2]), true)",
			"Test.assertEquals(completeBracelet([1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7, 1, 1, 6, 1, 1, 7]), true)",
			"Test.assertEquals(completeBracelet([4, 4, 3, 4, 4, 4, 4, 3, 4, 4]), true)",
			"Test.assertEquals(completeBracelet([1, 2, 2, 2, 1, 2, 2, 2, 1]), false)",
			"Test.assertEquals(completeBracelet([1, 1, 6, 1, 1, 7]), false)",
			"Test.assertEquals(completeBracelet([5, 5]), false)"
		],
		"starterFn": [
			"1\nfunction completeBracelet(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/v4fxXDcyqWx7FnX2s"
	},
	{
		"title": "Yahtzee Score Calculator",
		"description": "<p><span>In a Yahtzee game, the player has to score points rolling five dice trying to obtain a specific combination in every of the thirteen turns of the game.</span></p><table><thead><tr><th><span>Turn</span></th><th><span>Name</span></th><th><span>Points</span></th></tr></thead><tbody><tr><td><strong><span>1</span></strong></td><td><span>Aces</span></td><td><span>Sum of all dice showing </span><strong><span>1</span></strong></td></tr><tr><td><strong><span>2</span></strong></td><td><span>Twos</span></td><td><span>Sum of all dice showing </span><strong><span>2</span></strong></td></tr><tr><td><strong><span>3</span></strong></td><td><span>Threes</span></td><td><span>Sum of all dice showing </span><strong><span>3</span></strong></td></tr><tr><td><strong><span>4</span></strong></td><td><span>Fours</span></td><td><span>Sum of all dice showing </span><strong><span>4</span></strong></td></tr><tr><td><strong><span>5</span></strong></td><td><span>Fives</span></td><td><span>Sum of all dice showing </span><strong><span>5</span></strong></td></tr><tr><td><strong><span>6</span></strong></td><td><span>Sixes</span></td><td><span>Sum of all dice showing </span><strong><span>6</span></strong></td></tr><tr><td><strong><span>7</span></strong></td><td><span>Three of a Kind</span></td><td><span>Sum of all dice if there are </span><strong><span>at least</span></strong><span> three dice the same</span></td></tr><tr><td><strong><span>8</span></strong></td><td><span>Four of a Kind</span></td><td><span>Sum of all dice if there are </span><strong><span>at least</span></strong><span> four dice the same</span></td></tr><tr><td><strong><span>9</span></strong></td><td><span>Full House</span></td><td><span>25 points if there are two dice of a number and three dice of </span><strong><span>another</span></strong><span> number</span></td></tr><tr><td><strong><span>10</span></strong></td><td><span>Lower Straight</span></td><td><span>30 points if there is a sequence of </span><strong><span>at least</span></strong><span> four dice (</span><strong><span>1,2,3,4</span></strong><span> or </span><strong><span>2,3,4,5</span></strong><span> or </span><strong><span>3,4,5,6</span></strong><span>)</span></td></tr><tr><td><strong><span>11</span></strong></td><td><span>Higher Straight</span></td><td><span>40 points if there is a sequence of five dice (</span><strong><span>1,2,3,4,5</span></strong><span> or </span><strong><span>2,3,4,5,6</span></strong><span>)</span></td></tr><tr><td><strong><span>12</span></strong></td><td><span>Yahtzee</span></td><td><span>50 points if there are five dice the same</span></td></tr><tr><td><strong><span>13</span></strong></td><td><span>Chance</span></td><td><span>Sum of all dice</span></td></tr></tbody></table><p><span>If during a turn the rolled dice don't give a valid combination, the score for that turn will be equal to 0. If the total points scored during the first six turns are equal or greater than 63, an additional 35 points are added to the final score.</span></p><p><span>You are given an array </span><code>arr</code><span> that contains 13 arrays; each array is representing a set of five dice to check for the turn combination, accordingly to the order and to the description given in the above table. You have to implement a function that returns an integer being the final score made by the player.</span></p><h3><span>Example</span></h3><pre><code>yahtzeeScoreCalc([\n  [1, 3, 1, 1, 2], // Aces\n  [1, 2, 4, 5, 6], // Twos\n  [6, 3, 4, 3, 4], // Threes\n  [3, 1, 1, 4, 4], // Fours\n  [5, 5, 5, 5, 3], // Fives\n  [6, 2, 6, 6, 6], // Sixes\n  [1, 4, 4, 2, 1], // Three of a Kind\n  [3, 3, 3, 3, 3], // Four of a Kind\n  [2, 2, 1, 1, 2], // Full House\n  [6, 1, 2, 3, 4], // Lower Straight\n  [2, 3, 5, 4, 1], // Higher Straight\n  [4, 4, 4, 4, 4], // Yahtzee\n  [3, 3, 4, 5, 6], // Chance\n]) ➞ 279\n\n// Turn 1 ➞ There are 3 dice showing \"1\" ➞ 3 pts.\n// Turn 2 ➞ There is 1 die showing \"2\" ➞ 2 pts.\n// Turn 3 ➞ There are 2 dice showing \"3\" ➞ 6 pts.\n// Turn 4 ➞ There are 2 dice showing \"4\" ➞ 8 pts.\n// Turn 5 ➞ There are 4 dice showing \"5\" ➞ 20 pts.\n// Turn 6 ➞ There are 4 dice showing \"6\" ➞ 24 pts.\n// Turn 7 ➞ There aren't at least 3 dice the same ➞ 0 pts.\n// Turn 8 ➞ There are 4 dice the same ➞ 15 pts. (sum of all dice)\n// Turn 9 ➞ There is a Full House (two \"1\" and three \"2\") ➞ 25 pts.\n// Turn 10 ➞ There is a Lower Straight (1,2,3,4) ➞ 30 pts.\n// Turn 11 ➞ There is a Higher Straight (1,2,3,4,5) ➞ 40 pts.\n// Turn 12 ➞ Yahtzee!!! There are 5 dice the same ➞ 50 pts.\n// Turn 13 ➞ Sum of all dice ➞ 21 pts.\n\n// The sum of the points made in the first six turns is:\n// 3 + 2 + 6 + 8 + 20 + 24 = 63\n// There is a bonus of 35 points\n// The sum of the points made in the other seven turns is:\n// 0 + 15 + 25 + 30 + 40 + 50 + 21 = 181\n\n// The total is equal to:\n// 63 + 35 + 181 = 279</code></pre><h3><span>Notes</span></h3><ul><li><span>When playing to obtain a </span><em><span>Three of a Kind</span></em><span>, you have to search for </span><strong><span>at least</span></strong><span> three dice the same, and </span><strong><span>not exactly</span></strong><span> three. The same rule is applied to the </span><em><span>Four of a Kind</span></em><span> combination and to the </span><em><span>Lower Straight</span></em><span> combination (that is valid also if is obtained through a </span><em><span>Higher Straight</span></em><span>)</span></li><li><span>A </span><em><span>Full House</span></em><span> is valid if it's obtained with a combination of two different values: five dice the same are not a </span><em><span>Full House</span></em><span>.</span></li><li><span>Obviously, this is a version of Yahtzee adapted for this specific challenge: you can find the official rules (and a clearer table) in the </span><strong><span>Resources</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"games"
		],
		"tests": [
			"// Test #1",
			"Test.assertEquals(yahtzeeScoreCalc([",
			"  [1, 3, 1, 1, 2], // Aces",
			"  [1, 2, 4, 5, 6], // Twos",
			"  [6, 3, 4, 3, 4], // Threes",
			"  [3, 1, 1, 4, 4], // Fours",
			"  [5, 5, 5, 5, 3], // Fives",
			"  [6, 2, 6, 6, 6], // Sixes",
			"  [1, 4, 4, 2, 1], // Three of a Kind",
			"  [3, 3, 3, 3, 3], // Four of a Kind",
			"  [2, 2, 1, 1, 2], // Full House",
			"  [6, 1, 2, 3, 4], // Lower Straight",
			"  [2, 3, 5, 4, 1], // Higher Straight",
			"  [4, 4, 4, 4, 4], // Yahtzee",
			"  [3, 3, 4, 5, 6], // Chance",
			"]), 279, \"Look at the Example in the Instructions tab\")",
			"​",
			"// Test #2",
			"Test.assertEquals(yahtzeeScoreCalc([",
			"  [3, 3, 2, 6, 4], // Aces",
			"  [1, 1, 2, 5, 5], // Twos",
			"  [4, 4, 4, 1, 6], // Threes",
			"  [6, 5, 2, 2, 5], // Fours",
			"  [2, 1, 4, 4, 2], // Fives",
			"  [6, 2, 6, 2, 6], // Sixes",
			"  [6, 6, 4, 6, 1], // Three of a Kind"
		],
		"starterFn": [
			"1\nfunction yahtzeeScoreCalc(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4amPBJxbKN3ufTGm5"
	},
	{
		"title": "Convert an Arrow Function to a Regular Function",
		"description": "<p><span>In JavaScript ES6 an arrow function expression is a syntactically compact alternative to a regular function expression.</span></p><p><span>Create a function that takes a string representing a function and converts between an arrow function and a regular function</span></p><ul><li><span>If the input is a regular function, return an equivalent arrow function.</span></li><li><span>If the input is a arrow function, return an equivalent regular function.</span></li></ul><h3><span>Examples</span></h3><pre><code>// Function to arrow\n\n\"function () {}\" ➞ \"() =&gt; {}\"\n\n\"function name() {}\" ➞ \"const name = () =&gt; {}\"\n\n\"function name(str) { console.log(str); }\" ➞ \"const name = (str) =&gt; { console.log(str); }\"</code></pre><pre><code>// Arrow to function\n\n\"() =&gt; {}\" ➞ \"function () {}\"\n\n\"const name = () =&gt; {}\" ➞ \"function name() {}\"\n\n\"let name = (str) =&gt; { console.log(str); }\" ➞ \"function name(str) { console.log(str); }\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The body of the function can be multiline.</span></li><li><span>Be careful with spaces, sometimes they're optional.</span></li><li><span>An arrow function can be declared using </span><code>const</code><span> / </span><code>let</code><span> / </span><code>var</code><span> or nothing at all. However, when converting a regular function to an arrow, always use </span><code>const</code><span> (unless you're dealing with an anonymous function).</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"regex",
			"strings"
		],
		"tests": [
			"const funcs = [",
			"  `function(){}`,",
			"  `function () {}`,",
			"  `function name() {}`,",
			"  `function name () {}`,",
			"  `function name() { console.log('Hello') }`,",
			"  `function name(str){ console.log(str); }`,",
			"  `function name(str, num) {console.log(str, num);}`,",
			"  `function name( str, num ) {",
			"  console.log(str, num);",
			"}`,",
			"];",
			"const arrowsExpected = [",
			"  `() => {}`,",
			"  `() => {}`,",
			"  `const name = () => {}`,",
			"  `const name = () => {}`,",
			"  `const name = () => { console.log('Hello') }`,",
			"  `const name = (str) => { console.log(str); }`,",
			"  `const name = (str, num) => {console.log(str, num);}`,",
			"  `const name = ( str, num ) => {",
			"  console.log(str, num);",
			"}`,",
			"];",
			"​",
			"const arrows = ["
		],
		"starterFn": [
			"1\nfunction convertFunctions(fn) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Zf5a8fNYZ6hPJeXE4"
	},
	{
		"title": "Three Sum Problem",
		"description": "<p><span>Write a function that returns all sets of 3 elements that sum to 0.</span></p><h3><span>Examples</span></h3><pre><code>threeSum([0, 1, -1, -1, 2]) ➞ [[0, 1, -1], [-1, -1, 2]]\n\nthreeSum([0, 0, 0, 5, -5]) ➞ [[0, 0, 0], [0, 5, -5]]\n\nthreeSum([1, 2, 3]) ➞ []\n\nthreeSum([1]) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>The original array </span><strong><span>may contain duplicate numbers</span></strong><span>.</span></li><li><span>Each three-element subarray in your output should be </span><strong><span>distinct</span></strong><span>.</span></li><li><span>Subarrays should be ordered by the first element of the subarray.</span></li><li><span>Subarrays themselves should be ordered the same as the original array.</span></li><li><span>Return an empty array if no 3  elements sum to zero.</span></li><li><span>Return an empty array if there are fewer than 3 elements.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(threeSum([0, 1, -1, -1, 2]), [[0, 1, -1], [-1, -1, 2]])",
			"Test.assertSimilar(threeSum([0, 0, 0, 5, -5]), [[0, 0, 0], [0, 5, -5]])",
			"Test.assertSimilar(threeSum([0, -1, 1, 0, -1, 1]), [[0, -1, 1], [0, 1, -1], [-1, 1, 0], [-1, 0, 1], [1, 0, -1]])",
			"Test.assertSimilar(threeSum([0, 5, 5, 0, 0]), [[0, 0, 0]])",
			"Test.assertSimilar(threeSum([0, 5, -5, 0, 0]), [[0, 5, -5], [0, 0, 0], [5, -5, 0]])",
			"Test.assertSimilar(threeSum([1, 2, 3, -5, 8, 9, -9, 0]), [[1, 8, -9], [2, 3, -5], [9, -9, 0]])",
			"Test.assertSimilar(threeSum([0, 0, 0]), [[0, 0, 0]])",
			"Test.assertSimilar(threeSum([1, 5, 5, 2]), [])",
			"Test.assertSimilar(threeSum([1, 1]), [])",
			"Test.assertSimilar(threeSum([]), [])"
		],
		"starterFn": [
			"1\nfunction threeSum(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iPni4XaMwG6qAjxgj"
	},
	{
		"title": "The Dice Game",
		"description": "<p><span>Four friends are playing a simple dice game (players are denoted p1, p2, p3 and p4). In each round, all players roll a pair of six-sided dice. The player with the lowest total score is removed. If the lowest score is shared by two or more players, the player in that group with the lowest score from their </span><em><span>first</span></em><span> die is removed. If the lowest score is still shared (i.e. two or more players have the same rolls in the same order), then </span><em><span>all</span></em><span> players roll again. This process continues until one player remains. Given an array of scores only (given in player order for each round), return the winning player.</span></p><h3><span>Example</span></h3><pre><code>diceGame([[6, 2], [4, 3], [3, 4], [5, 4], [3, 5], [1, 5], [4, 3], [1, 5], [1, 5], [5, 6], [2, 2]]) ➞ \"p1\"\n\n             p1      p2      p3      p4\nRound 1 -&gt; [6, 2], [4, 3], [3, 4], [5, 4]  Player 3 removed.\nRound 2 -&gt; [3, 5], [1, 5],         [4, 3]  Player 2 removed.\nRound 3 -&gt; [1, 5],                 [1, 5]  No lowest score, players roll again.\nRound 4 -&gt; [5, 6],                 [2, 2]  Player 1 wins!</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games"
		],
		"tests": [
			"Test.assertEquals(diceGame([[1, 3], [2, 6], [6, 3], [5, 6], [2, 2], [5, 6], [5, 4], [1, 3], [5, 6]]), 'p4')",
			"Test.assertEquals(diceGame([[4, 4], [4, 3], [1, 1], [1, 1], [3, 1], [4, 5], [2, 6], [2, 3], [1, 5], [5, 3], [4, 5], [5, 2], [2, 1]]), 'p3')",
			"Test.assertEquals(diceGame([[6, 1], [4, 3], [2, 5], [1, 4], [6, 2], [2, 5], [1, 4], [6, 4], [4, 3]]), 'p1')",
			"Test.assertEquals(diceGame([[1, 2], [2, 1], [4, 4], [1, 2], [1, 3], [1, 5], [2, 1], [4, 1], [5, 6], [5, 1], [4, 2], [5, 2], [5, 1]]), 'p1')",
			"Test.assertEquals(diceGame([[1, 2], [5, 6], [1, 3], [6, 5], [4, 6], [1, 3], [1, 3], [5, 3], [4, 1], [1, 1], [3, 3], [4, 1]]), 'p2')",
			"Test.assertEquals(diceGame([[1, 2], [2, 3], [5, 4], [4, 4], [5, 2], [1, 1], [3, 6], [4, 4], [2, 2]]), 'p2')",
			"Test.assertEquals(diceGame([[1, 4], [4, 2], [3, 5], [4, 2], [1, 2], [1, 2], [2, 4], [3, 5], [4, 1], [2, 2], [1, 1], [1, 1], [4, 3], [1, 1]]), 'p2')",
			"Test.assertEquals(diceGame([[2, 6], [3, 6], [6, 3], [6, 5], [4, 5], [5, 3], [5, 6], [2, 6], [6, 5]]), 'p4')",
			"Test.assertEquals(diceGame([[1, 1], [4, 3], [2, 1], [6, 2], [3, 2], [3, 2], [4, 2], [2, 1], [6, 5], [6, 2], [4, 5], [4, 5], [5, 3], [3, 3]]), 'p3')",
			"Test.assertEquals(diceGame([[5, 1], [2, 6], [1, 6], [6, 4], [3, 4], [2, 5], [6, 1], [3, 2], [4, 1]]), 'p4')",
			"Test.assertEquals(diceGame([[1, 4], [3, 6], [1, 6], [6, 1], [4, 1], [4, 3], [6, 5], [5, 6], [5, 6], [2, 1], [2, 4]]), 'p4')",
			"Test.assertEquals(diceGame([[1, 3], [6, 5], [5, 4], [5, 4], [2, 2], [4, 6], [4, 1], [5, 5], [4, 5]]), 'p3')",
			"Test.assertEquals(diceGame([[2, 3], [3, 6], [5, 4], [3, 1], [2, 5], [1, 5], [5, 3], [4, 3], [2, 1]]), 'p1')",
			"Test.assertEquals(diceGame([[4, 2], [4, 4], [1, 4], [1, 4], [1, 3], [3, 5], [6, 5], [1, 2], [5, 1], [6, 1], [2, 4], [2, 4], [5, 4]]), 'p2')",
			"Test.assertEquals(diceGame([[2, 5], [4, 1], [2, 1], [4, 4], [6, 5], [4, 4], [1, 4], [3, 1], [1, 5]]), 'p2')",
			"Test.assertEquals(diceGame([[6, 3], [5, 5], [2, 3], [6, 6], [2, 5], [5, 1], [4, 4], [2, 2], [1, 3]]), 'p1')",
			"Test.assertEquals(diceGame([[6, 2], [6, 1], [6, 1], [2, 2], [1, 1], [4, 3], [2, 6], [4, 6], [4, 6], [3, 4], [3, 5]]), 'p3')",
			"Test.assertEquals(diceGame([[1, 6], [3, 2], [3, 4], [1, 2], [4, 1], [4, 2], [2, 5], [4, 1], [5, 1]]), 'p3')",
			"Test.assertEquals(diceGame([[3, 4], [2, 5], [5, 5], [2, 5], [6, 4], [6, 5], [6, 2], [6, 2], [3, 5], [6, 4], [4, 2], [5, 2], [3, 2], [6, 4], [1, 2], [5, 4], [5, 5]]), 'p2')",
			"Test.assertEquals(diceGame([[1, 5], [3, 1], [2, 3], [5, 3], [1, 2], [1, 2], [6, 3], [2, 2], [6, 3], [2, 2], [5, 5], [3, 1], [3, 1], [6, 6], [6, 4], [5, 3], [3, 4], [6, 4]]), 'p3')"
		],
		"starterFn": [
			"1\nfunction diceGame(scores) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/FC36gN8o9ZMtsqgMu"
	},
	{
		"title": "Josephus Problem",
		"description": "<p><span>This classic problem dates back to Roman times. There are 41 soldiers arranged in a circle. Every third soldier is to be killed by their captors, continuing around the circle until only one soldier remains. He is to be freed. Assuming you would like to stay alive, at what position in the circle would you stand?</span></p><p><span>Generalize this problem by creating a function that accepts the number of soldiers </span><code>n</code><span> and the interval at which they are killed </span><code>i</code><span>, and returns the position of the fortunate survivor.</span></p><h3><span>Examples</span></h3><pre><code>josephus(41, 3) ➞ 31\n\njosephus(35, 11) ➞ 18\n\njosephus(11, 1) ➞ 11\n\njosephus(2, 2) ➞ 1</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume the positions are numbered 1 to </span><code>n</code><span> going </span><strong><span>clockwise</span></strong><span> around the circle.</span></li><li><span>If the interval is 3, the first soldiers to die are at positions 3, 6, and 9.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(josephus(41, 3), 31)",
			"Test.assertEquals(josephus(14, 2), 13)",
			"Test.assertEquals(josephus(35, 11), 18)",
			"Test.assertEquals(josephus(20, 1), 20)",
			"Test.assertEquals(josephus(15, 15), 4)"
		],
		"starterFn": [
			"1\nfunction josephus(n, i) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/EcEN8FnruPEj6x5k4"
	},
	{
		"title": "Bit Rotation",
		"description": "<p><span>JavaScript offers some bit operations but not bit rotation. To complete that, create a function that takes three parameters:</span></p><ol><li><code>n</code><span>: Integer, which in binary representaion should be rotated.</span></li><li><code>m</code><span>:  Number of rotation steps that should be performed.</span></li><li><code>d</code><span>: Boolean value; </span><code>true</code><span> = rotation right, </span><code>false</code><span> = rotation left.</span></li></ol><p><span>Your function should return an integer as a result of its rotated binary representation.</span></p><h3><span>Examples</span></h3><pre><code>bitRotate(8, 1, true) ➞ 4\n// 8 in bin: 1000, rotated 1 step to the right: 0100, in dec: 4\n\nbitRotate(16, 1, false) ➞ 1\n// 16 in bin: 10000, rotated 1 step to the left: 00001, in dec: 1\n\nbitRotate(17, 2, false) ➞ 6\n// 17 in bin: 10001, rotated 2 steps to the left: 00110, in dec: 6</code></pre><h3><span>Notes</span></h3><p><span>For parameters use unsigned integers only.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"strings"
		],
		"tests": [
			"Test.assertEquals(bitRotate(8, 1, true), 4)",
			"Test.assertEquals(bitRotate(16, 2, true), 4)",
			"Test.assertEquals(bitRotate(283, 7, true), 110)",
			"Test.assertEquals(bitRotate(16, 1, false), 1)",
			"Test.assertEquals(bitRotate(17, 2, false), 6)",
			"Test.assertEquals(bitRotate(122, 7, false), 122)",
			"Test.assertEquals(bitRotate(125, 10, true), 95)",
			"Test.assertEquals(bitRotate(1022, 8, false), 767)",
			"Test.assertEquals(bitRotate(33, 6, true), 33)"
		],
		"starterFn": [
			"1\nfunction bitRotate(n, m, d) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GAgu4fL6JY9ZnFWcd"
	},
	{
		"title": "Longest Alternating Substring",
		"description": "<p><span>Given a string of digits, return the longest substring with </span><em><span>alternating</span></em><span> odd/even or even/odd digits. If two or more substrings have the same length, return the substring that occurs first.</span></p><h3><span>Examples</span></h3><pre><code>longestSubstring(\"225424272163254474441338664823\") ➞ \"272163254\"\n// substrings = 254, 272163254, 474, 41, 38, 23\n\nlongestSubstring(\"594127169973391692147228678476\") ➞ \"16921472\"\n// substrings = 94127, 169, 16921472, 678, 476\n\nlongestSubstring(\"721449827599186159274227324466\") ➞ \"7214\"\n// substrings = 7214, 498, 27, 18, 61, 9274, 27, 32\n// 7214 and 9274 have same length, but 7214 occurs first.</code></pre><h3><span>Notes</span></h3><p><span>The minimum alternating substring size is 2.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math"
		],
		"tests": [
			"Test.assertEquals(longestSubstring(\"844929328912985315632725682153\"), \"56327256\")",
			"Test.assertEquals(longestSubstring(\"769697538272129475593767931733\"), \"27212947\")",
			"Test.assertEquals(longestSubstring(\"937948289456111258444958189244\"), \"894561\")",
			"Test.assertEquals(longestSubstring(\"736237766362158694825822899262\"), \"636\")",
			"Test.assertEquals(longestSubstring(\"369715978955362655737322836233\"), \"369\")",
			"Test.assertEquals(longestSubstring(\"345724969853525333273796592356\"), \"496985\")",
			"Test.assertEquals(longestSubstring(\"548915548581127334254139969136\"), \"8581\")",
			"Test.assertEquals(longestSubstring(\"417922164857852157775176959188\"), \"78521\")",
			"Test.assertEquals(longestSubstring(\"251346385699223913113161144327\"), \"638569\")",
			"Test.assertEquals(longestSubstring(\"483563951878576456268539849244\"), \"18785\")",
			"Test.assertEquals(longestSubstring(\"853667717122615664748443484823\"), \"474\")",
			"Test.assertEquals(longestSubstring(\"398785511683322662883368457392\"), \"98785\")",
			"Test.assertEquals(longestSubstring(\"368293545763611759335443678239\"), \"76361\")",
			"Test.assertEquals(longestSubstring(\"775195358448494712934755311372\"), \"4947\")",
			"Test.assertEquals(longestSubstring(\"646113733929969155976523363762\"), \"76523\")",
			"Test.assertEquals(longestSubstring(\"575337321726324966478369152265\"), \"478369\")",
			"Test.assertEquals(longestSubstring(\"754388489999793138912431545258\"), \"545258\")",
			"Test.assertEquals(longestSubstring(\"198644286258141856918653955964\"), \"2581418569\")",
			"Test.assertEquals(longestSubstring(\"643349187319779695864213682274\"), \"349\")",
			"Test.assertEquals(longestSubstring(\"919331281193713636178478295857\"), \"36361\")"
		],
		"starterFn": [
			"1\nfunction longestSubstring(digits) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZMaiojWoPqLDemLXh"
	},
	{
		"title": "Interquartile Range (IQR)",
		"description": "<p><span>The median of a data sample is the value that separates the higher half and the lower half of the data. For example, the median of </span><code>[1, 2, 3]</code><span> is </span><code>2</code><span>, and the median of </span><code>[1, 2, 3, 4]</code><span> is </span><code>2.5</code><span> (because (2 + 3) / 2 = 2.5). Another way of saying \"median\" is to say \"Q2\" (it's the second quartile). Q1 and Q3 are the medians of the values above or below the Q2. The IQR is equal to Q3 - Q1. Here's an example:</span></p><p><span>Let's say your data sample is: 1, 2, 3, 4</span></p><ul><li><span>The median (Q2) is: (2+3)/2 =2.5</span></li><li><span>The lower half is: 1, 2</span></li><li><span>The upper half is: 3, 4</span></li><li><span>Q1 (median of the first half): (1+2)/2 = 1.5</span></li><li><span>Q3 (median of the second half): (3+4)/2 = 3.5</span></li><li><span>IQR = Q3 - Q1 = 3.5 - 1.5 = 2</span></li></ul><p><span>If the length of the data sample is odd, as in: 1, 2, 3, 4, 5</span></p><ul><li><span>The median (Q2) is: 3 (the number is in the middle, so no need to average).</span></li><li><span>3 is the number that separates the upper and lower data, so we exclude it.</span></li><li><span>The lower half is: 1, 2</span></li><li><span>The upper half is: 4, 5</span></li><li><span>Q1 (median of the first half): (1+2)/2 = 1.5</span></li><li><span>Q3 (median of the second half): (4+5)/2 = 4.5</span></li><li><span>IQR = Q3 - Q1 = 4.5 - 1.5 = 3</span></li></ul><p><span>For a more detailed explanation, please check the </span><strong><span>Resources</span></strong><span> tab.</span></p><p><span>Make a function that takes an array of floats and/or integers and returns the IQR for that array. The return type can be </span><code>float</code><span> or </span><code>int</code><span>. It doesn't matter.</span></p><h3><span>Examples</span></h3><pre><code>iqr([1, 2, 3, 4]) ➞ 2.0\n\niqr([5, 4, 3, 2, 1]) ➞ 3.0\n\niqr([-3.1, -3.8, -14, 23, 0]) ➞ 20.4</code></pre><h3><span>Notes</span></h3><ul><li><span>In all test cases, none of the solutions have repeating decimals, so you shouldn't need to worry about rounding the result.</span></li><li><span>There is no universal agreement on how to select quartile values, so if you use an online calculator (such as Wolfram Alpha), you could get a different result depending on how the quartile values were calculated. You need to obtain the quartile values in the way described in the description, which is taken from the description given on khanacademy.com (see the </span><strong><span>Resources</span></strong><span> tab).</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(iqr([1, 1, 3, 4, 4, 5, 5, 5, 6, 7, 9]), 3.0)",
			"Test.assertEquals(iqr([6, 4, 4, 4, 3, 3, 2, 1]), 1.5)",
			"Test.assertEquals(iqr([8.2, 3, 6, 6, 5, 2.6, 8, 4.9, 5, 7.9]), 3.0)",
			"Test.assertEquals(iqr([14, 28, 0, 15, 12, 15, 15, 15]), 2.0)",
			"Test.assertEquals(iqr([-3.1, -3.8, -14, 23, 0]), 20.4)",
			"Test.assertEquals(iqr([-12, 0, 0, 0, 3]), 7.5)",
			"Test.assertEquals(iqr([-3, 0, 0, 0, 0, 4.7]), 0.0)",
			"Test.assertEquals(iqr([0, 0, 0, 0, 0, 0]), 0.0)",
			"Test.assertEquals(iqr([0, 0, 0, 0, 0, 0, 0]), 0.0)"
		],
		"starterFn": [
			"1\nfunction iqr(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/q64D5jtXYtRoeAEmt"
	},
	{
		"title": "Spiral Transposition",
		"description": "<p><span>Create a function that takes a two-dimensional array as an argument and returns a one-dimensional array with the values of the original 2d array that are arranged by spiralling through it (starting from the top-left).</span></p><h3><span>Examples</span></h3><pre><code>spiral([\n  [7, 2],\n  [5, 0]\n])\n\n➞ [7, 2, 0, 5]\n\nspiral([\n  [1, 2, 3],  \n  [4, 5, 6],\n  [7, 8, 9]\n])\n\n➞ [1, 2, 3, 6, 9, 8, 7, 4, 5]\n\nspiral([\n  [1, 1, 1],  \n  [4, 5, 2],\n  [3, 3, 2] \n])\n\n➞ [1, 1, 1, 2, 2, 3, 3, 4, 5]</code></pre><h3><span>Notes</span></h3><p><span>If you do not understand the instructions, write the 3x3 array example on a piece of paper and trace the output through it.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertSimilar(",
			"  spiral(",
			"    [",
			"      [7, 2],",
			"      [5, 0]",
			"    ]",
			"  ),",
			"  [7, 2, 0, 5],",
			"  'Should work with a 2x2 array'",
			");",
			"​",
			"Test.assertSimilar(",
			"  spiral(",
			"    [",
			"      [1, 2, 3],",
			"      [4, 5, 6],",
			"      [7, 8, 9]",
			"    ]",
			"  ),",
			"  [1, 2, 3, 6, 9, 8, 7, 4, 5],",
			"  'Should work with a 3x3 array'",
			");",
			"​",
			"Test.assertSimilar(",
			"  spiral(",
			"    ["
		],
		"starterFn": [
			"1\nfunction spiral(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gdmrXxEej2fPZtF4S"
	},
	{
		"title": "Edabit Platform",
		"description": "<p><span>In this challenge, process the inputs given by a player playing a simple platform game. Each level of the game is represented by a matrix that contains two sub-arrays:</span></p><ul><li><span>The first (or upper) array is the </span><em><span>sky</span></em><span>.</span></li><li><span>The second (or lower) array is the </span><em><span>ground</span></em><span>.</span></li></ul><p><span>Each sub-array contains ten elements, being either collectible items (in the </span><em><span>sky</span></em><span>) or walkeable tiles, pitfalls and enemies (in the </span><em><span>ground</span></em><span>).</span></p><pre><code>level1 = [\n  [\" \", \"°\", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]</code></pre><p><span>In the </span><em><span>sky</span></em><span>, there are empty cells (a single space </span><code>\" \"</code><span>), coins (a degree symbol </span><code>\"°\"</code><span>) and double coins (a percentage symbol </span><code>\"%\"</code><span>):</span></p><ul><li><span>A </span><strong><span>coin</span></strong><span> is worthy </span><strong><span>25 points</span></strong><span>.</span></li><li><span>A </span><strong><span>double coin</span></strong><span> is worthy </span><strong><span>50 points</span></strong><span>.</span></li></ul><p><span>In the </span><em><span>ground</span></em><span>, there are walkeable tiles (an underscore </span><code>\"_\"</code><span>), pitfalls (a single space </span><code>\" \"</code><span>) and enemies (an exclamation mark </span><code>\"!\"</code><span>):</span></p><ul><li><span>If the player goes through a pitfall or if he touches an enemy, the game ends.</span></li></ul><p><span>The player starts at the first </span><em><span>ground</span></em><span> tile (the first cell of the second sub-array), and through its inputs he can do three different moves:</span></p><p><code>\"F\"</code><span> is for \"</span><strong><span>F</span></strong><span>orward\", the player moves to the next tile in the </span><em><span>ground</span></em><span>.</span></p><pre><code>// The \"x\" is to represent the position of player\n\n// With input \"F\" player moves forward (1 tile)\n// He touches the enemy\n\nlevel1 = [\n  [\" \", \"°\", \" \", ...],\n  [\"x_\", \"!\", \"_\", ...]\n]\n\nlevel1 = [\n  [\" \", \"°\", \" \", ...],\n  [\"_\", \"x!\", \"_\", ...]\n]</code></pre><p><span> </span><code>\"U\"</code><span> is for \"</span><strong><span>U</span></strong><span>p\", the player jumps up from a </span><em><span>ground</span></em><span> tile touching the </span><em><span>sky</span></em><span> and falling back in the same </span><em><span>ground</span></em><span> tile</span></p><pre><code>// The \"x\" is to represent the position of player\n\n// With input \"U\" the player jumps up and falls back in the same tile\n// He collects nothing, because there's empty sky\n\nlevel1 = [\n  [\" \", \"°\", \" \" ...],\n  [\"x_\", \"!\", \"_\" ...]\n]\n\nlevel1 = [\n  [\"x\", \"°\", \" \" ...],\n  [\"_\", \"!\", \"_\" ...]\n]\n\nlevel1 = [\n  [\"_\", \"°\", \" \" ...],\n  [\"x_\", \"!\", \"_\" ...]\n]</code></pre><p><code>\"J\"</code><span> is for \"</span><strong><span>J</span></strong><span>ump\", the player jumps up and right from a </span><em><span>ground</span></em><span> tile reaching the </span><em><span>sky</span></em><span> in the next frame, and falling at the </span><em><span>ground</span></em><span> two tiles after its starting position.</span></p><pre><code>// The \"x\" is to represent the position of player\n\n// With input \"J\" the player jumps up and right\n// He reach the sky of next frame, and he falls at ground two tiles on the right\n// He collects a coin avoiding the enemy\n\nlevel1 = [\n  [\" \", \"°\", \" \" ...],\n  [\"x_\", \"!\", \"_\" ...]\n]\n\nlevel1 = [\n  [\" \", \"x\", \" \" ...],\n  [\"_\", \"!\", \"_\" ...]\n]\n\nlevel1 = [\n  [\" \", \" \", \" \" ...],\n  [\"_\", \"!\", \"x_\" ...]\n]</code></pre><p><span>A player submits 10 inputs, and if he reaches the last </span><em><span>ground</span></em><span> tile (or if he trespass it), the level is completed. If he touches an enemy or falls through a pitfall, it's game over. If the player completes the level (or die) before the tenth input, the game stops so that the inputs in excess are not considered.</span></p><p><span>Given a matrix </span><code>level</code><span> and a string of ten uppercase letters </span><code>input</code><span>, implement a function that returns:</span></p><ul><li><span>The string </span><code>\"Level completed! Your score: XXX!\"</code><span> if the player completes the level.</span></li><li><span>The string </span><code>\"Game over! Your score: XXX!\"</code><span> if the player falls or touches an enemy.</span></li></ul><p><span>Replacing </span><em><span>XXX</span></em><span> with the score given by the coins and double coins collected before the game stops.</span></p><h3><span>Example 1</span></h3><pre><code>// The \"x\" is to represent the position of player after a move\n\nedaPlatform([\n  [\" \", \"°\", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n], \"JFUJFUJUFF\") ➞ \"Level completed! Your score: 125!\"\n\n// J: Player jumps up and right to avoid the enemy, collecting a coin for 25 points\n\n[\n  [\" \", \" \", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"x\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// F: Player goes forward\n\n[\n  [\" \", \" \", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"x\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// U: Player jumps up collecting a double coin for 50 points\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"x\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// J: Player jumps up and right to avoid the pitfall\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \" \", \" \", \"x\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// F: Player goes forward\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \" \", \" \", \"_\", \"x\", \" \", \"_\", \"_\"]\n]\n\n// U: Player jumps up collecting a coin for 25 points\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \" \", \" \", \"_\", \"x\", \" \", \"_\", \"_\"]\n]\n\n// J: Player jumps up and right to avoid the pitfall\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \" \", \" \", \"_\", \"_\", \" \", \"x\", \"_\"]\n]\n\n// U: Player jumps up to collect a coin\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\"_\", \"!\", \"_\", \" \", \" \", \"_\", \"_\", \" \", \"x\", \"_\"]\n]\n\n// F: Player goes forward to the last tile and completes the level\n\n[\n  [\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"],\n  [\"_\", \"!\", \"_\", \" \", \" \", \"_\", \"_\", \" \", \"_\", \"x\"]\n]\n\n// The last input \"F\" is not considered because the level has been completed</code></pre><h3><span>Example 2</span></h3><pre><code>// The \"x\" is to represent the position of player after a move\n\nedaPlatform([\n  [\" \", \"°\", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n], \"JFFJUJJUFF\") ➞ \"Game over! Your score: 25!\"\n\n// J: Player jumps up and right to avoid the enemy, collecting a coin for 25 points\n\n[\n  [\" \", \" \", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"x\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// F: Player goes forward\n\n[\n  [\" \", \" \", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"x\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// F: Player goes forward and falls through the pitfall\n\n[\n  [\" \", \" \", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"_\", \"fall\", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// The other seven inputs are not considered because it's game over</code></pre><h3><span>Example 3</span></h3><pre><code>// The \"x\" is to represent the position of player after a move\n\nedaPlatform([\n  [\" \", \"°\", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"!\", \"_\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n], \"FFFFJJUJJJ\") ➞ \"Game over! Your score: 0!\"\n\n// F: Player goes forward and touches the enemy\n\n[\n  [\" \", \"°\", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],\n  [\"_\", \"enemy\", \"_\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]\n]\n\n// The other 9 inputs are not considered</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember that a level is completed if the player reaches the last </span><em><span>ground</span></em><span> tile or if he trespass it through a </span><strong><span>J</span></strong><span>UMP.</span></li><li><span>Data (levels and inputs) will be always valid. You can assume that an end is always assured (through completing the level or through a game over).</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"games",
			"loops"
		],
		"tests": [
			"let level1 = [",
			"  [\" \", \"°\", \" \", \"%\", \" \", \" \", \"°\", \" \", \"°\", \" \"],",
			"  [\"_\", \"!\", \"_\", \"_\", \" \", \"_\", \"_\", \" \", \"_\", \"_\"]",
			"],",
			"    input1a = \"JFUJFUJUFF\",",
			"    input1b = \"JFJFJFFFFF\",",
			"    input1c = \"JFFJUJJUFF\",",
			"    input1d = \"FFFFJJUJJJ\";",
			"​",
			"Test.assertEquals(edaPlatform(level1, input1a), \"Level completed! Your score: 125!\");",
			"Test.assertEquals(edaPlatform(level1, input1b), \"Level completed! Your score: 25!\");",
			"Test.assertEquals(edaPlatform(level1, input1c), \"Game over! Your score: 25!\");",
			"Test.assertEquals(edaPlatform(level1, input1d), \"Game over! Your score: 0!\");",
			"​",
			"let level2 = [",
			"  [\" \", \"°\", \"°\", \" \", \" \", \" \", \"°\", \" \", \" \", \"%\"],",
			"  [\"_\", \"_\", \" \", \"_\", \"_\", \"!\", \"_\", \"!\", \"_\", \"_\"]",
			"],",
			"    input2a = \"FUJFJUJJFF\",",
			"    input2b = \"FJFJJFJJUF\",",
			"    input2c = \"JFUFFFJUUU\",",
			"    input2d = \"FJFFUJJFUJ\";",
			"​",
			"Test.assertEquals(edaPlatform(level2, input2a), \"Level completed! Your score: 125!\");",
			"Test.assertEquals(edaPlatform(level2, input2b), \"Level completed! Your score: 25!\");",
			"Test.assertEquals(edaPlatform(level2, input2c), \"Game over! Your score: 25!\");"
		],
		"starterFn": [
			"1\nfunction edaPlatform(level, input) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/uPMuscpXZgwvZmTer"
	},
	{
		"title": "Economical Numbers",
		"description": "<p><span>A number is Economical if the quantity of digits of its prime factorization (including exponents greater than 1) is equal or lower than the digits quantity of the number itself.</span></p><p><span>Given an integer </span><code>n</code><span>, implement a function that returns a string:</span></p><ul><li><code>\"Equidigital\"</code><span> if the quantity of digits of the prime factorization (including exponents greater than 1) is equal to the quantity of digits of </span><code>n</code><span>;</span></li><li><code>\"Frugal\"</code><span> if the quantity of digits of the prime factorization (including exponents greater than 1) is lower than the quantity of digits of </span><code>n</code><span>;</span></li><li><code>\"Wasteful\"</code><span> if none of the two above conditions is true.</span></li></ul><h3><span>Examples</span></h3><pre><code>isEconomical(14) ➞ \"Equidigital\"\n// The prime factorization of 14 (2 digits) is [2, 7] (2 digits)\n// Exponents equal to 1 are not counted\n\nisEconomical(125) ➞ \"Frugal\"\n// The prime factorization of 125 (3 digits) is [5^3] (2 digits)\n// Notice how exponents greater than 1 are counted\n\nisEconimical(1024) ➞ \"Frugal\"\n// The prime factorization of 1024 (4 digits) is [2^10] (3 digits)\n\nisEconomical(30) ➞ \"Wasteful\"\n// The prime factorization of 30 (2 digits) is [2, 3, 5] (3 digits)</code></pre><h3><span>Notes</span></h3><ul><li><span>Any given </span><code>n</code><span> will be a positive integer greater than 1.</span></li><li><span>Remember to count also the exponents greater than 1 into the prime factorization: 2¹ = 2 (one digit), 2² = 22 (two digits), 2¹° = 210 (three digits)...</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isEconomical(14), \"Equidigital\", \"Example #1\");",
			"Test.assertEquals(isEconomical(125), \"Frugal\", \"Example #2\");",
			"Test.assertEquals(isEconomical(1024), \"Frugal\", \"Example #3\");",
			"Test.assertEquals(isEconomical(30), \"Wasteful\", \"Example #4\");",
			"Test.assertEquals(isEconomical(81), \"Equidigital\");",
			"Test.assertEquals(isEconomical(243), \"Frugal\");",
			"Test.assertEquals(isEconomical(5), \"Equidigital\");",
			"Test.assertEquals(isEconomical(6), \"Wasteful\");",
			"Test.assertEquals(isEconomical(1267), \"Equidigital\");",
			"Test.assertEquals(isEconomical(1701), \"Frugal\");",
			"Test.assertEquals(isEconomical(1267), \"Equidigital\");",
			"Test.assertEquals(isEconomical(12871), \"Equidigital\");",
			"Test.assertEquals(isEconomical(88632), \"Wasteful\");"
		],
		"starterFn": [
			"1\nfunction isEconomical(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/W3Tw2TK8nF8ej9YPC"
	},
	{
		"title": "Regex HTML Get Request Checker",
		"description": "<p><span>You are to create a special regex that will detect if an HTML GET request is valid or not (with some gotchas). Strings are formated like so:</span></p><pre><code>name1=val1&amp;name2=val2&amp;name3=val3&amp;name4=val4</code></pre><p><span>You need to detect requests with the four names: </span><em><span>\"val\", \"id\", \"desc\", \"time\"</span></em><span> (each value can have a different order).</span></p><h3><span>Example #1</span></h3><pre><code>\"val=val1&amp;id=val2&amp;desc=val3&amp;time=val4\"\n\n\"id=val2&amp;val=val1&amp;time=val4&amp;desc=val3\"</code></pre><p><span>Each name has a specific value:</span></p><ol><li><strong><span>val</span></strong><span> could contain  string a to z and number 0 to 9 (any case accepted).</span></li><li><strong><span>id</span></strong><span> is a number from 0 to 10.</span></li><li><strong><span>desc</span></strong><span> could contain strings a to z.</span></li><li><strong><span>time</span></strong><span> is formated value (00:00 to 99:99).</span></li></ol><h3><span>Example #2</span></h3><pre><code>\"val=test1151&amp;id=5&amp;desc=helloWorld&amp;time=54:33\"\n\n\"id=10&amp;val=123test&amp;time=99:00&amp;desc=itsok\"</code></pre><p><span>When the regex checker is finished, you need to put all names and their values from the request into an object and return it with the given function </span><code>dataRegexLovely()</code><span>. The parameter </span><code>str</code><span> is a valid GET request (no gotchas).</span></p><h3><span>Notes</span></h3><ul><li><span>The regex length is limited to &lt; 161 characters ( \"/\" and </span><span>[</span><span>flags] included).</span></li><li><span>You might get an empty string </span><code>\"\"</code><span> when users don't send a request.</span></li><li><span>Warning about data object value types.</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"regex",
			"strings",
			"validation"
		],
		"tests": [
			"Object.prototype.sameObject = function(o){",
			"  var key = Object.keys(o);",
			"  for (var i = 0; i < key.length;i++){",
			"    if(!this.hasOwnProperty(key[i])||!(o[key[i]]===this[key[i]])){return false}",
			"  }",
			"  return true",
			"}",
			"​",
			"console.log(\"########Anti-cheat#########\");",
			"Test.assertEquals(/^\\/.+\\/[gmixsuajd]*$/.test(regExp.toString()),true,`<-- Not valid regex -->`);",
			"Test.assertEquals(regExp.toString().length<161,true,`<-- Regex length ${regExp.toString().length}/160 -->`)",
			"console.log(\"#########################\");",
			"Test.assertEquals(regExp.test(\"val=xyz54&id=1&time=01:41&desc=dzgr\"),true)",
			"Test.assertEquals(regExp.test(\"time=01:41&val=xyz54&id=1&desc=dzgr\"),true)",
			"Test.assertEquals(regExp.test(\"time=01:41&id=1&val=xyz54&desc=dzgr\"),true)",
			"Test.assertEquals(regExp.test(\"time=01:41&id=1&desc=dzgr&val=xyz54\"),true)",
			"Test.assertEquals(regExp.test(\"id=1&time=01:41&desc=dzgr&val=xyz54\"),true)",
			"Test.assertEquals(regExp.test(\"id=1&desc=dzgr&time=01:41&val=xyz54\"),true)",
			"Test.assertEquals(regExp.test(\"id=1&desc=dzgr&val=xyz54&time=01:41\"),true)",
			"Test.assertEquals(regExp.test(\"desc=dzgr&id=1&val=xyz54&time=01:41\"),true)",
			"Test.assertEquals(regExp.test(\"desc=dzgr&val=xyz54&id=1&time=01:41\"),true)",
			"Test.assertEquals(regExp.test(\"desc=dzgr&val=xyz54&time=01:41&id=1\"),true)",
			"Test.assertEquals(regExp.test(\"val=xyz54&desc=dzgr&time=01:41&id=1\"),true)",
			"Test.assertEquals(regExp.test(\"val=xyz54&time=01:41&desc=dzgr&id=1\"),true)",
			"Test.assertEquals(regExp.test(\"val=xyz54&time=01:41&id=1&desc=dzgr\"),true)",
			"Test.assertEquals(regExp.test(\"val=54&id=10&time=11:41&desc=dzgrggr999\"),false)"
		],
		"starterFn": [
			"1\nconst regExp = /Your regex/;",
			"2\n​",
			"3\nfunction dataRegexLovely(str) {",
			"4\n  ",
			"5\n}"
		],
		"url": "https://edabit.com/challenge/2GQ4MishQPNA8FPKr"
	},
	{
		"title": "Maximum and Minimum Product Triplets",
		"description": "<p><span>Write </span><strong><span>two</span></strong><span> functions:</span></p><ol><li><span>One that returns the </span><strong><span>maximum product</span></strong><span> of three numbers in an array.</span></li><li><span>One that returns the </span><strong><span>minimum product</span></strong><span> of three numbers in an array.</span></li></ol><h3><span>Examples</span></h3><pre><code>maxProduct([-8, -9, 1, 2, 7]) ➞ 504\n\nmaxProduct([-8, 1, 2, 7, 9]) ➞ 126\n\nminProduct([1, -1, 1, 1]) ➞ -1\n\nminProduct([-5, -3, -1, 0, 4]) ➞ -15</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers"
		],
		"tests": [
			"describe(\"Max Product Tests\", function() {",
			"  Test.assertEquals(maxProduct([1, -1, 1]), -1)",
			"  Test.assertEquals(maxProduct([1, -1, 1, 1]), 1)",
			"  Test.assertEquals(maxProduct([-8, -9, 1, 2, 7]), 504)",
			"  Test.assertEquals(maxProduct([-8, 1, 2, 7, 9]), 126)",
			"  Test.assertEquals(maxProduct([1, 1, 5, 1, 1, -10, -1]), 50)",
			"  Test.assertEquals(maxProduct([-8, -7, -6, -5]), -210)",
			"  Test.assertEquals(maxProduct([-8, -7, -6, -5, 1]), 56)",
			"  Test.assertEquals(maxProduct([1, 0, 1, 0, 0]), 0)",
			"  Test.assertEquals(maxProduct([-5, 1, 10, 0, 0]), 0)",
			"  Test.assertEquals(maxProduct([-5, -1, -1, 0, 0]), 0)",
			"  Test.assertEquals(maxProduct([-5, 1, -1, 0, 0]), 5)",
			"  Test.assertEquals(maxProduct([-5, -3, -1, 0, 4]), 60)",
			"  Test.assertEquals(maxProduct([5, 3, -1, 0, -4, 7, 7, 9]), 441)",
			"})",
			"​",
			"describe(\"Min Product Tests\", function() {",
			"  Test.assertEquals(minProduct([1, -1, 1]), -1)",
			"  Test.assertEquals(minProduct([1, -1, 1, 1]), -1)",
			"  Test.assertEquals(minProduct([-8, -9, 1, 2, 7]), -126)",
			"  Test.assertEquals(minProduct([-8, 1, 2, 7, 9]), -504)",
			"  Test.assertEquals(minProduct([1, 1, 5, 1, 1, -10, -1]), -50)",
			"  Test.assertEquals(minProduct([-8, -7, -6, -5]), -336)",
			"  Test.assertEquals(minProduct([-8, -7, -6, -5, 1]), -336)",
			"  Test.assertEquals(minProduct([1, 0, 1, 0, 0]), 0)",
			"  Test.assertEquals(minProduct([-5, 1, 10, 0, 0]), -50)"
		],
		"starterFn": [
			"1\nfunction maxProduct(arr) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction minProduct(arr) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/zEFP5c8ZshTXRfgYb"
	},
	{
		"title": "Josephus Permutation",
		"description": "<p><span>A group of </span><code>n</code><span> prisoners stand in a circle awaiting execution. Starting from an arbitrary position(0), the executioner kills every </span><code>k</code><span>th person until one person remains standing, who is then granted freedom (see examples).</span></p><p><span>Create a function that takes 2 arguments — the number of people to be executed </span><code>n</code><span>, and the step size </span><code>k</code><span>, and returns the original position (index) of the person who survives.</span></p><h3><span>Examples</span></h3><pre><code>whoGoesFree(9, 2) ➞ 2\n\n// Prisoners = [0, 1, 2, 3, 4, 5, 6, 7, 8]\n// Executed people replaced by - (a dash) for illustration purposes.\n// 1st round of execution = [0, -, 2, -, 4, -, 6, -, 8]  -&gt; [0, 2, 4, 6, 8]\n// 2nd round = [-, 2, -, 6, -] -&gt; [2, 6]  # 0 is killed in this round because it's beside 8 who was skipped over.\n// 3rd round = [2, -]\n\nwhoGoesFree(9, 3) ➞ 0\n\n// [0, 1, 2, 3, 4, 5, 6, 7, 8]\n// [0, 1, -, 3, 4, -, 6, 7, -] -&gt; [0, 1, 3, 4, 6, 7]\n// [0, 1, -, 4, 6, -] -&gt; [0, 1, 4, 6]\n// [0, 1, -, 6] -&gt; [0, 1, 6]\n// [0, -, 6] -&gt; [0, 6]\n// [0, -] -&gt; [0]</code></pre><h3><span>Notes</span></h3><p><span>Refer to </span><strong><span>Resources</span></strong><span> tab for more info.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(whoGoesFree(9, 2), 2)",
			"Test.assertEquals(whoGoesFree(9, 3), 0)",
			"Test.assertEquals(whoGoesFree(7, 2), 6)",
			"Test.assertEquals(whoGoesFree(7, 3), 3)",
			"Test.assertEquals(whoGoesFree(15, 4), 12)",
			"Test.assertEquals(whoGoesFree(14, 3), 1)",
			"Test.assertEquals(whoGoesFree(53, 7), 21)",
			"Test.assertEquals(whoGoesFree(543, 21), 455)",
			"Test.assertEquals(whoGoesFree(673, 13), 303)"
		],
		"starterFn": [
			"1\nfunction whoGoesFree(n, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/j4jFjDQZCQtJ4nDSA"
	},
	{
		"title": "Billboard",
		"description": "<p><span>A billboard is an </span><code>m * n</code><span> array, where each array element consists of either one letter or a blank space. You are given a phrase and the billboard dimensions. Create a function that determines whether you can place the complete phrase on the billboard.</span></p><p><span>There are two rules:</span></p><ol><li><span>If there is a space between two words:</span><ul><li><span>If they are on the same row, you must put a space.</span></li><li><span>If they are two different rows, the space is optional.</span></li></ul></li><li><span>You can only put COMPLETE words on a row.</span></li></ol><p><span>To illustrate, </span><code>canPut(\"GOOD MORN\", [2, 4])</code><span> should yield </span><code>true</code><span>, since while there is a space between \"GOOD\" and \"MORN\", it's not needed since both words are on separate rows.</span></p><pre><code>[\n  [\"G\", \"O\", \"O\", \"D\"],\n  [\"M\", \"O\", \"R\", \"N\"]\n]</code></pre><p><span>On the other hand  </span><code>canPut(\"GOOD MORN\", [1, 8])</code><span> should yield </span><code>false</code><span>. Since both words reside in the first row, we require nine spots, and eight would yield the incomplete phrase \"GOOD MOR\".</span></p><pre><code>[\n  [\"G\", \"O\", \"O\", \"D\", \"_\", \"M\", \"O\", \"R\"]\n]</code></pre><p><span>We would also return </span><code>false</code><span> if we could not fit a word on a row. So </span><code>canPut(\"GOOD MORN\", [3,3])</code><span> should yield </span><code>false</code><span>, since we can only fit \"GOO\" on the first row.</span></p><pre><code>[\n  [\"G\", \"O\", \"O\"],\n  [\"D\", \"_\", \"M\"],\n  [\"O\", \"R\", \"N\"]\n]\n\n// No good!</code></pre><h3><span>Examples</span></h3><pre><code>canPut(\"HEY JUDE\", [2, 4]) ➞ true\n\ncanPut(\"HEY JUDE\", [1, 8]) ➞ true\n\ncanPut(\"HEY JUDE\", [1, 7]) ➞ false\n\ncanPut(\"HEY JUDE\", [4, 3]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>It is okay to leave extra empty spaces on one line if you cannot fit two words with a space. For example, in a 5 x 5 billboard, you can put \"BE\" on the first row and \"HAPPY\" on the second row.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canPut(\"HEY JUDE\", [2, 4]), true)",
			"Test.assertEquals(canPut(\"HEY JUDE\", [1, 8]), true)",
			"Test.assertEquals(canPut(\"HEY JUDE\", [1, 7]), false, 'cannot fit leaving a space in')",
			"Test.assertEquals(canPut(\"HEY JUDE\", [4, 3]), false, 'JUDE cannot fit on second row')",
			"Test.assertEquals(canPut(\"CU L8R\", [2, 2]), false, 'L8R cannot fit on second row')",
			"Test.assertEquals(canPut(\"CU L8R\", [1, 5]), false, 'cannot fit leaving a space in')",
			"Test.assertEquals(canPut(\"CU L8R\", [5, 5]), true)",
			"Test.assertEquals(canPut(\"BEAUTY IS WITHIN\", [3, 6]), true)",
			"Test.assertEquals(canPut(\"BEAUTY IS WITHIN\", [4, 5]), false)"
		],
		"starterFn": [
			"1\nfunction canPut(str, dim) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QPqN3tp7RqsxKRnq2"
	},
	{
		"title": "Spiral Matrix",
		"description": "<p><span>In this challenge, transform a string into a spiral contained inside a regular square matrix. To build the matrix, you are given the dimension of its side:</span></p><ul><li><span>If the side of the matrix is odd, the spiral starting point will be the exact center of the matrix.</span></li><li><span>If the side of the matrix is even, the spiral starting point will be placed in the lower columns half of the lower rows half.</span></li></ul><pre><code>// \"x\" represents the matrix center\n\nside = 3 (odd)\nmatrix = [\n  [\" \", \" \", \" \"],\n  [\" \", \"x\", \" \"],\n  [\" \", \" \", \" \"]\n]\n\nside = 4 (even)\nmatrix = [\n  [\" \", \" \", \" \", \" \"],\n  [\" \", \"x\", \" \", \" \"],\n  [\" \", \" \", \" \", \" \"],\n  [\" \", \" \", \" \", \" \"],\n]</code></pre><p><span>The length of the string has to match exactly the number of cells inside the matrix:</span></p><ul><li><span>If the string length is greater than the number of cells, you have to cut off the unnecessary characters.</span></li><li><span>If the string length is lower than the number of cells, you have to add a series of </span><code>\"+\"</code><span> to the end of the string until its length match the number of cells.</span></li></ul><pre><code>side = 3 (9 cells)\nstring = \"EDABITTEROUS\"\n// You'll need only \"EDABITTER\", while \"OUS\" is discarded\nstring = \"EDABITTER\"\n\nside = 4 (16 cells)\nstring = \"EDABITTEROUS\"\n// You'll need all the string plus 4 \"+\" to match the cells\nstring = \"EDABITTEROUS++++\"</code></pre><p><span>Starting from the center that you found, you have to fill a regular square matrix </span><code>side * side</code><span> placing the characters of the given string </span><code>str</code><span>, following a clockwise spiral pattern (first move to the right).</span></p><pre><code>side = 3 (odd)\nstring = \"EDABITTEROUS\"\nmatrix = [\n  [\"T\", \"E\", \"R\"],\n  [\"T\", \"E\", \"D\"],\n  [\"I\", \"B\", \"A\"]\n]\n\nside = 4 (even)\nstring = \"EDABITTEROUS\"\nmatrix = [\n  [\"T\", \"E\", \"R\", \"O\"],\n  [\"T\", \"E\", \"D\", \"U\"],\n  [\"I\", \"B\", \"A\", \"S\"],\n  [\"+\", \"+\", \"+\", \"+\"],\n]</code></pre><h3><span>Examples</span></h3><pre><code>spiralMatrix(2, \"DOG\") ➞ [\n  [\"D\", \"O\"],\n  [\"+\", \"G\"]\n]\n\nspiralMatrix(3, \"COPYRIGHTS\") ➞ [\n  [\"G\", \"H\", \"T\"],\n  [\"I\", \"C\", \"O\"],\n  [\"R\", \"Y\", \"P\"]\n]\n\nspiralMatrix(4, \"SUPERLUMBERJACK\") ➞ [\n  [\"U\", \"M\", \"B\", \"E\"],\n  [\"L\", \"S\", \"U\", \"R\"],\n  [\"R\", \"E\", \"P\", \"J\"],\n  [\"+\", \"K\", \"C\", \"A\"]\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember, the first move from the center is to the right, and then you proceed clockwise and concentrically.</span></li><li><span>As given </span><code>side</code><span>, you can expect any valid value greater than </span><code>1</code><span>.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(spiralMatrix(2, \"DOG\"), [",
			"  [ \"D\", \"O\" ],",
			"  [ \"+\", \"G\" ]",
			"])",
			"​",
			"Test.assertSimilar(spiralMatrix(3, \"COPYRIGHTS\"), [",
			"  [ \"G\", \"H\", \"T\" ],",
			"  [ \"I\", \"C\", \"O\" ],",
			"  [ \"R\", \"Y\", \"P\" ]",
			"])",
			"​",
			"Test.assertSimilar(spiralMatrix(3, \"EDABITTER\"), [",
			"  [ \"T\", \"E\", \"R\" ],",
			"  [ \"T\", \"E\", \"D\" ],",
			"  [ \"I\", \"B\", \"A\" ]",
			"])",
			"​",
			"Test.assertSimilar(spiralMatrix(3, \"EDABITTEROUS\"), [",
			"  [ \"T\", \"E\", \"R\" ],",
			"  [ \"T\", \"E\", \"D\" ],",
			"  [ \"I\", \"B\", \"A\" ]",
			"])",
			"​",
			"Test.assertSimilar(spiralMatrix(4, \"SUPERLUMBERJACK\"), [",
			"  [ \"U\", \"M\", \"B\", \"E\" ],",
			"  [ \"L\", \"S\", \"U\", \"R\" ],"
		],
		"starterFn": [
			"1\nfunction spiralMatrix(side, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/u2QGaxT455XTmd5xg"
	},
	{
		"title": "Longest Substring with Non-repeating Characters",
		"description": "<p><span>Write a function that returns the </span><strong><span>longest non-repeating substring</span></strong><span> for a string input.</span></p><h3><span>Examples</span></h3><pre><code>longestNonrepeatingSubstring(\"abcabcbb\") ➞ \"abc\"\n\nlongestNonrepeatingSubstring(\"aaaaaa\") ➞ \"a\"\n\nlongestNonrepeatingSubstring(\"abcde\") ➞ \"abcde\"\n\nlongestNonrepeatingSubstring(\"abcda\") ➞ \"abcd\"</code></pre><h3><span>Notes</span></h3><ul><li><span>If multiple substrings tie in length, return the one which occurs </span><strong><span>first</span></strong><span>.</span></li><li><strong><span>Bonus</span></strong><span>: Can you solve this problem in </span><strong><span>linear time</span></strong><span>?</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(longestNonrepeatingSubstring(\"abcabcbb\"), \"abc\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"aaaaaa\"), \"a\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"abcde\"), \"abcde\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"abcda\"), \"abcd\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"aaccddeeffb\"), \"ac\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"abdde\"), \"abd\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"ccdddcccc\"), \"cd\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"cdxdxccxc\"), \"cdx\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"abddefgh\"), \"defgh\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"abcdabcd\"), \"abcd\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"abddebcc\"), \"debc\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"xyxxyzyzy\"), \"xyz\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"kjlmjsdeee\"), \"lmjsde\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"kjlmjsdfew\"), \"lmjsdfew\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"kjlmjsdfewii\"), \"lmjsdfewi\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"kjlmjjiiiidfewii\"), \"idfew\")",
			"Test.assertEquals(longestNonrepeatingSubstring(\"kjlmjjiiiidfiwii\"), \"kjlm\")"
		],
		"starterFn": [
			"1\nfunction longestNonrepeatingSubstring(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/vHJrWvyEiiGp5yZtX"
	},
	{
		"title": "Minesweeper I — Grid",
		"description": "<p><span>This challenge is based on the game Minesweeper.</span></p><p><span>Create a function that takes an array of </span><code>#</code><span> and </span><code>-</code><span>, where each hash (#) represents a mine and each dash (-) represents a mine-free spot. Return an array where each dash is replaced by a digit indicating the number of mines immediately adjacent to the spot (horizontally, vertically, and diagonally).</span></p><h3><span>Examples</span></h3><pre><code>numGrid([\n  [\"-\", \"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"#\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\", \"-\"]\n]) ➞ [\n  [\"0\", \"0\", \"0\", \"0\", \"0\"],\n  [\"0\", \"1\", \"1\", \"1\", \"0\"],\n  [\"0\", \"1\", \"#\", \"1\", \"0\"],\n  [\"0\", \"1\", \"1\", \"1\", \"0\"],\n  [\"0\", \"0\", \"0\", \"0\", \"0\"],\n]\n\nnumGrid([\n  [\"-\", \"-\", \"-\", \"-\", \"#\"],\n  [\"-\", \"-\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"#\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\", \"-\"],\n  [\"#\", \"-\", \"-\", \"-\", \"-\"]\n]) ➞ [\n  [\"0\", \"0\", \"0\", \"1\", \"#\"],\n  [\"0\", \"1\", \"1\", \"2\", \"1\"],\n  [\"0\", \"1\", \"#\", \"1\", \"0\"],\n  [\"1\", \"2\", \"1\", \"1\", \"0\"],\n  [\"#\", \"1\", \"0\", \"0\", \"0\"]\n]\n\nnumGrid([\n  [\"-\", \"-\", \"-\", \"#\", \"#\"],\n  [\"-\", \"#\", \"-\", \"-\", \"-\"],\n  [\"-\", \"-\", \"#\", \"-\", \"-\"],\n  [\"-\", \"#\", \"#\", \"-\", \"-\"],\n  [\"-\", \"-\", \"-\", \"-\", \"-\"]\n]) ➞ [\n  [\"1\", \"1\", \"2\", \"#\", \"#\"],\n  [\"1\", \"#\", \"3\", \"3\", \"2\"],\n  [\"2\", \"4\", \"#\", \"2\", \"0\"],\n  [\"1\", \"#\", \"#\", \"2\", \"0\"],\n  [\"1\", \"2\", \"2\", \"1\", \"0\"],\n]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(numGrid([",
			"['-', '-', '-', '-', '-'],",
			"['-', '-', '-', '-', '-'],",
			"['-', '-', '#', '-', '-'],",
			"['-', '-', '-', '-', '-'],",
			"['-', '-', '-', '-', '-']",
			"]), [",
			"['0', '0', '0', '0', '0'],",
			"['0', '1', '1', '1', '0'],",
			"['0', '1', '#', '1', '0'],",
			"['0', '1', '1', '1', '0'],",
			"['0', '0', '0', '0', '0']",
			"])",
			"​",
			"Test.assertSimilar(numGrid([",
			"['-', '-', '-', '-', '#'],",
			"['-', '-', '-', '-', '-'],",
			"['-', '-', '#', '-', '-'],",
			"['-', '-', '-', '-', '-'],",
			"['#', '-', '-', '-', '-']",
			"]), [",
			"['0', '0', '0', '1', '#'],",
			"['0', '1', '1', '2', '1'],",
			"['0', '1', '#', '1', '0'],",
			"['1', '2', '1', '1', '0'],",
			"['#', '1', '0', '0', '0']"
		],
		"starterFn": [
			"1\nfunction numGrid(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/voZCqTGMSNjCrRhf9"
	},
	{
		"title": "Help Matt Get Home!",
		"description": "<p><span>It's been a long day for Matt. After working on Edabit for quite a bit, he decided to go out and get a beer at the local bar a few miles down the road. However, what Matt didn't realise, was that with too much drinks you can't find the way home properly anymore. Your goal is to help Matt get back home by telling him how long the path to his house is if he drives the optimal route.</span></p><p><span>Matt lives in a simple world: there is only dirt (represented by a dot), a single house (Matt's house, represented by the letter 'h') and there are trees (represented by the letter 't') which he obviously can't drive through. Matt has an unlimited amount of moves and each move he can go north, north-east, east, south-east, south, south-west, west and north-west. There will only be one Matt and one house, which is Matt's.</span></p><p><span>The world is given to you as a comma-delimited string which represents the cells in the world from top-left to bottom-right. A 3x3 world with Matt on the top-left and his house on the bottom-right, with a tree in the middle would be represented as:</span></p><pre><code>m,.,.,.,t,.,.,.,h</code></pre><p><span>The answer to this world would be 3: Matt would first move east, then south-east, then south (or south &gt; south-east &gt; east). The function call related to this example would be the following:</span></p><pre><code>getPathLength('m,.,.,.,t,.,.,.,h', 3, 3)</code></pre><p><span>If Matt is unable to get home from his current location, return -1, otherwise return the amount of moves Matt has to make to get home if he follows the optimal path. You are given the world, it's width and it's height.</span></p><p><strong><span>Good luck!</span></strong></p>",
		"publishedBy": "Jasperr",
		"publishedByUrl": "https://edabit.com/user/xxmeopX7HggJJsvYB",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops"
		],
		"tests": [
			"Test.assertEquals(getPathLength('m,.,.,.,t,.,.,.,h', 3, 3), 3)",
			"Test.assertEquals(getPathLength('m,.,.,.,.,.,.,.,h', 3, 3), 2)",
			"Test.assertEquals(getPathLength('m,h', 2, 1), 1)",
			"Test.assertEquals(getPathLength('.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,m,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,h,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,.,.', 10, 10), 9)",
			"Test.assertEquals(getPathLength('.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,m,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,h,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,.,.,.', 10, 10), -1)",
			"Test.assertEquals(getPathLength('m,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,t,h', 10, 10), 14)",
			"Test.assertEquals(getPathLength('m,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,.,t,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,t,.,t,.,.,.,.,.,.,.,t,.,t,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,t,t,.,.,.,.,.,.,.,t,.,t,h', 10, 10), 15)",
			"Test.assertEquals(getPathLength('mh', 25, 25), 24)",
			"Test.assertEquals(getPathLength('m,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,t,t,t,t,.,t,.,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,h', 25, 25), 91)",
			"Test.assertEquals(getPathLength('m,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,t,t,t,t,.,t,.,t,t,t,t,t,t,t,t,t,t,t,t,t,t,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,t,t,t,t,t,t,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,t,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,t,h', 25, 25), -1)"
		],
		"starterFn": [
			"1\nfunction getPathLength(world, width, height) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bfBTeRqsZ3Jwmyz6P"
	},
	{
		"title": "SVG Path Data Parser",
		"description": "<p><span>A </span><code>&lt;path&gt;</code><span> element can usually be found inside an </span><code>&lt;svg&gt;</code><span> element and has an attribute </span><code>d</code><span> that represents the definition of the outline of a shape.</span></p><p><span>A brief summary about this attribute:</span></p><ul><li><span>It contains commands (letters) and coordinates (numbers)</span></li><li><span>All instructions are expressed as one character (e.g., a moveto is expressed as an </span><code>M</code><span>).</span></li><li><span>Superfluous white space and separators such as commas can be eliminated (e.g., </span><code>M 10 10 L 20 20</code><span> contains unnecessary spaces and could be expressed more compactly as </span><code>M10 10L20 20</code><span>).</span></li><li><span>The command letter can be eliminated on subsequent commands if the same command is used multiple times in a row (e.g., you can drop the second </span><code>L</code><span> in </span><code>M 10 20 L 20 10 L -10 -20</code><span> and use </span><code>M 10 20 L 20 10 -10 -20</code><span> instead).</span></li></ul><p><span>Your job is to build a parser that will convert this string in an array of commands, where each array element is an object with the </span><code>command</code><span> letter and an array of </span><code>parameters</code><span>.</span></p><p><span>This summary is incomplete but should get you started, for more information please refer to the W3C specification found in the resources tab.</span></p><h3><span>Examples</span></h3><pre><code>pathDataParser(\"\") ➞ []\n\npathDataParser(\"M 0 0\") ➞ [{command: 'M', parameters: [0, 0]}]\n\npathDataParser(\"M 1 1.5 L 0 1.5 0 0.5 1 0.5 0.5 0 0 0.5 1 1.5 1 0.5 0 1.5\" ➞ [\n  {command: \"M\", parameters: [1, 1.5]},\n  {command: \"L\", parameters: [0, 1.5, 0, 0.5, 1, 0.5, 0.5, 0, 0, 0.5, 1, 1.5, 1, 0.5, 0, 1.5]}\n]\n\npathDataParser(\"M 0,1 h 1 v -1 h 1 v 1 h 1 C 2,1 3,3 1.5,3 C 0,3 1,1 0,1 z\" ➞ [\n  {command: \"M\", parameters: [0, 1]},\n  {command: \"h\", parameters: [1]},\n  {command: \"v\", parameters: [-1]},\n  {command: \"h\", parameters: [1]},\n  {command: \"v\", parameters: [1]},\n  {command: \"h\", parameters: [1]},\n  {command: \"C\", parameters: [2, 1, 3, 3, 1.5, 3]},\n  {command: \"C\", parameters: [0, 3, 1, 1, 0, 1]},\n  {command: \"z\", parameters: []}\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>Return an empty array if no commands are found (example #1)</span></li><li><span>The </span><code>z</code><span> (or </span><code>Z</code><span>) command is the only one without </span><code>parameters</code><span>, in this case return an empty array (see last command of example #4)</span></li><li><span>The </span><code>parameters</code><span> array contains numbers, not strings, so you'll have to convert them</span></li><li><span>Sometimes numbers can be very compressed to save space, let's look at some examples that might trip you up:</span><ul><li><span>Decimal numbers can start with a dot: </span><code>.4</code><span> is the same as </span><code>0.4</code></li><li><span>If a negative number comes after another number, the space is optional: </span><code>0-4</code><span> is equal to </span><code>0 -4</code></li><li><span>Multiple decimal numbers in a row can be very tricky, remember that a number </span><strong><span>CAN NOT</span></strong><span> have more than 1 dot, so this: </span><code>1.2.34</code><span> is actually 2 different numbers: </span><code>1.2</code><span> and </span><code>0.34</code></li></ul></li><li><span>Some examples have commas, some do not, some have multiline strings, some are a single line, remember to take into account all valid cases! Check out the tests tab to find out more.</span></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"regex",
			"strings"
		],
		"tests": [
			"const a1 = pathDataParser('');",
			"const e1 = [];",
			"​",
			"const a2 = pathDataParser('M 1 1.5 L 0 1.5 0 0.5 1 0.5 0.5 0 0 0.5 1 1.5 1 0.5 0 1.5');",
			"const e2 = [{ command: 'M', parameters: [1, 1.5] }, { command: 'L', parameters: [0, 1.5, 0, 0.5, 1, 0.5, 0.5, 0, 0, 0.5, 1, 1.5, 1, 0.5, 0, 1.5] }];",
			"​",
			"const a3 = pathDataParser('M 0,1 h 1 v -1 h 1 v 1 h 1 C 2,1 3,3 1.5,3 C 0,3 1,1 0,1 z');",
			"const e3 = [{ command: 'M', parameters: [0, 1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [-1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [1] }, { command: 'h', parameters: [1] }, { command: 'C', parameters: [2, 1, 3, 3, 1.5, 3] }, { command: 'C', parameters: [0, 3, 1, 1, 0, 1] }, { command: 'z', parameters: [] }];",
			"​",
			"const a4 = pathDataParser('M 0,1 h 1 v -1 h 1 v 1 h 1 c -1,0 0,2 -1.5,2 c -1.5,0 -0.5,-2 -1.5,-2 z');",
			"const e4 = [{ command: 'M', parameters: [0, 1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [-1] }, { command: 'h', parameters: [1] }, { command: 'v', parameters: [1] }, { command: 'h', parameters: [1] }, { command: 'c', parameters: [-1, 0, 0, 2, -1.5, 2] }, { command: 'c', parameters: [-1.5, 0, -0.5, -2, -1.5, -2] }, { command: 'z', parameters: [] }];",
			"​",
			"const a5 = pathDataParser('M 0,1 l 1,0 0,-1, 1,0 0,1 1,0 c -1,0 0,2 -1.5,2 c -1.5,0 -0.5,-2 -1.5,-2 z');",
			"const e5 = [{ command: 'M', parameters: [0, 1] }, { command: 'l', parameters: [1, 0, 0, -1, 1, 0, 0, 1, 1, 0] }, { command: 'c', parameters: [-1, 0, 0, 2, -1.5, 2] }, { command: 'c', parameters: [-1.5, 0, -0.5, -2, -1.5, -2] }, { command: 'z', parameters: [] }];",
			"​",
			"const a6 = pathDataParser('M 0,1 l 1,0 0,-1, 1,0 0,1 1,0 c -1,0 0,2 -1.5,2 c -1.5,0 -0.5,-2 -1.5,-2 z M 0,0 l 0.5,0.5 -0.5,0 z M 3,0 l -0.5,0.5 0.5,0 z');",
			"const e6 = [{ command: 'M', parameters: [0, 1] }, { command: 'l', parameters: [1, 0, 0, -1, 1, 0, 0, 1, 1, 0] }, { command: 'c', parameters: [-1, 0, 0, 2, -1.5, 2] }, { command: 'c', parameters: [-1.5, 0, -0.5, -2, -1.5, -2] }, { command: 'z', parameters: [] }, { command: 'M', parameters: [0, 0] }, { command: 'l', parameters: [0.5, 0.5, -0.5, 0] }, { command: 'z', parameters: [] }, { command: 'M', parameters: [3, 0] }, { command: 'l', parameters: [-0.5, 0.5, 0.5, 0] }, { command: 'z', parameters: [] }];",
			"​",
			"const a7 = pathDataParser('M1 0H0v1h.6H0v1h1.5V0c1 0 1 2 0 2h1L3 0l.25 1h-.5.5l.25 1H4V0c.7 0 .7 1 0 1 1 0 1 1 0 1h1.3V0v2h1V0h-.5 1');",
			"const e7 = [",
			"  { command: 'M', parameters: [1, 0] },",
			"  { command: 'H', parameters: [0] },",
			"  { command: 'v', parameters: [1] },",
			"  { command: 'h', parameters: [0.6] },",
			"  { command: 'H', parameters: [0] },",
			"  { command: 'v', parameters: [1] },"
		],
		"starterFn": [
			"1\nfunction pathDataParser(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ysMrKPGby3FXiYtQn"
	},
	{
		"title": "Kaprekar's Constant",
		"description": "<p><span>6174 is known as one of Kaprekar's constants, after the Indian mathematician D. R. Kaprekar. Number 6174  is notable for the following rule:</span></p><ul><li><span>Take any four-digit number, using at least two different digits (leading zeros are allowed).</span></li><li><span>Arrange the digits in descending and then in ascending order to get two four-digit numbers, adding leading zeros if necessary.</span></li><li><span>Subtract the smaller number from the bigger number.</span></li><li><span>Go back to step 2 and repeat.</span></li></ul><p><span>The above process, known as Kaprekar's routine, will always reach its fixed point, 6174, in at most 7 iterations. Once 6174 is reached, the process will continue yielding 7641 – 1467 = 6174. For example, choose 3524:</span></p><pre><code>5432 – 2345 = 3087\n8730 – 0378 = 8352\n8532 – 2358 = 6174\n7641 – 1467 = 6174</code></pre><p><span>Write a recursive function that will return the number of times it will take to get from a number to 6174 (the above example would equal 3).</span></p><pre><code>(1)5432 – 2345 = 3087,\n(2)8730 – 0378 = 8352,\n(3)8532 – 2358 = 6174</code></pre><p><span>495 would produce the following: 4950 to 9540 - 459, 9081 to 9810 - 189, 9621 to 9621 - 1269, 8352 to 8532 - 2358 answer: 4</span></p><p><span>For a 2 digit number, the following would be produced (stating with number 10 -&gt; 100):</span></p><p><span>100 to 100 - 1, 990 to 990 - 99, 8910 to 9810 - 189, 9621 to 9621 - 1269, 8352 to 8532 - 2358 answer: 5</span></p><h3><span>Examples</span></h3><pre><code>kaprekar(6621) ➞ 5\n\nkaprekar(6554) ➞ 4\n\nkaprekar(1234) ➞ 3</code></pre><h3><span>Notes</span></h3><p><span>If the subtracted number is less than 1000, add an extra zero to that number. The number 1111 will equal 0000, so this number (1111) is invalid.  If you're still unclear, please check the comments section.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"numbers",
			"recursion",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(kaprekar(1112), 5)",
			"Test.assertEquals(kaprekar(1342), 3)",
			"Test.assertEquals(kaprekar(2636), 3)",
			"Test.assertEquals(kaprekar(3219), 3)",
			"Test.assertEquals(kaprekar(3305), 6)",
			"Test.assertEquals(kaprekar(4132), 3)",
			"Test.assertEquals(kaprekar(4568), 7)",
			"Test.assertEquals(kaprekar(5610), 4)",
			"Test.assertEquals(kaprekar(6002), 1)",
			"Test.assertEquals(kaprekar(6081), 7)",
			"Test.assertEquals(kaprekar(6174), 0)",
			"Test.assertEquals(kaprekar(6287), 7)",
			"Test.assertEquals(kaprekar(7093), 7)",
			"Test.assertEquals(kaprekar(7412), 1)",
			"Test.assertEquals(kaprekar(7735), 2)",
			"Test.assertEquals(kaprekar(8591), 5)",
			"Test.assertEquals(kaprekar(8621), 3)",
			"Test.assertEquals(kaprekar(8650), 3)",
			"Test.assertEquals(kaprekar(9618), 6)"
		],
		"starterFn": [
			"1\nfunction kaprekar(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wzjRyguraKuZ5XiSE"
	},
	{
		"title": "One Time Pad Training Program, Pt. 1",
		"description": "<p><em><span>“To the future or to the past, to a time when thought is free, when men are different from one another and do not live alone — to a time when truth exists and what is done cannot be undone: From the age of uniformity, from the age of solitude, from the age of Big Brother, from the age of doublethink — greetings!”</span></em><span> ⁠— Winston Smith's secret writings in George Orwell's novel \"1984\"</span></p><h4><span>ONE TIME PAD OPERATIONS MANUAL (CLASSIFIED ⁠— DESTROY AFTER READING!)</span></h4><p><span>This first part of the ONE TIME PAD OPERATIONS MANUAL has been designed to train party members within the purview of the Dzerzkian Intelligence Authorities on how to use One Time Pad (OTP) encryption.</span></p><p><span>This type of encryption offers several advantages over other types of encryption:</span></p><ul><li><span>It cannot be cracked (with certain important assumptions. See appendix: \"Resources\").</span></li><li><span>It can easily be performed by hand, which makes it perfect for field agents (the intended readers of this document).</span></li></ul><h4><span>OPERATION PRINCIPLES</span></h4><p><span>As the name implies, OTP encrypts and decrypts messages with the aid of a secret key (i.e. the </span><em><span>pad</span></em><span>). Both the sender and the receiver have identical copies of this pad. Each pad is used only once before it is immediately destroyed by both parties.</span></p><p><span>The encryption and decryption processes are relatively simple:</span></p><ol><li><p><span>The </span><em><span>plaintext</span></em><span> message is encoded into something called </span><em><span>plaincode</span></em><span>. The purpose of this step is to convert the letters into numbers in preparation for the next step. The plaincode should not be considered encrypted in any way.</span></p></li><li><p><span>The next step is to encrypt the plaincode with the one-time pad. The sender uses </span><strong><span>modular subtraction</span></strong><span> on each pair of corresponding digits in the plaincode and the pad to generate the encrypted </span><em><span>cyphertext</span></em><span>, which can now be securely sent to the receiver.</span></p></li><li><p><span>The decryption step is essentially the encryption step in reverse. The plaincode is decrypted when the receiver uses </span><strong><span>modular addition</span></strong><span> to add the corresponding digits in the cyphertext and the pad.</span></p></li><li><p><span>Finally, the plaincode is decoded to plaintext with the same method used to encode it, but in reverse.</span></p></li></ol><h4><span>TRAINING EXERCISE</span></h4><p><span>In our first exercise, we need only concern ourselves with encryption and decryption of the plaincode (steps 2 and 3).</span></p><p><span>Make two functions: one for encryption and one for decryption. Both functions need only two arguments: either </span><code>plncode</code><span> and </span><code>pad</code><span> or </span><code>cypcode</code><span> and </span><code>pad</code><span>, both of which are strings of numbers.</span></p><p><span>Remember, the plaincode is encrypted using modular arithmetic. For example, if the plaincode digit is 4, and the corresponding pad digit is 6, then the cyphertext digit is (4 – 6) mod 10 = 8. After being sent, the cyphertext 8 can be decrypted using the pad digit 6 and modular addition: (8 + 6) % 10 = 4. </span><strong><span>A simple way of remembering this is that sometimes you need to add 10 to plaincode digit to keep the result above 0 in the encryption step. As for decryption, if the result is greater than 9, just don't carry the 1.</span></strong></p><p><span>By convention, the first five digits of the pad are used as a “key ID” and aren't altered in the encryption process. This allows the receiver to identify the appropriate pad for decryption.</span></p><pre><code>ENCRYPTION:\nKEYID 24955 18424 76969 69 plaincode\n63719 78776 82780 83650 47 pad\n-------------------------- (-) modular subtraction\n63719 56289 36744 93319 22 cyphertext\n\nDECRYPTION:\n63719 56289 36744 93319 22 cyphertext\n63719 78776 82780 83650 47 pad\n-------------------------- (+) modular addition\nKEYID 24955 18424 76969 69 plaincode</code></pre><p><span>By convention, the codes are written in groups of five for the sake of organization while performing operations by hand. However, the test case strings contain no spaces for grouping.</span></p><p><span>In the function </span><code>encrypt(plncode, pad)</code><span>, the </span><code>plncode</code><span> argument should be given as a string that does not include the key ID. It should return the cyphertext as a string that does contain the key ID.</span></p><p><span>In the function </span><code>decrypt(cypcode, pad)</code><span>, the </span><code>cypcode</code><span> argument should be given as a string that does include the key ID. It should return the plaincode as a string that does not contain the key ID.</span></p><p><span>If the key IDs for the cyphertext and the pad don't match in the decrypt function, return </span><code>\"Error: Key IDs don't match.\"</code></p><h3><span>Examples</span></h3><pre><code>encrypt(\"24955184247696969\", \"637197877682780836504704874690100607768768\") ➞ \"6371956289367449331922\"\n\ndecrypt(\"6371956289367449331922\", \"637197877682780836504704874690100607768768\") ➞ \"24955184247696969\"\n\ndecrypt(\"6371956289367449331922\", \"442878365779404250678127528855846163827272\") ➞ \"Error: Key IDs don't match.\"</code></pre><h3><span>Notes</span></h3><p><span>The functions you make will be built upon in the next section, in which you will also be required to convert from plaintext to plaincode and vice-versa.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"formatting",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(encrypt(\"24955184247696969\", \"637197877682780836504704874690100607768768\"), \"6371956289367449331922\")",
			"Test.assertEquals(decrypt(\"6371956289367449331922\", \"442878365779404250678127528855846163827272\"), \"Error: Key IDs don't match.\")",
			"Test.assertEquals(decrypt(\"6371956289367449331922\", \"637197877682780836504704874690100607768768\"), \"24955184247696969\")"
		],
		"starterFn": [
			"1\nfunction encrypt(plncode, pad) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\n​",
			"6\nfunction decrypt(cypcode, pad) {",
			"7\n  ",
			"8\n}"
		],
		"url": "https://edabit.com/challenge/3kukAeB3YtsDedcFG"
	},
	{
		"title": "Discount! Discount! Discount!",
		"description": "<p><span>We all love a little bargain.</span></p><p><span>Your function will get a price, and a load of discounts. Your job is to write the function so that it calculates the maximum discount.</span></p><ul><li><span>The price is a Number.</span></li><li><span>The load of discounts is a string like: </span><code>15%, 8, 50%</code><span>.</span></li><li><span>So, percentages, with </span><code>%</code><span>, and amounts, without </span><code>%</code><span>.</span></li><li><span>You have to think about the order of applying the discounts.</span></li><li><span>Round the output amount to the nearest hundreth.</span></li><li><span>Output a Number.</span></li></ul><h3><span>Examples</span></h3><pre><code>discount(64, \"50%, 50%\") ➞ 16\n// You have to reduce with 50% twice.\n\ndiscount(24, \"20, 2\") ➞ 2\n// You have to subtract 20 and 2.\n\ndiscount(20, \"10%, 10\") ➞ 8\n// You have to reduce with 10% and subtract 10.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"[",
			"  [10, '1, 1%', 8.9],",
			"  [20, '10, 10%', 8],",
			"  [60, '', 60], ",
			"  [64, '50%, 50%', 16],",
			"  [1000, '2%, 100, 50%, 16', 374],",
			"  [24, '20, 2', 2], ",
			"  [111, '11, 11%', 87.79],",
			"  [237.037, '25%, 25%, 25%', 100],",
			"  [26.026, '1%, 1%, 1%, 1%', 25],",
			"  [12345, '4%, 21, 33.6%, 87, 3%, 80.12', 7445],",
			"  [1000, '99.9%', 1]",
			"].forEach(x => {",
			"  Test.assertEquals(discount(x[0], x[1]), x[2]);",
			"});"
		],
		"starterFn": [
			"1\nfunction discount(n, str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HyaXNJdFL4QnfbWRL"
	},
	{
		"title": "Word Chain 2.0",
		"description": "<p><span>Let's update our previous </span><strong><span>word-chain</span></strong><span> definition. In this 2.0 version, a </span><strong><span>word-chain</span></strong><span> is an array of words, where the next word is formed by either:</span></p><ol><li><span>Changing exactly </span><strong><span>one</span></strong><span> letter from the previous word.</span></li><li><span>Adding or subtracting </span><strong><span>one</span></strong><span> letter.</span></li></ol><h3><span>Examples</span></h3><pre><code>isWordChain([\"row\", \"crow\", \"crown\", \"brown\", \"brawn\"]) ➞ true\n// add \"c\" to \"row\" to get \"crow\", \"n\" to get \"crown\", etc.\n\nisWordChain([\"flew\", \"flaw\", \"flan\", \"flat\", \"fat\", \"rat\", \"rot\", \"tot\"]) ➞ true\n\nisWordChain([\"meek\", \"meet\", \"meat\", \"teal\"]) ➞ false\n// \"meat\" =&gt; \"teal\" changes 2 letters (can only change 1).\n\nisWordChain([\"run\", \"runny\", \"bunny\"]) ➞ false\n// \"run\" =&gt; \"runny\" adds 2 letters (can only add 1).</code></pre><h3><span>Notes</span></h3><ul><li><span>You can only do one (not both) for each word change.</span></li><li><span>All words will be in lower-case.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isWordChain([\"row\", \"crow\", \"crown\", \"brown\", \"brawn\"]), true)",
			"Test.assertEquals(isWordChain([\"flew\", \"flaw\", \"flan\", \"flat\", \"fat\", \"rat\", \"rot\", \"tot\"]), true)",
			"Test.assertEquals(isWordChain([\"meek\", \"meet\", \"meat\", \"teal\"]), false)",
			"Test.assertEquals(isWordChain([\"run\", \"runny\", \"bunny\"]), false)",
			"Test.assertEquals(isWordChain([\"fun\", \"fund\", \"find\", \"bind\", \"wind\", \"wild\", \"wile\", \"wiles\"]), true)",
			"Test.assertEquals(isWordChain([\"nut\", \"but\", \"bot\", \"boot\", \"loot\", \"look\", \"book\", \"brook\"]), true)",
			"Test.assertEquals(isWordChain([\"some\", \"tome\", \"tame\", \"lame\", \"flame\", \"flamer\", \"blamer\", \"blamers\"]), true)",
			"Test.assertEquals(isWordChain([\"a\", \"at\", \"hat\", \"that\", \"what\", \"flat\"]), false)",
			"Test.assertEquals(isWordChain([\"link\", \"blink\", \"wink\", \"sink\"]), false)"
		],
		"starterFn": [
			"1\nfunction isWordChain(words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/yGvaYr3X8xHPxWRcb"
	},
	{
		"title": "The Centrifuge Problem",
		"description": "<p><span>A centrifuge, as you probably know, is a laboratory device used to separate fluids based on density. The separation is achieved through centripetal force by spinning a collection of test tubes at high speeds. This means, the configuration needs to be in balance.</span></p><p><span>Create a function that takes two numbers as arguments </span><code>n</code><span> and </span><code>k</code><span> and returns </span><code>true</code><span> if the configuration is balanced and </span><code>false</code><span> if it's not. To check out the formula, look at the </span><strong><span>resources tab</span></strong><span>.</span></p><p><img alt=\"The Centrifuge Problem with 6 Holes, n=6\" title=\"The Centrifuge Problem with 6 Holes, n=6\" src=\"https://edabit-challenges.s3.amazonaws.com/6_hole_centrifuge.png\"></p><p><span>Here are the valid configurations for </span><em><span>n</span></em><span> = 6, </span><em><span>k</span></em><span> = 2, 3, 4 and 6.</span></p><h3><span>Examples</span></h3><pre><code>cFuge(6, 4) ➞ true\n\ncFuge(2, 1) ➞ false\n\ncFuge(3, 3) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>One test tube (</span><em><span>k</span></em><span> = 1) is </span><strong><span>never</span></strong><span> in balance.</span></li><li><span>One hole (</span><em><span>n</span></em><span> = 1) is </span><strong><span>never</span></strong><span> in balance, even empty.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertEquals(cFuge(6, 4), true)",
			"Test.assertEquals(cFuge(5, 1), false)",
			"Test.assertEquals(cFuge(12, 7), true)",
			"Test.assertEquals(cFuge(1, 1), false)",
			"Test.assertEquals(cFuge(21, 18), true)",
			"Test.assertEquals(cFuge(1, 0), false)",
			"Test.assertEquals(cFuge(4, 2), true)",
			"Test.assertEquals(cFuge(5, 3), false)",
			"Test.assertEquals(cFuge(21, 13), false)",
			"Test.assertEquals(cFuge(3, 3), true)",
			"Test.assertEquals(cFuge(50, 1), false)",
			"Test.assertEquals(cFuge(8, 6), true)",
			"Test.assertEquals(cFuge(9, 5), false)",
			"Test.assertEquals(cFuge(2, 1), false)",
			"Test.assertEquals(cFuge(59, 59), true)",
			"Test.assertEquals(cFuge(11, 4), false)"
		],
		"starterFn": [
			"1\nfunction cFuge(n, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/T4KHxHe8n4cy2hcME"
	},
	{
		"title": "Roman Numeral Converter",
		"description": "<p><span>Create a function that takes an Arabic number and converts it into a Roman number.</span></p><h3><span>Examples</span></h3><pre><code>convertToRoman(2) ➞ \"II\"\n\nconvertToRoman(12) ➞ \"XII\"\n\nconvertToRoman(16) ➞ \"XVI\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All roman numerals should be returned as uppercase.</span></li><li><span>The largest number that can be represented in this notation is 3,999.</span></li></ul>",
		"publishedBy": "Stanislav Mozolevskiy",
		"publishedByUrl": "https://edabit.com/user/M3z4ZPgywPqX9eoS4",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(convertToRoman(2), \"II\")",
			"Test.assertEquals(convertToRoman(12),\"XII\")",
			"Test.assertEquals(convertToRoman(16), \"XVI\")",
			"Test.assertEquals(convertToRoman(44), \"XLIV\")",
			"Test.assertEquals(convertToRoman(68), \"LXVIII\")",
			"Test.assertEquals(convertToRoman(400), \"CD\")",
			"Test.assertEquals(convertToRoman(798), \"DCCXCVIII\")",
			"Test.assertEquals(convertToRoman(1000), \"M\")",
			"Test.assertEquals(convertToRoman(3999),\"MMMCMXCIX\")",
			"Test.assertEquals(convertToRoman(649), \"DCXLIX\")"
		],
		"starterFn": [
			"1\nfunction convertToRoman(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/hGSzM3rEkmqw8uvrP"
	},
	{
		"title": "Rectangle or Not?",
		"description": "<p><span>Create a function that determines whether four coordinates properly create a rectangle. A rectangle has 4 sides and has 90 degrees for each angle. Coordinates are given as strings containing an x- and a y- coordinate: </span><code>\"(x, y)\"</code><span>.</span></p><p><span>For this problem, assume none of the rectangles are tilted.</span></p><pre><code>isRectangle([\"(0, 0)\", \"(0, 1)\", \"(1, 0)\", \"(1,1)\"]) ➞ true</code></pre><h3><span>Examples</span></h3><pre><code>isRectangle([\"(-4, 3)\", \"(4, 3)\", \"(4, -3)\", \"(-4, -3)\"]) ➞ true\n\nisRectangle([\"(0, 0)\", \"(0, 1)\"]) ➞ false\n// A line is not a rectangle!\n\nisRectangle([\"(0, 0)\", \"(0, 1)\", \"(1, 0)\"]) ➞ false\n// Neither is a triangle!\n\nisRectangle([\"(0, 0)\", \"(9, 0)\", \"(7, 5)\", \"(16, 5)\"]) ➞ false\n// A parallelogram, but not a rectangle!</code></pre><h3><span>Notes</span></h3><ul><li><span>A square is also a rectangle!</span></li><li><span>A parallelogram is NOT necessarily a rectangle (the rectangle is a special case of a parallelogram).</span></li><li><span>If the input is fewer than or greater than 4 coordinates, return </span><code>false</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isRectangle([\"(-4, 3)\", \"(4, 3)\", \"(4, -3)\", \"(-4,-3)\"]), true)",
			"Test.assertEquals(isRectangle([\"(0, 0)\", \"(0, 1)\"]), false, 'A line is not a rectangle!')",
			"Test.assertEquals(isRectangle([\"(0, 0)\", \"(0, 1)\", \"(1,0)\"]), false, 'Neither is a triangle!')",
			"Test.assertEquals(isRectangle([\"(0, 0)\", \"(9, 0)\", \"(7,5)\", \"(16, 5)\"]), false, 'A parallelogram, but not a rectangle!')",
			"Test.assertEquals(isRectangle([\"(0, 0)\", \"(1, 0)\", \"(0, 1)\", \"(0, 0)\"]), false, 'One of the points is identical (really only 3 coordinates)')",
			"Test.assertEquals(isRectangle([\"(1, 0)\", \"(1, 2)\", \"(2, 1)\", \"(2, 3)\", \"(3, 3)\"]), false, 'Too many sides (among other things)!')",
			"Test.assertEquals(isRectangle([\"(-2, 2)\", \"(-2, -1)\", \"(5, -1)\", \"(5, 2)\"]), true)"
		],
		"starterFn": [
			"1\nfunction isRectangle(coordinates) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/piRQ5GwbXaemykNki"
	},
	{
		"title": "Create a New Function EncodeURI",
		"description": "<p><span>Create a function that takes a string and returns it with URI encode.</span></p><h3><span>Examples</span></h3><pre><code>URIEncode(\"étreinte\") ➞ \"%C3%A9treinte\"\n\nURIEncode(\"L@cr1ê\") ➞ \"L@cr1%C3%AA\"\n\nURIEncode(\"#-&gt; \\r😃\\n &lt;-#\") ➞ \"#-%3E%20%0D%F0%9F%98%83%0A%20%3C-#\"\n\nURIEncode(\"Ʃ=3\") ➞ \"%C6%A9=3\"</code></pre><h3><span>Disabled Functions</span></h3><ul><li><code>encodeURI</code></li><li><code>encodeURIComponent</code></li><li><code>escape</code></li><li><code>eval</code></li><li><code>parseInt</code></li><li><code>parseFloat</code></li><li><code>ArrayBuffer</code><span> (except: </span><code>byteLength</code><span>)</span></li><li><code>Array</code><span> (except: </span><code>push</code><span>, </span><code>isArray</code><span>, </span><code>toString</code><span>)</span></li><li><code>String</code><span> (except: </span><code>charCodeAt</code><span>, </span><code>toUpperCase</code><span>, </span><code>replace</code><span>)</span></li><li><code>Number</code><span> (except: </span><code>toString</code><span>)</span></li><li><code>Object</code><span> (only: </span><code>keys</code><span>, </span><code>values</code><span>, </span><code>toString</code><span>, </span><code>hasOwnProperty</code><span> are disabled)</span></li><li><code>Set</code><span> (except: </span><code>size</code><span>)</span></li><li><code>Math</code><span> (except: </span><code>pow</code><span>, </span><code>floor</code><span>, </span><code>round</code><span>, </span><code>ceil</code><span>)</span></li><li><span>String is never void but can have space or other.</span></li><li><code>URIEncode</code><span> accept all special characters UTF-8, UTF-16.</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"formatting",
			"strings"
		],
		"tests": [
			"var block = function(o,ex,only){",
			"    isInTab = function(t,v){if(t==null){return false};for (var i = 0;i < t.length;i++){if (t[i]===v) {return true}}; return false;}",
			"    var prototypes = (o.prototype!=null)?Object.getOwnPropertyNames(o.prototype):[];",
			"    var objects = (o!=null)?Object.getOwnPropertyNames(o):[];",
			"    ex = (ex==null)?[\"\"]:ex;",
			"    for (var i = 0; i<prototypes.length;i++){",
			"        var name = prototypes[i];",
			"        only = (only==null)?prototypes:only;",
			"        if (!isInTab(ex,name)){",
			"            if (typeof(o.prototype[name])==\"function\" && isInTab(only,name)){o.prototype[name] = Function.apply(null, ['console.log(\"'+name+'\"+\" - Forbidden\");return \"'+name+'\"+\" - Forbidden\"'])}",
			"        }",
			"    }",
			"    for (var i = 0; i<objects.length;i++){",
			"    var name = objects[i];",
			"        only = (only==prototypes)?objects:only;",
			"        if (!isInTab(ex,name)){",
			"            if (typeof(o[name])==\"function\" && isInTab(only,name)){o[name] = Function.apply(null, ['console.log(\"'+name+'\"+\" - Forbidden\");return \"'+name+'\"+\" - Forbidden\"'])}",
			"        }",
			"    }",
			"  return true;",
			"}",
			"block(String,[\"charCodeAt\",\"toUpperCase\",\"replace\"])",
			"block(Array,[\"push\",\"isArray\",\"toString\"]);",
			"block(Math,[\"pow\",\"floor\",\"round\",\"ceil\"]);",
			"block(Number,[\"toString\"]);",
			"block(Object,[\"\"],[\"keys\",\"values\",\"toString\",\"hasOwnProperty\"]);"
		],
		"starterFn": [
			"1\nfunction URIEncode(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QN2edKD2WrQyWYKH9"
	},
	{
		"title": "BFS Chess!",
		"description": "<p><span>You will be given the location of a knight, and an end location. The knight can move in a \"L\" shape. \"L\" shape movement means that the knight can change it's </span><code>x</code><span> coordinate by 2 and it's </span><code>y</code><span> coordinate by 1 or it can change it's </span><code>y</code><span> coordinate by 2 and it's </span><code>x</code><span> coordinate by 1 (you can add and subtract from the x/y).</span></p><p><span>For example, if the knight is at the position (0, 0), it can move to:</span></p><pre><code>(1,2), (1,-2), (2,1), (2,-1), (-1,2), (-1,-2), (-2,1), (-2, -1)</code></pre><p><span>Your job is to return the least amount of steps needed to go from the position K (knight's start position) to E (end). You will only be given the knight starter coordinates (x1, y1) and the end coordinates (x2, y2).</span></p><p><span>Constrains:\n</span><code>1 &lt;= x1,y1,x2,y2 &lt;= 8</code></p><h3><span>Examples</span></h3><pre><code>knightBFS(1, 1, 8, 8) ➞ 6\n\nknightBFS(1, 1, 3, 2) ➞ 1\n\nknightBFS(8, 8, 3, 3) ➞ 4</code></pre><h3><span>Notes</span></h3><ul><li><span>This is a simplified version of </span><a target=\"_blank\" href=\"https://www.spoj.com/problems/NAKANJ/\"><span>this problem</span></a><span>.</span></li><li><span>This travel will always be possible.</span></li><li><span>The chess board is 8x8.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"games"
		],
		"tests": [
			"Test.assertEquals(knightBFS(1, 1, 8, 8), 6)",
			"Test.assertEquals(knightBFS(1, 1, 3, 2), 1)",
			"Test.assertEquals(knightBFS(8, 8, 3, 3), 4)",
			"Test.assertEquals(knightBFS(5, 5, 7, 1), 2)",
			"Test.assertEquals(knightBFS(4, 8, 1, 1), 4)",
			"Test.assertEquals(knightBFS(1, 1, 1, 2), 3)"
		],
		"starterFn": [
			"1\nfunction knightBFS(a, b, c, d) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JAihKzAwjFb2BL8cx"
	},
	{
		"title": "The GPS Itinerary: Around the World",
		"description": "<p><span>In this challenge, use the </span><strong><span>haversine formula</span></strong><span> to calculate the distances between various cities and establish an itinerary for a series of cities to visit. You have to build an </span><em><span>utility</span></em><span> class </span><code>GPS</code><span> that supports a function </span><code>itinerary</code><span>.</span></p><h3><span>The utility class </span><code>GPS</code></h3><p><span>The class </span><code>GPS</code><span> must have three static methods:</span></p><ul><li><code>.decimal()</code><span>  transforms a DMS coordinate into a </span><strong><span>decimal coordinate</span></strong><span>: as parameters, it accepts </span><strong><span>three integers</span></strong><span> which are the </span><code>degrees</code><span>, the </span><code>minutes</code><span> and the </span><code>seconds</code><span> and a </span><strong><span>capital letter</span></strong><span> to represent the </span><code>cardinal direction</code><span>.</span></li><li><code>.radians()</code><span> transforms a decimal coordinate into </span><strong><span>radians</span></strong><span>: as parameter, it accepts a decimal coordinate as a </span><strong><span>float number</span></strong><span>.</span></li><li><code>.distance()</code><span> calculates the shortest distance (in kilometers) between two given cities using the </span><strong><span>haversine formula</span></strong><span> and a constant </span><strong><span>radius of the Earth equal to 6371km</span></strong><span>, rounding the result down to the nearest integer: as parameters, it accepts </span><strong><span>two full DMS string coordinates</span></strong><span>.</span></li></ul><pre><code>London: 51° 30' 30\" N 0° 7' 32\" W\nSidney: 33° 52' 4\" S 151° 12' 26\" E\n\nGPS.decimal(51, 30, 30, \"N\") ➞ 51.50833333333333\nGPS.decimal(0, 7, 32, \"W\") ➞ -0.12555555555555556\n// London's decimal latitude and longitude.\n// West coordinates are negatives.\n\nGPS.decimal(33, 52, 4, \"S\") ➞ -33.867777777777775\nGPS.decimal(151, 12, 26, \"E\") ➞ 151.2072222222222\n// Sidney's decimal latitude and longitude.\n// South coordinates are negatives.\n\nGPS.radians(-0.12555555555555556) ➞ -0.002191357838615103\n// London's longitude in radians\n\nGPS.radians(151.2072222222222) ➞ 2.6390638805725146\n// Sidney's longitude in radians.\n\nGPS.distance('51° 30' 30\" N 0° 7' 32\" W', '33° 52' 4\" S 151° 12' 26\" E') ➞ 16993\n// Shortest distance between London and Sidney (in kilometers).</code></pre><h3><span>The function </span><code>itinerary</code></h3><p><span>Given a starting city </span><code>start</code><span> and an array of cities </span><code>toVisit</code><span>, implement a function that returns an array with two elements:</span></p><ul><li><span>A sub-array containing the cities (the first one will always be the </span><code>start</code><span> city) to visit, in the order given by </span><strong><span>the shortest distance from the last visited city</span></strong><span>;</span></li><li><span>An integer being the total number of kilometers necessary to complete the travel.</span></li></ul><p><span>Let's suppose that </span><strong><span>@Matt</span></strong><span> decides to see Moscow, Sidney, Buenos Aires and Los Angeles. He starts his travel from Kitchener and the nearest city is Los Angeles (3,403 km). From Los Angeles, he goes to Moscow (9,769 km). From Moscow, the nearest city is Buenos Aires (13,475 km). From Buenos Aires, Matt ends his travel in Sidney (11,801 km). The result with the itinerary and the total kilometers is:</span></p><pre><code>[[\"Kitchener\", \"Los Angeles\", \"Moscow\", \"Buenos Aires\", \"Sidney\"], 38448]</code></pre><h3><span>Examples</span></h3><pre><code>itinerary(\"Naples\", [\"New York\", \"Johannesburg\", \"Beijing\", \"Quito\"]) ➞ [[\"Naples\", \"New York\", \"Quito\", \"Johannesburg\", \"Beijing\"], 35001]\n\nitinerary(\"Tokyo\", [\"London\", \"Montevideo\", \"Jakarta\", \"Auckland\"]) ➞ [[\"Tokyo\", \"Jakarta\", \"Auckland\", \"Montevideo\", \"London\"], 34931]\n\nitinerary(\"Rio de Janeiro\", [\"Naples\", \"New York\", \"Sidney\", \"Kitchener\"]) ➞ [[\"Rio de Janeiro\", \"New York\", \"Kitchener\", \"Naples\", \"Sidney\"], 31897]</code></pre><h3><span>Notes</span></h3><ul><li><span>The coordinates of the cities are stored in an object literal </span><code>cities</code><span> in the </span><strong><span>Code</span></strong><span> tab, as well as the constant for the radius of the Earth (in this challenge, is </span><strong><span>6371Km</span></strong><span>).</span></li><li><span>The given data will be always valid, without exceptions to handle. The format for full DMS coordinates will be always like </span><code>140° 1' 59\" N 99° 59' 1 E\"</code><span> (no leading zeros or negative values, values separated by a space, capital letters for the four cardinal directions).</span></li><li><span>Do not round decimal coordinates or radians. Round distances </span><strong><span>down</span></strong><span> to the nearest integer.</span></li><li><span>The decimal (and radians) values of </span><code>W</code><span> (West) and </span><code>S</code><span> (South) coordinates are negatives.</span></li><li><span>Obviously, the distances are intented </span><em><span>as the crow flies</span></em><span>, hypotizing a </span><em><span>flat</span></em><span> surface.</span></li><li><span>Look at the </span><strong><span>Resources</span></strong><span> tab for a series of useful links about all the arguments of this challenge.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"classes",
			"data_structures",
			"math",
			"trigonometry"
		],
		"tests": [
			"// DMS coordinate to decimal coordinate",
			"Test.assertEquals(GPS.decimal(51, 30, 30, \"N\"), 51.50833333333333);",
			"Test.assertEquals(GPS.decimal(58, 22, 19, \"W\"), -58.371944444444445);",
			"​",
			"// Decimal coordinate to radians",
			"Test.assertEquals(GPS.radians(51.50833333333333), 0.8989900088814126);",
			"Test.assertEquals(GPS.radians(-58.371944444444445), -1.018782621346768);",
			"​",
			"// Distance between two cities",
			"Test.assertEquals(GPS.distance(cities[\"London\"], cities[\"New York\"]), 5570);",
			"Test.assertEquals(GPS.distance(cities[\"Sidney\"], cities[\"Los Angeles\"]), 12073);",
			"Test.assertEquals(GPS.distance(cities[\"Rio de Janeiro\"], cities[\"Beijing\"]), 17322);",
			"Test.assertEquals(GPS.distance(cities[\"Moscow\"], cities[\"Johannesburg\"]), 9158);",
			"​",
			"// Travel itinerary",
			"Test.assertSimilar(itinerary(\"Naples\", [\"New York\", \"Johannesburg\", \"Beijing\", \"Quito\"]),",
			"  [ [ 'Naples', 'New York', 'Quito', 'Johannesburg', 'Beijing' ], 35001 ]);",
			"​",
			"Test.assertSimilar(itinerary(\"Kitchener\", [\"Buenos Aires\", \"Sidney\", \"Los Angeles\", \"Moscow\"]),",
			"  [ [ 'Kitchener', 'Los Angeles', 'Moscow', 'Buenos Aires', 'Sidney' ], 38448 ]);",
			"​",
			"Test.assertSimilar(itinerary(\"Tokyo\", [\"London\", \"Montevideo\", \"Jakarta\", \"Auckland\"]),",
			"  [ [ 'Tokyo', 'Jakarta', 'Auckland', 'Montevideo', 'London' ], 34931 ]);",
			"​",
			"Test.assertSimilar(itinerary(\"Rio de Janeiro\", [\"Naples\", \"New York\", \"Sidney\", \"Kitchener\"]),",
			"  [ [ 'Rio de Janeiro', 'New York', 'Kitchener', 'Naples', 'Sidney' ], 31897 ]);"
		],
		"starterFn": [
			"1\nfunction itinerary(start, toVisit) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nclass GPS {",
			"6\n  static decimal(degrees, minutes, seconds, direction) {",
			"7\n    ",
			"8\n  }",
			"9\n  static radians(decimal) {",
			"10\n    ",
			"11\n  }",
			"12\n  static distance(cityA, cityB) {",
			"13\n  ",
			"14\n  }",
			"15\n}",
			"16\n​",
			"17\nconst cities = {",
			"18\n  \"London\": `51° 30' 30\" N 0° 7' 32\" W`,",
			"19\n  \"New York\": `40° 42' 51\" N 74° 0' 21\" W`,",
			"20\n  \"Kitchener\": `43° 27' 10\" N 80° 29' 42\" W`,",
			"21\n  \"Los Angeles\": `34° 3' 8\" N 118° 14' 37\" W`,",
			"22\n  \"Naples\": `40° 51' 46\" N 14° 16' 36\" E`,",
			"23\n  \"Moscow\": `55° 45' 7\" N 37° 36' 56\" E`,",
			"24\n  \"Beijing\": `39° 54' 27\" N 116° 23' 50\" E`,",
			"25\n  \"Tokyo\": `35° 41' 22\" N 139° 41' 30\" E`,",
			"26\n  \"Quito\": `0° 13' 47\" S 78° 31' 29\" W`,"
		],
		"url": "https://edabit.com/challenge/oxmSTZABggZt7A8td"
	},
	{
		"title": "Sort the String",
		"description": "<p><span>Create a function that takes a string consisting of </span><strong><span>lowercase letters</span></strong><span>, </span><strong><span>uppercase letters</span></strong><span> and </span><strong><span>numbers</span></strong><span> and returns the string sorted in the same way as the examples below.</span></p><h3><span>Examples</span></h3><pre><code>sorting(\"eA2a1E\") ➞ \"aAeE12\"\n\nsorting(\"Re4r\") ➞ \"erR4\"\n\nsorting(\"6jnM31Q\") ➞ \"jMnQ136\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Mostafa_Adullah",
		"publishedByUrl": "https://edabit.com/user/zCkFPjDNLx9L82Ls6",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(sorting(\"eA2a1E\"), \"aAeE12\")",
			"Test.assertSimilar(sorting(\"Re4r\"), \"erR4\")",
			"Test.assertSimilar(sorting(\"6jnM31Q\"), \"jMnQ136\")",
			"Test.assertSimilar(sorting(\"f5Eex\"), \"eEfx5\")",
			"Test.assertSimilar(sorting(\"846ZIbo\"), \"bIoZ468\")",
			"Test.assertSimilar(sorting(\"2lZduOg1jB8SPXf5rakC37wIE094Qvm6Tnyh\"), \"aBCdEfghIjklmnOPQrSTuvwXyZ0123456789\")"
		],
		"starterFn": [
			"1\nfunction sorting(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/QfmeAthGsfRhWpsZ8"
	},
	{
		"title": "Concentric Rugs",
		"description": "<p><span>Create a function that takes in parameter </span><code>n</code><span> and generates an </span><code>n x n</code><span> (where </span><code>n</code><span> is odd) </span><strong><span>concentric rug</span></strong><span>.</span></p><p><span>The center of a concentric rug is </span><code>0</code><span>, and the rug \"fans-out\", as show in the examples below.</span></p><h3><span>Examples</span></h3><pre><code>generateRug(1) ➞ [\n  [0]\n]\n\ngenerateRug(3) ➞ [\n  [1, 1, 1],\n  [1, 0, 1],\n  [1, 1, 1]\n]\n\ngenerateRug(5) ➞ [\n  [2, 2, 2, 2, 2],\n  [2, 1, 1, 1, 2],\n  [2, 1, 0, 1, 2],\n  [2, 1, 1, 1, 2],\n  [2, 2, 2, 2, 2]\n]\n\ngenerateRug(7) ➞ [\n  [3, 3, 3, 3, 3, 3, 3],\n  [3, 2, 2, 2, 2, 2, 3],\n  [3, 2, 1, 1, 1, 2, 3],\n  [3, 2, 1, 0, 1, 2, 3],\n  [3, 2, 1, 1, 1, 2, 3],\n  [3, 2, 2, 2, 2, 2, 3],\n  [3, 3, 3, 3, 3, 3, 3]\n]</code></pre><h3><span>Notes</span></h3><ul><li><code>n &gt;= 0</code><span>.</span></li><li><span>Always increment by 1 each \"layer\" outwards you travel.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(generateRug(1), [",
			"  [0]",
			"])",
			"​",
			"Test.assertSimilar(generateRug(3), [",
			"  [1, 1, 1],",
			"  [1, 0, 1],",
			"  [1, 1, 1]",
			"])",
			"​",
			"Test.assertSimilar(generateRug(5), [",
			"  [2, 2, 2, 2, 2],",
			"  [2, 1, 1, 1, 2],",
			"  [2, 1, 0, 1, 2],",
			"  [2, 1, 1, 1, 2],",
			"  [2, 2, 2, 2, 2]",
			"])",
			"​",
			"Test.assertSimilar(generateRug(7), [",
			"  [3, 3, 3, 3, 3, 3, 3],",
			"  [3, 2, 2, 2, 2, 2, 3],",
			"  [3, 2, 1, 1, 1, 2, 3],",
			"  [3, 2, 1, 0, 1, 2, 3],",
			"  [3, 2, 1, 1, 1, 2, 3],",
			"  [3, 2, 2, 2, 2, 2, 3],",
			"  [3, 3, 3, 3, 3, 3, 3]"
		],
		"starterFn": [
			"1\nfunction generateRug(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bLyX8WoeX2geoW7j4"
	},
	{
		"title": "IndexOf and LastIndexOf",
		"description": "<p><span>Your task is to recreate two functions from </span><code>String.object</code><span> (</span><code>indexOf()</code><span> and </span><code>lastIndexOf()</code><span>).</span></p><h3><span>str.indexOf(searchValue</span><span>[</span><span>, fromIndex])</span></h3><p><span>This function will accept a string and regex as searched value, take a look at target string and return the first index if there is a match.</span></p><ul><li><span>searchValue is a string or a regex object representing the value to be searched.</span></li><li><span>fromIndex is an optional parameter indicating the starting point (beginning from left) of your search.</span></li></ul><p><span>If any value matches, return the first index found, else return </span><code>-1</code><span>.</span></p><h3><span>str.lastIndexOf(searchValue</span><span>[</span><span>, fromIndex])</span></h3><p><span>This function is the same as </span><code>indexOf</code><span> except it will return the last index if there is a match.</span></p><ul><li><span>searchValue is a string or a regex object representing the value to be searched.</span></li><li><span>fromIndex is an optional parameter indicating the index of beginning of matched strings.</span></li></ul><p><span>For example, with regex you can try to find all matches in the string but the </span><code>lastIndexOf</code><span> function must return the index of the character at the </span><code>fromIndex</code><span> parameter or lower.</span></p><p><span>If any value matches, return the last index found, else return </span><code>-1</code><span>.</span></p><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"functional_programming",
			"regex",
			"strings"
		],
		"tests": [
			"const strList = [\"edabit challenge edabit\",\"edabitibade\",\"challengesChallengeschallenges\",\"Hello Worlddlrow olleh\\n.\"]",
			"Test.assertEquals(strList[0].indexOf(''),0);",
			"Test.assertEquals(strList[0].indexOf('eda'),0);",
			"Test.assertEquals(strList[0].indexOf('eda',1),17);",
			"Test.assertEquals(strList[0].indexOf('e',1),12);",
			"Test.assertEquals(strList[0].indexOf('e'),0);",
			"Test.assertEquals(strList[0].indexOf('edabit challenge'),0);",
			"Test.assertEquals(strList[1].indexOf('biti',1),3);",
			"Test.assertEquals(strList[1].indexOf('biti',-1),3);",
			"Test.assertEquals(strList[1].indexOf('biti',3),3);",
			"Test.assertEquals(strList[1].indexOf('biti',4),-1);",
			"Test.assertEquals(strList[1].indexOf('b'),3);",
			"Test.assertEquals(strList[1].indexOf('b',4),7);",
			"Test.assertEquals(strList[2].indexOf(/cha/),0);",
			"Test.assertEquals(strList[2].indexOf(/cha/,1),20);",
			"Test.assertEquals(strList[2].indexOf(/cha/i,1),10);",
			"Test.assertEquals(strList[2].indexOf(/[cha]{3}/gi),0);",
			"Test.assertEquals(strList[2].indexOf(/[Cse]{3}/),8);",
			"Test.assertEquals(strList[2].indexOf(/[sse]{3}/),-1);",
			"Test.assertEquals(strList[3].indexOf(/Hello world/),-1);",
			"Test.assertEquals(strList[3].indexOf(/Hello World/), 0);",
			"Test.assertEquals(strList[3].indexOf(/(?:Olleh\\.\\.?)/), -1);",
			"Test.assertEquals(strList[3].indexOf(/(?:olleh\\.?)/), 17);",
			"Test.assertEquals(strList[3].indexOf(/[eo]ll/), 1);",
			"Test.assertEquals(strList[3].indexOf(/[ow] ?[ow]/), 14);",
			"Test.assertEquals(strList[3].indexOf(/[ow] ?[ow]/i), 4);"
		],
		"starterFn": [
			"1\nString.prototype.indexOf = function(searchValue, fromIndex) {",
			"2\n  return 0;",
			"3\n};",
			"4\n​",
			"5\nString.prototype.lastIndexOf = function(searchValue, fromIndex) {",
			"6\n  return 0;",
			"7\n};"
		],
		"url": "https://edabit.com/challenge/5TFPM2uorcu5nHnbv"
	},
	{
		"title": "Ordering People in a Line",
		"description": "<p><span>Create a function that takes in the size of the line and the number of people waiting and places people in an </span><em><span>S-shape</span></em><span> ordering. The demonstration below will make it clear:</span></p><pre><code>// Ordering numbers 1-15 in a [5,3] space.\n\norderPeople([5, 3], 15) ➞ [\n  [1, 2, 3],\n  [6, 5, 4],\n  [7, 8, 9],\n  [12, 11, 10],\n  [13, 14, 15]\n]</code></pre><p><span>If there is extra room, leave those spots blank with a </span><code>0</code><span> filler.</span></p><pre><code>// Ordering numbers 1-5 in a [4, 3] space.\n\norderPeople([4, 3], 5) ➞ [\n  [1, 2, 3],\n  [0, 5, 4],\n  [0, 0, 0],\n  [0, 0, 0]\n]</code></pre><p><span>If there are too many people for the given dimensions, return </span><code>\"overcrowded\"</code><span>.</span></p><pre><code>orderPeople([4, 3], 20) ➞ \"overcrowded\"</code></pre><h3><span>Examples</span></h3><pre><code>orderPeople([3, 3], 8) ➞ [\n  [1, 2, 3],\n  [6, 5, 4],\n  [7, 8, 0]\n]\n\norderPeople([2, 4], 5) ➞ [\n  [1, 2, 3, 4],\n  [0, 0, 0, 5]\n]   \n\norderPeople([2, 4], 10) ➞ \"overcrowded\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Always start the ordering on the upper-left corner.</span></li><li><span>If the </span><strong><span>S-shape</span></strong><span> concept doesn't make sense, try writing down some of these examples on a piece of paper and tracing a pencil through the numbers in order.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(orderPeople([5, 3], 15), [",
			"  [1, 2, 3],",
			"  [6, 5, 4],",
			"  [7, 8, 9],",
			"  [12, 11, 10],",
			"  [13, 14, 15]",
			"])",
			"​",
			"Test.assertSimilar(orderPeople([4, 3], 5), [",
			"  [1, 2, 3],",
			"  [0, 5, 4],",
			"  [0, 0, 0],",
			"  [0, 0, 0]",
			"])",
			"​",
			"Test.assertSimilar(orderPeople([3, 3], 8), [",
			"  [1, 2, 3],",
			"  [6, 5, 4],",
			"  [7, 8, 0]",
			"])",
			"​",
			"Test.assertSimilar(orderPeople([2, 4], 5), [",
			"  [1, 2, 3, 4],",
			"  [0, 0, 0, 5]",
			"])",
			"​"
		],
		"starterFn": [
			"1\nfunction orderPeople(arr, people) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/cN9jtK2jdAGmFKqDt"
	},
	{
		"title": "Phrase or Word Inverse",
		"description": "<p><span>Create a function that inverts words or the phrase depending on the value of parameter </span><code>type</code><span>. A </span><strong><span>\"P\"</span></strong><span> means to invert the entire phrase, while a </span><strong><span>\"W\"</span></strong><span> means to invert every word in the phrase. See the following examples for clarity.</span></p><h3><span>Examples</span></h3><pre><code>inverter(\"This is Valhalla\", \"P\") ➞ \"Valhalla is this\"\n\ninverter(\"One fine day to start\", \"W\") ➞ \"Eno enif yad ot trats\"\n\ninverter(\"Division by powers of two\", \"P\") ➞ \"Two of powers by division\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The </span><strong><span>first character</span></strong><span> of the returned string should be in </span><strong><span>uppercase</span></strong><span> and the rest are in lowercase.</span></li><li><span>There will be no empty strings as inputs. Punctuation marks, though quite important for grammatical correctness, are discounted in the input phrases.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"strings"
		],
		"tests": [
			"let strVectors = [",
			"  [\"This is Valhalla\", \"P\"], ",
			"  [\"One fine day to start\", \"W\"], ",
			"  [\"Division by powers of two\", \"P\"],",
			"  [\"Known for passion in quality\", \"P\"], ",
			"  [\"Excellence is achievable\", \"W\"],",
			"  [\"The master of your fate the captain of your soul\", \"W\"], ",
			"  [\"All but one in the middle of it all\", \"P\"],",
			"  [\"The master of your fate the captain of your soul\", \"P\"]]",
			"let strRes = [",
			"  \"Valhalla is this\",",
			"  \"Eno enif yad ot trats\",",
			"  \"Two of powers by division\",",
			"  \"Quality in passion for known\",",
			"  \"Ecnellecxe si elbaveihca\",",
			"  \"Eht retsam fo ruoy etaf eht niatpac fo ruoy luos\",",
			"  \"All it of middle the in one but all\",",
			"  \"Soul your of captain the fate your of master the\"]",
			"​",
			"for (let i in strVectors) {",
			"  Test.assertEquals(inverter(...strVectors[i]), strRes[i])",
			"}"
		],
		"starterFn": [
			"1\nfunction inverter(str, type) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZaJTyJwShJNi4B9CN"
	},
	{
		"title": "Tap Code Translation",
		"description": "<p><span>Tap code is a way to communicate messages via a series of taps (or knocks) for each letter in the message. Letters are arranged in a 5x5 </span><em><span>polybius square</span></em><span>, with the letter \"K\" being moved to the space with \"C\".</span></p><pre><code>   1  2  3  4  5\n1  A  B C\\K D  E\n2  F  G  H  I  J\n3  L  M  N  O  P\n4  Q  R  S  T  U\n5  V  W  X  Y  Z</code></pre><p><span>Each letter is translated by tapping out the </span><em><span>row</span></em><span> and </span><em><span>column</span></em><span> number that the letter appears in, leaving a short pause in-between. If we use \".\" for each tap, and a single space to denote the pause:</span></p><pre><code>text = \"break\"\n\n\"B\" = (1, 2) = \". ..\"\n\"R\" = (4, 2) = \".... ..\"\n\"E\" = (1, 5) = \". .....\"\n\"A\" = (1, 1) = \". .\"\n\"K\" = (1, 3) = \". ...\"</code></pre><p><span>Another space is added between the groups of taps for each letter to give the final code:</span></p><pre><code>\"break\" = \". .. .... .. . ..... . . . ...\"</code></pre><p><span>Write a function that returns the tap code if given a word, or returns the translated word (in lower case) if given the tap code.</span></p><h3><span>Examples</span></h3><pre><code>tapCode(\"break\") ➞ \". .. .... .. . ..... . . . ...\"\n\ntapCode(\".... ... ... ..... . ..... ... ... .... ....\") ➞ \"spent\"</code></pre><h3><span>Notes</span></h3><p><span>For more information on tap code, please see the resources section. The code was widely used in WW2 as a way for prisoners to communicate.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"math"
		],
		"tests": [
			"Test.assertEquals(tapCode(\"greeting\"), \".. .. .... .. . ..... . ..... .... .... .. .... ... ... .. ..\")",
			"Test.assertEquals(tapCode(\"confrontation\"), \". ... ... .... ... ... .. . .... .. ... .... ... ... .... .... . . .... .... .. .... ... .... ... ...\")",
			"Test.assertEquals(tapCode(\"leadership\"), \"... . . ..... . . . .... . ..... .... .. .... ... .. ... .. .... ... .....\")",
			"Test.assertEquals(tapCode(\"ankle\"), \". . ... ... . ... ... . . .....\")",
			"Test.assertEquals(tapCode(\"extreme\"), \". ..... ..... ... .... .... .... .. . ..... ... .. . .....\")",
			"Test.assertEquals(tapCode(\".... .... ... .... ... ... .. .... .. .. .. ... .... ....\"), \"tonight\")",
			"Test.assertEquals(tapCode(\"... . ... .... ..... .... . . ... . .... .... ..... ....\"), \"loyalty\")",
			"Test.assertEquals(tapCode(\".... .. . ..... .. . . ..... .... .. .... .. . . ... .\"), \"referral\")",
			"Test.assertEquals(tapCode(\". ..... ..... ... ... ..... .... .. . ..... .... ... .... ... .. .... ... .... ... ...\"), \"expression\")",
			"Test.assertEquals(tapCode(\". . .. . .. . .. .... ... ... .. .... .... .... ..... ....\"), \"affinity\")",
			"Test.assertEquals(tapCode(\"correspondence\"), \". ... ... .... .... .. .... .. . ..... .... ... ... ..... ... .... ... ... . .... . ..... ... ... . ... . .....\")",
			"Test.assertEquals(tapCode(\"atmosphere\"), \". . .... .... ... .. ... .... .... ... ... ..... .. ... . ..... .... .. . .....\")",
			"Test.assertEquals(tapCode(\"absolute\"), \". . . .. .... ... ... .... ... . .... ..... .... .... . .....\")",
			"Test.assertEquals(tapCode(\"redundancy\"), \".... .. . ..... . .... .... ..... ... ... . .... . . ... ... . ... ..... ....\")",
			"Test.assertEquals(tapCode(\"infrastructure\"), \".. .... ... ... .. . .... .. . . .... ... .... .... .... .. .... ..... . ... .... .... .... ..... .... .. . .....\")",
			"Test.assertEquals(tapCode(\"... ..... ... .... .. .... ... ... .... ....\"), \"point\")",
			"Test.assertEquals(tapCode(\"... ..... .... .. . ..... .. . . ..... .... .. . ..... ... ... . ... . .....\"), \"preference\")",
			"Test.assertEquals(tapCode(\".. .. .... ..... .. .... . .... . .....\"), \"guide\")",
			"Test.assertEquals(tapCode(\". ... .. ... . . .... .. . . . ... .... .... . ..... .... .. .. .... .... ... .... .... .. .... . ...\"), \"characteristic\")",
			"Test.assertEquals(tapCode(\". ... ... .... ... .. ... .. . ..... .... .. . ... . .....\"), \"commerce\")"
		],
		"starterFn": [
			"1\nfunction tapCode(text) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ihrD5RjtD34ThEb4z"
	},
	{
		"title": "Matrix Multiplication",
		"description": "<p><span>Create a function that multiplies two matricies (n x n each).</span></p><h3><span>Examples</span></h3><pre><code>matrixMult([[4, 2],[3, 1]], [[5, 6], [3, 8]]) ➞ [[26, 40], [18, 26]]\n\nmatrixMult([[3, 6],[4, 5]], [[8, 1], [7, 2]]) ➞ [[66, 15], [67, 14]]\n\nmatrixMult([[7, 5],[2, 2]], [[6, 7], [3, 2]]) ➞ [[57, 59], [18, 18]]</code></pre><h3><span>Notes</span></h3><p><span>Limit yourself to 2 x 2 matricies.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"functional_programming",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(matrixMult([[4, 2],[3, 1]], [[5, 6], [3, 8]]), [[26, 40], [18, 26]])",
			"Test.assertSimilar(matrixMult([[3, 6],[4, 5]], [[8, 1], [7, 2]]), [[66, 15], [67, 14]])",
			"Test.assertSimilar(matrixMult([[7, 5],[2, 2]], [[6, 7], [3, 2]]), [[57, 59], [18, 18]])"
		],
		"starterFn": [
			"1\nfunction matrixMult(m1, m2) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bqF3dphpBEKXE3miC"
	},
	{
		"title": "The Smallest Number",
		"description": "<p><span>Given a positive integer </span><code>n</code><span>, implement a function that finds the </span><strong><span>smallest</span></strong><span> number that is evenly divisible by the integers </span><code>1</code><span> through </span><code>n</code><span> inclusive.</span></p><h3><span>Examples</span></h3><pre><code>smallest(1) ➞ 1\n\nsmallest(5) ➞ 60\n\nsmallest(10) ➞ 2520\n\nsmallest(20) ➞ 232792560</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(smallest(1), 1n)",
			"Test.assertEquals(smallest(10), 2520n)",
			"Test.assertEquals(smallest(17), 12252240n)",
			"Test.assertEquals(smallest(31), 72201776446800n)",
			"Test.assertEquals(smallest(99), 69720375229712477164533808935312303556800n)",
			"Test.assertEquals(smallest(100), 69720375229712477164533808935312303556800n)",
			"Test.assertEquals(smallest(101), 7041757898200960193617914702466542659236800n)"
		],
		"starterFn": [
			"1\nfunction smallest(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GvApoCa5meP29r3dc"
	},
	{
		"title": "Bowling Scorekeeping",
		"description": "<p><span>Tenpin bowling scores can range from 0 (all gutter balls) to 300 (a perfect game). If you are unfamiliar with scorekeeping, please see the </span><strong><span>Resource</span></strong><span> for a quick description.</span></p><p><span>A complete record of a 10 frame bowling game can be given as an array of the number of pins knocked down by each ball in sequence from beginning to the end of the game.</span></p><p><span>Create a function whose argument is such an array. The function should return the final score.</span></p><h3><span>Examples</span></h3><pre><code>bowling([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) ➞ 300\n\nbowling([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) ➞ 80\n\nbowling([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) ➞ 150\n\nbowling([10, 5, 5, 10, 5, 5, 10, 5, 5, 10, 5, 5, 10, 5, 5, 10]) ➞ 200</code></pre><h3><span>Notes</span></h3><p><span>The number of balls thrown for a complete game can vary from 11 to 21 depending on the number of strikes thrown.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"games",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(bowling([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]), 300)",
			"Test.assertEquals(bowling([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]), 80)",
			"Test.assertEquals(bowling([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]), 150)",
			"Test.assertEquals(bowling([10, 5, 5, 10, 5, 5, 10, 5, 5, 10, 5, 5, 10, 5, 5, 10]), 200)",
			"Test.assertEquals(bowling([10, 0, 10, 7, 2, 10, 10, 10, 8, 2, 9, 1, 7, 2, 10, 10, 5]), 194)",
			"Test.assertEquals(bowling([8, 0, 8, 2, 10, 10, 7, 3, 9, 1, 7, 2, 10, 10, 9, 0]), 177)"
		],
		"starterFn": [
			"1\nfunction bowling(pins) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Snuathy8yB6yHCqf9"
	},
	{
		"title": "Popping Blocks",
		"description": "<p><span>When two blocks of the same \"type\" are adjacent to each other, the entire contiguous block disappears (pops off). If this occurs, this can allow previously separated blocks to be in contact with each other, setting off a chain reaction. This will continue until each block is surrounded by a different block.</span></p><p><span>Here's a demonstration:</span></p><pre><code>[\"A\", \"B\", \"C\", \"C\", \"B\", \"D\", \"A\"]\n// The two adjacent Cs pop off\n\n[\"A\", \"B\", \"B\", \"D\", \"A\"]\n// Two adjacent Bs pop off\n\n[\"A\", \"D\", \"A\"]\n// No more blocks can be popped off</code></pre><p><span>Another demonstration:</span></p><pre><code>[\"A\", \"B\", \"A\", \"A\", \"A\", \"B\", \"B\"]\n// The three adjacent As will pop off\n// (before the two adjacent Bs)\n\n[\"A\", \"B\", \"B\", \"B\"]\n// 3 adjacent Bs pop off\n\n[\"A\"]\n// Final result</code></pre><h3><span>Examples</span></h3><pre><code>finalResult([\"B\", \"B\", \"A\", \"C\", \"A\", \"A\", \"C\"]) ➞ [\"A\"]\n\nfinalResult([\"B\", \"B\", \"C\", \"C\", \"A\", \"A\", \"A\"]) ➞ []\n\nfinalResult([\"C\", \"A\", \"C\"]) ➞ [\"C\", \"A\", \"C\"]</code></pre><h3><span>Notes</span></h3><p><span>If the first round has multiple poppable blocks, pop starting from the left.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"loops",
			"regex"
		],
		"tests": [
			"Test.assertSimilar(finalResult(['B', 'B', 'A', 'C', 'A', 'A', 'C']), ['A'])",
			"Test.assertSimilar(finalResult(['B', 'B', 'C', 'C', 'A', 'A', 'A']), [])",
			"Test.assertSimilar(finalResult(['C', 'A', 'C']), ['C', 'A', 'C'])",
			"Test.assertSimilar(finalResult(['C', 'A', 'A', 'C', 'B']), ['B'])",
			"Test.assertSimilar(finalResult(['C', 'C']), [])",
			"Test.assertSimilar(finalResult(['A', 'B', 'C', 'C', 'B', 'D', 'A']), ['A', 'D', 'A'])",
			"Test.assertSimilar(finalResult(['A', 'B', 'A', 'A', 'A', 'B', 'B']), ['A'])"
		],
		"starterFn": [
			"1\nfunction finalResult(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MTSETAhgv24aeZ6wP"
	},
	{
		"title": "Strong Password",
		"description": "<p><span>Create a function that determines the minimum number of characters needed to make a strong password.</span></p><p><span>A password is considered </span><em><span>strong</span></em><span> if it satisfies the following criteria:</span></p><ul><li><span>Its length is at least 6.</span></li><li><span>It contains at least one digit.</span></li><li><span>It contains at least one lowercase English character.</span></li><li><span>It contains at least one uppercase English character.</span></li><li><span>It contains at least one special character: </span><code>!@#$%^&amp;*()-+</code></li></ul><p><span>Types of characters in a form you can paste into your solution:</span></p><pre><code>const numbers = \"0123456789\"\nconst lower = \"abcdefghijklmnopqrstuvwxyz\"\nconst upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nconst special = \"!@#$%^&amp;*()-+\"</code></pre><h3><span>Examples</span></h3><pre><code>strongPassword(“Ed1”) ➞ 3\n\nstrongPassword(“#Edabit”) ➞ 1\n\nstrongPassword(\"W1llth!spass?\") ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Try solving this without RegEx.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(strongPassword(\"#Edabit\"), 1)",
			"Test.assertEquals(strongPassword(\"Cr3ateAStr0ng1\"), 1)",
			"Test.assertEquals(strongPassword(\"CreateAStrongOne\"), 2)",
			"Test.assertEquals(strongPassword(\"willthispass\"), 3)",
			"Test.assertEquals(strongPassword(\"w1llth!spass?\"), 1)",
			"Test.assertEquals(strongPassword(\"W1llth!spass?\"), 0)",
			"Test.assertEquals(strongPassword(\"1sth!\"), 1)",
			"Test.assertEquals(strongPassword(\"sth!\"), 2)",
			"Test.assertEquals(strongPassword(\"bd\"), 4)",
			"Test.assertEquals(strongPassword(\"d\"), 5)",
			"Test.assertEquals(strongPassword(\"[?\"), 4)"
		],
		"starterFn": [
			"1\nfunction strongPassword(password) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XYDCXdCn6bqaT6SJm"
	},
	{
		"title": "Incrementing Rows and Columns",
		"description": "<p><span>Write a function that takes in three parameters: </span><code>r, c, i</code><span>, where:</span></p><ul><li><code>r</code><span> and </span><code>c</code><span> are the number of </span><strong><span>rows</span></strong><span> and </span><strong><span>columns</span></strong><span> to initialize a zero matrix.</span></li><li><code>i</code><span> represents the </span><strong><span>list of incrementing operations</span></strong><span> (+1).</span></li></ul><p><span>And returns the resulting matrix after applying all the increment operations. Each increment operation will </span><strong><span>add 1</span></strong><span> to the rows or columns specified in the </span><strong><span>incrementing list</span></strong><span>.</span></p><p><span>To illustrate:</span></p><pre><code>final(3, 3, [\"2r\", \"2c\", \"1r\", \"0c\"])\n\n# Initialize a 3 x 3 matrix of zeroes.\n\n[\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0]\n]\n\n# Apply \"2r\" (increment index 2 row).\n\n[\n  [0, 0, 0],\n  [0, 0, 0],\n  [1, 1, 1]\n]\n\n# Apply \"2c\" (increment index 2 column).\n\n[\n  [0, 0, 1],\n  [0, 0, 1],\n  [1, 1, 2]\n]\n\n# Apply \"1r\" (increment index 1 row).\n\n[\n  [0, 0, 1],\n  [1, 1, 2],\n  [1, 1, 2]\n]\n\n# Apply \"0c\" (increment index 0 column).\n# This is the result you should return.\n\n[\n  [1, 0, 1],\n  [2, 1, 2],\n  [2, 1, 2]\n]</code></pre><h3><span>Examples</span></h3><pre><code>final(2, 2, [\"0r\", \"0r\", \"0r\", \"1c\"]) ➞ [\n  [3, 4],\n  [0, 1]\n]\n\nfinal(2, 2, [\"0c\"]) ➞ [\n  [1, 0],\n  [1, 0]\n]\n\nfinal(3, 3, [\"1c\", \"2c\", \"2c\", \"3c\", \"3c\", \"3c\"]) ➞ [\n    [1, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3]\n]\n\nfinal(3, 3, []) ➞ [\n  [0, 0, 0],\n  [0, 0, 0],\n  [0, 0, 0]\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>The 2D matrix is 0-indexed.</span></li><li><span>The matrix created will have at least one row and one column.</span></li><li><span>All </span><strong><span>increment operations</span></strong><span>  will be exactly </span><code>+1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertSimilar(final(2, 2, ['0r', '0r', '0r', '1c']), [",
			"[3, 4], ",
			"[0, 1]",
			"])",
			"​",
			"Test.assertSimilar(final(2, 2, ['0c']), [",
			"[1, 0], ",
			"[1, 0]",
			"])",
			"​",
			"Test.assertSimilar(final(3, 3, ['0c', '1c', '1c', '2c', '2c', '2c']), [",
			"[1, 2, 3], ",
			"[1, 2, 3], ",
			"[1, 2, 3]",
			"])",
			"​",
			"Test.assertSimilar(final(3, 3, [\"2r\", \"2c\", \"1r\", \"0c\"]), [",
			"[1, 0, 1], ",
			"[2, 1, 2], ",
			"[2, 1, 2]",
			"])",
			"​",
			"Test.assertSimilar(final(1, 1, []), [[0]])",
			"​",
			"Test.assertSimilar(final(3, 3, ['0r', '2c', '1r', '2c', '1c', '1r', '1r']), [",
			"[1, 2, 3], "
		],
		"starterFn": [
			"1\nfunction final(r, c, i) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Hr6HTn3ngCbmJayd4"
	},
	{
		"title": "Block Dude",
		"description": "<p><span>In </span><strong><span>Block Dude</span></strong><span>, the main character can climb boxes, but only if they are stacked in a particular way so that he is able to climb them one at a time. More specifically, </span><strong><span>he can only climb UP or DOWN one box at a time</span></strong><span>.</span></p><p><span>Let </span><code>1</code><span>s represent the boxes, and </span><code>0</code><span> represent the background. Write a function that returns </span><code>true</code><span> if block dude </span><strong><span>can travel from the left side to the right side of the screen</span></strong><span> given his constraints.</span></p><p><span>For example, the sample layout below should return </span><code>true</code><span>.</span></p><pre><code>[\n  [0, 0, 0, 0, X, 0, 0, 0, 0],\n  [0, 0, 0, X, 1, X, X, 0, 0],\n  [0, X, X, 1, 1, 1, 1, X, 0],\n  [X, 1, 1, 1, 1, 1, 1, 1, X]\n]</code></pre><p><span>Since block dude can travel across these boxes (note: X's are just to show walking path and are </span><strong><span>not</span></strong><span> part of the actual input). On the other hand:</span></p><pre><code>[\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 0, 0, 0, 0],\n  [0, X, X, 1, 1, 1, 1, 0, 0],\n  [X, 1, 1, 1, 1, 1, 1, 1, 0]\n]</code></pre><p><span>Should return </span><code>false</code><span>, since block dude is stuck at column 3, being unable to climb 2 boxes at once.</span></p><h3><span>Examples</span></h3><pre><code>canTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1, 0]\n]) ➞ false\n\n// Block dude can't jump down 2 blocks.\n\ncanTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 1],\n  [0, 0, 1, 1, 1, 0, 1, 1, 1],\n  [0, 1, 1, 1, 1, 1, 1, 1, 1]\n]) ➞ true\n\n// Note: Sometimes the exit is at the top!\n\ncanTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 1, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1, 0]\n]) ➞ true\n\ncanTraverse([\n  [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 1, 0]\n]) ➞ false\n\n// Block dude can't climb 2 blocks.</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab for a link to play block dude.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canTraverse([",
			"  [0, 0, 0, 0, 0, 0, 0, 0, 0], ",
			"  [0, 0, 0, 1, 0, 0, 0, 0, 0], ",
			"  [0, 0, 1, 1, 0, 0, 1, 0, 0], ",
			"  [0, 1, 1, 1, 1, 1, 1, 1, 0]",
			"]), false)",
			"​",
			"Test.assertEquals(canTraverse([",
			"  [0, 0, 0, 0, 0, 0, 0, 0, 0], ",
			"  [0, 0, 0, 1, 0, 0, 0, 0, 0], ",
			"  [0, 0, 1, 1, 1, 0, 1, 0, 0], ",
			"  [0, 1, 1, 1, 1, 1, 1, 1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(canTraverse([",
			"  [0, 0, 0, 0, 0, 0, 0, 0, 0], ",
			"  [0, 0, 0, 1, 0, 0, 0, 0, 0], ",
			"  [0, 0, 1, 1, 1, 1, 1, 0, 0], ",
			"  [0, 1, 1, 1, 1, 1, 1, 1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(canTraverse([",
			"  [0, 0, 0, 0, 0, 0, 0, 0, 0], ",
			"  [0, 0, 0, 1, 0, 0, 0, 0, 0], ",
			"  [0, 1, 1, 1, 1, 1, 1, 0, 0], ",
			"  [0, 1, 1, 1, 1, 1, 1, 1, 0]"
		],
		"starterFn": [
			"1\nfunction canTraverse(x) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/K8ydJQoJTq7yEJyk2"
	},
	{
		"title": "Evaluating Simple Algebra",
		"description": "<p><span>Given a </span><em><span>string</span></em><span> containing an </span><em><span>algebraic equation</span></em><span>, calculate and </span><strong><span>return the value of x</span></strong><span>. You'll only be given equations for simple </span><strong><span>addition</span></strong><span> and </span><strong><span>subtraction</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>evalAlgebra(\"2 + x = 19\") ➞ 17\n\nevalAlgebra(\"4 - x = 1\") ➞ 3\n\nevalAlgebra(\"23 + 1 = x\") ➞ 24</code></pre><h3><span>Notes</span></h3><ul><li><span>There are spaces between every number and symbol in the string.</span></li><li><span>x may be a negative number.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(evalAlgebra(\"2 + x = 19\"), 17)",
			"Test.assertEquals(evalAlgebra(\"4 - x = 1\"), 3)",
			"Test.assertEquals(evalAlgebra(\"23 + 1 = x\"), 24)",
			"Test.assertEquals(evalAlgebra(\"25 - 1 = x\"), 24)",
			"Test.assertEquals(evalAlgebra(\"x + 10 = 53\"), 43)",
			"Test.assertEquals(evalAlgebra(\"-23 + x = -20\"), 3)",
			"Test.assertEquals(evalAlgebra(\"10 + x = 5\"), -5)",
			"Test.assertEquals(evalAlgebra(\"-49 - x = -180\"), 131)",
			"Test.assertEquals(evalAlgebra(\"x + 118 = 151\"), 33)",
			"Test.assertEquals(evalAlgebra(\"x - 46 = -2\"), 44)",
			"Test.assertEquals(evalAlgebra(\"70 - x = -38\"), 108)",
			"Test.assertEquals(evalAlgebra(\"-4 - 10 = x\"), -14)",
			"Test.assertEquals(evalAlgebra(\"x - 22 = -56\"), -34)",
			"Test.assertEquals(evalAlgebra(\"x - 57 = 62\"), 119)",
			"Test.assertEquals(evalAlgebra(\"x + 141 = 111\"), -30)",
			"Test.assertEquals(evalAlgebra(\"15 - 98 = x\"), -83)",
			"Test.assertEquals(evalAlgebra(\"15 + x = 71\"), 56)",
			"Test.assertEquals(evalAlgebra(\"-19 - 104 = x\"), -123)",
			"Test.assertEquals(evalAlgebra(\"x + 19 = 156\"), 137)",
			"Test.assertEquals(evalAlgebra(\"x + 65 = 155\"), 90)",
			"Test.assertEquals(evalAlgebra(\"x + 31 = 19\"), -12)",
			"Test.assertEquals(evalAlgebra(\"39 + 11 = x\"), 50)",
			"Test.assertEquals(evalAlgebra(\"x - 93 = -16\"), 77)",
			"Test.assertEquals(evalAlgebra(\"x + 95 = 216\"), 121)",
			"Test.assertEquals(evalAlgebra(\"-21 - 108 = x\"), -129)",
			"Test.assertEquals(evalAlgebra(\"107 - 18 = x\"), 89)"
		],
		"starterFn": [
			"1\nfunction evalAlgebra(eq) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CtYopj8BW3Cz78Pb4"
	},
	{
		"title": "Frequency by Level of Nesting",
		"description": "<p><span>Create a function that takes in a nested array and an element and returns the frequency of that element by nested level.</span></p><h3><span>Examples</span></h3><pre><code>freqCount([1, 4, 4, [1, 1, [1, 2, 1, 1]]], 1)\n➞ [[0, 1], [1, 2], [2, 3]]\n// The array has one 1 at level 0, 2 1's at level 1, and 3 1's at level 2.\n\nfreqCount([1, 5, 5, [5, [1, 2, 1, 1], 5, 5], 5, [5]], 5)\n➞ [[0, 3], [1, 4], [2, 0]]\n\nfreqCount([1, [2], 1, [[2]], 1, [[[2]]], 1, [[[[2]]]]], 2)\n➞ [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1]]</code></pre><h3><span>Notes</span></h3><ul><li><span>Start the default nesting (an array with no nesting) at 0.</span></li><li><span>Output the nested levels in order (e.g. 0 first, then 1, then 2, etc.).</span></li><li><span>Output 0 for the frequency if that particular level has no instances of that element (see example #2).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"recursion"
		],
		"tests": [
			"Test.assertSimilar(freqCount([1, 1, 1, 1], 1), [[0, 4]])",
			"Test.assertSimilar(freqCount([1, 1, 2, 2], 1), [[0, 2]])",
			"Test.assertSimilar(freqCount([1, 1, 2, [1]], 1), [[0, 2], [1, 1]])",
			"Test.assertSimilar(freqCount([1, 1, 2, [[1]]], 1), [[0, 2], [1, 0], [2, 1]])",
			"Test.assertSimilar(freqCount([[[1]]], 1), [[0, 0], [1, 0], [2, 1]])",
			"Test.assertSimilar(freqCount([1, 4, 4, [1, 1, [1, 2, 1, 1]]], 1), [[0, 1], [1, 2], [2, 3]])",
			"Test.assertSimilar(freqCount([1, 5, 5, [5, [1, 2, 1, 1], 5, 5], 5, [5]], 5), [[0, 3], [1, 4], [2, 0]])",
			"Test.assertSimilar(freqCount([1, [2], 1, [[2]], 1, [[[2]]], 1, [[[[2]]]]], 2), [[0, 0], [1, 1], [2, 1], [3, 1], [4, 1]])"
		],
		"starterFn": [
			"1\nfunction freqCount(arr, el) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MCK2Rqzn78pMksvsK"
	},
	{
		"title": "Recursive Sum",
		"description": "<p><span>Create a function that takes a number and returns . This function will take the argument and doing sum with last value given on last execution (return </span><code>n</code><span> if first use).</span></p><h3><span>Examples</span></h3><pre><code>recursivSum(151) == 151 ➞ true\n// It's first use: 151 == 151\n\nvar n = recursivSum(151); n(2) == 153 ➞ true\n// It was already used: 151 + 2 == 153</code></pre><p><span>You will be able to get the last sum value without calling the function twice.</span></p><pre><code>var n = recursivSum(151); n == 151 ➞ true</code></pre><p><span>You will be able to call the function </span><code>n</code><span> times without problems.</span></p><pre><code>recursivSum(1)(2)(3)(4)(5) == 15 ➞ true\n\nrecursivSum(1)(2)(3)(4)(5)(n) == 15 + n ➞ true</code></pre><p><span>If argument has no type return </span><code>false</code><span>.</span></p><pre><code>recursivSum(1)(\"2\") == false ➞ true\n\nrecursivSum(1)(\"2\")(3) == false ➞ true\n\nrecursivSum(\"1\")(2) == false ➞ true\n\nrecursivSum(\"1\") == false ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Good luck!</span></p>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"recursion"
		],
		"tests": [
			"const genRands = (n)=>Math.floor(Math.random()*(Math.pow(2,n)-1)+1)",
			"const genTab = (n,t)=>new Array(n).fill(\"\").map(v=>genRands(t));",
			"const addVal = (a)=>a.reduce((n,n1)=>n+n1,0);",
			"const randCall = t=>(t=genTab(Math.floor(Math.random()*100+1),t),[t.reduce((n,n1)=>n+n1,0),t.reduce((s,s1)=>s+\"(\"+s1+\")\",\"recursivSum\")])",
			"var nR1 = genTab(2,60);",
			"var nR2 = genTab(3,40);",
			"var nR3 = genRands(40);",
			"var n1 = recursivSum(nR1[0])(nR1[1]);",
			"var n2 = recursivSum(nR2[0])(nR2[1])(nR2[2]);",
			"var r1 = addVal(nR1);",
			"var r2 = addVal(nR2);",
			"var r3 = r1+nR3;",
			"var r4 = r2+nR3;",
			"​",
			"Test.assertEquals(recursivSum(nR1[0])(nR1[1])==r1,true);",
			"Test.assertEquals(recursivSum(nR2[0])(nR2[1])(nR2[2])==r2,true);",
			"Test.assertEquals(n1==r1,true);",
			"Test.assertEquals(n2==r2,true);",
			"Test.expect(n1(nR3)==r3,true);",
			"Test.expect(n2(nR3)==r4,true);",
			"Test.expect(n2(nR3.toString())==false,true);",
			"Test.expect(n2(()=>{})==false,true);",
			"Test.expect(n2(new Date())==false,true);",
			"Test.expect(n2(null)==false,true);",
			"Test.expect(n2(null)(1)==false,true);",
			"Test.expect(n2()==false,true);"
		],
		"starterFn": [
			"1\nvar recursivSum = function(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/pqvDabhxT88JTriyD"
	},
	{
		"title": "Bracket Logic",
		"description": "<p><span>Brackets and parentheses in mathematical expressions have to conform to certain logical rules. Every opening bracket must have a closing mate somewhere further down the line. Although brackets can be nested, different types cannot overlap:</span></p><ul><li><code>([&lt;x+y&gt;+3]-1)</code><span> makes sense because each set of brackets contains or is contained by another set.</span></li><li><code>([&lt;x+y&gt;+3)-1]</code><span> makes no sense because the parentheses and the square brackets overlap.</span></li></ul><p><span>Given a string expression that can contain four types of brackets: </span><code>() &lt;&gt; []  {}</code><span>, create a function that returns </span><code>true</code><span> if the bracket logic is valid and </span><code>false</code><span> if it is not.</span></p><h3><span>Examples</span></h3><pre><code>bracketLogic(\"[&lt;&gt;()]\") ➞ true\n\nbracketLogic(\"[&lt;(&gt;)]\") ➞ false\n\nbracketLogic(\"[(a*b+&lt;7-c&gt;+9]\") ➞ false\n// Opening parenthesis has no mate.\n\nbracketLogic(\"[{(h*i+3)-12]/4*x+2}\") ➞ false\n// Square and curly brackets overlap.\n\nbracketLogic(\"[ab(c/d&lt;e-f+(7*6)&gt;)+2]\") ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Any characters other than the brackets can be ignored.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(bracketLogic(\"{b}{y}{ }[x][{{(t)-}{}](t<w(^)>)-b}<[g](x{u[ ]})y>\"), false)",
			"Test.assertEquals(bracketLogic(\"{f}[t[[]]<[+](w)t>u(h)(%){f}[d{e}]{c(/)}<w>][v]\"), true)",
			"Test.assertEquals(bracketLogic(\"[(t)d]</{h}><<a <( )e>[*]{e{e}}<w{x[^]}>>\"), false)",
			"Test.assertEquals(bracketLogic(\"{g}((-) ^>b)[^]{{*<->}(w)(u)(%)}({/}c)(%)[g{b}]<z({<< >w>c}d)[b]>\"), false)",
			"Test.assertEquals(bracketLogic(\"(y)(c)(){[[ ]z] [{+}z[*]]{+}}([d]<y<e>>c)[b][b]\"), true)",
			"Test.assertEquals(bracketLogic(\"((^(b))e>(<d<w>>(({a}/(g)){t</)}b(d)){[v]u})\"), false)",
			"Test.assertEquals(bracketLogic(\"{([%]</>u)<{<y{v}>{<c>h}{y}f}[y]{<*>e}[^]v><[h]d>}[d]\"), true)",
			"Test.assertEquals(bracketLogic(\"{a}{<(^)(b)%>[z]<->e}[{z}%]{<^>g}<[h] ({ }y[*]<v>)>{x[+]<^>}<v>[]\"), true)"
		],
		"starterFn": [
			"1\nfunction bracketLogic(xp) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/edzM82cAzurBfWF3z"
	},
	{
		"title": "2048 Tiles Slide",
		"description": "<p><strong><span>2048</span></strong><span> is a game where you need to slide numbered tiles (natural powers of 2) up, down, left or right on a square grid to combine them in a tile with the number 2048.</span></p><p><span>The sliding procedure is described by the following rules:</span></p><ul><li><span>Tiles slide as far as possible in the chosen direction until they are stopped by either another tile or the edge of the grid.</span></li><li><span>If two tiles of the same number collide while moving, they will merge into a tile with the total value of the two tiles that collided.</span><ul><li><span>If more than one variant of merging is possible, move direction shows one that will take effect.</span></li></ul></li><li><span>Tile cannot merge with another tile more than one time.</span></li></ul><p><span>Sliding is done almost the same for each direction and for each row/column of the grid, so your task is to implement only the left slide for a single row.</span></p><h3><span>Examples</span></h3><pre><code>leftSlide([2, 2, 2, 0]) ➞ [4, 2, 0, 0]\n// Merge left-most tiles first.\n\nleftSlide([2, 2, 4, 4, 8, 8]) ➞ [4, 8, 16, 0, 0, 0]\n// Only merge once.\n\nleftSlide([0, 2, 0, 2, 4]) ➞ [4, 4, 0, 0, 0]\n\nleftSlide([0, 2, 2, 8, 8, 8]) ➞ [4, 16, 8, 0, 0, 0]</code></pre><h3><span>Notes</span></h3><ul><li><span>Input row can be of any size (empty too).</span></li><li><span>Input row will contain only natural powers of 2 and 0 for empty tiles.</span></li><li><span>Keep trailing zeros in the output.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"games",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(leftSlide([2, 2, 2, 0]), [4, 2, 0, 0])",
			"Test.assertSimilar(leftSlide([2, 2, 4, 4, 8, 8]), [4, 8, 16, 0, 0, 0])",
			"Test.assertSimilar(leftSlide([0, 2, 0, 2, 4]), [4, 4, 0, 0, 0])",
			"Test.assertSimilar(leftSlide([0, 2, 2, 8, 8, 8]), [4, 16, 8, 0, 0, 0])",
			"Test.assertSimilar(leftSlide([0, 0, 0, 0]), [0, 0, 0, 0])",
			"Test.assertSimilar(leftSlide([0, 0, 0, 2]), [2, 0, 0, 0])",
			"Test.assertSimilar(leftSlide([2, 0, 0, 0]), [2, 0, 0, 0])",
			"Test.assertSimilar(leftSlide([8, 2, 2, 4]), [8, 4, 4, 0])",
			"Test.assertSimilar(leftSlide([1024, 1024, 1024, 512, 512, 256, 256, 128, 128, 64, 32, 32]), [2048, 1024, 1024, 512, 256, 64, 64, 0, 0, 0, 0, 0])"
		],
		"starterFn": [
			"1\nfunction leftSlide(row) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jmamZufrqZkhH7ZLM"
	},
	{
		"title": "English to Pig Latin Translator",
		"description": "<p><span>Pig latin has two very simple rules:</span></p><ol><li><span>If a word starts with a consonant move the first letter(s) of the word, till you reach a vowel, to the end of the word and add \"ay\" to the end.</span><ul><li><span>have ➞ avehay</span></li><li><span>cram ➞ amcray</span></li><li><span>take ➞ aketay</span></li><li><span>cat ➞ atcay</span></li><li><span>shrimp ➞ impshray</span></li><li><span>trebuchet ➞ ebuchettray</span></li></ul></li><li><span>If a word starts with a vowel add \"yay\" to the end of the word.</span><ul><li><span>ate ➞ ateyay</span></li><li><span>apple ➞ appleyay</span></li><li><span>oaken ➞ oakenyay</span></li><li><span>eagle ➞ eagleyay</span></li></ul></li></ol><p><span>Write two functions to make an English to pig latin translator. The first function </span><code>translateWord(word)</code><span> takes a single word and returns that word translated into pig latin. The second function </span><code>translateSentence(sentence)</code><span> takes an English sentence and returns that sentence translated into pig latin.</span></p><h3><span>Examples</span></h3><pre><code>translateWord(\"flag\") ➞ \"agflay\"\n\ntranslateWord(\"Apple\") ➞ \"Appleyay\"\n\ntranslateWord(\"button\") ➞ \"uttonbay\"\n\ntranslateWord(\"\") ➞ \"\"\n\ntranslateSentence(\"I like to eat honey waffles.\") ➞ \"Iyay ikelay otay eatyay oneyhay afflesway.\"\n\ntranslateSentence(\"Do you think it is going to rain today?\") ➞ \"Oday ouyay inkthay ityay isyay oinggay otay ainray odaytay?\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Regular expressions will help you not mess up the punctuation in the sentence.</span></li><li><span>If the original word or sentence starts with a capital letter, the translation should preserve its case (see examples #2, #5 and #6).</span></li></ul>",
		"publishedBy": "SpiralStudios",
		"publishedByUrl": "https://edabit.com/user/a53oGxJAuyuRrx3E8",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(translateWord(\"have\"), \"avehay\")",
			"Test.assertEquals(translateWord(\"cram\"), \"amcray\")",
			"Test.assertEquals(translateWord(\"take\"), \"aketay\")",
			"Test.assertEquals(translateWord(\"Cat\"), \"Atcay\")",
			"Test.assertEquals(translateWord(\"Shrimp\"), \"Impshray\")",
			"Test.assertEquals(translateWord(\"trebuchet\"), \"ebuchettray\")",
			"Test.assertEquals(translateWord(\"ate\"), \"ateyay\")",
			"Test.assertEquals(translateWord(\"Apple\"), \"Appleyay\")",
			"Test.assertEquals(translateWord(\"oaken\"), \"oakenyay\")",
			"Test.assertEquals(translateWord(\"eagle\"), \"eagleyay\")",
			"Test.assertEquals(translateWord(\"ink\"), \"inkyay\")",
			"Test.assertEquals(translateWord(\"unicorn\"), \"unicornyay\")",
			"Test.assertEquals(translateWord(\"\"), \"\")",
			"Test.assertEquals(translateSentence(\"I like to eat honey waffles\"), \"Iyay ikelay otay eatyay oneyhay afflesway\")",
			"Test.assertEquals(translateSentence(\"Do you think it is going to rain today?\"), \"Oday ouyay inkthay ityay isyay oinggay otay ainray odaytay?\")",
			"Test.assertEquals(translateSentence('He said, \"When will this all end?\"'), 'Ehay aidsay, \"Enwhay illway isthay allyay endyay?\"')",
			"Test.assertEquals(translateSentence(\"\"), \"\")"
		],
		"starterFn": [
			"1\nfunction translateWord(word) {",
			"2\n  ",
			"3\n}",
			"4\n​",
			"5\nfunction translateSentence(sentence) {",
			"6\n  ",
			"7\n}"
		],
		"url": "https://edabit.com/challenge/cEBFLS8WSBf8245vZ"
	},
	{
		"title": "Palindrome Descendant",
		"description": "<p><span>A number may not be a palindrome, but its descendant can be. A number's direct child is created by summing each pair of adjacent digits to create the digits of the next number.</span></p><p><span>For instance, </span><code>123312</code><span> is not a palindrome, but its next child </span><code>363</code><span> is, where: </span><code>3 = 1 + 2; 6 = 3 + 3; 3 = 1 + 2</code><span>.</span></p><p><span>Create a function that returns </span><code>true</code><span> if the </span><strong><span>number itself</span></strong><span> is a palindrome or any of its </span><strong><span>descendants down to 2 digits</span></strong><span> (a 1-digit number is trivially a palindrome).</span></p><h3><span>Examples</span></h3><pre><code>palindromedescendant(11211230) ➞ true\n// 11211230 ➞ 2333 ➞ 56 ➞ 11\n\npalindromeDescendant(13001120) ➞ true\n// 13001120 ➞ 4022 ➞ 44\n\npalindromeDescendant(23336014) ➞ true\n// 23336014 ➞ 5665\n\npalindromeDescendant(11) ➞ true\n// Number itself is a palindrome.</code></pre><h3><span>Notes</span></h3><p><span>Numbers will always have an even number of digits.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"recursion",
			"validation"
		],
		"tests": [
			"Test.assertEquals(palindromeDescendant(11211230), true)",
			"Test.assertEquals(palindromeDescendant(13001120), true)",
			"Test.assertEquals(palindromeDescendant(23336014), true)",
			"Test.assertEquals(palindromeDescendant(11), true)",
			"Test.assertEquals(palindromeDescendant(1122), false)",
			"Test.assertEquals(palindromeDescendant(332233), true)",
			"Test.assertEquals(palindromeDescendant(10210112), true)",
			"Test.assertEquals(palindromeDescendant(9735), false)",
			"Test.assertEquals(palindromeDescendant(97358817), false)"
		],
		"starterFn": [
			"1\nfunction palindromeDescendant(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HXRsxLL6vBqJtKeQu"
	},
	{
		"title": "Edabit's Encryption Scheme",
		"description": "<p><span>An English text needs to be encrypted using Edabit’s encryption scheme. First, the spaces are removed from the text. Let </span><em><span>L</span></em><span> be the length of this text. Then, characters are written into a grid, whose rows and columns have the following constraints:</span></p><p><span>For example, the sentence \"</span><em><span>if man was meant to stay on the ground god would have given us roots</span></em><span>\", after removing spaces, is </span><em><span>54</span></em><span> characters long.  The square root of 54 is between 7 and 8, so it is written in the form of a grid with 7 rows and 8 columns.</span></p><pre><code>ifmanwas\nmeanttos\ntayonthe\ngroundgo\ndwouldha\nvegivenu\nsroots</code></pre><ul><li><span>Ensure that </span><em><span>rows x column &gt;= L</span></em></li><li><span>If multiple grids satisfy the above conditions, choose the one with the minimum area.</span></li></ul><pre><code>rows x columns &gt;= L</code></pre><p><span>The encoded message is obtained by displaying the characters in a column, inserting a space, and then displaying the next column and inserting a space, and so on. For example, the encoded message for the above rectangle is:</span></p><pre><code>imtgdvs fearwer mayoogo anouuio ntnnlvt wttddes aohghn sseoau</code></pre><h3><span>Examples</span></h3><pre><code>encryption(“haveaniceday”) ➞ “hae and via ecy”\n\n// have\n// anic\n// eday\n\nencryption(“feedthedog”) ➞ “fto ehg ee dd”\n\nencryption(“chillout”) ➞ “clu hlt io”\n\nencryption(“A Fool and His Money Are Soon Parted.”) ➞ \"Anoea FdnSr oHeot oiyoe lsAnd aMrP.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Ensure capitalization remains the same in encrypted text.</span></li><li><span>Do not remove special characters.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(encryption(\"haveaniceday\"), \"hae and via ecy\")",
			"Test.assertEquals(encryption(\"feedthedog\"), \"fto ehg ee dd\")",
			"Test.assertEquals(encryption(\"chillout\"), \"clu hlt io\")",
			"Test.assertEquals(encryption(\"A Fool and His Money Are Soon Parted.\"), \"Anoea FdnSr oHeot oiyoe lsAnd aMrP.\")",
			"Test.assertEquals(encryption(\"One should not worry over things that have already happened and that cannot be changed.\"), \"Onvtlphb. noehreae etraentc swttaech hohhddaa oriayann urnvhnng lygeadoe dosapttd\")",
			"Test.assertEquals(encryption(\"Back to Square One is a popular saying that means a person has to start over, similar to: back to the drawing board.\"), \"Brpgatroea aeutpo,:dr cOlhessbrd knaartiaa. tertsamcw oismoriki Ssaentltn qayahoaog upinavrtb aonssetho\")"
		],
		"starterFn": [
			"1\nfunction encryption(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mNinzJLXY7QdRmqMN"
	},
	{
		"title": "N-bonacci Numbers",
		"description": "<p><span>N-bonacci numbers are generalisations of the fibonacci sequence, where the next term is always the sum of the previous </span><code>N</code><span> terms. By convention, the first (N-1) terms are all 0 and the Nth term is 1.</span></p><p><span>The initial 10 terms of the first 5 N-bonacci sequences are therefore:</span></p><ul><li><span>1-bonacci = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...</span></li><li><span>2-bonacci = 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...</span></li><li><span>3-bonacci = 0, 0, 1, 1, 2, 4, 7, 13, 24, 44, ...</span></li><li><span>4-bonaaci = 0, 0, 0, 1, 1, 2, 4, 8, 15, 29, ...</span></li><li><span>5-bonacci = 0, 0, 0, 0, 1, 1, 2, 4, 8, 16, ...</span></li></ul><p><span>Write a function that returns the kth term of the N-bonacci sequence, for two integer arguments </span><code>N</code><span> and </span><code>k</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>bonacci(1, 10) ➞ 1\n\nbonacci(2, 10) ➞ 34\n\nbonacci(3, 10) ➞ 44\n\nbonacci(4, 10) ➞ 29\n\nbonacci(5, 10) ➞ 16</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(bonacci(2, 7), 8)",
			"Test.assertEquals(bonacci(3, 13), 274)",
			"Test.assertEquals(bonacci(5, 24), 203513)",
			"Test.assertEquals(bonacci(8, 44), 32440904961)",
			"Test.assertEquals(bonacci(1, 4), 1)",
			"Test.assertEquals(bonacci(2, 2), 1)",
			"Test.assertEquals(bonacci(3, 1), 0)"
		],
		"starterFn": [
			"1\nfunction bonacci(N, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LwLoX98Sa3qdv99oR"
	},
	{
		"title": "Atbash Cipher",
		"description": "<p><span>The Atbash cipher is an encryption method in which each letter of a word is replaced with its \"mirror\" letter in the alphabet: A &lt;=&gt; Z; B &lt;=&gt; Y; C &lt;=&gt; X; etc.</span></p><p><span>Create a function that takes a string and applies the Atbash cipher to it.</span></p><h3><span>Examples</span></h3><pre><code>atbash(\"apple\") ➞ \"zkkov\"\n\natbash(\"Hello world!\") ➞ \"Svool dliow!\"\n\natbash(\"Christmas is the 25th of December\") ➞ \"Xsirhgnzh rh gsv 25gs lu Wvxvnyvi\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Capitalisation should be retained.</span></li><li><span>Non-alphabetic characters should not be altered.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(atbash(\"abcdefghijklmnopqrstuvwxyz\"), \"zyxwvutsrqponmlkjihgfedcba\")",
			"Test.assertEquals(atbash(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), \"ZYXWVUTSRQPONMLKJIHGFEDCBA\")",
			"Test.assertEquals(atbash(\"The word 'atbash' derives from the the first and last 2 letters of the Hebrew alphabet.\"), \"Gsv dliw 'zgyzhs' wvirevh uiln gsv gsv urihg zmw ozhg 2 ovggvih lu gsv Svyivd zokszyvg.\")",
			"Test.assertEquals(atbash(\"Vmxibkgrlm zmw wvxibkgrlm ziv rwvmgrxzo uli gsv Zgyzhs xrksvi.\"),\"Encryption and decryption are identical for the Atbash cipher.\")"
		],
		"starterFn": [
			"1\nfunction atbash(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xkBFTcHuJTXmrLwjw"
	},
	{
		"title": "Get the Lucky Number",
		"description": "<p><span>A lucky number is a number of a sequence generated by a sieve algorithm: if a number in the positive integers series survives to the sieve filtering algorithm, it's lucky and survives, otherwise it disappears from the sequence.</span></p><ul><li><span>First you must obtain an array of numbers, from 1 to the needed size.</span></li><li><span>First number is 1 and it survives: next to him there is number 2, that becomes the sieve's filter: every second number in the list (counting from 1) has to be filtered (as to say every even number).</span></li><li><span>After this step, the next number to survive after 1 is 3: eliminate every third number in the list (counting from 1).</span></li><li><span>After this step, the next number to survive after 3 is 7: eliminate every seventh number in the list.</span></li><li><span>Repeat the steps incrementing the filter condition at every step (as to say that the sieve filter of a new step is equal to the first number greater than the previous step last lucky number) until there are no numbers to eliminate in the list.</span></li></ul><p><span>See the example below for a given </span><code>size = 25</code><span> and </span><code>nth = 5</code><span>.</span></p><ul><li><p><strong><span>Step 1:</span></strong><span> Generate a list from 1 to </span><code>size</code><span>.</span></p><ul><li><span>1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25</span></li></ul></li><li><p><strong><span>Step 2:</span></strong><span> First sieve filter is 2: every second number from the start has to be eliminated.</span></p><ul><li><span>1, </span><del><span>2</span></del><span>, 3, </span><del><span>4</span></del><span>, 5, </span><del><span>6</span></del><span>, 7, </span><del><span>8</span></del><span>, 9, </span><del><span>10</span></del><span>, 11, </span><del><span>12</span></del><span>, 13, </span><del><span>14</span></del><span>, 15, </span><del><span>16</span></del><span>, 17, </span><del><span>18</span></del><span>, 19, </span><del><span>20</span></del><span>, 21, </span><del><span>22</span></del><span>, 23, </span><del><span>24</span></del><span>, 25</span></li></ul></li><li><p><strong><span>Step 3:</span></strong><span>  Sieve filter is now 3: every third number from the start has to be eliminated.</span></p><ul><li><span>1, 3, </span><del><span>5</span></del><span>, 7, 9, </span><del><span>11</span></del><span>, 13, 15, </span><del><span>17</span></del><span>, 19, 21, </span><del><span>23</span></del><span>, 25</span></li></ul></li><li><p><strong><span>Step 4:</span></strong><span> Sieve filter is now 7: every seventh number from the start has to be eliminated.</span></p><ul><li><span>1, 3, 7, 9, 13, 15, </span><del><span>19</span></del><span>, 21, 25</span></li></ul></li><li><p><strong><span>Step 5:</span></strong><span> Sieve filter is now 9: every ninth number has to be eliminated, but our list now contains only 8 numbers and so the algorithm ends. The </span><code>nth</code><span> number of the sequence is </span><strong><span>13</span></strong><span>.</span></p></li></ul><p><span>In the animation below, you can see the progressive sieving process for a list of 120 numbers: purple filling is for eliminated numbers, red is for lucky ones.</span></p><p><img alt=\"Lucky Sieve\" src=\"https://edabit-challenges.s3.amazonaws.com/LuckySieve.gif\"></p><p><span>Given a </span><code>size</code><span> being the dimension of the starting array, write a function that returns the </span><code>nth</code><span> number of the resulting sequence after the sieving process.</span></p><h3><span>Examples</span></h3><pre><code>getLuckyNumber(25, 5) ➞ 13\n// Same set and procedure as in example in above instructions.\n\ngetLuckyNumber(3, 2) ➞ 3\n// Original set = 1, 2, 3\n// After first step = 1, 3\n// No more steps possibles (filter is for every third element, length of set is 2)\n// The second (nth) element is 3\n\ngetLuckyNumber(120, 13) ➞ 49\n// Same set as in animated gif in above instructions.</code></pre><h3><span>Notes</span></h3><ul><li><span>Check </span><strong><span>Resources</span></strong><span> tab for more info on lucky numbers.</span></li><li><span>Every given </span><code>size</code><span> and </span><code>nth</code><span>  are valid parameters to return a lucky number, there are no exceptions to handle.</span></li><li><span>Despite this sieve has similarities with the \"Sieve of Eratosthenes\" used for retrieving prime numbers in the ancient Greece, it is more related to the ancient Josephus permutations challenge (as in </span><a target=\"_blank\" href=\"https://edabit.com/challenge/j4jFjDQZCQtJ4nDSA\"><span>this exercise</span></a><span> or </span><a target=\"_blank\" href=\"https://edabit.com/challenge/EcEN8FnruPEj6x5k4\"><span>this one</span></a><span>): is it in fact usually called \"The Josephus Flavius Sieve\".</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(getLuckyNumber(25, 5), 13, \"Example #1\")",
			"Test.assertEquals(getLuckyNumber(3, 2), 3, \"Example #2\")",
			"Test.assertEquals(getLuckyNumber(120, 13), 49, \"Example #3\")",
			"Test.assertEquals(getLuckyNumber(350, 27), 127)",
			"Test.assertEquals(getLuckyNumber(700, 40), 201)",
			"Test.assertEquals(getLuckyNumber(1000, 57), 303)",
			"Test.assertEquals(getLuckyNumber(5000, 90), 535)"
		],
		"starterFn": [
			"1\nfunction getLuckyNumber(size, nth) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/27dNMsHnQc5LgWvQM"
	},
	{
		"title": "Maximum Product of Digits",
		"description": "<p><span>Write a function that returns all numbers </span><strong><span>less than or equal to N</span></strong><span> with the maximum product of digits.</span></p><h3><span>Examples</span></h3><pre><code>maxProduct(8) ➞ [8]\n\nmaxProduct(27) ➞ [27]\n\nmaxProduct(211) ➞ [99, 199]\n\nmaxProduct(9578) ➞ [8999]</code></pre><h3><span>Notes</span></h3><p><span>Search for numbers in the range: </span><code>[0, n]</code><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(maxProduct(8), [8])",
			"Test.assertSimilar(maxProduct(21), [9, 19])",
			"Test.assertSimilar(maxProduct(26), [26])",
			"Test.assertSimilar(maxProduct(27), [27])",
			"Test.assertSimilar(maxProduct(43), [39])",
			"Test.assertSimilar(maxProduct(90), [89])",
			"Test.assertSimilar(maxProduct(199), [99, 199])",
			"Test.assertSimilar(maxProduct(211), [99, 199])",
			"Test.assertSimilar(maxProduct(455), [399])",
			"Test.assertSimilar(maxProduct(917), [899])",
			"Test.assertSimilar(maxProduct(1578), [999])",
			"Test.assertSimilar(maxProduct(9578), [8999])",
			"Test.assertSimilar(maxProduct(11111), [9999])",
			"Test.assertSimilar(maxProduct(41111), [39999])"
		],
		"starterFn": [
			"1\nfunction maxProduct(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/79WaA8XtaACx8FND5"
	},
	{
		"title": "Jake's Meal Time",
		"description": "<p><span>Jake is a very habitual person. He eats breakfast at 7:00 a.m. each morning, lunch at 12:00 p.m. and dinner at 7:00 p.m. in the evening.</span></p><p><span>Create a function that takes in the current time as a string and determines the duration of time before Jake's next meal. Represent this as an array with the first and second elements representing hours and minutes, respectively.</span></p><h3><span>Examples</span></h3><pre><code>timeToEat(\"2:00 p.m.\") ➞ [5, 0]\n// 5 hours until the next meal, dinner\n\ntimeToEat(\"5:50 a.m.\") ➞ [1, 10]\n// 1 hour and 10 minutes until the next meal, breakfast</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"dates",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(timeToEat(\"2:00 p.m.\"), [5, 0]);",
			"Test.assertSimilar(timeToEat(\"5:50 a.m.\"), [1, 10]);",
			"Test.assertSimilar(timeToEat(\"6:37 p.m.\"), [0, 23]);",
			"Test.assertSimilar(timeToEat(\"12:00 a.m.\"), [7, 0]);",
			"Test.assertSimilar(timeToEat(\"11:58 p.m.\"), [7, 2]);",
			"Test.assertSimilar(timeToEat(\"3:33 p.m.\"), [3, 27]);"
		],
		"starterFn": [
			"1\nfunction timeToEat(currentTime) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HXAWjd2Nkj8eAJ2xY"
	},
	{
		"title": "Knights on a Board",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if the knights are placed on a chessboard such that </span><strong><span>no knight can capture another knight</span></strong><span>. Here, </span><code>0</code><span>s represent empty squares and </span><code>1</code><span>s represent knights.</span></p><h3><span>Examples</span></h3><pre><code>cannotCapture([\n  [0, 0, 0, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 1, 0, 1, 0],\n  [0, 1, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 1, 0, 0, 0]\n]) ➞ true\n\ncannotCapture([\n  [1, 0, 1, 0, 1, 0, 1, 0],\n  [0, 1, 0, 1, 0, 1, 0, 1],\n  [0, 0, 0, 0, 1, 0, 1, 0],\n  [0, 0, 1, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 0, 1, 0],\n  [0, 0, 0, 0, 0, 1, 0, 1],\n  [1, 0, 0, 0, 1, 0, 1, 0],\n  [0, 0, 0, 1, 0, 1, 0, 1]\n]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Knights can be present in any of the 64 squares.</span></li><li><span>No other pieces except knights exist.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(cannotCapture([",
			"[0, 0, 0, 1, 0, 0, 0, 0],",
			"[0, 0, 0, 0, 0, 0, 0, 0],",
			"[0, 1, 0, 0, 0, 1, 0, 0],",
			"[0, 0, 0, 0, 1, 0, 1, 0],",
			"[0, 1, 0, 0, 0, 1, 0, 0],",
			"[0, 0, 0, 0, 0, 0, 0, 0],",
			"[0, 1, 0, 0, 0, 0, 0, 1],",
			"[0, 0, 0, 0, 1, 0, 0, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(cannotCapture([",
			"[1, 0, 1, 0, 1, 0, 1, 0],",
			"[0, 1, 0, 1, 0, 1, 0, 1],",
			"[0, 0, 1, 0, 1, 0, 1, 0],",
			"[0, 0, 0, 1, 0, 1, 0, 1],",
			"[0, 0, 0, 0, 1, 0, 1, 0],",
			"[0, 0, 0, 0, 0, 1, 0, 1],",
			"[0, 0, 0, 0, 0, 0, 1, 0],",
			"[0, 0, 0, 0, 0, 0, 0, 1]",
			"]), true)",
			"​",
			"Test.assertEquals(cannotCapture([",
			"[1, 0, 1, 0, 1, 0, 1, 0],",
			"[0, 1, 0, 1, 0, 1, 0, 1],",
			"[1, 0, 1, 0, 1, 0, 1, 0],"
		],
		"starterFn": [
			"1\nfunction cannotCapture(board) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YFkyAh5sm9Guqth85"
	},
	{
		"title": "The Fiscal Code",
		"description": "<p><span>Each person in Italy has an unique identifying ID code issued by the national tax office after the birth registration: the Fiscal Code (</span><em><span>Codice Fiscale</span></em><span>). Check the </span><strong><span>Resources</span></strong><span> tab for more info on this.</span></p><p><span>Given an object containing the personal data of a person (name, surname, gender and date of birth) return the 11 code characters as a string following these steps:</span></p><ul><li><p><span>Generate 3 capital letters from the </span><strong><span>surname</span></strong><span>, if it has:</span></p><ul><li><span>At least 3 consonants then the first three consonants are used. (</span><em><span>Newman -&gt; NWM</span></em><span>).</span></li><li><span>Less than 3 consonants then vowels will replace missing characters in the same order they appear (</span><em><span>Fox -&gt; FXO | Hope -&gt; HPO</span></em><span>).</span></li><li><span>Less than three letters then \"X\" will take the third slot after the consonant and the vowel (</span><em><span>Yu -&gt; YUX</span></em><span>).</span></li></ul></li><li><p><span>Generate 3 capital letters from the </span><strong><span>name</span></strong><span>, if it has:</span></p><ul><li><span>Exactly 3 consonants then consonants are used in the order they appear (</span><em><span>Matt -&gt; MTT</span></em><span>).</span></li><li><span>More than 3 consonants then first, third and fourth consonant are used (</span><em><span>Samantha -&gt; SNT | Thomas -&gt; TMS</span></em><span>).</span></li><li><span>Less than 3 consonants then vowels will replace missing characters in the same order they appear (</span><em><span>Bob -&gt; BBO | Paula -&gt; PLA</span></em><span>).</span></li><li><span>Less than three letters then \"X\" will take the the third slot after the consonant and the vowel (</span><em><span>Al -&gt; LAX</span></em><span>).</span></li></ul></li><li><p><span>Generate 2 numbers, 1 letter and 2 numbers from </span><strong><span>date of birth</span></strong><span> and </span><strong><span>gender</span></strong><span>:</span></p><ul><li><span>Take the last two digits of the year of birth (</span><em><span>1985 -&gt; 85</span></em><span>).</span></li><li><span>Generate a letter corresponding to the month of birth (</span><em><span>January -&gt; A | December -&gt; T</span></em><span>) using the table for conversion included in the code.</span></li><li><span>For males take the day of birth adding one zero at the start if is less than 10 (</span><em><span>any 9th day -&gt; 09 | any 20th day -&gt; 20</span></em><span>).</span></li><li><span>For females take the day of birth and sum 40 to it (</span><em><span>any 9th day -&gt; 49 | any 20th day -&gt; 60</span></em><span>).</span></li></ul></li></ul><h3><span>Examples</span></h3><pre><code>fiscalCode({\n  name: \"Matt\",\n  surname: \"Edabit\",\n  gender: \"M\",\n  dob: \"1/1/1900\"\n}) ➞ \"DBTMTT00A01\"\n\nfiscalCode({\n  name: \"Helen\",\n  surname: \"Yu\",\n  gender: \"F\",\n  dob: \"1/12/1950\"\n}) ➞ \"YUXHLN50T41\"\n\nfiscalCode({\n  name: \"Mickey\",\n  surname: \"Mouse\",\n  gender: \"M\",\n  dob: \"16/1/1928\"\n}) ➞ \"MSOMKY28A16\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Code letters must be uppercase.</span></li><li><span>Date of birth is given in D/M/YYYY format.</span></li><li><span>The conversion table for months is already in the starting code.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"formatting",
			"objects",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fiscalCode({ name: \"Brendan\", surname: \"Eich\", gender: \"M\", dob: \"1/12/1961\" }), \"CHEBND61T01\")",
			"Test.assertEquals(fiscalCode({ name: \"Helen\", surname: \"Yu\", gender: \"F\", dob: \"1/12/1950\" }), \"YUXHLN50T41\")",
			"Test.assertEquals(fiscalCode({ name: \"Al\", surname: \"Capone\", gender: \"M\", dob: \"17/1/1899\" }), \"CPNLAX99A17\")",
			"Test.assertEquals(fiscalCode({ name: \"Mickey\", surname: \"Mouse\", gender: \"M\", dob: \"16/1/1928\" }), \"MSOMKY28A16\")",
			"Test.assertEquals(fiscalCode({ name: \"Marie\", surname: \"Curie\", gender: \"F\", dob: \"7/11/1867\" }), \"CRUMRA67S47\")"
		],
		"starterFn": [
			"1\nconst months = { 1: \"A\", 2: \"B\", 3: \"C\", 4: \"D\", 5: \"E\", 6: \"H\",",
			"2\n7: \"L\", 8: \"M\", 9: \"P\", 10: \"R\", 11: \"S\", 12: \"T\" }",
			"3\n​",
			"4\nfunction fiscalCode(person) {",
			"5\n  ",
			"6\n}"
		],
		"url": "https://edabit.com/challenge/Pa2rHJ6KeRBTF28Pg"
	},
	{
		"title": "Distance to Nearest Vowel",
		"description": "<p><span>Write a function that takes in a string and for each character, returns the distance to the nearest vowel. If the character is a vowel itself, return </span><strong><span>0</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>distanceToNearestVowel(\"aaaaa\") ➞ [0, 0, 0, 0, 0]\n\ndistanceToNearestVowel(\"babbb\") ➞ [1, 0, 1, 2, 3]\n\ndistanceToNearestVowel(\"abcdabcd\") ➞ [0, 1, 2, 1, 0, 1, 2, 3]\n\ndistanceToNearestVowel(\"shopper\") ➞ [2, 1, 0, 1, 1, 0, 1]</code></pre><h3><span>Notes</span></h3><ul><li><span>All input strings will contain </span><strong><span>at least one vowel</span></strong><span>.</span></li><li><span>Strings will be lowercased.</span></li><li><span>Vowels are: </span><code>a, e, i, o, u</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(distanceToNearestVowel(\"aaaaa\"), [0, 0, 0, 0, 0])",
			"Test.assertSimilar(distanceToNearestVowel(\"bba\"), [2, 1, 0])",
			"Test.assertSimilar(distanceToNearestVowel(\"abbb\"), [0, 1, 2, 3])",
			"Test.assertSimilar(distanceToNearestVowel(\"abab\"), [0, 1, 0, 1])",
			"Test.assertSimilar(distanceToNearestVowel(\"babbb\"), [1, 0, 1, 2, 3])",
			"Test.assertSimilar(distanceToNearestVowel(\"baaab\"), [1, 0, 0, 0, 1])",
			"Test.assertSimilar(distanceToNearestVowel(\"abcdabcd\"), [0, 1, 2, 1, 0, 1, 2, 3])",
			"Test.assertSimilar(distanceToNearestVowel(\"abbaaaaba\"), [0, 1, 1, 0, 0, 0, 0, 1, 0])",
			"Test.assertSimilar(distanceToNearestVowel(\"treesandflowers\"), [2, 1, 0, 0, 1, 0, 1, 2, 2, 1, 0, 1, 0, 1, 2])",
			"Test.assertSimilar(distanceToNearestVowel(\"pokerface\"), [1, 0, 1, 0, 1, 1, 0, 1, 0])",
			"Test.assertSimilar(distanceToNearestVowel(\"beautiful\"), [1, 0, 0, 0, 1, 0, 1, 0, 1])",
			"Test.assertSimilar(distanceToNearestVowel(\"rythmandblues\"), [5, 4, 3, 2, 1, 0, 1, 2, 2, 1, 0, 0, 1])",
			"Test.assertSimilar(distanceToNearestVowel(\"shopper\"), [2, 1, 0, 1, 1, 0, 1])",
			"Test.assertSimilar(distanceToNearestVowel(\"singingintherain\"), [1, 0, 1, 1, 0, 1, 1, 0, 1, 2, 1, 0, 1, 0, 0, 1])",
			"Test.assertSimilar(distanceToNearestVowel(\"sugarandspice\"), [1, 0, 1, 0, 1, 0, 1, 2, 2, 1, 0, 1, 0])",
			"Test.assertSimilar(distanceToNearestVowel(\"totally\"), [1, 0, 1, 0, 1, 2, 3])"
		],
		"starterFn": [
			"1\nfunction distanceToNearestVowel(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/b9FBAhxaijR9fzxgo"
	},
	{
		"title": "Numbers First, Letters Second",
		"description": "<p><span>Write a function that sorts array while keeping the array structure.\nNumbers should be first then letters both in ascending order.</span></p><h3><span>Examples</span></h3><pre><code>numThenChar([\n  [1, 2, 4, 3, \"a\", \"b\"],\n  [6, \"c\", 5], [7, \"d\"],\n  [\"f\", \"e\", 8]\n]) ➞ [\n  [1, 2, 3, 4, 5, 6],\n  [7, 8, \"a\"],\n  [\"b\", \"c\"], [\"d\", \"e\", \"f\"]\n]\n\nnumThenChar([\n  [1, 2, 4.4, \"f\", \"a\", \"b\"],\n  [0], [0.5, \"d\",\"X\",3,\"s\"],\n  [\"f\", \"e\", 8],\n  [\"p\",\"Y\",\"Z\"],\n  [12,18]\n]) ➞ [\n  [0, 0.5, 1, 2, 3, 4.4],\n  [8],\n  [12, 18, \"X\", \"Y\", \"Z\"],\n  [\"a\", \"b\", \"d\"],\n  [\"e\", \"f\", \"f\"],\n  [\"p\", \"s\"]\n]</code></pre><h3><span>Notes</span></h3><p><span>Test cases will containg integer and float numbers and single letters.</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(numThenChar([",
			"    [1, 2, 4, 3, \"a\", \"b\"],",
			"    [6, \"c\", 5],",
			"    [7, \"d\"],",
			"    [\"f\", \"e\", 8]",
			"]), [[1, 2, 3, 4, 5, 6], [7, 8, 'a'], ['b', 'c'], ['d', 'e', 'f']])",
			"​",
			"Test.assertSimilar(numThenChar([",
			"    [1, 2, 4.4, \"f\", \"a\", \"b\"],",
			"    [0],",
			"    [0.5, \"d\",\"X\",3,\"s\"],",
			"    [\"f\", \"e\", 8],",
			"    [\"p\",\"Y\",\"Z\"],",
			"    [12,18]",
			"]), [[0, 0.5, 1, 2, 3, 4.4], [8], [12, 18, 'X', 'Y', 'Z'], ['a', 'b', 'd'], ['e', 'f', 'f'], ['p', 's']])",
			"​",
			"Test.assertSimilar(numThenChar([",
			"    [10, 2],",
			"    [\"a\",3],",
			"    [2.2, \"d\",\"h\",6,\"s\",14,1],",
			"    [\"f\", \"e\"],",
			"    [\"p\",\"y\",\"z\",\"V\"],",
			"    [5]",
			"]), [[1, 2], [2.2, 3], [5, 6, 10, 14, 'V', 'a', 'd'], ['e', 'f'], ['h', 'p', 's', 'y'], ['z']])",
			"​",
			"Test.assertSimilar(numThenChar(["
		],
		"starterFn": [
			"1\nfunction numThenChar(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wkD5ChYH9ukyNSmZm"
	},
	{
		"title": "Valid Name",
		"description": "<p><span>For this exercise, keep in mind the following definitions: </span></p><ol><li><span>A </span><strong><span>term</span></strong><span> is either an </span><strong><span>initials</span></strong><span> or </span><strong><span>word</span></strong><span>.</span></li><li><strong><span>initials</span></strong><span> = 1 character</span></li><li><strong><span>words</span></strong><span> = 2+ characters (no dots allowed)</span></li></ol><p><span>A </span><strong><span>valid name</span></strong><span> is a name written in one of the following ways:</span></p><ul><li><span>H. Wells</span></li><li><span>H. G. Wells</span></li><li><span>Herbert G. Wells</span></li><li><span>Herbert George Wells</span></li></ul><p><span>The following names are </span><strong><span>invalid</span></strong><span>: </span></p><ul><li><span>Herbert  or Wells (single names not allowed)</span></li><li><span>H Wells or H. G Wells (initials must end with dot)</span></li><li><span>h. Wells or H. wells or h. g. Wells (incorrect capitalization)</span></li><li><span>H. George Wells (middle name expanded, while first still left as initial)</span></li><li><span>H. G. W. (last name is not a word)</span></li><li><span>Herb. G. Wells (dot only allowed after initial, not word)</span></li></ul><h3><span>Rules</span></h3><ol><li><span>Both initials and words must be capitalized.</span></li><li><span>Initials must end with a dot.</span></li><li><span>A name must be either 2 or 3 terms long. </span></li><li><span>If the name is 3 words long, you can expand the first and middle name or expand the first name only. You </span><strong><span>cannot</span></strong><span> keep the first name as an initial and expand the middle name only.</span></li><li><span>The last name must be a word (not an initial).</span></li></ol><p><span>Your task is to write a function that determines whether a name is valid or not. Return </span><code>true</code><span> if the name is valid, </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>validName(\"H. Wells\") ➞ true\n\nvalidName(\"H. G. Wells\") ➞ true\n\nvalidName(\"Herbert G. Wells\") ➞ true\n\nvalidName(\"Herbert\") ➞ false\n// Must be 2 or 3 words\n\nvalidName(\"h. Wells\") ➞ false\n// Incorrect capitalization\n\nvalidName(\"H Wells\") ➞ false\n// Missing dot after initial\n\nvalidName(\"H. George Wells\") ➞ false\n// Cannot have: initial first name + word middle name\n\nvalidName(\"H. George W.\") ➞ false\n// Last name cannot be initial\n\nvalidName(\"Herb. George Wells\") ➞ false\n// Words cannot end with a dot (only initials can)</code></pre><h3><span>Notes</span></h3><ul><li><span>A </span><strong><span>term</span></strong><span> is either an </span><strong><span>initial</span></strong><span> or </span><strong><span>word</span></strong><span>. </span></li><li><strong><span>Initials</span></strong><span> and </span><strong><span>words</span></strong><span> are disjoint sets.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"functional_programming",
			"regex"
		],
		"tests": [
			"Test.assertEquals(validName(\"H. Wells\"), true)",
			"Test.assertEquals(validName(\"H. G. Wells\"), true)",
			"Test.assertEquals(validName(\"Herbert G. Wells\"), true)",
			"Test.assertEquals(validName(\"Herbert George Wells\"), true)",
			"Test.assertEquals(validName(\"Herbert\"), false, \"Name must be 2 or 3 words.\")",
			"Test.assertEquals(validName(\"Herbert W. G. Wells\"), false, \"Name must be 2 or 3 words.\")",
			"Test.assertEquals(validName(\"h. Wells\"), false, \"Incorrect capitalization.\")",
			"Test.assertEquals(validName(\"herbert G. Wells\"), false, \"Incorrect capitalization.\")",
			"Test.assertEquals(validName(\"H Wells\"), false, \"Initials must end with a dot.\")",
			"Test.assertEquals(validName(\"Herb. Wells\"), false, \"Words cannot end with a dot.\")",
			"Test.assertEquals(validName(\"H. George Wells\"), false, \"First name is initial but middle name is word.\")",
			"Test.assertEquals(validName(\"Herbert George W.\"), false, \"Last name cannot be an initial.\")"
		],
		"starterFn": [
			"1\nfunction validName(name) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/xPBFGvKQfRFEyy4vx"
	},
	{
		"title": "Caesar's Cipher",
		"description": "<p><span>Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher (check </span><strong><span>Resources</span></strong><span> tab for more info) shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by </span><code>3</code><span>, </span><em><span>w, x, y</span></em><span> and </span><em><span>z</span></em><span> would map to </span><em><span>z, a, b</span></em><span> and </span><em><span>c</span></em><span>.</span></p><p><span>Create a function that takes a string </span><code>s</code><span> (text to be encrypted) and an integer </span><code>k</code><span> (the rotation factor). It should return an encrypted string.</span></p><h3><span>Examples</span></h3><pre><code>caesarCipher(\"middle-Outz\", 2) ➞ \"okffng-Qwvb\"\n\n// m -&gt; o\n// i -&gt; k\n// d -&gt; f\n// d -&gt; f\n// l -&gt; n\n// e -&gt; g\n// -    -\n// O -&gt; Q\n// u -&gt; w\n// t -&gt; v\n// z -&gt; b\n\ncaesarCipher(\"Always-Look-on-the-Bright-Side-of-Life\", 5)\n➞ \"Fqbfdx-Qttp-ts-ymj-Gwnlmy-Xnij-tk-Qnkj\"\n\ncaesarCipher(\"A friend in need is a friend indeed\", 20)\n➞ \"U zlcyhx ch hyyx cm u zlcyhx chxyyx\"</code></pre><h3><span>Notes</span></h3><p><span>All test input will be a valid ASCII string.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"cryptography",
			"strings"
		],
		"tests": [
			"Test.assertEquals(caesarCipher(\"middle-Outz\", 2), \"okffng-Qwvb\")",
			"Test.assertEquals(caesarCipher(\"Always-Look-on-the-Bright-Side-of-Life\", 5), \"Fqbfdx-Qttp-ts-ymj-Gwnlmy-Xnij-tk-Qnkj\")",
			"Test.assertEquals(caesarCipher(\"A friend in need is a friend indeed\", 20), \"U zlcyhx ch hyyx cm u zlcyhx chxyyx\")",
			"Test.assertEquals(caesarCipher(\"A Fool and His Money Are Soon Parted.\", 27), \"B Gppm boe Ijt Npofz Bsf Tppo Qbsufe.\")",
			"Test.assertEquals(caesarCipher(\"One should not worry over things that have already happened and that cannot be changed.\", 49), \"Lkb pelria klq tloov lsbo qefkdp qexq exsb xiobxav exmmbkba xka qexq zxkklq yb zexkdba.\")",
			"Test.assertEquals(caesarCipher(\"Back to Square One is a popular saying that means a person has to start over, similar to: back to the drawing board.\", 126), \"Xwyg pk Omqwna Kja eo w lklqhwn owuejc pdwp iawjo w lanokj dwo pk opwnp kran, oeiehwn pk: xwyg pk pda znwsejc xkwnz.\")"
		],
		"starterFn": [
			"1\nfunction caesarCipher(s, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/a33jdGXkaQRtK9ZTs"
	},
	{
		"title": "Eight Sums Up",
		"description": "<p><span>Create a function that gets every pair of numbers from an array that sums up to eight and returns it as an array of pairs (pair sorted ascendingly) collated into an object. See the following examples for more details.</span></p><h3><span>Examples</span></h3><pre><code>sumsUp([1, 2, 3, 4, 5]) ➞ {\"pairs\": [[3, 5]]}\n\nsumsUp([10, 9, 7, 2, 8]) ➞ {\"pairs\": []}\n\nsumsUp([1, 6, 5, 4, 8, 2, 3, 7]) ➞ {\"pairs\": [[2, 6], [3, 5], [1, 7]]}\n// [6, 2] first to complete the cycle (to sum up to 8)\n// [5, 3] follows\n// [1, 7] lastly\n// [2, 6], [3, 5], [1, 7] sorted according to cycle completeness, then pair-wise</code></pre><h3><span>Notes</span></h3><ul><li><span>Remember the idea of </span><em><span>\"completes the cycle first\"</span></em><span> when getting the sort order of pairs.</span></li><li><span>Only unique numbers are present in the array.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"numbers",
			"objects"
		],
		"tests": [
			"let [numVectors, resVectors] = [[",
			"  [1, 2, 3, 4, 5], [10, 9, 7, 2, 8], [1, 6, 5, 4, 8, 2, 3, 7],",
			"  [5, 7, 2, 3, 0, 1, 6, 4, 8], [10, 9, 7, 1, 8, -2, -1, 2, 6], [0, 1, -2, 7, 9, 5, 4, 10, 8, -1, 6]], [",
			"  {\"pairs\": [[3, 5]]}, {\"pairs\": []}, {\"pairs\": [[2, 6], [3, 5], [1, 7]]},",
			"  {\"pairs\": [[3, 5], [1, 7], [2, 6], [0, 8]]}, {\"pairs\": [[1, 7], [-2, 10], [-1, 9], [2, 6]]}, {\"pairs\": [[1, 7], [-2, 10], [0, 8], [-1, 9]]}",
			"]]",
			"​",
			"for (let i in numVectors) {",
			"  Test.assertSimilar(sumsUp(numVectors[i]), resVectors[i])",
			"}"
		],
		"starterFn": [
			"1\nfunction sumsUp(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZkWSacTDQ65A3gh6j"
	},
	{
		"title": "Bitwise Logical Negation",
		"description": "<p><span>Given a number (positive, negative, or 0), return the logical negation (as a 1 or 0) of that number.  Do so using only bitwise operators: </span></p><pre><code>~, &amp;, |, ^, &gt;&gt;, &lt;&lt;, +</code></pre><p><span>Any of these characters / constructs are not allowed:</span></p><pre><code>if, do, while, for, switch, -, ?, :, !, ||, &amp;&amp;, &lt;, &gt;, == , [,], functions</code></pre><h3><span>Examples</span></h3><pre><code>bitwiseLogicalNegation(1) ➞ 0\n\nbitwiseLogicalNegation(5) ➞ 0\n\nbitwiseLogicalNegation(0) ➞ 1\n\nbitwiseLogicalNegation(3) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>Use as few operators as possible for more of a challenge.</span></p>",
		"publishedBy": "Theodore",
		"publishedByUrl": "https://edabit.com/user/hi7Hvtq2mJfkXEGF2",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"logic"
		],
		"tests": [
			"const disallowed = ['if','do','while','for','switch','-','?',':','!','||','&&','==','[',']','{','}','contains','indexOf','toString'];",
			"var fn = bitwiseLogicalNegation.toString();",
			"var content = (fn.includes('=>') ? fn : fn.slice(fn.indexOf(\"{\") + 1, fn.lastIndexOf(\"}\")));",
			"console.log(\"Given: \" + content +\"\");",
			"for (var i = 0; i < disallowed.length; i++) {",
			"  console.log(\"Checking for illegal character '\" + disallowed[i] + \"'\");",
			"  Test.assertEquals(content.includes(disallowed[i]), false);",
			"}",
			"console.log(\"Checking for external function calls\");",
			"Test.assertEquals(/(\\w+\\(.*?\\))/ig.test(content), false);",
			"console.log(\"Testing 0\");",
			"Test.assertEquals(bitwiseLogicalNegation(0), 1);",
			"for (var i = 0; i < 512; i+=3) {",
			"  var a =  i + 1;",
			"  if (Math.random() < 0.1) a = 0;",
			"  console.log(\"Testing \" + a + \" and -\" + a);",
			"  Test.assertEquals(bitwiseLogicalNegation(a), (!a ? 1 : 0));",
			"  a = -a;",
			"  Test.assertEquals(bitwiseLogicalNegation(a), (!a ? 1 : 0)); ",
			"}"
		],
		"starterFn": [
			"1\nfunction bitwiseLogicalNegation(x) {",
			"2\n  return (!x ? 1 : 0);",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/e639gt6uquCbgKxA2"
	},
	{
		"title": "Find All Prime Numbers in Decimal Integer",
		"description": "<p><span>Create a function that takes an integer argument and returns an array of prime numbers found in the decimal representation of that number.</span></p><p><span>For example, </span><code>extractPrimes(1717)</code><span> returns </span><code>[7, 7, 17, 17, 71]</code><span>.</span></p><p><span>The array should be in acending order. If a prime number appears more than once, every occurance should be listed. If no prime numbers are found, return an empty array.</span></p><h3><span>Examples</span></h3><pre><code>extractPrimes(1) ➞ []\n\nextractPrimes(7) ➞ [7]\n\nextractPrimes(73) ➞ [3, 7, 73]\n\nextractPrimes(1313) ➞ [3, 3, 13, 13, 31, 131, 313]</code></pre><h3><span>Notes</span></h3><ul><li><span>All test cases are positive real integers.</span></li><li><span>Some numbers will have leading zeros. For example, the number </span><code>103</code><span> contains the prime number </span><code>3</code><span>, but also contains </span><code>03</code><span>. These should be treated as the same number, so the result would simply be </span><code>[3]</code><span>.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"cryptography",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(extractPrimes(1), [])",
			"Test.assertSimilar(extractPrimes(2), [2])",
			"Test.assertSimilar(extractPrimes(3), [3])",
			"Test.assertSimilar(extractPrimes(13), [3, 13])",
			"Test.assertSimilar(extractPrimes(101), [101])",
			"Test.assertSimilar(extractPrimes(313), [3, 3, 13, 31, 313])",
			"Test.assertSimilar(extractPrimes(10234), [2, 3, 23])"
		],
		"starterFn": [
			"1\nfunction extractPrimes(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JpfNfZCEesy7Nz67i"
	},
	{
		"title": "Patterned Wristband",
		"description": "<p><span>A wristband can have 4 patterns: </span></p><ol><li><strong><span>horizontal</span></strong><span>: each item in a row is identical.</span></li><li><strong><span>vertical</span></strong><span>: each item in a column is identical.</span></li><li><strong><span>diagonal left</span></strong><span>: each item is identical to the one on it's upper left or bottom right.</span></li><li><strong><span>diagonal right</span></strong><span>: each item is identical to the one on it's upper right or bottom left.</span></li></ol><p><span>You are shown an </span><strong><span>incomplete section</span></strong><span> of a wristband.</span></p><p><span>Write a function that returns </span><code>true</code><span> if the section can be correctly classified into one of the 4 types, and </span><code>false</code><span> otherwise.</span></p><h3><span>Examples</span></h3><pre><code>isWristband([\n  [\"A\", \"A\"],\n  [\"B\", \"B\"],\n  [\"C\", \"C\"]\n]) ➞ true \n// Part of horizontal wristband.\n\nisWristband([\n  [\"A\", \"B\"],\n  [\"A\", \"B\"],\n  [\"A\", \"B\"]\n]) ➞ true \n// Part of vertical wristband.\n\nisWristband([\n  [\"A\", \"B\", \"C\"],\n  [\"C\", \"A\", \"B\"],\n  [\"B\", \"C\", \"A\"],\n  [\"A\", \"B\", \"C\"]\n]) ➞ true\n// Part of diagonal left wristband.\n\nisWristband([\n  [\"A\", \"B\", \"C\"],\n  [\"B\", \"C\", \"A\"],\n  [\"C\", \"A\", \"B\"],\n  [\"A\", \"B\", \"A\"]\n]) ➞ true\n// Part of diagonal right wristband.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isWristband( ",
			"[['A', 'A'], ",
			"['B', 'B'], ",
			"['C', 'C']]), true)",
			"​",
			"Test.assertEquals(isWristband(",
			"[['A', 'B'], ",
			"['A', 'B'], ",
			"['A', 'B']]), true)",
			"​",
			"Test.assertEquals(isWristband(",
			"[['A', 'B', 'C'], ",
			"['C', 'A', 'B'], ",
			"['B', 'C', 'A'], ",
			"['A', 'B', 'C']]), true)",
			"​",
			"Test.assertEquals(isWristband(",
			"[['A', 'B', 'C'], ",
			"['C', 'A', 'B'], ",
			"['D', 'C', 'A'], ",
			"['E', 'D', 'C']]), true)",
			"​",
			"Test.assertEquals(isWristband(",
			"[['A', 'B', 'C'], ",
			"['B', 'A', 'B'], ",
			"['D', 'C', 'A'], "
		],
		"starterFn": [
			"1\nfunction isWristband(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HX5eEuKb7epMgsKsj"
	},
	{
		"title": "Ascending Consecutive Numbers",
		"description": "<p><span>Write a function that returns </span><code>true</code><span> if a string consists of </span><strong><span>ascending or ascending AND consecutive</span></strong><span> numbers.</span></p><h3><span>Examples</span></h3><pre><code>ascending(\"232425\") ➞ true\n// Consecutive numbers 23, 24, 25\n\nascending(\"2324256\") ➞ false\n// No matter how this string is divided, the numbers are not consecutive.\n\nascending(\"444445\") ➞ true\n// Consecutive numbers 444 and 445.</code></pre><h3><span>Notes</span></h3><p><span>A </span><strong><span>number</span></strong><span> can consist of any number of digits, so long as the numbers are adjacent to each other, and the string has at least two of them.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(ascending(\"232425\"), true)",
			"Test.assertEquals(ascending(\"444445\"), true)",
			"Test.assertEquals(ascending(\"1234567\"), true)",
			"Test.assertEquals(ascending(\"123412351236\"), true)",
			"Test.assertEquals(ascending(\"57585960616263\"), true)",
			"Test.assertEquals(ascending(\"500001500002500003\"), true)",
			"Test.assertEquals(ascending(\"919920921\"), true)",
			"​",
			"Test.assertEquals(ascending(\"2324256\"), false)",
			"Test.assertEquals(ascending(\"1235\"), false)",
			"Test.assertEquals(ascending(\"121316\"), false)",
			"Test.assertEquals(ascending(\"12131213\"), false)",
			"Test.assertEquals(ascending(\"54321\"), false)",
			"Test.assertEquals(ascending(\"56555453\"), false)",
			"Test.assertEquals(ascending(\"90090190290\"), false)",
			"Test.assertEquals(ascending(\"35236237238\"), false)"
		],
		"starterFn": [
			"1\nfunction ascending(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/jN89tuARCFbtQm6vE"
	},
	{
		"title": "Sudoku Validation",
		"description": "<p><span>Write a </span><strong><span>sudoku validator</span></strong><span>. This function should return </span><code>true</code><span> if the 2-D array represents a valid sudoku and </span><code>false</code><span> otherwise. To be a valid sudoku:</span></p><ol><li><span>Each row must have the digits from 1 to 9 exactly once.</span></li><li><span>Each column must have the digits from 1 to 9 exactly once.</span></li><li><span>Each 3x3 box must have the digits from 1 to 9 exactly once.</span></li></ol><h3><span>Examples</span></h3><pre><code>sudokuValidator([\n  [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\n]) ➞ true\n\nsudokuValidator([\n  [ 1, 1, 2, 4, 8, 9, 3, 7, 6 ],\n  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],\n  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],\n  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],\n  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],\n  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],\n  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],\n  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],\n  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ]\n]) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"higher_order_functions",
			"validation"
		],
		"tests": [
			"// Validate 3 x 3 Boxes",
			"Test.assertEquals(sudokuValidator(",
			"[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],",
			"  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],",
			"  [ 4, 6, 5, 3, 7, 1, 2, 9, 8 ],",
			"  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],",
			"  [ 8, 9, 1, 7, 6, 3, 4, 2, 5 ],",
			"  [ 2, 4, 6, 5, 9, 8, 7, 1, 3 ],",
			"  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],",
			"  [ 6, 2, 8, 9, 4, 5, 1, 3, 7 ],",
			"  [ 5, 7, 3, 8, 1, 2, 9, 6, 4 ] ]), ",
			"false)",
			"​",
			"//",
			"Test.assertEquals(sudokuValidator(",
			"[ [ 1, 5, 2, 4, 8, 9, 3, 7, 6 ],",
			"  [ 7, 3, 9, 2, 5, 6, 8, 4, 1 ],",
			"  [ 4, 6, 8, 3, 7, 1, 2, 9, 5 ],",
			"  [ 3, 8, 7, 1, 2, 4, 6, 5, 9 ],",
			"  [ 5, 9, 1, 7, 6, 3, 4, 2, 8 ],",
			"  [ 2, 4, 6, 8, 9, 5, 7, 1, 3 ],",
			"  [ 9, 1, 4, 6, 3, 7, 5, 8, 2 ],",
			"  [ 6, 2, 5, 9, 4, 8, 1, 3, 7 ],",
			"  [ 8, 7, 3, 5, 1, 2, 9, 6, 4 ] ]), ",
			"true)",
			"​"
		],
		"starterFn": [
			"1\nfunction sudokuValidator(x) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/rGTJckjQsBDq2M8WL"
	},
	{
		"title": "Phone Letter Combinations",
		"description": "<p><span>Given a string containing digits from </span><code>2-9</code><span> inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</span></p><p><img alt=\"Alternative Text\" src=\"https://edabit-challenges.s3.amazonaws.com/200px-Telephone-keypad2.svg.png\"></p><h3><span>Examples</span></h3><pre><code>letter_combinations(\"23\") ➞ [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\n\nletter_combinations(\"532\") ➞ [\"jda\", \"jdb\", \"jdc\", \"jea\", \"jeb\", \"jec\", \"jfa\", \"jfb\", \"jfc\", \"kda\", \"kdb\", \"kdc\", \"kea\", \"keb\", \"kec\", \"kfa\", \"kfb\", \"kfc\", \"lda\", \"ldb\", \"ldc\", \"lea\", \"leb\", \"lec\", \"lfa\", \"lfb\", \"lfc\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"logic",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(letterCombinations(\"23\"), [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"], \"\")",
			"Test.assertSimilar(letterCombinations(\"532\"), [\"jda\", \"jdb\", \"jdc\", \"jea\", \"jeb\", \"jec\", \"jfa\", \"jfb\", \"jfc\", \"kda\", \"kdb\", \"kdc\", \"kea\", \"keb\", \"kec\", \"kfa\", \"kfb\", \"kfc\", \"lda\", \"ldb\", \"ldc\", \"lea\", \"leb\", \"lec\", \"lfa\", \"lfb\", \"lfc\"], \"\")",
			"Test.assertSimilar(letterCombinations(\"943\"), [\"wgd\", \"wge\", \"wgf\", \"whd\", \"whe\", \"whf\", \"wid\", \"wie\", \"wif\", \"xgd\", \"xge\", \"xgf\", \"xhd\", \"xhe\", \"xhf\", \"xid\", \"xie\", \"xif\", \"ygd\", \"yge\", \"ygf\", \"yhd\", \"yhe\", \"yhf\", \"yid\", \"yie\", \"yif\", \"zgd\", \"zge\", \"zgf\", \"zhd\", \"zhe\", \"zhf\", \"zid\", \"zie\", \"zif\"], \"\")",
			"Test.assertSimilar(letterCombinations(\"372\"), [\"dpa\", \"dpb\", \"dpc\", \"dqa\", \"dqb\", \"dqc\", \"dra\", \"drb\", \"drc\", \"dsa\", \"dsb\", \"dsc\", \"epa\", \"epb\", \"epc\", \"eqa\", \"eqb\", \"eqc\", \"era\", \"erb\", \"erc\", \"esa\", \"esb\", \"esc\", \"fpa\", \"fpb\", \"fpc\", \"fqa\", \"fqb\", \"fqc\", \"fra\", \"frb\", \"frc\", \"fsa\", \"fsb\", \"fsc\"], \"\")"
		],
		"starterFn": [
			"1\nfunction letterCombinations(digits) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/npLurjMJofmFRCJwx"
	},
	{
		"title": "Connecting Words",
		"description": "<p><span>Write a function that connects each previous word to the next word by the shared letters. Return the resulting string (removing </span><strong><span>duplicate characters</span></strong><span> in the overlap) and the </span><strong><span>minimum</span></strong><span> number of shared letters across all pairs of strings.</span></p><h3><span>Examples</span></h3><pre><code>join([\"oven\", \"envier\", \"erase\", \"serious\"]) ➞ [\"ovenvieraserious\", 2]\n\njoin([\"move\", \"over\", \"very\"]) ➞ [\"movery\", 3]\n\njoin([\"to\", \"ops\", \"psy\", \"syllable\"]) ➞ [\"topsyllable\", 1]\n\n// \"to\" and \"ops\" share \"o\" (1)\n// \"ops\" and \"psy\" share \"ps\" (2)\n// \"psy\" and \"syllable\" share \"sy\" (2)\n// the minimum overlap is 1\n\njoin([\"aaa\", \"bbb\", \"ccc\", \"ddd\"]) ➞ [\"aaabbbcccddd\", 0]</code></pre><h3><span>Notes</span></h3><p><span>More specifically, look at the overlap between the previous words </span><strong><span>ending letters</span></strong><span> and the next word's </span><strong><span>beginning letters</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(join([\"happy\", \"python\", \"honey\", \"yelp\", \"plank\", \"lanky\"]), [\"happythoneyelplanky\", 1])",
			"Test.assertSimilar(join([\"move\", \"over\", \"very\"]), [\"movery\", 3])",
			"Test.assertSimilar(join([\"oven\", \"envier\", \"erase\", \"serious\"]), [\"ovenvieraserious\", 2])",
			"Test.assertSimilar(join([\"to\", \"ops\", \"psy\", \"syllable\"]), [\"topsyllable\", 1])",
			"Test.assertSimilar(join([\"aaa\", \"bbb\", \"ccc\", \"ddd\"]), [\"aaabbbcccddd\", 0])",
			"Test.assertSimilar(join([\"abcde\", \"bcdefghi\", \"efghi\", \"fghij\", \"ghijklmnop\"]), [\"abcdefghijklmnop\", 4])",
			"Test.assertSimilar(join([\"aab\", \"abcccd\", \"cdeeef\", \"effff\"]), [\"aabcccdeeeffff\", 2])"
		],
		"starterFn": [
			"1\nfunction join(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/J6ZGG6AvXQzqRpRsy"
	},
	{
		"title": "Polybius Square (Basic)",
		"description": "<p><span>The </span><strong><span>Polybius Square</span></strong><span> cipher is a simple substitution cipher that makes use of a 5x5 square grid. The letters A-Z are written into the grid, with \"I\" and \"J\" typically sharing a slot (as there are 26 letters and only 25 slots).</span></p><table><thead><tr><th></th><th><span>1</span></th><th><span>2</span></th><th><span>3</span></th><th><span>4</span></th><th><span>5</span></th></tr></thead><tbody><tr><td><strong><span>1</span></strong></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td></tr><tr><td><strong><span>2</span></strong></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I/J</span></td><td><span>K</span></td></tr><tr><td><strong><span>3</span></strong></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td></tr><tr><td><strong><span>4</span></strong></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td></tr><tr><td><strong><span>5</span></strong></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td></tr></tbody></table><p><span>To encipher a message, each letter is merely replaced by its row and column numbers in the grid.</span></p><p><span>Create a function that takes a plaintext or ciphertext message, and returns the corresponding ciphertext or plaintext.</span></p><h3><span>Examples</span></h3><pre><code>polybius(\"Hi\") ➞ \"2324\"\n\npolybius(\"2324  4423154215\") ➞ \"hi there\"\n\npolybius(\"543445 14343344 522433 21422415331443 52244423 4311311114\") ➞ \"you dont win friends with salad\"</code></pre><h3><span>Notes</span></h3><p><span>As \"I\" and \"J\" share a slot, both are enciphered into 24, but deciphered only into \"I\" (see third and fourth test).</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography",
			"strings"
		],
		"tests": [
			"Test.assertEquals(polybius('4323343531242144243322 2443 11 51241344243231154343 1342243215 31242515 3545331323243322 43343215343315 2433 442315 14114225'), \"shoplifting is a victimless crime like punching someone in the dark\")",
			"Test.assertEquals(polybius('Hi'), '2324')",
			"Test.assertEquals(polybius(\"Just because I don't care doesn't mean that I don't understand\"), '24454344 12151311454315 24 14343344 13114215 143415433344 32151133 44231144 24 14343344 45331415424344113314', \"Disregard punctuation, but keep spaces\")",
			"Test.assertEquals(polybius('24454344 12151311454315 24 14343344 13114215 143415433344 32151133 44231144 24 14343344 45331415424344113314'), 'iust because i dont care doesnt mean that i dont understand')",
			"Test.assertEquals(polybius('543445 14343344 522433 21422415331443 52244423 4311311114'), 'you dont win friends with salad')",
			"Test.assertEquals(polybius('The lesson is: never try'), '442315 311543433433 2443 3315511542 444254')",
			"​",
			"// Credit: Simpsons"
		],
		"starterFn": [
			"1\nfunction polybius(text) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sGYuA9fEJLHqEBSjA"
	},
	{
		"title": "Count the Countdown Sequences",
		"description": "<p><span>5, 4, 3, 2, 1 is an example of a countdown sequence. Write a function that returns an array of the form</span><code>[x, y]</code><span> where </span><strong><span>x</span></strong><span> is the number of countdown sequences in the given array and </span><strong><span>y</span></strong><span> is the array of those sequences in the order in which they appear in the array.</span></p><h3><span>Examples</span></h3><pre><code>finalCountdown([4, 8, 3, 2, 1, 2]) ➞ [1, [[3, 2, 1]]]\n// 1 countdown sequence: 3, 2, 1\n\nfinalCountdown([4, 4, 5, 4, 3, 2, 1, 8, 3, 2, 1]) ➞ [2, [[5, 4, 3, 2, 1], [3, 2, 1]]]\n// 2 countdown sequences:\n// 5, 4, 3, 2, 1 and 3, 2, 1\n\nfinalCountdown([4, 3, 2, 1, 3, 2, 1, 1]) ➞ [3, [[4, 3, 2, 1], [3, 2, 1], [1]]]\n// 3 countdown sequences:\n// 4, 3, 2, 1 ; 3, 2, 1 and 1\n\nfinalCountdown([1, 1, 2, 1]) ➞ [3, [[1], [1], [2, 1]]]\n\nfinalCountdown([]) ➞  [0, []]</code></pre><h3><span>Notes</span></h3><ul><li><span>A disjoint </span><code>1</code><span> is a valid countdown sequence. See examples #3 &amp; #4. </span></li><li><span>All numbers in the array will be greater than 0.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(finalCountdown([5,4,3,2,1]), [1, [[5, 4, 3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([2,5,4,3,2,1,2]), [1, [[5, 4, 3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([2,3,2,1,4,3,2,1]), [2, [[3, 2, 1], [4, 3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([4,3,2,5,4,3]), [0, []])",
			"Test.assertSimilar(finalCountdown([4,3,2,5,4,3,1]), [1, [[1]]])",
			"Test.assertSimilar(finalCountdown([3,2,1,5,5,3,2,1,5,5]), [2, [[3, 2, 1], [3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([4, 8, 3, 2, 1, 2]), [1, [[3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([4, 4, 5, 4, 3, 2, 1, 8, 3, 2, 1]), [2, [[5, 4, 3, 2, 1], [3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([4, 3, 2, 1, 3, 2, 1, 1]), [3, [[4, 3, 2, 1], [3, 2, 1], [1]]])",
			"Test.assertSimilar(finalCountdown([1,2,1,1]), [3, [[1], [2, 1], [1]]])",
			"Test.assertSimilar(finalCountdown([1,2,3,4,3,2,1]), [2, [[1], [4, 3, 2, 1]]])",
			"Test.assertSimilar(finalCountdown([]), [0, []])",
			"Test.assertSimilar(finalCountdown([2,1,2,1]), [2, [[2, 1], [2, 1]]])"
		],
		"starterFn": [
			"1\nfunction finalCountdown(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HW4ZzYmDaASKfwdq6"
	},
	{
		"title": "Indices of Zeroes for the Longest Run of Contiguous Ones",
		"description": "<p><span>You are given an </span><strong><span>array of binary integers</span></strong><span> and </span><code>k</code><span>, the </span><strong><span>number of flips</span></strong><span> allowed.</span></p><p><span>Write a function that returns the indices of zeroes of which, when flipped, return the </span><strong><span>longest contiguous sequence of ones</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>zeroIndices([1, 0, 1, 1, 0, 0, 0, 1], 1) ➞ [1]\n\nzeroIndices([1, 0, 0, 0, 0, 1], 1) ➞ [1]\n\nzeroIndices([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], 3) ➞ [6, 7, 9]\n\nzeroIndices([1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], 3) ➞ [7, 8, 9]</code></pre><h3><span>Notes</span></h3><p><span>If multiple combinations of indices tie for longest one sequence, return the indices which occur </span><strong><span>first</span></strong><span> (see examples #2, #3).</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertSimilar(zeroIndices([1, 0, 1, 1, 0, 0, 0, 1], 1), [1]); ",
			"Test.assertSimilar(zeroIndices([1, 0, 1, 1, 0, 0, 0, 1], 2), [1, 4]);",
			"Test.assertSimilar(zeroIndices([1, 0, 1, 1, 0, 0, 0, 1], 3), [1, 4, 5]);",
			"Test.assertSimilar(zeroIndices([1, 0, 1, 1, 0, 0, 0, 1], 4), [1, 4, 5, 6]);",
			"​",
			"Test.assertSimilar(zeroIndices([1, 1, 0, 1, 1, 0, 0, 1], 1), [2]);",
			"Test.assertSimilar(zeroIndices([0, 1, 1, 1, 1, 0, 0, 0], 1), [0]);",
			"Test.assertSimilar(zeroIndices([0, 1, 1, 0, 0, 0, 1, 1, 1], 1), [5]);",
			"Test.assertSimilar(zeroIndices([1, 0, 1, 0, 1, 0], 1), [1]);",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 1], 1), [1]);",
			"​",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1], 2), [1, 2]);",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1], 2), [7, 8]);",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], 2), [6, 7]); ",
			"​",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0], 3), [6, 7, 9]); ",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0], 3), [4, 5, 7]);",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], 3), [1, 2, 3]); ",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0], 3), [7, 8, 9]); ",
			"​",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0], 4), [7, 8, 9, 11]); ",
			"Test.assertSimilar(zeroIndices([1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0], 4), [8, 9, 10, 11]); ",
			"Test.assertSimilar(zeroIndices([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], 4), [2, 3, 4, 5]);"
		],
		"starterFn": [
			"1\nfunction zeroIndices(arr, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2gX93BLEfAQFSCoSy"
	},
	{
		"title": "Ruth and Aaron",
		"description": "<p><span>Two consecutive integers </span><code>a</code><span> and </span><code>b</code><span> are considered a </span><strong><span>Ruth-Aaron pair</span></strong><span> if the sum of the prime factors of </span><code>a</code><span> is equal to the sum of the prime factors of </span><code>b</code><span>.</span></p><p><span>Two definitions exist:</span></p><ol><li><span>Summing up </span><em><span>distinct</span></em><span> prime factors. For example, 24 and 25 constitute a Ruth-Aaron pair by this definition. 8 and 9 do not.</span></li></ol><pre><code>P24 = [2, 3]  // sum = 5\n\nP25 = [5]  // sum = 5, equal to 24\n\nP8 = [2]  // sum = 2\n\nP9 = [3]  // sum = 3</code></pre><ol start=\"2\"><li><span>Summing up </span><em><span>repeated</span></em><span> prime factors. By this definition, 24 and 25 do </span><em><span>not</span></em><span> constitute a Ruth-Aaron pair. But 8 and 9 do.</span></li></ol><pre><code>P24 = [2, 2, 2, 3]  // sum = 9\n\nP25 = [5, 5]  // sum = 10\n\nP8 = [2, 2, 2]  // sum = 6\n\nP9 = [3, 3]  // sum = 6, equal to 8</code></pre><p><span>If two consecutive numbers have only distinct prime factors and have equal sums of prime factors, they are considered Ruth-Aaron pairs by both definitions.</span></p><pre><code>P77 = [7, 11]  // sum = 18\n\nP78 = [2, 3, 13]  // sum = 18</code></pre><p><span>Create a function that takes a number </span><code>n</code><span> and returns:</span></p><ol><li><code>false</code><span> if it is not part of a Ruth-Aaron pair.</span></li><li><span>A 2-element array if it is part of a Ruth-Aaron pair.</span><ul><li><span>The first element should be \"Ruth\" if </span><code>n</code><span> is the smaller number in the pair, or \"Aaron\" if it is the larger.</span></li><li><span>The second element should be 1 if </span><code>n</code><span> is part of a Ruth-Aaron pair under the first definition (sum of </span><em><span>distinct</span></em><span> prime factors), 2 if it qualifies by the second definition, 3 if it qualifies under both.</span></li></ul></li></ol><h3><span>Examples</span></h3><pre><code>ruthAaron(5) ➞ [\"Ruth\", 3]\n\nruthAaron(25) ➞ [\"Aaron\", 1]\n\nruthAaron(9) ➞ [\"Aaron\", 2]\n\nruthAaron(11) ➞ false</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"validation"
		],
		"tests": [
			"Test.assertSimilar(ruthAaron(5), ['Ruth',3])",
			"Test.assertSimilar(ruthAaron(25), ['Aaron',1])",
			"Test.assertSimilar(ruthAaron(498), false)",
			"Test.assertSimilar(ruthAaron(125), ['Ruth',2])",
			"Test.assertSimilar(ruthAaron(715), ['Aaron',3])",
			"Test.assertSimilar(ruthAaron(1470), false)",
			"Test.assertSimilar(ruthAaron(21183), ['Ruth',1])",
			"Test.assertSimilar(ruthAaron(5561), ['Aaron',2])",
			"Test.assertSimilar(ruthAaron(6225), false)",
			"Test.assertSimilar(ruthAaron(26642), ['Ruth',3])",
			"Test.assertSimilar(ruthAaron(18656), ['Aaron',1])",
			"Test.assertSimilar(ruthAaron(8558), false)"
		],
		"starterFn": [
			"1\nfunction ruthAaron(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YKvQKCnCdxPbjbmfD"
	},
	{
		"title": "Recursion: Oddly or Evenly Positioned 2.0",
		"description": "<p><span>Create a function that </span><strong><span>recursively</span></strong><span> extracts the characters from an array (or a string) on odd or even positions, depending on the specifier. The string </span><strong><span>\"odd\"</span></strong><span> for items on </span><em><span>odd positions</span></em><span> (1, 2, 3, ...) and </span><strong><span>\"even\"</span></strong><span> for </span><em><span>even positions</span></em><span> (2, 4, 6, ...).</span></p><h3><span>Examples</span></h3><pre><code>charAtPos([2, 4, 6, 8, 10], \"even\") ➞ [4, 8]\n// 4 &amp; 8 occupy the 2nd &amp; 4th positions.\n\ncharAtPos(\"EDABIT\", \"odd\") ➞ \"EAI\"\n// \"E\", \"A\" and \"I\" occupy the 1st, 3rd and 5th positions.\n\ncharAtPos([\"A\", \"R\", \"B\", \"I\", \"T\", \"R\", \"A\", \"R\", \"I\", \"L\", \"Y\"], \"odd\") ➞ [\"A\", \"B\", \"T\", \"A\", \"I\", \"Y\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>It is expected from the challenge-takers to come up with a solution using the concept of </span><strong><span>recursion</span></strong><span> or the so-called </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read topics about recursion more (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or hasn't fully understood the concept behind it before taking up this challenge or unless otherwise.</span></li><li><span>Prior versions of this challenge (non-recursive) can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/fWkrdJb6EJrHsP7Sm\"><span>here</span></a><span> and </span><a target=\"_blank\" href=\"https://edabit.com/challenge/WZMZEQoaNuhXovauT\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"recursion"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(charAtPos), true)",
			"Test.assertNotEquals(recursive(charAtPos), false, \"Recursion is required.\")",
			"​",
			"let [objVectors, objRes] = [[[[2, 4, 6, 8, 10], 'even'], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'odd'],",
			"    ['EDABIT', 'even'], ['EDABIT', 'odd'], ['QWERTYUIOP', 'even'], ['POIUYTREWQ', 'odd'], ['ASDFGHJKLZ', 'odd'],",
			"    ['ASDFGHJKLZ', 'even'], [['!', '@', '#', '$', '%', '^', '&', '*', '(', ')'], 'odd'],",
			"    [[')', '(', '*', '&', '^', '%', '$', '#', '@', '!'], 'odd'],",
			"    [['A', 'R', 'B', 'I', 'T', 'R', 'A', 'R', 'I', 'L', 'Y'], 'odd']],",
			"    [[4, 8], [1, 3, 5, 7, 9], \"DBT\", \"EAI\", \"WRYIP\", \"PIYRW\", \"ADGJL\", \"SFHKZ\",",
			"    [\"!\", \"#\", \"%\", \"&\", \"(\"], [\")\", \"*\", \"^\", \"$\", \"@\"], [\"A\", \"B\", \"T\", \"A\", \"I\", \"Y\"]]]",
			"for (let i in objVectors) Test.assertSimilar(charAtPos(...objVectors[i]), objRes[i])"
		],
		"starterFn": [
			"1\nfunction charAtPos(r, s) {",
			"2\n  /* your code in here */",
			"3\n  return charAtPos(r, s)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/Fby397fv37HCNHZy8"
	},
	{
		"title": "Word Buckets",
		"description": "<p><span>Write a function that divides a phrase into word buckets, with each bucket containing </span><code>n</code><span> or fewer characters. Only include full words inside each bucket.</span></p><h3><span>Examples</span></h3><pre><code>bucketize(\"she sells sea shells by the sea\", 10)\n➞ [\"she sells\", \"sea shells\", \"by the sea\"]\n\nbucketize(\"the mouse jumped over the cheese\", 7)\n➞ [\"the\", \"mouse\", \"jumped\", \"over\", \"the\", \"cheese\"]\n\nbucketize(\"fairy dust coated the air\", 20)\n➞ [\"fairy dust coated\", \"the air\"]\n\nbucketize(\"a b c d e\", 2)\n➞ [\"a\", \"b\", \"c\", \"d\", \"e\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>Spaces count as one character.</span></li><li><span>Trim beginning and end spaces for each word bucket (see final example).</span></li><li><span>If buckets are too small to hold a single word, return an empty array: </span><code>[]</code></li><li><span>The final goal isn't to return just the words with a length equal (or lower) to the given </span><code>n</code><span>, but to return the entire given phrase bucketized (if possible). So, for the specific case of \"by\" the only word with a proper length, the phrase can't be bucketized, and the returned array has to be empty.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"control_flow",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(bucketize(\"she sells sea shells by the sea\", 2), [])",
			"Test.assertSimilar(bucketize(\"ab bc cd\", 1), [])",
			"Test.assertSimilar(bucketize(\"she sells sea shells by the sea\", 10), [\"she sells\", \"sea shells\", \"by the sea\"])",
			"Test.assertSimilar(bucketize(\"the mouse jumped over the cheese\", 7), [\"the\", \"mouse\", \"jumped\", \"over\", \"the\", \"cheese\"])",
			"Test.assertSimilar(bucketize(\"fairy dust coated the air\", 20), [\"fairy dust coated\", \"the air\"])",
			"Test.assertSimilar(bucketize(\"do the hokey pokey\", 6), [\"do the\", \"hokey\", \"pokey\"])",
			"Test.assertSimilar(bucketize(\"do the hokey pokey\", 12), [\"do the hokey\", \"pokey\"])",
			"Test.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 12), [\"rich\", \"magnificent\", \"trees dotted\", \"the\", \"landscape\"])",
			"Test.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 15), [\"rich\", \"magnificent\", \"trees dotted\", \"the landscape\"])",
			"Test.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 18), [\"rich magnificent\", \"trees dotted the\", \"landscape\"])",
			"Test.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 22), [\"rich magnificent trees\", \"dotted the landscape\"])",
			"Test.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 40), [\"rich magnificent trees dotted the\", \"landscape\"])",
			"Test.assertSimilar(bucketize(\"rich magnificent trees dotted the landscape\", 43), [\"rich magnificent trees dotted the landscape\"])",
			"Test.assertSimilar(bucketize(\"beep bo bee bop bee bo bo bop\", 6), [\"beep\", \"bo bee\", \"bop\", \"bee bo\", \"bo bop\"])",
			"Test.assertSimilar(bucketize(\"beep bo bee bop bee bo bo bop\", 10), [\"beep bo\", \"bee bop\", \"bee bo bo\", \"bop\"])",
			"Test.assertSimilar(bucketize(\"a b c d e\", 3), [\"a b\", \"c d\", \"e\"])",
			"Test.assertSimilar(bucketize(\"a b c d e\", 2), [\"a\", \"b\", \"c\", \"d\", \"e\"])",
			"Test.assertSimilar(bucketize(\"a b c d e\", 1), [\"a\", \"b\", \"c\", \"d\", \"e\"])",
			"Test.assertSimilar(bucketize(\"a b c d e\", 2), [\"a\", \"b\", \"c\", \"d\", \"e\"])",
			"Test.assertSimilar(bucketize(\"a b c d e\", 1), [\"a\", \"b\", \"c\", \"d\", \"e\"])"
		],
		"starterFn": [
			"1\nfunction bucketize(phrase, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Q7foiyejfJG6pqqws"
	},
	{
		"title": "Centered Polygonal Number",
		"description": "<p><span>The </span><strong><span>centered polygonal numbers</span></strong><span> are a family of sequences of 2-dimensional figurate numbers, each formed by a central dot, sorrounded by polygonal layers with a constant number of sides. Each side of a polygonal layer contains one dot more than a side in the previous layer.</span></p><table><thead><tr><th><img src=\"http://oeis.org/w/images/3/33/CenteredTriangularNumber19.png\"></th><th><img src=\"http://oeis.org/w/images/9/99/CenteredSquareNumber25.png\"></th></tr></thead><tbody><tr><td><span>Centered triangular numbers</span></td><td><span>Centered square numbers</span></td></tr><tr><td><img src=\"http://oeis.org/w/images/3/31/CenteredPentagonalNumber31.png\"></td><td><img src=\"http://oeis.org/w/images/d/df/CenteredHexagonalNumber37.png\"></td></tr><tr><td><span>Centered pentagonal numbers</span></td><td><span>Centered hexagonal numbers</span></td></tr></tbody></table><p><span>In the following table are listed the first 12 terms of the sequences of centered </span><em><span>k</span></em><span>-polygonal numbers, with </span><em><span>k</span></em><span> from 3 to 22:</span></p><table><thead><tr><th style=\"text-align: right;\"><span>k</span></th><th><span>Name</span></th><th style=\"text-align: right;\"><span>0</span></th><th style=\"text-align: right;\"><span>1</span></th><th style=\"text-align: right;\"><span>2</span></th><th style=\"text-align: right;\"><span>3</span></th><th style=\"text-align: right;\"><span>4</span></th><th style=\"text-align: right;\"><span>5</span></th><th style=\"text-align: right;\"><span>6</span></th><th style=\"text-align: right;\"><span>7</span></th><th style=\"text-align: right;\"><span>8</span></th><th style=\"text-align: right;\"><span>9</span></th><th style=\"text-align: right;\"><span>10</span></th><th style=\"text-align: right;\"><span>11</span></th></tr></thead><tbody><tr><td style=\"text-align: right;\"><span>3</span></td><td><span>Triangular</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>4</span></td><td style=\"text-align: right;\"><span>10</span></td><td style=\"text-align: right;\"><span>19</span></td><td style=\"text-align: right;\"><span>31</span></td><td style=\"text-align: right;\"><span>46</span></td><td style=\"text-align: right;\"><span>64</span></td><td style=\"text-align: right;\"><span>85</span></td><td style=\"text-align: right;\"><span>109</span></td><td style=\"text-align: right;\"><span>136</span></td><td style=\"text-align: right;\"><span>166</span></td><td style=\"text-align: right;\"><span>199</span></td></tr><tr><td style=\"text-align: right;\"><span>4</span></td><td><span>Square</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>5</span></td><td style=\"text-align: right;\"><span>13</span></td><td style=\"text-align: right;\"><span>25</span></td><td style=\"text-align: right;\"><span>41</span></td><td style=\"text-align: right;\"><span>61</span></td><td style=\"text-align: right;\"><span>85</span></td><td style=\"text-align: right;\"><span>113</span></td><td style=\"text-align: right;\"><span>145</span></td><td style=\"text-align: right;\"><span>181</span></td><td style=\"text-align: right;\"><span>221</span></td><td style=\"text-align: right;\"><span>265</span></td></tr><tr><td style=\"text-align: right;\"><span>5</span></td><td><span>Pentagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>6</span></td><td style=\"text-align: right;\"><span>16</span></td><td style=\"text-align: right;\"><span>31</span></td><td style=\"text-align: right;\"><span>51</span></td><td style=\"text-align: right;\"><span>76</span></td><td style=\"text-align: right;\"><span>106</span></td><td style=\"text-align: right;\"><span>141</span></td><td style=\"text-align: right;\"><span>181</span></td><td style=\"text-align: right;\"><span>226</span></td><td style=\"text-align: right;\"><span>276</span></td><td style=\"text-align: right;\"><span>331</span></td></tr><tr><td style=\"text-align: right;\"><span>6</span></td><td><span>Hexagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>7</span></td><td style=\"text-align: right;\"><span>19</span></td><td style=\"text-align: right;\"><span>37</span></td><td style=\"text-align: right;\"><span>61</span></td><td style=\"text-align: right;\"><span>91</span></td><td style=\"text-align: right;\"><span>127</span></td><td style=\"text-align: right;\"><span>169</span></td><td style=\"text-align: right;\"><span>217</span></td><td style=\"text-align: right;\"><span>271</span></td><td style=\"text-align: right;\"><span>331</span></td><td style=\"text-align: right;\"><span>397</span></td></tr><tr><td style=\"text-align: right;\"><span>7</span></td><td><span>Heptagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>8</span></td><td style=\"text-align: right;\"><span>22</span></td><td style=\"text-align: right;\"><span>43</span></td><td style=\"text-align: right;\"><span>71</span></td><td style=\"text-align: right;\"><span>106</span></td><td style=\"text-align: right;\"><span>148</span></td><td style=\"text-align: right;\"><span>197</span></td><td style=\"text-align: right;\"><span>253</span></td><td style=\"text-align: right;\"><span>316</span></td><td style=\"text-align: right;\"><span>386</span></td><td style=\"text-align: right;\"><span>463</span></td></tr><tr><td style=\"text-align: right;\"><span>8</span></td><td><span>Octagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>9</span></td><td style=\"text-align: right;\"><span>25</span></td><td style=\"text-align: right;\"><span>49</span></td><td style=\"text-align: right;\"><span>81</span></td><td style=\"text-align: right;\"><span>121</span></td><td style=\"text-align: right;\"><span>169</span></td><td style=\"text-align: right;\"><span>225</span></td><td style=\"text-align: right;\"><span>289</span></td><td style=\"text-align: right;\"><span>361</span></td><td style=\"text-align: right;\"><span>441</span></td><td style=\"text-align: right;\"><span>529</span></td></tr><tr><td style=\"text-align: right;\"><span>9</span></td><td><span>Nonagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>10</span></td><td style=\"text-align: right;\"><span>28</span></td><td style=\"text-align: right;\"><span>55</span></td><td style=\"text-align: right;\"><span>91</span></td><td style=\"text-align: right;\"><span>136</span></td><td style=\"text-align: right;\"><span>190</span></td><td style=\"text-align: right;\"><span>253</span></td><td style=\"text-align: right;\"><span>325</span></td><td style=\"text-align: right;\"><span>406</span></td><td style=\"text-align: right;\"><span>496</span></td><td style=\"text-align: right;\"><span>595</span></td></tr><tr><td style=\"text-align: right;\"><span>10</span></td><td><span>Decagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>11</span></td><td style=\"text-align: right;\"><span>31</span></td><td style=\"text-align: right;\"><span>61</span></td><td style=\"text-align: right;\"><span>101</span></td><td style=\"text-align: right;\"><span>151</span></td><td style=\"text-align: right;\"><span>211</span></td><td style=\"text-align: right;\"><span>281</span></td><td style=\"text-align: right;\"><span>361</span></td><td style=\"text-align: right;\"><span>451</span></td><td style=\"text-align: right;\"><span>551</span></td><td style=\"text-align: right;\"><span>661</span></td></tr><tr><td style=\"text-align: right;\"><span>11</span></td><td><span>Hendecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>12</span></td><td style=\"text-align: right;\"><span>34</span></td><td style=\"text-align: right;\"><span>67</span></td><td style=\"text-align: right;\"><span>111</span></td><td style=\"text-align: right;\"><span>166</span></td><td style=\"text-align: right;\"><span>232</span></td><td style=\"text-align: right;\"><span>309</span></td><td style=\"text-align: right;\"><span>397</span></td><td style=\"text-align: right;\"><span>496</span></td><td style=\"text-align: right;\"><span>606</span></td><td style=\"text-align: right;\"><span>727</span></td></tr><tr><td style=\"text-align: right;\"><span>12</span></td><td><span>Dodecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>13</span></td><td style=\"text-align: right;\"><span>37</span></td><td style=\"text-align: right;\"><span>73</span></td><td style=\"text-align: right;\"><span>121</span></td><td style=\"text-align: right;\"><span>181</span></td><td style=\"text-align: right;\"><span>253</span></td><td style=\"text-align: right;\"><span>337</span></td><td style=\"text-align: right;\"><span>433</span></td><td style=\"text-align: right;\"><span>541</span></td><td style=\"text-align: right;\"><span>661</span></td><td style=\"text-align: right;\"><span>793</span></td></tr><tr><td style=\"text-align: right;\"><span>13</span></td><td><span>Tridecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>14</span></td><td style=\"text-align: right;\"><span>40</span></td><td style=\"text-align: right;\"><span>79</span></td><td style=\"text-align: right;\"><span>131</span></td><td style=\"text-align: right;\"><span>196</span></td><td style=\"text-align: right;\"><span>274</span></td><td style=\"text-align: right;\"><span>365</span></td><td style=\"text-align: right;\"><span>469</span></td><td style=\"text-align: right;\"><span>586</span></td><td style=\"text-align: right;\"><span>716</span></td><td style=\"text-align: right;\"><span>859</span></td></tr><tr><td style=\"text-align: right;\"><span>14</span></td><td><span>Tetradecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>15</span></td><td style=\"text-align: right;\"><span>43</span></td><td style=\"text-align: right;\"><span>85</span></td><td style=\"text-align: right;\"><span>141</span></td><td style=\"text-align: right;\"><span>211</span></td><td style=\"text-align: right;\"><span>295</span></td><td style=\"text-align: right;\"><span>393</span></td><td style=\"text-align: right;\"><span>505</span></td><td style=\"text-align: right;\"><span>631</span></td><td style=\"text-align: right;\"><span>771</span></td><td style=\"text-align: right;\"><span>925</span></td></tr><tr><td style=\"text-align: right;\"><span>15</span></td><td><span>Pentadecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>16</span></td><td style=\"text-align: right;\"><span>46</span></td><td style=\"text-align: right;\"><span>91</span></td><td style=\"text-align: right;\"><span>151</span></td><td style=\"text-align: right;\"><span>226</span></td><td style=\"text-align: right;\"><span>316</span></td><td style=\"text-align: right;\"><span>421</span></td><td style=\"text-align: right;\"><span>541</span></td><td style=\"text-align: right;\"><span>676</span></td><td style=\"text-align: right;\"><span>826</span></td><td style=\"text-align: right;\"><span>991</span></td></tr><tr><td style=\"text-align: right;\"><span>16</span></td><td><span>Hexadecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>17</span></td><td style=\"text-align: right;\"><span>49</span></td><td style=\"text-align: right;\"><span>97</span></td><td style=\"text-align: right;\"><span>161</span></td><td style=\"text-align: right;\"><span>241</span></td><td style=\"text-align: right;\"><span>337</span></td><td style=\"text-align: right;\"><span>449</span></td><td style=\"text-align: right;\"><span>577</span></td><td style=\"text-align: right;\"><span>721</span></td><td style=\"text-align: right;\"><span>881</span></td><td style=\"text-align: right;\"><span>1057</span></td></tr><tr><td style=\"text-align: right;\"><span>17</span></td><td><span>Heptadecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>18</span></td><td style=\"text-align: right;\"><span>52</span></td><td style=\"text-align: right;\"><span>103</span></td><td style=\"text-align: right;\"><span>171</span></td><td style=\"text-align: right;\"><span>256</span></td><td style=\"text-align: right;\"><span>358</span></td><td style=\"text-align: right;\"><span>477</span></td><td style=\"text-align: right;\"><span>613</span></td><td style=\"text-align: right;\"><span>766</span></td><td style=\"text-align: right;\"><span>936</span></td><td style=\"text-align: right;\"><span>1123</span></td></tr><tr><td style=\"text-align: right;\"><span>18</span></td><td><span>Octadecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>19</span></td><td style=\"text-align: right;\"><span>55</span></td><td style=\"text-align: right;\"><span>109</span></td><td style=\"text-align: right;\"><span>181</span></td><td style=\"text-align: right;\"><span>271</span></td><td style=\"text-align: right;\"><span>379</span></td><td style=\"text-align: right;\"><span>505</span></td><td style=\"text-align: right;\"><span>649</span></td><td style=\"text-align: right;\"><span>811</span></td><td style=\"text-align: right;\"><span>991</span></td><td style=\"text-align: right;\"><span>1189</span></td></tr><tr><td style=\"text-align: right;\"><span>19</span></td><td><span>Enneadecagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>20</span></td><td style=\"text-align: right;\"><span>58</span></td><td style=\"text-align: right;\"><span>115</span></td><td style=\"text-align: right;\"><span>191</span></td><td style=\"text-align: right;\"><span>286</span></td><td style=\"text-align: right;\"><span>400</span></td><td style=\"text-align: right;\"><span>533</span></td><td style=\"text-align: right;\"><span>685</span></td><td style=\"text-align: right;\"><span>856</span></td><td style=\"text-align: right;\"><span>1046</span></td><td style=\"text-align: right;\"><span>1255</span></td></tr><tr><td style=\"text-align: right;\"><span>20</span></td><td><span>Icosagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>21</span></td><td style=\"text-align: right;\"><span>61</span></td><td style=\"text-align: right;\"><span>121</span></td><td style=\"text-align: right;\"><span>201</span></td><td style=\"text-align: right;\"><span>301</span></td><td style=\"text-align: right;\"><span>421</span></td><td style=\"text-align: right;\"><span>561</span></td><td style=\"text-align: right;\"><span>721</span></td><td style=\"text-align: right;\"><span>901</span></td><td style=\"text-align: right;\"><span>1101</span></td><td style=\"text-align: right;\"><span>1321</span></td></tr><tr><td style=\"text-align: right;\"><span>21</span></td><td><span>Icosihenagonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>22</span></td><td style=\"text-align: right;\"><span>64</span></td><td style=\"text-align: right;\"><span>127</span></td><td style=\"text-align: right;\"><span>211</span></td><td style=\"text-align: right;\"><span>316</span></td><td style=\"text-align: right;\"><span>442</span></td><td style=\"text-align: right;\"><span>589</span></td><td style=\"text-align: right;\"><span>757</span></td><td style=\"text-align: right;\"><span>946</span></td><td style=\"text-align: right;\"><span>1156</span></td><td style=\"text-align: right;\"><span>1387</span></td></tr><tr><td style=\"text-align: right;\"><span>22</span></td><td><span>Icosidigonal</span></td><td style=\"text-align: right;\"><span>1</span></td><td style=\"text-align: right;\"><span>23</span></td><td style=\"text-align: right;\"><span>67</span></td><td style=\"text-align: right;\"><span>133</span></td><td style=\"text-align: right;\"><span>221</span></td><td style=\"text-align: right;\"><span>331</span></td><td style=\"text-align: right;\"><span>463</span></td><td style=\"text-align: right;\"><span>617</span></td><td style=\"text-align: right;\"><span>793</span></td><td style=\"text-align: right;\"><span>991</span></td><td style=\"text-align: right;\"><span>1211</span></td><td style=\"text-align: right;\"><span>1453</span></td></tr></tbody></table><p><span>As you can see:</span></p><ul><li><span>6 is the 1st </span><em><span>pentagonal number</span></em><span>;</span></li><li><span>16 is the 2nd </span><em><span>pentagonal number</span></em><span> and the 1st </span><em><span>pentadecagonal number</span></em><span>;</span></li><li><span>19 is the 3rd </span><em><span>triangular number</span></em><span>, the 2nd </span><em><span>hexagonal number</span></em><span> and the 1st </span><em><span>octadecagonal number</span></em><span>.</span></li></ul><p><span>Write a function that takes an integer </span><code>n</code><span> as argument and returns its classification as polygonal number:</span></p><ul><li><span>return </span><code>\"0th of all\"</code><span> if </span><code>n</code><span> is 1, since it is the 0th term of every centered polygonal number sequence;</span></li><li><span>return a list whose generic element is a string formatted as </span><code>\"{i}th {k}-gonal number\"</code><span> if </span><code>n</code><span> is the </span><em><span>i</span></em><span>-th </span><em><span>k</span></em><span>-gonal number, in </span><em><span>k</span></em><span>-ascending order;</span></li><li><span>return </span><code>false</code><span> if </span><code>n</code><span> is not a </span><em><span>k</span></em><span>-gonal number for any </span><em><span>k</span></em><span> &gt; 2.</span></li></ul><!-- react-empty: 899 --><!-- react-empty: 900 --><!-- react-empty: 901 --><!-- react-empty: 902 --><h3><span>Examples</span></h3><pre><code>isPolygonal(3) ➞ false\n\nisPolygonal(4) ➞ [\"1st 3-gonal number\"]\n\nisPolygonal(16) ➞ [\"2nd 5-gonal number\", \"1st 15-gonal number\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(isPolygonal(1), \"0th of all\")",
			"Test.assertSimilar(isPolygonal(2), false)",
			"Test.assertSimilar(isPolygonal(3), false)",
			"Test.assertSimilar(isPolygonal(4), [\"1st 3-gonal number\"])",
			"Test.assertSimilar(isPolygonal(5), [\"1st 4-gonal number\"])",
			"Test.assertSimilar(isPolygonal(6), [\"1st 5-gonal number\"])",
			"Test.assertSimilar(isPolygonal(7), [\"1st 6-gonal number\"])",
			"Test.assertSimilar(isPolygonal(8), [\"1st 7-gonal number\"])",
			"Test.assertSimilar(isPolygonal(9), [\"1st 8-gonal number\"])",
			"Test.assertSimilar(isPolygonal(10), [\"2nd 3-gonal number\", \"1st 9-gonal number\"])",
			"Test.assertSimilar(isPolygonal(11), [\"1st 10-gonal number\"])",
			"Test.assertSimilar(isPolygonal(13), [\"2nd 4-gonal number\", \"1st 12-gonal number\"])",
			"Test.assertSimilar(isPolygonal(16), [\"2nd 5-gonal number\", \"1st 15-gonal number\"])",
			"Test.assertSimilar(isPolygonal(19), [\"3rd 3-gonal number\", \"2nd 6-gonal number\", \"1st 18-gonal number\"])",
			"Test.assertSimilar(isPolygonal(19), [\"3rd 3-gonal number\", \"2nd 6-gonal number\", \"1st 18-gonal number\"])",
			"Test.assertSimilar(isPolygonal(25), [\"3rd 4-gonal number\", \"2nd 8-gonal number\", \"1st 24-gonal number\"])",
			"Test.assertSimilar(isPolygonal(31), [\"4th 3-gonal number\", \"3rd 5-gonal number\", \"2nd 10-gonal number\", \"1st 30-gonal number\"])",
			"Test.assertSimilar(isPolygonal(37), [\"3rd 6-gonal number\", \"2nd 12-gonal number\", \"1st 36-gonal number\"])",
			"Test.assertSimilar(isPolygonal(43), [\"3rd 7-gonal number\", \"2nd 14-gonal number\", \"1st 42-gonal number\"])",
			"Test.assertSimilar(isPolygonal(46), [\"5th 3-gonal number\", \"2nd 15-gonal number\", \"1st 45-gonal number\"])",
			"Test.assertSimilar(isPolygonal(49), [\"3rd 8-gonal number\", \"2nd 16-gonal number\", \"1st 48-gonal number\"])",
			"Test.assertSimilar(isPolygonal(55), [\"3rd 9-gonal number\", \"2nd 18-gonal number\", \"1st 54-gonal number\"])",
			"Test.assertSimilar(isPolygonal(61), [\"5th 4-gonal number\", \"4th 6-gonal number\", \"3rd 10-gonal number\", \"2nd 20-gonal number\", \"1st 60-gonal number\"])",
			"Test.assertSimilar(isPolygonal(64), [\"6th 3-gonal number\", \"2nd 21-gonal number\", \"1st 63-gonal number\"])",
			"Test.assertSimilar(isPolygonal(67), [\"3rd 11-gonal number\", \"2nd 22-gonal number\", \"1st 66-gonal number\"])",
			"Test.assertSimilar(isPolygonal(73), [\"3rd 12-gonal number\", \"2nd 24-gonal number\", \"1st 72-gonal number\"])"
		],
		"starterFn": [
			"1\nfunction isPolygonal(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ec8eWXPWK7JtPNP8d"
	},
	{
		"title": "Throwing <N> Amount of Darts Find All Possible Combinations to Reach a Target Score",
		"description": "<p><span>You're given a dartboard divided into sections, each section has a </span><strong><span>unique</span></strong><span> score. That means there won't be two sections with the same score.</span></p><p><img alt=\"alt text\" title=\"Dart Board\" src=\"https://s3.amazonaws.com/edabit-images/dartboard.png\"></p><p><span>Throwing a certain amount of valid darts, find how many solutions there are to reach the target score. Your function will be passed three parameters...</span></p><ul><li><p><strong><span>Sections</span></strong><span>: An array of values for the sections (e.g. </span><code>[3, 6, 8, 11, 15, 19, 22]</code><span>, the array is already sorted).</span></p></li><li><p><strong><span>Darts</span></strong><span>: The amount of darts to throw.</span></p></li><li><p><strong><span>Target</span></strong><span>: The target score.</span></p></li></ul><p><span>Return an empty array if no solution is found, otherwise an array of non-duplicate strings for each solution (e.g. </span><code>[\"3-11-18\", \"7-7-18\", \"7-11-14\"]</code><span>).</span></p><h3><span>Examples</span></h3><p><span>If there are duplicate values, keep only the one sorted from smallest to biggest.</span></p><pre><code>\"8-19-8\"\n\n\"8-8-19\" &lt;-- This is the one you would keep.\n\n\"19-8-8\"</code></pre><p><span>Multiple solutions should be sorted before returning them.</span></p><pre><code>[\"3-11-18\", \"7-7-18\", \"7-11-14\"] is ok.\n\n[\"7-11-14\", \"7-7-18\", \"3-11-18\"] is not ok.</code></pre><h3><span>Notes</span></h3><ul><li><p><span>Multiple darts </span><strong><span>can</span></strong><span> land in the same section.</span></p></li><li><p><span>A dart </span><strong><span>must</span></strong><span> land in a valid section (it can't miss).</span></p></li></ul>",
		"publishedBy": "Pustur",
		"publishedByUrl": "https://edabit.com/user/65dbBZynphj53nXqA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"recursion"
		],
		"tests": [
			"// Base tests",
			"Test.assertSimilar(",
			"  dartsSolver([3, 6, 8, 11, 15, 19, 22], 3, 35),",
			"  ['8-8-19']",
			");",
			"Test.assertSimilar(",
			"  dartsSolver([2, 4, 7, 10, 13, 18, 24], 3, 29),",
			"  ['4-7-18']",
			");",
			"Test.assertSimilar(",
			"  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 40),",
			"  ['11-11-18']",
			");",
			"Test.assertSimilar(",
			"  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 8),",
			"  [],",
			"  'Should return an empty array if there are no solutions'",
			");",
			"​",
			"// Additional tests",
			"Test.assertSimilar(",
			"  dartsSolver([3, 7, 11, 14, 18, 20, 25], 3, 32),",
			"  ['3-11-18', '7-7-18', '7-11-14'],",
			"  'Should return multiple solutions in the correct order'",
			");",
			"Test.assertSimilar("
		],
		"starterFn": [
			"1\nfunction dartsSolver(sections, darts, target) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/YBZgzAxuyDtS9bomm"
	},
	{
		"title": "Fit the Pattern",
		"description": "<p><span>Create a function that checks if the sub-arrays in an array adhere to the specified pattern.</span></p><h3><span>Examples</span></h3><pre><code>checkPattern([[1, 1], [2, 2], [1, 1], [2, 2]], \"ABAB\") ➞ true\n\ncheckPattern([[1, 2], [1, 3], [1, 4], [1, 2]], \"ABCA\") ➞ true\n\ncheckPattern([[1, 2, 3], [1, 2, 3], [3, 2, 1], [3, 2, 1]], \"AABB\") ➞ true\n\ncheckPattern([[8, 8, 8, 8], [7, 7, 7, 7], [6, 6, 6, 6], [5, 5, 5, 5]], \"ABCD\") ➞ true\n\ncheckPattern([[8, 8, 8, 8], [7, 7, 7, 7], [6, 6, 6, 6], [5, 5, 5, 5]], \"DCBA\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>The length of the pattern will always be the same as the length of the (main) array.</span></li><li><span>The pattern does not necessarily have to be alphabetically ordered (see last example).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming"
		],
		"tests": [
			"Test.assertEquals(checkPattern([[1, 1], [2, 2], [1, 1], [2, 2]], \"ABAB\"), true)",
			"Test.assertEquals(checkPattern([[1, 2], [1, 2], [1, 2], [1, 2]], \"AAAA\"), true)",
			"Test.assertEquals(checkPattern([[1, 2], [1, 3], [1, 4], [1, 2]], \"ABCA\"), true)",
			"Test.assertEquals(checkPattern([[1, 2, 3], [1, 2, 3], [3, 2, 1], [3, 2, 1]], \"AABB\"), true)",
			"Test.assertEquals(checkPattern([[8, 8, 8, 8], [7, 7, 7, 7], [6, 6, 6, 6], [5, 5, 5, 5]], \"ABCD\"), true)",
			"Test.assertEquals(checkPattern([[8, 8, 8, 8], [7, 7, 7, 7], [6, 6, 6, 6], [5, 5, 5, 5]], \"DCBA\"), true)",
			"Test.assertEquals(checkPattern([[8], [7], [6], [6]], \"ABCC\"), true)",
			"Test.assertEquals(checkPattern([[8], [9], [9], [9]], \"ABBB\"), true)",
			"Test.assertEquals(checkPattern([[1, 1], [2, 2], [1, 1], [1, 2]], \"ABAB\"), false)",
			"Test.assertEquals(checkPattern([[1, 2], [1, 2], [2, 2], [3, 2]], \"AAAA\"), false)",
			"Test.assertEquals(checkPattern([[8], [9], [9], [8]], \"ABBB\"), false)",
			"Test.assertEquals(checkPattern([[8], [7], [6], [5]], \"ABCC\"), false)",
			"Test.assertEquals(checkPattern([[8, 8, 8, 8], [7, 7, 7, 7], [6, 6, 6, 6], [5, 5, 5, 5]], \"DDBA\"), false)",
			"Test.assertEquals(checkPattern([[1, 2], [1, 2], [1, 2], [1, 2]], \"AABA\"), false)"
		],
		"starterFn": [
			"1\nfunction checkPattern(arr, pattern) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oXWwHkutPD5Aer6Db"
	},
	{
		"title": "All Subsets that Add to a Value",
		"description": "<p><span>Create a function that returns all subarrays in an array that sum to a particular value. Return the subarrays in the following order:</span></p><ol><li><span>First by </span><strong><span>ascending length</span></strong><span>.</span></li><li><span>Second by comparing element-by-element, starting from the leftmost one. Put the array with the </span><strong><span>smaller</span></strong><span> element first in the pairwise comparison.</span></li></ol><p><span>The following example will illustrate:</span></p><pre><code>getSubsets([-3, -2, -1, 0, 1, 2, 3], 2)\n[ // All the subsets below sum to 2.\n  [2],\n  [-1, 3],\n  [0, 2], // Same length: -1 &lt; 0, so [-1, 3] goes before [0, 2]\n  [-3, 2, 3],\n  [-2, 1, 3],\n  [-1, 0, 3],\n  [-1, 1, 2],\n  [-3, 0, 2, 3],\n  [-2, -1, 2, 3],\n  [-2, 0, 1, 3], // Same length + same first element: -1 &lt; 0, so [-2, -1, 2, 3] goes before [-2, 0, 1, 3]\n  [-1, 0, 1, 2],\n  [-3, -1, 1, 2, 3],\n  [-2, -1, 0, 2, 3],\n  [-3, -1, 0, 1, 2, 3]\n]</code></pre><h3><span>Examples</span></h3><pre><code>getSubsets([-1, 0, 1, 2], 2) ➞ [[2], [0, 2], [-1, 1, 2], [-1, 0, 1, 2]]\n\ngetSubsets([-1, 0, 1, 2], 3) ➞ [[1, 2], [0, 1, 2]]\n\ngetSubsets([1, 2, 3, 4], 5) ➞ [[1, 4], [2, 3]]\n\ngetSubsets([-1, 0, 1, 2], 4) ➞ []</code></pre><h3><span>Notes</span></h3><ul><li><span>Arrays will have unique numbers.</span></li><li><span>Return an empty array if there does not a exist a subset whose numbers sum to that value (see fourth example).</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"higher_order_functions",
			"sorting"
		],
		"tests": [
			"Test.assertSimilar(getSubsets([-1, 0, 1, 2], 2), [[2], [0, 2], [-1, 1, 2], [-1, 0, 1, 2]])",
			"Test.assertSimilar(getSubsets([-1, 0, 1, 2], 3), [[1, 2], [0, 1, 2]])",
			"Test.assertSimilar(getSubsets([1, 2, 3, 4], 5), [[1, 4], [2, 3]])",
			"Test.assertSimilar(getSubsets([-1, 0, 1, 2], 4), [])",
			"Test.assertSimilar(getSubsets([1, 2, 3, 4, 5, 6], 6), [[6], [1, 5], [2, 4], [1, 2, 3]])",
			"Test.assertSimilar(getSubsets([-3, -2, -1, 0, 1, 2, 3], 2),",
			"[[2], ",
			"[-1, 3], ",
			"[0, 2], ",
			"[-3, 2, 3], ",
			"[-2, 1, 3], ",
			"[-1, 0, 3],",
			"[-1, 1, 2], ",
			"[-3, 0, 2, 3], ",
			"[-2, -1, 2, 3], ",
			"[-2, 0, 1, 3], ",
			"[-1, 0, 1, 2], ",
			"[-3, -1, 1, 2, 3], ",
			"[-2, -1, 0, 2, 3], ",
			"[-3, -1, 0, 1, 2, 3]])"
		],
		"starterFn": [
			"1\nfunction getSubsets(arr, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5B5bqA9pFwCobWXMH"
	},
	{
		"title": "Point Within Triangle",
		"description": "<p><span>Create a function that takes four pairs. The first three are (x, y) coordinates of three corners of a triangle. Return </span><code>true</code><span> if the fourth tuple — the (x, y) coordinates of a test point — lies within the triangle, </span><code>false</code><span> if it doesn't.</span></p><h3><span>Examples</span></h3><pre><code>withinTriangle([1, 4], [5, 6], [6, 1], [4, 5]) ➞ true\n\nwithinTriangle([1, 4], [5, 6], [6, 1], [3, 2]) ➞ false\n\nwithinTriangle([-6, 2], [-2, -2], [8, 4], [4, 2]) ➞ true</code></pre><h3><span>Notes</span></h3><p><span>Pairs are given as arrays of length two.</span></p>",
		"publishedBy": "Thomas Sandell",
		"publishedByUrl": "https://edabit.com/user/neZGagD5qFmHT5nRy",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"validation"
		],
		"tests": [
			"Test.assertEquals(withinTriangle([1, 4], [5, 6], [6, 1], [4, 5]), true)",
			"Test.assertEquals(withinTriangle([1, 4], [5, 6], [6, 1], [3, 2]), false)",
			"Test.assertEquals(withinTriangle([1, 7], [2, 4], [9, 3], [2, 6]), true)",
			"Test.assertEquals(withinTriangle([1, 7], [2, 4], [9, 3], [6, 5]), false)",
			"Test.assertEquals(withinTriangle([-2, 6], [12, -3], [1, 7], [9, -1]), true)",
			"Test.assertEquals(withinTriangle([-2, 6], [12, -3], [1, 7], [4, 2]), false)",
			"Test.assertEquals(withinTriangle([-6, 2], [-2, -2], [8, 4], [4, 2]), true)",
			"Test.assertEquals(withinTriangle([-6, 2], [-2, -2], [8, 4], [0, -4]), false)"
		],
		"starterFn": [
			"1\nfunction withinTriangle(p0, p1, p2, test) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3r6rTcdpkQtzFmHwy"
	},
	{
		"title": "String Cleaver",
		"description": "<p><span>Create a function that takes a string (without spaces) and a word array, cleaves the string into words based on the array, and returns the correctly spaced version of the string (a sentence). If a section of the string is encountered that can't be found on the word array, return </span><code>\"Cleaving stalled: Word not found\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>const words = [\"about\", \"be\", \"hell\", \"if\", \"is\", \"it\", \"me\", \"other\", \"outer\", \"people\", \"the\", \"to\", \"up\", \"where\"]\n\n\ncleave(\"ifitistobeitisuptome\", words) ➞ \"if it is to be it is up to me\"\n\ncleave(\"hellisotherpeople\", words) ➞ \"hell is other people\"\n\ncleave(\"hellisotterpeople\", words) ➞ \"Cleaving stalled: Word not found\"</code></pre><h3><span>Notes</span></h3><p><span>Words in the </span><code>words</code><span> array can appear more than once in the string. The </span><code>words</code><span> array is a reference guide, kind of like a dictionary that lists which words are allowed.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"strings",
			"validation"
		],
		"tests": [
			"const words = ['a', 'after', 'all', 'an', 'and', 'are', 'as', 'by', 'continued', 'deadlines', 'doubly', 'fish', 'for', 'go', 'happen', 'happened', 'i', 'illusion', 'is', 'long', 'love', 'lunchtime', 'make', 'moment', 'noise', 'nothing', 'of', 'or', 'people', 'problem', 'second', 'so', 'summarize', 'summary', 'thanks', 'the', 'then', 'they', 'time', 'to', 'whooshing']",
			"const s1 = 'solongandthanksforallthefish'",
			"const s2 = 'solongandthanksforalllthefish'",
			"const s3 = 'tosummarizethesummaryofthesummarypeopleareaproblem'",
			"const s4 = 'timeisanillusionlunchtimedoublyso'",
			"const s5 = 'ilovedeadlinesilovethewhooshingnoisetheymakeastheygoby'",
			"const s6 = 'ilovedeadlinesilovethewheezingnoisetheymakeastheygoby'",
			"const s7 = 'foramomentnothinghappenedthenafterasecondorsonothingcontinuedtohappen'",
			"​",
			"Test.assertEquals(cleave(s1, words), 'so long and thanks for all the fish')",
			"Test.assertEquals(cleave(s2, words), \"Cleaving stalled: Word not found\")",
			"Test.assertEquals(cleave(s3, words), 'to summarize the summary of the summary people are a problem')",
			"Test.assertEquals(cleave(s4, words), 'time is an illusion lunchtime doubly so')",
			"Test.assertEquals(cleave(s5, words), 'i love deadlines i love the whooshing noise they make as they go by')",
			"Test.assertEquals(cleave(s6, words), \"Cleaving stalled: Word not found\")",
			"Test.assertEquals(cleave(s7, words), 'for a moment nothing happened then after a second or so nothing continued to happen')",
			"​",
			"// Quotes credit: Douglas Adams"
		],
		"starterFn": [
			"1\nfunction cleave(str, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/y7xoBP9bgHRNTcELK"
	},
	{
		"title": "Modular Inverse",
		"description": "<p><span>A positive integer multiplied times its inverse is always equal to 1:  </span><code>17*(1/17)==1</code><span>.  Modular arithmetic has a similar inverse function, although, for modulus </span><code>m</code><span>, we are confined to integers from 0 to m-1. The modular multiplicative inverse of 3 modulus 5 is equal to 2 because </span><code>(3*2)%5==1</code><span>. Another example: the modular inverse of 17 modulus 1000007 is equal to 58824 because </span><code>(17*58824)%1000007==1</code><span>. The modular inverse, if it exists, must always be in the range 0 to m-1.</span></p><p><span>Create a function that has arguments integer </span><code>n</code><span> and modulus </span><code>m</code><span>. The function will return the modular inverse of </span><code>n</code><span> mod </span><code>m</code><span>.  If the modular inverse does not exist, return </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>modInv(2, 3) ➞ 2\n\nmodInv(12, 47) ➞ 4\n\nmodInv(11, 33) ➞ false\n\nmodInv(55, 678) ➞ 37\n\nmodInv(81, 3455) ➞ 2346</code></pre><h3><span>Notes</span></h3><ul><li><span>Some of the test cases have rather large integers, so if you attempt to do a brute force search of the entire modular field, you may not be successful due to the 12 second time limit imposed by the server. See </span><strong><span>Resources</span></strong><span> for a more efficient approach.</span></li><li><span>The modular inverse of a number </span><code>n</code><span> modulus </span><code>m</code><span> exists only if </span><code>n</code><span> and </span><code>m</code><span> are coprime (i.e. they have no common factors other than 1).</span></li><li><span>One practical use of modular inverse is in public-key cryptography like RSA where it can be used to determine the value of the private key.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"cryptography",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(modInv(8, 21), 8)",
			"Test.assertEquals(modInv(101, 678), 47)",
			"Test.assertEquals(modInv(21, 36), false)",
			"Test.assertEquals(modInv(2791, 9497), 1749)",
			"Test.assertEquals(modInv(234, 807652131), false)",
			"Test.assertEquals(modInv(71, 134676521), 41730753)"
		],
		"starterFn": [
			"1\nfunction modInv(n, m) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/b4vuZMpjTfFzxhgvK"
	},
	{
		"title": "Resistor Networks",
		"description": "<p><span>Resistors are electrical components that add resistance to a circuit. Resistance is measured in ohms. When resistors are connected in series, the total resistance is merely the sum of the individual resistances:</span></p><pre><code>Rtotal = R1 + R2 + R3 + ...</code></pre><p><span>When resistors are connected in parallel, the reciprocal of the total resistance is equal to the sum of the reciprocals of the individual resistances:</span></p><pre><code>1/(Rtotal) = 1/R1 + 1/R2 + 1/R3 + ...</code></pre><p><span>Let's specify that series resistors be designated by enclosing them in parentheses, and parallel resistors by enclosing them in square brackets. Now we can calculate the equivalent resistance of the network:</span></p><ul><li><code>(2, 3, 6)</code><span> = 11 ohms</span></li><li><code>[2, 3, 6]</code><span>= 1 ohm</span></li></ul><p><span>Nesting these structures in the same way tuples and arrays are nested allows us to model complex resistor networks.</span></p><p><span>Create a function that takes a nested network as a string and returns the equivalent resistance of the network. Round results to the nearest tenth of an ohm.</span></p><h3><span>Examples</span></h3><pre><code>resist(\"(10, [20, 30])\") ➞ 22.0\n// 10 in series with [20, 30] in parallel.\n\nresist(\"[10, (20, 30)]\") ➞ 8.3\n// 10 in parallel with (20, 30) in series.\n\nresist(\"([10, 20], (30, 40))\") ➞ 76.7\n// [10, 20] in parallel in series with (30, 40) in series.\n\nresist(\"(1, [12, 4, (1, [10, (2, 8)])])\") ➞ 3.0\n\nresist(\"(6, [8, (4, [8, (4, [6, (8, [6, (10, 2)])])])])\") ➞ 10</code></pre><h3><span>Notes</span></h3><p><span>This is the schematic for the last example above:</span></p><p><img src=\"https://www.electronics-tutorials.ws/wp-content/uploads/2018/05/resistor-res54.gif\"></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertEquals(resist(\"(2, 3, 6)\"), 11.0)",
			"Test.assertEquals(resist(\"[2, 3, 6]\"), 1.0)",
			"Test.assertEquals(resist(\"[10, 20, [30, (40, 50), 60, (70, 80)], 90]\"), 4.4)",
			"Test.assertEquals(resist(\"(1, [12, 4, (1, [10, (2, 8)])])\"), 3.0)",
			"Test.assertEquals(resist(\"([10, 15], (5, 6, 5))\"), 22.0)",
			"Test.assertEquals(resist(\"[22, 6, (10, 18, [33, 15]), (10, [63, 50], 45)]\"), 4.0)",
			"Test.assertEquals(resist(\"[([(470, 1000), 330], 470), 680]\"), 354.3)",
			"Test.assertEquals(resist(\"([([(470, 680), 330], 1000), 470], 680)\"), 1022.0)",
			"Test.assertEquals(resist(\"(6, [8, (4, [8, (4, [6, (8, [6, (10, 2)])])])])\"), 10.0)"
		],
		"starterFn": [
			"1\nfunction resist(net) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/eWXL8Jz78hP5tW644"
	},
	{
		"title": "Spiral Matrix Printing",
		"description": "<p><span>Write a function that accepts an integer </span><code>N</code><span> and returns an </span><code>N * N</code><span> spiral matrix.</span></p><h3><span>Examples</span></h3><pre><code>matrix(2) ➞ [\n  [1, 2],\n  [4, 3]\n]\n\nmatrix(3) ➞ [\n  [1, 2, 3],\n  [8  ,9, 4],\n  [7, 6, 5]\n]\n\nmatrix(4) ➞ [\n  [1,   2,  3, 4],\n  [12, 13, 14, 5],\n  [11, 16, 15, 6],\n  [10,  9,  8, 7]\n]</code></pre><h3><span>Notes</span></h3><p><span>In the examples, traverse the matrix in the clock-wise direction to observe the pattern (spiral).</span></p>",
		"publishedBy": "Shreeansh",
		"publishedByUrl": "https://edabit.com/user/Fhwnime223hGiaHaA",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"conditions",
			"loops",
			"math"
		],
		"tests": [
			"Test.assertSimilar(matrix(3), [[1, 2, 3], [8, 9, 4], [7, 6, 5]])",
			"Test.assertSimilar(matrix(2), [[1, 2], [4, 3]])",
			"Test.assertSimilar(matrix(4), [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]])"
		],
		"starterFn": [
			"1\nfunction matrix(N) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3FBhunrAajkDC4XCb"
	},
	{
		"title": "Least Common Multiple",
		"description": "<p><span>Given an array of integers, create a function that will find the </span><strong><span>smallest</span></strong><span> positive integer that is evenly divisible by all the members of the array. In other words, find the least common multiple (LCM).</span></p><h3><span>Examples</span></h3><pre><code>lcm([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 2520\n\nlcm([5]) ➞ 5\n\nlcm([5, 7, 11]) ➞ 385\n\nlcm([5, 7, 11, 35, 55, 77]) ➞ 385</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(lcm([1]), 1)",
			"Test.assertEquals(lcm([5, 5, 5]), 5)",
			"Test.assertEquals(lcm([67, 34, 12, 3, 2]), 13668)",
			"Test.assertEquals(lcm([79, 18, 7, 3, 1]), 9954)",
			"Test.assertEquals(lcm([10, 20, 30, 40, 50]), 600)",
			"Test.assertEquals(lcm([2, 3, 5, 7, 11, 13, 17]), 510510)",
			"// Test.assertEquals(lcm([91, 92, 93, 94, 95]), 3476431140)"
		],
		"starterFn": [
			"1\nfunction lcm(nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gR9DKqpyvBWmyoe9X"
	},
	{
		"title": "International Standard Book Numbers",
		"description": "<p><span>The International Standard Book Number (ISBN) is a unique identifying number given to each published book. ISBNs assigned after January 2007 are 13 digits long (ISBN-13), however books with 10-digit ISBNs are still in wide use.</span></p><p><span>An ISBN-10 is verified this way:</span></p><pre><code>isbn10 = \"0330301624\"</code></pre><p><span>Line up the digits with the numbers 10 to 1:</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>0</span></td><td><span>3</span></td><td><span>3</span></td><td><span>0</span></td><td><span>3</span></td><td><span>0</span></td><td><span>1</span></td><td><span>6</span></td><td><span>2</span></td><td><span>4</span></td></tr><tr><td><span>10</span></td><td><span>9</span></td><td><span>8</span></td><td><span>7</span></td><td><span>6</span></td><td><span>5</span></td><td><span>4</span></td><td><span>3</span></td><td><span>2</span></td><td><span>1</span></td></tr></tbody></table><p><span>Multiply each digit with the number below it (the 10th digit in an ISBN can be an X. This last X simply means 10).</span></p><p><span>Sum up the products:</span></p><pre><code>0 + 27 + 24 + 0 + 18 + 0 + 4 + 18 + 4 + 4 = 99</code></pre><p><span>If the sum is divisible by </span><strong><span>11</span></strong><span>, the ISBN-10 is </span><em><span>valid</span></em><span>.</span></p><p><span>An ISBN-13 is verified this way:</span></p><pre><code>isbn13 = \"9780316066525\"</code></pre><p><span>Line up the digits with alternating 1s and 3s:</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>9</span></td><td><span>7</span></td><td><span>8</span></td><td><span>0</span></td><td><span>3</span></td><td><span>1</span></td><td><span>6</span></td><td><span>0</span></td><td><span>6</span></td><td><span>6</span></td><td><span>5</span></td><td><span>2</span></td><td><span>5</span></td></tr><tr><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td></tr></tbody></table><p><span>Multiply each digit with the number below it and get the sum:</span></p><pre><code>9 + 21 + 8 + 0 + 3 + 3 + 6 + 0 + 6 + 18 + 5 + 6 + 5 = 90</code></pre><p><span>If the sum is divisible by </span><strong><span>10</span></strong><span>, the ISBN-13 is </span><em><span>valid</span></em><span>.</span></p><p><span>Create a function that takes a string of numbers (possibly with an X at the end) and...</span></p><ol><li><span>Return </span><code>\"Invalid\"</code><span> if it is not a valid ISBN-10 or ISBN-13.</span></li><li><span>Return </span><code>\"Valid\"</code><span> if it is a valid ISBN-13.</span></li><li><span>If it is a valid ISBN-10, convert it into an ISBN-13 and return the ISBN-13 number.</span></li></ol><p><span>Convert a valid ISBN-10 to ISBN-13 by tacking 978 to the start, then changing the last digit (the check digit) so that the resulting number passes the ISBN-13 check.</span></p><h3><span>Examples</span></h3><pre><code>isbn13(\"9780316066525\") ➞ \"Valid\"\n\nisbn13(\"0330301824\") ➞ \"Invalid\"\n\nisbn13(\"0316066524\") ➞ \"9780316066525\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"validation"
		],
		"tests": [
			"Test.assertEquals(isbn13('9780316066525'),'Valid')",
			"Test.assertEquals(isbn13('9783866155237'),'Valid')",
			"Test.assertEquals(isbn13('9780345453747'),'Valid')",
			"Test.assertEquals(isbn13('031606652X'),'Invalid')",
			"Test.assertEquals(isbn13('9783876155237'),'Invalid')",
			"Test.assertEquals(isbn13('0345453747'),'Invalid')",
			"Test.assertEquals(isbn13('0316066524'),'9780316066525')",
			"Test.assertEquals(isbn13('3866155239'),'9783866155237')",
			"Test.assertEquals(isbn13('817450494X'),'9788174504944')"
		],
		"starterFn": [
			"1\nfunction isbn13(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/C5mooK3wfdhoooeLw"
	},
	{
		"title": "Road Navigation",
		"description": "<p><span>Road systems can be imagined as a graph of intersections connected by lines. The advantage of this is it makes it easier to find the shortest path between any two intersections.</span></p><h3><span>Task</span></h3><p><span>Write a function that takes as arguments:</span></p><ul><li><span>A graph of the road system</span></li><li><span>The starting intersection (node)</span></li><li><span>The ending intersection (node)</span></li></ul><p><span>And returns an object containing information about the shortest path.</span></p><h3><span>Format of the road graph</span></h3><p><span>The road graph follows the JSON graph specification linked in the </span><strong><span>Resources</span></strong><span> tab. As an example, this is what one road graph could look like (in JSON):</span></p><pre><code class=\"language-json\">{\n  \"graph\": {\n    \"directed\": false,\n    \"nodes\": [\n      { \"id\": 0 },\n      { \"id\": 1 },\n      { \"id\": 2 },\n       { \"id\": 3 }\n    ],\n    \"edges\": [\n      {\n        \"source\": 0,\n        \"target\": 1,\n        \"metadata\": {\n          \"distance\": 5\n        }\n      },\n      {\n        \"source\": 1,\n        \"target\": 3,\n        \"metadata\": {\n          \"distance\": 9\n        }\n      },\n      {\n        \"source\": 3,\n        \"target\": 2,\n        \"metadata\": {\n          \"distance\": 6\n        }\n      },\n      {\n        \"source\": 2,\n        \"target\": 4,\n        \"metadata\": {\n          \"distance\": 3\n        }\n      },\n      {\n        \"source\": 4,\n        \"target\": 3,\n        \"metadata\": {\n          \"distance\": 8\n        },\n      },\n      {\n       \"source\": 4,\n       \"target\": 0,\n       \"metadata\": {\n         \"distance\": 2\n       }\n     }\n    ]\n  }\n}</code></pre><p><span>Additionally, all edges  are </span><strong><span>two way roads</span></strong><span> (undirected), so you don't need to worry about that. Which node is in </span><code>source</code><span> and which is in </span><code>target</code><span> </span><strong><span>does not matter</span></strong><span>. Edges may contain the property </span><code>label</code><span>, which is just a street name and not necessary for you to use.</span></p><p><span>And remember, the goal is to </span><strong><span>minimize</span></strong><span> the sum of all the </span><code>metadata.distance</code><span> properties of edges used.</span></p><h3><span>Format of return value</span></h3><p><span>The return value should be an </span><strong><span>object</span></strong><span> with properties </span><code>distance</code><span> and </span><code>path</code><span>.</span></p><p><code>distance</code><span> should be the number that is the total sum of the distance metadata on each edge used.</span></p><p><code>path</code><span> should be an </span><strong><span>array</span></strong><span> of </span><strong><span>numbers</span></strong><span>, where each number is the id of a node used along the path from the start to the end.</span></p><p><span>For example, if the shortest path from node </span><code>1</code><span> to node id </span><code>2</code><span> was going from node 1 to node 3 to node 2, then the result should be </span><code>[1, 3, 2]</code><span>.  You </span><strong><span>must</span></strong><span> include the starting and ending nodes in the path.</span></p><p><span>If two paths have the same distance, it </span><strong><span>does not matter</span></strong><span> which one you return (which won't happen in the tests).</span></p><h3><span>Example</span></h3><p><span>In the example road graph, if I asked you to find the path from node id 2 to node id 0, the function call would be</span></p><pre><code class=\"language-js\">navigate(roads, 2, 0) // Where roads is the example graph structure</code></pre><p><span>And you should return</span></p><pre><code class=\"language-json\">{\n  \"distance\": 5,\n  \"path\": [ 2, 4, 0 ]\n}</code></pre><h3><span>Notes</span></h3><ul><li><span>If two paths have the same distance, it doesn't matter which one you return (which won't happen in the tests).</span></li><li><span>Make sure to include the starting and ending nodes in the path.</span></li><li><span>The order of the path array </span><strong><span>does</span></strong><span> matter.</span></li><li><span>Distance between 2 nodes is located in the </span><code>metadata.distance</code><span> property of the edge connecting them.</span></li></ul>",
		"publishedBy": "Craig McIlwrath",
		"publishedByUrl": "https://edabit.com/user/i5iQHDDRCH6PQ4uss",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures"
		],
		"tests": [
			"const graph = JSON.parse(`",
			"{",
			"  \"directed\": false,",
			"  \"nodes\": [",
			"    { \"id\": 0 },",
			"    { \"id\": 1 },",
			"    { \"id\": 2 },",
			"    { \"id\": 3 },",
			"    { \"id\": 4 },",
			"    { \"id\": 5 },",
			"    { \"id\": 6 },",
			"    { \"id\": 7 },",
			"    { \"id\": 8 },",
			"    { \"id\": 9 }",
			"  ],",
			"  \"edges\": [",
			"    {",
			"      \"source\": 1,",
			"      \"target\": 6,",
			"      \"label\": \"Oak Street\",",
			"      \"metadata\": {",
			"        \"distance\": 5",
			"      }",
			"    },",
			"    {",
			"      \"source\": 6,"
		],
		"starterFn": [
			"1\nfunction navigate(roads, startingNode, endingNode) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qQu4kxTEHapogmCgE"
	},
	{
		"title": "Hash Juggling",
		"description": "<p><span>Create a function that:</span></p><ul><li><span>Creates a sha256 hash from an array of strings.</span></li><li><span>Groups the hash, alphas first digits second.</span></li><li><span>Returns a new sha256 hash from the grouped string.</span></li></ul><h3><span>Examples</span></h3><pre><code>hashOps([\"string1\", \"string2\", \"string3\"]) ➞ \"2d3b990149219819705bfe290571a9dcf5cf2a2528a2c711a57bd430ce32497f\"\n\nhashOps([\"quick\", \"brown\", \"fox\"] ) ➞ \"7a2f7fdf31a4b14dd4f67e5ca8da3dabd7eac825eac259682e43d7e477b3d378\"\n\nhashOps([\"i\", \"am\", \"not\", \"a\", \"crook\"]) ➞ \"d94ffa741e59d434b9e9e2ed32c2efc128238ba29eaa79cd0283d17a04a2d93f\"</code></pre><h3><span>Notes</span></h3><p><span>Remember to encode your strings.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(hashOps([\"string1\", \"string2\", \"string3\"]), \"2d3b990149219819705bfe290571a9dcf5cf2a2528a2c711a57bd430ce32497f\")",
			"Test.assertEquals(hashOps([\"quick\", \"brown\", \"fox\"]), \"7a2f7fdf31a4b14dd4f67e5ca8da3dabd7eac825eac259682e43d7e477b3d378\")",
			"Test.assertEquals(hashOps([\"i\", \"am\", \"not\", \"a\", \"crook\"]), \"d94ffa741e59d434b9e9e2ed32c2efc128238ba29eaa79cd0283d17a04a2d93f\")"
		],
		"starterFn": [
			"1\nfunction hashOps(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HNLRmD2JQDqR8kxYq"
	},
	{
		"title": "Largest Island",
		"description": "<p><span>An </span><strong><span>island is a region of contiguous ones</span></strong><span>. A contiguous one is a </span><code>1</code><span> that is touched by at least one other </span><code>1</code><span>, either </span><strong><span>horizontally</span></strong><span>, </span><strong><span>vertically</span></strong><span> or </span><strong><span>diagonally</span></strong><span>. Given a piece of the map, represented by a 2-D array, create a function that returns the area of the largest island.</span></p><p><span>To illustrate, if we were given the following piece of the map, we should return </span><code>4</code><span>.</span></p><pre><code>[\n  [0, 0, 0],\n  [0, 1, 1],\n  [0, 1, 1]\n]</code></pre><p><span>Our function should yield </span><code>2</code><span> for the map below:</span></p><pre><code>[\n  [1, 0, 0],\n  [0, 0, 1],\n  [0, 0, 1]\n]</code></pre><p><span>Our function should yield </span><code>4</code><span> for the map below: : </span></p><pre><code>[\n  [1, 0, 0],\n  [0, 1, 1],\n  [0, 0, 1]\n]</code></pre><h3><span>Examples</span></h3><pre><code>largestIsland([\n  [1, 0, 0], \n  [0, 0, 0], \n  [0, 0, 1]\n])\n\n➞ 1\n\nlargestIsland([\n  [1, 1, 0], \n  [0, 1, 1], \n  [0, 0, 1]\n])\n\n➞ 5\n\nlargestIsland([\n  [1, 0, 0], \n  [1, 0, 0], \n  [1, 0, 1]\n])\n\n➞ 3</code></pre><h3><span>Notes</span></h3><ul><li><span>Maps can be any </span><code>m x n</code><span> dimension.</span></li><li><span>Maps will always have at least 1 element. </span><code>m &gt;= 1</code><span> and </span><code>n &gt;= 1</code><span>.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"data_structures",
			"games",
			"logic"
		],
		"tests": [
			"Test.assertEquals(largestIsland([",
			"  [1, 0, 0],",
			"  [0, 0, 0],",
			"  [0, 0, 1]",
			"]), 1)",
			"​",
			"Test.assertEquals(largestIsland([",
			"  [1, 1, 0],",
			"  [0, 1, 1],",
			"  [0, 0, 1]",
			"]), 5)",
			"​",
			"Test.assertEquals(largestIsland([",
			"  [1, 0, 0],",
			"  [1, 0, 0],",
			"  [1, 0, 1]",
			"]), 3)",
			"​",
			"Test.assertEquals(largestIsland([",
			"  [0, 0, 0],",
			"  [0, 1, 1],",
			"  [0, 1, 1]",
			"]), 4)",
			"​",
			"Test.assertEquals(largestIsland([",
			"  [1, 0, 0],"
		],
		"starterFn": [
			"1\nfunction largestIsland(map) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/nR3b6f3kwX8Pn9jE4"
	},
	{
		"title": "Word Search (Part 1)",
		"description": "<p><span>This challenge involves finding words in an 8x8 grid. Given a string of 64 </span><code>letters</code><span> and a string of </span><code>words</code><span> to find, convert the string to an 8x8 array, and return </span><code>true</code><span> if </span><em><span>all</span></em><span> words in the string can be found in the array. Return </span><code>false</code><span> otherwise. Words can be read in any direction (</span><em><span>horizontally</span></em><span>, </span><em><span>vertically</span></em><span> or </span><em><span>diagonally</span></em><span>).</span></p><h3><span>Example</span></h3><pre><code>letters = \"PSUWHATSLPACKAGENYOLRDVLFINGEZBMIREHQNJOATBVGYESJDUWUESTPSTICKEY\"\nwords = [\"stick\", \"most\", \"key\", \"vein\", \"yes\", \"package\", \"tube\", \"target\", \"elm\", \"spy\"]</code></pre><p><span>This would give the list below:</span></p><pre><code>[\n  [\"P\", \"S\", \"U\", \"W\", \"H\", \"A\", \"T\", \"S\"],\n  [\"L\", \"P\", \"A\", \"C\", \"K\", \"A\", \"G\", \"E\"],\n  [\"N\", \"Y\", \"O\", \"L\", \"R\", \"D\", \"V\", \"L\"],\n  [\"F\", \"I\", \"N\", \"G\", \"E\", \"Z\", \"B\", \"M\"],\n  [\"I\", \"R\", \"E\", \"H\", \"Q\", \"N\", \"J\", \"O\"],\n  [\"A\", \"T\", \"B\", \"V\", \"G\", \"Y\", \"E\", \"S\"],\n  [\"J\", \"D\", \"U\", \"W\", \"U\", \"E\", \"S\", \"T\"],\n  [\"P\", \"S\", \"T\", \"I\", \"C\", \"K\", \"E\", \"Y\"]\n]</code></pre><p><span>You would return </span><code>true</code><span> as all words can be found:</span></p><pre><code>[\n  [\"_\", \"S\", \"_\", \"_\", \"_\", \"_\", \"T\", \"_\"],\n  [\"_\", \"P\", \"A\", \"C\", \"K\", \"A\", \"G\", \"E\"],\n  [\"N\", \"Y\", \"_\", \"_\", \"R\", \"_\", \"_\", \"L\"],\n  [\"_\", \"I\", \"_\", \"G\", \"_\", \"_\", \"_\", \"M\"],\n  [\"_\", \"_\", \"E\", \"_\", \"_\", \"_\", \"_\", \"O\"],\n  [\"_\", \"T\", \"B\", \"V\", \"_\", \"Y\", \"E\", \"S\"],\n  [\"_\", \"_\", \"U\", \"_\", \"_\", \"E\", \"_\", \"T\"],\n  [\"_\", \"S\", \"T\", \"I\", \"C\", \"K\", \"_\", \"_\"]\n]</code></pre><h3><span>Notes</span></h3><p><span>Words must be contained inside the grid, without wrapping over columns/rows.</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"language_fundamentals",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordSearch('ALLESSAYIOPEBUTNRACANHHEHREFOXIAAERUIFNRPRGELTHXSHWTUOHSTCURLITE', ['thin', 'oil', 'tube', 'fox', 'thought', 'curl', 'air', 'essay', 'shout', 'era']), true)",
			"Test.assertEquals(wordSearch('DELDNUBPETENHARALOSSOUNTPCHIEFDRUROHSOTZOAWENINLCLPOKERFORBIDMTC', ['crisis', 'kit', 'pat', 'chief', 'show', 'poker', 'forbid', 'couple', 'donor', 'bundle']), false)",
			"Test.assertEquals(wordSearch('LOBMYSALORDOTRECENTENSIOXAUEDNDYLHSAMTLFVEINNLBLSECOACERTYMRBFEH', ['nuance', 'record', 'helmet', 'rally', 'parade', 'tension', 'symbol', 'separate', 'vein', 'ash']), false)",
			"Test.assertEquals(wordSearch('PEANUTIHATEFOUSTLAGBRYUGAGAOANSNCVSTXENEEISTSDERNUELHOCTTAMEPROS', ['gate', 'bee', 'bottle', 'deny', 'census', 'peanut', 'message', 'palace', 'next', 'strength']), true)",
			"Test.assertEquals(wordSearch('CAFZEROTEOALGWNNGSNEAECIIZPCDGFSTTDIEBFUFASCEINOIELNURVCRHTXGMCE', ['ice', 'cousin', 'resident', 'conceive', 'drift', 'heat', 'zero', 'flag', 'run', 'pierce']), false)",
			"Test.assertEquals(wordSearch('KARALLOCGNTEBMAIBHEOCPFMRUNEOFUMAWGKDURAVDRECAZSEMJALOTSOXVACUNU', ['mass', 'cap', 'brave', 'knee', 'collar', 'alarm', 'vacuum', 'leg', 'fur', 'lot']), true)",
			"Test.assertEquals(wordSearch('NYBNETADOORTNAOESAYHOPDLITRSEOWIRSHEWHRVPOGWOSNEFAMILIARTENESBHT', ['ant', 'age', 'familiar', 'net', 'root', 'say', 'prison', 'bishop', 'deliver', 'slow']), true)",
			"Test.assertEquals(wordSearch('HOAIKPMKWDBNSEECIEESAHMAZFDTCRBBCIRIAUEDANONPSRETEECSHOECRTTTSIF', ['debate', 'ask', 'member', 'rush', 'obscure', 'instinct', 'feed', 'fist', 'all', 'catch']), false)",
			"Test.assertEquals(wordSearch('EBEGLAEROZPOSTVLKYEEONEOCUTETEISIBUYRCHTRMYGSBCNTCERIDAPRDIKOMAN', ['buy', 'lost', 'real', 'breeze', 'direct', 'man', 'post', 'trick', 'degree', 'achieve']), true)",
			"Test.assertEquals(wordSearch('MITSFOCAERCULTURMDHYKIRTGLANCELMYPRODUCEODICSVLGLETSOOADPRYGHMNI', ['produce', 'charity', 'employ', 'art', 'gem', 'raid', 'glance', 'hole', 'moon', 'ear']), false)"
		],
		"starterFn": [
			"1\nfunction wordSearch(letters, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/x3XbfkKTjj4rr45Xi"
	},
	{
		"title": "Poker Hand Ranking",
		"description": "<p><span>In this challenge, you have to establish which kind of Poker combination is present in a deck of five cards. Every card is a string containing the card value (with the upper-case initial for face-cards) and the lower-case initial for suits, as in the examples below:</span></p><pre><code>\"Ah\" ➞ Ace of hearts\n\"Ks\" ➞ King of spades\n\"3d\" ➞ Three of diamonds\n\"Qc\" ➞ Queen of clubs</code></pre><p><span>There are 10 different combinations. Here's the list, in order of importance:</span></p><table><thead><tr><th><span>Name</span></th><th><span>Description</span></th></tr></thead><tbody><tr><td><strong><span>Royal Flush</span></strong></td><td><span>A, K, Q, J, 10, all with the same suit.</span></td></tr><tr><td><strong><span>Straight Flush</span></strong></td><td><span>Five cards in sequence, all with  the same suit.</span></td></tr><tr><td><strong><span>Four of a Kind</span></strong></td><td><span>Four cards of the same rank.</span></td></tr><tr><td><strong><span>Full House</span></strong></td><td><span>Three of a Kind with a Pair.</span></td></tr><tr><td><strong><span>Flush</span></strong></td><td><span>Any five cards of the same suit, not in sequence.</span></td></tr><tr><td><strong><span>Straight</span></strong></td><td><span>Five cards in a sequence, but not of the same suit.</span></td></tr><tr><td><strong><span>Three of a Kind</span></strong></td><td><span>Three cards of the same rank.</span></td></tr><tr><td><strong><span>Two Pair</span></strong></td><td><span>Two different Pair.</span></td></tr><tr><td><strong><span>Pair</span></strong></td><td><span>Two cards of the same rank.</span></td></tr><tr><td><strong><span>High Card</span></strong></td><td><span>No other valid combination.</span></td></tr></tbody></table><p><span>Given an array </span><code>hand</code><span> containing five strings being the cards, implement a function that returns a string with the name of the highest combination obtained, accordingly to the table above.</span></p><h3><span>Examples</span></h3><pre><code>pokerHandRanking([\"10h\", \"Jh\", \"Qh\", \"Ah\", \"Kh\"]) ➞ \"Royal Flush\"\n\npokerHandRanking([\"3h\", \"5h\", \"Qs\", \"9h\", \"Ad\"]) ➞ \"High Card\"\n\npokerHandRanking([\"10s\", \"10c\", \"8d\", \"10d\", \"10h\"]) ➞ \"Four of a Kind\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"data_structures",
			"games"
		],
		"tests": [
			"Test.assertEquals(pokerHandRanking([\"10h\", \"Jh\", \"Qh\", \"Ah\", \"Kh\"]), \"Royal Flush\")",
			"Test.assertEquals(pokerHandRanking([\"3h\", \"5h\", \"Qs\", \"9h\", \"Ad\"]), \"High Card\")",
			"Test.assertEquals(pokerHandRanking([\"10s\", \"10c\", \"8d\", \"10d\", \"10h\"]), \"Four of a Kind\")",
			"Test.assertEquals(pokerHandRanking([\"4h\", \"9s\", \"2s\", \"2d\", \"Ad\"]), \"Pair\")",
			"Test.assertEquals(pokerHandRanking([\"10s\", \"9s\", \"8s\", \"6s\", \"7s\"]), \"Straight Flush\")",
			"Test.assertEquals(pokerHandRanking([\"10c\", \"9c\", \"9s\", \"10s\", \"9h\"]), \"Full House\")",
			"Test.assertEquals(pokerHandRanking([\"8h\", \"2h\", \"8s\", \"3s\", \"3c\"]), \"Two Pair\")",
			"Test.assertEquals(pokerHandRanking([\"Jh\", \"9h\", \"7h\", \"5h\", \"2h\"]), \"Flush\")",
			"Test.assertEquals(pokerHandRanking([\"Ac\", \"Qc\", \"As\", \"Ah\", \"2d\"]), \"Three of a Kind\")",
			"Test.assertEquals(pokerHandRanking([\"Ad\", \"Kd\", \"Qd\", \"Jd\", \"9d\"]), \"Flush\")",
			"Test.assertEquals(pokerHandRanking([\"10h\", \"Jh\", \"Qs\", \"Ks\", \"Ac\"]), \"Straight\")",
			"Test.assertEquals(pokerHandRanking([\"3h\", \"8h\", \"2s\", \"3s\", \"3d\"]), \"Three of a Kind\")",
			"Test.assertEquals(pokerHandRanking([\"4h\", \"Ac\", \"4s\", \"4d\", \"4c\"]), \"Four of a Kind\")",
			"Test.assertEquals(pokerHandRanking([\"3h\", \"8h\", \"2s\", \"3s\", \"2d\"]), \"Two Pair\")",
			"Test.assertEquals(pokerHandRanking([\"8h\", \"8s\", \"As\", \"Qh\", \"Kh\"]), \"Pair\")",
			"Test.assertEquals(pokerHandRanking([\"Js\", \"Qs\", \"10s\", \"Ks\", \"As\"]), \"Royal Flush\")",
			"Test.assertEquals(pokerHandRanking([\"Ah\", \"3s\", \"4d\", \"Js\", \"Qd\"]), \"High Card\")"
		],
		"starterFn": [
			"1\nfunction pokerHandRanking(hand) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AtCTnf62Xa3hWaFtJ"
	},
	{
		"title": "Symmetrical Patterns",
		"description": "<p><span>Kathleen owns a beautiful rug store. She likes to group the rugs into 4 mutually exclusive categories. </span></p><ul><li><span>imperfect</span></li><li><span>horizontally symmetric</span></li><li><span>vertically symmetric</span></li><li><span>perfect</span></li></ul><p><span>An </span><strong><span>imperfect</span></strong><span> rug is one that is </span><strong><span>neither horizontally nor vertically symmetric</span></strong><span>. Here is an example of an </span><strong><span>imperfect</span></strong><span> rug:</span></p><pre><code>[\n  [\"a\", \"a\", \"a\", \"a\"],\n  [\"a\", \"a\", \"a\", \"a\"],\n  [\"a\", \"a\", \"b\", \"b\"]\n]</code></pre><p><span>The following is an </span><strong><span>horizontally symmetric</span></strong><span> rug. You could \"fold\" the rug across a hypothetical x-axis, and both sides would be identical. A horizontally symmetric rug is </span><strong><span>not</span></strong><span> vertically symmetric (otherwise this rug would be classified as </span><strong><span>perfect</span></strong><span> ).</span></p><pre><code>[\n  [\"c\", \"a\", \"a\", \"a\"],\n  [\"b\", \"b\", \"b\", \"b\"],\n  [\"c\", \"a\", \"a\", \"a\"]\n]</code></pre><p><span>The following is a </span><strong><span>vertically symmetric</span></strong><span> rug. You could \"fold\" the rug across a hypothetical y-axis, and both sides would be identical. A vertically symmetric is </span><strong><span>not</span></strong><span> horizontally symmetric (otherwise this rug would be classified as </span><strong><span>perfect</span></strong><span> ).</span></p><pre><code>[\n  [\"a\", \"b\", \"a\"],\n  [\"b\", \"b\", \"b\"],\n  [\"a\", \"b\", \"a\"],\n  [\"a\", \"b\", \"a\"]\n]</code></pre><p><span>Finally, a </span><strong><span>perfect</span></strong><span> rug is one that is </span><strong><span>both vertically and horizontally symmetric</span></strong><span>. That is, folded either length-wise or width-wise will yield two identical pieces. </span></p><pre><code>[\n  [\"a\", \"b\", \"b\", \"a\"],\n  [\"b\", \"b\", \"b\", \"b\"],\n  [\"a\", \"b\", \"b\", \"a\"]\n]</code></pre><p><span>Given a rug of  </span><code>m x n</code><span> dimension, determine whether it is </span><strong><span>imperfect, horizontally symmetric, vertically symmetric or perfect</span></strong><span>. Rugs are represented using a two-dimensional array.</span></p><h3><span>Examples</span></h3><pre><code>classifyRug([\n  [\"a\", \"a\"],\n  [\"a\", \"a\"]\n]) ➞ \"perfect\"\n\nclassifyRug([\n  [\"a\", \"a\", \"b\"],\n  [\"a\", \"a\", \"a\"],\n  [\"b\", \"a\", \"a\"]\n]) ➞ \"imperfect\"\n\nclassifyRug([\n  [\"b\", \"a\"],\n  [\"b\", \"a\"]\n]) ➞ \"horizontally symmetric\"\n\nclassifyRug([\n  [\"a\", \"a\"],\n  [\"b\", \"b\"]\n]) ➞ \"vertically symmetric\"</code></pre><h3><span>Notes</span></h3><p><span>You can consider a </span><code>1 x n</code><span> rug as being trivially </span><strong><span>horizontally symmetric</span></strong><span>, an </span><code>n x 1</code><span> rug as being trivially </span><strong><span>vertically symmetric</span></strong><span>, and a </span><code>1 x 1</code><span> rug as being trivially </span><strong><span>perfect</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops"
		],
		"tests": [
			"Test.assertEquals(classifyRug([",
			"  ['a', 'a', 'b'],",
			"  ['a', 'a', 'b']",
			"]), \"horizontally symmetric\");",
			"​",
			"Test.assertEquals(classifyRug([",
			"  ['a']",
			"]), \"perfect\");",
			"​",
			"Test.assertEquals(classifyRug([",
			"  ['a'],",
			"  ['b'], ",
			"  ['a']",
			"]), \"perfect\");",
			"​",
			"Test.assertEquals(classifyRug([",
			"  ['a'],",
			"  ['b'], ",
			"  ['c']",
			"]), \"vertically symmetric\");",
			"​",
			"Test.assertEquals(classifyRug([",
			"  ['a', 'b', 'a']",
			"]), \"perfect\");",
			"​",
			"Test.assertEquals(classifyRug(["
		],
		"starterFn": [
			"1\nfunction classifyRug(pattern) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/3Z26nkfwANCBguJCu"
	},
	{
		"title": "Length of Sorting Cycle",
		"description": "<p><span>Given an element in an array, write a function to determine the length of a particular element's </span><strong><span>sorting cycle</span></strong><span>. Given one element in the array, a </span><strong><span>sorting cycle</span></strong><span> is the number of swaps it takes so that the last displaced swapped item is back in its correct order.</span></p><p><span>What is the length of 9's </span><strong><span>sorting cycle</span></strong><span>?</span></p><pre><code>[1, 9, 8, 4, 7, 2, 6, 3, 5]\n[1, 5, 8, 4, 7, 2, 6, 3, 9] // 9 swaps with 5; 9 is in its correct spot.\n[1, 7, 8, 4, 5, 2, 6, 3, 9] // 5 replaces 7; 5 is in its correct spot.\n[1, 6, 8, 4, 5, 2, 7, 3, 9] // 7 replaces 6; 7 is in its correct spot.\n[1, 2, 8, 4, 5, 6, 7, 3, 9] // 6 replaces 2; 6 is in its correct spot and 2 is in it's correct spot - done!</code></pre><p><span>9's cycle is of length </span><strong><span>4</span></strong><span>. Notice how every number included in the swap (9, 5, 7, 6, and 2) are all in their rightful places. This is because each of these numbers are in the same sorting cycle.</span></p><p><span>Here is another example. Using the same array above, what is the length of 8's </span><strong><span>sorting cycle</span></strong><span>?</span></p><pre><code>[1, 9, 8, 4, 7, 2, 6, 3, 5]\n\n[1, 9, 3, 4, 7, 2, 6, 8, 5] // 8 replaces 3; 8 and 3 are both in their correct spots.</code></pre><p><span>8's cycle is of length </span><strong><span>1</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>cycleLength([1, 5, 4, 3, 2, 6], 4) ➞ 1\n\ncycleLength([1, 6, 7, 2, 4, 3, 8, 9, 5], 7) ➞ 7\n\ncycleLength([43, 81, 88, 93, 17, 32, 19, 11], 93) ➞ 5\n\ncycleLength([1, 6, 7, 2, 4, 3, 8, 9, 5], 1) ➞ 0</code></pre><h3><span>Notes</span></h3><ul><li><span>Output </span><code>0</code><span> if the element is already in its correct order (see example #4).</span></li><li><span>If this question is confusing, think about it in this way:</span><ul><li><span>Normally, swapping two numbers to place the first number in the correct order does not place the second number in its correct order. In other words, it's a single-party beneficial sort.</span></li><li><span>The sorting cycle ends when a swap leads to a mutually beneficial sort, e.g. swapping two numbers leads the first AND the second number to be put to their rightful places.</span></li></ul></li><li><span>This question is tricky — see the </span><strong><span>Comments</span></strong><span> for a hint if you're stuck.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(cycleLength([1, 5, 4, 3, 2, 6], 4), 1)",
			"Test.assertEquals(cycleLength([1, 5, 4, 3, 2, 6], 6), 0)",
			"Test.assertEquals(cycleLength([1, 5, 4, 3, 2, 6], 5), 1)",
			"Test.assertEquals(cycleLength([1, 4, 2, 3, 5], 4), 2)",
			"Test.assertEquals(cycleLength([11, 44, 22, 31, 50], 44), 2)",
			"Test.assertEquals(cycleLength([1, 6, 7, 2, 4, 3, 8, 9, 5], 7), 7)",
			"Test.assertEquals(cycleLength([43, 81, 88, 93, 17, 32, 19, 11], 93), 5)",
			"Test.assertEquals(cycleLength([1, 6, 7, 2, 4, 3, 8, 9, 5], 1), 0)",
			"Test.assertEquals(cycleLength([1, 6, 7, 2, 4, 3, 9, 8, 5], 6), 6)",
			"Test.assertEquals(cycleLength([1, 6, 7, 2, 4, 3, 9, 8, 5], 5), 6)",
			"Test.assertEquals(cycleLength([1, 6, 7, 2, 4, 3, 9, 8, 5], 2), 6)",
			"Test.assertEquals(cycleLength([1, 6, 7, 2, 4, 3, 9, 8, 5], 3), 6)",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​",
			"​"
		],
		"starterFn": [
			"1\nfunction cycleLength(arr, n) {",
			"2\n​",
			"3\n}",
			"4\n​",
			"5\n​",
			"6\n​"
		],
		"url": "https://edabit.com/challenge/JYvEhPmdPNroCuw6E"
	},
	{
		"title": "Minimum Steps to a Palindrome",
		"description": "<p><span>Given an </span><em><span>incomplete palindrome</span></em><span> as a string, return the </span><strong><span>minimum letters needed</span></strong><span> to be added on to the </span><strong><span>end</span></strong><span> to make the string a </span><strong><span>palindrome</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>minPalindromeSteps(\"race\") ➞ 3\n// Add 3 letters: \"car\" to make \"racecar\"\n\nminPalindromeSteps(\"mada\") ➞ 1\n// Add 1 letter: \"m\" to make \"madam\"\n\nminPalindromeSteps(\"mirror\") ➞ 3\n// Add 3 letters: \"rim\" to make \"mirrorrim\"</code></pre><h3><span>Notes</span></h3><p><span>Trivially, words which are already palindromes should return </span><code>0</code><span>.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"strings"
		],
		"tests": [
			"Test.assertEquals(minPalindromeSteps(\"race\"), 3)",
			"Test.assertEquals(minPalindromeSteps(\"mada\"), 1)",
			"Test.assertEquals(minPalindromeSteps(\"mirror\"), 3)",
			"Test.assertEquals(minPalindromeSteps(\"maa\"), 1)",
			"Test.assertEquals(minPalindromeSteps(\"m\"), 0)",
			"Test.assertEquals(minPalindromeSteps(\"rad\"), 2)",
			"Test.assertEquals(minPalindromeSteps(\"madam\"), 0)",
			"Test.assertEquals(minPalindromeSteps(\"radar\"), 0)",
			"Test.assertEquals(minPalindromeSteps(\"www\"), 0)",
			"Test.assertEquals(minPalindromeSteps(\"me\"), 1)",
			"Test.assertEquals(minPalindromeSteps(\"rorr\"), 2)",
			"Test.assertEquals(minPalindromeSteps(\"pole\"), 3)"
		],
		"starterFn": [
			"1\nfunction minPalindromeSteps(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zadc59oCm9Hj5xnrh"
	},
	{
		"title": "How Many Digits between 1 and N",
		"description": "<p><span>Imagine you took all the numbers between 0 and </span><code>n</code><span> and concatenated them together into a long string. How many digits are there between 0 and </span><code>n</code><span>? Write a function that can calculate this.</span></p><p><span>There are 0 digits between 0 and 1, there are 9 digits between 0 and 10 and there are 189 digits between 0 and 100.</span></p><h3><span>Examples</span></h3><pre><code>digits(1) ➞ 0\n\ndigits(10) ➞ 9\n\ndigits(100) ➞ 189\n\ndigits(2020) ➞ 6969</code></pre><h3><span>Notes</span></h3><p><span>The numbers are going to be rather big so creating that string won't be practical.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(digits(1), 0)",
			"Test.assertEquals(digits(10), 9)",
			"Test.assertEquals(digits(100), 189)",
			"Test.assertEquals(digits(2020), 6969)",
			"Test.assertEquals(digits(103496754), 820359675)",
			"Test.assertEquals(digits(3248979384), 31378682729)",
			"Test.assertEquals(digits(122398758003456), 1724870258940729)",
			"Test.assertEquals(digits(58473029386609125789n), 1158349476621071404669n)"
		],
		"starterFn": [
			"1\nfunction digits(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/HS7jFgnnAAdeqDM5M"
	},
	{
		"title": "Ulam Sequence",
		"description": "<p><span>The </span><strong><span>Ulam sequence</span></strong><span> starts with:</span></p><pre><code>ulam = [1, 2]</code></pre><p><span>The next number in the sequence is the smallest positive number that is equal to the </span><em><span>sum of 2 distinct numbers</span></em><span> (that are already in the sequence) </span><em><span>exactly one way</span></em><span>. Trivially, this is 3, as there are only 2 numbers in the starting sequence.</span></p><pre><code>ulam = [1, 2, 3]</code></pre><p><span>The next number is 4, which is the sum of 3+1. 4 is also 2+2, but this equation does not count, as the 2 addends have to be distinct.</span></p><pre><code>ulam = [1, 2, 3, 4]</code></pre><p><span>The next number </span><em><span>cannot be</span></em><span> 5, as 5 = 1 + 4, but also 5 = 2 + 3. There should only be one way to make an Ulam number from 2 distinct addends found in the sequence. The next number is 6 (2+4). There are 2 ways to make 7 (1+6 or 3+4), so the next is 8 (2+6). And so on.</span></p><pre><code>ulam = [1, 2, 3, 4, 6, 8, 11, 13, 16, 18, 26, 28, 36, 38, 47, 48, 53, …]</code></pre><p><span>Create a function that takes a number n and returns the nth number in the Ulam sequence.</span></p><h3><span>Examples</span></h3><pre><code>ulam(4) ➞ 4\n\nulam(9) ➞ 16\n\nulam(206) ➞ 1856</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"logic",
			"loops",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(ulam(4), 4)",
			"Test.assertEquals(ulam(9), 16)",
			"Test.assertEquals(ulam(38), 180)",
			"Test.assertEquals(ulam(99), 688)",
			"Test.assertEquals(ulam(206), 1856)",
			"Test.assertEquals(ulam(495), 5597)",
			"Test.assertEquals(ulam(577), 6782)"
		],
		"starterFn": [
			"1\nfunction ulam(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CPqdqJ2YidQCy44PR"
	},
	{
		"title": "Numbers to English",
		"description": "<p><span>Write a function that accepts a positive integer between </span><code>0</code><span> and </span><code>999</code><span> inclusive and returns a string representation of that integer written in English.</span></p><h3><span>Examples</span></h3><pre><code>numToEng(0) ➞ \"zero\"\n\nnumToEng(18) ➞ \"eighteen\"\n\nnumToEng(126) ➞ \"one hundred twenty six\"\n\nnumToEng(909) ➞ \"nine hundred nine\"</code></pre><h3><span>Notes</span></h3><ul><li><span>There are no hyphens used (e.g. \"thirty five\" not \"thirty-five\").</span></li><li><span>The word \"and\" is not used (e.g. \"one hundred one\" not \"one hundred and one\").</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertEquals(numToEng(0), \"zero\")",
			"Test.assertEquals(numToEng(26), \"twenty six\")",
			"Test.assertEquals(numToEng(519), \"five hundred nineteen\")",
			"Test.assertEquals(numToEng(106), \"one hundred six\")",
			"Test.assertEquals(numToEng(999), \"nine hundred ninety nine\")"
		],
		"starterFn": [
			"1\nfunction numToEng(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PFH9yEZXSbAngQm7T"
	},
	{
		"title": "Highlight Formula like Excel",
		"description": "<p><span>You need to highlight a typed excel formula for your website, to do this u need to create a function named \"hightlightFormula\".</span></p><h3><span>Explanations :</span></h3><ul><li><span>hightlightFormula have only one string as parameter with simple text inside.</span></li><li><span>hightlightFormula return a html string created from first parameter string.</span></li><li><span>A formula should begin with \"=\" or there is no colors.</span></li><li><span>Excel add colors on each cell names and same colors to same ranged</span></li><li><span>An excel cell name can look like this : A1, $A1,$A$1,A$1</span></li><li><span>An excel cell name can be ranged with this : A1:A1 or A1:A3</span></li><li><span>An excel cell row syntax is : $1:$ or 1:3</span></li><li><span>An excel cell col syntax is: $A:$B or A:B</span></li><li><span>As exemple : </span></li></ul><pre><code>\"=A1;A1:$A$1\" &lt;= A1 and A1:$A$1 should have same color.</code></pre><ul><li><span>A cell name can have one or multiple signs (+ and -) without syntax error. Exemple : </span></li></ul><pre><code>''+++---A1\" or \"-A1\" or \"+A1\" </code></pre><ul><li><span>Each new detected cells should have a new color (colors are on notes), when all color was used, we start again from first color.</span></li><li><span>Cell name separator is \";\" .</span></li><li><span>To Avoid syntax error about number, they should have only a sign with a cellname and not a separator (execpt if number is first argument of formula or if number is in a function). Exemple :</span></li></ul><pre><code>=A1+12+A12\n=12;A1+A12+1+B12\n=SUM(A1;2)+A2</code></pre><ul><li><span>Formula function syntax is \"MYFUNCTION(param1;param2)\" and should count as syntax error without parameters</span></li><li><span>Formula string syntax is \"exemple\" (quotes included), to avoid syntax error a string can placed only in function as parameter. Exemple : </span></li></ul><pre><code>SUM(1;\"5\")</code></pre><ul><li><span>If formula's cell name, sign, separator or function syntax fucked up, last cells from error keep colors but nexts don't get any color, exemple :</span></li></ul><pre><code>\"=A1;$B$;A2\" &lt;= '=&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;;$B$;A2'\n\"=A1;BBBBB;A2\" &lt;= '=&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;;BBBBB;A2'\n\"=A1+/B1;A2\" &lt;= '=&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;+/B1;A2'\n\"=A1;;B1;A2\" &lt;= '=&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;;;B1;A2'\n\"=A1;SUM();A2\" &lt;= '=&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;;SUM();A2'</code></pre><h3><span>Examples</span></h3><pre><code>highLightFormula(\"=A1+1,2+A2\") ➞ '=&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;+1,2+&lt;span style=\"color:#c0353e\"&gt;A2&lt;/span&gt;'\n\nhighLightFormula(\"=$A1+($A$2+A3+A4)+IF(A5&gt;=A6;A7)+A8\") ➞ '=&lt;span style=\"color:#326ac7\"&gt;$A1&lt;/span&gt;+(&lt;span style=\"color:#c0353e\"&gt;$A$2&lt;/span&gt;+&lt;span style=\"color:#8157b7\"&gt;A3&lt;/span&gt;+&lt;span style=\"color:#007c20\"&gt;A4&lt;/span&gt;)+IF(&lt;span style=\"color:#b03e84\"&gt;A5&lt;/span&gt;&gt;=&lt;span style=\"color:#b64900\"&gt;A6&lt;/span&gt;;&lt;span style=\"color:#267392\"&gt;A7&lt;/span&gt;)+&lt;span style=\"color:#326ac7\"&gt;A8&lt;/span&gt;'\n\nhighLightFormula(\"=$A1+A1+$A$1+/A2\") ➞ '=&lt;span style=\"color:#326ac7\"&gt;$A1&lt;/span&gt;+&lt;span style=\"color:#326ac7\"&gt;A1&lt;/span&gt;+&lt;span style=\"color:#326ac7\"&gt;$A$1&lt;/span&gt;+/A2'</code></pre><h3><span>Notes</span></h3><ul><li><span>The only allowed signs syntax is : \"+\" ; \"-\" ; \"+-\" ; \"-+\" ; \"/\" ; \"/+\" ; \"/-\" ; \"</span><em><span>+\" ; \"</span></em><span>-\" ; \"&lt;\" ; \"&gt;\" ; \"&lt;=\" ; \"&gt;=\" ; \"&lt;&gt;\"</span></li><li><span>Other allowed symbols are : \";\" ; \"(\" ; \")\" ; \":\" ; \"=\" (All others are syntax error)</span></li><li><span>Sign &lt;&gt; don't do syntax error (it seems :  not equal)</span></li><li><span>Cells colors are : '#326ac7', '#c0353e', '#8157b7', '#007c20', '#b03e84', '#b64900', '#267392' (in same order)</span></li><li><span>Colored html span should be like this: </span><code>&lt;span style=\"color:{rightColor}\"&gt;{rightCellName}&lt;/span&gt;</code></li><li><span>The final result (Error like #VALUE! etc..) of formula is not important only hightlighting is.</span></li><li><span>Parenthesis color will be ignored in this challenge.</span></li><li><span>Letters case isn't important.</span></li></ul>",
		"publishedBy": "0osh4d0wo0",
		"publishedByUrl": "https://edabit.com/user/XHngE5iScvztMpnR2",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"formatting",
			"loops",
			"regex"
		],
		"tests": [
			"var genRandomChar = function(){return String.fromCharCode(Math.floor(Math.random()*(126-32)+32))}",
			"Test.assertEquals(highLightFormula(\"=A1+1,2+A2\"), '=<span style=\"color:#326ac7\">A1</span>+1,2+<span style=\"color:#c0353e\">A2</span>');",
			"Test.assertEquals(highLightFormula(\"=$A1+($A$2+A3+A4)+IF(A5>=A6;A7)+A8\"), '=<span style=\"color:#326ac7\">$A1</span>+(<span style=\"color:#c0353e\">$A$2</span>+<span style=\"color:#8157b7\">A3</span>+<span style=\"color:#007c20\">A4</span>)+IF(<span style=\"color:#b03e84\">A5</span>>=<span style=\"color:#b64900\">A6</span>;<span style=\"color:#267392\">A7</span>)+<span style=\"color:#326ac7\">A8</span>');",
			"Test.assertEquals(highLightFormula(\"=$A1+A1+$A$1+/A2\"), '=<span style=\"color:#326ac7\">$A1</span>+<span style=\"color:#326ac7\">A1</span>+<span style=\"color:#326ac7\">$A$1</span>+/A2');",
			"Test.assertEquals(highLightFormula(\"=B1+B2*1/A1-C6\"), '=<span style=\"color:#326ac7\">B1</span>+<span style=\"color:#c0353e\">B2</span>*1/<span style=\"color:#8157b7\">A1</span>-<span style=\"color:#007c20\">C6</span>');",
			"Test.assertEquals(highLightFormula(\"=B1*-B1\"), '=<span style=\"color:#326ac7\">B1</span>*-<span style=\"color:#326ac7\">B1</span>');",
			"Test.assertEquals(highLightFormula(\"=B1/-B1\"), '=<span style=\"color:#326ac7\">B1</span>/-<span style=\"color:#326ac7\">B1</span>');",
			"Test.assertEquals(highLightFormula(\"=B1++++-----B1\"), '=<span style=\"color:#326ac7\">B1</span>++++-----<span style=\"color:#326ac7\">B1</span>');",
			"Test.assertEquals(highLightFormula(\"=B1----+++++B1\"), '=<span style=\"color:#326ac7\">B1</span>----+++++<span style=\"color:#326ac7\">B1</span>');",
			"Test.assertEquals(highLightFormula(\"=A1;A2+1-A3;5;6;AMB521\"), '=<span style=\"color:#326ac7\">A1</span>;<span style=\"color:#c0353e\">A2</span>+1-<span style=\"color:#8157b7\">A3</span>;5;6;AMB521');",
			"Test.assertEquals(highLightFormula(\"=A1;A2+1-A3+5;6;AMB521\"), '=<span style=\"color:#326ac7\">A1</span>;<span style=\"color:#c0353e\">A2</span>+1-<span style=\"color:#8157b7\">A3</span>+5;6;AMB521');",
			"Test.assertEquals(highLightFormula(\"=A1;A2+1-A3+5+6;AMB521\"), '=<span style=\"color:#326ac7\">A1</span>;<span style=\"color:#c0353e\">A2</span>+1-<span style=\"color:#8157b7\">A3</span>+5+6;<span style=\"color:#007c20\">AMB521</span>');",
			"Test.assertEquals(highLightFormula(\"=IF(A1>=B2;A7)++++++++SUM(A1;2)+A1*C2\"), '=IF(<span style=\"color:#326ac7\">A1</span>>=<span style=\"color:#c0353e\">B2</span>;<span style=\"color:#8157b7\">A7</span>)++++++++SUM(<span style=\"color:#326ac7\">A1</span>;2)+<span style=\"color:#326ac7\">A1</span>*<span style=\"color:#007c20\">C2</span>');",
			"Test.assertEquals(highLightFormula(\"A1+A2+B3+A1\"), \"A1+A2+B3+A1\");",
			"Test.assertEquals(highLightFormula(\"=SUM(--(FREQUENCY(B3:B12,B3:B12)>0))+A2\"), '=SUM(--(FREQUENCY(<span style=\"color:#326ac7\">B3:B12</span>,B3:B12)>0))+A2');",
			"Test.assertEquals(highLightFormula(\"=SUM(--(FREQUENCY(B3:B12;B3:B12)>0))+A2\"), '=SUM(--(FREQUENCY(<span style=\"color:#326ac7\">B3:B12</span>;<span style=\"color:#326ac7\">B3:B12</span>)>0))+<span style=\"color:#c0353e\">A2</span>');",
			"Test.assertEquals(highLightFormula('=MATCH(2,1/(B4:B10<>\"\")+A2'), '=MATCH(2,1/(<span style=\"color:#326ac7\">B4:B10</span><>\"\")+<span style=\"color:#c0353e\">A2</span>');",
			"Test.assertEquals(highLightFormula(\"=$1:$3;A1;$b:$A;A3\"), '=<span style=\"color:#326ac7\">$1:$3</span>;<span style=\"color:#c0353e\">A1</span>;<span style=\"color:#8157b7\">$b:$A</span>;<span style=\"color:#007c20\">A3</span>');",
			"Test.assertEquals(highLightFormula(\"=MAX(IF(MOD(COLUMN(B5:K5)-COLUMN(B5)+1;L5)=0;B5:K5))\"), '=MAX(IF(MOD(COLUMN(<span style=\"color:#326ac7\">B5:K5</span>)-COLUMN(<span style=\"color:#c0353e\">B5</span>)+1;<span style=\"color:#8157b7\">L5</span>)=0;<span style=\"color:#326ac7\">B5:K5</span>))');",
			"Test.assertEquals(highLightFormula(\"=A1(B2)+B3;;B4-B8\"), '=<span style=\"color:#326ac7\">A1</span>(<span style=\"color:#c0353e\">B2</span>)+<span style=\"color:#8157b7\">B3</span>;;B4-B8');",
			"Test.assertEquals(highLightFormula(\"=A1(B2)+B3=>B1\"), '=<span style=\"color:#326ac7\">A1</span>(<span style=\"color:#c0353e\">B2</span>)+<span style=\"color:#8157b7\">B3</span>=>B1');",
			"Test.assertEquals(highLightFormula(\"=A1(B2)+B3>=B1\"), '=<span style=\"color:#326ac7\">A1</span>(<span style=\"color:#c0353e\">B2</span>)+<span style=\"color:#8157b7\">B3</span>>=<span style=\"color:#007c20\">B1</span>');",
			"Test.assertEquals(highLightFormula(\"=1:3;A1;b:a;aa;A3\"), '=<span style=\"color:#326ac7\">1:3</span>;<span style=\"color:#c0353e\">A1</span>;<span style=\"color:#8157b7\">b:a</span>;aa;A3')",
			"Test.assertEquals(highLightFormula(\"=1:3;A1;b:a+12;A3\"), '=<span style=\"color:#326ac7\">1:3</span>;<span style=\"color:#c0353e\">A1</span>;<span style=\"color:#8157b7\">b:a</span>+12;<span style=\"color:#007c20\">A3</span>')",
			"Test.assertEquals(highLightFormula(\"=1:3;A1;b:a;12;A3\"), '=<span style=\"color:#326ac7\">1:3</span>;<span style=\"color:#c0353e\">A1</span>;<span style=\"color:#8157b7\">b:a</span>;12;A3')",
			"Test.assertEquals(highLightFormula(\"=$1:$3;A1;b:a;12;A3\"), '=<span style=\"color:#326ac7\">$1:$3</span>;<span style=\"color:#c0353e\">A1</span>;<span style=\"color:#8157b7\">b:a</span>;12;A3')"
		],
		"starterFn": [
			"1\nfunction highLightFormula(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/bmrEKndGw8SiDqAvm"
	},
	{
		"title": "Do Classes Dream of Electric Ship?",
		"description": "<p><span>In this challenge, you have to build a </span><code>Class</code><span> that will store and manipulate the data of a simplified clone of </span><strong><span>Battleship</span></strong><span>, the popular strategy game.</span></p><h3><span>The Board</span></h3><p><span>The game is played on a square board, </span><strong><span>5x5</span></strong><span> sized. The rows of the grid are identified by uppercase letters from </span><strong><span>A to E</span></strong><span> (from top to bottom), and the columns are identified by numbers from </span><strong><span>1 to 5</span></strong><span> (from left to right).</span></p><h3><span>Rules of the Game</span></h3><ul><li><span>There are two types of ship: the </span><strong><span>Patrol</span></strong><span> and the </span><strong><span>Cruiser</span></strong><span>. The Patrol occupies a single cell, the Cruiser occupies two cells, horizontally or vertically.</span></li><li><span>Three Patrols and three Cruisers will be placed randomly in the grid, </span><strong><span>without ships adjacent in rows and columns</span></strong><span> (see the notes below).</span></li><li><span>The user </span><em><span>calls</span></em><span> six different cells, trying to guess if there's a Patrol or a Cruiser in it.</span></li><li><span>Hits and misses are recorded on the board. For every hit Patrol or Cruiser, a point is gained, and if a Cruiser is sunk, two additional points are gained.</span></li></ul><h3><span>Class \"Battleship\"</span></h3><p><span>Each instance in the </span><strong><span>Tests</span></strong><span> tab will be declared with two variable parameters so the constructor has to be initialized with:</span></p><ul><li><code>scheme</code><span> is the link to an array containing </span><strong><span>9</span></strong><span> strings being the coordinates indicating where the ships are placed in the grid.</span></li><li><code>input</code><span> is the link to an array containing </span><strong><span>6</span></strong><span> strings being the guesses made by the user.</span></li></ul><h3><span>What do you have to implement?</span></h3><p><span>The </span><strong><span>Tests</span></strong><span> will verify the existence and the correctness of the data through an instance that will use the  </span><code>Battleship</code><span> Class created by you, calling its four different methods:</span></p><ul><li><p><code>board()</code><span> will return the final state of the board, based on the placement of the ship and the results of the user guesses, as a matrix of 5x5 size. To represent the graphic of the game, you will use four different characters:</span></p><ul><li><span>○  =  a blank space on the board.</span></li><li><span>●  =  a space occupied by a ship.</span></li><li><span>☼  =  a miss (wrong guess).</span></li><li><span>☀  =  a hit (a correct guess).</span></li></ul></li><li><p><code>hits()</code><span>  will return the </span><strong><span>total number of hits</span></strong><span> made by the user (correct guesses), either on Patrols or on Cruisers.</span></p></li><li><code>sunk()</code><span> will return the </span><strong><span>total number of sunk</span></strong><span> Cruisers (two adjacent guesses, in horizontal or vertical).</span></li><li><code>points()</code><span> will return the </span><strong><span>total number of points</span></strong><span> gained by the user (1 for every hit, 2 for every sunk Cruiser).</span></li></ul><h3><span>Examples</span></h3><pre><code>// scheme =\n[\"A1\", \"C1\", \"B2\",\n\"B3\", \"D2\", \"E2\",\n\"E4\", \"E5\", \"A5\"]\n\n// input = [\"A1\", \"B2\", \"C3\", \"D4\", \"E5\", \"E4\"]\n\nbattleship.board() ➞ [\n  [☀, ○, ○, ○, ●],\n  [○, ☀, ●, ○, ○],\n  [●, ○, ☼, ○, ○],\n  [○, ●, ○, ☼, ○],\n  [○, ●, ○, ☀, ☀]\n]\n\nbattleship.hits() ➞ 4\n// Total hits.\n\nbattleship.sunk() ➞ 1\n// Sunk Cruisers, not Patrols.\n\nbattleship.points() ➞ 6\n// Hits + additional points given by Sunk Cruisers.</code></pre><h3><span>Notes</span></h3><ul><li><span>If two cruisers are in the same row or the same column, there will be a blank cell between them, so that it will be possible to treat them as different ships.</span></li><li><span>The board </span><strong><span>is not</span></strong><span> given, you have to build it.</span></li><li><span>In the </span><strong><span>Examples</span></strong><span> above, the symbols of the board are not between quotation marks for readability, but they are strings. The set of characters used for the challenge is already in the </span><strong><span>Code</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"classes",
			"data_structures",
			"games"
		],
		"tests": [
			"const scheme1 = [\"A1\", \"C1\", \"B2\", \"B3\", \"D2\", \"E2\", \"E4\", \"E5\", \"A5\"],",
			"      scheme2 = [\"A1\", \"B1\", \"D1\", \"E1\", \"A3\", \"A4\", \"D3\", \"E4\", \"D5\"],",
			"      scheme3 = [\"A2\", \"A4\", \"C1\", \"C2\", \"E3\", \"C4\", \"C5\", \"D3\", \"E5\"],",
			"      input1 = [\"A1\", \"B2\", \"C3\", \"D4\", \"E5\", \"E4\"],",
			"      input2 = [\"A2\", \"B4\", \"C1\", \"D3\", \"E5\", \"A5\"],",
			"      input3 = [\"A1\", \"B1\", \"D1\", \"E1\", \"A3\", \"A4\"];",
			"​",
			"let battleship1 = new Battleship(scheme1, input1);",
			"Test.assertSimilar(battleship1.board(), [",
			"  [ '☀', '○', '○', '○', '●' ],",
			"  [ '○', '☀', '●', '○', '○' ],",
			"  [ '●', '○', '☼', '○', '○' ],",
			"  [ '○', '●', '○', '☼', '○' ],",
			"  [ '○', '●', '○', '☀', '☀' ]",
			"], \"Instructions/Example\");",
			"Test.assertEquals(battleship1.hits(), 4, \"Instructions/Example\");",
			"Test.assertEquals(battleship1.sunk(), 1, \"Instructions/Example\");",
			"Test.assertEquals(battleship1.points(), 6, \"Instructions/Example\");",
			"​",
			"let battleship2 = new Battleship(scheme1, input2);",
			"Test.assertSimilar(battleship2.board(), [",
			"  [ '●', '☼', '○', '○', '☀' ],",
			"  [ '○', '●', '●', '☼', '○' ],",
			"  [ '☀', '○', '○', '○', '○' ],",
			"  [ '○', '●', '☼', '○', '○' ],",
			"  [ '○', '●', '○', '●', '☀' ]"
		],
		"starterFn": [
			"1\n/*",
			"2\nCHARACTERS SET",
			"3\n○    ➞ blank",
			"4\n●    ➞ ship",
			"5\n☼    ➞ miss",
			"6\n☀   ➞ hit",
			"7\n*/",
			"8\n​",
			"9\nclass Battleship {",
			"10\n  constructor(scheme, input) {}",
			"11\n  board() {}",
			"12\n  hits() {}",
			"13\n  sunk() {}",
			"14\n  points() {}",
			"15\n}"
		],
		"url": "https://edabit.com/challenge/pbeqf95r3H4PRQKJr"
	},
	{
		"title": "Odd Square Patch",
		"description": "<p><span>Create a function that takes an array of numbers, and returns the size of the biggest square patch of odd numbers. See examples for a clearer picture.</span></p><h3><span>Examples</span></h3><pre><code>oddSquarePatch([\n  [1, 2, 4, 9],\n  [4, 5, 5, 7],\n  [3, 6, 1, 7]\n]) ➞ 2\n\n// The 2x2 square at the lower right\n// ([5, 7] on the 2nd row, [1, 7] on the third).\n\noddSquarePatch([[1, 2, 4, 9]]) ➞ 1\n\n// An array with a single row can only have a square patch of\n// maximum size 1x1 containing a single odd element.\n\noddSquarePatch([[2, 4, 6]]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"loops",
			"validation"
		],
		"tests": [
			"const arr1=[",
			"[1,2,4,9],",
			"[4,5,5,7],",
			"[3,6,1,7]]",
			"​",
			"const arr2=[[1,2,4,9]]",
			"​",
			"const arr3=[[2,4,8,2,2]]",
			"​",
			"const arr4=[",
			"[1,2,4,9,3,3,6,4],",
			"[4,8,5,3,7,1,1,8],",
			"[7,5,5,5,9,7,2,4],",
			"[3,9,1,7,5,9,5,2],",
			"[5,5,7,9,3,1,4,8]] ",
			"​",
			"const arr5=[",
			"[1,3,7,9],",
			"[4,5,5,8],",
			"[3,7,1,7],",
			"[5,7,9,3]]",
			"​",
			"const arr6=[",
			"[1,2,3,9],",
			"[5,6,7,8],",
			"[9,3,1,6]]"
		],
		"starterFn": [
			"1\nfunction oddSquarePatch(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zquW8jxuJh4wkGm2h"
	},
	{
		"title": "True or False Array?",
		"description": "<p><span>I admit, this challenge is somehow strange. The objective is to find out if a given array is </span><code>true</code><span> or </span><code>false</code><span>. Here are some </span><code>true</code><span> arrays:</span></p><pre><code>[12, 40, 4, 6420, 20, 24, 400, 24]\n[12.3, 46, 4, 7383, 23, 27, 529, 27.6]\n[14, 80, 6, 12840, 40, 46, 1600, 48]</code></pre><p><span>And here some </span><code>false</code><span> arrays:</span></p><pre><code>[18.1, 162, 9, 26091, 81, 90, 6561, 97]\n[14.5, 90, 18, 14445, 18, 51, 2025, 54]\n[19.2, 184, 9, 29592, 92, 101, 8464, 110.8]</code></pre><p><span>All the 8 values in the arrays are connected in some way, you have to find out what the connection is. Go and play around with the 150 test cases and you'll figure it out.</span></p><h3><span>Examples</span></h3><pre><code>tfArr([12, 40, 4, 6420, 20, 24, 400, 24]) ➞ true\n\ntfArr([18.1, 162, 9, 26091, 81, 90, 6561, 97]) ➞ false\n\ntfArr([14.7, 94, 6, 15087, 47, 53, 2209, 56.4]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>All the inputs are valid arrays with 8 numbers.</span></li><li><span>For a small hint, look at the </span><strong><span>Comments</span></strong><span> tab.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"math",
			"numbers"
		],
		"tests": [
			"[[[12,40,4,6420,20,24,400,24], true],",
			"[[14.9,98,7,15729,49,56,2401,58.8], true],",
			"[[12.6,52,5,8346,26,31,676,38], false],",
			"[[18.2,164,9,26322,82,91,6724,98.4], true],",
			"[[12.3,46,17,7383,23,27,429,27.6], false],",
			"[[19.8,196,9,31458,98,107,9604,117.6], true],",
			"[[13.5,70,5,11235,35,40,1225,42], true],",
			"[[18.4,168,9,26964,84,93,7056,100.8], true],",
			"[[18.3,166,9,26643,83,92,6889,99.6], true],",
			"[[10,0,0,0,0,0,0,0], true],",
			"[[13.4,68,5,10914,34,39,1156,40.8], true],",
			"[[14.7,94,6,15087,47,53,2209,56.4], true],",
			"[[11,18,3,2889,10,12,81,10.8], false],",
			"[[15.6,112,7,17976,56,63,3136,67.2], true],",
			"[[11.3,26,3,4173,13,16,169,15.6], true],",
			"[[18.5,170,9,27285,85,94,7225,102], true],",
			"[[15.6,112,7,17976,56,63,3136,67.2], true],",
			"[[16.4,128,8,20544,64,72,4096,76.8], true],",
			"[[18.2,164,9,26322,82,91,6724,98.4], true],",
			"[[16.7,134,8,21517,67,75,4489,88.4], false],",
			"[[18.1,162,9,26091,81,90,6561,97], false],",
			"[[11.6,32,4,5136,16,20,256,19.2], true],",
			"[[13.6,72,9,11556,36,42,1296,43.2], false],",
			"[[13,60,5,9630,30,35,900,36], true],",
			"[[19.3,186,9,29853,93,102,8649,111.6], true],",
			"[[14.5,90,18,14445,18,51,2025,54], false],"
		],
		"starterFn": [
			"1\nfunction tfArr(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7TEA6RLDFAvfmNMBk"
	},
	{
		"title": "ASCII Charts (Part 3: Column Chart)",
		"description": "<p><span>Given three arrays (daily sales of product A, daily sales of product B, daily sales targets), return a string representing a </span><em><span>stacked column chart</span></em><span> of the total sales (with targets) for each day of the week.</span></p><ul><li><span>All sales are rounded to the nearest 10 units.</span></li><li><span>Each column uses \"+\" for product A, \"*\" for product B, and an underscore (\"_\") for the target line.</span></li><li><span>The y-axis shows the total sales (the maximum combined sales will be 80).</span></li><li><span>The x-axis shows the first two letters of each day of the week (Monday to Sunday).</span></li><li><span>Product A sales are stacked on top of product B sales.</span></li><li><span>Target underscores sit on the row above their actual value (see notes).</span></li><li><span>Daily sales will never be greater than the target.</span></li><li><span>All columns have a width of two characters.</span></li><li><span>A single column of \"|\" is used to border the left and right-hand sides of the chart.</span></li><li><span>All elements of the chart (x-axis, columns, borders) are seperate by a blank column one space wide.</span></li><li><span>Use the newline character (\"\\n\") to separate each line in the chart.</span></li></ul><h3><span>Example</span></h3><pre><code>columnChart([30, 20, 10, 30, 10, 20, 10], [20, 10, 10, 10, 20, 0, 10], [50, 40, 20, 40, 30, 30, 40]))\n➞ \"60 | __                   |\\n50 | ** __    __       __ |\\n40 | **       ** __ __    |\\n30 | ++ ** __ ++ **       |\\n20 | ++ ++ ** ++ ** ++ ** |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\"\n\n\nBy day:\n\n            Mo  Tu  We  Th  Fr  Sa  Su\nproductA = [30, 20, 10, 30, 10, 20, 10]\nproductB = [20, 10, 10, 10, 20,  0, 10]\ntarget   = [50, 40, 20, 40, 30, 30, 40]\n\n\nWhen printed:\n\n60 | __                   |\n50 | ** __    __       __ |\n40 | **       ** __ __    |\n30 | ++ ** __ ++ **       |\n20 | ++ ++ ** ++ ** ++ ** |\n10 | ++ ++ ++ ++ ++ ++ ++ |\n   | Mo Tu We Th Fr Sa Su |   </code></pre><h3><span>Notes</span></h3><p><span>Be careful when placing the target underscores. Although the Monday target is 50 in the example above, the underscore is placed on the row where sales equal 60).</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"strings"
		],
		"tests": [
			"Test.assertEquals(columnChart([40, 60, 20, 40, 50, 40, 20], [40, 20, 30, 0, 0, 0, 10], [80, 80, 80, 40, 50, 70, 50]), \"90 | __ __ __             |\\n80 | ** **          __    |\\n70 | ** **                |\\n60 | ** ++       __    __ |\\n50 | ** ++ ** __ ++       |\\n40 | ++ ++ ** ++ ++ ++    |\\n30 | ++ ++ ** ++ ++ ++ ** |\\n20 | ++ ++ ++ ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([30, 20, 10, 30, 10, 20, 10], [20, 10, 10, 10, 20, 0, 10], [50, 40, 20, 40, 30, 30, 40]), \"60 | __                   |\\n50 | ** __    __       __ |\\n40 | **       ** __ __    |\\n30 | ++ ** __ ++ **       |\\n20 | ++ ++ ** ++ ** ++ ** |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([30, 30, 30, 20, 10, 10, 20], [0, 30, 50, 20, 30, 20, 10], [50, 60, 80, 60, 70, 60, 50]), \"90 |       __             |\\n80 |       **    __       |\\n70 |    __ ** __    __    |\\n60 | __ ** **          __ |\\n50 |    ** **             |\\n40 |    ** ** ** **       |\\n30 | ++ ++ ++ ** ** ** ** |\\n20 | ++ ++ ++ ++ ** ** ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([20, 30, 20, 10, 20, 40, 40], [30, 0, 0, 10, 20, 40, 0], [80, 60, 40, 40, 50, 80, 70]), \"90 | __             __    |\\n80 |                ** __ |\\n70 |    __          **    |\\n60 |             __ **    |\\n50 | **    __ __    **    |\\n40 | **          ** ++ ++ |\\n30 | ** ++       ** ++ ++ |\\n20 | ++ ++ ++ ** ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 20, 20, 40, 20, 60, 10], [10, 10, 30, 0, 0, 10, 0], [50, 40, 80, 40, 50, 80, 40]), \"90 |       __       __    |\\n80 |                      |\\n70 |                **    |\\n60 | __          __ ++    |\\n50 |    __ ** __    ++ __ |\\n40 |       ** ++    ++    |\\n30 |    ** ** ++    ++    |\\n20 | ** ++ ++ ++ ++ ++    |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([20, 20, 20, 10, 10, 40, 10], [30, 0, 30, 60, 0, 10, 30], [70, 50, 70, 70, 40, 80, 50]), \"90 |                __    |\\n80 | __    __ __          |\\n70 |          **          |\\n60 |    __    **       __ |\\n50 | **    ** ** __ **    |\\n40 | **    ** **    ++ ** |\\n30 | **    ** **    ++ ** |\\n20 | ++ ++ ++ **    ++ ** |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([30, 50, 50, 50, 10, 20, 20], [0, 20, 0, 10, 30, 20, 20], [60, 70, 60, 70, 50, 50, 60]), \"80 |    __    __          |\\n70 | __ ** __          __ |\\n60 |    **    ** __ __    |\\n50 |    ++ ++ ++          |\\n40 |    ++ ++ ++ ** ** ** |\\n30 | ++ ++ ++ ++ ** ** ** |\\n20 | ++ ++ ++ ++ ** ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([20, 40, 10, 30, 40, 10, 20], [10, 40, 40, 40, 0, 40, 10], [50, 80, 60, 80, 60, 60, 60]), \"90 |    __    __          |\\n80 |    **                |\\n70 |    ** __ ** __ __ __ |\\n60 | __ **    **          |\\n50 |    ** ** **    **    |\\n40 |    ++ ** ** ++ **    |\\n30 | ** ++ ** ++ ++ ** ** |\\n20 | ++ ++ ** ++ ++ ** ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 30, 70, 20, 10, 30, 20], [40, 10, 0, 60, 40, 20, 10], [70, 50, 80, 80, 50, 70, 50]), \"90 |       __ __          |\\n80 | __       **    __    |\\n70 |       ++ **          |\\n60 |    __ ++ ** __    __ |\\n50 | **    ++ ** ** **    |\\n40 | ** ** ++ ** ** **    |\\n30 | ** ++ ++ ** ** ++ ** |\\n20 | ** ++ ++ ++ ** ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([20, 10, 10, 30, 20, 50, 50], [60, 50, 40, 0, 10, 0, 0], [80, 60, 70, 60, 40, 70, 50]), \"90 | __                   |\\n80 | **    __       __    |\\n70 | ** __    __          |\\n60 | ** **             __ |\\n50 | ** ** **    __ ++ ++ |\\n40 | ** ** **       ++ ++ |\\n30 | ** ** ** ++ ** ++ ++ |\\n20 | ++ ** ** ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([40, 50, 10, 70, 20, 20, 40], [0, 0, 30, 0, 0, 10, 10], [50, 50, 70, 80, 40, 60, 80]), \"90 |          __       __ |\\n80 |       __             |\\n70 |          ++    __    |\\n60 | __ __    ++          |\\n50 |    ++    ++ __    ** |\\n40 | ++ ++ ** ++       ++ |\\n30 | ++ ++ ** ++    ** ++ |\\n20 | ++ ++ ** ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 40, 10, 10, 50, 30, 20], [50, 20, 50, 20, 10, 0, 0], [70, 70, 80, 50, 60, 50, 40]), \"90 |       __             |\\n80 | __ __                |\\n70 |             __       |\\n60 | ** ** ** __ ** __    |\\n50 | ** ** **    ++    __ |\\n40 | ** ++ **    ++       |\\n30 | ** ++ ** ** ++ ++    |\\n20 | ** ++ ** ** ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 10, 20, 20, 20, 10, 10], [30, 40, 0, 60, 20, 20, 20], [60, 70, 50, 80, 40, 50, 60]), \"90 |          __          |\\n80 |    __    **          |\\n70 | __       **       __ |\\n60 |       __ **    __    |\\n50 |    **    ** __       |\\n40 | ** **    ** **       |\\n30 | ** **    ** ** ** ** |\\n20 | ** ** ++ ++ ++ ** ** |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([20, 20, 10, 30, 30, 20, 20], [20, 40, 30, 40, 30, 30, 0], [40, 70, 70, 80, 70, 50, 50]), \"90 |          __          |\\n80 |    __ __    __       |\\n70 |          **          |\\n60 |    **    ** ** __ __ |\\n50 | __ **    ** ** **    |\\n40 | ** ** ** ** ** **    |\\n30 | ** ** ** ++ ++ **    |\\n20 | ++ ++ ** ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 10, 10, 30, 10, 60, 50], [0, 10, 0, 10, 10, 0, 0], [40, 50, 40, 40, 40, 80, 80]), \"90 |                __ __ |\\n80 |                      |\\n70 |                      |\\n60 |    __          ++    |\\n50 | __    __ __ __ ++ ++ |\\n40 |          **    ++ ++ |\\n30 |          ++    ++ ++ |\\n20 |    **    ++ ** ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([40, 10, 30, 20, 50, 30, 40], [20, 10, 30, 40, 30, 0, 20], [70, 50, 60, 60, 80, 40, 70]), \"90 |             __       |\\n80 | __          **    __ |\\n70 |       __ __ **       |\\n60 | ** __ ** ** **    ** |\\n50 | **    ** ** ++ __ ** |\\n40 | ++    ** ** ++    ++ |\\n30 | ++    ++ ** ++ ++ ++ |\\n20 | ++ ** ++ ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([50, 10, 10, 60, 20, 40, 40], [0, 30, 30, 0, 20, 10, 20], [70, 40, 70, 60, 60, 70, 70]), \"80 | __    __       __ __ |\\n70 |          __ __       |\\n60 |          ++       ** |\\n50 | ++ __    ++    ** ** |\\n40 | ++ ** ** ++ ** ++ ++ |\\n30 | ++ ** ** ++ ** ++ ++ |\\n20 | ++ ** ** ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([20, 20, 20, 20, 20, 30, 10], [60, 40, 10, 20, 20, 0, 10], [80, 80, 50, 40, 40, 50, 50]), \"90 | __ __                |\\n80 | **                   |\\n70 | **                   |\\n60 | ** ** __       __ __ |\\n50 | ** **    __ __       |\\n40 | ** **    ** **       |\\n30 | ** ** ** ** ** ++    |\\n20 | ++ ++ ++ ++ ++ ++ ** |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 10, 10, 10, 10, 20, 30], [30, 10, 30, 40, 30, 10, 0], [40, 30, 50, 50, 50, 30, 30]), \"60 |       __ __ __       |\\n50 | __       **          |\\n40 | ** __ ** ** ** __ __ |\\n30 | **    ** ** ** ** ++ |\\n20 | ** ** ** ** ** ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")",
			"Test.assertEquals(columnChart([10, 50, 20, 40, 70, 30, 20], [10, 0, 50, 20, 0, 40, 30], [40, 60, 80, 80, 70, 70, 60]), \"90 |       __ __          |\\n80 |             __ __    |\\n70 |    __ **    ++ ** __ |\\n60 |       ** ** ++ **    |\\n50 | __ ++ ** ** ++ ** ** |\\n40 |    ++ ** ++ ++ ** ** |\\n30 |    ++ ** ++ ++ ++ ** |\\n20 | ** ++ ++ ++ ++ ++ ++ |\\n10 | ++ ++ ++ ++ ++ ++ ++ |\\n   | Mo Tu We Th Fr Sa Su |\")"
		],
		"starterFn": [
			"1\nfunction columnChart(productA, productB, target) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iXmbCZMYPukzztpBq"
	},
	{
		"title": "8 Bit Arithmetic",
		"description": "<p><span>You will be given a simple string expression representing an addition or subtraction in 8-bit 2's complement arithmetic.  Write a function that returns the result in base 10 followed by a binary representation. If any of the values are outside the range of 8-bit 2's complement, return </span><code>\"Overflow\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>eightBit(\"3 + 12\") ➞ [15, \"11 + 1100 = 1111\"]\n\neightBit(\"3 - 12\") ➞ [-9, \"11 - 1100 = 11110111\"]\n\neightBit(-18 - 6) ➞ [-24, \"11101110 - 110 = 11101000\"]\n\neightBit(65 + 70) ➞ \"Overflow\"\n\neightBit(-127 + 127) ➞ [0, \"10000001 + 1111111 = 0\"]</code></pre><h3><span>Notes</span></h3><p><span>Numbers in 8-bit 2's complement notation can range from -128 to 127. The eighth (leftmost) bit signifies a negative number. See </span><strong><span>Resources</span></strong><span> for details.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"bit_operations",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(eightBit('0 + 0'),[0, '0 + 0 = 0'])",
			"Test.assertSimilar(eightBit('0 - 1'),[-1, '0 - 1 = 11111111'] )",
			"Test.assertSimilar(eightBit('1 + 126'),[127, '1 + 1111110 = 1111111'])",
			"Test.assertSimilar(eightBit('128 - 56'),'Overflow')",
			"Test.assertSimilar(eightBit('92 - 108'),[-16, '1011100 - 1101100 = 11110000'])",
			"Test.assertSimilar(eightBit('111 - 39'),[72, '1101111 - 100111 = 1001000'])",
			"Test.assertSimilar(eightBit('-99 - 30'),'Overflow')",
			"Test.assertSimilar(eightBit('-45 + 100'),[55, '11010011 + 1100100 = 110111'])",
			"Test.assertSimilar(eightBit('-10 - 118'),[-128, '11110110 - 1110110 = 10000000'])",
			"Test.assertSimilar(eightBit('-128 + 127'),[-1, '10000000 + 1111111 = 11111111'])"
		],
		"starterFn": [
			"1\nfunction eightBit(exp) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Lv9SkDPAvtnbqPzxp"
	},
	{
		"title": "Can You Exit the Maze?",
		"description": "<p><span>A maze can be represented by a 2D matrix, where </span><code>0</code><span>s represent </span><strong><span>walkeable</span></strong><span> areas, and </span><code>1</code><span>s represent walls. You start on the upper left corner and the exit is on the most lower right cell.</span></p><p><span>Create a function that returns </span><code>true</code><span> if you can walk from one end of the maze to the other. You can only move up, down, left and right. You </span><strong><span>cannot move diagonally</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>canExit([\n  [0, 1, 1, 1, 1, 1, 1],\n  [0, 0, 1, 1, 0, 1, 1],\n  [1, 0, 0, 0, 0, 1, 1],\n  [1, 1, 1, 1, 0, 0, 1],\n  [1, 1, 1, 1, 1, 0, 0]\n]) ➞ true\n\ncanExit([\n  [0, 1, 1, 1, 1, 1, 1],\n  [0, 0, 1, 0, 0, 1, 1],\n  [1, 0, 0, 0, 0, 1, 1],\n  [1, 1, 0, 1, 0, 0, 1],\n  [1, 1, 0, 0, 1, 1, 1]\n]) ➞ false\n\n// This maze only has dead ends!\n\ncanExit([\n  [0, 1, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0],\n  [1, 1, 1, 0, 0, 0, 0],\n  [1, 1, 1, 1, 1, 1, 0],\n  [1, 1, 1, 1, 1, 1, 1]\n]) ➞ false\n\n// Exit only one block away, but unreachable!\n\ncanExit([\n  [0, 1, 1, 1, 1, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0],\n  [1, 1, 1, 0, 0, 0, 0],\n  [1, 0, 0, 0, 1, 1, 0],\n  [1, 1, 1, 1, 1, 1, 0]\n]) ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>In a maze of size </span><code>m x n</code><span>, you enter at </span><code>[0, 0]</code><span> and exit at </span><code>[m-1, n-1]</code><span>.</span></li><li><span>There can be dead ends in a maze - one exit path is sufficient.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"games",
			"higher_order_functions"
		],
		"tests": [
			"Test.assertEquals(canExit([",
			"  [0, 1, 1, 1, 1, 1, 1], ",
			"  [0, 0, 1, 1, 0, 1, 1], ",
			"  [1, 0, 0, 0, 0, 1, 1], ",
			"  [1, 1, 1, 1, 0, 0, 1], ",
			"  [1, 1, 1, 1, 1, 0, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(canExit([",
			"  [0, 1, 1, 1, 1, 1, 1], ",
			"  [0, 0, 1, 0, 0, 1, 1], ",
			"  [1, 0, 0, 0, 0, 1, 1], ",
			"  [1, 1, 0, 1, 0, 0, 1], ",
			"  [1, 1, 0, 0, 1, 1, 1]",
			"]), false)",
			"​",
			"Test.assertEquals(canExit([",
			"  [0, 1, 1, 1, 1, 0, 0], ",
			"  [0, 0, 0, 0, 1, 0, 0], ",
			"  [1, 1, 1, 0, 0, 0, 0], ",
			"  [1, 1, 1, 1, 1, 1, 0], ",
			"  [1, 1, 1, 1, 1, 1, 1]",
			"]), false)",
			"​",
			"Test.assertEquals(canExit([",
			"  [0, 1, 1, 1, 1, 0, 0], "
		],
		"starterFn": [
			"1\nfunction canExit(arr) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ogDHjfpAcE896kN4H"
	},
	{
		"title": "Unravel all the Possibilities",
		"description": "<p><span>Write a function that takes in a string and returns all possible combinations. Return the final result in </span><strong><span>alphabetical order</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>unravel(\"a[b|c]\") ➞ [\"ab\", \"ac\"]\n\nunravel(\"a[b|c]de[f|g]\") ➞ [\"abdef\", \"acdef\", \"abdeg\", \"acdeg\"]\n\nunravel(\"a[b]c[d]\") ➞ [\"abcd\"]\n\nunravel(\"a[b|c|d|e]f\") ➞ [\"abf\", \"acf\", \"adf\", \"aef\"]\n\nunravel(\"apple [pear|grape]\") ➞ [\"apple grape\", \"apple pear\"]</code></pre><h3><span>Notes</span></h3><p><span>Think of each element in every block (e.g. </span><code>[a|b|c]</code><span>) as a </span><strong><span>fork in the road</span></strong><span>.</span></p>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"logic",
			"regex",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(unravel(\"abc\"), [\"abc\"])",
			"Test.assertSimilar(unravel(\"a[b|c]\"), [\"ab\", \"ac\"])",
			"Test.assertSimilar(unravel(\"a[b|c|d]e\"), [\"abe\", \"ace\", \"ade\"])",
			"Test.assertSimilar(unravel(\"a[b|cd]ef\"), [\"abef\", \"acdef\"])",
			"Test.assertSimilar(unravel(\"a[b|c]def[g]\"), [\"abdefg\", \"acdefg\"])",
			"​",
			"Test.assertSimilar(unravel(\"a[b|c]de[f|g]\"), [\"abdef\", \"abdeg\", \"acdef\", \"acdeg\"])",
			"Test.assertSimilar(unravel(\"a[b]c[d]\"), [\"abcd\"])",
			"Test.assertSimilar(unravel(\"[a][b][c][d]\"), [\"abcd\"])",
			"Test.assertSimilar(unravel(\"[a][b][c]d[e]\"), [\"abcde\"])",
			"Test.assertSimilar(unravel(\"[a][b][c]d[e|f|g]\"), [\"abcde\", \"abcdf\", \"abcdg\"])",
			"Test.assertSimilar(unravel(\"[a|b][c|d][e|f]\"), [\"ace\", \"acf\", \"ade\", \"adf\", \"bce\", \"bcf\", \"bde\", \"bdf\"])",
			"Test.assertSimilar(unravel(\"[a][b|c|d][e][f|g]\"), [\"abef\", \"abeg\", \"acef\", \"aceg\", \"adef\", \"adeg\"])",
			"​",
			"Test.assertSimilar(unravel(\"apple [pear|grape]\"), [\"apple grape\", \"apple pear\"])",
			"Test.assertSimilar(unravel(\"apple [pear|grape] [persimmon|mango] [cherry|apricot]\"), ",
			"[\"apple grape mango apricot\",",
			" \"apple grape mango cherry\",",
			" \"apple grape persimmon apricot\",",
			" \"apple grape persimmon cherry\",",
			" \"apple pear mango apricot\",",
			" \"apple pear mango cherry\",",
			" \"apple pear persimmon apricot\",",
			" \"apple pear persimmon cherry\"])",
			"Test.assertSimilar(unravel(\"Let's do [Friday|Wednesday|Saturday] at [4|5|7] for the [concert|movies]?\"), ",
			"[\"Let's do Friday at 4 for the concert?\","
		],
		"starterFn": [
			"1\nfunction unravel(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/enypHuKWgTmHWR2wy"
	},
	{
		"title": "Water Jug Puzzle",
		"description": "<p><span>Given a set of 3 jugs of water that have capacities of a, b, and c liters, find the minimum number of operations performed before each jug has x, y, and z liters. Only jug C will start completely filled.</span></p><p><span>An operation is any of the following: A jug is emptied, a jug is filled, or water is poured from one jug to another until one of the jugs is either empty or full.</span></p><p><span>For example, jugs A, B, and C with capacities of 3, 5, and 8, where jugs A and B start empty and C has the full 8, require 2 operations to reach the state of 0, 3, and 5 liters in the jugs.</span></p><p><span>Create a function that, given an array of jug capacities </span><code>[A, B, C]</code><span> and an goal state array </span><code>[x, y, z]</code><span>, returns the minimum number of operations needed to reach the goal state. If the inputs are invalid or there is no solution, return </span><code>\"No solution.\"</code></p><h3><span>Examples</span></h3><pre><code>waterjug([3, 5, 8], [0, 3, 5]) ➞ 2\n\nwaterjug([1, 3, 4],  [0, 2, 2]) ➞ 3\n\nwaterjug([8, 17, 20], [0, 10, 10]) ➞ 9\n\nwaterjug([4, 17, 22], [2, 5, 15]) ➞ \"No solution.\"\n\nwaterjug([3, 5, 8], [0, 0, 9]) ➞ \"No solution.\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The amount of water in a jug can never exceed the capacity of that jug.</span></li><li><span>The total liters in the goal state must be equal to the capacity of jug C.</span></li></ul>",
		"publishedBy": "Theodore",
		"publishedByUrl": "https://edabit.com/user/hi7Hvtq2mJfkXEGF2",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"conditions",
			"data_structures",
			"loops"
		],
		"tests": [
			"Test.assertEquals(waterjug([3, 5, 8], [0, 3, 5]), 2);",
			"Test.assertEquals(waterjug([1, 3, 4],  [0, 2, 2]), 3);",
			"Test.assertEquals(waterjug([8, 17, 20], [0, 10, 10]), 9);",
			"Test.assertEquals(waterjug([4, 17, 22], [2, 5, 15]), \"No solution.\");",
			"Test.assertEquals(waterjug([3, 5, 8],  [0, 5, 3]), 1);",
			"Test.assertEquals(waterjug([3, 5, 8], [0, 6, 2]), \"No solution.\");",
			"Test.assertEquals(waterjug([6, 7, 10],  [0, 0, 10]), 0);",
			"Test.assertEquals(waterjug([3, 5, 8],  [4, 0, 4]), \"No solution.\");",
			"Test.assertEquals(waterjug([3, 5, 8],  [2, 1, 4]), \"No solution.\");",
			"Test.assertEquals(waterjug([3, 5, 8],  [0, 2, 6]), 3);",
			"Test.assertEquals(waterjug([6, 7, 10],  [5, 5, 0]), \"No solution.\");",
			"Test.assertEquals(waterjug([30, 45, 50],  [25, 25, 0]), \"No solution.\");",
			"Test.assertEquals(waterjug([3, 5, 8],  [0, 4, 4]), 7);",
			"Test.assertEquals(waterjug([4, 7, 10],  [0, 5, 5]), 8);"
		],
		"starterFn": [
			"1\nfunction waterjug(start, goal) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/BMujCYCkTowit85Wq"
	},
	{
		"title": "First Recurrence Index",
		"description": "<p><span>Create a function that identifies the very first item that has </span><strong><span>recurred</span></strong><span> in the string argument passed. It returns the identified item with the index where it first </span><strong><span>appeared</span></strong><span> and the very next index where it </span><strong><span>resurfaced</span></strong><span> -- entirely as an object; or as an empty object if the passed argument is either </span><code>null</code><span>, </span><code>undefined</code><span>, </span><em><span>empty</span></em><span> string, or no recurring item exists.</span></p><h3><span>Examples</span></h3><pre><code>recurIndex(\"DXTDXTXDTXD\") ➞ {\"D\": [0, 3]}\n// D first appeared at index 0, resurfaced at index 3\n// T appeared and resurfaced at indices 3 and 6 but D completed the cycle first\n\nrecurIndex(\"YXZXYTUVXWV\") ➞ {\"X\": [1, 3]}\n\nrecurIndex(\"YZTTZMNERXE\") ➞ {\"T\": [2, 3]}\n\nrecurIndex(\"AREDCBSDERD\") ➞ {\"D\": [3, 7]}\n\nrecurIndex(\"\") ➞ {}\n\nrecurIndex(null) ➞ {}</code></pre><h3><span>Notes</span></h3><ul><li><span>There will be no exceptions to handle, all inputs are strings and string-like objects.</span></li><li><span>You can solve this challenge via a </span><strong><span>recursive</span></strong><span> approach, alternatively. </span></li><li><span>A recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/bKp8TCCy5fmZGzRec\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"objects",
			"validation"
		],
		"tests": [
			"let [strVectors, objRes] = [[ ",
			"  'DXTDXTXDTXD', 'YXZXYTUVXWV', 'YZTTZMNERXE', ",
			"  'AREDCBSDERD', '', null, 'KDXTDATTDDX', ",
			"  'AKEDCBERSDA', 'DXKETRETXDK', 'ABCKPEPGBCG', ",
			"  'KLMNONMLKOP', 'ABCDEFGHIJK', 'ABCDEFGABCD', undefined ],",
			"  [{\"D\":[0,3]}, {\"X\":[1,3]}, {\"T\":[2,3]}, ",
			"   {\"D\":[3,7]}, {}, {}, {\"D\":[1,4]}, ",
			"   {\"E\":[2,6]}, {\"E\":[3,6]}, {\"P\":[4,6]}, ",
			"   {\"N\":[3,5]}, {}, {\"A\":[0,7]}, {}]]",
			"for (let i in strVectors) {",
			"  Test.assertSimilar(recurIndex(strVectors[i]), objRes[i])",
			"}"
		],
		"starterFn": [
			"1\nfunction recurIndex(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/y8fTF8GBMAXTdkrkH"
	},
	{
		"title": "Recursion: Underscore-Hash Staircase",
		"description": "<p><span>Create a function that will build a staircase using the underscore </span><code>_</code><span> and hash </span><code>#</code><span> symbols. A positive value denotes the staircase's upward direction and downwards for a negative value.</span></p><h3><span>Examples</span></h3><pre><code>staircase(3) ➞ \"__#\\n_##\\n###\"\n__#\n_##\n###\n\nstaircase(7) ➞ \"______#\\n_____##\\n____###\\n___####\\n__#####\\n_######\\n#######\"\n______#\n_____##\n____###\n___####\n__#####\n_######\n#######\n\nstaircase(2) ➞ \"_#\\n##\"\n_#\n##\n\nstaircase(-8) ➞ \"########\\n_#######\\n__######\\n___#####\\n____####\\n_____###\\n______##\\n_______#\"\n########\n_#######\n__######\n___#####\n____####\n_____###\n______##\n_______#</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs are either positive or negative values.</span></li><li><span>The string to be returned should be adjoined with the newline character </span><code>\\n</code><span>.</span></li><li><span>You're expected to solve this challenge using a </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read on more topics about recursion (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge.</span></li><li><span>A non-recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/inecXu7CtXyvNekxu\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"recursion",
			"strings"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(staircase), true)",
			"Test.assertNotEquals(recursive(staircase), false, \"Recursion is required!\")",
			"​",
			"Test.assertEquals(staircase(3), \"__#\\n_##\\n###\")",
			"Test.assertEquals(staircase(7), \"______#\\n_____##\\n____###\\n___####\\n__#####\\n_######\\n#######\")",
			"Test.assertEquals(staircase(2), \"_#\\n##\")",
			"Test.assertEquals(staircase(-8), \"########\\n_#######\\n__######\\n___#####\\n____####\\n_____###\\n______##\\n_______#\")",
			"Test.assertEquals(staircase(4), \"___#\\n__##\\n_###\\n####\")",
			"Test.assertEquals(staircase(-12), \"############\\n_###########\\n__##########\\n___#########\\n____########\\n_____#######\\n______######\\n_______#####\\n________####\\n_________###\\n__________##\\n___________#\")",
			"Test.assertEquals(staircase(11), \"__________#\\n_________##\\n________###\\n_______####\\n______#####\\n_____######\\n____#######\\n___########\\n__#########\\n_##########\\n###########\")",
			"Test.assertEquals(staircase(-6), \"######\\n_#####\\n__####\\n___###\\n____##\\n_____#\")"
		],
		"starterFn": [
			"1\nfunction staircase(n) {",
			"2\n  // Your recursive implementation of the code here.",
			"3\n  return staircase(n)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/ZLTwdq8n5HK7DP9Eq"
	},
	{
		"title": "Matrix Determinant",
		"description": "<p><span>Create a function that returns the determinant of a given square matrix.</span></p><h3><span>Examples</span></h3><pre><code>determinant([[3]]) ➞ 3\n\ndeterminant([[1, 0], [5, 4]]) ➞ 4\n\ndeterminant([[3, 0], [2, 2]]) ➞ 6\n\ndeterminant([[4, 8, 6], [2, 4, 3], [6, 2, 1]]) ➞ 0</code></pre><h3><span>Notes</span></h3><p><span>All inputs are square integer matrices.</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertSimilar(determinant([[1]]), 1)",
			"Test.assertSimilar(determinant([[-12]]), -12)",
			"Test.assertSimilar(determinant([[1, 0], [5, 4]]), 4)",
			"Test.assertSimilar(determinant([[3, 0], [2, 2]]), 6)",
			"Test.assertSimilar(determinant([[0, 1], [4, 3]]), -4)",
			"Test.assertSimilar(determinant([[27, 3], [50, 22]]), 444)",
			"Test.assertSimilar(determinant([[4, 8, 6], [2, 4, 3], [6, 2, 1]]), 0)",
			"Test.assertSimilar(determinant([[4, 5, 4], [3, 1, 2], [3, 4, 3]]), 1)",
			"Test.assertSimilar(determinant([[8, 3, 6], [2, 1, 4], [9, 2, 3]]), 20)",
			"Test.assertSimilar(determinant([[7, 0, 6], [9, 8, 7], [6, 9, 7]]), 149)",
			"Test.assertSimilar(determinant([[3, 7, 0], [6, 0, 0], [1, 2, 8]]), -336)",
			"Test.assertSimilar(determinant([[0, 4, 1, 1], [5, 5, 4, 1], [0, 0, 2, 0], [4, 2, 5, 0]]), 12)",
			"Test.assertSimilar(determinant([[5, 5, 2, 1], [3, 3, 0, 1], [3, 2, 1, 2], [0, 3, 0, 0]]), -24)",
			"Test.assertSimilar(determinant([[4, -2, 3, -4], [5, 4, -1, -4], [0, -1, -3, 5], [0, -4, -1, 5]]), -19)",
			"Test.assertSimilar(determinant([[16, 19, 13, -7], [1, 2, 10, 2], [8, 7, -16, -4], [-14, -19, 1, -3]]), -3720)",
			"Test.assertSimilar(determinant([[3, 13, 6, 2], [-18, -20, 10, -8], [-11, -19, 6, 10], [-6, -14, -2, -13]]), -10292)",
			"Test.assertSimilar(determinant([[1, 0, 6548], [41, 16033, 0], [0, 0, 21893]]), parseInt(\"Edabit\", 30), \"Edabit!\")",
			"Test.assertSimilar(determinant([[-6, 0, 0, 6, 0, 0, -2], [5, 0, 0, 8, 0, 0, 0], [1, 2, -7, 6, 0, 0, 0], [0, 0, 0, 0, 9, 0, 2], [0, 3, -5, 0, 0, 0, 9], [0, 1, 0, 9, 0, -8, 0], [0, 0, 0, -10, 0, 0, 0]]), 79200)",
			"Test.assertSimilar(determinant([[-10, -2, -7, -3, 8, -9, 1], [8, -9, -8, 10, -5, -1, 7], [0, 5, 8, -2, -4, -10, 1], [1, -4, -10, -1, -2, 5, 8], [2, 7, 4, -7, 4, 4, -2], [5, -3, 5, -4, -7, -6, -3], [7, 7, -1, -4, 8, 4, 0]]), 3032480)"
		],
		"starterFn": [
			"1\nfunction determinant(A) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/kNfPZmSwqejD5Hpua"
	},
	{
		"title": "Recursion: Exact Factorial Bounds",
		"description": "<p><span>Create a </span><strong><span>recursive</span></strong><span> function that test if an integer is an exact upper bound of a factorial of an integer. If so, return the integer and the integer that is an exact factorial bound of. Otherwise, return </span><code>\"Not an exact bound!\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>isExact(6) ➞ [6, 3]\n\nisExact(24) ➞ [24, 4]\n\nisExact(125) ➞ \"Not an exact bound!\"\n\nisExact(720) ➞ [720, 6]\n\nisExact(1024) ➞ \"Not an exact bound!\"\n\nisExact(40320) ➞ [40320, 8]</code></pre><h3><span>Notes</span></h3><ul><li><span>It is expected from the challenge-takers to come up with a solution using the concept of </span><strong><span>recursion</span></strong><span> or the so-called </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read on more topics about recursion (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or hasn't fully understood the concept behind it before taking up this challenge or unless otherwise.</span></li><li><span>There will be no exceptions to handle, all inputs are positive integers.</span></li><li><span>A recursive approach is prone to </span><strong><span>Uncaught RangeError</span></strong><span> or exceededing the maximum call size of the stack</span></li><li><span>A non-recursive version of this challenge (of lesser difficulty and the total liberty of not using a recursive approach) can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/jFqttm7eFe8j4WMPu\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"recursion"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(isExact), true)",
			"Test.assertNotEquals(recursive(isExact), false, 'Recursion is required!')",
			"​",
			"let [numVectors, resVectors] = [[",
			"  2, 6, 24, 120, 5040, 40320, 3628800, 20922789888000, 125, 721, 1024, 41845579776000], [",
			"  [2, 2], [6, 3], [24, 4], [120, 5],",
			"  [5040, 7], [40320, 8], [3628800, 10], [20922789888000, 16],",
			"  \"Not an exact bound!\", \"Not an exact bound!\", \"Not an exact bound!\", \"Not an exact bound!\"",
			"]]",
			"​",
			"for (let i in numVectors)",
			"  i < 8 ? Test.assertSimilar(isExact(numVectors[i]), resVectors[i]) :",
			"          Test.assertEquals(isExact(numVectors[i]), resVectors[i])"
		],
		"starterFn": [
			"1\nfunction isExact(n) {",
			"2\n  // Your recursive implementation of the code.",
			"3\n  return isExact(n)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/chDJCBDzZkjSExMwm"
	},
	{
		"title": "Salt Water",
		"description": "<p><span>A tank has pure water flowing into it at 10 l/min. The contents of the tank are kept thoroughly mixed, and the contents flow out at 10 l/min. Salt is added to the tank at a rate of 0.1 kg/min. Initially, the tank contains 10 kg of salt in 100 l of water.</span></p><p><span>Devise a function whose argument is time </span><code>t</code><span>. The function returns the amount of salt (kg) left in the tank after </span><code>t</code><span> minutes rounded to 3 decimal places.</span></p><h3><span>Examples</span></h3><pre><code>salt(0) ➞ 10.0\n\nsalt(5) ➞ 6.459\n\nsalt(10) ➞ 4.311\n\nsalt(120) ➞ 1.0</code></pre><h3><span>Notes</span></h3><ul><li><span>Assume the added salt has a negligible effect on the volume of the liquid in the tank.</span></li><li><span>Keep in mind the amount of salt in the tank is changing continuously.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"loops"
		],
		"tests": [
			"Test.assertEquals(salt(0), 10.0)",
			"Test.assertEquals(salt(5), 6.459)",
			"Test.assertEquals(salt(10), 4.311)",
			"Test.assertEquals(salt(15), 3.008)",
			"Test.assertEquals(salt(30), 1.448)",
			"Test.assertEquals(salt(60), 1.022)",
			"Test.assertEquals(salt(120), 1.0)"
		],
		"starterFn": [
			"1\nfunction salt(t) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/SCqzoFHxzMM2LFQ2m"
	},
	{
		"title": "MTG Mana Cost",
		"description": "<p><span>In the trading card game </span><em><span>Magic: the Gathering</span></em><span>, players must use a resource called </span><strong><span>mana</span></strong><span> to cast spells. There are six types of mana in </span><em><span>Magic</span></em><span>: white (W), blue (U), black (B), red (R), green (G), and colorless (C). The </span><strong><span>mana cost</span></strong><span> of a spell indicates the amount and type(s) of mana that must be paid to cast the spell.</span></p><ul><li><span>If the mana cost contains a number (such as \"3\"), that number must be paid with that total amount of mana in </span><em><span>any combination</span></em><span> of types.</span></li><li><span>If the mana cost contains a mana type (\"W\", \"U\", \"B\", \"R\", \"G\", or \"C\"), that symbol must be paid with one mana of the corresponding type.</span></li></ul><p><span>Each individual mana in the player's mana pool can only pay one part of the cost. For example, the mana cost \"3WW\" requires two white (W) mana and 3 </span><em><span>additional</span></em><span> mana in any combination of types. The two white mana used to pay the \"WW\" do not also contribute to the \"3\".</span></p><p><span>In this challenge, the player's mana pool will be represented as a string, with each character (W, U, B, R, G, or C) representing a single mana. The mana cost to be paid will also be represented as a string, which may contain a single one or two digit number and/or any number of W, U, B, R, G, and C characters.</span></p><p><span>Write a function that takes in the two strings, the player's mana and a mana cost, and determines whether or not the player's mana can pay the cost.</span></p><h3><span>Examples</span></h3><pre><code>canPayCost(\"WWGGR\", \"2WWG\") ➞ True\n\ncanPayCost(\"WWGG\", \"2WWG\") ➞ False    // Not enough total mana\n\ncanPayCost(\"WGGGR\", \"2WWG\") ➞ False   // Not enough W mana\n\ncanPayCost(\"WUUUBC\", \"UUB\") ➞ True    // Having extra mana is okay</code></pre><h3><span>Notes</span></h3><ul><li><span>All letters will be uppercase.</span></li><li><span>If there is a number in the mana cost, it will always come at the beginning.</span></li><li><span>An empty mana pool will be represented by an empty string.</span></li><li><span>The function should correctly handle double-digit numbers in the mana cost, as well as a mana cost of \"0\".</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"games",
			"strings"
		],
		"tests": [
			"Test.assertEquals(canPayCost(\"BB\", \"1B\"), true)",
			"Test.assertEquals(canPayCost(\"BR\", \"1B\"), true)",
			"Test.assertEquals(canPayCost(\"UBC\", \"1B\"), true)",
			"Test.assertEquals(canPayCost(\"UR\", \"1B\"), false)",
			"Test.assertEquals(canPayCost(\"B\", \"1B\"), false)",
			"Test.assertEquals(canPayCost(\"U\", \"U\"), true)",
			"Test.assertEquals(canPayCost(\"WU\", \"U\"), true)",
			"Test.assertEquals(canPayCost(\"C\", \"U\"), false)",
			"Test.assertEquals(canPayCost(\"RGG\", \"RGG\"), true)",
			"Test.assertEquals(canPayCost(\"URGG\", \"RGG\"), true)",
			"Test.assertEquals(canPayCost(\"RRG\", \"RGG\"), false)",
			"Test.assertEquals(canPayCost(\"WWGG\", \"RGG\"), false)",
			"Test.assertEquals(canPayCost(\"WWRCC\", \"2WWC\"), true)",
			"Test.assertEquals(canPayCost(\"WWURGC\", \"2WWC\"), true)",
			"Test.assertEquals(canPayCost(\"WWCC\", \"2WWC\"), false)",
			"Test.assertEquals(canPayCost(\"WRCCC\", \"2WWC\"), false)",
			"Test.assertEquals(canPayCost(\"WWRRR\", \"2WWC\"), false)",
			"Test.assertEquals(canPayCost(\"WUBRGC\", \"WUBRG\"), true)",
			"Test.assertEquals(canPayCost(\"BBBB\", \"4\"), true)",
			"Test.assertEquals(canPayCost(\"BBCC\", \"3\"), true)",
			"Test.assertEquals(canPayCost(\"BBCC\", \"5\"), false)",
			"Test.assertEquals(canPayCost(\"WWWWUUUUBBBBRR\", \"12RR\"), true)",
			"Test.assertEquals(canPayCost(\"WWWWUUUUBBBBRR\", \"11RR\"), true)",
			"Test.assertEquals(canPayCost(\"WWWWUUUUBBBBRR\", \"13RR\"), false)",
			"Test.assertEquals(canPayCost(\"WWWWUUUUBBBBRGG\", \"13RR\"), false)",
			"Test.assertEquals(canPayCost(\"WWWWUUUUBBBBRRRRGGGG\", \"15\"), true)"
		],
		"starterFn": [
			"1\nfunction canPayCost(mana, cost) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/iEapjskJ2jc75cazv"
	},
	{
		"title": "Truncatable Primes",
		"description": "<p><span>A left-truncatable prime is a prime number that contains no 0 digits and, when the first digit is successively removed, the result is always prime.</span></p><p><span>A right-truncatable prime is a prime number that contains no 0 digits and, when the last digit is successively removed, the result is always prime.</span></p><p><span>Create a function that takes an integer as an argument and:</span></p><ul><li><span>If the integer is only a left-truncatable prime, return </span><code>\"left\"</code><span>.</span></li><li><span>If the integer is only a right-truncatable prime, return </span><code>\"right\"</code><span>.</span></li><li><span>If the integer is both, return </span><code>\"both\"</code><span>.</span></li><li><span>Otherwise, return </span><code>false</code><span>.</span></li></ul><h3><span>Examples</span></h3><pre><code>truncatable(9137) ➞ \"left\"\n// Because 9137, 137, 37 and 7 are all prime.\n\ntruncatable(5939) ➞ \"right\"\n// Because 5939, 593, 59 and 5 are all prime.\n\ntruncatable(317) ➞ \"both\"\n// Because 317, 17 and 7 are all prime and 317, 31 and 3 are all prime.\n\ntruncatable(5) ➞ \"both\"\n// The trivial case of single-digit primes is treated as truncatable from both directions.\n\ntruncatable(139) ➞ false\n// 1 and 9 are non-prime, so 139 cannot be truncatable from either direction.\n\ntruncatable(103) ➞ false\n// Because it contains a 0 digit (even though 103 and 3 are primes).</code></pre><h3><span>Notes</span></h3><p><span>The input integers will not exceed 10^6.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(truncatable(47), \"left\")",
			"Test.assertEquals(truncatable(347), \"left\")",
			"Test.assertEquals(truncatable(62383), \"left\")",
			"Test.assertEquals(truncatable(79), \"right\")",
			"Test.assertEquals(truncatable(7331), \"right\")",
			"Test.assertEquals(truncatable(233993), \"right\")",
			"Test.assertEquals(truncatable(3797), \"both\")",
			"Test.assertEquals(truncatable(739397), \"both\")",
			"Test.assertEquals(truncatable(5), \"both\", \"single-digit number treated as both\")",
			"Test.assertEquals(truncatable(349), false)",
			"Test.assertEquals(truncatable(2317), false, \"the starting number is composite\")",
			"Test.assertEquals(truncatable(131), false, \"1 is not a prime\")",
			"Test.assertEquals(truncatable(6043), false, \"cannot contain a 0 digit\")"
		],
		"starterFn": [
			"1\nfunction truncatable(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ATybdGTuRuHAjwnyf"
	},
	{
		"title": "Sentence Primeness",
		"description": "<p><span>A word value can be established summing up all the numeric values of every single character (excluding spaces and punctuation): a value from 1 (\"a\") to 26 (\"z\") is given to letters, while numbers have their literal values, from 0 to 9. The sentence value is the sum of the values of the words.</span></p><pre><code>sentence = \"ABC ! abc ... @ 123\"\n// Remove spaces, punctuation and any symbol.\n\nsentence = [\"ABC\", \"abc\", \"123\"]\n\nwords values = \"ABC\" = 1+2+3 = 6 | \"abc\" = 1+2+3 = 6 | \"123\" = 1+2+3 = 6\n\nsentence value = 6 + 6 + 6 = 18</code></pre><p><span>Given a string </span><code>sentence</code><span> implement a function that returns:</span></p><ul><li><p><code>Prime Sentence</code><span> if the original sentence value is a prime.</span></p></li><li><p><code>Almost Prime Sentence (xxx)</code><span> if the sentence value is not a prime but, after a single removal of any of the words the new sentence value is a prime (see example #2 for a clearer explanation), with </span><em><span>xxx</span></em><span> being the word removed. If more than a word can be removed to obtain a prime value, return the first encountered in the original sentence.</span></p></li><li><p><code>Composite Sentence</code><span> if the sentence value is not a prime and more than one removal is necessary to make the new sentence value (or if none is possible).</span></p></li></ul><p><span>Letters values are case insensitive (\"aZ\" = \"Az\" = 1 + 26 = 27), while numbers are treated as words (\"123\" = 1+2+3 = 6).</span></p><h3><span>Examples</span></h3><pre><code>sentencePrimeness(\"Help me!\") ➞ \"Prime Sentence\"\n// \"Help\" + \"me\" = 41 + 18 = 59 (prime)\n\nsentencePrimeness(\"42 is THE aNsWeR...\") ➞ \"Almost Prime Sentence (aNsWeR)\n// \"42\" + \"is\" + \"THE\" + \"aNsWeR\" = 6 + 28 + 33 + 80 = 147 (not prime)\n// Without \"42\" new value is 141\n// Without \"is\" new value is 119\n// Without \"THE\" new value is 114\n// Without \"aNsWeR\" new value is 67 (prime!)\n// If the word \"aNsWeR\" is removed from sentence the new value is a prime.\n\nsentencePrimeness(\"Did you smoke?\") ➞ \"Composite Sentence\"\n// \"Did\" + \"you\" + \"smoke\" = 17 + 61 + 63 = 141 (not prime)\n// Without \"Did\" new value is 124\n// Without \"you\" new value is 80\n// Without \"smoke\" new value is 78\n// No single removals make the new sentence value a prime.</code></pre><h3><span>Notes</span></h3><ul><li><span>Only letters and digits can be part of the sentence.</span></li><li><span>If it's an Almost Prime Sentence, the removed word between the brackets must maintain the same capitalization format found in the original sentence (see example #2).</span></li><li><span>The sentence is Almost Prime if just a single word can be removed to make value a prime, no multiple removals allowed.</span></li><li><span>Remember the rule for numbers: \"10\" is a word, so its value is 1+0 and not 10.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"scope",
			"strings",
			"validation"
		],
		"tests": [
			"Test.assertEquals(sentencePrimeness(\"Help me!\"), \"Prime Sentence\", \"Example #1\")",
			"Test.assertEquals(sentencePrimeness(\"42 is THE aNsWeR...\"), \"Almost Prime Sentence (aNsWeR)\", \"Example #2\")",
			"Test.assertEquals(sentencePrimeness(\"Did you Smoke?\"), \"Composite Sentence\", \"Example #3\")",
			"Test.assertEquals(sentencePrimeness(\"She SellS SeaShellS by the SeaShore\"), \"Prime Sentence\")",
			"Test.assertEquals(sentencePrimeness(\"Lorem. Ipsum. Dolor. Sit. Amet.\"), \"Almost Prime Sentence (Lorem)\")",
			"Test.assertEquals(sentencePrimeness(\"three fASt hUNgry aniMALs -aNd- 3 slow faTTy kiDS\"), \"Almost Prime Sentence (aniMALs)\")",
			"Test.assertEquals(sentencePrimeness(\"This is a 'Prime' Sentence\"), \"Composite Sentence\")",
			"Test.assertEquals(sentencePrimeness(\"this is a composite sentence\"), \"Almost Prime Sentence (this)\")",
			"Test.assertEquals(sentencePrimeness(\"Primes, PRIMES EVERYWHERE!\"), \"Composite Sentence\")",
			"Test.assertEquals(sentencePrimeness(\"10 test cases are enough, this is the last one!\"), \"Prime Sentence\")"
		],
		"starterFn": [
			"1\nfunction sentencePrimeness(sentence) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9cE48rX6wTZqBWeia"
	},
	{
		"title": "Permutations of an Expression",
		"description": "<p><span>In this challenge, you have to permutate an expression that includes three variable values </span><code>a</code><span>, </span><code>b</code><span> and </span><code>c</code><span>. You are given a set of three unique numbers to substitute for letters so there are six possible different expression variations, and you have to find which one returns the greater result.</span></p><pre><code>expr = \"(a - b) * c\" | nums = [1, 2, 3]\n\nPermutation #1 ➞ (1 - 2) * 3 = -3\nPermutation #2 ➞ (1 - 3) * 2 = -4\nPermutation #3 ➞ (2 - 1) * 3 = 3\nPermutation #4 ➞ (2 - 3) * 1 = -1\nPermutation #5 ➞ (3 - 1) * 2 = 4\nPermutation #6 ➞ (3 - 2) * 1 = 1\n\n// Permutation #5 returns the greater result.</code></pre><p><span>Given an expression string </span><code>expr</code><span> and an array of three numbers </span><code>nums</code><span>, the function must return a string with the complete notation of the expression that returns the greater result (adding the equal sign after the expression and the result after the equal sign). For the example above, the result will be:</span></p><pre><code>greaterPermutation(\"(a - b) * c\", [1, 2, 3]) ➞ \"(3 - 1) * 2 = 4\"</code></pre><p><span>If an expression returns a float number as result, round it to the nearest hundredth.</span></p><h3><span>Examples</span></h3><pre><code>greaterPermutation(\"(a - b) * c\", [1, 2, 3]) ➞ \"(3 - 1) * 2 = 4\"\n\ngreaterPermutation(\"a ** b - c\", [2, 3, 1]) ➞ \"3 ** 2 - 1 = 8\"\n\ngreaterPermutation(\"a % b + (c * 2)\", [3, 1, 2]) ➞ \"1 % 2 + (3 * 2) = 7\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Every given expression is designed to have just one permutation that returns a maximum result, don't worry about multiple matches.</span></li><li><span>Expressions can contain known values besides the three variables (see example #3).</span></li><li><span>Remember to round to the nearest hundredth if the result is a float number.</span></li></ul>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"higher_order_functions",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertEquals(greaterPermutation(\"(a - b) * c\", [1, 2, 3]), \"(3 - 1) * 2 = 4\", \"Example #1\")",
			"Test.assertEquals(greaterPermutation(\"a ** b - c\", [2, 3, 1]), \"3 ** 2 - 1 = 8\", \"Example #2\")",
			"Test.assertEquals(greaterPermutation(\"a % b + (c * 2)\", [3, 1, 2]), \"1 % 2 + (3 * 2) = 7\", \"Example #3\")",
			"Test.assertEquals(greaterPermutation(\"(a / b) ** c\", [6, 2, 4]), \"(6 / 2) ** 4 = 81\")",
			"Test.assertEquals(greaterPermutation(\"a ** b % c\", [3, 7, 5]), \"5 ** 3 % 7 = 6\")",
			"Test.assertEquals(greaterPermutation(\"a % b - (c - 4)\", [9, 6, 8]), \"8 % 9 - (6 - 4) = 6\")",
			"Test.assertEquals(greaterPermutation(\"(a ** 4) / (b ** 3) + (c * 10)\", [60, 12, 3]), \"(60 ** 4) / (3 ** 3) + (12 * 10) = 480120\")",
			"Test.assertEquals(greaterPermutation(\"(a / 10) + (b ** 2) - (c / 3)\", [7, 67, 19]), \"(19 / 10) + (67 ** 2) - (7 / 3) = 4488.57\")",
			"Test.assertEquals(greaterPermutation(\"((a * 2) % b) + 4 - (c + 6)\", [11, 20, 5]), \"((20 * 2) % 11) + 4 - (5 + 6) = 0\")"
		],
		"starterFn": [
			"1\nfunction greaterPermutation(expr, nums) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/5Fw82qJT4MgASBfnB"
	},
	{
		"title": "Simplified Proper Fractions",
		"description": "<p><span>Create a function that takes a number </span><code>maxDen</code><span> and returns the total number of fully simplified proper fractions that exist with denominator less than or equal to </span><code>maxDen</code><span>.</span></p><p><span>You only need to return the number of fractions; </span><strong><span>NOT the fractions themselves</span></strong><span>. In the examples below, I list the fractions simply for your reference.</span></p><h3><span>Examples</span></h3><pre><code>simPropFrac(10) ➞ 31\n// 1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 2/5, 3/5, 4/5, 1/6, 5/6, 1/7, 2/7, 3/7, 4/7, 5/7, 6/7, 1/8, 3/8, 5/8, 7/8, 1/9, 2/9, 4/9, 5/9, 7/9, 8/9, 1/10, 3/10, 7/10, 9/10\n\nsimPropFrac(7) ➞ 17\n// 1/2, 1/3, 2/3, 1/4, 3/4, 1/5, 2/5, 3/5, 4/5, 1/6, 5/6, 1/7, 2/7, 3/7, 4/7, 5/7, 6/7</code></pre><h3><span>Notes</span></h3><p><span>A fully simplified proper fraction is a fraction where both the numerator and denominator share no common factors besides 1 and the fraction is less than 1.</span></p>",
		"publishedBy": "Steven Bonfadini",
		"publishedByUrl": "https://edabit.com/user/3QmTLSKrXrH4B5DMF",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"loops",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(simPropFrac(10), 31)",
			"Test.assertEquals(simPropFrac(2), 1)",
			"Test.assertEquals(simPropFrac(30), 277)",
			"Test.assertEquals(simPropFrac(100), 3043)",
			"Test.assertEquals(simPropFrac(56), 963)"
		],
		"starterFn": [
			"1\nfunction simPropFrac(maxDen) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ZbTx5ArPfmS6zghvx"
	},
	{
		"title": "Chess Pieces",
		"description": "<p><span>Create a function that takes the name of a chess piece, its position and a target position. The function should return </span><code>true</code><span> if the piece can move to the target and </span><code>false</code><span> if it can't.</span></p><p><span>The possible inputs are \"Pawn\", \"Knight\", \"Bishop\", \"Rook\", \"Queen\" and \"King\".</span></p><h3><span>Examples</span></h3><pre><code>canMove(\"Rook\", \"A8\", \"H8\") ➞ true\n\ncanMove(\"Bishop\", \"A7\", \"G1\") ➞ true\n\ncanMove(\"Queen\", \"C4\", \"D6\") ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>Do not include pawn capture moves and en passant.</span></li><li><span>Do not include castling.</span></li><li><span>Remember to include pawns' two-square move on the second rank!</span></li><li><span>Look for patterns in the movement of the pieces.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"games",
			"logic",
			"validation"
		],
		"tests": [
			"Test.assertEquals(canMove(\"Pawn\", \"A5\", \"A6\"), true)",
			"Test.assertEquals(canMove(\"Pawn\", \"G2\", \"G4\"), true)",
			"Test.assertEquals(canMove(\"Pawn\", \"C6\", \"D7\"), false)",
			"Test.assertEquals(canMove(\"Knight\", \"F5\", \"E3\"), true)",
			"Test.assertEquals(canMove(\"Knight\", \"F6\", \"E5\"), false)",
			"Test.assertEquals(canMove(\"Bishop\", \"B4\", \"E7\"), true)",
			"Test.assertEquals(canMove(\"Bishop\", \"B6\", \"F5\"), false)",
			"Test.assertEquals(canMove(\"Rook\", \"A8\", \"H8\"), true)",
			"Test.assertEquals(canMove(\"Rook\", \"A8\", \"H7\"), false)",
			"Test.assertEquals(canMove(\"Queen\", \"A8\", \"H1\"), true)",
			"Test.assertEquals(canMove(\"Queen\", \"A6\", \"H4\"), false)",
			"Test.assertEquals(canMove(\"King\", \"C4\", \"D5\"), true)",
			"Test.assertEquals(canMove(\"King\", \"B7\", \"B5\"), false)"
		],
		"starterFn": [
			"1\nfunction canMove(piece, current, target) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/XyLRwKkiZnaAKAbXM"
	},
	{
		"title": "Columnar Cipher",
		"description": "<p><span>The columnar cipher is a transposition cipher that works like this.</span></p><p><span>Start with a secret message:</span></p><pre><code>msg = \"Meet me by the lake at midnight. Bring shovel.\"</code></pre><p><span>Transform uppercase letters into lowercase and remove punctuation and spaces:</span></p><pre><code>msg = \"meetmebythelakeatmidnightbringshovel\"</code></pre><p><span>Then, pick a keyword made out of distinct letters:</span></p><pre><code>keyword = \"python\"</code></pre><p><span>Break up the message into chunks of the same length as the keyword, and write them in rows under the keyword. Then, number the columns based on the alphabetised order of the letters in the keyword:</span></p><table><thead><tr><th style=\"text-align: center;\"><span>p</span></th><th style=\"text-align: center;\"><span>y</span></th><th style=\"text-align: center;\"><span>t</span></th><th style=\"text-align: center;\"><span>h</span></th><th style=\"text-align: center;\"><span>o</span></th><th style=\"text-align: center;\"><span>n</span></th></tr></thead><tbody><tr><td style=\"text-align: center;\"><span>m</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>m</span></td><td style=\"text-align: center;\"><span>e</span></td></tr><tr><td style=\"text-align: center;\"><span>b</span></td><td style=\"text-align: center;\"><span>y</span></td><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>h</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>l</span></td></tr><tr><td style=\"text-align: center;\"><span>a</span></td><td style=\"text-align: center;\"><span>k</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>a</span></td><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>m</span></td></tr><tr><td style=\"text-align: center;\"><span>i</span></td><td style=\"text-align: center;\"><span>d</span></td><td style=\"text-align: center;\"><span>n</span></td><td style=\"text-align: center;\"><span>i</span></td><td style=\"text-align: center;\"><span>g</span></td><td style=\"text-align: center;\"><span>h</span></td></tr><tr><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>b</span></td><td style=\"text-align: center;\"><span>r</span></td><td style=\"text-align: center;\"><span>i</span></td><td style=\"text-align: center;\"><span>n</span></td><td style=\"text-align: center;\"><span>g</span></td></tr><tr><td style=\"text-align: center;\"><span>s</span></td><td style=\"text-align: center;\"><span>h</span></td><td style=\"text-align: center;\"><span>o</span></td><td style=\"text-align: center;\"><span>v</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>l</span></td></tr><tr><td style=\"text-align: center;\"><span>4</span></td><td style=\"text-align: center;\"><span>6</span></td><td style=\"text-align: center;\"><span>5</span></td><td style=\"text-align: center;\"><span>1</span></td><td style=\"text-align: center;\"><span>3</span></td><td style=\"text-align: center;\"><span>2</span></td></tr></tbody></table><p><span>Read off the enciphered message (ciphertext) from the columns, in the order specified by the numbers:</span></p><pre><code>ciphertext = \"thaiivelmhglmetgnembaitsetenroeykdbh\"</code></pre><p><span>If the message length is not a multiple of the keyword length, fill in each blank space with \"x\". For example:</span></p><pre><code>msg = \"Meet me at midnight.\"\n\nkeyword = \"python\"</code></pre><table><thead><tr><th style=\"text-align: center;\"><span>p</span></th><th style=\"text-align: center;\"><span>y</span></th><th style=\"text-align: center;\"><span>t</span></th><th style=\"text-align: center;\"><span>h</span></th><th style=\"text-align: center;\"><span>o</span></th><th style=\"text-align: center;\"><span>n</span></th></tr></thead><tbody><tr><td style=\"text-align: center;\"><span>m</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>e</span></td><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>m</span></td><td style=\"text-align: center;\"><span>e</span></td></tr><tr><td style=\"text-align: center;\"><span>a</span></td><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>m</span></td><td style=\"text-align: center;\"><span>i</span></td><td style=\"text-align: center;\"><span>d</span></td><td style=\"text-align: center;\"><span>n</span></td></tr><tr><td style=\"text-align: center;\"><span>i</span></td><td style=\"text-align: center;\"><span>g</span></td><td style=\"text-align: center;\"><span>h</span></td><td style=\"text-align: center;\"><span>t</span></td><td style=\"text-align: center;\"><span>x</span></td><td style=\"text-align: center;\"><span>x</span></td></tr></tbody></table><p><span>Create a function that takes a string and a keyword. Return the ciphertext if the string is in plaintext (i.e. broken up into normal English words and punctuated), or the deciphered message if the string is in ciphertext. The resulting deciphered message will not have spaces.</span></p><h3><span>Examples</span></h3><pre><code>cipher(\"Meet me by the lake at midnight. Bring shovel.\", \"python\")\n➞ \"thaiivelmhglmetgnembaitsetenroeykdbh\"\n\ncipher(\"meeanbsleyamgioxebltirhxttkihnvxmhedtgex\", \"monty\")\n➞ \"meetmebythelakeatmidnightbringshovelxxxx\"\n\ncipher(\"Mission Delta Kilo Sierra has been compromised. Kill Steve. Evacuate\", \"cake\")\n➞ \"ioliiabcrsiteuxmieksrsnpiksecesdaoraemmdlvatxsntleheooelevax\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(cipher('Meet me by the lake at midnight. Bring shovel.','python'),'thaiivelmhglmetgnembaitsetenroeykdbh')",
			"Test.assertEquals(cipher('meeanbsleyamgioxebltirhxttkihnvxmhedtgex','monty'),'meetmebythelakeatmidnightbringshovelxxxx')",
			"Test.assertEquals(cipher('The body is in the cellar wall.','edabit'),'escwbieahiertyhaonlldtll')",
			"Test.assertEquals(cipher('Flight 1386 Gate 447 Contact November Bravo','lockjaw'),'ttnvrxi67texhaoobxggcnrxf34amvl84cbo1eteax')",
			"Test.assertEquals(cipher('ecvnbpxgpslizxeerionzryisrixmnoowga','quirk'),'emergencyprovisionslowbringpizzaxxx')",
			"Test.assertEquals(cipher('Mission Delta Kilo Sierra has been compromised. Kill Steve. Evacuate','cake'),'ioliiabcrsiteuxmieksrsnpiksecesdaoraemmdlvatxsntleheooelevax')",
			"Test.assertEquals(cipher('haiowaseatuipvpoetteecrbsdhrrneearpxesspaywln','hazel'),'thetreasureisincopperwavebaypasswordelephantx')"
		],
		"starterFn": [
			"1\nfunction cipher(msg, keyword) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/gLEuown2hKCkTYPhZ"
	},
	{
		"title": "Non-Repeating Integers",
		"description": "<p><span>Let's define a non-repeating integer as one whose digits are all distinct. 97653 is non-repeating while 97252 is not (it has two 2's). Among the binary numbers, there are only two positive non-repeating integers: 1 and 10. Ternary (base 3) has ten: 1, 2, 10, 20, 12, 21, 102, 201, 120, 210.</span></p><p><span>Write a function that has as it's argument the base or radix and returns the number of non-repeating positive integers in that base.</span></p><h3><span>Examples</span></h3><pre><code>nonRepeats(2) ➞ 2\n\nnonRepeats(4) ➞ 48\n\nnonRepeats(5) ➞ 260\n\nnonRepeats(6) ➞ 1630</code></pre><h3><span>Notes</span></h3><p><span>Assume a radix of 1 is not legitimate.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(nonRepeats(2), 2)",
			"Test.assertEquals(nonRepeats(8), 95900)",
			"Test.assertEquals(nonRepeats(10), 8877690)",
			"Test.assertEquals(nonRepeats(3), 10)",
			"Test.assertEquals(nonRepeats(16), 53319412081140)"
		],
		"starterFn": [
			"1\nfunction nonRepeats(radix) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LuJss4nkngH7cDDw3"
	},
	{
		"title": "Calculating Mathematical Expression",
		"description": "<p><span>Create a function that takes a mathematical expression as a string, array of numbers on which the mathematical expression is to be calculated and return the result as an array of string.</span></p><h3><span>Explanation</span></h3><pre><code>mathematicalExp(\"f(x)=x+1\",[1,2]) ➞ [\"f(1)=2\",\"f(2)=3\"]\n\n// Math expression: \"f(x)=x+1\"\n// Numbers to calculate expression = [1,2]\n// f(1)=1+1=2\n// f(2)=2+1=2\n// Solution = [\"f(1)=2\",\"f(2)=3\"]</code></pre><h3><span>Examples</span></h3><pre><code>mathematicalExp(\"f(x)=x+1\",[1,2]) ➞ [\"f(1)=2\",\"f(2)=3\"]\n\nmathematicalExp(\"f(x)=x^2\",[1,2,3]) ➞ [\"f(1)=1\",\"f(2)=4\",\"f(3)=9\"]\n\nmathematicalExp(\"f(x)=x*3\",[1,2,3]) ➞ [\"f(1)=3\",\"f(2)=6\",\"f(3)=9\"]</code></pre><h3><span>Notes</span></h3><p><span>Array of numbers are positive integers.</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"language_fundamentals",
			"math",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(mathematicalExp(\"f(x)=x+1\", [1, 2]), [\"f(1)=2\", \"f(2)=3\"]);",
			"Test.assertSimilar(mathematicalExp(\"f(x)=x^2\", [1, 2, 3]), [\"f(1)=1\",\"f(2)=4\",\"f(3)=9\"]);",
			"Test.assertSimilar(mathematicalExp(\"f(x)=x*3\", [1, 2, 3]), [\"f(1)=3\",\"f(2)=6\",\"f(3)=9\"]);",
			"Test.assertSimilar(mathematicalExp(\"f(x)=x-2\", [1, 2, 3]), [\"f(1)=-1\",\"f(2)=0\",\"f(3)=1\"]);",
			"Test.assertSimilar(mathematicalExp(\"f(x)=x/3\", [3, 6, 9]), [\"f(3)=1\",\"f(6)=2\",\"f(9)=3\"]);"
		],
		"starterFn": [
			"1\nfunction mathematicalExp(exp, numbers) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/9L9twcL5Fr7yTuQ2C"
	},
	{
		"title": "Next Largest Number",
		"description": "<p><span>Write a function that returns the next largest number that can be created from the same digits as the input.</span></p><h3><span>Examples</span></h3><pre><code>nextNumber(19) ➞ 91\n\nnextNumber(3542) ➞ 4235\n\nnextNumber(5432) ➞ 5432\n\nnextNumber(58943) ➞ 59348</code></pre><h3><span>Notes</span></h3><ul><li><span>If no larger number can be formed, return the number itself.</span></li><li><strong><span>Bonus</span></strong><span>: See if you can do this without generating all digit permutations.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(nextNumber(7), 7)",
			"Test.assertEquals(nextNumber(19), 91)",
			"Test.assertEquals(nextNumber(217), 271)",
			"Test.assertEquals(nextNumber(899), 989)",
			"Test.assertEquals(nextNumber(989), 998)",
			"Test.assertEquals(nextNumber(1115), 1151)",
			"Test.assertEquals(nextNumber(2345), 2354)",
			"Test.assertEquals(nextNumber(3542), 4235)",
			"Test.assertEquals(nextNumber(5432), 5432)",
			"Test.assertEquals(nextNumber(57812), 57821)",
			"Test.assertEquals(nextNumber(57218), 57281)",
			"Test.assertEquals(nextNumber(58943), 59348)",
			"Test.assertEquals(nextNumber(97410), 97410)",
			"Test.assertEquals(nextNumber(718293), 718329)",
			"Test.assertEquals(nextNumber(618921), 619128)",
			"Test.assertEquals(nextNumber(967432), 972346)",
			"Test.assertEquals(nextNumber(890124), 890142)",
			"Test.assertEquals(nextNumber(9321345), 9321354)",
			"Test.assertEquals(nextNumber(219034567), 219034576)",
			"Test.assertEquals(nextNumber(219876543), 231456789)"
		],
		"starterFn": [
			"1\nfunction nextNumber(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/auJ4HPjQ9YJFB4Wjy"
	},
	{
		"title": "Calculate Amounts Owing",
		"description": "<p><span>Calculate the amounts owing for each customer of a device rental shop.</span></p><h3><span>Example Data</span></h3><pre><code> {\n    // [id, rate( $/hour )]\n    deviceLevels: [\n        [0, 1.00],\n        [1, 1.50]\n    ],\n    // [id, level]\n    devices: [\n        [0, 0],\n        [1, 1]\n    ],\n    // [id, name, percentage discount (%), flat rate discount($)]\n    customers: [\n        [0, 'John', 10, 5],\n        [1, 'Sara', 5, 7]\n    ],\n    // [id, device, customers, hours]\n    rentals: [\n        [0, 1, [0], 10],\n        [1, 0, [1], 20],\n        [2, 1, [1,0], 20],\n    ]\n  }</code></pre><p><strong><span>Device cost per hour</span></strong></p><p><span>Each device has a level and each level has a per hour cost. These values are stored in </span><code>devices</code><span>  and </span><code>deviceLevels</code><span> (e.g. device 1 has a level of 1 so it's cost is 1.50/hour).</span></p><p><strong><span>Device cost per hour per customer</span></strong></p><p><span>Multiple customers can share a rental for a single device. All costs will be shared equally (e.g. if 2 customers share a 10 hour rental of a device that costs $1/hour each will owe $5).</span></p><p><strong><span>Customer discounts</span></strong></p><p><span>Each customer will have both a percentage discount and a flat rate discount. To calculate an after discount amount owing, subtract the customer's percentage discount from the customer's total amount owing then subtract the flat rate. If the after discount amount is less than the </span><code>minimumCharge</code><span> the </span><code>minimumCharge</code><span> will be taken as the amount owing.</span></p><p><strong><span>Inputs</span></strong></p><ul><li><code>data</code><span>: See examples.</span></li><li><code>minimumCharge</code><span>: Minimum charge amount (see \"customer discounts\" above).</span></li></ul><p><strong><span>Return value</span></strong></p><p><span>The function will return an object indexed by customer name and will include the total amount owing for each customer rounded to two decimal places.</span></p><h3><span>Examples</span></h3><pre><code>const minimumCharge = 10\nconst data = {\n    // [id, rate( per/hour )]\n    deviceLevels: [\n        [0, 1.00],\n        [1, 1.50]\n    ],\n    // [id, level]\n    devices: [\n        [0, 0],\n        [1, 1]\n    ],\n    // [id, name, percentage discount (%), flat rate discount($)]\n    customers: [\n        [0, 'John', 10, 5],\n        [1, 'Sara', 5, 7]\n    ],\n    // [id, device, customers, hours]\n    rentals: [\n        [0, 1, [0], 10],\n        [1, 0, [1], 20],\n        [2, 1, [1,0], 20],\n    ]\n  }\n\ndata,  minimumCharge ➞ { John: 22, Sara: 26.25 }</code></pre><h3><span>Example Breakdown</span></h3><p><span>John rented device 1 for 10 hours according to the </span><code>rentals</code><span> data.\ndevice 1 is price level 1 and costs $1.50/h according to the </span><code>deviceLevels</code><span> data so the charge for this device is </span><code>1.50 * 10</code><span> or </span><code>$15</code></p><p><span>Sara rented device 0 for 20 hours according to the </span><code>rentals</code><span> data.\nDevice 0 is price level 0 and costs $1.00/h according to the </span><code>deviceLevels</code><span> data so the charge for this device is </span><code>1.00 * 20</code><span> or </span><code>$20</code></p><p><span>John and Sara shared a rental of device 1 for 20 hours according to the </span><code>rentals</code><span> data. Device 1 is price level 1 and costs $1.50/h according to the </span><code>deviceLevels</code><span> data so the charge for this device is </span><code>1.50 * 20</code><span> or </span><code>$30</code><span>. John and Sara will split that charge so they will owe </span><code>$15</code><span> each.</span></p><p><span>Johns owes 15 + 15 or $30. According to the </span><code>customers</code><span> table, John receives a 10% discount and a further flat rate discount of $5. John owes 30 - (30 * 0.10) - 5 or $22</span></p><p><span>Sara owes 20 + 15 or $35. According to the </span><code>customers</code><span> data Sara receives a 5% discount and a further flat rate discount of $7. Sara owes 35 - (35 * 0.05) - 7 or 26.25.</span></p><h3><span>Notes</span></h3><ul><li><span>There could be any number of devices, device levels, customers, and rentals.</span></li><li><span>Code readability is important; it won’t be directly tested but choose readability over achieving the goal with the least amount of code possible.</span></li></ul>",
		"publishedBy": "Kenny Fraser",
		"publishedByUrl": "https://edabit.com/user/jWW9YLuYPdAR6uR4c",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures"
		],
		"tests": [
			"let data, minimumCharge, expected",
			"minimumCharge = 15",
			"data = {",
			"  // [id, rate( per/hour )]",
			"  deviceLevels: [",
			"    [0, 1.00],",
			"    [1, 1.50],",
			"    [2, 2.00],",
			"    [3, 5.00],",
			"  ],",
			"  // [id, level]",
			"  devices: [",
			"    [0, 0],",
			"    [1, 0],",
			"    [2, 2],",
			"    [3, 1],",
			"    [4, 1],",
			"  ],",
			"  // [id, name, percentage discount (%), flat rate discount($)]",
			"  customers: [",
			"    [0, 'John', 15, 5],",
			"    [1, 'Lea', 25, 20],",
			"    [2, 'Sara', 5, 10],",
			"    [3, 'Bob', 0, 50],",
			"    [4, 'Eric', 10, 10],",
			"  ],"
		],
		"starterFn": [
			"1\nconst calculateAmountsOwing = (data, minimumCharge) => {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/GfL6945KHznmKaef9"
	},
	{
		"title": "Tic-Tac-Toe",
		"description": "<p><span>Create a function that takes a Tic-tac-toe board and returns </span><code>\"X\"</code><span> if the X's are placed in a way that there are three X's in a row or returns </span><code>\"O\"</code><span> if there is three O's in a row.</span></p><h3><span>Examples</span></h3><pre><code>whoWon([\n  [\"O\", \"X\", \"O\"],\n  [\"X\", \"X\", \"O\"],\n  [\"O\", \"X\", \"X\"]\n]) ➞ \"X\"\n\nwhoWon([\n  [\"O\", \"O\", \"X\"],\n  [\"X\", \"O\", \"X\"],\n  [\"O\", \"X\", \"O\"]\n]) ➞ \"O\"\n\nwhoWon([\n  [\"O\", \"O\", \"X\"],\n  [\"X\", \"X\", \"O\"],\n  [\"O\", \"X\", \"O\"]\n]) ➞ \"Tie\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All places on the board will have either \"X\" or \"O\".</span></li><li><span>If there is a tie, return </span><code>\"Tie\"</code><span>.</span></li></ul>",
		"publishedBy": "Kyla",
		"publishedByUrl": "https://edabit.com/user/HcYxcQ5J6dM4WkWHd",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"games",
			"validation"
		],
		"tests": [
			"Test.assertEquals(whoWon([",
			"    [\"X\", \"O\", \"X\"],",
			"    [\"X\", \"O\", \"O\"],",
			"    [\"X\", \"X\", \"O\"]",
			"]), \"X\")",
			"​",
			"Test.assertEquals(whoWon([",
			"    [\"O\", \"X\", \"O\"],",
			"    [\"X\", \"X\", \"O\"],",
			"    [\"O\", \"X\", \"X\"]",
			"]), \"X\")",
			"​",
			"Test.assertEquals(whoWon([",
			"    [\"X\", \"X\", \"O\"],",
			"    [\"O\", \"X\", \"O\"],",
			"    [\"X\", \"O\", \"O\"]",
			"]), \"O\")",
			"​",
			"Test.assertEquals(whoWon([",
			"    [\"X\", \"X\", \"X\"],",
			"    [\"O\", \"X\", \"O\"],",
			"    [\"X\", \"O\", \"O\"]",
			"]), \"X\")",
			"​",
			"Test.assertEquals(whoWon([",
			"    [\"X\", \"O\", \"X\"],"
		],
		"starterFn": [
			"1\nfunction whoWon(board) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/JgjQDgNp4nQuMv2LA"
	},
	{
		"title": "Newton-Raphson method",
		"description": "<p><span>Create a function that finds a root of a polynomial curve. Do this using the Newton-Raphson method.</span></p><ul><li><span>Your input will be an array of coefficients for a 3rd order polynomial: </span><code>c(0)*x^3 + c(1)*x^2 + c(2)*x + c(3)</code></li><li><span>Round your answer to three decimal places (nearest 0.001). Choose x = 0.0 as an initial guess. Twenty iterations of the algorithm are sufficient for accuracy.</span></li><li><span>The Newton-Raphson method uses the generic derivative </span><strong><span>df/dx</span></strong><span>. This can be calculated analytically for a polynomial, or numerically using a small step of dx (such as 0.0001). See the </span><strong><span>Resources</span></strong><span> tab for more info.</span></li></ul><h3><span>Examples</span></h3><pre><code>newtonRaphson([0.0, -0.1, -0.2, 0.3]) ➞ 1.000\n\nnewtonRaphson([-0.1, 0.4, 0.1, -0.8]) ➞ 3.681\n\nnewtonRaphson([0.2, -0.6, 1.5, -2.7]) ➞ 2.295</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"math"
		],
		"tests": [
			"Test.assertEquals(newtonRaphson([-1.4, -0.9, -1.0, 5.2]), 1.23)",
			"Test.assertEquals(newtonRaphson([2.4, 0.1, -4.6, 8.2]), -1.939)",
			"Test.assertEquals(newtonRaphson([0.0, 0.0, -1.0, 2.0]), 2.0)",
			"Test.assertEquals(newtonRaphson([-0.4, 3.8, 0.7, -5.5]), 9.532)"
		],
		"starterFn": [
			"1\nfunction newtonRaphson(c) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/D2xXuARCTbCJQnrBz"
	},
	{
		"title": "Capitalization Families",
		"description": "<p><span>Write a function that groups words by the </span><strong><span>number of capital letters</span></strong><span> and returns an array of object entries whose keys are the </span><strong><span>number of capital letters</span></strong><span> and the values are the groups.</span></p><h3><span>Examples</span></h3><pre><code>grouping([\"HaPPy\", \"mOOdy\", \"yummy\", \"mayBE\"]) ➞ [\n  [0, [\"yummy\"]],\n  [2, [\"mayBE\", \"mOOdy\"]],\n  [3, [\"HaPPy\"]]\n]\n\ngrouping([\"eeny\", \"meeny\", \"miny\", \"moe\"]) ➞ [\n  [0, [\"eeny\", \"meeny\", \"miny\", \"moe\"]]\n]\n\ngrouping([\"FORe\", \"MoR\", \"bOR\", \"tOR\", \"sOr\", \"lor\"]) ➞ [\n  [0, [\"lor\"]],\n  [1, [\"sOr\"]],\n  [2, [\"bOR\", \"MoR\", \"tOR\"]],\n  [3, [\"FORe\"]]\n]</code></pre><h3><span>Notes</span></h3><ul><li><span>The object entries have to be sorted by the </span><strong><span>number of capital letters</span></strong><span>.</span></li><li><span>The groups will be arrays of all words sharing the same number of capital letters.</span></li><li><span>The groups have to be sorted alphabetically (ignoring case).</span></li><li><span>Words will be unique.</span></li></ul>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"sorting",
			"strings"
		],
		"tests": [
			"Test.assertSimilar(grouping([\"MOVIE\", \"TAKE\", \"PERSON\"]), [",
			"  [4, [\"TAKE\"]],",
			"  [5, [\"MOVIE\"]],",
			"  [6, [\"PERSON\"]]",
			"])",
			"​",
			"Test.assertSimilar(grouping([\"the\", \"them\", \"theme\", \"EVERY\"]), [",
			"  [0, [\"the\", \"them\", \"theme\"]],",
			"  [5, [\"EVERY\"]]",
			"])",
			"​",
			"Test.assertSimilar(grouping([\"HaPPy\", \"mOOdy\", \"yummy\", \"mayBE\"]), [",
			"  [0, [\"yummy\"]],",
			"  [2, [\"mayBE\", \"mOOdy\"]],",
			"  [3, [\"HaPPy\"]]",
			"])",
			"​",
			"Test.assertSimilar(grouping([\"eeny\", \"meeny\", \"miny\", \"moe\"]), [",
			"  [0, [\"eeny\", \"meeny\", \"miny\", \"moe\"]]",
			"])",
			"​",
			"Test.assertSimilar(grouping([\"FORe\", \"MoR\", \"bOR\", \"tOR\", \"sOr\", \"lor\"]), [",
			"  [0, [\"lor\"]],",
			"  [1, [\"sOr\"]],",
			"  [2, [\"bOR\", \"MoR\", \"tOR\"]],",
			"  [3, [\"FORe\"]]"
		],
		"starterFn": [
			"1\nfunction grouping(words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/socoDGxk3JGKezRYm"
	},
	{
		"title": "Repeating Decimals to Fractions",
		"description": "<p><span>Performing division on a fraction often results in an infinitely repeating decimal.</span></p><pre><code>1/3=.3333333...  1/7=.142857142857...</code></pre><p><span>Create a function that takes a decimal in string form with the repeating part in parentheses and returns the equivalent fraction in string form and in lowest terms.</span></p><h3><span>Examples</span></h3><pre><code>fractions(\"0.(6)\") ➞ \"2/3\"\n\nfractions(\"1.(1)\") ➞ \"10/9\"\n\nfractions(\"3.(142857)\") ➞ \"22/7\"\n\nfractions(\"0.19(2367)\") ➞ \"5343/27775\"\n\nfractions(\"0.1097(3)\") ➞ \"823/7500\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers",
			"strings"
		],
		"tests": [
			"Test.assertEquals(fractions(\"0.(09)\"), \"1/11\")",
			"Test.assertEquals(fractions(\"0.0(45)\"), \"1/22\")",
			"Test.assertEquals(fractions(\"2.1(313)\"), \"10646/4995\")",
			"Test.assertEquals(fractions(\"0.0208(3)\"), \"1/48\")",
			"Test.assertEquals(fractions(\"12.(12345)\"), \"404111/33333\")",
			"Test.assertEquals(fractions(\"1.017(857142)\"), \"57/56\")",
			"Test.assertEquals(fractions(\"0.(052631578947368421)\"), \"1/19\")"
		],
		"starterFn": [
			"1\nfunction fractions(decimal) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/655iJn8LvKYvzEWhG"
	},
	{
		"title": "Prince of Persia Turned Around",
		"description": "<p><span>You're working for Jaffar in the newest game of Prince of Persia. The prince is coming to get the princess and you have to stop him. He's entering the castle on a horse, don't ask me why he's riding a horse... he just is!</span></p><p><span>You're standing next to the cannon and you have to check if the aim / velocity / height is ok for hitting the prince on his horse.</span></p><p><span>Your function will get four values / circumstances:</span></p><ol><li><span>Velocity</span></li><li><span>Angle</span></li><li><span>Height</span></li><li><span>Distance to the prince</span></li></ol><p><span>With the formula of </span><strong><span>Ballistic Trajectory</span></strong><span> you'll be able to calculate the distance the cannonball is gonna travel for impact. You don't need to apply rounding.</span></p><p><span>The complete formula is found in the </span><strong><span>Resources</span></strong><span> section. Computations are based on the acceleration of gravity on the earth's surface (9.81 m/s/s), atmospheric drag is neglected. The chance of hitting the prince / his horse is plus or minus 0.5m.</span></p><h3><span>Examples</span></h3><pre><code>hitPrince(10, 10, 10, 16) ➞ true\n\nhitPrince(20, 45, 0, 45) ➞ false\n\nhitPrince(5, 45, 10, 6) ➞ true</code></pre><p><img alt=\"Ballistic Trajectory\" src=\"https://edabit-challenges.s3.amazonaws.com/trajectory-2D.gif\"></p><h3><span>Notes</span></h3><ul><li><span>No actual princes / horses are harmed during the making of this challenge.</span></li><li><span>All the inputs are correct. 0 &gt; Angle &lt; 90, and so on.</span></li><li><span>Values will be in meters per second / degrees / meters.</span></li><li><span>I just stole the formula from the js source code of the resource.</span></li></ul>",
		"publishedBy": "Ruud Peter Boelens",
		"publishedByUrl": "https://edabit.com/user/Akq3fQcPRgPrWfsye",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"math",
			"numbers"
		],
		"tests": [
			"[",
			"  [[10,10,10,16], true],",
			"  [[50,5,5,76], false],",
			"  [[16,16,16,36], true],",
			"  [[20,20,20,54], false],",
			"  [[20,45,0,45], false],",
			"  [[100,30,100,1031], true], // Good shot!",
			"  [[50,5,50,182], false],",
			"  [[10,10,10,17], false],",
			"  [[5,45,10,6], true]",
			"].forEach(x => Test.assertEquals(hitPrince(...x[0]), x[1]));"
		],
		"starterFn": [
			"1\nfunction hitPrince(Vo, th, Yo, Ds) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Z7nDvtQ5JduwjvoGD"
	},
	{
		"title": "Polybius Square, Bifid Cipher",
		"description": "<p><span>The basic </span><strong><span>Polybius Square</span></strong><span> is a 5x5 square grid with the letters A-Z written into the grid. \"I\" and \"J\" typically share a slot (as there are 26 letters and only 25 slots).</span></p><table><thead><tr><th></th><th><span>1</span></th><th><span>2</span></th><th><span>3</span></th><th><span>4</span></th><th><span>5</span></th></tr></thead><tbody><tr><td><strong><span>1</span></strong></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td></tr><tr><td><strong><span>2</span></strong></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I/J</span></td><td><span>K</span></td></tr><tr><td><strong><span>3</span></strong></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td></tr><tr><td><strong><span>4</span></strong></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td></tr><tr><td><strong><span>5</span></strong></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td></tr></tbody></table><p><span>The </span><strong><span>Bifid</span></strong><span> cipher uses the Polybius square but adds a layer of complexity.</span></p><p><span>Start with a secret message. Remove spaces and punctuation.</span></p><pre><code>plaintext = \"ikilledmufasa\"</code></pre><p><span>Encipher the message using the basic Polybius cipher (see my </span><a target=\"_blank\" href=\"https://edabit.com/challenge/2C3gtb4treAFyWJMg\"><span>previous challenge</span></a><span> — right click and select \"open in new tab\"), but write the numbers in two rows under the message, like so:</span></p><table><thead><tr><th><span>i</span></th><th><span>k</span></th><th><span>i</span></th><th><span>l</span></th><th><span>l</span></th><th><span>e</span></th><th><span>d</span></th><th><span>m</span></th><th><span>u</span></th><th><span>f</span></th><th><span>a</span></th><th><span>s</span></th><th><span>a</span></th></tr></thead><tbody><tr><td><span>2</span></td><td><span>2</span></td><td><span>2</span></td><td><span>3</span></td><td><span>3</span></td><td><span>1</span></td><td><span>1</span></td><td><span>3</span></td><td><span>4</span></td><td><span>2</span></td><td><span>1</span></td><td><span>4</span></td><td><span>1</span></td></tr><tr><td><span>4</span></td><td><span>5</span></td><td><span>4</span></td><td><span>1</span></td><td><span>1</span></td><td><span>5</span></td><td><span>4</span></td><td><span>2</span></td><td><span>5</span></td><td><span>1</span></td><td><span>1</span></td><td><span>3</span></td><td><span>1</span></td></tr></tbody></table><p><span>Read off the numbers horizontally, in pairs:</span></p><pre><code>22 23 31 13 42 14 14 54 11 54 25 11 31</code></pre><p><span>Generate the ciphertext by converting these new pairs of numbers into new letters using the Polybius square.</span></p><pre><code>ciphertext = \"ghlcrddyaykal\"</code></pre><p><span>Create a function that takes a plaintext or ciphertext, and returns the corresponding ciphertext or plaintext.</span></p><h3><span>Examples</span></h3><pre><code>bifid(\"I killed Mufasa!\") ➞ \"ghlcrddyaykal\"\n\nbifid(\"ghlcrddyaykal\") ➞ \"ikilledmufasa\"\n\nbifid(\"hi\") ➞ \"go\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography",
			"loops"
		],
		"tests": [
			"Test.assertEquals(bifid('I killed Mufasa!'), 'ghlcrddyaykal')",
			"Test.assertEquals(bifid('ghlcrddyaykal'), 'ikilledmufasa')",
			"Test.assertEquals(bifid('I will look for you, I will find you, and I will kill you.'), 'khnngoxrwnglxqlkhmhporqatvrtyiadotvorqeqdu')",
			"Test.assertEquals(bifid('khnngoxrwnglxqlkhmhporqatvrtyiadotvorqeqdu'), 'iwilllookforyouiwillfindyouandiwillkillyou')",
			"Test.assertEquals(bifid('I drink your milkshake'), 'frmxtmmrbdrsyugqxlz')",
			"Test.assertEquals(bifid('xqcrccdfttiuloloesyks'), 'youcanthandlethetruth')"
		],
		"starterFn": [
			"1\nfunction bifid(text) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/RHpTdvSgKaHmts6z7"
	},
	{
		"title": "Evaluate Polynomials from String",
		"description": "<p><span>You will be given a polynomial expression in string form. The expression will contain any of the following operations, written using standard mathematical notation for a single variable, \"x\", as illustrated in the examples below:</span></p><ul><li><span>addition: x + 1</span></li><li><span>subtraction: x – 2</span></li><li><span>multiplication: 3x</span></li><li><span>division: x / 4</span></li><li><span>exponentation: x^5</span></li><li><span>brackets: x(x + 1)</span></li></ul><p><span>Your task is to write a function that can evaluate such a polynomial for a given value of x. You will receive two arguments: the polynomial string and the input number.</span></p><p><span>If the mathematical expression contains an error, you should return </span><code>\"invalid\"</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>evalPolynomial(\"x+1\", 5) ➞ 6\n\nevalPolynomial(\"5x^2\", 3) ➞ 45\n\nevalPolynomial(\"(x(x+1))/2\", 4) ➞ 10\n\nevalPolynomial(\"4(x + 3))/2\", 5) ➞ \"invalid\"\n// Invalid because parentheses not balanced.</code></pre><h3><span>Notes</span></h3><p><span>The string will not contain spaces.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"strings"
		],
		"tests": [
			"Test.assertEquals(evalPolynomial(\"x+1\", 1), 2)",
			"Test.assertEquals(evalPolynomial(\"x^2\", 2), 4, \"Check exponentation.\")",
			"Test.assertEquals(evalPolynomial(\"2(x+2)+x(x-1)\", 3), 16, \"Check multiplication.\")",
			"Test.assertEquals(evalPolynomial(\"3x^2/8\", 4), 6)",
			"Test.assertEquals(evalPolynomial(\"3x&2/8\", 5), \"invalid\", \"& not a valid mathematical expression.\")",
			"Test.assertEquals(evalPolynomial(\"print(x)\", 6), \"invalid\", \"print(x) not a valid mathematical expression.\")",
			"Test.assertEquals(evalPolynomial(\"x//2\", 7), \"invalid\", \"// not a valid operator.\")",
			"Test.assertEquals(evalPolynomial(\"\", 8), \"invalid\", \"Expression empty.\")"
		],
		"starterFn": [
			"1\nfunction evalPolynomial(poly, num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wrzdwQDwoFDBhbAuh"
	},
	{
		"title": "Football Scores",
		"description": "<p><span>Scoring plays in American football count as either 2, 3, 6, 7, or 8 points. Write a function that has as it's argument a football score and returns the number of possible ways that score can be achieved. Order is not important.</span></p><h3><span>Examples</span></h3><pre><code>football(4) ➞ 1\n// 2+2\n\nfootball(6) ➞ 3\n// 2+2+2 or 3+3 or 6\n\nfootball(7) ➞ 2\n// 2+2+3 or 7\n\nfootball(9) ➞ 4\n// 2+2+2+3 or 3+3+3 or 3+6 or 7+2</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(football(0), 1)",
			"Test.assertEquals(football(1), 0)",
			"Test.assertEquals(football(8), 4)",
			"Test.assertEquals(football(19), 18)",
			"Test.assertEquals(football(35), 103)",
			"Test.assertEquals(football(66), 804)"
		],
		"starterFn": [
			"1\nfunction football(score) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/dpHJQmZ7gJ7CrXHYJ"
	},
	{
		"title": "Vigenere Cipher",
		"description": "<p><span>The </span><strong><span>Vigenere Cipher</span></strong><span> is a poly-alphabetic substitution cipher that uses a set of shift ciphers and a keyword.</span></p><p><span>One of the simplest ciphers is the Caesar/shift cipher, where each letter in the plaintext message is replaced by the letter a particular number of positions up, or downstream in the alphabet. Shift 1 Caesar cipher:</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td></tr><tr><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td></tr></tbody></table><p><span>The Vigenere table is generated by doing a shift-1 Caesar cipher as many times as the number of letters in the alphabet (English alphabet, for this challenge).</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td></tr><tr><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td></tr><tr><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td></tr><tr><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td></tr><tr><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td></tr><tr><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td></tr><tr><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td></tr><tr><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td></tr><tr><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td></tr><tr><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td></tr><tr><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td></tr><tr><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td></tr><tr><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td></tr><tr><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td></tr><tr><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td></tr><tr><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td></tr><tr><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td></tr><tr><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td></tr><tr><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td></tr><tr><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td></tr><tr><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td></tr><tr><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td></tr><tr><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td></tr><tr><td><span>X</span></td><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td></tr><tr><td><span>Y</span></td><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td></tr><tr><td><span>Z</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>H</span></td><td><span>I</span></td><td><span>J</span></td><td><span>K</span></td><td><span>L</span></td><td><span>M</span></td><td><span>N</span></td><td><span>O</span></td><td><span>P</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td><td><span>T</span></td><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Y</span></td></tr></tbody></table><p><span>To encipher the message, first, spaces and punctuation are removed to create the plaintext. All characters are transformed to uppercase to match the table:</span></p><pre><code>message = \"Soylent Green is people.\"\n\nplaintext = \"SOYLENTGREENISPEOPLE\"</code></pre><p><span>A keyword is chosen, in this case, \"spoiler\" and repeated as many times as necessary to match the length of the plaintext:</span></p><pre><code>key = \"SPOILERSPOILERSPOILE\"</code></pre><p><span>The last \"r\" is dropped as the plaintext length has been reached.</span></p><p><span>The plaintext and key are lined up. To encipher the 1st letter, a search is done across the </span><em><span>first row</span></em><span> to find the column of the plaintext letter, in this case </span><code>\"S\"</code><span>, in the </span><em><span>19th column</span></em><span>. Then a search is done down the </span><em><span>first column</span></em><span> to locate the row of the 1st key letter, in this case also </span><code>\"S\"</code><span>, in the </span><em><span>19th row</span></em><span>. The letter at the intersection between column 19 and row 19, </span><code>\"K\"</code><span>,  will be the 1st letter in the ciphertext.</span></p><p><span>The 2nd plaintext letter </span><code>\"O\"</code><span> is at column 15, while the 2nd key letter </span><code>\"P\"</code><span> is at row 16. The letter at the intersection is </span><code>\"D\"</code><span>. And so on.</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>Plaintext</span></td><td><span>S</span></td><td><span>O</span></td><td><span>Y</span></td><td><span>L</span></td><td><span>E</span></td><td><span>N</span></td><td><span>T</span></td><td><span>G</span></td><td><span>R</span></td><td><span>E</span></td><td><span>E</span></td><td><span>N</span></td><td><span>I</span></td><td><span>S</span></td><td><span>P</span></td><td><span>E</span></td><td><span>O</span></td><td><span>P</span></td><td><span>L</span></td><td><span>E</span></td></tr><tr><td><span>Key</span></td><td><span>S</span></td><td><span>P</span></td><td><span>O</span></td><td><span>I</span></td><td><span>L</span></td><td><span>E</span></td><td><span>R</span></td><td><span>S</span></td><td><span>P</span></td><td><span>O</span></td><td><span>I</span></td><td><span>L</span></td><td><span>E</span></td><td><span>R</span></td><td><span>S</span></td><td><span>P</span></td><td><span>O</span></td><td><span>I</span></td><td><span>L</span></td><td><span>E</span></td></tr><tr><td><span>Ciphertext</span></td><td><span>K</span></td><td><span>D</span></td><td><span>M</span></td><td><span>T</span></td><td><span>P</span></td><td><span>R</span></td><td><span>K</span></td><td><span>Y</span></td><td><span>G</span></td><td><span>S</span></td><td><span>M</span></td><td><span>Y</span></td><td><span>M</span></td><td><span>J</span></td><td><span>H</span></td><td><span>T</span></td><td><span>C</span></td><td><span>X</span></td><td><span>W</span></td><td><span>I</span></td></tr></tbody></table><p><span>Create a function that takes two strings: a message or ciphertext, and a keyword. Return the ciphertext if the input is a message, or the deciphered text (without spaces or punctuation) if the input is in ciphertext.</span></p><h3><span>Examples</span></h3><pre><code>vigenere(\"Soylent Green is people.\", \"spoiler\") ➞ \"KDMTPRKYGSMYMJHTCXWI\"\n\nvigenere(\"Darth Vader is Luke's father.\", \"spoiler\") ➞ \"VPFBSZRVTFQDPLCTGNLXYWG\"\n\nvigenere(\"HMRSSAIEKLSAXQILCCAC\", \"python\") ➞ \"SOYLENTGREENISPEOPLE\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"cryptography",
			"loops",
			"strings"
		],
		"tests": [
			"const t1 = \"Soylent Green is people.\"",
			"const t2 = 'SOYLENTGREENISPEOPLE'",
			"const t3 = \"Darth Vader is Luke's father.\"",
			"const t4 = 'TYLERDURDENWASHIMALLALONG'",
			"const t5 = 'Malcolm Crowe was dead the whole time.'",
			"const t6 = 'THEYWERETHEGHOSTSHAUNTINGTHEIROWNHOUSE'",
			"​",
			"Test.assertEquals(vigenere(t1, 'spoiler'), 'KDMTPRKYGSMYMJHTCXWI')",
			"Test.assertEquals(vigenere('HMRSSAIEKLSAXQILCCAC', 'python'), t2)",
			"Test.assertEquals(vigenere(t3, 'spoiler'), 'VPFBSZRVTFQDPLCTGNLXYWG')",
			"Test.assertEquals(vigenere('LNZMCVJFLPFLOASABOTWSACVR', 'spoil'), t4)",
			"Test.assertEquals(vigenere(t5, 'edabit'), 'QDLDWEQFRPEXADSEMTHWHFEASOEUQFI')",
			"Test.assertEquals(vigenere('FVZGAWDSOPIYTCNBWZMIIBMFSHCMMJAKIPSMES', 'movies'), t6)"
		],
		"starterFn": [
			"1\nfunction vigenere(text, keyword) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/KoCfaavqqCqThDC6P"
	},
	{
		"title": "Can You Enter the Cave?",
		"description": "<p><span>You are playing a video game. Your screen can be represented as a 2D array, where </span><code>0</code><span>s represent </span><strong><span>walkeable areas</span></strong><span> and </span><code>1</code><span>s represent </span><strong><span>unwalkeable areas</span></strong><span>. You are currently searching for the entrance to a cave that is located on the right side of the screen. Your character starts anywhere in the leftmost column.</span></p><p><span>Create a function that determines if you can enter the cave. You can only move left, right, up, or down (not allowed to move diagonally).</span></p><p><span>To illustrate:</span></p><pre><code>[\n  [0, 0, 1, 1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 0, 0, 0, 0, 0],\n  [0, 0, 1, 1, 1, 1, 1, 0]\n]</code></pre><p><span>You found the entrance! Function should output </span><code>true</code><span>.</span></p><pre><code>[\n  [0, 0, 0, 1, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 0, 1, 1, 1, 1, 0]\n]</code></pre><p><span>Nope, keep looking. Function should output </span><code>false</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>canEnterCave([\n  [0, 1, 1, 1, 0, 1, 1, 0],\n  [0, 0, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0]\n]) ➞ false\n\n// You cannot walk diagonally!\n\ncanEnterCave([\n  [0, 1, 1, 1, 0, 1, 1, 0],\n  [0, 0, 1, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 1, 0, 0],\n  [0, 1, 1, 1, 1, 1, 1, 0]\n]) ➞ true\n\ncanEnterCave([\n  [0, 1, 1, 1, 1, 1, 1, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 1, 1, 1, 1, 1, 0],\n  [0, 1, 1, 0, 0, 1, 1, 0]\n]) ➞ false</code></pre><h3><span>Notes</span></h3><ul><li><span>You are seeing the game screen from a birds-eye view. </span></li><li><span>Another way of thinking about it: You can enter the cave if you can move from the </span><strong><span>left</span></strong><span> side of the screen to the </span><strong><span>right</span></strong><span> side by only walking up, down or right.</span></li></ul>",
		"publishedBy": "Helen Yu",
		"publishedByUrl": "https://edabit.com/user/mNMQvcxKSSvqqMYCH",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"games"
		],
		"tests": [
			"Test.assertEquals(canEnterCave([",
			"[0, 0, 1, 1, 1, 0, 0, 0], ",
			"[0, 0, 0, 0, 1, 0, 0, 0], ",
			"[0, 0, 1, 0, 0, 0, 0, 0], ",
			"[0, 0, 1, 1, 1, 1, 1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(canEnterCave([",
			"[0, 0, 0, 1, 0, 0, 0, 0], ",
			"[0, 0, 0, 1, 1, 0, 0, 0], ",
			"[0, 0, 0, 0, 1, 1, 0, 0], ",
			"[0, 0, 0, 1, 1, 1, 1, 0]",
			"]), false)",
			"​",
			"Test.assertEquals(canEnterCave([",
			"[0, 1, 1, 1, 0, 1, 1, 0], ",
			"[0, 0, 1, 1, 0, 0, 0, 0], ",
			"[0, 0, 0, 0, 0, 1, 0, 0], ",
			"[0, 1, 1, 1, 1, 1, 1, 0]",
			"]), true)",
			"​",
			"Test.assertEquals(canEnterCave([",
			"[0, 1, 1, 1, 0, 1, 1, 0], ",
			"[0, 0, 1, 1, 0, 0, 0, 0], ",
			"[0, 0, 0, 1, 0, 1, 0, 0], ",
			"[0, 1, 1, 1, 1, 1, 1, 0]"
		],
		"starterFn": [
			"1\nfunction canEnterCave(x) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/CP5zy4iLZzNy2KFcN"
	},
	{
		"title": "The Jumping Frog",
		"description": "<p><span>A frog wants to cross a river. Unfortunately, he can't jump across in a single leap. Luckily, there are </span><code>n</code><span> stones in the river.</span></p><p><span>The frog can jump from the near bank to stone </span><code>1</code><span> and from stone </span><code>n</code><span> to the far bank. He can also jump from stone to stone, forward and backward. However, on each stone, a number </span><code>j</code><span> is written and he must only jump exactly </span><code>j</code><span> stones backward or forward.</span></p><p><span>Return the minimum number of jumps to cross the river (including jumps to the first stone and from the last stone (or any other stone, if possible) to the far bank) or </span><code>no chance :-(</code><span> if it's not possible to cross the river.</span></p><h3><span>Examples</span></h3><pre><code>jumpingFrog(5, [1, 1, 1, 1, 1]) ➞ 6\n\njumpingFrog(5, [1, 3, 1, 1, 1]) ➞ 4\n\njumpingFrog(5, [1, 1, 0, 1, 1]) ➞ \"no chance :-(\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The frog may also reach the far bank from another stone than </span><code>n</code><span> if a large enough number is written on it.</span></li><li><code>n</code><span> is at least 2.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"conditions",
			"loops"
		],
		"tests": [
			"Test.assertEquals(jumpingFrog(5, [1, 1, 1, 1, 1]), 6, \"simple stone-by-stone\")",
			"Test.assertEquals(jumpingFrog(5, [1, 3, 1, 1, 1]), 4, \"leapfrog 1\")",
			"Test.assertEquals(jumpingFrog(5, [1, 5, 1, 1, 1]), 3, \"leapfrog 2\")",
			"Test.assertEquals(jumpingFrog(8, [2, 8, 1, 1, 1, 1, 1, 1]), 4, \"leapfrog 3\")",
			"Test.assertEquals(jumpingFrog(5, [1, 1, 0, 1, 1]), \"no chance :-(\")",
			"Test.assertEquals(jumpingFrog(5, [1, 2, 0, 1, 1]), 5)",
			"Test.assertEquals(jumpingFrog(50, [3, 0, 2, 2, 1, 1, 4, 2, 4, 1, 2, 3, 3, 0, 1, 3, 1, 2, 1, 2, 0, 0, 2, 3, 2, 0, 4, 3, 3, 0, 3, 0, 0, 1, 4, 0, 4, 2, 1, 3, 2, 0, 2, 0, 0, 3, 1, 0, 4, 1]), \"no chance :-(\")",
			"Test.assertEquals(jumpingFrog(50, [4, 1, 2, 0, 4, 2, 3, 4, 4, 4, 4, 2, 1, 4, 0, 0, 2, 1, 4, 1, 2, 4, 1, 4, 2, 3, 0, 4, 0, 4, 3, 4, 3, 0, 2, 3, 4, 3, 4, 0, 1, 2, 2, 2, 1, 2, 1, 2, 3, 4]), 19)"
		],
		"starterFn": [
			"1\nfunction jumpingFrog(n, stones) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DWCBTJpQnNC3bCCGL"
	},
	{
		"title": "Number Base Converter",
		"description": "<p><span>Create a function that allows you to convert from a positive base 10 integer to any other base from 2 to 26, and also does the reverse, converts from base 2 to 26 back to base 10. The digits in the new base will be the lower case letters a-z with a=0 and z=25. If the number is out of range for the base specified, return the error message shown in the examples.</span></p><h3><span>Examples</span></h3><pre><code>baseConv(15, 2) ➞ \"bbbb\"\n// 1111\n\nbaseConv(16, 2) ➞ \"baaaa\"\n// converts 16 (base 10) to base 2\n\nbaseConv(1234, 10) ➞ \"bcde\"\n\nbaseConv(\"bac\", 3) ➞ 11\n// converts \"bac\" (base 3) to base 10\n// 1*3**2 + 0*3 + 2 = 11\n\nbase_conv(\"dac\", 3) ➞ \"dac is not a base 3 number.\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(baseConv(5, 4), \"bb\")",
			"Test.assertEquals(baseConv(5, 3), \"bc\")",
			"Test.assertEquals(baseConv(255, 2), \"bbbbbbbb\")",
			"Test.assertEquals(baseConv(1000, 7), \"cgcg\")",
			"Test.assertEquals(baseConv(20129, 10), \"cabcj\")",
			"Test.assertEquals(baseConv(1234567, 26), \"csghj\")",
			"Test.assertEquals(baseConv(4, 22), \"e\")",
			"Test.assertEquals(baseConv(\"python\", 25), 156160988)",
			"Test.assertEquals(baseConv(\"python\", 24), \"python is not a base 24 number.\")",
			"Test.assertEquals(baseConv(\"fizz\", 26), 93963)",
			"Test.assertEquals(baseConv(\"aeiou\", 22), 46792)",
			"Test.assertEquals(baseConv(\"k\", 20), 10)",
			"Test.assertEquals(baseConv(\"bac bac\", 3), \"bac bac is not a base 3 number.\")",
			"Test.assertEquals(baseConv(\"bananabanana\", 14), 4319529727086)"
		],
		"starterFn": [
			"1\nfunction baseConv(n, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/AFJqaLcKr26DQY4qy"
	},
	{
		"title": "Array's Permutations",
		"description": "<p><span>Create a function that takes an array of numbers and returns an array containing all possible permutations.</span></p><h3><span>Examples</span></h3><pre><code>permutations([1]) ➞ [[1]]\n\npermutations([1, 7]) ➞ [[1, 7], [7, 1]]\n\npermutations([2, 4, 7]) ➞ [[2, 4, 7], [2, 7, 4], [4, 2, 7], [4, 7, 2], [7, 2, 4], [7, 4, 2]]</code></pre><h3><span>Notes</span></h3><p><span>All given arrays do not contain duplicates.</span></p>",
		"publishedBy": "chenkop1",
		"publishedByUrl": "https://edabit.com/user/Nv5a34gxg5yvLKRW8",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"functional_programming",
			"recursion"
		],
		"tests": [
			"const arrayToString = arr => arr",
			"  .sort()",
			"  .map(elem => `[${elem.toString()}]`)",
			"  .toString();",
			"​",
			"const perms = arr => arrayToString(permutations(arr));",
			"​",
			"Test.assertEquals(perms([4]), arrayToString([[4]]));",
			"Test.assertEquals(perms([2,4,7]), arrayToString([[2,4,7], [2,7,4], [4,2,7], [4,7,2], [7,2,4], [7,4,2]]));",
			"Test.assertEquals(perms([1,2,4,8]), arrayToString([[1,2,4,8],[1,2,8,4],[1,4,2,8],[1,4,8,2],[1,8,2,4],[1,8,4,2],[2,1,4,8],[2,1,8,4],[2,4,1,8],[2,4,8,1],[2,8,1,4],[2,8,4,1],[4,1,2,8],[4,1,8,2],[4,2,1,8],[4,2,8,1],[4,8,1,2],[4,8,2,1],[8,1,2,4],[8,1,4,2],[8,2,1,4],[8,2,4,1],[8,4,1,2],[8,4,2,1]]));",
			"Test.assertEquals(perms([-1,-2,6]), arrayToString([[-1,-2,6],[-1,6,-2],[-2,-1,6],[-2,6,-1],[6,-1,-2],[6,-2,-1]]));",
			"Test.assertEquals(perms([1,2,3,4,5]), arrayToString([[1,2,3,4,5],[1,2,3,5,4],[1,2,4,3,5],[1,2,4,5,3],[1,2,5,3,4],[1,2,5,4,3],[1,3,2,4,5],[1,3,2,5,4],[1,3,4,2,5],[1,3,4,5,2],[1,3,5,2,4],[1,3,5,4,2],[1,4,2,3,5],[1,4,2,5,3],[1,4,3,2,5],[1,4,3,5,2],[1,4,5,2,3],[1,4,5,3,2],[1,5,2,3,4],[1,5,2,4,3],[1,5,3,2,4],[1,5,3,4,2],[1,5,4,2,3],[1,5,4,3,2],[2,1,3,4,5],[2,1,3,5,4],[2,1,4,3,5],[2,1,4,5,3],[2,1,5,3,4],[2,1,5,4,3],[2,3,1,4,5],[2,3,1,5,4],[2,3,4,1,5],[2,3,4,5,1],[2,3,5,1,4],[2,3,5,4,1],[2,4,1,3,5],[2,4,1,5,3],[2,4,3,1,5],[2,4,3,5,1],[2,4,5,1,3],[2,4,5,3,1],[2,5,1,3,4],[2,5,1,4,3],[2,5,3,1,4],[2,5,3,4,1],[2,5,4,1,3],[2,5,4,3,1],[3,1,2,4,5],[3,1,2,5,4],[3,1,4,2,5],[3,1,4,5,2],[3,1,5,2,4],[3,1,5,4,2],[3,2,1,4,5],[3,2,1,5,4],[3,2,4,1,5],[3,2,4,5,1],[3,2,5,1,4],[3,2,5,4,1],[3,4,1,2,5],[3,4,1,5,2],[3,4,2,1,5],[3,4,2,5,1],[3,4,5,1,2],[3,4,5,2,1],[3,5,1,2,4],[3,5,1,4,2],[3,5,2,1,4],[3,5,2,4,1],[3,5,4,1,2],[3,5,4,2,1],[4,1,2,3,5],[4,1,2,5,3],[4,1,3,2,5],[4,1,3,5,2],[4,1,5,2,3],[4,1,5,3,2],[4,2,1,3,5],[4,2,1,5,3],[4,2,3,1,5],[4,2,3,5,1],[4,2,5,1,3],[4,2,5,3,1],[4,3,1,2,5],[4,3,1,5,2],[4,3,2,1,5],[4,3,2,5,1],[4,3,5,1,2],[4,3,5,2,1],[4,5,1,2,3],[4,5,1,3,2],[4,5,2,1,3],[4,5,2,3,1],[4,5,3,1,2],[4,5,3,2,1],[5,1,2,3,4],[5,1,2,4,3],[5,1,3,2,4],[5,1,3,4,2],[5,1,4,2,3],[5,1,4,3,2],[5,2,1,3,4],[5,2,1,4,3],[5,2,3,1,4],[5,2,3,4,1],[5,2,4,1,3],[5,2,4,3,1],[5,3,1,2,4],[5,3,1,4,2],[5,3,2,1,4],[5,3,2,4,1],[5,3,4,1,2],[5,3,4,2,1],[5,4,1,2,3],[5,4,1,3,2],[5,4,2,1,3],[5,4,2,3,1],[5,4,3,1,2],[5,4,3,2,1]]));"
		],
		"starterFn": [
			"1\nconst permutations = arr => {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4t46PimG6NL6dy9vs"
	},
	{
		"title": "Padovan Sequence",
		"description": "<p><span>In number theory, the Padovan sequence is the sequence of integers </span><strong><span>P(n)</span></strong><span> defined by the initial values:</span></p><pre><code>P(0) = P(1) = P(2) = 1</code></pre><p><span>And the recurrence relation:</span></p><pre><code>P(n) = P(n-2) + P(n-3)</code></pre><p><span>As with any sequence defined by a recurrence relation, Padovan numbers </span><strong><span>P(m)</span></strong><span> for </span><strong><span>m&lt;0</span></strong><span> can be defined by rewriting the recurrence relation as:</span></p><pre><code>P(m) = P(m+3) - P(m+1)</code></pre><h3><span>Objective</span></h3><p><span>Create a function that takes two numbers, </span><code>m</code><span> and </span><code>n</code><span>, being </span><code>m</code><span> always negative and </span><code>n</code><span> always positive, and returns an array with the Padovan numbers between </span><strong><span>P(m)</span></strong><span> and </span><strong><span>P(n)</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>padovan(-1, 1) ➞ [0, 1, 1]\n\npadovan(-10, 10) ➞ [2, -1, 0, 1, -1, 1, 0, 0, 1, 0, 1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12]\n\npadovan(-50, 1) ➞ [-524, 245, 71, -279, 316, -208, 37, 108, -171, 145, -63, -26, 82, -89, 56, -7, -33, 49, -40, 16, 9, -24, 25, -15, 1, 10, -14, 11, -4, -3, 7, -7, 4, 0, -3, 4, -3, 1, 1, -2, 2, -1, 0, 1, -1, 1, 0, 0, 1, 0, 1, 1]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertSimilar(padovan(-10, 10), [2, -1, 0, 1, -1, 1, 0, 0, 1, 0, 1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12])",
			"Test.assertSimilar(padovan(-1, 100), [0, 1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 37, 49, 65, 86, 114, 151, 200, 265, 351, 465, 616, 816, 1081, 1432, 1897, 2513, 3329, 4410, 5842, 7739, 10252, 13581, 17991, 23833, 31572, 41824, 55405, 73396, 97229, 128801, 170625, 226030, 299426, 396655, 525456, 696081, 922111, 1221537, 1618192, 2143648, 2839729, 3761840, 4983377, 6601569, 8745217, 11584946, 15346786, 20330163, 26931732, 35676949, 47261895, 62608681, 82938844, 109870576, 145547525, 192809420, 255418101, 338356945, 448227521, 593775046, 786584466, 1042002567, 1380359512, 1828587033, 2422362079, 3208946545, 4250949112, 5631308624, 7459895657, 9882257736, 13091204281, 17342153393, 22973462017, 30433357674, 40315615410, 53406819691, 70748973084, 93722435101, 124155792775, 164471408185, 217878227876, 288627200960, 382349636061, 506505428836, 670976837021, 888855064897, 1177482265857])",
			"Test.assertSimilar(padovan(-50, 1), [-524, 245, 71, -279, 316, -208, 37, 108, -171, 145, -63, -26, 82, -89, 56, -7, -33, 49, -40, 16, 9, -24, 25, -15, 1, 10, -14, 11, -4, -3, 7, -7, 4, 0, -3, 4, -3, 1, 1, -2, 2, -1, 0, 1, -1, 1, 0, 0, 1, 0, 1, 1])",
			"Test.assertSimilar(padovan(-3, 33), [0, 1, 0, 1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 37, 49, 65, 86, 114, 151, 200, 265, 351, 465, 616, 816, 1081, 1432, 1897, 2513, 3329, 4410, 5842, 7739])",
			"Test.assertSimilar(padovan(-1, 1), [0, 1, 1])",
			"Test.assertSimilar(padovan(-9, 2), [-1, 0, 1, -1, 1, 0, 0, 1, 0, 1, 1, 1])",
			"Test.assertSimilar(padovan(-4, 66), [0, 0, 1, 0, 1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 37, 49, 65, 86, 114, 151, 200, 265, 351, 465, 616, 816, 1081, 1432, 1897, 2513, 3329, 4410, 5842, 7739, 10252, 13581, 17991, 23833, 31572, 41824, 55405, 73396, 97229, 128801, 170625, 226030, 299426, 396655, 525456, 696081, 922111, 1221537, 1618192, 2143648, 2839729, 3761840, 4983377, 6601569, 8745217, 11584946, 15346786, 20330163, 26931732, 35676949, 47261895, 62608681, 82938844])"
		],
		"starterFn": [
			"1\nfunction padovan(m, n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zHQM6CxpviuFpZTDF"
	},
	{
		"title": "Complete the Pattern",
		"description": "<p><span>You will be given a string that is made up of some repeated pattern of characters. However, one of the characters in the string will be missing and replaced by an underscore. Write a function that returns the missing character.</span></p><h3><span>Examples</span></h3><pre><code>completePattern(\"ABCABCA_CAB\") ➞ \"B\"\n\ncompletePattern(\"_ABAABAABA\") ➞ \"A\"\n\ncompletePattern(\"X+X*X+X*X+X_\") ➞ \"*\"</code></pre><h3><span>Notes</span></h3><ul><li><span>The pattern will be repeated in full at least twice, though one of those repetitions may contain the missing character.</span></li><li><span>The string may end in the middle of a repetition of the pattern.</span></li><li><span>The pattern will never contain an underscore.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"strings"
		],
		"tests": [
			"//Credit goes to sigma144 for the original version of the challenge in Python. ;)",
			"Test.assertEquals(completePattern(\"ABCABCA_CAB\"), \"B\")",
			"Test.assertEquals(completePattern(\"_ABAABAABA\"), \"A\")",
			"Test.assertEquals(completePattern(\"X+X*X+X*X+X_\"), \"*\")",
			"Test.assertEquals(completePattern(\"X+X*X_X*X+X\"), \"+\")",
			"Test.assertEquals(completePattern(\"ABCDEABC_E\"), \"D\")",
			"Test.assertEquals(completePattern(\"AB_DEABCDE\"), \"C\")",
			"Test.assertEquals(completePattern(\"ABCDE_BCDE\"), \"A\")",
			"Test.assertEquals(completePattern(\"ABCD_ABCDE\"), \"E\")",
			"Test.assertEquals(completePattern(\"X_XXXX\"), \"X\")",
			"Test.assertEquals(completePattern(\"XYX_YXYXXYXY\"), \"X\")",
			"Test.assertEquals(completePattern(\".-.--...-.--..._.\"), \"-\")",
			"Test.assertEquals(completePattern(\"1_\"), \"1\")",
			"Test.assertEquals(completePattern(\"_1\"), \"1\")",
			"Test.assertEquals(completePattern(\"121_\"), \"2\")",
			"Test.assertEquals(completePattern(\"_212\"), \"1\")",
			"Test.assertEquals(completePattern(\"12_21\"), \"1\")",
			"Test.assertEquals(completePattern(\"1_1312131\"), \"2\")",
			"Test.assertEquals(completePattern(\"121_121412131214\"), \"3\")",
			"Test.assertEquals(completePattern(\"12131214121_1214\"), \"3\")",
			"Test.assertEquals(completePattern(\"1213121_12131214\"), \"4\")",
			"Test.assertEquals(completePattern(\"121312141213121_\"), \"4\")",
			"Test.assertEquals(completePattern(\"1213121_121312141\"), \"4\")",
			"Test.assertEquals(completePattern(\"121312141213121_1\"), \"4\")",
			"Test.assertEquals(completePattern(\"1213121412131214_\"), \"1\")",
			"Test.assertEquals(completePattern(\"_2131214121312141\"), \"1\")"
		],
		"starterFn": [
			"1\nfunction completePattern(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/2yntEvmdPaSSe7p3H"
	},
	{
		"title": "Ctrl + C, Ctrl + V",
		"description": "<p><span>Given a sentence containing few instances of </span><code>\"Ctrl + C\"</code><span> and </span><code>\"Ctrl + V\"</code><span>, return the sentence after those keyboard shortcuts have been applied! Note that:</span></p><ul><li><span>In this case, </span><code>\"Ctrl + C\"</code><span> will copy </span><strong><span>all text</span></strong><span> behind it.</span></li><li><span>In this case, </span><code>\"Ctrl + V\"</code><span> will do nothing if there is no </span><code>\"Ctrl + C\"</code><span> before it.</span></li><li><span>A </span><code>\"Ctrl + C\"</code><span> which follows another </span><code>\"Ctrl + C\"</code><span> will overwrite what it copies.</span></li></ul><h3><span>Examples</span></h3><pre><code>keyboardShortcut(\"the egg and Ctrl + C Ctrl + V the spoon\") ➞ \"the egg and the egg and the spoon\"\n\nkeyboardShortcut(\"WARNING Ctrl + V Ctrl + C Ctrl + V\") ➞ \"WARNING WARNING\"\n\nkeyboardShortcut(\"The Ctrl + C Ctrl + V Town Ctrl + C Ctrl + V\") ➞ \"The The Town The The Town\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Keyboard shortcut commands will appear like normal words in a sentence but shouldn't be copied themselves (see example #2).</span></li><li><span>Pasting should add a space between words.</span></li></ul>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"formatting",
			"strings"
		],
		"tests": [
			"Test.assertEquals(keyboardShortcut(\"the egg and Ctrl + C Ctrl + V the spoon\"), \"the egg and the egg and the spoon\")",
			"Test.assertEquals(keyboardShortcut(\"WARNING Ctrl + V Ctrl + C Ctrl + V\"), \"WARNING WARNING\")",
			"Test.assertEquals(keyboardShortcut(\"The Ctrl + C Ctrl + V Town Ctrl + C Ctrl + V\"), \"The The Town The The Town\")",
			"Test.assertEquals(keyboardShortcut(\"bacteria Ctrl + C Ctrl + V Ctrl + C Ctrl + V Ctrl + C Ctrl + V\"), \"bacteria bacteria bacteria bacteria bacteria bacteria bacteria bacteria\")",
			"Test.assertEquals(keyboardShortcut(\"You gotta copy something Ctrl + V first my Ctrl + V guy\"), \"You gotta copy something first my guy\")",
			"Test.assertEquals(keyboardShortcut(\"You gotta paste at Ctrl + C some point my Ctrl + C guy\"), \"You gotta paste at some point my guy\")"
		],
		"starterFn": [
			"1\nfunction keyboardShortcut(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/oL32o4Qwwmx34ntLm"
	},
	{
		"title": "K-th Element of a Binary Sorted Array",
		"description": "<p><span>Given two positive integers </span><code>n</code><span> and </span><code>k</code><span>, generate all binaries between the integers 0 and (2^n) - 1 , inclusive. These binaries will be sorted in descending order according to the number of existing 1s on it, if there is a tie, we choose the lowest numerical value. Return the k-th element from the sorted array created.</span></p><p><span>For </span><code>n = 3</code><span> and </span><code>k = 5</code><span> for example, the numbers from 0 to 7 (7 = (2^3)  - 1), make the binary array:</span></p><pre><code>[\"0\", \"1\", \"10\", \"11\", \"100\", \"101\", \"110\", \"111\"]</code></pre><p><span>When sorted by the rules, we have:</span></p><pre><code>[\"111\", \"11\", \"101\", \"110\", \"1\", \"10\", \"100\", \"0\"]</code></pre><p><span>And \"1\" is the fifth element on it.</span></p><h3><span>Examples</span></h3><pre><code>kthBinaryArray(3, 5) ➞ \"1\"\n// [\"111\", \"11\", \"101\", \"110\", \"1\", \"10\", \"100\", \"0\"]\n\nkthBinaryArray(4, 10) ➞ \"1010\"\n// [\"1111\", \"111\", \"1011\", \"1101\", \"1110\", \"11\", \"101\", \"110\", \"1001\", \"1010\", \"1100\", \"1\", \"10\", \"100\", \"1000\", \"0\"]</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "BijogFc24",
		"publishedByUrl": "https://edabit.com/user/Nb6LYPoQP6KJZt8mz",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures",
			"logic",
			"sorting"
		],
		"tests": [
			"Test.assertEquals(kthBinaryArray(3, 5), '1')",
			"Test.assertEquals(kthBinaryArray(4, 10), '1010')",
			"Test.assertEquals(kthBinaryArray(5, 16), '11100')",
			"Test.assertEquals(kthBinaryArray(10, 5), '1110111111')",
			"Test.assertEquals(kthBinaryArray(7, 10), '101111')"
		],
		"starterFn": [
			"1\nfunction kthBinaryArray(n, k) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/qpuBk4f7StQhADNSE"
	},
	{
		"title": "Recursion: Count the Digits",
		"description": "<p><span>Create a function that will </span><strong><span>recursively</span></strong><span> count the number of digits of a number. Conversion of the number to a string is not allowed, thus, the approach is recursive.</span></p><h3><span>Examples</span></h3><pre><code>digitsCount(0) ➞ 1\n\ndigitsCount(12345) ➞ 5\n\ndigitsCount(1289396387328) ➞ 13</code></pre><h3><span>Notes</span></h3><ul><li><span>All inputs are integers but some are in exponential form, so, deal with it accordingly.</span></li><li><span>It is expected from the challenge-takers to come up with a solution using the concept of </span><strong><span>recursion</span></strong><span> or the so-called </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read more topics about recursion (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge or unless otherwise.</span></li><li><span>A non-recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/bxJH7XXXnX6G5NTxT\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"numbers",
			"recursion"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(digitsCount), true)",
			"Test.assertNotEquals(recursive(digitsCount), false, \"Recursion is required!\")",
			"​",
			"let [numVector, resVector] = [[ ",
			"  0, 12345, 1289396387328, -1232323, 3463463874638476, ",
			"  -231.2e6, 1283939312321, -231273683, 3.2e6, 314890e3 ],[ ",
			"  1, 5, 13, 7, 16, 9, 13, 9, 7, 9 ]]",
			"for (let i in numVector) Test.assertEquals(digitsCount(numVector[i]), resVector[i])"
		],
		"starterFn": [
			"1\nfunction digitsCount(num) {",
			"2\n  // Your recursive implementation of the code here.",
			"3\n  return digitsCount(num)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/uL2Hi8Aj3FDgW9F7q"
	},
	{
		"title": "Recursion: Fibonacci String",
		"description": "<p><span>A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers </span><code>0</code><span> and </span><code>1</code><span> in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to the Fibonacci series. See examples for more details.</span></p><h3><span>Examples</span></h3><pre><code>fibStr(3, [\"j\", \"h\"]) ➞ \"j, h, hj\"\n\nfibStr(5, [\"e\", \"a\"]) ➞ \"e, a, ae, aea, aeaae\"\n\nfibStr(6, [\"n\", \"k\"]) ➞ \"n, k, kn, knk, knkkn, knkknknk\"</code></pre><h3><span>Notes</span></h3><ul><li><span>All values for </span><code>n</code><span> will be at least 2.</span></li><li><span>It is expected from the challenge-takers to come up with a solution using the concept of </span><strong><span>recursion</span></strong><span> or the so-called </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read more topics about recursion (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or haven't fully understood the concept behind it before taking up this challenge or unless otherwise.</span></li><li><span>A recursive approach is prone to </span><strong><span>Uncaught RangeError</span></strong><span> or exceeding the maximum call size of the stack, deal with it accordingly and appropriately.</span></li><li><span>A non-recursive version of this challenge can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/dZcAcu86rBtXLvXWD\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"recursion",
			"strings"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(fibStr), true)",
			"Test.assertNotEquals(recursive(fibStr), false, \"Recursion is required!\")",
			"​",
			"let [nStr, resStr] = [",
			"  [",
			"    [3, ['j', 'h']],",
			"    [5, ['e', 'a']],",
			"    [6, ['n', 'k']],",
			"    [7, ['f', 'c']],",
			"    [9, ['b', 'a']],",
			"    [11, ['z', 'x']]",
			"  ], [",
			"    \"j, h, hj\",",
			"    \"e, a, ae, aea, aeaae\",",
			"    \"n, k, kn, knk, knkkn, knkknknk\",",
			"    \"f, c, cf, cfc, cfccf, cfccfcfc, cfccfcfccfccf\",",
			"    \"b, a, ab, aba, abaab, abaababa, abaababaabaab, abaababaabaababaababa, abaababaabaababaababaabaababaabaab\",",
			"    \"z, x, xz, xzx, xzxxz, xzxxzxzx, xzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzx, xzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxzxzxxzxzxxzxxzxzxxzxxz\"",
			"]]",
			"for (let i in nStr) Test.assertEquals(fibStr(...nStr[i]), resStr[i])"
		],
		"starterFn": [
			"1\nfunction fibStr(n, str) {",
			"2\n  // Your recursive implementation of the code here.",
			"3\n  return fibStr(n, str)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/aEWotdg3r6eB2QLWK"
	},
	{
		"title": "Vampire Numbers",
		"description": "<p><span>A Vampire Number is a positive integer greater than 99, that rearranged in all of its possible digits permutations, with every permutation being split into two parts, is equal to the product of at least one of its permutations.</span></p><ul><li><span>If the number has an even quantity of digits, left and right parts will have the same length in every permutation;</span></li><li><span>If the number has an odd quantity of digits and at least three digits, the left and right parts will present different lengths for every possible permutation, alternating between them in the range +1 and -1.</span></li></ul><p><span>Given a positive integer </span><code>n</code><span>, implement a function that returns the type of </span><code>n</code><span> as a string:</span></p><ul><li><code>'Normal Number'</code><span> if </span><code>n</code><span> is lower than 100 or if no permutations return a product of their parts equal to </span><code>n</code><span>.</span></li><li><code>'Pseudovampire'</code><span> if </span><code>n</code><span> it is a Vampire with an odd quantity of digits.</span></li><li><code>'True Vampire'</code><span> if </span><code>n</code><span> it is a Vampire with an even quantity of digits.</span></li></ul><h3><span>Examples</span></h3><pre><code>isVampire(1260) ➞ \"True Vampire\"\n// Has an even number of digits and is greater than 99)\n// Permutations:\n// 12 * 60 = 720\n// 16 * 20 = 320\n// 10 * 26 = 260\n// 21 * 60 = 1260\n\nisVampire(126) ➞ \"Pseudovampire\"\n// Has an odd number of digits and is greater than 99\n// Permutations:\n// 12 * 6 = 72\n// 1 * 26 = 26\n// 21 * 6 = 126\n\nisVampire(67) ➞ \"Normal Number\"\n// Is lower than 100\n// Permutations:\n// 6 * 7 = 7 * 6 = 42</code></pre><h3><span>Notes</span></h3><p><span>Trivially, a number from 1 to 99 is a Normal Number by the definitions: a single-digit number can't be split into two parts, and the product of the permutated two digits of a number will always be lower than the number itself.</span></p>",
		"publishedBy": "er0s",
		"publishedByUrl": "https://edabit.com/user/5Zq3aGdvh4LHBvnJL",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"higher_order_functions",
			"numbers",
			"recursion"
		],
		"tests": [
			"Test.assertEquals(isVampire(1260), \"True Vampire\", \"Example #1\")",
			"Test.assertEquals(isVampire(126), \"Pseudovampire\", \"Example #2\")",
			"Test.assertEquals(isVampire(67), \"Normal Number\", \"Example #3\")",
			"Test.assertEquals(isVampire(1), \"Normal Number\")",
			"Test.assertEquals(isVampire(645), \"Normal Number\")",
			"Test.assertEquals(isVampire(688), \"Pseudovampire\")",
			"Test.assertEquals(isVampire(1345), \"Normal Number\")",
			"Test.assertEquals(isVampire(1395), \"True Vampire\")",
			"Test.assertEquals(isVampire(12964), \"Pseudovampire\")",
			"Test.assertEquals(isVampire(98765), \"Normal Number\")",
			"Test.assertEquals(isVampire(124421), \"Normal Number\")",
			"Test.assertEquals(isVampire(125460), \"True Vampire\")"
		],
		"starterFn": [
			"1\nfunction isVampire(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MLTdtrePXWtv7nfnM"
	},
	{
		"title": "Word Search (Part 2)",
		"description": "<p><span>This challenge involves finding words in an 8x8 grid. Given a string of 64 </span><code>letters</code><span> and an array of </span><code>words</code><span> to find, convert the string to an 8x8 array, and return </span><code>true</code><span> if </span><em><span>all</span></em><span> words can be found in the new array. Return </span><code>false</code><span> otherwise. Words can be read in any direction (horizontally, vertically or diagonally), and can also </span><code>wrap</code><span> over the same column, row or diagonal.</span></p><h3><span>Example</span></h3><pre><code>letters = \"HWAVEOWCFONNANFABEOAMOIAHODOXORTACTIDINOBWZODGELINEEAFASTETAPELL\"\nwords = [\"slot\", \"donate\", \"orthodox\", \"rated\", \"wave\", \"tape\", \"leg\", \"habit\", \"add\", \"fox\"]</code></pre><p><span>This would give the array below:</span></p><pre><code>[\n  [\"H\", \"W\", \"A\", \"V\", \"E\", \"O\", \"W\", \"C\"],\n  [\"F\", \"O\", \"N\", \"N\", \"A\", \"N\", \"F\", \"A\"],\n  [\"B\", \"E\", \"O\", \"A\", \"M\", \"O\", \"I\", \"A\"],\n  [\"H\", \"O\", \"D\", \"O\", \"X\", \"O\", \"R\", \"T\"],\n  [\"A\", \"C\", \"T\", \"I\", \"D\", \"I\", \"N\", \"O\"],\n  [\"B\", \"W\", \"Z\", \"O\", \"D\", \"G\", \"E\", \"L\"],\n  [\"I\", \"N\", \"E\", \"E\", \"A\", \"F\", \"A\", \"S\"],\n  [\"T\", \"E\", \"T\", \"A\", \"P\", \"E\", \"L\", \"L\"]\n]</code></pre><p><span>You would return </span><code>true</code><span> as all words can be found:</span></p><pre><code>[\n  [\"_\", \"W\", \"A\", \"V\", \"E\", \"_\", \"_\", \"_\"],\n  [\"_\", \"_\", \"N\", \"_\", \"_\", \"_\", \"F\", \"_\"],\n  [\"_\", \"_\", \"O\", \"_\", \"_\", \"O\", \"_\", \"A\"],\n  [\"H\", \"O\", \"D\", \"O\", \"X\", \"O\", \"R\", \"T\"],\n  [\"A\", \"_\", \"_\", \"_\", \"D\", \"_\", \"_\", \"O\"],\n  [\"B\", \"_\", \"_\", \"_\", \"D\", \"G\", \"E\", \"L\"],\n  [\"I\", \"_\", \"E\", \"E\", \"A\", \"_\", \"_\", \"S\"],\n  [\"T\", \"_\", \"T\", \"A\", \"P\", \"E\", \"_\", \"_\"]\n]</code></pre><p><span>Examples of the </span><code>wrapped</code><span> words:</span></p><pre><code>[\n  [\"_\", \"_\", \"A\", \"_\", \"_\", \"_\", \"_\", \"_\"],\n  [\"_\", \"_\", \"N\", \"_\", \"_\", \"_\", \"_\", \"_\"],\n  [\"_\", \"_\", \"O\", \"_\", \"_\", \"_\", \"_\", \"A\"],\n  [\"H\", \"O\", \"D\", \"O\", \"X\", \"O\", \"R\", \"T\"],\n  [\"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\", \"_\"],\n  [\"_\", \"_\", \"_\", \"_\", \"D\", \"_\", \"_\", \"_\"],\n  [\"_\", \"_\", \"E\", \"E\", \"_\", \"_\", \"_\", \"_\"],\n  [\"_\", \"_\", \"T\", \"_\", \"_\", \"_\", \"_\", \"_\"]\n]\n\n# \"orthodox\" -&gt; horizontal\n# \"donate\" -&gt; vertical\n# \"rated\" -&gt; diagonal</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"strings"
		],
		"tests": [
			"Test.assertEquals(wordSearch2('LUEWENTENRFICTIOVIVORSURWAIXTYEJUBADSLLEOEBWUASUYLLHSNLSUAETNAMN', ['analyst', 'census', 'ensue', 'bad', 'survivor', 'fuss', 'fiction', 'viable', 'jet', 'blue']), true)",
			"Test.assertEquals(wordSearch2('BARRIERGUFUAOYEOPLANESFYCWOUNDNMPKIEIFCURIFNGPJDOFCKSRKLOHAVYHGO', ['car', 'cup', 'barrier', 'folk', 'offense', 'mud', 'log', 'wound', 'jury', 'plane']), false)",
			"Test.assertEquals(wordSearch2('OJODAORGFRIENDLYNEEBMOBIIGASOKVCAUGFDWIATLNIFZDMNALKYEOPURCOMRET', ['zero', 'road', 'fountain', 'fool', 'bow', 'friendly', 'regular', 'bin', 'camp', 'not']), true)",
			"Test.assertEquals(wordSearch2('IEYPINAHYFCNHMVUOOHAOENTLARCRMAYNSTISLENHCUBENMRMORUGDUPKECHUDIS', ['hut', 'dump', 'mean', 'ceremony', 'disk', 'pin', 'horse', 'fee', 'harsh', 'comma']), false)",
			"Test.assertEquals(wordSearch2('OPCASHENAVSUNDEWKFGEAMONPEHSEBMILRCRMKCTAITOUBLWNXAVIEOAEHRGESOY', ['monk', 'plane', 'tin', 'mean', 'sow', 'way', 'wait', 'bow', 'scratch', 'extreme']), true)",
			"Test.assertEquals(wordSearch2('EDATEBPEUROMCROPLDAIAAPEACSNHIERENSSTNFAEPEROTSLHOMFAROIPREDICTL', ['tolerant', 'deep', 'fan', 'predict', 'store', 'sleep', 'pop', 'brain', 'bet', 'mess']), false)",
			"Test.assertEquals(wordSearch2('ANEIOLDRDICHWUHTLNHMGSWTAWEAAEOEIGCFORCGNEKREUGOCTLTPDLIHYAOITNL', ['inch', 'old', 'rotate', 'cow', 'margin', 'oil', 'result', 'check', 'lot', 'defend']), true)",
			"Test.assertEquals(wordSearch2('DATERMSOEBIUSECUBINWOAOSETCYOHMTSNTESTSIPIONCHAMKNYKUDNEHSEYARTA', ['instinct', 'terms', 'end', 'time', 'champion', 'test', 'shout', 'bed', 'kit', 'ash']), false)",
			"Test.assertEquals(wordSearch2('ITNESSAWTIECROFIHBESCWNLEAPTREIDBHMNEWNGOFCIWIOUCPNNXRBEYILENERG', ['crew', 'habit', 'witness', 'index', 'tip', 'energy', 'wild', 'nun', 'mix', 'force']), true)",
			"Test.assertEquals(wordSearch2('TPEHNAPNRLATEMAHCOMPOUNDEVECOGDIYRIBEFLNOARSUAKSLEOKWFAENNNSITNW', ['metal', 'leaf', 'iron', 'rib', 'compound', 'wine', 'sit', 'complain', 'nose', 'ask']), false)"
		],
		"starterFn": [
			"1\nfunction wordSearch2(letters, words) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/PxjMBvGwp75dBqXpi"
	},
	{
		"title": "Hidden in Plain Sight",
		"description": "<p><span>This challenge makes use of a modified </span><strong><span>Baconian</span></strong><span> (Francis Bacon) </span><strong><span>cipher</span></strong><span>. The following is an example of a (modified) Baconian ciphertext:</span></p><pre><code>ciphertext = \"KNowlEDgE ITsElf Is power.\"</code></pre><p><span>The peculiar capitalisation might, at first glance, suggest that either the lowercase or uppercase letters contain, or code for, the hidden message (upper = \"KNEDEITEI\", lower = \"owlgslfspower\").</span></p><p><span>But actually, the Baconian cipher is a </span><em><span>steganographic</span></em><span> method of hiding information. The hidden message is not in the content of the ciphertext, but rather in the </span><em><span>presentation</span></em><span>. It doesn't matter which letters are capitalised, just the order of the capitalisation.</span></p><p><span>To decipher the ciphertext above, remove spaces and punctuation, then cleave the message into chunks of length 5, leaving out the remainder:</span></p><pre><code>ciphertext = \"KNowl EDgEI TsElf Ispow\"</code></pre><p><span>Each chunk represents a letter. Decipher them according to the following table (\"u\" means uppercase, \"l\" means lowercase):</span></p><table><thead><tr><th><span>Letter</span></th><th><span>Pattern</span></th></tr></thead><tbody><tr><td><span>a</span></td><td><span>uuuuu</span></td></tr><tr><td><span>b</span></td><td><span>uuuul</span></td></tr><tr><td><span>c</span></td><td><span>uuulu</span></td></tr><tr><td><span>d</span></td><td><span>uuull</span></td></tr><tr><td><span>e</span></td><td><span>uuluu</span></td></tr><tr><td><span>f</span></td><td><span>uulul</span></td></tr><tr><td><span>g</span></td><td><span>uullu</span></td></tr><tr><td><span>h</span></td><td><span>uulll</span></td></tr><tr><td><span>i</span></td><td><span>uluuu</span></td></tr><tr><td><span>j</span></td><td><span>uluul</span></td></tr><tr><td><span>k</span></td><td><span>ululu</span></td></tr><tr><td><span>l</span></td><td><span>ulull</span></td></tr><tr><td><span>m</span></td><td><span>ulluu</span></td></tr><tr><td><span>n</span></td><td><span>ullul</span></td></tr><tr><td><span>o</span></td><td><span>ulllu</span></td></tr><tr><td><span>p</span></td><td><span>ullll</span></td></tr><tr><td><span>q</span></td><td><span>luuuu</span></td></tr><tr><td><span>r</span></td><td><span>luuul</span></td></tr><tr><td><span>s</span></td><td><span>luulu</span></td></tr><tr><td><span>t</span></td><td><span>luull</span></td></tr><tr><td><span>u</span></td><td><span>luluu</span></td></tr><tr><td><span>v</span></td><td><span>lulul</span></td></tr><tr><td><span>w</span></td><td><span>lullu</span></td></tr><tr><td><span>x</span></td><td><span>lulll</span></td></tr><tr><td><span>y</span></td><td><span>lluuu</span></td></tr><tr><td><span>z</span></td><td><span>lluul</span></td></tr><tr><td><span>.</span></td><td><span>llllu</span></td></tr><tr><td></td><td><span>lllll</span></td></tr></tbody></table><pre><code>deciphered = \"help\"</code></pre><p><span>Create a function that takes 1 or 2 arguments:</span></p><ol><li><span>A Baconian ciphertext or a plaintext message to be enciphered: </span><code>msg</code><span>.</span></li><li><span>A background text in which the message is to be hidden: </span><code>mask</code><span>.</span></li></ol><p><span>If only one argument is given (ciphertext), return the deciphered message (in lowercase, with spaces and full stops as encoded).</span></p><p><span>If a second argument is given, encipher the first argument </span><code>msg</code><span> into the </span><code>mask</code><span>, and return the resulting ciphertext. When enciphering, encipher full stops and spaces along with the words. Disregard the rest. The ciphertext itself should retain </span><em><span>all</span></em><span> the punctuation and spaces of the original </span><code>mask</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>baconify(\"KNowlEDgE ITsElf Is power.\") ➞ \"help\"\n\nbaconify(\"Help me.\", \"Man prefers to believe what he prefers to be true.\") ➞ \"MAn prEFeRS To BelIeve what he PreFERS tO Be truE.\"\n// Both the space (between \"help\" and \"me\") and the full stop at the end are enciphered.\n\nbaconify(\"Help!!!\", \"Knowledge itself is power.\") ➞ \"KNowlEDgE ITsElf Is power.\"\n// Exclamation marks not enciphered, so the resulting ciphertext is identical to the first example.</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"conditions",
			"cryptography",
			"loops",
			"strings"
		],
		"tests": [
			"Test.assertEquals(baconify(\"KNowlEDgE ITsElf Is power.\"), \"help\")",
			"Test.assertEquals(baconify(\"Help me.\", \"Man prefers to believe what he prefers to be true.\"), \"MAn prEFeRS To BelIeve what he PreFERS tO Be truE.\")",
			"Test.assertEquals(baconify(\"THE GenERAl ROOT OF suPerstitIOn: nAMElY, ThAT men OBsErve wheN ThiNGs hiT, AnD Not wheN tHEY mISS; aNd coMMit To memory THe oNE, and fORGeT and PAss OvER tHE otheR. man preFerS tO BelIEvE what he prefers to be true.\"), \"bran gets the iron throne. wtf    \")",
			"Test.assertEquals(baconify(\"Bran gets the Iron Throne. WTF?!\", \"The general root of superstition: namely, that men observe when things hit, and not when they miss; and commit to memory the one, and forget and pass over the other. Man prefers to believe what he prefers to be true.\"), \"THE GenERAl ROOT OF suPerstitIOn: nAMElY, ThAT men OBsErve wheN ThiNGs hiT, AnD Not wheN tHEY mISS; aNd coMMit To memory THe oNE, and fORGeT and PAss OvER tHE otheR. man preFerS tO BelIEvE what he prefers to be true.\")",
			"Test.assertEquals(baconify(\"knowledge itself is power.\"), \"    \")",
			"Test.assertEquals(baconify(\"Snape kills Dumbledore at Dumbledore's behest.\", \"Philosophy when superficially studied, excites doubt, when thoroughly explored, it dispels it. The root of all superstition is that men observe when a thing hits, but not when it misses. It is a sad fate for a man to die too well known to everybody else, and still unknown to himself.\"), \"pHIlOSopHy WHEN SUperfICiALly stuDiEd, EXcITES dOubT, wHen tHOrOughly EXPlorEd, IT DisPELS IT. tHe RooT Of ALL SUpeRstiTiON Is THaT Men obsERVE WhEN a thing hITS, but NoT WHen IT MISSeS. iT is A SaD FATE foR a maN tO DIe TOo WElL KnOwn to eVERYbODy ELSE, and STiLL uNKnOwN To himseLf.\")"
		],
		"starterFn": [
			"1\nfunction baconify(msg, mask) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/MgfXZBKfTyPqSafh3"
	},
	{
		"title": "The Mysterious Number 6174",
		"description": "<p><span>The number 6174 is a really mysterious number. At first glance, it might not seem so obvious. But as we are about to see, anyone who can subtract can uncover the mystery that makes 6174 so special.</span></p><p><span>In 1949 the mathematician D. R. Kaprekar devised a process now known as Kaprekar's operation. First choose a four digit number where the digits are not all the same (that is not 1111, 2222, and so on). Then rearrange the digits to get the largest and smallest numbers these digits can make. Finally, subtract the smallest number from the largest to get a new number, and carry on repeating the operation for each new number.</span></p><p><span>It is a simple operation, but Kaprekar discovered it led to a surprising result: When we reach 6174 the operation repeats itself, returning 6174 every time. In fact, you reach 6174 for all four digit numbers that don't have all the digits the same. It's marvellous. Kaprekar's operation is so simple but uncovers such an interesting result.</span></p><h3><span>Objective</span></h3><p><span>Create a function that takes a four digit number as an argument and returns the numbers of iterations needed to reach the number 6174, as well as a print of each iteration. If the number is a repdigit, the function must return a message to the user.</span></p><h3><span>Important</span></h3><ul><li><span>If in any iteration you have a 1-digit, 2-digits or 3-digits number, add leading zeros for the calculations and the prints. Please see example below where n = 1.</span></li><li><span>Based on the point mentioned before, you can expect, for example, that the numbers 1 and 1000 will lead to the same iterations.</span></li></ul><h3><span>Examples</span></h3><pre><code>Kaprekar(1234) ➞\n\"---------- The Mysterious Number 6174 ----------\n\nNumber of iterations: 3\n\nIterations:\n\nIteration Nr. 1: 4321 - 1234 = 3087\nIteration Nr. 2: 8730 - 0378 = 8352\nIteration Nr. 3: 8532 - 2358 = 6174\n\n------------------------------------------------\"\n\n\nKaprekar(2005) ➞\n\"---------- The Mysterious Number 6174 ----------\n\nNumber of iterations: 7\n\nIterations:\n\nIteration Nr. 1: 5200 - 0025 = 5175\nIteration Nr. 2: 7551 - 1557 = 5994\nIteration Nr. 3: 9954 - 4599 = 5355\nIteration Nr. 4: 5553 - 3555 = 1998\nIteration Nr. 5: 9981 - 1899 = 8082\nIteration Nr. 6: 8820 - 0288 = 8532\nIteration Nr. 7: 8532 - 2358 = 6174\n\n------------------------------------------------\"\n\n\nKaprekar(8888) ➞\n\"---------- The Mysterious Number 6174 ----------\n\nError, n cannot be a repdigit.\n\n------------------------------------------------\"\n\n\nKaprekar(1) ➞\n\"---------- The Mysterious Number 6174 ----------\n\nNumber of iterations: 5\n\nIterations:\n\nIteration Nr. 1: 1000 - 0001 = 0999\nIteration Nr. 2: 9990 - 0999 = 8991\nIteration Nr. 3: 9981 - 1899 = 8082\nIteration Nr. 4: 8820 - 0288 = 8532\nIteration Nr. 5: 8532 - 2358 = 6174\n\n------------------------------------------------\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(Kaprekar(1234), '\\n---------- The Mysterious Number 6174 ----------\\n' +",
			"'\\nNumber of iterations: 3\\n' + ",
			"'\\nIterations:\\n' +",
			"'\\n' +",
			"'Iteration Nr. 1: 4321 - 1234 = 3087\\n' +",
			"'Iteration Nr. 2: 8730 - 0378 = 8352\\n' +",
			"'Iteration Nr. 3: 8532 - 2358 = 6174\\n' +",
			"'\\n------------------------------------------------')",
			"​",
			"Test.assertEquals(Kaprekar(2005), '\\n---------- The Mysterious Number 6174 ----------\\n' +",
			"'\\nNumber of iterations: 7\\n' + ",
			"'\\nIterations:\\n' +",
			"'\\n' +",
			"'Iteration Nr. 1: 5200 - 0025 = 5175\\n' +",
			"'Iteration Nr. 2: 7551 - 1557 = 5994\\n' +",
			"'Iteration Nr. 3: 9954 - 4599 = 5355\\n' +",
			"'Iteration Nr. 4: 5553 - 3555 = 1998\\n' +",
			"'Iteration Nr. 5: 9981 - 1899 = 8082\\n' +",
			"'Iteration Nr. 6: 8820 - 0288 = 8532\\n' +",
			"'Iteration Nr. 7: 8532 - 2358 = 6174\\n' +",
			"'\\n------------------------------------------------')",
			"​",
			"Test.assertEquals(Kaprekar(1), '\\n---------- The Mysterious Number 6174 ----------\\n' +",
			"'\\nNumber of iterations: 5\\n' + ",
			"'\\nIterations:\\n' +",
			"'\\n' +"
		],
		"starterFn": [
			"1\nfunction Kaprekar(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/988Y5LdWPqvnv2Dzn"
	},
	{
		"title": "Postfix Notation (Part 2: Infix to Postfix)",
		"description": "<p><span>Given a string representing an infix expression, return the </span><em><span>postfix</span></em><span> equivalent. The operands stay in their original order, and any parentheses are removed. Only the operator order is changed. Operands and operators will be separated by a single space, with the exception of parentheses (see examples).</span></p><h3><span>Examples</span></h3><pre><code>infixToPostfix(\"7 + 3\") ➞ \"7 3 +\"\n\ninfixToPostfix(\"(8 + 4) / 4\") ➞ \"8 4 + 4 /\"\n\ninfixToPostfix(\"4 * (5 - (7 + 2))\") ➞ \"4 5 7 2 + - *\"\n\ninfixToPostfix(\"3 + 4 ** 2\") ➞ \"3 4 2 ** +\"</code></pre><h3><span>Notes</span></h3><p><span>Converting infix expressions to postfix expressions is an example of </span><em><span>operator-precedence parsing</span></em><span>, the most famous of which is Dijkstra's </span><em><span>\"shunting-yard\"</span></em><span> algorithm (see the resources tab for more information).</span></p>",
		"publishedBy": "zatoichi49",
		"publishedByUrl": "https://edabit.com/user/tAF9Gf6PiGogbZuWs",
		"language": "JavaScript",
		"tags": [
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(infixToPostfix(\"8 + 1\"), \"8 1 +\")",
			"Test.assertEquals(infixToPostfix(\"9 / 3\"), \"9 3 /\")",
			"Test.assertEquals(infixToPostfix(\"8 + 2 * 5\"), \"8 2 5 * +\")",
			"Test.assertEquals(infixToPostfix(\"(8 + 2) * 5\"), \"8 2 + 5 *\")",
			"Test.assertEquals(infixToPostfix(\"1 + 2 + 3 + 4 + 5\"), \"1 2 + 3 + 4 + 5 +\")",
			"Test.assertEquals(infixToPostfix(\"3 * (12 / (32 / 8))\"), \"3 12 32 8 / / *\")",
			"Test.assertEquals(infixToPostfix(\"2 + 3 * 1 - 9\"), \"2 3 1 * + 9 -\")",
			"Test.assertEquals(infixToPostfix(\"(3 + 4) * 2 / 7\"), \"3 4 + 2 * 7 /\")",
			"Test.assertEquals(infixToPostfix(\"4 * (5 - (7 + 2))\"), \"4 5 7 2 + - *\")",
			"Test.assertEquals(infixToPostfix(\"(10 + 8 - 3 * 4) / 6\"), \"10 8 + 3 4 * - 6 /\")",
			"Test.assertEquals(infixToPostfix(\"13 + (6 + 7 - 8 / (4 * 9))\"), \"13 6 7 + 8 4 9 * / - +\")",
			"Test.assertEquals(infixToPostfix(\"(5 - 7) * (6 + 9)\"), \"5 7 - 6 9 + *\")",
			"Test.assertEquals(infixToPostfix(\"(6 + 2) * 5 - 8 / 4\"), \"6 2 + 5 * 8 4 / -\")",
			"Test.assertEquals(infixToPostfix(\"9 * 2 + 3 - 12\"), \"9 2 * 3 + 12 -\")",
			"Test.assertEquals(infixToPostfix(\"6 - (4 + 18 / (2 + 7))\"), \"6 4 18 2 7 + / + -\")",
			"Test.assertEquals(infixToPostfix(\"3 * (10 + 5)\"), \"3 10 5 + *\")",
			"Test.assertEquals(infixToPostfix(\"(8 + 1 + 3) * 7 - 6\"), \"8 1 + 3 + 7 * 6 -\")",
			"Test.assertEquals(infixToPostfix(\"(3 + 2) * (15 / 3 - 8)\"), \"3 2 + 15 3 / 8 - *\")",
			"Test.assertEquals(infixToPostfix(\"10 / (7 - (8 / 4)) * 6 + 3 - (5 * 4)\"), \"10 7 8 4 / - / 6 * 3 + 5 4 * -\")",
			"Test.assertEquals(infixToPostfix(\"(6 - 45) / (3 + 12) * 6 / 2\"), \"6 45 - 3 12 + / 6 * 2 /\")"
		],
		"starterFn": [
			"1\nfunction infixToPostfix(expr) {",
			"2\n​",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/zMFPww26fHYGor3Zv"
	},
	{
		"title": "Recursion: First Recurrence Index",
		"description": "<p><span>Create a </span><strong><span>recursive</span></strong><span> function that identifies the very first item that has recurred in the string argument passed. It returns the identified item with the index where it </span><strong><span>first appeared</span></strong><span> and the very next index where it </span><strong><span>resurfaced</span></strong><span> - entirely as an object; or an empty object if the passed argument is either </span><code>null</code><span>, </span><code>undefined</code><span>, </span><em><span>empty</span></em><span> string, or no recurring item exists.</span></p><h3><span>Examples</span></h3><pre><code>recurIndex(\"KDXTDATTDD\") ➞ {\"D\": [1, 4]}\n// D first appeared at index 1, resurfaced at index 4\n//  though D resurfaced yet again at index 8, it's no longer significant\n// T appeared and resurfaced at indices 3 and 6 but D completed the cycle first\n\nrecurIndex(\"AKEDCBERSD\") ➞ {\"E\": [2, 6]}\n\nrecurIndex(\"DXKETRETXD\") ➞ {\"E\": [3, 6]}\n\nrecurIndex(\"ABCKPEPGBC\") ➞ {\"P\": [4, 6]}\n\nrecurIndex(\"ABCDEFGHIJ\") ➞ {}\n\nrecurIndex(undefined) ➞ {}</code></pre><h3><span>Notes</span></h3><ul><li><span>It is expected from the challenge-takers to come up with a solution using the concept of </span><strong><span>recursion</span></strong><span> or the so-called </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read on more topics about recursion (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or hasn't fully understood the concept behind it before taking up this challenge or unless otherwise.</span></li><li><span>There will be no exceptions to handle, all inputs are strings and string-like objects. You just need to be extra careful on </span><code>null</code><span>, </span><code>undefined</code><span> and </span><em><span>empty</span></em><span> string inputs to avoid an </span><strong><span>Uncaught RangeError</span></strong><span> or exceededing the maximum call size of the stack.</span></li><li><span>A non-recursive version of this challenge  can be found </span><a target=\"_blank\" href=\"https://edabit.com/challenge/y8fTF8GBMAXTdkrkH\"><span>here</span></a><span>.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"arrays",
			"objects",
			"recursion"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(recurIndex), true)",
			"Test.assertNotEquals(recursive(recurIndex), false, 'Recursion is required!')",
			"​",
			"let [strVectors, objRes] = [[",
			"  'KDXTDATTDD', 'AKEDCBERSD', 'DXKETRETXD', 'ABCKPEPGBC',",
			"  'ABCDEFGHIJ', undefined, 'DXTDDTXD', 'XYZETUVXWVU',",
			"  'YZTQMNTERXHQRX', 'ARDECBSDER', '', 'ABCDEFGABCD', null, 'KLMNONMLK'],",
			"  [{\"D\": [1, 4]}, {\"E\": [2, 6]}, {\"E\": [3, 6]}, {\"P\": [4, 6]},",
			"  {}, {}, {\"D\": [0, 3]}, {\"X\": [0, 7]},",
			"  {\"T\": [2, 6]}, {\"D\": [2, 7]}, {}, {\"A\": [0, 7]}, {}, {\"N\": [3, 5]}",
			"]]",
			"for (let i in strVectors) Test.assertSimilar(recurIndex(strVectors[i]), objRes[i])"
		],
		"starterFn": [
			"1\nfunction recurIndex(s) {",
			"2\n  // your recursive implementation of the code",
			"3\n  return recurIndex(s)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/bKp8TCCy5fmZGzRec"
	},
	{
		"title": "ES6: Recursive String Builder",
		"description": "<p><span>Write a </span><code>getStringBuilder()</code><span> function that returns an object. Any arbitrary property of that object will also be an object as will the properties of that object. </span><em><span>Recursively.</span></em><span>\nInvoking any of the child objects should return a string generated from the entire property chain.</span></p><h3><span>Examples</span></h3><pre><code>getStringBuilder().Hello.there() ➞ \"Hello there\"\n\ngetStringBuilder().one.two.three.four() ➞ \"one two three four\"\n\ngetStringBuilder().we.live.in.a.society() ➞ \"we live in a society\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Kenny Fraser",
		"publishedByUrl": "https://edabit.com/user/jWW9YLuYPdAR6uR4c",
		"language": "JavaScript",
		"tags": [
			"recursion",
			"strings"
		],
		"tests": [
			"Test.assertEquals(getStringBuilder().hello.how.are.you.today(), 'hello how are you today')",
			"Test.assertEquals(getStringBuilder().Hello.there(), 'Hello there')",
			"Test.assertEquals(getStringBuilder().one.two.three.four(), 'one two three four')",
			"Test.assertEquals(getStringBuilder().we.live.in.a.society(), 'we live in a society')",
			"Test.assertEquals(getStringBuilder().today.is.the.greatest.day.I.have.ever.known(), 'today is the greatest day I have ever known')",
			"Test.assertEquals(getStringBuilder().there.are.only.two.hard.things.in.Computer.Science.cache.invalidation.and.naming.things(), 'there are only two hard things in Computer Science cache invalidation and naming things')"
		],
		"starterFn": [
			"1\nconst getStringBuilder = () => {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/LMkhSsuCgpHYm8fCS"
	},
	{
		"title": "Roll the Dice",
		"description": "<p><span>Las Vegas style dice have 6 sides numbered 1 to 6. When rolling 2 dice, a six is 5 times more likely than a two because a six can be rolled 5 different ways (1 + 5, 5 + 1, 2 + 4, 4 + 2, 3 + 3), while a two can only be rolled 1 way (1 + 1).</span></p><p><span>Create a function that accepts two arguments:the number of dice rolled, and the outcome of the roll. The function returns the number of possible combinations that could produce that outcome. The number of dice can vary from 1 to 6.</span></p><p><span>For the example given above:</span></p><ul><li><code>diceRoll(2, 6)</code><span> would return </span><code>5</code></li><li><code>diceRoll(2, 2)</code><span> would return </span><code>1</code></li></ul><h3><span>Examples</span></h3><pre><code>diceRoll(1, 3) ➞ 1\n\ndiceRoll(2, 5) ➞ 4\n// 1 + 4, 4 + 1, 2 + 3, 3 + 2\n\ndiceRoll(3, 4) ➞ 3\n// 1 + 1 + 2, 1 + 2 + 1, 2 + 1 + 1\n\ndiceRoll(4, 18) ➞ 80\n\ndiceRoll(6, 20) ➞ 4221</code></pre><h3><span>Notes</span></h3><p><span>1 + 5 and 5 + 1 are distinct combinations because die #1 can show 1 while die #2 can show 5, or die #1 can show 5 while die #2 can show 1.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(diceRoll(1, 6), 1)",
			"Test.assertEquals(diceRoll(2, 2), 1)",
			"Test.assertEquals(diceRoll(2, 9), 4)",
			"Test.assertEquals(diceRoll(3, 7), 15) ",
			"Test.assertEquals(diceRoll(3, 18), 1)",
			"Test.assertEquals(diceRoll(4, 11), 104)",
			"Test.assertEquals(diceRoll(4, 21), 20)",
			"Test.assertEquals(diceRoll(5, 6), 5)",
			"Test.assertEquals(diceRoll(5, 26), 70)",
			"Test.assertEquals(diceRoll(6, 6), 1)",
			"Test.assertEquals(diceRoll(6, 21), 4332)",
			"Test.assertEquals(diceRoll(6, 31), 252)"
		],
		"starterFn": [
			"1\nfunction diceRoll(n, outcome) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/ui84rYueQBxH9jCwE"
	},
	{
		"title": "Playfair Cipher",
		"description": "<p><span>The </span><strong><span>Playfair cipher</span></strong><span> is a substitution cipher that uses digraphs (pairs of letters) instead of single letters, and makes use of symmetrical encryption.</span></p><p><span>There are some variations on the rules of encipherment. One version of the cipher\nrules is outlined below:</span></p><ol><li><span>A 5x5 </span><em><span>Polybius square</span></em><span> is constructed, </span><em><span>deranged</span></em><span> with a keyword.</span></li></ol><pre><code>keyword = python</code></pre><ul><li><p><span>First, fill in the keyword at the top of the grid, omitting any duplicates (3rd example's keyword has two occurrences of \"h\". The second one should be omitted).</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>P</span></td><td><span>Y</span></td><td><span>T</span></td><td><span>H</span></td><td><span>O</span></td></tr><tr><td><span>N</span></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></li><li><p><span>Next, fill in the rest of the slots with the leftover letters of the alphabet that are not in the keyword. Classically, \"I\" and \"J\" share a slot (some people elect to omit \"Q\", \"V\", or \"Z\" instead).</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>P</span></td><td><span>Y</span></td><td><span>T</span></td><td><span>H</span></td><td><span>O</span></td></tr><tr><td><span>N</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td></tr><tr><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>I/J</span></td><td><span>K</span></td></tr><tr><td><span>L</span></td><td><span>M</span></td><td><span>Q</span></td><td><span>R</span></td><td><span>S</span></td></tr><tr><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Z</span></td></tr></tbody></table></li></ul><ol start=\"2\"><li><span>Remove spaces and punctuation from the message to be enciphered. Then break it up into two-letter chunks (digraphs):</span></li></ol><pre><code>message = \"Tomorrow we attack.\"\n\nmessage = \"tomorrowweattack\"\n\nmessage = \"to mo rr ow we at ta ck\"</code></pre><ol start=\"3\"><li><span>Digraphs must have two </span><em><span>distinct</span></em><span> letters. If any digraph consists of the same letter, insert an \"x\" between them and shift the pairings to the right. Repeat as necessary until all double letters are eliminated. If the resulting message has an odd number of letters, add an \"x\" to the end.</span></li></ol><pre><code>message = \"to mo rx ro ww ea tt ac k\"</code></pre><p><span>  Note how shifting the pairings rightward after inserting an 'x' after the first 'r' has created two more double letter digraphs. Correct them sequentially.</span></p><pre><code>message = \"to mo rx ro wx we at ta ck\"</code></pre><p><span>This insertion corrected both double letter digraphs, and evened out the message length. No more changes are necessary.</span></p><ol start=\"4\"><li><span>Encipher each digraph into a different digraph by following these 3 rules of encipherment:</span></li></ol><ul><li><span>If the two letters are on the same row, as is the case for the first digraph \"to\", replace each letter with the letter to its right, wrapping around to the beginning of the row if necessary.</span></li></ul><pre><code>to -&gt; hp</code></pre><ul><li><span>If the two letters are on the same column, as in the third digraph \"rx\",  replace each letter with the letter beneath it, wrapping around to the top if necessary</span></li></ul><pre><code>rx -&gt; xh</code></pre><ul><li><p><span>If the two letters have dissimilar rows and columns, as in the second digraph \"mo\", visualise a rectangle with these letters at </span><em><span>opposite</span></em><span> vertices, then find the other two vertices. Replace each letter with the vertex sharing its row. The original letters are rendered in bold below. The cipher letters are italicised and bolded.</span></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><span>P</span></td><td><strong><em><span>Y</span></em></strong></td><td><span>T</span></td><td><span>H</span></td><td><strong><span>O</span></strong></td></tr><tr><td><span>N</span></td><td><span>A</span></td><td><span>B</span></td><td><span>C</span></td><td><span>D</span></td></tr><tr><td><span>E</span></td><td><span>F</span></td><td><span>G</span></td><td><span>I/J</span></td><td><span>K</span></td></tr><tr><td><span>L</span></td><td><strong><span>M</span></strong></td><td><span>Q</span></td><td><span>R</span></td><td><strong><em><span>S</span></em></strong></td></tr><tr><td><span>U</span></td><td><span>V</span></td><td><span>W</span></td><td><span>X</span></td><td><span>Z</span></td></tr></tbody></table></li></ul><pre><code>mo -&gt; sy\n\n\"to mo rx ro wx we at ta ck\" -&gt; \"hp sy xh sh xz ug by yb di\"</code></pre><p><span>Create a function that takes two strings — a plaintext message or ciphertext </span><code>str</code><span>, and a </span><code>keyword</code><span> — and returns the corresponding ciphertext or deciphered plaintext (without spaces and with \"x\" in odd places as appropriate).</span></p><h3><span>Examples</span></h3><pre><code>playfair(\"Tomorrow we attack.\", \"python\") ➞ \"HPSYXHSHXZUGBYYBDI\"\n\nplayfair(\"HPSYXHSHXZUGBYYBDI\", \"python\") ➞ \"TOMORXROWXWEATTACK\"\n\nplayfair(\"MYDZABIFBMENFEQAAE\", \"rhythm\") ➞ \"THEXEAGLEHASLANDED\"</code></pre><h3><span>Notes</span></h3><p><span>Check the </span><strong><span>Resources</span></strong><span> tab if the explanations here are unclear.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"cryptography",
			"loops"
		],
		"tests": [
			"Test.assertEquals(playfair(\"Tomorrow we attack.\", \"python\"), \"HPSYXHSHXZUGBYYBDI\")",
			"Test.assertEquals(playfair(\"HPSYXHSHXZUGBYYBDI\", \"python\"), \"TOMORXROWXWEATTACK\")",
			"Test.assertEquals(playfair(\"The eagle has landed.\", \"rhythm\"), \"MYDZABIFBMENFEQAAE\")",
			"Test.assertEquals(playfair(\"MYDZABIFBMENFEQAAE\", \"rhythm\"), \"THEXEAGLEHASLANDED\")",
			"Test.assertEquals(playfair(\"Code Red: The seagull has hovered.\", \"cryptic\"), \"YMEITAEPLBZLGNZFFKENOWZATAKP\")",
			"Test.assertEquals(playfair(\"YMEITAEPLBZLGNZFFKENOWZATAKP\", \"cryptic\"), \"CODEREDTHESEAGULLHASHOVEREDX\")",
			"Test.assertEquals(playfair(\"My cousin and I were playing catch and I tossed him too high on the roof and then I came up. And now we both need...\", \"cowandchicken\"), \"LZOWYPEWNCHKNITISBKAEWBWNSODNCHKQNRYTKHIEGQNHFGRFHEZIDQWHQNCEPIDWEONTMCUNCECWANIFCQEEMDH\")",
			"Test.assertEquals(playfair(\"LZOWYPEWNCHKNITISBKAEWBWNSODNCHKQNRYTKHIEGQNHFGRFHEZIDQWHQNCEPIDWEONTMCUNCECWANIFCQEEMDH\", \"cowandchicken\"), \"MYCOUSINANDIWEREPLAYINGCATCHANDITOSXSEDHIMTOOHIGHONTHEROOFANDTHENICAMEUPANDNOWWEBOTHNEED\")"
		],
		"starterFn": [
			"1\nfunction playfair(str, keyword) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/fdnrNxCkouvW38iw9"
	},
	{
		"title": "Say the Number!",
		"description": "<p><span>Create a function that takes a numeral (just digits without separators (e.g. 19093 instead of 19,093) and returns the standard way of reading a number, complete with punctuation.</span></p><h3><span>Examples</span></h3><pre><code>sayNumber(0) ➞ \"Zero.\"\n\nsayNumber(11) ➞ \"Eleven.\"\n\nsayNumber(1043283) ➞ \"One million, forty three thousand, two hundred and eighty three.\"\n\nsayNumber(90376000010012) ➞ \"Ninety trillion, three hundred and seventy six billion, ten thousand and twelve.\"</code></pre><h3><span>Notes</span></h3><p><span>Must read any number from 0 to 999,999,999,999,999.</span></p>",
		"publishedBy": "Matt",
		"publishedByUrl": "https://edabit.com/user/BkPgkDQGHm66X4Qai",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"data_structures",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(sayNumber(0), \"Zero.\")",
			"Test.assertEquals(sayNumber(11), \"Eleven.\")",
			"Test.assertEquals(sayNumber(14), \"Fourteen.\")",
			"Test.assertEquals(sayNumber(15), \"Fifteen.\")",
			"Test.assertEquals(sayNumber(43), \"Forty-three.\")",
			"Test.assertEquals(sayNumber(50), \"Fifty.\")",
			"Test.assertEquals(sayNumber(1001), \"One thousand and one.\")",
			"Test.assertEquals(sayNumber(20000), \"Twenty thousand.\")",
			"Test.assertEquals(sayNumber(1033286), \"One million, thirty-three thousand, two hundred and eighty-six.\")",
			"Test.assertEquals(sayNumber(12000013), \"Twelve million and thirteen.\")",
			"Test.assertEquals(sayNumber(90376000010012), \"Ninety trillion, three hundred and seventy-six billion, ten thousand and twelve.\")"
		],
		"starterFn": [
			"1\nfunction sayNumber(num) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/4E9gTrRWErpTCA2FQ"
	},
	{
		"title": "Puzzle: Gather and Order",
		"description": "<p><span>Create a </span><code>gather</code><span> function that accepts a string argument and returns another function.\nThe function calls should support continued chaining until </span><code>order</code><span> is called.</span></p><p><code>order</code><span> should accept a number as an argument and return another function. The function calls should support continued chaining until </span><code>get</code><span> is called.</span></p><p><code>get</code><span> should return all of the arguments provided to the gather functions as a string in the order specified in the order functions.</span></p><h3><span>Examples</span></h3><pre><code>gather(\"a\")(\"b\")(\"c\").order(0)(1)(2).get() ➞ \"abc\"\n\ngather(\"a\")(\"b\")(\"c\").order(2)(1)(0).get() ➞ \"cba\"\n\ngather(\"e\")(\"l\")(\"o\")(\"l\")(\"!\")(\"h\").order(5)(0)(1)(3)(2)(4).get()  ➞ \"hello\"</code></pre><h3><span>Notes</span></h3><p><span>Expect </span><code>gather</code><span> and </span><code>order</code><span> to chain any number of times, but always with the same number of invocations for each (i.e both fuctions will always be chained the same nubmer of times).</span></p>",
		"publishedBy": "Kenny Fraser",
		"publishedByUrl": "https://edabit.com/user/jWW9YLuYPdAR6uR4c",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"higher_order_functions",
			"recursion",
			"scope"
		],
		"tests": [
			"Test.assertEquals(gather(\"a\")(\"b\")(\"c\").order(0)(1)(2).get(), \"abc\")",
			"Test.assertEquals(gather(\"a\")(\"b\")(\"c\").order(2)(1)(0).get(), \"cba\")",
			"Test.assertEquals(gather(\"a\")(\"b\")(\"c\")(\"d\")(\"e\")(\"f\").order(1)(0)(2)(3)(4)(5).get(), \"bacdef\")",
			"Test.assertEquals(gather(\"h\")(\"i\")(\"j\")(\"k\")(\"l\")(\"m\").order(0)(4)(3)(5)(1)(2).get(), \"hlkmij\")",
			"Test.assertEquals(gather(\"e\")(\"l\")(\"o\")(\"l\")(\"!\")(\"h\").order(5)(0)(1)(3)(2)(4).get(), \"hello!\")",
			"Test.assertEquals(gather(\"e\")(\"a\")(\"d\")(\"b\")(\"i\")(\"!\")(\"t\")(\"!\").order(0)(2)(1)(3)(4)(6)(5)(7).get(), \"edabit!!\")"
		],
		"starterFn": [
			"1\nfunction gather(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/Yr5RgqT7bfdSscfbK"
	},
	{
		"title": "Number of Lucky Tickets",
		"description": "<p><span>Create a function that counts how many n-digit numbers have the same sum of the first half and second half of the digits (“lucky” numbers). The number </span><code>n</code><span> is </span><strong><span>even</span></strong><span>. For example, for </span><code>n = 6</code><span>, the numbers \"001010\", \"112220\", \"000000\" are lucky.</span></p><h3><span>Examples</span></h3><pre><code>luckyTicket(2) ➞ 10\n\nluckyTicket(4) ➞ 670\n\nluckyTicket(12) ➞ 39581170420</code></pre><h3><span>Notes</span></h3><p><span>There are checks for </span><code>n &gt; 10</code><span>, so watch out for code performance.</span></p>",
		"publishedBy": "BlackJack007",
		"publishedByUrl": "https://edabit.com/user/3qfdbT7qWZLXAZe5W",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(luckyTicket(2), 10)",
			"Test.assertEquals(luckyTicket(4), 670)",
			"Test.assertEquals(luckyTicket(6), 55252)",
			"Test.assertEquals(luckyTicket(8), 4816030)",
			"Test.assertEquals(luckyTicket(10), 432457640)",
			"Test.assertEquals(luckyTicket(12), 39581170420)",
			"Test.assertEquals(luckyTicket(14), 3671331273480)"
		],
		"starterFn": [
			"1\nfunction luckyTicket(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/7K29bH8da9sQ6g8T6"
	},
	{
		"title": "Recursion: Farey Sequence 2.0",
		"description": "<p><span>The Farey sequence of order </span><code>n</code><span> is the set of all fractions with a denominator between </span><code>1</code><span> and </span><code>n</code><span> (reduced to its lowest terms and ordered ascendingly). Given an </span><code>n</code><span>, write a function that returns the Farey sequence as an array with a string representation of each fraction of the form \"</span><em><span>numerator/denominator</span></em><span>\".</span></p><h3><span>Examples</span></h3><pre><code>farey(1) ➞ [\"0/1\", \"1/1\"]\n\nfarey(5) ➞ [\"0/1\", \"1/5\", \"1/4\", \"1/3\", \"2/5\", \"1/2\", \"3/5\", \"2/3\", \"3/4\", \"4/5\", \"1/1\"]\n\nfarey(7) ➞ [\"0/1\", \"1/7\", \"1/6\", \"1/5\", \"1/4\", \"2/7\", \"1/3\", \"2/5\", \"3/7\", \"1/2\", \"4/7\", \"3/5\", \"2/3\", \"5/7\", \"3/4\", \"4/5\", \"5/6\", \"6/7\", \"1/1\"]</code></pre><h3><span>Notes</span></h3><ul><li><span>The sequence should always start with \"0/1\" and end with \"1/1\".</span></li><li><span>It is expected from the challenge-takers to come up with a solution using the concept of </span><strong><span>recursion</span></strong><span> or the so-called </span><strong><span>recursive approach</span></strong><span>.</span></li><li><span>You can read on more topics about recursion (see </span><strong><span>Resources</span></strong><span> tab) if you aren't familiar with it yet or hasn't fully understood the concept behind it before taking up this challenge or unless otherwise.</span></li><li><span>There will be no exceptions to handle, all inputs are positive integers. </span></li><li><span>A recursive approach is prone to </span><strong><span>Uncaught RangeError</span></strong><span> or exceededing the maximum call size of the stack.</span></li><li><strong><em><span>Optional</span></em></strong><span>: Try to solve this with the least lines of code.</span></li></ul>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"arrays",
			"logic",
			"recursion"
		],
		"tests": [
			"const recursive = f => (`${f}`.match(RegExp(`${f.name}`,'gm'))||[]).length > +(/function/.test(f))",
			"Test.assertEquals(recursive(farey), true)",
			"Test.assertNotEquals(recursive(farey), false, \"Recursion is required!\")",
			"​",
			"let [seq, frac] = [[1, 3, 5, 7, 9, 10, 12, 14, 16], [",
			"      ['0/1', '1/1'],",
			"      ['0/1', '1/3', '1/2', '2/3', '1/1'],",
			"      ['0/1', '1/5', '1/4', '1/3', '2/5', '1/2', '3/5', '2/3', '3/4', '4/5', '1/1'],",
			"      ['0/1', '1/7', '1/6', '1/5', '1/4', '2/7', '1/3', '2/5', '3/7', '1/2', '4/7', '3/5', '2/3', '5/7', '3/4', '4/5', '5/6', '6/7', '1/1'],",
			"      ['0/1', '1/9', '1/8', '1/7', '1/6', '1/5', '2/9', '1/4', '2/7', '1/3', '3/8', '2/5', '3/7', '4/9', '1/2', '5/9', '4/7', '3/5', '5/8', '2/3', '5/7', '3/4', '7/9', '4/5', '5/6', '6/7', '7/8', '8/9', '1/1'],",
			"      ['0/1', '1/10', '1/9', '1/8', '1/7', '1/6', '1/5', '2/9', '1/4', '2/7', '3/10', '1/3', '3/8', '2/5', '3/7', '4/9', '1/2', '5/9', '4/7', '3/5', '5/8', '2/3', '7/10', '5/7', '3/4', '7/9', '4/5', '5/6', '6/7', '7/8', '8/9', '9/10', '1/1'],",
			"      ['0/1', '1/12', '1/11', '1/10', '1/9', '1/8', '1/7', '1/6', '2/11', '1/5', '2/9', '1/4', '3/11', '2/7', '3/10', '1/3', '4/11', '3/8', '2/5', '5/12', '3/7', '4/9', '5/11', '1/2', '6/11', '5/9', '4/7', '7/12', '3/5', '5/8', '7/11', '2/3', '7/10', '5/7', '8/11', '3/4', '7/9', '4/5', '9/11', '5/6', '6/7', '7/8', '8/9', '9/10', '10/11', '11/12', '1/1'],",
			"      ['0/1', '1/14', '1/13', '1/12', '1/11', '1/10', '1/9', '1/8', '1/7', '2/13', '1/6', '2/11', '1/5', '3/14', '2/9', '3/13', '1/4', '3/11', '2/7', '3/10', '4/13', '1/3', '5/14', '4/11', '3/8', '5/13', '2/5', '5/12', '3/7', '4/9', '5/11', '6/13', '1/2', '7/13', '6/11', '5/9', '4/7', '7/12', '3/5', '8/13', '5/8', '7/11', '9/14', '2/3', '9/13', '7/10', '5/7', '8/11', '3/4', '10/13', '7/9', '11/14', '4/5', '9/11', '5/6', '11/13', '6/7', '7/8', '8/9', '9/10', '10/11', '11/12', '12/13', '13/14', '1/1'],",
			"      ['0/1', '1/16', '1/15', '1/14', '1/13', '1/12', '1/11', '1/10', '1/9', '1/8', '2/15', '1/7', '2/13', '1/6', '2/11', '3/16', '1/5', '3/14', '2/9', '3/13', '1/4', '4/15', '3/11', '2/7', '3/10', '4/13', '5/16', '1/3', '5/14', '4/11', '3/8', '5/13', '2/5', '5/12', '3/7', '7/16', '4/9', '5/11', '6/13', '7/15', '1/2', '8/15', '7/13', '6/11', '5/9', '9/16', '4/7', '7/12', '3/5', '8/13', '5/8', '7/11', '9/14', '2/3', '11/16', '9/13', '7/10', '5/7', '8/11', '11/15', '3/4', '10/13', '7/9', '11/14', '4/5', '13/16', '9/11', '5/6', '11/13', '6/7', '13/15', '7/8', '8/9', '9/10', '10/11', '11/12', '12/13', '13/14', '14/15', '15/16', '1/1']",
			"    ]]",
			"for (let i in seq) Test.assertSimilar(farey(seq[i]), frac[i])"
		],
		"starterFn": [
			"1\nfunction farey(s) {",
			"2\n  //your recursive implementation of the code",
			"3\n  return farey(s)",
			"4\n}"
		],
		"url": "https://edabit.com/challenge/JXwdqPmX3KTeoGNGi"
	},
	{
		"title": "Happy Numbers & More",
		"description": "<p><span>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</span></p><p><span>A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.</span></p><p><span>A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself.</span></p><p><span>A triangular number counts objects arranged in an equilateral triangle. The nth triangular number is the number of dots in the triangular arrangement with n dots on a side, and is equal to the sum of the n natural numbers from 1 to n. </span></p><h3><span>Objective</span></h3><p><span>Create a function that takes a number as an argument and returns a print showing if the number is happy or not, if the number is prime or not, if the number is perfect or not and if the number is triangular or not.</span></p><h3><span>Examples</span></h3><pre><code>happy(2) ➞\n\"2 is an unhappy number.\n2 is a prime number.\n2 is not a perfect number.\n2 is not a triangular number.\"\n\n\nhappy(7) ➞\n\"7 is a happy number.\n7 is a prime number.\n7 is not a perfect number.\n7 is not a triangular number.\"\n\n\nhappy(8128) ➞\n\"8128 is a happy number.\n8128 is not a prime number.\n8128 is a perfect number.\n8128 is a triangular number.\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "Deep Xavier",
		"publishedByUrl": "https://edabit.com/user/a777e8chPvJkY3tKa",
		"language": "JavaScript",
		"tags": [
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(happy(-1), ",
			"'-1 is an unhappy number.\\n' +",
			"'-1 is not a prime number.\\n' +",
			"'-1 is not a perfect number.\\n' +",
			"'-1 is not a triangular number.')",
			"​",
			"Test.assertEquals(happy(0), ",
			"'0 is an unhappy number.\\n' +",
			"'0 is not a prime number.\\n' +",
			"'0 is not a perfect number.\\n' +",
			"'0 is a triangular number.')",
			"​",
			"Test.assertEquals(happy(1), ",
			"'1 is a happy number.\\n' +",
			"'1 is not a prime number.\\n' +",
			"'1 is not a perfect number.\\n' +",
			"'1 is a triangular number.')",
			"​",
			"Test.assertEquals(happy(2), ",
			"'2 is an unhappy number.\\n' +",
			"'2 is a prime number.\\n' +",
			"'2 is not a perfect number.\\n' +",
			"'2 is not a triangular number.')",
			"​",
			"Test.assertEquals(happy(3), ",
			"'3 is an unhappy number.\\n' +"
		],
		"starterFn": [
			"1\nfunction happy(number) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/mjQxqBnNjAuvnEon7"
	},
	{
		"title": "Strong Password Checker",
		"description": "<p><span>A password is considered </span><strong><span>strong</span></strong><span> if all the following conditions are met:</span></p><ol><li><span>It has at least 8 characters and at most 20 characters.</span></li><li><span>It contains at least one lowercase letter, one uppercase letter and one digit.</span></li><li><span>It must NOT contain three repeating characters in a row (e.g. \"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met).</span></li></ol><p><span>Write a function that takes a string </span><code>str</code><span> and return the </span><strong><span>MINIMUM</span></strong><span> change required to make it a strong password. If it's already strong, return </span><code>0</code><span>.</span></p><h3><span>Examples</span></h3><pre><code>strongPasswordChecker(\"Edabit!\") ➞ 1\n// 7 characters total, need to add one more digit for a strong password.\n// 1 minimum change.\n\nstrongPasswordChecker(\"edabit1!\") ➞ 1\n// 8 characters total, need to add an uppercase letter.\n// 1 minimum change.\n\nstrongPasswordChecker(\"EDABITEDABITEDABITEDA\") ➞ 3\n// 21 characters total, only uppercase letters, need to delete one\n// character and replace two characters, 1 with a digit, 1 with a\n// lowercase letter.\n// 3 minimum changes.\n\nstrongPasswordChecker(\"Edaaaabit!!1\") ➞ 1\n// Contains more than 3 repeating characters in a row - \"aaaa\", need\n// to replace an \"a\" with a different character (e.g. \"a3aa\" or in some\n// cases add a character in the middle \"aa2aa\".\n// 1 minimum change.</code></pre><h3><span>Notes</span></h3><ul><li><span>Insertion, deletion or replacement of any one character isl considered one change.</span></li><li><span>Spaces will be ignored for this challange.</span></li></ul>",
		"publishedBy": "DanielosC",
		"publishedByUrl": "https://edabit.com/user/vn6nR36mdfY8z2zKx",
		"language": "JavaScript",
		"tags": [
			"functional_programming",
			"higher_order_functions",
			"logic",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(strongPasswordChecker('Edabit!'), 1)",
			"Test.assertEquals(strongPasswordChecker('edabit1!'), 1)",
			"Test.assertEquals(strongPasswordChecker('EDABITEDABITEDABITEDA'), 3)",
			"Test.assertEquals(strongPasswordChecker('Edaaaabit!!1'), 1)",
			"Test.assertEquals(strongPasswordChecker('Edab1111111t!!!'), 3)",
			"Test.assertEquals(strongPasswordChecker('1234'), 4)",
			"Test.assertEquals(strongPasswordChecker('1234ABCD'), 1)",
			"Test.assertEquals(strongPasswordChecker('ilikeapples'), 2)",
			"Test.assertEquals(strongPasswordChecker('password1234'), 1)",
			"Test.assertEquals(strongPasswordChecker('passAword123B!2%##4'), 0)",
			"Test.assertEquals(strongPasswordChecker('S$t@r1o2n3gPas3swrd'), 0)",
			"Test.assertEquals(strongPasswordChecker('!!2aEd'), 2)",
			"Test.assertEquals(strongPasswordChecker('Arewehumanorarewecoders?'), 5)",
			"Test.assertEquals(strongPasswordChecker('RosesAreRedVioletsAreBlue'), 6)",
			"Test.assertEquals(strongPasswordChecker('Unexpected\"{\"OnLine32'), 1)",
			"Test.assertEquals(strongPasswordChecker('ICanTypeAnythingHereAndGetAwayWithIt'), 17)",
			"Test.assertEquals(strongPasswordChecker('orcani?'), 2)",
			"Test.assertEquals(strongPasswordChecker('ULTRAstrongP455w0rdthatstoolong'), 11)",
			"Test.assertEquals(strongPasswordChecker('7777777777777777777777777'), 11)",
			"Test.assertEquals(strongPasswordChecker('aaaaaaaaaaaaaaaaaaaaaaa'), 9)",
			"Test.assertEquals(strongPasswordChecker('aaaaaaaa'), 2)",
			"Test.assertEquals(strongPasswordChecker('LLLLLLLLLLLLLLLLLLLL'), 6)",
			"Test.assertEquals(strongPasswordChecker(''), 8)"
		],
		"starterFn": [
			"1\nfunction strongPasswordChecker(str) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/DHXAMErsWL4y98hH6"
	},
	{
		"title": "Rational Number",
		"description": "<p><span>Declare a </span><code>rational()</code><span> function that gets two natural numbers (</span><code>a</code><span>, </span><code>b</code><span>) and return a string containing a record of the rational number </span><code>a</code><span> / </span><code>b</code><span> in the form of a decimal fraction, possibly </span><strong><span>periodic</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>rational(2, 5) ➞ \"0.4\"\n\nrational(1, 6) ➞ \"0.1(6)\"\n\nrational(1, 3) ➞ \"0.(3)\"\n\nrational(1, 7) ➞ \"0.(142857)\"\n\nrational(1, 77) ➞ \"0.(012987)\"</code></pre><h3><span>Notes</span></h3><ul><li><span>Always </span><code>a &lt; b</code><span>.</span></li><li><span>The length of a periodic fraction can be more than </span><strong><span>20 numbers</span></strong></li><li><span>You can find a </span><strong><span>hint</span></strong><span> in the </span><strong><span>Comments</span></strong><span>.</span></li></ul>",
		"publishedBy": "BlackJack007",
		"publishedByUrl": "https://edabit.com/user/3qfdbT7qWZLXAZe5W",
		"language": "JavaScript",
		"tags": [
			"algorithms",
			"logic",
			"math"
		],
		"tests": [
			"Test.assertEquals(Rational(2, 5),  \"0.4\")",
			"Test.assertEquals(Rational(1, 6),  \"0.1(6)\")",
			"Test.assertEquals(Rational(1, 3),  \"0.(3)\")",
			"Test.assertEquals(Rational(1, 7),  \"0.(142857)\")",
			"Test.assertEquals(Rational(1, 77),  \"0.(012987)\")",
			"Test.assertEquals(Rational(13, 26),  \"0.5\")",
			"Test.assertEquals(Rational(1, 13),  \"0.(076923)\")",
			"Test.assertEquals(Rational(1, 125),  \"0.008\")",
			"Test.assertEquals(Rational(1, 450),  \"0.00(2)\")",
			"Test.assertEquals(Rational(27, 125000),  \"0.000216\")",
			"Test.assertEquals(Rational(9, 125000),  \"0.000072\")",
			"Test.assertEquals(Rational(1, 152),  \"0.006(578947368421052631)\")",
			"Test.assertEquals(Rational(1, 1225),  \"0.00(081632653061224489795918367346938775510204)\")"
		],
		"starterFn": [
			"1\nfunction rational(a, b) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/wDupLvaX3ptSQEh6r"
	},
	{
		"title": "Additive Number",
		"description": "<p><span>Write a function that checks if a given string contains an </span><strong><span>additive sequence</span></strong><span> or not. A string contains an additive sequence if its digits can make a sequence of numbers in which every number is the sum of  the previous two numbers. A valid additive sequence should contain at least three numbers.</span></p><h3><span>Examples</span></h3><pre><code>isAdditive(\"112358\") ➞ true\n// The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n// 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n\nisAdditive(\"129881000\") ➞ true\n// Each number can contain 1 or more digits: 12, 988, 1000.\n// 12 + 988 = 1000\n\nisAdditive(\"12988110101891\") ➞ true\n// 129 + 881 = 1010, 881 + 1010 = 1891\n\nisAdditive(\"123456789\") ➞ false\n\nisAdditive(\"300045007500\") ➞ true</code></pre><h3><span>Notes</span></h3><ul><li><span>The string will contain only digits </span><code>0 ➞ 9</code></li><li><span>Numbers in the additive sequence </span><strong><span>cannot</span></strong><span> have leading zeros, so sequence </span><code>1, 2, 03</code><span> or </span><code>1, 02, 3</code><span> is invalid.</span></li></ul>",
		"publishedBy": "DanielosC",
		"publishedByUrl": "https://edabit.com/user/vn6nR36mdfY8z2zKx",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"algorithms",
			"math",
			"numbers"
		],
		"tests": [
			"Test.assertEquals(isAdditive('112358'), true)",
			"Test.assertEquals(isAdditive('129881000'), true)",
			"Test.assertEquals(isAdditive('12988110101891'), true)",
			"Test.assertEquals(isAdditive('123456789'), false)",
			"Test.assertEquals(isAdditive('123'), true)",
			"Test.assertEquals(isAdditive('10112132'), true)",
			"Test.assertEquals(isAdditive('5566121186'), false)",
			"Test.assertEquals(isAdditive('5566121188'), false)",
			"Test.assertEquals(isAdditive('5566121187'), true)",
			"Test.assertEquals(isAdditive('1000150025004000'), true)",
			"Test.assertEquals(isAdditive('10001501150'), true)",
			"Test.assertEquals(isAdditive('10001500250'), false)",
			"Test.assertEquals(isAdditive('4812203243'), false)",
			"Test.assertEquals(isAdditive('1758998571116160'), true)",
			"Test.assertEquals(isAdditive('1894587012189458703189458705378917408'), true)",
			"Test.assertEquals(isAdditive('1000100010100010001010101010'), true)",
			"Test.assertEquals(isAdditive('189458701218945873189458705378917408'), false)",
			"Test.assertEquals(isAdditive('10001000101000100010010101010'), false)",
			"Test.assertEquals(isAdditive('991819919'), true)",
			"Test.assertEquals(isAdditive('99182746'), false)",
			"Test.assertEquals(isAdditive('58013'), false)",
			"Test.assertEquals(isAdditive('0369'), false, \"Starts with '0'\")",
			"Test.assertEquals(isAdditive('34'), false, \"Too short\")",
			"Test.assertEquals(isAdditive(''), false)"
		],
		"starterFn": [
			"1\nconst isAdditive = n => {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/sF9a4Dkh5yiWtbJd6"
	},
	{
		"title": "First n Digits of Pi",
		"description": "<p><span>As far as we currently know, approximations for the mathematical constant </span><strong><span>pi</span></strong><span> (π) in the history of mathematics started surfacing with Ancient Babylonians, who found its correct truncation up to 1 decimal place. During the 5th century, the Chinese mathematician Zu Chongzhi raised it to 7 decimal places and from the 18th century onwards the number of correct pi decimal places has seen steady growth.</span></p><p><span>Since the middle of the 20th century, the approximation of pi has been the task of electronic digital computers. During the 2019 Pi Day on the 14th of March, the Japanese computer scientist </span><em><span>Emma Haruka Iwao</span></em><span> released the currently most accurate value of pi with more than 31.4 trillion digits, using 170 Terabytes of data.</span></p><p><span>Your task is to create a function that takes a positive integer </span><code>n</code><span> as an argument and returns the value of </span><strong><span>pi</span></strong><span> with its first </span><code>n</code><span> decimal digits.</span></p><p><span>Taylor series are usually used to get finer approximations. To make this challenge approachable to anyone, the following formula is suggested:</span></p><p><img src=\"https://edabit-challenges.s3.amazonaws.com/c021371bba1389081786f93100ecc8b4.svg\"></p><h3><span>Examples</span></h3><pre><code>pi(1) ➞ \"3.1\"\n\npi(2) ➞ \"3.14\"\n\npi(30) ➞ \"3.141592653589793238462643383279\"</code></pre><h3><span>Notes</span></h3><p><span>N/A</span></p>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"algebra",
			"loops",
			"math"
		],
		"tests": [
			"const PI = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640789512694683983525957098258226205224894077267194782684826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441365497627807977156914359977001296160894416948685558484063534220722258284886481584560285060168427394522674676788952521385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515237462343645428584447952658678210511413547357395231134271661021359695362314429524849371871101457654035902799344037420073105785390621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752590709154814165498594616371802709819943099244889575712828905923233260972997120844335732654893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201913020330380197621101100449293215160842444859637669838952286847831235526582131449576857262433441893039686426243410773226978028073189154411010446823252716201052652272111660396665573092547110557853763466820653109896526918620564769312570586356620185581007293606598764861179104533488503461136576867532494416680396265797877185560845529654126654085306143444318586769751456614068007002378776591344017127494704205622305389945613140711270004078547332699390814546646458807972708266830634328587856983052358089330657574067954571637752542021149557615814002501262285941302164715509792592309907965473761255176567513575178296664547791745011299614890304639947132962107340437518957359614589019389713111790429782856475032031986915140287080859904801094121472213179476477726224142548545403321571853061422881375850430633217518297986622371721591607716692547487389866549494501146540628433663937900397692656721463853067360965712091807638327166416274888800786925602902284721040317211860820419000422966171196377921337575114959501566049631862947265473642523081770367515906735023507283540567040386743513622224771589150495309844489333096340878076932599397805419341447377441842631298608099888687413260472156951623965864573021631598193195167353812974167729478672422924654366800980676928238280689964004824354037014163149658979409243237896907069779422362508221688957383798623001593776471651228935786015881617557829735233446042815126272037343146531977774160319906655418763979293344195215413418994854447345673831624993419131814809277771038638773431772075456545322077709212019051660962804909263601975988281613323166636528619326686336062735676303544776280350450777235547105859548702790814356240145171806246436267945612753181340783303362542327839449753824372058353114771199260638133467768796959703098339130771098704085913374641442822772634659470474587847787201927715280731767907707157213444730605700733492436931138350493163128404251219256517980694113528013147013047816437885185290928545201165839341965621349143415956258658655705526904965209858033850722426482939728584783163057777560688876446248246857926039535277348030480290058760758251047470916439613626760449256274204208320856611906254543372131535958450687724602901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867446047746491599505497374256269010490377819868359381465741268049256487985561453723478673303904688383436346553794986419270563872931748723320837601123029911367938627089438799362016295154133714248928307220126901475466847653576164773794675200490757155527819653621323926406160136358155907422020203187277605277219005561484255518792530343513984425322341576233610642506390497500865627109535919465897514131034822769306247435363256916078154781811528436679570611086153315044521274739245449454236828860613408414863776700961207151249140430272538607648236341433462351897576645216413767969031495019108575984423919862916421939949072362346468441173940326591840443780513338945257423995082965912285085558215725031071257012668302402929525220118726767562204154205161841634847565169998116141010029960783869092916030288400269104140792886215078424516709087000699282120660418371806535567252532567532861291042487761825829765157959847035622262934860034158722980534989650226291748788202734209222245339856264766914905562842503912757710284027998066365825488926488025456610172967026640765590429099456815065265305371829412703369313785178609040708667114965583434347693385781711386455873678123014587687126603489139095620099393610310291616152881384379099042317473363948045759314931405297634757481193567091101377517210080315590248530906692037671922033229094334676851422144773793937517034436619910403375111735471918550464490263655128162288244625759163330391072253837421821408835086573917715096828874782656995995744906617583441375223970968340800535598491754173818839994469748676265516582765848358845314277568790029095170283529716344562129640435231176006651012412006597558512761785838292041974844236080071930457618932349229279650198751872127267507981255470958904556357921221033346697499235630254947802490114195212382815309114079073860251522742995818072471625916685451333123948049470791191532673430282441860414263639548000448002670496248201792896476697583183271314251702969234889627668440323260927524960357996469256504936818360900323809293459588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678\";",
			"​",
			"[",
			"  1, 2, 3, 4, 5, 6, 7, 8, 9, 10,",
			"  11, 13, 15, 20, 30, 50, 100,",
			"  500, 1000, 2000, 5000, 9000",
			"].forEach(n => Test.assertEquals(pi(n), PI.slice(0, n + 2)))"
		],
		"starterFn": [
			"1\nfunction pi(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/u3Sgc7jTa6DnWYAsJ"
	},
	{
		"title": "Who's That Polygon?",
		"description": "<p><span>Every </span><strong><span>polygon</span></strong><span> has an official name. Individual polygons are named according to the number of sides, combining a Greek-derived numerical prefix with the suffix </span><em><span>-gon</span></em><span>, e.g. </span><em><span>pentagon</span></em><span>, </span><em><span>dodecagon</span></em><span>.</span></p><p><span>Write a function that takes an integer </span><code>n</code><span> as argument and returns the official name of a n-sided polygon.</span></p><p><span>The following prefixes table is used to construct the name of a polygon.</span></p><table><thead><tr><th style=\"text-align: right;\"></th><th><span>Ones</span></th><th style=\"text-align: right;\"></th><th><span>Tens</span></th><th style=\"text-align: right;\"></th><th><span>Hundreds</span></th></tr></thead><tbody><tr><td style=\"text-align: right;\"><span>1</span></td><td><span>hena-, hen-</span></td><td style=\"text-align: right;\"><span>10</span></td><td><span>deca-</span></td><td style=\"text-align: right;\"><span>100</span></td><td><span>hecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>2</span></td><td><span>di-, do-</span></td><td style=\"text-align: right;\"><span>20</span></td><td><span>icosi-, icosa-</span></td><td style=\"text-align: right;\"><span>200</span></td><td><span>dohecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>3</span></td><td><span>tri-, tria-</span></td><td style=\"text-align: right;\"><span>30</span></td><td><span>triaconta-</span></td><td style=\"text-align: right;\"><span>300</span></td><td><span>triahecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>4</span></td><td><span>tetra-</span></td><td style=\"text-align: right;\"><span>40</span></td><td><span>tetraconta-</span></td><td style=\"text-align: right;\"><span>400</span></td><td><span>tetrahecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>5</span></td><td><span>penta-</span></td><td style=\"text-align: right;\"><span>50</span></td><td><span>pentaconta-</span></td><td style=\"text-align: right;\"><span>500</span></td><td><span>pentahecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>6</span></td><td><span>hexa-</span></td><td style=\"text-align: right;\"><span>60</span></td><td><span>hexaconta-</span></td><td style=\"text-align: right;\"><span>600</span></td><td><span>hexahecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>7</span></td><td><span>hepta-</span></td><td style=\"text-align: right;\"><span>70</span></td><td><span>heptaconta-</span></td><td style=\"text-align: right;\"><span>700</span></td><td><span>heptahecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>8</span></td><td><span>octa-</span></td><td style=\"text-align: right;\"><span>80</span></td><td><span>octaconta-</span></td><td style=\"text-align: right;\"><span>800</span></td><td><span>octahecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>9</span></td><td><span>ennea-</span></td><td style=\"text-align: right;\"><span>90</span></td><td><span>enneaconta-</span></td><td style=\"text-align: right;\"><span>900</span></td><td><span>enneahecta-</span></td></tr></tbody></table><p><span>For polygons with 3 through 9 sides, simply add \"-gon\" to the ones prefixes. For 10 through 99 sides, you return the tens prefix followed by the ones prefix and then by \"-gon\". For 100 through 999 sides, you start from the hundreds prefix, then add the tens prefix and finally the ones prefix followed by \"-gon\".</span></p><p><span>For polygons with more than 999 sides, the following prefixes are used similarly to how \"conta-\" and \"hecta-\" are used for tens and hundreds places respectively:</span></p><table><thead><tr><th style=\"text-align: right;\"><span>Place</span></th><th><span>Prefix</span></th></tr></thead><tbody><tr><td style=\"text-align: right;\"><span>10</span></td><td><span>conta-</span></td></tr><tr><td style=\"text-align: right;\"><span>100</span></td><td><span>hecta-</span></td></tr><tr><td style=\"text-align: right;\"><span>1000</span></td><td><span>chilia-</span></td></tr><tr><td style=\"text-align: right;\"><span>10,000</span></td><td><span>myria-</span></td></tr><tr><td style=\"text-align: right;\"><span>100,000</span></td><td><span>decamyria-</span></td></tr><tr><td style=\"text-align: right;\"><span>200,000</span></td><td><span>icosamyria-</span></td></tr><tr><td style=\"text-align: right;\"><span>300,000</span></td><td><span>triacontamyria-</span></td></tr><tr><td style=\"text-align: right;\"><span>1,000,000</span></td><td><span>mega-</span></td></tr><tr><td style=\"text-align: right;\"><span>1,000,000,000</span></td><td><span>giga-</span></td></tr><tr><td style=\"text-align: right;\"><span>1,000,000,000,000</span></td><td><span>tera-</span></td></tr></tbody></table><p><span>And finally, the 10¹⁰⁰-gon is called </span><strong><span>googolgon</span></strong><span> and the ∞-gon (with a countable infinite number of sides) is called </span><strong><span>apeirogon</span></strong><span>.</span></p><h3><span>Examples</span></h3><pre><code>polygonName(3) ➞ \"triangle\"\n// exception of: tri-gon\n\npolygonName(4) ➞ \"quadrilateral\"\n// exception of: tetra-gon\n\npolygonName(5) ➞ \"pentagon\"\n// penta-gon\n\npolygonName(7) ➞ \"heptagon\"\n// hepta-gon\n\npolygonName(19) ➞ \"enneadecagon\"\n// ennea-deca-gon\n\npolygonName(36) ➞ \"triacontahexagon\"\n// triaconta-hexa-gon\n\npolygonName(428) ➞ \"tetrahectaicosioctagon\"\n// tetrahecta-icosi-octa-gon\n\npolygonName(12_345) ➞ \"myriadichiliatriahectatetracontapentagon\"\n// myria-dichilia-triahecta-tetraconta-penta-gon</code></pre><h3><span>Notes</span></h3><ul><li><span>The triangle, quadrilateral and nonagon are exceptions, although the regular forms </span><em><span>trigon</span></em><span>, </span><em><span>tetragon</span></em><span>, and </span><em><span>enneagon</span></em><span> are sometimes encountered as well.</span></li><li><span>Check the tests to spot other exceptions.</span></li></ul>",
		"publishedBy": "xAlien95",
		"publishedByUrl": "https://edabit.com/user/cRpaCxYRmGcN3Nsoj",
		"language": "JavaScript",
		"tags": [
			"data_structures",
			"strings"
		],
		"tests": [
			"Test.assertEquals(polygonName(1), \"henagon\")",
			"Test.assertEquals(polygonName(2), \"digon\")",
			"Test.assertEquals(polygonName(3), \"triangle\")",
			"Test.assertEquals(polygonName(4), \"quadrilateral\")",
			"Test.assertEquals(polygonName(5), \"pentagon\")",
			"Test.assertEquals(polygonName(6), \"hexagon\")",
			"Test.assertEquals(polygonName(7), \"heptagon\")",
			"Test.assertEquals(polygonName(8), \"octagon\")",
			"Test.assertEquals(polygonName(9), \"nonagon\")",
			"Test.assertEquals(polygonName(10), \"decagon\")",
			"Test.assertEquals(polygonName(11), \"hendecagon\")",
			"Test.assertEquals(polygonName(12), \"dodecagon\")",
			"Test.assertEquals(polygonName(13), \"tridecagon\")",
			"Test.assertEquals(polygonName(14), \"tetradecagon\")",
			"Test.assertEquals(polygonName(15), \"pentadecagon\")",
			"Test.assertEquals(polygonName(16), \"hexadecagon\")",
			"Test.assertEquals(polygonName(17), \"heptadecagon\")",
			"Test.assertEquals(polygonName(18), \"octadecagon\")",
			"Test.assertEquals(polygonName(19), \"enneadecagon\")",
			"Test.assertEquals(polygonName(20), \"icosagon\")",
			"Test.assertEquals(polygonName(21), \"icosihenagon\")",
			"Test.assertEquals(polygonName(22), \"icosidigon\")",
			"Test.assertEquals(polygonName(23), \"icositrigon\")",
			"Test.assertEquals(polygonName(24), \"icositetragon\")",
			"Test.assertEquals(polygonName(25), \"icosipentagon\")",
			"Test.assertEquals(polygonName(26), \"icosihexagon\")"
		],
		"starterFn": [
			"1\nfunction polygonName(n) {",
			"2\n  ",
			"3\n}"
		],
		"url": "https://edabit.com/challenge/8ezPNZZpLTzCHotmw"
	}
]